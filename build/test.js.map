{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/node.ts","webpack:///./src/util.ts","webpack:///external \"jQuery\"","webpack:///./src/simple.widget.ts","webpack:///./src/tree.jquery.ts","webpack:///./src/version.ts","webpack:///./src/dragAndDropHandler.ts","webpack:///./src/elementsRenderer.ts","webpack:///./src/dataLoader.ts","webpack:///./src/keyHandler.ts","webpack:///./src/mouse.widget.ts","webpack:///./src/saveStateHandler.ts","webpack:///./src/scrollHandler.ts","webpack:///./src/selectNodeHandler.ts","webpack:///./src/nodeElement.ts","webpack:///./src_test/utilsForTest.ts","webpack:///./src_test/test.ts","webpack:///./src_test/testJqtree.ts","webpack:///./src_test/testNodeUtil.ts","webpack:///./src_test/testTree.ts","webpack:///./src_test/testUtil.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;AClFa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,uDAAuD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,4BAA4B;AACnE;AACA;AACA,gCAAgC,gBAAgB;AAChD,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,iBAAiB,sBAAsB;;AAEvC,iBAAiB,sCAAsC;;AAEvD,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oBAAoB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oDAAoD,gBAAgB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,uBAAuB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,2BAA2B,EAAE;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,gBAAgB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,4BAA4B,EAAE;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,yCAAyC,wBAAwB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,4BAA4B;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;AC1iBa;AACb;AACA;AACA,8BAA8B,6CAA6C;AAC3E,mCAAmC,gCAAgC;AACnE,0CAA0C;AAC1C;AACA;AACA,6BAA6B;AAC7B,4BAA4B;AAC5B,4BAA4B;AAC5B,8BAA8B;AAC9B,8BAA8B;AAC9B,+BAA+B;AAC/B;AACA,0CAA0C,mCAAmC;;;;;;;ACf7E,wB;;;;;;;ACAa;AACb;AACA;AACA,kCAAkC,sCAAsC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,gBAAgB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,gBAAgB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,gBAAgB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;ACzGa;AACb;AACA;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA,gDAAgD,OAAO;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,CAAW;AACnC,aAAa,mBAAO,CAAC,CAAQ;AAC7B,2BAA2B,mBAAO,CAAC,CAAsB;AACzD,yBAAyB,mBAAO,CAAC,CAAoB;AACrD,mBAAmB,mBAAO,CAAC,CAAc;AACzC,mBAAmB,mBAAO,CAAC,CAAc;AACzC,qBAAqB,mBAAO,CAAC,EAAgB;AAC7C,yBAAyB,mBAAO,CAAC,EAAoB;AACrD,sBAAsB,mBAAO,CAAC,EAAiB;AAC/C,0BAA0B,mBAAO,CAAC,EAAqB;AACvD,sBAAsB,mBAAO,CAAC,CAAiB;AAC/C,aAAa,mBAAO,CAAC,CAAQ;AAC7B,aAAa,mBAAO,CAAC,CAAQ;AAC7B,oBAAoB,mBAAO,CAAC,EAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,yBAAyB,EAAE;AAClF,sDAAsD,yBAAyB,EAAE;;AAEjF;AACA;AACA;AACA,0CAA0C,yBAAyB,EAAE;AACrE,2CAA2C,yBAAyB,EAAE;AACtmEAAmE;AACncAAcsCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,8EAA8E;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjgDAAgD,sCAAsC;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,kBAAkB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,wCAAwC;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,cAAc;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;;;;;;;;AC79Ba;AACb;AACA;AACA;;;;;;;;ACHa;AACb;AACA;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA,aAAa,mBAAO,CAAC,CAAQ;AAC7B,aAAa,mBAAO,CAAC,CAAQ;AAC7B,aAAa,maAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,yBAAyB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;ACveY;AACb;AACA,aAAa,mBAAO,CAAC,CAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,wBAAwB;AACva;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,0CAA0C,gBAAgB,iCAAiC,eAAe;AAC1G;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;AC3Fa;AACbrHa;AACb;AACA;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,sBAAsB,mBAAO,CAAC,CAAiB;AAC/C,kDAAkD;AAClD;AACA;AACA;AACA;AACA,CAAC,EAAE;AACH,oDAAoD;AACpD;AACA;AACA;AACA;AACA,CAAC,EAAE;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;AC/Ka;AACb;AACA,aAAa,mBAAO,CAAC,CAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,uBAAuB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;AC/Na;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,6BAA6B;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,gBAAgB;AACvlNa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,yBAAyB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;AC7Ga;AACb;AACA;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA,aAAa,mBAAO,CAAC,CAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,cAAc;AAC7C,wCAAwC,yBAAyB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,cAAc;AAC7C,wCAAwC,yBAAyB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;ACpNY;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,2CAA2C;AACxD,aAAa,2BAA2B;AACxC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,2BAA2B;AAC/C,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,cAAc,GAAG,cAAc;AACnD,KAAK;AACL;AACA;AACA,6CAA6C,kBAAkB,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,qBAAqB,EAAE;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACpFa;AACb;AACA,mBAAO,CAAC,EAAc;AACtB,mBAAO,CAAC,EAAgB;AACxB,mBAAO,CAAC,EAAY;AACpB,mBAAO,CAAC,EAAY;AACpB;;;;;;;;ACNa;AACb;AACA,mBAAO,CAAC,CAAoB;AAC5B,qBAAqB,mBAAO,CAAC,EAAgB;AAC7C,aAAa,mBAAO,CAAC,CAAa;AAClC,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA,gBAAgB,qBAAqB;AACrC;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,cAAc;AACd;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,0CAA0C;AAC1C,sBAAsB,yCAAyC,EAAE;AACjE,2BAA2B,EAAE,EAAE;AAC/B,wCAAwC,yBAAyB,EAAE;AACnE;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,sBAAsB;AAC/B;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa,GAAG,aAAa;AAC/C;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,4CAA4C,KAAK;AACjD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,4CAA4C;AAC5C,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,gCAAgC,gBAAgB,aAAa;AAC7D,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA,gBAAgB,mCAAmC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,qCAAqC,UAAU;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA,gBAAgB,mCAAmC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA;AACA,wCAAwC,UAAU;AAClD;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,gBAAgB,mCAAmC;AACnD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,gBAAgB,mCAAmC;AACnD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,gBAAgB,mCAAmC;AACnD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,4CAA4C;AAC5C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,gBAAgB,mCAAmC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,0CAA0C,aAAa;AACvD;AACA,gBAAgB,mCAAmC;AACnD;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0CAA0C;AAClE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,aAAa;AAC5D;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,sBAAsB,aAAa;AACnC,SAAS;AACT,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,aAAa;AAC5D;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,aAAa;AACvC;AACA,SAAS;AACT,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;;;;;;;;ACz+BY;AACb;AACA,6CAA6C;AAC7C,aAAa,mBAAO,CAAC,CAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;;;;;;;;ACbY;AACb;AACA,6CAA6C;AAC7C,qBAAqB,mBAAO,CAAC,EAAgB;AAC7C,aAAa,mBAAO,CAAC,CAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,kCAAkC;AAClC;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,iCAAiC;AACjC,uDAAuD;AACvD,uDAAuD;AACvD;AACA;AACA;AACA,CAAC;AACD;AACA,iCAAiC;AACjC,+BAA+B,sBAAsB;AACrD,+BAA+B,sBAAsB;AACrD,+BAA+B,sBAAsB;AACrD;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,iCAAiC;AACjC;AACA;AACA;AACA,CAAC;AACD;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,aAAa;AACrC,SAAS;AACT;AACA,CAAC;AACD;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,CAAC;AACD;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,CAAC;AACD;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,CAAC;AACD;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC,KAAK;AACL;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC,KAAK;AACL;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,qCAAqC,2BAA2B;AAChE,qCAAqC,2BAA2B;AAChE;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC,2BAA2B;AAChE,qCAAqC,2BAA2B;AAChE;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,iCAAiC;AACjC;AACA,oDAAoD,4BAA4B,EAAE;AAClF;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;AC1dY;AACb;AACA,6CAA6C;AAC7C,aAAa,mBAAO,CAAC,CAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,kDAAkD;AAClD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC","file":"test.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","\"use strict\";\nexports.__esModule = true;\nexports.Node = exports.getPosition = exports.getPositionName = exports.Position = void 0;\nvar Position;\n(function (Position) {\n    Position[Position[\"Before\"] = 1] = \"Before\";\n    Position[Position[\"After\"] = 2] = \"After\";\n    Position[Position[\"Inside\"] = 3] = \"Inside\";\n    Position[Position[\"None\"] = 4] = \"None\";\n})(Position = exports.Position || (exports.Position = {}));\nvar positionNames = {\n    before: Position.Before,\n    after: Position.After,\n    inside: Position.Inside,\n    none: Position.None,\n};\nexports.getPositionName = function (position) {\n    for (var name_1 in positionNames) {\n        if (Object.prototype.hasOwnProperty.call(positionNames, name_1)) {\n            if (positionNames[name_1] === position) {\n                return name_1;\n            }\n        }\n    }\n    return \"\";\n};\nexports.getPosition = function (name) { return positionNames[name]; };\nvar Node = /** @class */ (function () {\n    function Node(o, isRoot, nodeClass) {\n        if (isRoot === void 0) { isRoot = false; }\n        if (nodeClass === void 0) { nodeClass = Node; }\n        this.name = \"\";\n        this.isEmptyFolder = false;\n        this.setData(o);\n        this.children = [];\n        this.parent = null;\n        if (isRoot) {\n            this.idMapping = {};\n            this.tree = this;\n            this.nodeClass = nodeClass;\n        }\n    }\n    /*\n    Set the data of this node.\n\n    setData(string): set the name of the node\n    setdata(object): set attributes of the node\n\n    Examples:\n        setdata('node1')\n\n        setData({ name: 'node1', id: 1});\n\n        setData({ name: 'node2', id: 2, color: 'green'});\n\n    * This is an internal function; it is not in the docs\n    * Does not remove existing node values\n    */\n    Node.prototype.setData = function (o) {\n        var _this = this;\n        var setName = function (name) {\n            if (name != null) {\n                _this.name = name;\n            }\n        };\n        if (!o) {\n            return;\n        }\n        else if (typeof o !== \"object\") {\n            setName(o);\n        }\n        else {\n            for (var key in o) {\n                if (Object.prototype.hasOwnProperty.call(o, key)) {\n                    var value = o[key];\n                    if (key === \"label\" && typeof value === \"string\") {\n                        // You can use the 'label' key instead of 'name'; this is a legacy feature\n                        setName(value);\n                    }\n                    else if (key !== \"children\") {\n                        // You can't update the children using this function\n                        this[key] = value;\n                    }\n                }\n            }\n        }\n    };\n    /*\n    Create tree from data.\n\n    Structure of data is:\n    [\n        {\n            name: 'node1',\n            children: [\n                { name: 'child1' },\n                { name: 'child2' }\n            ]\n        },\n        {\n            name: 'node2'\n        }\n    ]\n    */\n    Node.prototype.loadFromData = function (data) {\n        this.removeChildren();\n        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n            var o = data_1[_i];\n            var node = new this.tree.nodeClass(o);\n            this.addChild(node);\n            if (typeof o === \"object\" &&\n                o[\"children\"] &&\n                o[\"children\"] instanceof Array) {\n                if (o[\"children\"].length === 0) {\n                    node.isEmptyFolder = true;\n                }\n                else {\n                    node.loadFromData(o[\"children\"]);\n                }\n            }\n        }\n    };\n    /*\n    Add child.\n\n    tree.addChild(\n        new Node('child1')\n    );\n    */\n    Node.prototype.addChild = function (node) {\n        this.children.push(node);\n        node.setParent(this);\n    };\n    /*\n    Add child at position. Index starts at 0.\n\n    tree.addChildAtPosition(\n        new Node('abc'),\n        1\n    );\n    */\n    Node.prototype.addChildAtPosition = function (node, index) {\n        this.children.splice(index, 0, node);\n        node.setParent(this);\n    };\n    /*\n    Remove child. This also removes the children of the node.\n\n    tree.removeChild(tree.children[0]);\n    */\n    Node.prototype.removeChild = function (node) {\n        // remove children from the index\n        node.removeChildren();\n        this.doRemoveChild(node);\n    };\n    /*\n    Get child index.\n\n    var index = getChildIndex(node);\n    */\n    Node.prototype.getChildIndex = function (node) {\n        return jQuery.inArray(node, this.children);\n    };\n    /*\n    Does the tree have children?\n\n    if (tree.hasChildren()) {\n        //\n    }\n    */\n    Node.prototype.hasChildren = function () {\n        return this.children.length !== 0;\n    };\n    Node.prototype.isFolder = function () {\n        return this.hasChildren() || this.load_on_demand;\n    };\n    /*\n    Iterate over all the nodes in the tree.\n\n    Calls callback with (node, level).\n\n    The callback must return true to continue the iteration on current node.\n\n    tree.iterate(\n        function(node, level) {\n           console.log(node.name);\n\n           // stop iteration after level 2\n           return (level <= 2);\n        }\n    );\n\n    */\n    Node.prototype.iterate = function (callback) {\n        var _iterate = function (node, level) {\n            if (node.children) {\n                for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n                    var child = _a[_i];\n                    var result = callback(child, level);\n                    if (result && child.hasChildren()) {\n                        _iterate(child, level + 1);\n                    }\n                }\n            }\n        };\n        _iterate(this, 0);\n    };\n    /*\n    Move node relative to another node.\n\n    Argument position: Position.BEFORE, Position.AFTER or Position.Inside\n\n    // move node1 after node2\n    tree.moveNode(node1, node2, Position.AFTER);\n    */\n    Node.prototype.moveNode = function (movedNode, targetNode, position) {\n        if (!movedNode.parent || movedNode.isParentOf(targetNode)) {\n            // - Node is parent of target node\n            // - Or, parent is empty\n            return;\n        }\n        else {\n            movedNode.parent.doRemoveChild(movedNode);\n            if (position === Position.After) {\n                if (targetNode.parent) {\n                    targetNode.parent.addChildAtPosition(movedNode, targetNode.parent.getChildIndex(targetNode) + 1);\n                }\n            }\n            else if (position === Position.Before) {\n                if (targetNode.parent) {\n                    targetNode.parent.addChildAtPosition(movedNode, targetNode.parent.getChildIndex(targetNode));\n                }\n            }\n            else if (position === Position.Inside) {\n                // move inside as first child\n                targetNode.addChildAtPosition(movedNode, 0);\n            }\n        }\n    };\n    /*\n    Get the tree as data.\n    */\n    Node.prototype.getData = function (includeParent) {\n        if (includeParent === void 0) { includeParent = false; }\n        function getDataFromNodes(nodes) {\n            return nodes.map(function (node) {\n                var tmpNode = {};\n                for (var k in node) {\n                    if ([\n                        \"parent\",\n                        \"children\",\n                        \"element\",\n                        \"tree\",\n                        \"isEmptyFolder\",\n                    ].indexOf(k) === -1 &&\n                        Object.prototype.hasOwnProperty.call(node, k)) {\n                        var v = node[k];\n                        tmpNode[k] = v;\n                    }\n                }\n                if (node.hasChildren()) {\n                    tmpNode[\"children\"] = getDataFromNodes(node.children);\n                }\n                return tmpNode;\n            });\n        }\n        if (includeParent) {\n            return getDataFromNodes([this]);\n        }\n        else {\n            return getDataFromNodes(this.children);\n        }\n    };\n    Node.prototype.getNodeByName = function (name) {\n        return this.getNodeByCallback(function (node) { return node.name === name; });\n    };\n    Node.prototype.getNodeByCallback = function (callback) {\n        var result = null;\n        this.iterate(function (node) {\n            if (callback(node)) {\n                result = node;\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n        return result;\n    };\n    Node.prototype.addAfter = function (nodeInfo) {\n        if (!this.parent) {\n            return null;\n        }\n        else {\n            var node = new this.tree.nodeClass(nodeInfo);\n            var childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex + 1);\n            if (typeof nodeInfo === \"object\" &&\n                nodeInfo[\"children\"] &&\n                nodeInfo[\"children\"] instanceof Array &&\n                nodeInfo[\"children\"].length) {\n                node.loadFromData(nodeInfo[\"children\"]);\n            }\n            return node;\n        }\n    };\n    Node.prototype.addBefore = function (nodeInfo) {\n        if (!this.parent) {\n            return null;\n        }\n        else {\n            var node = new this.tree.nodeClass(nodeInfo);\n            var childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex);\n            if (typeof nodeInfo === \"object\" &&\n                nodeInfo[\"children\"] &&\n                nodeInfo[\"children\"] instanceof Array &&\n                nodeInfo[\"children\"].length) {\n                node.loadFromData(nodeInfo[\"children\"]);\n            }\n            return node;\n        }\n    };\n    Node.prototype.addParent = function (nodeInfo) {\n        if (!this.parent) {\n            return null;\n        }\n        else {\n            var newParent = new this.tree.nodeClass(nodeInfo);\n            newParent.setParent(this.tree);\n            var originalParent = this.parent;\n            for (var _i = 0, _a = originalParent.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                newParent.addChild(child);\n            }\n            originalParent.children = [];\n            originalParent.addChild(newParent);\n            return newParent;\n        }\n    };\n    Node.prototype.remove = function () {\n        if (this.parent) {\n            this.parent.removeChild(this);\n            this.parent = null;\n        }\n    };\n    Node.prototype.append = function (nodeInfo) {\n        var node = new this.tree.nodeClass(nodeInfo);\n        this.addChild(node);\n        if (typeof nodeInfo === \"object\" &&\n            nodeInfo[\"children\"] &&\n            nodeInfo[\"children\"] instanceof Array &&\n            nodeInfo[\"children\"].length) {\n            node.loadFromData(nodeInfo[\"children\"]);\n        }\n        return node;\n    };\n    Node.prototype.prepend = function (nodeInfo) {\n        var node = new this.tree.nodeClass(nodeInfo);\n        this.addChildAtPosition(node, 0);\n        if (typeof nodeInfo === \"object\" &&\n            nodeInfo[\"children\"] &&\n            nodeInfo[\"children\"] instanceof Array &&\n            nodeInfo[\"children\"].length) {\n            node.loadFromData(nodeInfo[\"children\"]);\n        }\n        return node;\n    };\n    Node.prototype.isParentOf = function (node) {\n        var parent = node.parent;\n        while (parent) {\n            if (parent === this) {\n                return true;\n            }\n            parent = parent.parent;\n        }\n        return false;\n    };\n    Node.prototype.getLevel = function () {\n        var level = 0;\n        var node = this; // eslint-disable-line @typescript-eslint/no-this-alias\n        while (node.parent) {\n            level += 1;\n            node = node.parent;\n        }\n        return level;\n    };\n    Node.prototype.getNodeById = function (nodeId) {\n        return this.idMapping[nodeId];\n    };\n    Node.prototype.addNodeToIndex = function (node) {\n        if (node.id != null) {\n            this.idMapping[node.id] = node;\n        }\n    };\n    Node.prototype.removeNodeFromIndex = function (node) {\n        if (node.id != null) {\n            delete this.idMapping[node.id];\n        }\n    };\n    Node.prototype.removeChildren = function () {\n        var _this = this;\n        this.iterate(function (child) {\n            _this.tree.removeNodeFromIndex(child);\n            return true;\n        });\n        this.children = [];\n    };\n    Node.prototype.getPreviousSibling = function () {\n        if (!this.parent) {\n            return null;\n        }\n        else {\n            var previousIndex = this.parent.getChildIndex(this) - 1;\n            if (previousIndex >= 0) {\n                return this.parent.children[previousIndex];\n            }\n            else {\n                return null;\n            }\n        }\n    };\n    Node.prototype.getNextSibling = function () {\n        if (!this.parent) {\n            return null;\n        }\n        else {\n            var nextIndex = this.parent.getChildIndex(this) + 1;\n            if (nextIndex < this.parent.children.length) {\n                return this.parent.children[nextIndex];\n            }\n            else {\n                return null;\n            }\n        }\n    };\n    Node.prototype.getNodesByProperty = function (key, value) {\n        return this.filter(function (node) { return node[key] === value; });\n    };\n    Node.prototype.filter = function (f) {\n        var result = [];\n        this.iterate(function (node) {\n            if (f(node)) {\n                result.push(node);\n            }\n            return true;\n        });\n        return result;\n    };\n    Node.prototype.getNextNode = function (includeChildren) {\n        if (includeChildren === void 0) { includeChildren = true; }\n        if (includeChildren && this.hasChildren() && this.is_open) {\n            // First child\n            return this.children[0];\n        }\n        else {\n            if (!this.parent) {\n                return null;\n            }\n            else {\n                var nextSibling = this.getNextSibling();\n                if (nextSibling) {\n                    // Next sibling\n                    return nextSibling;\n                }\n                else {\n                    // Next node of parent\n                    return this.parent.getNextNode(false);\n                }\n            }\n        }\n    };\n    Node.prototype.getPreviousNode = function () {\n        if (!this.parent) {\n            return null;\n        }\n        else {\n            var previousSibling = this.getPreviousSibling();\n            if (previousSibling) {\n                if (!previousSibling.hasChildren() ||\n                    !previousSibling.is_open) {\n                    // Previous sibling\n                    return previousSibling;\n                }\n                else {\n                    // Last child of previous sibling\n                    return previousSibling.getLastChild();\n                }\n            }\n            else {\n                return this.getParent();\n            }\n        }\n    };\n    Node.prototype.getParent = function () {\n        // Return parent except if it is the root node\n        if (!this.parent) {\n            return null;\n        }\n        else if (!this.parent.parent) {\n            // Root node -> null\n            return null;\n        }\n        else {\n            return this.parent;\n        }\n    };\n    Node.prototype.getLastChild = function () {\n        if (!this.hasChildren()) {\n            return null;\n        }\n        else {\n            var lastChild = this.children[this.children.length - 1];\n            if (!lastChild.hasChildren() || !lastChild.is_open) {\n                return lastChild;\n            }\n            else {\n                return lastChild.getLastChild();\n            }\n        }\n    };\n    // Init Node from data without making it the root of the tree\n    Node.prototype.initFromData = function (data) {\n        var _this = this;\n        var addNode = function (nodeData) {\n            _this.setData(nodeData);\n            if (typeof nodeData === \"object\" &&\n                nodeData[\"children\"] &&\n                nodeData[\"children\"] instanceof Array &&\n                nodeData[\"children\"].length) {\n                addChildren(nodeData[\"children\"]);\n            }\n        };\n        var addChildren = function (childrenData) {\n            for (var _i = 0, childrenData_1 = childrenData; _i < childrenData_1.length; _i++) {\n                var child = childrenData_1[_i];\n                var node = new _this.tree.nodeClass(\"\");\n                node.initFromData(child);\n                _this.addChild(node);\n            }\n        };\n        addNode(data);\n    };\n    Node.prototype.setParent = function (parent) {\n        this.parent = parent;\n        this.tree = parent.tree;\n        this.tree.addNodeToIndex(this);\n    };\n    Node.prototype.doRemoveChild = function (node) {\n        this.children.splice(this.getChildIndex(node), 1);\n        this.tree.removeNodeFromIndex(node);\n    };\n    return Node;\n}());\nexports.Node = Node;\n","\"use strict\";\nexports.__esModule = true;\nexports.getBoolString = exports.htmlEscape = exports.isFunction = exports.isInt = void 0;\nexports.isInt = function (n) { return typeof n === \"number\" && n % 1 === 0; };\nexports.isFunction = function (v) { return typeof v === \"function\"; };\n// Escape a string for HTML interpolation; copied from underscore js\nexports.htmlEscape = function (text) {\n    return (\"\" + text)\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#x27;\")\n        .replace(/\\//g, \"&#x2F;\");\n};\nexports.getBoolString = function (value) { return (value ? \"true\" : \"false\"); };\n","module.exports = jQuery;","\"use strict\";\nexports.__esModule = true;\nvar register = function (widgetClass, widgetName) {\n    var getDataKey = function () { return \"simple_widget_\" + widgetName; };\n    var getWidgetData = function (el, dataKey) {\n        var widget = jQuery.data(el, dataKey);\n        if (widget && widget instanceof SimpleWidget) {\n            return widget;\n        }\n        else {\n            return null;\n        }\n    };\n    var createWidget = function ($el, options) {\n        var dataKey = getDataKey();\n        for (var _i = 0, _a = $el.get(); _i < _a.length; _i++) {\n            var el = _a[_i];\n            var existingWidget = getWidgetData(el, dataKey);\n            if (!existingWidget) {\n                var simpleWidgetClass = widgetClass;\n                var widget = new simpleWidgetClass(el, options);\n                if (!jQuery.data(el, dataKey)) {\n                    jQuery.data(el, dataKey, widget);\n                }\n                // Call init after setting data, so we can call methods\n                widget.init();\n            }\n        }\n        return $el;\n    };\n    var destroyWidget = function ($el) {\n        var dataKey = getDataKey();\n        for (var _i = 0, _a = $el.get(); _i < _a.length; _i++) {\n            var el = _a[_i];\n            var widget = getWidgetData(el, dataKey);\n            if (widget) {\n                widget.destroy();\n            }\n            jQuery.removeData(el, dataKey);\n        }\n    };\n    var callFunction = function ($el, functionName, args) {\n        var result = null;\n        for (var _i = 0, _a = $el.get(); _i < _a.length; _i++) {\n            var el = _a[_i];\n            var widget = jQuery.data(el, getDataKey());\n            if (widget && widget instanceof SimpleWidget) {\n                var simpleWidget = widget;\n                var widgetFunction = simpleWidget[functionName];\n                if (widgetFunction && typeof widgetFunction === \"function\") {\n                    result = widgetFunction.apply(widget, args);\n                }\n            }\n        }\n        return result;\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    jQuery.fn[widgetName] = function (argument1) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (!argument1) {\n            return createWidget(this, null);\n        }\n        else if (typeof argument1 === \"object\") {\n            var options = argument1;\n            return createWidget(this, options);\n        }\n        else if (typeof argument1 === \"string\" && argument1[0] !== \"_\") {\n            var functionName = argument1;\n            if (functionName === \"destroy\") {\n                return destroyWidget(this);\n            }\n            else if (functionName === \"get_widget_class\") {\n                return widgetClass;\n            }\n            else {\n                return callFunction(this, functionName, args);\n            }\n        }\n    };\n};\nvar SimpleWidget = /** @class */ (function () {\n    function SimpleWidget(el, options) {\n        this.$el = jQuery(el);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        var defaults = this.constructor[\"defaults\"];\n        this.options = jQuery.extend({}, defaults, options);\n    }\n    SimpleWidget.register = function (widgetClass, widgetName) {\n        register(widgetClass, widgetName);\n    };\n    SimpleWidget.prototype.destroy = function () {\n        this.deinit();\n    };\n    SimpleWidget.prototype.init = function () {\n        //\n    };\n    SimpleWidget.prototype.deinit = function () {\n        //\n    };\n    SimpleWidget.defaults = {};\n    return SimpleWidget;\n}());\nexports[\"default\"] = SimpleWidget;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nexports.__esModule = true;\nexports.JqTreeWidget = void 0;\nvar version_1 = require(\"./version\");\nvar jQuery = require(\"jquery\");\nvar dragAndDropHandler_1 = require(\"./dragAndDropHandler\");\nvar elementsRenderer_1 = require(\"./elementsRenderer\");\nvar dataLoader_1 = require(\"./dataLoader\");\nvar keyHandler_1 = require(\"./keyHandler\");\nvar mouse_widget_1 = require(\"./mouse.widget\");\nvar saveStateHandler_1 = require(\"./saveStateHandler\");\nvar scrollHandler_1 = require(\"./scrollHandler\");\nvar selectNodeHandler_1 = require(\"./selectNodeHandler\");\nvar simple_widget_1 = require(\"./simple.widget\");\nvar node_1 = require(\"./node\");\nvar util_1 = require(\"./util\");\nvar nodeElement_1 = require(\"./nodeElement\");\nvar NODE_PARAM_IS_EMPTY = \"Node parameter is empty\";\nvar PARAM_IS_EMPTY = \"Parameter is empty: \";\nvar JqTreeWidget = /** @class */ (function (_super) {\n    __extends(JqTreeWidget, _super);\n    function JqTreeWidget() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.handleClick = function (e) {\n            var clickTarget = _this.getClickTarget(e.target);\n            if (clickTarget) {\n                if (clickTarget.type === \"button\") {\n                    _this.toggle(clickTarget.node, _this.options.slide);\n                    e.preventDefault();\n                    e.stopPropagation();\n                }\n                else if (clickTarget.type === \"label\") {\n                    var node = clickTarget.node;\n                    var event_1 = _this._triggerEvent(\"tree.click\", {\n                        node: node,\n                        click_event: e,\n                    });\n                    if (!event_1.isDefaultPrevented()) {\n                        _this.doSelectNode(node);\n                    }\n                }\n            }\n        };\n        _this.handleDblclick = function (e) {\n            var clickTarget = _this.getClickTarget(e.target);\n            if ((clickTarget === null || clickTarget === void 0 ? void 0 : clickTarget.type) === \"label\") {\n                _this._triggerEvent(\"tree.dblclick\", {\n                    node: clickTarget.node,\n                    click_event: e,\n                });\n            }\n        };\n        _this.handleContextmenu = function (e) {\n            var $div = jQuery(e.target).closest(\"ul.jqtree-tree .jqtree-element\");\n            if ($div.length) {\n                var node = _this.getNode($div);\n                if (node) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    _this._triggerEvent(\"tree.contextmenu\", {\n                        node: node,\n                        click_event: e,\n                    });\n                    return false;\n                }\n            }\n            return null;\n        };\n        return _this;\n    }\n    JqTreeWidget.prototype.toggle = function (node, slideParam) {\n        if (slideParam === void 0) { slideParam = null; }\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n        var slide = slideParam !== null && slideParam !== void 0 ? slideParam : this.options.slide;\n        if (node.is_open) {\n            this.closeNode(node, slide);\n        }\n        else {\n            this.openNode(node, slide);\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.getTree = function () {\n        return this.tree;\n    };\n    JqTreeWidget.prototype.selectNode = function (node, optionsParam) {\n        this.doSelectNode(node, optionsParam);\n        return this.element;\n    };\n    JqTreeWidget.prototype.getSelectedNode = function () {\n        if (this.selectNodeHandler) {\n            return this.selectNodeHandler.getSelectedNode();\n        }\n        else {\n            return false;\n        }\n    };\n    JqTreeWidget.prototype.toJson = function () {\n        return JSON.stringify(this.tree.getData());\n    };\n    JqTreeWidget.prototype.loadData = function (data, parentNode) {\n        this.doLoadData(data, parentNode);\n        return this.element;\n    };\n    /*\n    signatures:\n    - loadDataFromUrl(url, parent_node=null, on_finished=null)\n        loadDataFromUrl('/my_data');\n        loadDataFromUrl('/my_data', node1);\n        loadDataFromUrl('/my_data', node1, function() { console.log('finished'); });\n        loadDataFromUrl('/my_data', null, function() { console.log('finished'); });\n\n    - loadDataFromUrl(parent_node=null, on_finished=null)\n        loadDataFromUrl();\n        loadDataFromUrl(node1);\n        loadDataFromUrl(null, function() { console.log('finished'); });\n        loadDataFromUrl(node1, function() { console.log('finished'); });\n    */\n    JqTreeWidget.prototype.loadDataFromUrl = function (param1, param2, param3) {\n        if (typeof param1 === \"string\") {\n            // first parameter is url\n            this.doLoadDataFromUrl(param1, param2, param3 !== null && param3 !== void 0 ? param3 : null);\n        }\n        else {\n            // first parameter is not url\n            this.doLoadDataFromUrl(null, param1, param2);\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.reload = function (onFinished) {\n        this.doLoadDataFromUrl(null, null, onFinished);\n        return this.element;\n    };\n    JqTreeWidget.prototype.getNodeById = function (nodeId) {\n        return this.tree.getNodeById(nodeId);\n    };\n    JqTreeWidget.prototype.getNodeByName = function (name) {\n        return this.tree.getNodeByName(name);\n    };\n    JqTreeWidget.prototype.getNodesByProperty = function (key, value) {\n        return this.tree.getNodesByProperty(key, value);\n    };\n    JqTreeWidget.prototype.getNodeByHtmlElement = function (element) {\n        return this.getNode(jQuery(element));\n    };\n    JqTreeWidget.prototype.getNodeByCallback = function (callback) {\n        return this.tree.getNodeByCallback(callback);\n    };\n    JqTreeWidget.prototype.openNode = function (node, param1, param2) {\n        var _this = this;\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n        var parseParams = function () {\n            var _a;\n            var onFinished;\n            var slide;\n            if (util_1.isFunction(param1)) {\n                onFinished = param1;\n                slide = null;\n            }\n            else {\n                slide = param1;\n                onFinished = param2;\n            }\n            if (slide == null) {\n                slide = (_a = _this.options.slide) !== null && _a !== void 0 ? _a : false;\n            }\n            return [slide, onFinished];\n        };\n        var _a = parseParams(), slide = _a[0], onFinished = _a[1];\n        this._openNode(node, slide, onFinished);\n        return this.element;\n    };\n    JqTreeWidget.prototype.closeNode = function (node, slideParam) {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n        var slide = slideParam !== null && slideParam !== void 0 ? slideParam : this.options.slide;\n        if (node.isFolder() || node.isEmptyFolder) {\n            new nodeElement_1.FolderElement(node, this).close(slide, this.options.animationSpeed);\n            this.saveState();\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.isDragging = function () {\n        if (this.dndHandler) {\n            return this.dndHandler.isDragging;\n        }\n        else {\n            return false;\n        }\n    };\n    JqTreeWidget.prototype.refreshHitAreas = function () {\n        if (this.dndHandler) {\n            this.dndHandler.refresh();\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.addNodeAfter = function (newNodeInfo, existingNode) {\n        var newNode = existingNode.addAfter(newNodeInfo);\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n        return newNode;\n    };\n    JqTreeWidget.prototype.addNodeBefore = function (newNodeInfo, existingNode) {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n        var newNode = existingNode.addBefore(newNodeInfo);\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n        return newNode;\n    };\n    JqTreeWidget.prototype.addParentNode = function (newNodeInfo, existingNode) {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n        var newNode = existingNode.addParent(newNodeInfo);\n        if (newNode) {\n            this._refreshElements(newNode.parent);\n        }\n        return newNode;\n    };\n    JqTreeWidget.prototype.removeNode = function (node) {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n        if (node.parent && this.selectNodeHandler) {\n            this.selectNodeHandler.removeFromSelection(node, true); // including children\n            var parent_1 = node.parent;\n            node.remove();\n            this._refreshElements(parent_1);\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.appendNode = function (newNodeInfo, parentNodeParam) {\n        var parentNode = parentNodeParam || this.tree;\n        var node = parentNode.append(newNodeInfo);\n        this._refreshElements(parentNode);\n        return node;\n    };\n    JqTreeWidget.prototype.prependNode = function (newNodeInfo, parentNodeParam) {\n        var parentNode = parentNodeParam !== null && parentNodeParam !== void 0 ? parentNodeParam : this.tree;\n        var node = parentNode.prepend(newNodeInfo);\n        this._refreshElements(parentNode);\n        return node;\n    };\n    JqTreeWidget.prototype.updateNode = function (node, data) {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n        var idIsChanged = typeof data === \"object\" && data.id && data.id !== node.id;\n        if (idIsChanged) {\n            this.tree.removeNodeFromIndex(node);\n        }\n        node.setData(data);\n        if (idIsChanged) {\n            this.tree.addNodeToIndex(node);\n        }\n        if (typeof data === \"object\" &&\n            data[\"children\"] &&\n            data[\"children\"] instanceof Array) {\n            node.removeChildren();\n            if (data.children.length) {\n                node.loadFromData(data.children);\n            }\n        }\n        this._refreshElements(node);\n        this.selectCurrentNode();\n        return this.element;\n    };\n    JqTreeWidget.prototype.moveNode = function (node, targetNode, position) {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n        if (!targetNode) {\n            throw Error(PARAM_IS_EMPTY + \"targetNode\");\n        }\n        var positionIndex = node_1.getPosition(position);\n        this.tree.moveNode(node, targetNode, positionIndex);\n        this._refreshElements(null);\n        return this.element;\n    };\n    JqTreeWidget.prototype.getStateFromStorage = function () {\n        if (this.saveStateHandler) {\n            return this.saveStateHandler.getStateFromStorage();\n        }\n        else {\n            return null;\n        }\n    };\n    JqTreeWidget.prototype.addToSelection = function (node, mustSetFocus) {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n        if (this.selectNodeHandler) {\n            this.selectNodeHandler.addToSelection(node);\n            this._getNodeElementForNode(node).select(mustSetFocus === undefined ? true : mustSetFocus);\n            this.saveState();\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.getSelectedNodes = function () {\n        if (!this.selectNodeHandler) {\n            return [];\n        }\n        else {\n            return this.selectNodeHandler.getSelectedNodes();\n        }\n    };\n    JqTreeWidget.prototype.isNodeSelected = function (node) {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n        if (!this.selectNodeHandler) {\n            return false;\n        }\n        else {\n            return this.selectNodeHandler.isNodeSelected(node);\n        }\n    };\n    JqTreeWidget.prototype.removeFromSelection = function (node) {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n        if (this.selectNodeHandler) {\n            this.selectNodeHandler.removeFromSelection(node);\n            this._getNodeElementForNode(node).deselect();\n            this.saveState();\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.scrollToNode = function (node) {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n        if (this.scrollHandler) {\n            var nodeOffset = jQuery(node.element).offset();\n            var nodeTop = nodeOffset ? nodeOffset.top : 0;\n            var treeOffset = this.$el.offset();\n            var treeTop = treeOffset ? treeOffset.top : 0;\n            var top_1 = nodeTop - treeTop;\n            this.scrollHandler.scrollToY(top_1);\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.getState = function () {\n        if (this.saveStateHandler) {\n            return this.saveStateHandler.getState();\n        }\n        else {\n            return null;\n        }\n    };\n    JqTreeWidget.prototype.setState = function (state) {\n        if (this.saveStateHandler) {\n            this.saveStateHandler.setInitialState(state);\n            this._refreshElements(null);\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.setOption = function (option, value) {\n        this.options[option] = value;\n        return this.element;\n    };\n    JqTreeWidget.prototype.moveDown = function () {\n        if (this.keyHandler) {\n            this.keyHandler.moveDown();\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.moveUp = function () {\n        if (this.keyHandler) {\n            this.keyHandler.moveUp();\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.getVersion = function () {\n        return version_1[\"default\"];\n    };\n    JqTreeWidget.prototype.testGenerateHitAreas = function (movingNode) {\n        if (!this.dndHandler) {\n            return [];\n        }\n        else {\n            this.dndHandler.currentItem = this._getNodeElementForNode(movingNode);\n            this.dndHandler.generateHitAreas();\n            return this.dndHandler.hitAreas;\n        }\n    };\n    JqTreeWidget.prototype._triggerEvent = function (eventName, values) {\n        var event = jQuery.Event(eventName);\n        jQuery.extend(event, values);\n        this.element.trigger(event);\n        return event;\n    };\n    JqTreeWidget.prototype._openNode = function (node, slide, onFinished) {\n        var _this = this;\n        if (slide === void 0) { slide = true; }\n        var doOpenNode = function (_node, _slide, _onFinished) {\n            var folderElement = new nodeElement_1.FolderElement(_node, _this);\n            folderElement.open(_onFinished, _slide, _this.options.animationSpeed);\n        };\n        if (node.isFolder() || node.isEmptyFolder) {\n            if (node.load_on_demand) {\n                this.loadFolderOnDemand(node, slide, onFinished);\n            }\n            else {\n                var parent_2 = node.parent;\n                while (parent_2) {\n                    // nb: do not open root element\n                    if (parent_2.parent) {\n                        doOpenNode(parent_2, false, null);\n                    }\n                    parent_2 = parent_2.parent;\n                }\n                doOpenNode(node, slide, onFinished);\n                this.saveState();\n            }\n        }\n    };\n    /*\n    Redraw the tree or part of the tree.\n     from_node: redraw this subtree\n    */\n    JqTreeWidget.prototype._refreshElements = function (fromNode) {\n        this.renderer.render(fromNode);\n        this._triggerEvent(\"tree.refresh\");\n    };\n    JqTreeWidget.prototype._getNodeElementForNode = function (node) {\n        if (node.isFolder()) {\n            return new nodeElement_1.FolderElement(node, this);\n        }\n        else {\n            return new nodeElement_1.NodeElement(node, this);\n        }\n    };\n    JqTreeWidget.prototype._getNodeElement = function ($element) {\n        var node = this.getNode($element);\n        if (node) {\n            return this._getNodeElementForNode(node);\n        }\n        else {\n            return null;\n        }\n    };\n    JqTreeWidget.prototype._containsElement = function (element) {\n        var node = this.getNode(jQuery(element));\n        return node != null && node.tree === this.tree;\n    };\n    JqTreeWidget.prototype._getScrollLeft = function () {\n        var _a;\n        return ((_a = this === null || this === void 0 ? void 0 : this.scrollHandler) === null || _a === void 0 ? void 0 : _a.getScrollLeft()) || 0;\n    };\n    JqTreeWidget.prototype.init = function () {\n        _super.prototype.init.call(this);\n        this.element = this.$el;\n        this.mouseDelay = 300;\n        this.isInitialized = false;\n        this.options.rtl = this.getRtlOption();\n        if (this.options.closedIcon == null) {\n            this.options.closedIcon = this.getDefaultClosedIcon();\n        }\n        this.renderer = new elementsRenderer_1[\"default\"](this);\n        this.dataLoader = new dataLoader_1[\"default\"](this);\n        if (saveStateHandler_1[\"default\"] != null) {\n            this.saveStateHandler = new saveStateHandler_1[\"default\"](this);\n        }\n        else {\n            this.options.saveState = false;\n        }\n        if (selectNodeHandler_1[\"default\"] != null) {\n            this.selectNodeHandler = new selectNodeHandler_1[\"default\"](this);\n        }\n        if (dragAndDropHandler_1.DragAndDropHandler != null) {\n            this.dndHandler = new dragAndDropHandler_1.DragAndDropHandler(this);\n        }\n        else {\n            this.options.dragAndDrop = false;\n        }\n        if (scrollHandler_1[\"default\"] != null) {\n            this.scrollHandler = new scrollHandler_1[\"default\"](this);\n        }\n        if (keyHandler_1[\"default\"] != null && selectNodeHandler_1[\"default\"] != null) {\n            this.keyHandler = new keyHandler_1[\"default\"](this);\n        }\n        this.initData();\n        this.element.click(this.handleClick);\n        this.element.dblclick(this.handleDblclick);\n        if (this.options.useContextMenu) {\n            this.element.on(\"contextmenu\", this.handleContextmenu);\n        }\n    };\n    JqTreeWidget.prototype.deinit = function () {\n        this.element.empty();\n        this.element.off();\n        if (this.keyHandler) {\n            this.keyHandler.deinit();\n        }\n        this.tree = new node_1.Node({}, true);\n        _super.prototype.deinit.call(this);\n    };\n    JqTreeWidget.prototype.mouseCapture = function (positionInfo) {\n        if (this.options.dragAndDrop && this.dndHandler) {\n            return this.dndHandler.mouseCapture(positionInfo);\n        }\n        else {\n            return false;\n        }\n    };\n    JqTreeWidget.prototype.mouseStart = function (positionInfo) {\n        if (this.options.dragAndDrop && this.dndHandler) {\n            return this.dndHandler.mouseStart(positionInfo);\n        }\n        else {\n            return false;\n        }\n    };\n    JqTreeWidget.prototype.mouseDrag = function (positionInfo) {\n        if (this.options.dragAndDrop && this.dndHandler) {\n            var result = this.dndHandler.mouseDrag(positionInfo);\n            if (this.scrollHandler) {\n                this.scrollHandler.checkScrolling();\n            }\n            return result;\n        }\n        else {\n            return false;\n        }\n    };\n    JqTreeWidget.prototype.mouseStop = function (positionInfo) {\n        if (this.options.dragAndDrop && this.dndHandler) {\n            return this.dndHandler.mouseStop(positionInfo);\n        }\n        else {\n            return false;\n        }\n    };\n    JqTreeWidget.prototype.initData = function () {\n        if (this.options.data) {\n            this.doLoadData(this.options.data, null);\n        }\n        else {\n            var dataUrl = this.getDataUrlInfo(null);\n            if (dataUrl) {\n                this.doLoadDataFromUrl(null, null, null);\n            }\n            else {\n                this.doLoadData([], null);\n            }\n        }\n    };\n    JqTreeWidget.prototype.getDataUrlInfo = function (node) {\n        var _this = this;\n        var dataUrl = this.options.dataUrl || this.element.data(\"url\");\n        var getUrlFromString = function (url) {\n            var urlInfo = { url: url };\n            setUrlInfoData(urlInfo);\n            return urlInfo;\n        };\n        var setUrlInfoData = function (urlInfo) {\n            if (node === null || node === void 0 ? void 0 : node.id) {\n                // Load on demand of a subtree; add node parameter\n                var data = { node: node.id };\n                urlInfo[\"data\"] = data;\n            }\n            else {\n                // Add selected_node parameter\n                var selectedNodeId = _this.getNodeIdToBeSelected();\n                if (selectedNodeId) {\n                    var data = { selected_node: selectedNodeId };\n                    urlInfo[\"data\"] = data;\n                }\n            }\n        };\n        if (typeof dataUrl === \"function\") {\n            return dataUrl(node);\n        }\n        else if (typeof dataUrl === \"string\") {\n            return getUrlFromString(dataUrl);\n        }\n        else if (dataUrl && typeof dataUrl === \"object\") {\n            setUrlInfoData(dataUrl);\n            return dataUrl;\n        }\n        else {\n            return null;\n        }\n    };\n    JqTreeWidget.prototype.getNodeIdToBeSelected = function () {\n        if (this.options.saveState && this.saveStateHandler) {\n            return this.saveStateHandler.getNodeIdToBeSelected();\n        }\n        else {\n            return null;\n        }\n    };\n    JqTreeWidget.prototype.initTree = function (data) {\n        var _this = this;\n        var doInit = function () {\n            if (!_this.isInitialized) {\n                _this.isInitialized = true;\n                _this._triggerEvent(\"tree.init\");\n            }\n        };\n        if (!this.options.nodeClass) {\n            return;\n        }\n        this.tree = new this.options.nodeClass(null, true, this.options.nodeClass);\n        if (this.selectNodeHandler) {\n            this.selectNodeHandler.clear();\n        }\n        this.tree.loadFromData(data);\n        var mustLoadOnDemand = this.setInitialState();\n        this._refreshElements(null);\n        if (!mustLoadOnDemand) {\n            doInit();\n        }\n        else {\n            // Load data on demand and then init the tree\n            this.setInitialStateOnDemand(doInit);\n        }\n    };\n    // Set initial state, either by restoring the state or auto-opening nodes\n    // result: must load nodes on demand?\n    JqTreeWidget.prototype.setInitialState = function () {\n        var _this = this;\n        var restoreState = function () {\n            // result: is state restored, must load on demand?\n            if (!(_this.options.saveState && _this.saveStateHandler)) {\n                return [false, false];\n            }\n            else {\n                var state = _this.saveStateHandler.getStateFromStorage();\n                if (!state) {\n                    return [false, false];\n                }\n                else {\n                    var mustLoadOnDemand_1 = _this.saveStateHandler.setInitialState(state);\n                    // return true: the state is restored\n                    return [true, mustLoadOnDemand_1];\n                }\n            }\n        };\n        var autoOpenNodes = function () {\n            // result: must load on demand?\n            if (_this.options.autoOpen === false) {\n                return false;\n            }\n            var maxLevel = _this.getAutoOpenMaxLevel();\n            var mustLoadOnDemand = false;\n            _this.tree.iterate(function (node, level) {\n                if (node.load_on_demand) {\n                    mustLoadOnDemand = true;\n                    return false;\n                }\n                else if (!node.hasChildren()) {\n                    return false;\n                }\n                else {\n                    node.is_open = true;\n                    return level !== maxLevel;\n                }\n            });\n            return mustLoadOnDemand;\n        };\n        var _a = restoreState(), isRestored = _a[0], mustLoadOnDemand = _a[1]; // eslint-disable-line prefer-const\n        if (!isRestored) {\n            mustLoadOnDemand = autoOpenNodes();\n        }\n        return mustLoadOnDemand;\n    };\n    // Set the initial state for nodes that are loaded on demand\n    // Call cb_finished when done\n    JqTreeWidget.prototype.setInitialStateOnDemand = function (cbFinished) {\n        var _this = this;\n        var restoreState = function () {\n            if (!(_this.options.saveState && _this.saveStateHandler)) {\n                return false;\n            }\n            else {\n                var state = _this.saveStateHandler.getStateFromStorage();\n                if (!state) {\n                    return false;\n                }\n                else {\n                    _this.saveStateHandler.setInitialStateOnDemand(state, cbFinished);\n                    return true;\n                }\n            }\n        };\n        var autoOpenNodes = function () {\n            var maxLevel = _this.getAutoOpenMaxLevel();\n            var loadingCount = 0;\n            var loadAndOpenNode = function (node) {\n                loadingCount += 1;\n                _this._openNode(node, false, function () {\n                    loadingCount -= 1;\n                    openNodes();\n                });\n            };\n            var openNodes = function () {\n                _this.tree.iterate(function (node, level) {\n                    if (node.load_on_demand) {\n                        if (!node.is_loading) {\n                            loadAndOpenNode(node);\n                        }\n                        return false;\n                    }\n                    else {\n                        _this._openNode(node, false, null);\n                        return level !== maxLevel;\n                    }\n                });\n                if (loadingCount === 0) {\n                    cbFinished();\n                }\n            };\n            openNodes();\n        };\n        if (!restoreState()) {\n            autoOpenNodes();\n        }\n    };\n    JqTreeWidget.prototype.getAutoOpenMaxLevel = function () {\n        if (this.options.autoOpen === true) {\n            return -1;\n        }\n        else if (typeof this.options.autoOpen === \"number\") {\n            return this.options.autoOpen;\n        }\n        else if (typeof this.options.autoOpen === \"string\") {\n            return parseInt(this.options.autoOpen, 10);\n        }\n        else {\n            return 0;\n        }\n    };\n    JqTreeWidget.prototype.getClickTarget = function (element) {\n        var $target = jQuery(element);\n        var $button = $target.closest(\".jqtree-toggler\");\n        if ($button.length) {\n            var node = this.getNode($button);\n            if (node) {\n                return {\n                    type: \"button\",\n                    node: node,\n                };\n            }\n        }\n        else {\n            var $el = $target.closest(\".jqtree-element\");\n            if ($el.length) {\n                var node = this.getNode($el);\n                if (node) {\n                    return {\n                        type: \"label\",\n                        node: node,\n                    };\n                }\n            }\n        }\n        return null;\n    };\n    JqTreeWidget.prototype.getNode = function ($element) {\n        var $li = $element.closest(\"li.jqtree_common\");\n        if ($li.length === 0) {\n            return null;\n        }\n        else {\n            return $li.data(\"node\");\n        }\n    };\n    JqTreeWidget.prototype.saveState = function () {\n        if (this.options.saveState && this.saveStateHandler) {\n            this.saveStateHandler.saveState();\n        }\n    };\n    JqTreeWidget.prototype.selectCurrentNode = function () {\n        var node = this.getSelectedNode();\n        if (node) {\n            var nodeElement = this._getNodeElementForNode(node);\n            if (nodeElement) {\n                nodeElement.select(true);\n            }\n        }\n    };\n    JqTreeWidget.prototype.deselectCurrentNode = function () {\n        var node = this.getSelectedNode();\n        if (node) {\n            this.removeFromSelection(node);\n        }\n    };\n    JqTreeWidget.prototype.getDefaultClosedIcon = function () {\n        if (this.options.rtl) {\n            // triangle to the left\n            return \"&#x25c0;\";\n        }\n        else {\n            // triangle to the right\n            return \"&#x25ba;\";\n        }\n    };\n    JqTreeWidget.prototype.getRtlOption = function () {\n        if (this.options.rtl != null) {\n            return this.options.rtl;\n        }\n        else {\n            var dataRtl = this.element.data(\"rtl\");\n            if (dataRtl !== null && dataRtl !== false) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n    };\n    JqTreeWidget.prototype.doSelectNode = function (node, optionsParam) {\n        var _this = this;\n        if (!this.selectNodeHandler) {\n            return;\n        }\n        var saveState = function () {\n            if (_this.options.saveState && _this.saveStateHandler) {\n                _this.saveStateHandler.saveState();\n            }\n        };\n        if (!node) {\n            // Called with empty node -> deselect current node\n            this.deselectCurrentNode();\n            saveState();\n            return;\n        }\n        var defaultOptions = { mustSetFocus: true, mustToggle: true };\n        var selectOptions = __assign(__assign({}, defaultOptions), (optionsParam || {}));\n        var canSelect = function () {\n            if (_this.options.onCanSelectNode) {\n                return (_this.options.selectable === true &&\n                    _this.options.onCanSelectNode(node));\n            }\n            else {\n                return _this.options.selectable === true;\n            }\n        };\n        var openParents = function () {\n            var parent = node.parent;\n            if (parent && parent.parent && !parent.is_open) {\n                _this.openNode(parent, false);\n            }\n        };\n        if (!canSelect()) {\n            return;\n        }\n        if (this.selectNodeHandler.isNodeSelected(node)) {\n            if (selectOptions.mustToggle) {\n                this.deselectCurrentNode();\n                this._triggerEvent(\"tree.select\", {\n                    node: null,\n                    previous_node: node,\n                });\n            }\n        }\n        else {\n            var deselectedNode = this.getSelectedNode();\n            this.deselectCurrentNode();\n            this.addToSelection(node, selectOptions.mustSetFocus);\n            this._triggerEvent(\"tree.select\", {\n                node: node,\n                deselected_node: deselectedNode,\n            });\n            openParents();\n        }\n        saveState();\n    };\n    JqTreeWidget.prototype.doLoadData = function (data, parentNode) {\n        if (!data) {\n            return;\n        }\n        else {\n            this._triggerEvent(\"tree.load_data\", { tree_data: data });\n            if (parentNode) {\n                this.deselectNodes(parentNode);\n                this.loadSubtree(data, parentNode);\n            }\n            else {\n                this.initTree(data);\n            }\n            if (this.isDragging() && this.dndHandler) {\n                this.dndHandler.refresh();\n            }\n        }\n    };\n    JqTreeWidget.prototype.deselectNodes = function (parentNode) {\n        if (this.selectNodeHandler) {\n            var selectedNodesUnderParent = this.selectNodeHandler.getSelectedNodesUnder(parentNode);\n            for (var _i = 0, selectedNodesUnderParent_1 = selectedNodesUnderParent; _i < selectedNodesUnderParent_1.length; _i++) {\n                var n = selectedNodesUnderParent_1[_i];\n                this.selectNodeHandler.removeFromSelection(n);\n            }\n        }\n    };\n    JqTreeWidget.prototype.loadSubtree = function (data, parentNode) {\n        parentNode.loadFromData(data);\n        parentNode.load_on_demand = false;\n        parentNode.is_loading = false;\n        this._refreshElements(parentNode);\n    };\n    JqTreeWidget.prototype.doLoadDataFromUrl = function (urlInfoParam, parentNode, onFinished) {\n        var urlInfo = urlInfoParam || this.getDataUrlInfo(parentNode);\n        this.dataLoader.loadFromUrl(urlInfo, parentNode, onFinished);\n    };\n    JqTreeWidget.prototype.loadFolderOnDemand = function (node, slide, onFinished) {\n        var _this = this;\n        if (slide === void 0) { slide = true; }\n        node.is_loading = true;\n        this.doLoadDataFromUrl(null, node, function () {\n            _this._openNode(node, slide, onFinished);\n        });\n    };\n    JqTreeWidget.defaults = {\n        animationSpeed: \"fast\",\n        autoOpen: false,\n        saveState: false,\n        dragAndDrop: false,\n        selectable: true,\n        useContextMenu: true,\n        onCanSelectNode: undefined,\n        onSetStateFromStorage: undefined,\n        onGetStateFromStorage: undefined,\n        onCreateLi: undefined,\n        onIsMoveHandle: undefined,\n        // Can this node be moved?\n        onCanMove: undefined,\n        // Can this node be moved to this position? function(moved_node, target_node, position)\n        onCanMoveTo: undefined,\n        onLoadFailed: undefined,\n        autoEscape: true,\n        dataUrl: undefined,\n        // The symbol to use for a closed node - ► BLACK RIGHT-POINTING POINTER\n        // http://www.fileformat.info/info/unicode/char/25ba/index.htm\n        closedIcon: undefined,\n        // The symbol to use for an open node - ▼ BLACK DOWN-POINTING TRIANGLE\n        // http://www.fileformat.info/info/unicode/char/25bc/index.htm\n        openedIcon: \"&#x25bc;\",\n        slide: true,\n        nodeClass: node_1.Node,\n        dataFilter: undefined,\n        keyboardSupport: true,\n        openFolderDelay: 500,\n        rtl: false,\n        onDragMove: undefined,\n        onDragStop: undefined,\n        buttonLeft: true,\n        onLoading: undefined,\n        showEmptyFolder: false,\n        tabIndex: 0,\n    };\n    return JqTreeWidget;\n}(mouse_widget_1[\"default\"]));\nexports.JqTreeWidget = JqTreeWidget;\nsimple_widget_1[\"default\"].register(JqTreeWidget, \"tree\");\n","\"use strict\";\nexports.__esModule = true;\nvar version = \"1.4.12\";\nexports[\"default\"] = version;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\nexports.HitAreasGenerator = exports.DragAndDropHandler = void 0;\nvar jQuery = require(\"jquery\");\nvar node_1 = require(\"./node\");\nvar util_1 = require(\"./util\");\nvar DragAndDropHandler = /** @class */ (function () {\n    function DragAndDropHandler(treeWidget) {\n        this.treeWidget = treeWidget;\n        this.hoveredArea = null;\n        this.hitAreas = [];\n        this.isDragging = false;\n        this.currentItem = null;\n        this.positionInfo = null;\n    }\n    DragAndDropHandler.prototype.mouseCapture = function (positionInfo) {\n        var $element = jQuery(positionInfo.target);\n        if (!this.mustCaptureElement($element)) {\n            return null;\n        }\n        if (this.treeWidget.options.onIsMoveHandle &&\n            !this.treeWidget.options.onIsMoveHandle($element)) {\n            return null;\n        }\n        var nodeElement = this.treeWidget._getNodeElement($element);\n        if (nodeElement && this.treeWidget.options.onCanMove) {\n            if (!this.treeWidget.options.onCanMove(nodeElement.node)) {\n                nodeElement = null;\n            }\n        }\n        this.currentItem = nodeElement;\n        return this.currentItem != null;\n    };\n    DragAndDropHandler.prototype.generateHitAreas = function () {\n        if (!this.currentItem) {\n            this.hitAreas = [];\n        }\n        else {\n            var hitAreasGenerator = new HitAreasGenerator(this.treeWidget.tree, this.currentItem.node, this.getTreeDimensions().bottom);\n            this.hitAreas = hitAreasGenerator.generate();\n        }\n    };\n    DragAndDropHandler.prototype.mouseStart = function (positionInfo) {\n        if (!this.currentItem ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined) {\n            return false;\n        }\n        else {\n            this.refresh();\n            var offset = jQuery(positionInfo.target).offset();\n            var left = offset ? offset.left : 0;\n            var top_1 = offset ? offset.top : 0;\n            var node = this.currentItem.node;\n            var nodeName = this.treeWidget.options.autoEscape\n                ? util_1.htmlEscape(node.name)\n                : node.name;\n            this.dragElement = new DragElement(nodeName, positionInfo.pageX - left, positionInfo.pageY - top_1, this.treeWidget.element);\n            this.isDragging = true;\n            this.positionInfo = positionInfo;\n            this.currentItem.$element.addClass(\"jqtree-moving\");\n            return true;\n        }\n    };\n    DragAndDropHandler.prototype.mouseDrag = function (positionInfo) {\n        if (!this.currentItem ||\n            !this.dragElement ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined) {\n            return false;\n        }\n        else {\n            this.dragElement.move(positionInfo.pageX, positionInfo.pageY);\n            this.positionInfo = positionInfo;\n            var area = this.findHoveredArea(positionInfo.pageX, positionInfo.pageY);\n            var canMoveTo = this.canMoveToArea(area);\n            if (canMoveTo && area) {\n                if (!area.node.isFolder()) {\n                    this.stopOpenFolderTimer();\n                }\n                if (this.hoveredArea !== area) {\n                    this.hoveredArea = area;\n                    // If this is a closed folder, start timer to open it\n                    if (this.mustOpenFolderTimer(area)) {\n                        this.startOpenFolderTimer(area.node);\n                    }\n                    else {\n                        this.stopOpenFolderTimer();\n                    }\n                    this.updateDropHint();\n                }\n            }\n            else {\n                this.removeHover();\n                this.removeDropHint();\n                this.stopOpenFolderTimer();\n            }\n            if (!area) {\n                if (this.treeWidget.options.onDragMove) {\n                    this.treeWidget.options.onDragMove(this.currentItem.node, positionInfo.originalEvent);\n                }\n            }\n            return true;\n        }\n    };\n    DragAndDropHandler.prototype.mouseStop = function (positionInfo) {\n        this.moveItem(positionInfo);\n        this.clear();\n        this.removeHover();\n        this.removeDropHint();\n        this.removeHitAreas();\n        var currentItem = this.currentItem;\n        if (this.currentItem) {\n            this.currentItem.$element.removeClass(\"jqtree-moving\");\n            this.currentItem = null;\n        }\n        this.isDragging = false;\n        this.positionInfo = null;\n        if (!this.hoveredArea && currentItem) {\n            if (this.treeWidget.options.onDragStop) {\n                this.treeWidget.options.onDragStop(currentItem.node, positionInfo.originalEvent);\n            }\n        }\n        return false;\n    };\n    DragAndDropHandler.prototype.refresh = function () {\n        this.removeHitAreas();\n        if (this.currentItem) {\n            this.generateHitAreas();\n            this.currentItem = this.treeWidget._getNodeElementForNode(this.currentItem.node);\n            if (this.isDragging) {\n                this.currentItem.$element.addClass(\"jqtree-moving\");\n            }\n        }\n    };\n    DragAndDropHandler.prototype.mustCaptureElement = function ($element) {\n        return !$element.is(\"input,select,textarea\");\n    };\n    DragAndDropHandler.prototype.canMoveToArea = function (area) {\n        if (!area || !this.currentItem) {\n            return false;\n        }\n        else if (this.treeWidget.options.onCanMoveTo) {\n            var positionName = node_1.getPositionName(area.position);\n            return this.treeWidget.options.onCanMoveTo(this.currentItem.node, area.node, positionName);\n        }\n        else {\n            return true;\n        }\n    };\n    DragAndDropHandler.prototype.removeHitAreas = function () {\n        this.hitAreas = [];\n    };\n    DragAndDropHandler.prototype.clear = function () {\n        if (this.dragElement) {\n            this.dragElement.remove();\n            this.dragElement = null;\n        }\n    };\n    DragAndDropHandler.prototype.removeDropHint = function () {\n        if (this.previousGhost) {\n            this.previousGhost.remove();\n        }\n    };\n    DragAndDropHandler.prototype.removeHover = function () {\n        this.hoveredArea = null;\n    };\n    DragAndDropHandler.prototype.findHoveredArea = function (x, y) {\n        var dimensions = this.getTreeDimensions();\n        if (x < dimensions.left ||\n            y < dimensions.top ||\n            x > dimensions.right ||\n            y > dimensions.bottom) {\n            return null;\n        }\n        var low = 0;\n        var high = this.hitAreas.length;\n        while (low < high) {\n            var mid = (low + high) >> 1;\n            var area = this.hitAreas[mid];\n            if (y < area.top) {\n                high = mid;\n            }\n            else if (y > area.bottom) {\n                low = mid + 1;\n            }\n            else {\n                return area;\n            }\n        }\n        return null;\n    };\n    DragAndDropHandler.prototype.mustOpenFolderTimer = function (area) {\n        var node = area.node;\n        return (node.isFolder() &&\n            !node.is_open &&\n            area.position === node_1.Position.Inside);\n    };\n    DragAndDropHandler.prototype.updateDropHint = function () {\n        if (!this.hoveredArea) {\n            return;\n        }\n        // remove previous drop hint\n        this.removeDropHint();\n        // add new drop hint\n        var nodeElement = this.treeWidget._getNodeElementForNode(this.hoveredArea.node);\n        this.previousGhost = nodeElement.addDropHint(this.hoveredArea.position);\n    };\n    DragAndDropHandler.prototype.startOpenFolderTimer = function (folder) {\n        var _this = this;\n        var openFolder = function () {\n            _this.treeWidget._openNode(folder, _this.treeWidget.options.slide, function () {\n                _this.refresh();\n                _this.updateDropHint();\n            });\n        };\n        this.stopOpenFolderTimer();\n        this.openFolderTimer = window.setTimeout(openFolder, this.treeWidget.options.openFolderDelay);\n    };\n    DragAndDropHandler.prototype.stopOpenFolderTimer = function () {\n        if (this.openFolderTimer) {\n            clearTimeout(this.openFolderTimer);\n            this.openFolderTimer = null;\n        }\n    };\n    DragAndDropHandler.prototype.moveItem = function (positionInfo) {\n        var _this = this;\n        if (this.currentItem &&\n            this.hoveredArea &&\n            this.hoveredArea.position !== node_1.Position.None &&\n            this.canMoveToArea(this.hoveredArea)) {\n            var movedNode_1 = this.currentItem.node;\n            var targetNode_1 = this.hoveredArea.node;\n            var position_1 = this.hoveredArea.position;\n            var previousParent = movedNode_1.parent;\n            if (position_1 === node_1.Position.Inside) {\n                this.hoveredArea.node.is_open = true;\n            }\n            var doMove = function () {\n                _this.treeWidget.tree.moveNode(movedNode_1, targetNode_1, position_1);\n                _this.treeWidget.element.empty();\n                _this.treeWidget._refreshElements(null);\n            };\n            var event_1 = this.treeWidget._triggerEvent(\"tree.move\", {\n                move_info: {\n                    moved_node: movedNode_1,\n                    target_node: targetNode_1,\n                    position: node_1.getPositionName(position_1),\n                    previous_parent: previousParent,\n                    do_move: doMove,\n                    original_event: positionInfo.originalEvent,\n                },\n            });\n            if (!event_1.isDefaultPrevented()) {\n                doMove();\n            }\n        }\n    };\n    DragAndDropHandler.prototype.getTreeDimensions = function () {\n        // Return the dimensions of the tree. Add a margin to the bottom to allow\n        // to drag-and-drop after the last element.\n        var offset = this.treeWidget.element.offset();\n        if (!offset) {\n            return { left: 0, top: 0, right: 0, bottom: 0 };\n        }\n        else {\n            var el = this.treeWidget.element;\n            var width = el.width() || 0;\n            var height = el.height() || 0;\n            var left = offset.left + this.treeWidget._getScrollLeft();\n            return {\n                left: left,\n                top: offset.top,\n                right: left + width,\n                bottom: offset.top + height + 16,\n            };\n        }\n    };\n    return DragAndDropHandler;\n}());\nexports.DragAndDropHandler = DragAndDropHandler;\nvar VisibleNodeIterator = /** @class */ (function () {\n    function VisibleNodeIterator(tree) {\n        this.tree = tree;\n    }\n    VisibleNodeIterator.prototype.iterate = function () {\n        var _this = this;\n        var isFirstNode = true;\n        var _iterateNode = function (node, nextNode) {\n            var mustIterateInside = (node.is_open || !node.element) && node.hasChildren();\n            var $element = null;\n            if (node.element) {\n                $element = jQuery(node.element);\n                if (!$element.is(\":visible\")) {\n                    return;\n                }\n                if (isFirstNode) {\n                    _this.handleFirstNode(node);\n                    isFirstNode = false;\n                }\n                if (!node.hasChildren()) {\n                    _this.handleNode(node, nextNode, $element);\n                }\n                else if (node.is_open) {\n                    if (!_this.handleOpenFolder(node, $element)) {\n                        mustIterateInside = false;\n                    }\n                }\n                else {\n                    _this.handleClosedFolder(node, nextNode, $element);\n                }\n            }\n            if (mustIterateInside) {\n                var childrenLength_1 = node.children.length;\n                node.children.forEach(function (_, i) {\n                    if (i === childrenLength_1 - 1) {\n                        _iterateNode(node.children[i], null);\n                    }\n                    else {\n                        _iterateNode(node.children[i], node.children[i + 1]);\n                    }\n                });\n                if (node.is_open && $element) {\n                    _this.handleAfterOpenFolder(node, nextNode);\n                }\n            }\n        };\n        _iterateNode(this.tree, null);\n    };\n    return VisibleNodeIterator;\n}());\nvar HitAreasGenerator = /** @class */ (function (_super) {\n    __extends(HitAreasGenerator, _super);\n    function HitAreasGenerator(tree, currentNode, treeBottom) {\n        var _this = _super.call(this, tree) || this;\n        _this.currentNode = currentNode;\n        _this.treeBottom = treeBottom;\n        return _this;\n    }\n    HitAreasGenerator.prototype.generate = function () {\n        this.positions = [];\n        this.lastTop = 0;\n        this.iterate();\n        return this.generateHitAreas(this.positions);\n    };\n    HitAreasGenerator.prototype.generateHitAreas = function (positions) {\n        var previousTop = -1;\n        var group = [];\n        var hitAreas = [];\n        for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\n            var position = positions_1[_i];\n            if (position.top !== previousTop && group.length) {\n                if (group.length) {\n                    this.generateHitAreasForGroup(hitAreas, group, previousTop, position.top);\n                }\n                previousTop = position.top;\n                group = [];\n            }\n            group.push(position);\n        }\n        this.generateHitAreasForGroup(hitAreas, group, previousTop, this.treeBottom);\n        return hitAreas;\n    };\n    HitAreasGenerator.prototype.handleOpenFolder = function (node, $element) {\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            // Stop iterating\n            return false;\n        }\n        // Cannot move before current item\n        if (node.children[0] !== this.currentNode) {\n            this.addPosition(node, node_1.Position.Inside, this.getTop($element));\n        }\n        // Continue iterating\n        return true;\n    };\n    HitAreasGenerator.prototype.handleClosedFolder = function (node, nextNode, $element) {\n        var top = this.getTop($element);\n        if (node === this.currentNode) {\n            // Cannot move after current item\n            this.addPosition(node, node_1.Position.None, top);\n        }\n        else {\n            this.addPosition(node, node_1.Position.Inside, top);\n            // Cannot move before current item\n            if (nextNode !== this.currentNode) {\n                this.addPosition(node, node_1.Position.After, top);\n            }\n        }\n    };\n    HitAreasGenerator.prototype.handleFirstNode = function (node) {\n        if (node !== this.currentNode) {\n            this.addPosition(node, node_1.Position.Before, this.getTop(jQuery(node.element)));\n        }\n    };\n    HitAreasGenerator.prototype.handleAfterOpenFolder = function (node, nextNode) {\n        if (node === this.currentNode || nextNode === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, node_1.Position.None, this.lastTop);\n        }\n        else {\n            this.addPosition(node, node_1.Position.After, this.lastTop);\n        }\n    };\n    HitAreasGenerator.prototype.handleNode = function (node, nextNode, $element) {\n        var top = this.getTop($element);\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            this.addPosition(node, node_1.Position.None, top);\n        }\n        else {\n            this.addPosition(node, node_1.Position.Inside, top);\n        }\n        if (nextNode === this.currentNode || node === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, node_1.Position.None, top);\n        }\n        else {\n            this.addPosition(node, node_1.Position.After, top);\n        }\n    };\n    HitAreasGenerator.prototype.getTop = function ($element) {\n        var offset = $element.offset();\n        return offset ? offset.top : 0;\n    };\n    HitAreasGenerator.prototype.addPosition = function (node, position, top) {\n        var area = {\n            top: top,\n            bottom: 0,\n            node: node,\n            position: position,\n        };\n        this.positions.push(area);\n        this.lastTop = top;\n    };\n    HitAreasGenerator.prototype.generateHitAreasForGroup = function (hitAreas, positionsInGroup, top, bottom) {\n        // limit positions in group\n        var positionCount = Math.min(positionsInGroup.length, 4);\n        var areaHeight = Math.round((bottom - top) / positionCount);\n        var areaTop = top;\n        var i = 0;\n        while (i < positionCount) {\n            var position = positionsInGroup[i];\n            hitAreas.push({\n                top: areaTop,\n                bottom: areaTop + areaHeight,\n                node: position.node,\n                position: position.position,\n            });\n            areaTop += areaHeight;\n            i += 1;\n        }\n    };\n    return HitAreasGenerator;\n}(VisibleNodeIterator));\nexports.HitAreasGenerator = HitAreasGenerator;\nvar DragElement = /** @class */ (function () {\n    function DragElement(nodeName, offsetX, offsetY, $tree) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.$element = jQuery(\"<span class=\\\"jqtree-title jqtree-dragging\\\">\" + nodeName + \"</span>\");\n        this.$element.css(\"position\", \"absolute\");\n        $tree.append(this.$element);\n    }\n    DragElement.prototype.move = function (pageX, pageY) {\n        this.$element.offset({\n            left: pageX - this.offsetX,\n            top: pageY - this.offsetY,\n        });\n    };\n    DragElement.prototype.remove = function () {\n        this.$element.remove();\n    };\n    return DragElement;\n}());\n","\"use strict\";\nexports.__esModule = true;\nvar util_1 = require(\"./util\");\nvar ElementsRenderer = /** @class */ (function () {\n    function ElementsRenderer(treeWidget) {\n        this.treeWidget = treeWidget;\n        this.openedIconElement = this.createButtonElement(treeWidget.options.openedIcon || \"+\");\n        this.closedIconElement = this.createButtonElement(treeWidget.options.closedIcon || \"-\");\n    }\n    ElementsRenderer.prototype.render = function (fromNode) {\n        if (fromNode && fromNode.parent) {\n            this.renderFromNode(fromNode);\n        }\n        else {\n            this.renderFromRoot();\n        }\n    };\n    ElementsRenderer.prototype.renderFromRoot = function () {\n        var $element = this.treeWidget.element;\n        $element.empty();\n        this.createDomElements($element[0], this.treeWidget.tree.children, true, 1);\n    };\n    ElementsRenderer.prototype.renderFromNode = function (node) {\n        // remember current li\n        var $previousLi = jQuery(node.element);\n        // create element\n        var li = this.createLi(node, node.getLevel());\n        this.attachNodeData(node, li);\n        // add element to dom\n        $previousLi.after(li);\n        // remove previous li\n        $previousLi.remove();\n        // create children\n        if (node.children) {\n            this.createDomElements(li, node.children, false, node.getLevel() + 1);\n        }\n    };\n    ElementsRenderer.prototype.createDomElements = function (element, children, isRootNode, level) {\n        var ul = this.createUl(isRootNode);\n        element.appendChild(ul);\n        for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\n            var child = children_1[_i];\n            var li = this.createLi(child, level);\n            ul.appendChild(li);\n            this.attachNodeData(child, li);\n            if (child.hasChildren()) {\n                this.createDomElements(li, child.children, false, level + 1);\n            }\n        }\n    };\n    ElementsRenderer.prototype.attachNodeData = function (node, li) {\n        node.element = li;\n        jQuery(li).data(\"node\", node);\n    };\n    ElementsRenderer.prototype.createUl = function (isRootNode) {\n        var classString;\n        var role;\n        if (!isRootNode) {\n            classString = \"\";\n            role = \"group\";\n        }\n        else {\n            classString = \"jqtree-tree\";\n            role = \"tree\";\n            if (this.treeWidget.options.rtl) {\n                classString += \" jqtree-rtl\";\n            }\n        }\n        var ul = document.createElement(\"ul\");\n        ul.className = \"jqtree_common \" + classString;\n        ul.setAttribute(\"role\", role);\n        return ul;\n    };\n    ElementsRenderer.prototype.createLi = function (node, level) {\n        var isSelected = Boolean(this.treeWidget.selectNodeHandler &&\n            this.treeWidget.selectNodeHandler.isNodeSelected(node));\n        var mustShowFolder = node.isFolder() ||\n            (node.isEmptyFolder && this.treeWidget.options.showEmptyFolder);\n        var li = mustShowFolder\n            ? this.createFolderLi(node, level, isSelected)\n            : this.createNodeLi(node, level, isSelected);\n        if (this.treeWidget.options.onCreateLi) {\n            this.treeWidget.options.onCreateLi(node, jQuery(li), isSelected);\n        }\n        return li;\n    };\n    ElementsRenderer.prototype.createFolderLi = function (node, level, isSelected) {\n        var buttonClasses = this.getButtonClasses(node);\n        var folderClasses = this.getFolderClasses(node, isSelected);\n        var iconElement = node.is_open\n            ? this.openedIconElement\n            : this.closedIconElement;\n        // li\n        var li = document.createElement(\"li\");\n        li.className = \"jqtree_common \" + folderClasses;\n        li.setAttribute(\"role\", \"presentation\");\n        // div\n        var div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"presentation\");\n        li.appendChild(div);\n        // button link\n        var buttonLink = document.createElement(\"a\");\n        buttonLink.className = buttonClasses;\n        buttonLink.appendChild(iconElement.cloneNode(true));\n        buttonLink.setAttribute(\"role\", \"presentation\");\n        buttonLink.setAttribute(\"aria-hidden\", \"true\");\n        if (this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n        // title span\n        div.appendChild(this.createTitleSpan(node.name, level, isSelected, node.is_open, true));\n        if (!this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n        return li;\n    };\n    ElementsRenderer.prototype.createNodeLi = function (node, level, isSelected) {\n        var liClasses = [\"jqtree_common\"];\n        if (isSelected) {\n            liClasses.push(\"jqtree-selected\");\n        }\n        var classString = liClasses.join(\" \");\n        // li\n        var li = document.createElement(\"li\");\n        li.className = classString;\n        li.setAttribute(\"role\", \"presentation\");\n        // div\n        var div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"presentation\");\n        li.appendChild(div);\n        // title span\n        div.appendChild(this.createTitleSpan(node.name, level, isSelected, node.is_open, false));\n        return li;\n    };\n    ElementsRenderer.prototype.createTitleSpan = function (nodeName, level, isSelected, isOpen, isFolder) {\n        var titleSpan = document.createElement(\"span\");\n        var classes = \"jqtree-title jqtree_common\";\n        if (isFolder) {\n            classes += \" jqtree-title-folder\";\n        }\n        titleSpan.className = classes;\n        titleSpan.setAttribute(\"role\", \"treeitem\");\n        titleSpan.setAttribute(\"aria-level\", \"\" + level);\n        titleSpan.setAttribute(\"aria-selected\", util_1.getBoolString(isSelected));\n        titleSpan.setAttribute(\"aria-expanded\", util_1.getBoolString(isOpen));\n        if (isSelected) {\n            var tabIndex = this.treeWidget.options.tabIndex;\n            if (tabIndex !== undefined) {\n                titleSpan.setAttribute(\"tabindex\", \"\" + tabIndex);\n            }\n        }\n        titleSpan.textContent = this.escapeIfNecessary(nodeName);\n        return titleSpan;\n    };\n    ElementsRenderer.prototype.getButtonClasses = function (node) {\n        var classes = [\"jqtree-toggler\", \"jqtree_common\"];\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n        if (this.treeWidget.options.buttonLeft) {\n            classes.push(\"jqtree-toggler-left\");\n        }\n        else {\n            classes.push(\"jqtree-toggler-right\");\n        }\n        return classes.join(\" \");\n    };\n    ElementsRenderer.prototype.getFolderClasses = function (node, isSelected) {\n        var classes = [\"jqtree-folder\"];\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n        if (isSelected) {\n            classes.push(\"jqtree-selected\");\n        }\n        if (node.is_loading) {\n            classes.push(\"jqtree-loading\");\n        }\n        return classes.join(\" \");\n    };\n    ElementsRenderer.prototype.escapeIfNecessary = function (value) {\n        if (this.treeWidget.options.autoEscape) {\n            return util_1.htmlEscape(value);\n        }\n        else {\n            return value;\n        }\n    };\n    ElementsRenderer.prototype.createButtonElement = function (value) {\n        if (typeof value === \"string\") {\n            // convert value to html\n            var div = document.createElement(\"div\");\n            div.innerHTML = value;\n            return document.createTextNode(div.innerHTML);\n        }\n        else {\n            return jQuery(value)[0];\n        }\n    };\n    return ElementsRenderer;\n}());\nexports[\"default\"] = ElementsRenderer;\n","\"use strict\";\nexports.__esModule = true;\nvar DataLoader = /** @class */ (function () {\n    function DataLoader(treeWidget) {\n        this.treeWidget = treeWidget;\n    }\n    DataLoader.prototype.loadFromUrl = function (urlInfo, parentNode, onFinished) {\n        var _this = this;\n        if (!urlInfo) {\n            return;\n        }\n        var $el = this.getDomElement(parentNode);\n        this.addLoadingClass($el);\n        this.notifyLoading(true, parentNode, $el);\n        var stopLoading = function () {\n            _this.removeLoadingClass($el);\n            _this.notifyLoading(false, parentNode, $el);\n        };\n        var handleSuccess = function (data) {\n            stopLoading();\n            _this.treeWidget.loadData(_this.parseData(data), parentNode);\n            if (onFinished && typeof onFinished === \"function\") {\n                onFinished();\n            }\n        };\n        var handleError = function (jqXHR) {\n            stopLoading();\n            if (_this.treeWidget.options.onLoadFailed) {\n                _this.treeWidget.options.onLoadFailed(jqXHR);\n            }\n        };\n        this.submitRequest(urlInfo, handleSuccess, handleError);\n    };\n    DataLoader.prototype.addLoadingClass = function ($el) {\n        if ($el) {\n            $el.addClass(\"jqtree-loading\");\n        }\n    };\n    DataLoader.prototype.removeLoadingClass = function ($el) {\n        if ($el) {\n            $el.removeClass(\"jqtree-loading\");\n        }\n    };\n    DataLoader.prototype.getDomElement = function (parentNode) {\n        if (parentNode) {\n            return jQuery(parentNode.element);\n        }\n        else {\n            return this.treeWidget.element;\n        }\n    };\n    DataLoader.prototype.notifyLoading = function (isLoading, node, $el) {\n        if (this.treeWidget.options.onLoading) {\n            this.treeWidget.options.onLoading(isLoading, node, $el);\n        }\n        this.treeWidget._triggerEvent(\"tree.loading_data\", {\n            isLoading: isLoading,\n            node: node,\n            $el: $el,\n        });\n    };\n    DataLoader.prototype.submitRequest = function (urlInfo, handleSuccess, handleError) {\n        var ajaxSettings = jQuery.extend({ method: \"GET\" }, typeof urlInfo === \"string\" ? { url: urlInfo } : urlInfo, {\n            cache: false,\n            dataType: \"json\",\n            success: handleSuccess,\n            error: handleError,\n        });\n        ajaxSettings.method = ajaxSettings.method.toUpperCase();\n        void jQuery.ajax(ajaxSettings);\n    };\n    DataLoader.prototype.parseData = function (data) {\n        var dataFilter = this.treeWidget.options.dataFilter;\n        var getParsedData = function () {\n            if (typeof data === \"string\") {\n                return jQuery.parseJSON(data);\n            }\n            else {\n                return data;\n            }\n        };\n        var parsedData = getParsedData();\n        if (dataFilter) {\n            return dataFilter(parsedData);\n        }\n        else {\n            return parsedData;\n        }\n    };\n    return DataLoader;\n}());\nexports[\"default\"] = DataLoader;\n","\"use strict\";\nexports.__esModule = true;\nvar KeyHandler = /** @class */ (function () {\n    function KeyHandler(treeWidget) {\n        var _this = this;\n        this.handleKeyDown = function (e) {\n            if (!_this.canHandleKeyboard()) {\n                return true;\n            }\n            else {\n                var key = e.which;\n                switch (key) {\n                    case KeyHandler.DOWN:\n                        return _this.moveDown();\n                    case KeyHandler.UP:\n                        return _this.moveUp();\n                    case KeyHandler.RIGHT:\n                        return _this.moveRight();\n                    case KeyHandler.LEFT:\n                        return _this.moveLeft();\n                    default:\n                        return true;\n                }\n            }\n        };\n        this.treeWidget = treeWidget;\n        if (treeWidget.options.keyboardSupport) {\n            jQuery(document).on(\"keydown.jqtree\", this.handleKeyDown);\n        }\n    }\n    KeyHandler.prototype.deinit = function () {\n        jQuery(document).off(\"keydown.jqtree\");\n    };\n    KeyHandler.prototype.moveDown = function () {\n        var node = this.treeWidget.getSelectedNode();\n        if (node) {\n            return this.selectNode(node.getNextNode());\n        }\n        else {\n            return false;\n        }\n    };\n    KeyHandler.prototype.moveUp = function () {\n        var node = this.treeWidget.getSelectedNode();\n        if (node) {\n            return this.selectNode(node.getPreviousNode());\n        }\n        else {\n            return false;\n        }\n    };\n    KeyHandler.prototype.moveRight = function () {\n        var node = this.treeWidget.getSelectedNode();\n        if (!node) {\n            return true;\n        }\n        else if (!node.isFolder()) {\n            return true;\n        }\n        else {\n            // folder node\n            if (node.is_open) {\n                // Right moves to the first child of an open node\n                return this.selectNode(node.getNextNode());\n            }\n            else {\n                // Right expands a closed node\n                this.treeWidget.openNode(node);\n                return false;\n            }\n        }\n    };\n    KeyHandler.prototype.moveLeft = function () {\n        var node = this.treeWidget.getSelectedNode();\n        if (!node) {\n            return true;\n        }\n        else if (node.isFolder() && node.is_open) {\n            // Left on an open node closes the node\n            this.treeWidget.closeNode(node);\n            return false;\n        }\n        else {\n            // Left on a closed or end node moves focus to the node's parent\n            return this.selectNode(node.getParent());\n        }\n    };\n    KeyHandler.prototype.selectNode = function (node) {\n        if (!node) {\n            return true;\n        }\n        else {\n            this.treeWidget.selectNode(node);\n            if (this.treeWidget.scrollHandler &&\n                !this.treeWidget.scrollHandler.isScrolledIntoView(jQuery(node.element).find(\".jqtree-element\"))) {\n                this.treeWidget.scrollToNode(node);\n            }\n            return false;\n        }\n    };\n    KeyHandler.prototype.canHandleKeyboard = function () {\n        return ((this.treeWidget.options.keyboardSupport || false) &&\n            this.isFocusOnTree() &&\n            this.treeWidget.getSelectedNode() != null);\n    };\n    KeyHandler.prototype.isFocusOnTree = function () {\n        var activeElement = document.activeElement;\n        return Boolean(activeElement &&\n            activeElement.tagName === \"SPAN\" &&\n            this.treeWidget._containsElement(activeElement));\n    };\n    KeyHandler.LEFT = 37;\n    KeyHandler.UP = 38;\n    KeyHandler.RIGHT = 39;\n    KeyHandler.DOWN = 40;\n    return KeyHandler;\n}());\nexports[\"default\"] = KeyHandler;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\n/*\nThis widget does the same a the mouse widget in jqueryui.\n*/\nvar simple_widget_1 = require(\"./simple.widget\");\nvar getPositionInfoFromMouseEvent = function (e) { return ({\n    pageX: e.pageX,\n    pageY: e.pageY,\n    target: e.target,\n    originalEvent: e,\n}); };\nvar getPositionInfoFromTouch = function (touch, e) { return ({\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    target: touch.target,\n    originalEvent: e,\n}); };\nvar MouseWidget = /** @class */ (function (_super) {\n    __extends(MouseWidget, _super);\n    function MouseWidget() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.mouseDown = function (e) {\n            var mouseDownEvent = e;\n            // Is left mouse button?\n            if (mouseDownEvent.which !== 1) {\n                return;\n            }\n            var result = _this.handleMouseDown(getPositionInfoFromMouseEvent(mouseDownEvent));\n            if (result) {\n                mouseDownEvent.preventDefault();\n            }\n            return result;\n        };\n        _this.mouseMove = function (e) {\n            var mouseMoveEvent = e;\n            return _this.handleMouseMove(e, getPositionInfoFromMouseEvent(mouseMoveEvent));\n        };\n        _this.mouseUp = function (e) {\n            var mouseUpEvent = e;\n            _this.handleMouseUp(getPositionInfoFromMouseEvent(mouseUpEvent));\n        };\n        _this.touchStart = function (e) {\n            var touchEvent = e.originalEvent;\n            if (!touchEvent) {\n                return false;\n            }\n            if (touchEvent.touches.length > 1) {\n                return false;\n            }\n            var touch = touchEvent.changedTouches[0];\n            return _this.handleMouseDown(getPositionInfoFromTouch(touch, e));\n        };\n        _this.touchMove = function (e) {\n            var touchEvent = e.originalEvent;\n            if (!touchEvent) {\n                return false;\n            }\n            if (touchEvent.touches.length > 1) {\n                return false;\n            }\n            var touch = touchEvent.changedTouches[0];\n            return _this.handleMouseMove(e, getPositionInfoFromTouch(touch, e));\n        };\n        _this.touchEnd = function (e) {\n            var touchEvent = e.originalEvent;\n            if (!touchEvent) {\n                return false;\n            }\n            if (touchEvent.touches.length > 1) {\n                return false;\n            }\n            var touch = touchEvent.changedTouches[0];\n            _this.handleMouseUp(getPositionInfoFromTouch(touch, e));\n            return false;\n        };\n        return _this;\n    }\n    MouseWidget.prototype.setMouseDelay = function (mouseDelay) {\n        this.mouseDelay = mouseDelay;\n    };\n    MouseWidget.prototype.init = function () {\n        this.$el.on(\"mousedown.mousewidget\", this.mouseDown);\n        this.$el.on(\"touchstart.mousewidget\", this.touchStart);\n        this.isMouseStarted = false;\n        this.mouseDelay = 0;\n        this.mouseDelayTimer = null;\n        this.isMouseDelayMet = true;\n        this.mouseDownInfo = null;\n    };\n    MouseWidget.prototype.deinit = function () {\n        this.$el.off(\"mousedown.mousewidget\");\n        this.$el.off(\"touchstart.mousewidget\");\n        var $document = jQuery(document);\n        $document.off(\"mousemove.mousewidget\");\n        $document.off(\"mouseup.mousewidget\");\n    };\n    MouseWidget.prototype.handleMouseDown = function (positionInfo) {\n        // We may have missed mouseup (out of window)\n        if (this.isMouseStarted) {\n            this.handleMouseUp(positionInfo);\n        }\n        this.mouseDownInfo = positionInfo;\n        if (!this.mouseCapture(positionInfo)) {\n            return false;\n        }\n        this.handleStartMouse();\n        return true;\n    };\n    MouseWidget.prototype.handleStartMouse = function () {\n        var $document = jQuery(document);\n        $document.on(\"mousemove.mousewidget\", this.mouseMove);\n        $document.on(\"touchmove.mousewidget\", this.touchMove);\n        $document.on(\"mouseup.mousewidget\", this.mouseUp);\n        $document.on(\"touchend.mousewidget\", this.touchEnd);\n        if (this.mouseDelay) {\n            this.startMouseDelayTimer();\n        }\n    };\n    MouseWidget.prototype.startMouseDelayTimer = function () {\n        var _this = this;\n        if (this.mouseDelayTimer) {\n            clearTimeout(this.mouseDelayTimer);\n        }\n        this.mouseDelayTimer = window.setTimeout(function () {\n            _this.isMouseDelayMet = true;\n        }, this.mouseDelay);\n        this.isMouseDelayMet = false;\n    };\n    MouseWidget.prototype.handleMouseMove = function (e, positionInfo) {\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n            e.preventDefault();\n            return false;\n        }\n        if (this.mouseDelay && !this.isMouseDelayMet) {\n            return true;\n        }\n        if (this.mouseDownInfo) {\n            this.isMouseStarted = this.mouseStart(this.mouseDownInfo) !== false;\n        }\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n        }\n        else {\n            this.handleMouseUp(positionInfo);\n        }\n        return !this.isMouseStarted;\n    };\n    MouseWidget.prototype.handleMouseUp = function (positionInfo) {\n        var $document = jQuery(document);\n        $document.off(\"mousemove.mousewidget\");\n        $document.off(\"touchmove.mousewidget\");\n        $document.off(\"mouseup.mousewidget\");\n        $document.off(\"touchend.mousewidget\");\n        if (this.isMouseStarted) {\n            this.isMouseStarted = false;\n            this.mouseStop(positionInfo);\n        }\n    };\n    return MouseWidget;\n}(simple_widget_1[\"default\"]));\nexports[\"default\"] = MouseWidget;\n","\"use strict\";\nexports.__esModule = true;\nvar util_1 = require(\"./util\");\nvar SaveStateHandler = /** @class */ (function () {\n    function SaveStateHandler(treeWidget) {\n        this.treeWidget = treeWidget;\n    }\n    SaveStateHandler.prototype.saveState = function () {\n        var state = JSON.stringify(this.getState());\n        if (this.treeWidget.options.onSetStateFromStorage) {\n            this.treeWidget.options.onSetStateFromStorage(state);\n        }\n        else if (this.supportsLocalStorage()) {\n            localStorage.setItem(this.getKeyName(), state);\n        }\n    };\n    SaveStateHandler.prototype.getStateFromStorage = function () {\n        var jsonData = this.loadFromStorage();\n        if (jsonData) {\n            return this.parseState(jsonData);\n        }\n        else {\n            return null;\n        }\n    };\n    SaveStateHandler.prototype.getState = function () {\n        var _this = this;\n        var getOpenNodeIds = function () {\n            var openNodes = [];\n            _this.treeWidget.tree.iterate(function (node) {\n                if (node.is_open && node.id && node.hasChildren()) {\n                    openNodes.push(node.id);\n                }\n                return true;\n            });\n            return openNodes;\n        };\n        var getSelectedNodeIds = function () {\n            var selectedNodeIds = [];\n            _this.treeWidget.getSelectedNodes().forEach(function (node) {\n                if (node.id != null) {\n                    selectedNodeIds.push(node.id);\n                }\n            });\n            return selectedNodeIds;\n        };\n        return {\n            open_nodes: getOpenNodeIds(),\n            selected_node: getSelectedNodeIds(),\n        };\n    };\n    /*\n    Set initial state\n    Don't handle nodes that are loaded on demand\n\n    result: must load on demand\n    */\n    SaveStateHandler.prototype.setInitialState = function (state) {\n        if (!state) {\n            return false;\n        }\n        else {\n            var mustLoadOnDemand = false;\n            if (state.open_nodes) {\n                mustLoadOnDemand = this.openInitialNodes(state.open_nodes);\n            }\n            if (state.selected_node) {\n                this.resetSelection();\n                this.selectInitialNodes(state.selected_node);\n            }\n            return mustLoadOnDemand;\n        }\n    };\n    SaveStateHandler.prototype.setInitialStateOnDemand = function (state, cbFinished) {\n        if (state) {\n            this.doSetInitialStateOnDemand(state.open_nodes, state.selected_node, cbFinished);\n        }\n        else {\n            cbFinished();\n        }\n    };\n    SaveStateHandler.prototype.getNodeIdToBeSelected = function () {\n        var state = this.getStateFromStorage();\n        if (state && state.selected_node) {\n            return state.selected_node[0];\n        }\n        else {\n            return null;\n        }\n    };\n    SaveStateHandler.prototype.parseState = function (jsonData) {\n        var state = jQuery.parseJSON(jsonData);\n        // Check if selected_node is an int (instead of an array)\n        if (state && state.selected_node && util_1.isInt(state.selected_node)) {\n            // Convert to array\n            state.selected_node = [state.selected_node];\n        }\n        return state;\n    };\n    SaveStateHandler.prototype.loadFromStorage = function () {\n        if (this.treeWidget.options.onGetStateFromStorage) {\n            return this.treeWidget.options.onGetStateFromStorage();\n        }\n        else if (this.supportsLocalStorage()) {\n            return localStorage.getItem(this.getKeyName());\n        }\n        else {\n            return null;\n        }\n    };\n    SaveStateHandler.prototype.openInitialNodes = function (nodeIds) {\n        var mustLoadOnDemand = false;\n        for (var _i = 0, nodeIds_1 = nodeIds; _i < nodeIds_1.length; _i++) {\n            var nodeDd = nodeIds_1[_i];\n            var node = this.treeWidget.getNodeById(nodeDd);\n            if (node) {\n                if (!node.load_on_demand) {\n                    node.is_open = true;\n                }\n                else {\n                    mustLoadOnDemand = true;\n                }\n            }\n        }\n        return mustLoadOnDemand;\n    };\n    SaveStateHandler.prototype.selectInitialNodes = function (nodeIds) {\n        var selectCount = 0;\n        for (var _i = 0, nodeIds_2 = nodeIds; _i < nodeIds_2.length; _i++) {\n            var nodeId = nodeIds_2[_i];\n            var node = this.treeWidget.getNodeById(nodeId);\n            if (node) {\n                selectCount += 1;\n                if (this.treeWidget.selectNodeHandler) {\n                    this.treeWidget.selectNodeHandler.addToSelection(node);\n                }\n            }\n        }\n        return selectCount !== 0;\n    };\n    SaveStateHandler.prototype.resetSelection = function () {\n        var selectNodeHandler = this.treeWidget.selectNodeHandler;\n        if (selectNodeHandler) {\n            var selectedNodes = selectNodeHandler.getSelectedNodes();\n            selectedNodes.forEach(function (node) {\n                selectNodeHandler.removeFromSelection(node);\n            });\n        }\n    };\n    SaveStateHandler.prototype.doSetInitialStateOnDemand = function (nodeIdsParam, selectedNodes, cbFinished) {\n        var _this = this;\n        var loadingCount = 0;\n        var nodeIds = nodeIdsParam;\n        var openNodes = function () {\n            var newNodesIds = [];\n            for (var _i = 0, nodeIds_3 = nodeIds; _i < nodeIds_3.length; _i++) {\n                var nodeId = nodeIds_3[_i];\n                var node = _this.treeWidget.getNodeById(nodeId);\n                if (!node) {\n                    newNodesIds.push(nodeId);\n                }\n                else {\n                    if (!node.is_loading) {\n                        if (node.load_on_demand) {\n                            loadAndOpenNode(node);\n                        }\n                        else {\n                            _this.treeWidget._openNode(node, false, null);\n                        }\n                    }\n                }\n            }\n            nodeIds = newNodesIds;\n            if (_this.selectInitialNodes(selectedNodes)) {\n                _this.treeWidget._refreshElements(null);\n            }\n            if (loadingCount === 0) {\n                cbFinished();\n            }\n        };\n        var loadAndOpenNode = function (node) {\n            loadingCount += 1;\n            _this.treeWidget._openNode(node, false, function () {\n                loadingCount -= 1;\n                openNodes();\n            });\n        };\n        openNodes();\n    };\n    SaveStateHandler.prototype.getKeyName = function () {\n        if (typeof this.treeWidget.options.saveState === \"string\") {\n            return this.treeWidget.options.saveState;\n        }\n        else {\n            return \"tree\";\n        }\n    };\n    SaveStateHandler.prototype.supportsLocalStorage = function () {\n        var testSupport = function () {\n            // Is local storage supported?\n            if (localStorage == null) {\n                return false;\n            }\n            else {\n                // Check if it's possible to store an item. Safari does not allow this in private browsing mode.\n                try {\n                    var key = \"_storage_test\";\n                    sessionStorage.setItem(key, \"value\");\n                    sessionStorage.removeItem(key);\n                }\n                catch (error) {\n                    return false;\n                }\n                return true;\n            }\n        };\n        if (this._supportsLocalStorage == null) {\n            this._supportsLocalStorage = testSupport();\n        }\n        return this._supportsLocalStorage;\n    };\n    return SaveStateHandler;\n}());\nexports[\"default\"] = SaveStateHandler;\n","\"use strict\";\nexports.__esModule = true;\nvar ScrollHandler = /** @class */ (function () {\n    function ScrollHandler(treeWidget) {\n        this.treeWidget = treeWidget;\n        this.previousTop = -1;\n        this.isInitialized = false;\n    }\n    ScrollHandler.prototype.checkScrolling = function () {\n        this.ensureInit();\n        this.checkVerticalScrolling();\n        this.checkHorizontalScrolling();\n    };\n    ScrollHandler.prototype.scrollToY = function (top) {\n        this.ensureInit();\n        if (this.$scrollParent) {\n            this.$scrollParent[0].scrollTop = top;\n        }\n        else {\n            var offset = this.treeWidget.$el.offset();\n            var treeTop = offset ? offset.top : 0;\n            jQuery(document).scrollTop(top + treeTop);\n        }\n    };\n    ScrollHandler.prototype.isScrolledIntoView = function ($element) {\n        this.ensureInit();\n        var elementBottom;\n        var viewBottom;\n        var elementTop;\n        var viewTop;\n        var elHeight = $element.height() || 0;\n        if (this.$scrollParent) {\n            viewTop = 0;\n            viewBottom = this.$scrollParent.height() || 0;\n            var offset = $element.offset();\n            var originalTop = offset ? offset.top : 0;\n            elementTop = originalTop - this.scrollParentTop;\n            elementBottom = elementTop + elHeight;\n        }\n        else {\n            viewTop = jQuery(window).scrollTop() || 0;\n            var windowHeight = jQuery(window).height() || 0;\n            viewBottom = viewTop + windowHeight;\n            var offset = $element.offset();\n            elementTop = offset ? offset.top : 0;\n            elementBottom = elementTop + elHeight;\n        }\n        return elementBottom <= viewBottom && elementTop >= viewTop;\n    };\n    ScrollHandler.prototype.getScrollLeft = function () {\n        if (!this.$scrollParent) {\n            return 0;\n        }\n        else {\n            return this.$scrollParent.scrollLeft() || 0;\n        }\n    };\n    ScrollHandler.prototype.initScrollParent = function () {\n        var _this = this;\n        var getParentWithOverflow = function () {\n            var cssAttributes = [\"overflow\", \"overflow-y\"];\n            var hasOverFlow = function ($el) {\n                for (var _i = 0, cssAttributes_1 = cssAttributes; _i < cssAttributes_1.length; _i++) {\n                    var attr = cssAttributes_1[_i];\n                    var overflowValue = $el.css(attr);\n                    if (overflowValue === \"auto\" ||\n                        overflowValue === \"scroll\") {\n                        return true;\n                    }\n                }\n                return false;\n            };\n            if (hasOverFlow(_this.treeWidget.$el)) {\n                return _this.treeWidget.$el;\n            }\n            for (var _i = 0, _a = _this.treeWidget.$el.parents().get(); _i < _a.length; _i++) {\n                var el = _a[_i];\n                var $el = jQuery(el);\n                if (hasOverFlow($el)) {\n                    return $el;\n                }\n            }\n            return null;\n        };\n        var setDocumentAsScrollParent = function () {\n            _this.scrollParentTop = 0;\n            _this.$scrollParent = null;\n        };\n        if (this.treeWidget.$el.css(\"position\") === \"fixed\") {\n            setDocumentAsScrollParent();\n        }\n        var $scrollParent = getParentWithOverflow();\n        if ($scrollParent &&\n            $scrollParent.length &&\n            $scrollParent[0].tagName !== \"HTML\") {\n            this.$scrollParent = $scrollParent;\n            var offset = this.$scrollParent.offset();\n            this.scrollParentTop = offset ? offset.top : 0;\n        }\n        else {\n            setDocumentAsScrollParent();\n        }\n        this.isInitialized = true;\n    };\n    ScrollHandler.prototype.ensureInit = function () {\n        if (!this.isInitialized) {\n            this.initScrollParent();\n        }\n    };\n    ScrollHandler.prototype.handleVerticalScrollingWithScrollParent = function (area) {\n        var scrollParent = this.$scrollParent && this.$scrollParent[0];\n        if (!scrollParent) {\n            return;\n        }\n        var distanceBottom = this.scrollParentTop + scrollParent.offsetHeight - area.bottom;\n        if (distanceBottom < 20) {\n            scrollParent.scrollTop += 20;\n            this.treeWidget.refreshHitAreas();\n            this.previousTop = -1;\n        }\n        else if (area.top - this.scrollParentTop < 20) {\n            scrollParent.scrollTop -= 20;\n            this.treeWidget.refreshHitAreas();\n            this.previousTop = -1;\n        }\n    };\n    ScrollHandler.prototype.handleVerticalScrollingWithDocument = function (area) {\n        var scrollTop = jQuery(document).scrollTop() || 0;\n        var distanceTop = area.top - scrollTop;\n        if (distanceTop < 20) {\n            jQuery(document).scrollTop(scrollTop - 20);\n        }\n        else {\n            var windowHeight = jQuery(window).height() || 0;\n            if (windowHeight - (area.bottom - scrollTop) < 20) {\n                jQuery(document).scrollTop(scrollTop + 20);\n            }\n        }\n    };\n    ScrollHandler.prototype.checkVerticalScrolling = function () {\n        var hoveredArea = this.treeWidget.dndHandler &&\n            this.treeWidget.dndHandler.hoveredArea;\n        if (hoveredArea && hoveredArea.top !== this.previousTop) {\n            this.previousTop = hoveredArea.top;\n            if (this.$scrollParent) {\n                this.handleVerticalScrollingWithScrollParent(hoveredArea);\n            }\n            else {\n                this.handleVerticalScrollingWithDocument(hoveredArea);\n            }\n        }\n    };\n    ScrollHandler.prototype.checkHorizontalScrolling = function () {\n        var positionInfo = this.treeWidget.dndHandler &&\n            this.treeWidget.dndHandler.positionInfo;\n        if (!positionInfo) {\n            return;\n        }\n        if (this.$scrollParent) {\n            this.handleHorizontalScrollingWithParent(positionInfo);\n        }\n        else {\n            this.handleHorizontalScrollingWithDocument(positionInfo);\n        }\n    };\n    ScrollHandler.prototype.handleHorizontalScrollingWithParent = function (positionInfo) {\n        if (positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined) {\n            return;\n        }\n        var $scrollParent = this.$scrollParent;\n        var scrollParentOffset = $scrollParent && $scrollParent.offset();\n        if (!($scrollParent && scrollParentOffset)) {\n            return;\n        }\n        var scrollParent = $scrollParent[0];\n        var canScrollRight = scrollParent.scrollLeft + scrollParent.clientWidth <\n            scrollParent.scrollWidth;\n        var canScrollLeft = scrollParent.scrollLeft > 0;\n        var rightEdge = scrollParentOffset.left + scrollParent.clientWidth;\n        var leftEdge = scrollParentOffset.left;\n        var isNearRightEdge = positionInfo.pageX > rightEdge - 20;\n        var isNearLeftEdge = positionInfo.pageX < leftEdge + 20;\n        if (isNearRightEdge && canScrollRight) {\n            scrollParent.scrollLeft = Math.min(scrollParent.scrollLeft + 20, scrollParent.scrollWidth);\n        }\n        else if (isNearLeftEdge && canScrollLeft) {\n            scrollParent.scrollLeft = Math.max(scrollParent.scrollLeft - 20, 0);\n        }\n    };\n    ScrollHandler.prototype.handleHorizontalScrollingWithDocument = function (positionInfo) {\n        if (positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined) {\n            return;\n        }\n        var $document = jQuery(document);\n        var scrollLeft = $document.scrollLeft() || 0;\n        var windowWidth = jQuery(window).width() || 0;\n        var canScrollLeft = scrollLeft > 0;\n        var isNearRightEdge = positionInfo.pageX > windowWidth - 20;\n        var isNearLeftEdge = positionInfo.pageX - scrollLeft < 20;\n        if (isNearRightEdge) {\n            $document.scrollLeft(scrollLeft + 20);\n        }\n        else if (isNearLeftEdge && canScrollLeft) {\n            $document.scrollLeft(Math.max(scrollLeft - 20, 0));\n        }\n    };\n    return ScrollHandler;\n}());\nexports[\"default\"] = ScrollHandler;\n","\"use strict\";\nexports.__esModule = true;\nvar SelectNodeHandler = /** @class */ (function () {\n    function SelectNodeHandler(treeWidget) {\n        this.treeWidget = treeWidget;\n        this.clear();\n    }\n    SelectNodeHandler.prototype.getSelectedNode = function () {\n        var selectedNodes = this.getSelectedNodes();\n        if (selectedNodes.length) {\n            return selectedNodes[0];\n        }\n        else {\n            return false;\n        }\n    };\n    SelectNodeHandler.prototype.getSelectedNodes = function () {\n        if (this.selectedSingleNode) {\n            return [this.selectedSingleNode];\n        }\n        else {\n            var selectedNodes = [];\n            for (var id in this.selectedNodes) {\n                if (Object.prototype.hasOwnProperty.call(this.selectedNodes, id)) {\n                    var node = this.treeWidget.getNodeById(id);\n                    if (node) {\n                        selectedNodes.push(node);\n                    }\n                }\n            }\n            return selectedNodes;\n        }\n    };\n    SelectNodeHandler.prototype.getSelectedNodesUnder = function (parent) {\n        if (this.selectedSingleNode) {\n            if (parent.isParentOf(this.selectedSingleNode)) {\n                return [this.selectedSingleNode];\n            }\n            else {\n                return [];\n            }\n        }\n        else {\n            var selectedNodes = [];\n            for (var id in this.selectedNodes) {\n                if (Object.prototype.hasOwnProperty.call(this.selectedNodes, id)) {\n                    var node = this.treeWidget.getNodeById(id);\n                    if (node && parent.isParentOf(node)) {\n                        selectedNodes.push(node);\n                    }\n                }\n            }\n            return selectedNodes;\n        }\n    };\n    SelectNodeHandler.prototype.isNodeSelected = function (node) {\n        if (!node) {\n            return false;\n        }\n        else if (node.id != null) {\n            if (this.selectedNodes[node.id]) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else if (this.selectedSingleNode) {\n            return this.selectedSingleNode.element === node.element;\n        }\n        else {\n            return false;\n        }\n    };\n    SelectNodeHandler.prototype.clear = function () {\n        this.selectedNodes = {};\n        this.selectedSingleNode = null;\n    };\n    SelectNodeHandler.prototype.removeFromSelection = function (node, includeChildren) {\n        var _this = this;\n        if (includeChildren === void 0) { includeChildren = false; }\n        if (node.id == null) {\n            if (this.selectedSingleNode &&\n                node.element === this.selectedSingleNode.element) {\n                this.selectedSingleNode = null;\n            }\n        }\n        else {\n            delete this.selectedNodes[node.id];\n            if (includeChildren) {\n                node.iterate(function () {\n                    if (node.id != null) {\n                        delete _this.selectedNodes[node.id];\n                    }\n                    return true;\n                });\n            }\n        }\n    };\n    SelectNodeHandler.prototype.addToSelection = function (node) {\n        if (node.id != null) {\n            this.selectedNodes[node.id] = true;\n        }\n        else {\n            this.selectedSingleNode = node;\n        }\n    };\n    return SelectNodeHandler;\n}());\nexports[\"default\"] = SelectNodeHandler;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\nexports.BorderDropHint = exports.FolderElement = exports.NodeElement = void 0;\nvar node_1 = require(\"./node\");\nvar NodeElement = /** @class */ (function () {\n    function NodeElement(node, treeWidget) {\n        this.init(node, treeWidget);\n    }\n    NodeElement.prototype.init = function (node, treeWidget) {\n        this.node = node;\n        this.treeWidget = treeWidget;\n        if (!node.element) {\n            node.element = this.treeWidget.element.get(0);\n        }\n        this.$element = jQuery(node.element);\n    };\n    NodeElement.prototype.addDropHint = function (position) {\n        if (this.mustShowBorderDropHint(position)) {\n            return new BorderDropHint(this.$element, this.treeWidget._getScrollLeft());\n        }\n        else {\n            return new GhostDropHint(this.node, this.$element, position);\n        }\n    };\n    NodeElement.prototype.select = function (mustSetFocus) {\n        var _a;\n        var $li = this.getLi();\n        $li.addClass(\"jqtree-selected\");\n        $li.attr(\"aria-selected\", \"true\");\n        var $span = this.getSpan();\n        $span.attr(\"tabindex\", (_a = this.treeWidget.options.tabIndex) !== null && _a !== void 0 ? _a : null);\n        if (mustSetFocus) {\n            $span.focus();\n        }\n    };\n    NodeElement.prototype.deselect = function () {\n        var $li = this.getLi();\n        $li.removeClass(\"jqtree-selected\");\n        $li.attr(\"aria-selected\", \"false\");\n        var $span = this.getSpan();\n        $span.removeAttr(\"tabindex\");\n        $span.blur();\n    };\n    NodeElement.prototype.getUl = function () {\n        return this.$element.children(\"ul:first\");\n    };\n    NodeElement.prototype.getSpan = function () {\n        return this.$element\n            .children(\".jqtree-element\")\n            .find(\"span.jqtree-title\");\n    };\n    NodeElement.prototype.getLi = function () {\n        return this.$element;\n    };\n    NodeElement.prototype.mustShowBorderDropHint = function (position) {\n        return position === node_1.Position.Inside;\n    };\n    return NodeElement;\n}());\nexports.NodeElement = NodeElement;\nvar FolderElement = /** @class */ (function (_super) {\n    __extends(FolderElement, _super);\n    function FolderElement() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FolderElement.prototype.open = function (onFinished, slide, animationSpeed) {\n        var _this = this;\n        if (slide === void 0) { slide = true; }\n        if (animationSpeed === void 0) { animationSpeed = \"fast\"; }\n        if (this.node.is_open) {\n            return;\n        }\n        this.node.is_open = true;\n        var $button = this.getButton();\n        $button.removeClass(\"jqtree-closed\");\n        $button.html(\"\");\n        var buttonEl = $button.get(0);\n        if (buttonEl) {\n            var icon = this.treeWidget.renderer.openedIconElement.cloneNode(true);\n            buttonEl.appendChild(icon);\n        }\n        var doOpen = function () {\n            var $li = _this.getLi();\n            $li.removeClass(\"jqtree-closed\");\n            var $span = _this.getSpan();\n            $span.attr(\"aria-expanded\", \"true\");\n            if (onFinished) {\n                onFinished(_this.node);\n            }\n            _this.treeWidget._triggerEvent(\"tree.open\", {\n                node: _this.node,\n            });\n        };\n        if (slide) {\n            this.getUl().slideDown(animationSpeed, doOpen);\n        }\n        else {\n            this.getUl().show();\n            doOpen();\n        }\n    };\n    FolderElement.prototype.close = function (slide, animationSpeed) {\n        var _this = this;\n        if (slide === void 0) { slide = true; }\n        if (animationSpeed === void 0) { animationSpeed = \"fast\"; }\n        if (!this.node.is_open) {\n            return;\n        }\n        this.node.is_open = false;\n        var $button = this.getButton();\n        $button.addClass(\"jqtree-closed\");\n        $button.html(\"\");\n        var buttonEl = $button.get(0);\n        if (buttonEl) {\n            var icon = this.treeWidget.renderer.closedIconElement.cloneNode(true);\n            buttonEl.appendChild(icon);\n        }\n        var doClose = function () {\n            var $li = _this.getLi();\n            $li.addClass(\"jqtree-closed\");\n            var $span = _this.getSpan();\n            $span.attr(\"aria-expanded\", \"false\");\n            _this.treeWidget._triggerEvent(\"tree.close\", {\n                node: _this.node,\n            });\n        };\n        if (slide) {\n            this.getUl().slideUp(animationSpeed, doClose);\n        }\n        else {\n            this.getUl().hide();\n            doClose();\n        }\n    };\n    FolderElement.prototype.mustShowBorderDropHint = function (position) {\n        return !this.node.is_open && position === node_1.Position.Inside;\n    };\n    FolderElement.prototype.getButton = function () {\n        return this.$element\n            .children(\".jqtree-element\")\n            .find(\"a.jqtree-toggler\");\n    };\n    return FolderElement;\n}(NodeElement));\nexports.FolderElement = FolderElement;\nvar BorderDropHint = /** @class */ (function () {\n    function BorderDropHint($element, scrollLeft) {\n        var $div = $element.children(\".jqtree-element\");\n        var elWidth = $element.width() || 0;\n        var width = Math.max(elWidth + scrollLeft - 4, 0);\n        var elHeight = $div.outerHeight() || 0;\n        var height = Math.max(elHeight - 4, 0);\n        this.$hint = jQuery('<span class=\"jqtree-border\"></span>');\n        $div.append(this.$hint);\n        this.$hint.css({ width: width, height: height });\n    }\n    BorderDropHint.prototype.remove = function () {\n        this.$hint.remove();\n    };\n    return BorderDropHint;\n}());\nexports.BorderDropHint = BorderDropHint;\nvar GhostDropHint = /** @class */ (function () {\n    function GhostDropHint(node, $element, position) {\n        this.$element = $element;\n        this.node = node;\n        this.$ghost = jQuery(\"<li class=\\\"jqtree_common jqtree-ghost\\\"><span class=\\\"jqtree_common jqtree-circle\\\"></span>\\n            <span class=\\\"jqtree_common jqtree-line\\\"></span></li>\");\n        if (position === node_1.Position.After) {\n            this.moveAfter();\n        }\n        else if (position === node_1.Position.Before) {\n            this.moveBefore();\n        }\n        else if (position === node_1.Position.Inside) {\n            if (node.isFolder() && node.is_open) {\n                this.moveInsideOpenFolder();\n            }\n            else {\n                this.moveInside();\n            }\n        }\n    }\n    GhostDropHint.prototype.remove = function () {\n        this.$ghost.remove();\n    };\n    GhostDropHint.prototype.moveAfter = function () {\n        this.$element.after(this.$ghost);\n    };\n    GhostDropHint.prototype.moveBefore = function () {\n        this.$element.before(this.$ghost);\n    };\n    GhostDropHint.prototype.moveInsideOpenFolder = function () {\n        jQuery(this.node.children[0].element).before(this.$ghost);\n    };\n    GhostDropHint.prototype.moveInside = function () {\n        this.$element.after(this.$ghost);\n        this.$ghost.addClass(\"jqtree-inside\");\n    };\n    return GhostDropHint;\n}());\n","\"use strict\";\nexports.__esModule = true;\nexports.getSelectedNodeName = exports.doGetNodeById = exports.doGetNodeByName = exports.formatTitles = exports.isNodeOpen = exports.isNodeClosed = exports.formatNodes = exports.exampleData2 = exports.exampleData = void 0;\nexports.exampleData = [\n    {\n        label: \"node1\",\n        id: 123,\n        intProperty: 1,\n        strProperty: \"1\",\n        children: [\n            { label: \"child1\", id: 125, intProperty: 2 },\n            { label: \"child2\", id: 126 },\n        ],\n    },\n    {\n        label: \"node2\",\n        id: 124,\n        intProperty: 3,\n        strProperty: \"3\",\n        children: [{ label: \"child3\", id: 127 }],\n    },\n];\n/*\nexample data 2:\n\n-main\n---c1\n---c2\n*/\nexports.exampleData2 = [\n    {\n        label: \"main\",\n        children: [{ label: \"c1\" }, { label: \"c2\" }],\n    },\n];\nfunction formatNodes(nodes) {\n    var strings = nodes.map(function (node) { return node.name; });\n    return strings.join(\" \");\n}\nexports.formatNodes = formatNodes;\nfunction isNodeClosed($node) {\n    return ($node.is(\"li.jqtree-folder.jqtree-closed\") &&\n        $node.find(\"a:eq(0)\").is(\"a.jqtree-toggler.jqtree-closed\") &&\n        $node.find(\"ul:eq(0)\").is(\"ul\"));\n}\nexports.isNodeClosed = isNodeClosed;\nfunction isNodeOpen($node) {\n    return ($node.is(\"li.jqtree-folder\") &&\n        $node.find(\"a:eq(0)\").is(\"a.jqtree-toggler\") &&\n        $node.find(\"ul:eq(0)\").is(\"ul\") &&\n        !$node.is(\"li.jqtree-folder.jqtree-closed\") &&\n        !$node.find(\"span:eq(0)\").is(\"a.jqtree-toggler.jqtree-closed\"));\n}\nexports.isNodeOpen = isNodeOpen;\nfunction formatTitles($node) {\n    var titles = $node.find(\".jqtree-title\").map(function (_, el) { return $(el).text(); });\n    return titles.toArray().join(\" \");\n}\nexports.formatTitles = formatTitles;\nfunction doGetNodeByName(tree, name) {\n    var node = tree.getNodeByName(name);\n    /* istanbul ignore if */\n    if (!node) {\n        throw Error(\"Node with name '\" + name + \"' not found\");\n    }\n    return node;\n}\nexports.doGetNodeByName = doGetNodeByName;\nfunction doGetNodeById(tree, id) {\n    var node = tree.getNodeById(id);\n    /* istanbul ignore if */\n    if (!node) {\n        throw Error(\"Node with id '\" + id + \"' not found\");\n    }\n    return node;\n}\nexports.doGetNodeById = doGetNodeById;\nexports.getSelectedNodeName = function ($tree) {\n    var node = $tree.tree(\"getSelectedNode\");\n    /* istanbul ignore if */\n    if (!node) {\n        throw Error(\"There is no node selected\");\n    }\n    return node.name;\n};\n","\"use strict\";\nexports.__esModule = true;\nrequire(\"./testJqtree\");\nrequire(\"./testNodeUtil\");\nrequire(\"./testTree\");\nrequire(\"./testUtil\");\nQUnit.config.testTimeout = 5000;\n","\"use strict\";\nexports.__esModule = true;\nrequire(\"../src/tree.jquery\");\nvar utilsForTest_1 = require(\"./utilsForTest\");\nvar node_1 = require(\"../src/node\");\nvar module = QUnit.module, test = QUnit.test; // eslint-disable-line @typescript-eslint/unbound-method\nvar getNodeByName = function ($tree, name) {\n    var node = $tree.tree(\"getNodeByName\", name);\n    /* istanbul ignore if */\n    if (!node) {\n        throw \"Node is null\";\n    }\n    return node;\n};\nvar getNodeById = function ($tree, id) {\n    var node = $tree.tree(\"getNodeById\", id);\n    /* istanbul ignore if */\n    if (!node) {\n        throw \"Node is null\";\n    }\n    return node;\n};\nmodule(\"jqtree\", {\n    beforeEach: function () {\n        $(\"body\").append('<div id=\"tree1\"></div>');\n    },\n    afterEach: function () {\n        var $tree = $(\"#tree1\");\n        $tree.tree(\"destroy\");\n        $tree.remove();\n        $.mockjax.clear();\n    },\n});\ntest(\"create jqtree from data\", function (assert) {\n    $(\"#tree1\").tree({\n        data: utilsForTest_1.exampleData,\n    });\n    assert.equal($(\"#tree1\").children().length, 1, \"number of children on level 0\");\n    assert.ok($(\"#tree1\").children().is(\"ul.jqtree-tree\"), \"first element is ul.jqtree-tree\");\n    assert.equal($(\"#tree1 ul.jqtree-tree > li\").length, 2, \"number of children on level 1\");\n    assert.ok($(\"#tree1 ul.jqtree-tree li:eq(0)\").is(\"li.jqtree-folder.jqtree-closed\"), \"first child is li.jqtree-folder.jqtree-closed\");\n    assert.ok($(\"#tree1 ul.jqtree-tree li:eq(0) > .jqtree-element > a.jqtree-toggler\").is(\"a.jqtree-toggler.jqtree-closed\"), \"button in first folder\");\n    assert.equal($(\"#tree1 ul.jqtree-tree li:eq(0) > .jqtree-element span.jqtree-title\").text(), \"node1\");\n});\nvar nodeWithEmptyChildren = {\n    id: 1,\n    name: \"abc\",\n    children: [],\n};\ntest(\"node with empty children is not a folder (with showEmptyFolder false)\", function (assert) {\n    $(\"#tree1\").tree({\n        data: [nodeWithEmptyChildren],\n        showEmptyFolder: false,\n    });\n    assert.equal($(\".jqtree-title\").text(), \"abc\");\n    assert.equal($(\".jqtree-folder\").length, 0);\n});\ntest(\"node with empty children is a folder (with showEmptyFolder true)\", function (assert) {\n    $(\"#tree1\").tree({\n        data: [nodeWithEmptyChildren],\n        showEmptyFolder: true,\n    });\n    assert.equal($(\".jqtree-title\").text(), \"abc\");\n    assert.equal($(\".jqtree-folder\").length, 1);\n});\ntest(\"node without children property is not a folder (with showEmptyFolder true)\", function (assert) {\n    $(\"#tree1\").tree({\n        data: [{ id: 1, name: \"abc\" }],\n        showEmptyFolder: true,\n    });\n    assert.equal($(\".jqtree-title\").text(), \"abc\");\n    assert.equal($(\".jqtree-folder\").length, 0);\n});\ntest(\"toggle\", function (assert) {\n    // setup\n    var done = assert.async();\n    // create tree\n    var $tree = $(\"#tree1\");\n    var $node1; // eslint-disable-line prefer-const\n    var node1; // eslint-disable-line prefer-const\n    $tree.tree({\n        data: utilsForTest_1.exampleData,\n    });\n    $tree.on(\"tree.open\", function () {\n        assert.ok(!utilsForTest_1.isNodeClosed($node1), \"node1 is open\");\n        // 2. close node1\n        $tree.tree(\"toggle\", node1);\n    });\n    $tree.on(\"tree.close\", function () {\n        assert.ok(utilsForTest_1.isNodeClosed($node1), \"node1 is closed\");\n        done();\n    });\n    var tree = $tree.tree(\"getTree\");\n    node1 = tree.children[0];\n    $node1 = $tree.find(\"ul.jqtree-tree li:eq(0)\");\n    // node1 is initially closed\n    assert.ok(utilsForTest_1.isNodeClosed($node1), \"node1 is closed\");\n    // 1. open node1\n    $tree.tree(\"toggle\", node1);\n});\ntest(\"click event\", function (assert) {\n    var selectCount = 0;\n    // create tree\n    var $tree = $(\"#tree1\");\n    $tree.tree({\n        data: utilsForTest_1.exampleData,\n        selectable: true,\n    });\n    var $node1 = $tree.find(\"ul.jqtree-tree li:first\");\n    var $textSpan = $node1.find(\"span:first\");\n    $tree.on(\"tree.click\", function (e) {\n        var treeClickEvent = e;\n        assert.equal(treeClickEvent.node.name, \"node1\");\n    });\n    var done = assert.async();\n    $tree.on(\"tree.select\", function (e) {\n        var _a, _b;\n        var selectNodeEvent = e;\n        selectCount += 1;\n        if (selectCount === 1) {\n            assert.equal((_a = selectNodeEvent.node) === null || _a === void 0 ? void 0 : _a.name, \"node1\");\n            var selectedNode = $tree.tree(\"getSelectedNode\");\n            assert.ok(selectedNode);\n            if (selectedNode) {\n                assert.equal(selectedNode.name, \"node1\");\n            }\n            // deselect\n            $textSpan.click();\n        }\n        else {\n            assert.equal(selectNodeEvent.node, null);\n            assert.equal((_b = selectNodeEvent.previous_node) === null || _b === void 0 ? void 0 : _b.name, \"node1\");\n            assert.equal($tree.tree(\"getSelectedNode\"), false);\n            done();\n        }\n    });\n    // click on node1\n    $textSpan.click();\n});\ntest(\"saveState\", function (assert) {\n    var $tree = $(\"#tree1\");\n    var savedState;\n    function setState(state) {\n        savedState = state;\n    }\n    function getState() {\n        return savedState;\n    }\n    function createTree() {\n        $tree.tree({\n            data: utilsForTest_1.exampleData,\n            saveState: true,\n            onSetStateFromStorage: setState,\n            onGetStateFromStorage: getState,\n            selectable: true,\n        });\n    }\n    // create tree\n    createTree();\n    // nodes are initially closed\n    var tree = $tree.tree(\"getTree\");\n    tree.iterate(function (node) {\n        assert.ok(!node.is_open, \"jqtree-closed\");\n        return true;\n    });\n    // open node1\n    $tree.tree(\"toggle\", tree.children[0]);\n    // node1 is open\n    assert.ok(tree.children[0].is_open, \"node1 is_open\");\n    // select node2\n    $tree.tree(\"selectNode\", tree.children[1]);\n    // node2 is selected\n    assert.equal(utilsForTest_1.getSelectedNodeName($tree), \"node2\", \"getSelectedNode (1)\");\n    // create tree again\n    $tree.tree(\"destroy\");\n    createTree();\n    var tree2 = $tree.tree(\"getTree\");\n    assert.ok(tree2.children[0].is_open, \"node1 is_open\");\n    assert.ok(!tree2.children[1].is_open, \"node2 is closed\");\n    // node2 is selected\n    assert.equal(utilsForTest_1.getSelectedNodeName($tree), \"node2\", \"getSelectedNode (2)\");\n});\ntest(\"getSelectedNode\", function (assert) {\n    var $tree = $(\"#tree1\");\n    // create tree\n    $tree.tree({\n        data: utilsForTest_1.exampleData,\n        selectable: true,\n    });\n    // there is no node selected\n    assert.equal($tree.tree(\"getSelectedNode\"), false, \"getSelectedNode\");\n    // select node1\n    var tree = $tree.tree(\"getTree\");\n    var node1 = tree.children[0];\n    $tree.tree(\"selectNode\", node1);\n    // node1 is selected\n    assert.equal(utilsForTest_1.getSelectedNodeName($tree), \"node1\", \"getSelectedNode\");\n});\ntest(\"toJson\", function (assert) {\n    // setup\n    var $tree = $(\"#tree1\");\n    $tree.tree({\n        data: utilsForTest_1.exampleData,\n    });\n    // 1. call toJson\n    assert.equal($tree.tree(\"toJson\"), '[{\"name\":\"node1\",\"id\":123,\"intProperty\":1,\"strProperty\":\"1\",' +\n        '\"children\":[{\"name\":\"child1\",\"id\":125,\"intProperty\":2},{\"name\":' +\n        '\"child2\",\"id\":126}]},{\"name\":\"node2\",\"id\":124,\"intProperty\":3,' +\n        '\"strProperty\":\"3\",\"children\":[{\"name\":\"child3\",\"id\":127}]}]');\n    // Check that properties 'children', 'parent' and 'element' still exist.\n    var tree = $tree.tree(\"getTree\");\n    assert.equal(tree.children.length, 2);\n    assert.ok(tree.children[0].parent !== undefined, \"parent\");\n    assert.ok($(tree.children[0].element).is(\"li\"), \"element\");\n});\ntest(\"loadData\", function (assert) {\n    // setup\n    var $tree = $(\"#tree1\");\n    $tree.tree({\n        data: utilsForTest_1.exampleData,\n        autoOpen: true,\n    });\n    // first node is 'node1'\n    assert.equal($tree.find(\"> ul > li:first .jqtree-element:first > span\").text(), \"node1\");\n    // - load new data\n    $tree.tree(\"loadData\", utilsForTest_1.exampleData2);\n    // first node is 'main'\n    assert.equal($tree.find(\"> ul > li:first .jqtree-element:first > span\").text(), \"main\");\n    // - load new data under node 'child3'\n    $tree.tree(\"loadData\", utilsForTest_1.exampleData);\n    var child3 = getNodeByName($tree, \"child3\");\n    var data = [\n        { name: \"c4\", id: 200 },\n        {\n            name: \"c5\",\n            id: 201,\n            children: [{ name: \"c6\", id: 202 }],\n        },\n    ];\n    $tree.tree(\"loadData\", data, child3);\n    // first node in html is still 'node1'\n    assert.equal($tree\n        .find(\"li:eq(0)\")\n        .find(\".jqtree-element:eq(0) span.jqtree-title\")\n        .text(), \"node1\");\n    // Node 'child3' now has a children 'c4' and 'c5'\n    var $child3 = $tree.find(\"span:contains(child3)\");\n    var $li = $child3.closest(\"li\");\n    assert.equal($li\n        .children(\"ul\")\n        .children(\"li:eq(0)\")\n        .find(\".jqtree-element span.jqtree-title\")\n        .text(), \"c4\");\n    // Node 'child3' must have toggler button\n    assert.ok($child3.prev().is(\"a.jqtree-toggler\"), \"node 'child3' must have toggler button\");\n    // - select node 'c5' and load new data under 'child3'\n    var c5 = getNodeByName($tree, \"c5\");\n    $tree.tree(\"selectNode\", c5);\n    assert.equal(utilsForTest_1.getSelectedNodeName($tree), \"c5\");\n    var data2 = [{ name: \"c7\" }, { name: \"c8\" }];\n    $tree.tree(\"loadData\", data2, child3);\n    // c5 must be deselected\n    assert.equal($tree.tree(\"getSelectedNode\"), false);\n    // - select c7; load new data under child3; note that c7 has no id\n    $tree.tree(\"selectNode\", getNodeByName($tree, \"c7\"));\n    assert.equal(utilsForTest_1.getSelectedNodeName($tree), \"c7\");\n    $tree.tree(\"loadData\", [\"c9\"], child3);\n    assert.equal($tree.tree(\"getSelectedNode\"), false);\n    // - select c9 (which has no id); load new nodes under child2\n    $tree.tree(\"selectNode\", $tree.tree(\"getNodeByName\", \"c9\"));\n    var child2 = getNodeByName($tree, \"child2\");\n    $tree.tree(\"loadData\", [\"c10\"], child2);\n    assert.equal(utilsForTest_1.getSelectedNodeName($tree), \"c9\");\n});\ntest(\"openNode and closeNode\", function (assert) {\n    // setup\n    var $tree = $(\"#tree1\");\n    $tree.tree({\n        data: utilsForTest_1.exampleData,\n    });\n    var node2 = getNodeByName($tree, \"node2\");\n    assert.equal(node2.name, \"node2\");\n    assert.equal(node2.is_open, undefined);\n    // 1. open node2\n    $tree.tree(\"openNode\", node2, false);\n    assert.equal(node2.is_open, true);\n    assert.equal(utilsForTest_1.isNodeOpen($(node2.element)), true);\n    // 2. close node2\n    $tree.tree(\"closeNode\", node2, false);\n    assert.equal(node2.is_open, false);\n    assert.equal(utilsForTest_1.isNodeClosed($(node2.element)), true);\n    // 3. open child1\n    var node1 = getNodeByName($tree, \"node1\");\n    var child1 = getNodeByName($tree, \"child1\");\n    // add a child to child1 so it is a folder\n    $tree.tree(\"appendNode\", \"child1a\", child1);\n    // node1 is initialy closed\n    assert.equal(node1.is_open, undefined);\n    // open child1\n    $tree.tree(\"openNode\", child1, false);\n    // node1 and child1 are now open1\n    assert.equal(node1.is_open, true);\n    assert.equal(child1.is_open, true);\n});\nfunction testOpenNodeWithCallback(slide, includeSlideParam, assert) {\n    // setup\n    var $tree = $(\"#tree1\");\n    $tree.tree({\n        data: utilsForTest_1.exampleData,\n    });\n    var node2 = getNodeByName($tree, \"node2\");\n    // open node2\n    var done = assert.async();\n    function handleOpenNode(node) {\n        assert.equal(node.name, \"node2\");\n        assert.ok(node.is_open);\n        done();\n    }\n    if (includeSlideParam) {\n        $tree.tree(\"openNode\", node2, slide, handleOpenNode);\n    }\n    else {\n        $tree.tree(\"openNode\", node2, handleOpenNode);\n    }\n}\ntest(\"openNode with callback with slide true\", function (assert) {\n    testOpenNodeWithCallback(true, true, assert);\n});\ntest(\"openNode with callback with slide false\", function (assert) {\n    testOpenNodeWithCallback(false, true, assert);\n});\ntest(\"openNode with callback without slide param\", function (assert) {\n    testOpenNodeWithCallback(false, false, assert);\n});\ntest(\"selectNode\", function (assert) {\n    // setup\n    var $tree = $(\"#tree1\");\n    $tree.tree({\n        data: utilsForTest_1.exampleData,\n        selectable: true,\n    });\n    var node1 = $tree.tree(\"getTree\").children[0];\n    var node2 = $tree.tree(\"getTree\").children[1];\n    var child3 = node2.children[0];\n    assert.equal(child3.name, \"child3\");\n    assert.equal(node1.is_open, undefined);\n    assert.equal(node2.is_open, undefined);\n    assert.equal(child3.is_open, undefined);\n    // -- select node 'child3', which is a child of 'node2'; must_open_parents = true\n    $tree.tree(\"selectNode\", child3);\n    assert.equal(utilsForTest_1.getSelectedNodeName($tree), \"child3\");\n    assert.equal(node1.is_open, undefined);\n    assert.equal(node2.is_open, true);\n    assert.equal(child3.is_open, undefined);\n    // -- select node 'node1'\n    $tree.tree(\"selectNode\", node1);\n    assert.equal(utilsForTest_1.getSelectedNodeName($tree), \"node1\");\n    // -- is 'node1' selected?\n    assert.equal($tree.tree(\"isNodeSelected\", node1), true);\n    // -- deselect\n    $tree.tree(\"selectNode\", null);\n    assert.equal($tree.tree(\"getSelectedNode\"), false);\n    // -- is 'node1' selected?\n    assert.equal($tree.tree(\"isNodeSelected\", node1), false);\n});\ntest(\"selectNode when another node is selected\", function (assert) {\n    // setup\n    var $tree = $(\"#tree1\");\n    $tree.tree({\n        data: utilsForTest_1.exampleData,\n        selectable: true,\n    });\n    var node1 = $tree.tree(\"getTree\").children[0];\n    var node2 = $tree.tree(\"getTree\").children[1];\n    // -- select node 'node2'\n    $tree.tree(\"selectNode\", node2);\n    assert.equal(utilsForTest_1.getSelectedNodeName($tree), \"node2\");\n    // -- setting event\n    // -- is node 'node2' named 'deselected_node' in object's attributes?\n    var isSelectEventFired = false;\n    $tree.on(\"tree.select\", function (e) {\n        var selectNodeEvent = e;\n        assert.equal(selectNodeEvent.deselected_node, node2);\n        isSelectEventFired = true;\n    });\n    // -- select node 'node1'; node 'node2' is selected before it\n    $tree.tree(\"selectNode\", node1);\n    assert.equal(utilsForTest_1.getSelectedNodeName($tree), \"node1\");\n    assert.equal($tree.tree(\"isNodeSelected\", node1), true);\n    // event was fired\n    assert.ok(isSelectEventFired);\n});\ntest(\"click toggler\", function (assert) {\n    // setup\n    var done = assert.async();\n    var $tree = $(\"#tree1\");\n    $tree.tree({\n        data: utilsForTest_1.exampleData,\n        selectable: true,\n    });\n    var $title = $tree\n        .find(\"li:eq(0)\")\n        .find(\"> .jqtree-element > span.jqtree-title\");\n    assert.equal($title.text(), \"node1\");\n    var $toggler = $title.prev();\n    assert.ok($toggler.is(\"a.jqtree-toggler.jqtree-closed\"));\n    $tree.on(\"tree.open\", function (e) {\n        var folderEvent = e;\n        // 2. handle 'open' event\n        assert.equal(folderEvent.node.name, \"node1\");\n        // 3. click toggler again\n        $toggler.click();\n    });\n    $tree.on(\"tree.close\", function (e) {\n        var folderEvent = e;\n        assert.equal(folderEvent.node.name, \"node1\");\n        done();\n    });\n    // 1. click toggler of 'node1'\n    $toggler.click();\n});\ntest(\"getNodeById\", function (assert) {\n    // setup\n    var $tree = $(\"#tree1\");\n    $tree.tree({\n        data: utilsForTest_1.exampleData,\n    });\n    var node2 = getNodeByName($tree, \"node2\");\n    // 1. get 'node2' by id\n    assert.equal(getNodeById($tree, 124).name, \"node2\");\n    // 2. get id that does not exist\n    assert.equal($tree.tree(\"getNodeById\", 333), null);\n    // 3. get id by string\n    assert.equal(getNodeById($tree, \"124\").name, \"node2\");\n    // 4. add node with string id; search by int\n    $tree.tree(\"appendNode\", {\n        name: \"abc\",\n        id: \"234\",\n    });\n    assert.equal(getNodeById($tree, 234).name, \"abc\");\n    assert.equal(getNodeById($tree, \"234\").name, \"abc\");\n    // 5. load subtree in node2\n    var subtreeData = [\n        {\n            name: \"sub1\",\n            id: 200,\n            children: [{ name: \"sub2\", id: 201 }],\n        },\n    ];\n    $tree.tree(\"loadData\", subtreeData, node2);\n    var t = $tree.tree(\"getTree\");\n    assert.notEqual(t, null);\n    assert.equal(getNodeById($tree, 200).name, \"sub1\");\n    assert.equal(getNodeById($tree, 201).name, \"sub2\");\n});\ntest(\"autoOpen\", function (assert) {\n    var $tree = $(\"#tree1\");\n    function formatOpenFolders() {\n        var openNodes = [];\n        $tree.find(\"li\").each(function () {\n            var $li = $(this);\n            if ($li.is(\".jqtree-folder\") && !$li.is(\".jqtree-closed\")) {\n                var name_1 = $li\n                    .children(\".jqtree-element\")\n                    .find(\"span\")\n                    .text();\n                openNodes.push(name_1);\n            }\n        });\n        return openNodes.join(\";\");\n    }\n    /*\n    -l1n1 (level 0)\n    ----l2n1 (1)\n    ----l2n2 (1)\n    -------l3n1 (2)\n    ----------l4n1 (3)\n    -l1n2\n    */\n    var data = [\n        {\n            name: \"l1n1\",\n            children: [\n                \"l2n1\",\n                {\n                    name: \"l2n2\",\n                    children: [\n                        {\n                            name: \"l3n1\",\n                            children: [\"l4n1\"],\n                        },\n                    ],\n                },\n            ],\n        },\n        \"l1n2\",\n    ];\n    // 1. autoOpen is false\n    $tree.tree({\n        data: data,\n        autoOpen: false,\n    });\n    assert.equal(formatOpenFolders(), \"\");\n    $tree.tree(\"destroy\");\n    // 2. autoOpen is true\n    $tree.tree({\n        data: data,\n        autoOpen: true,\n    });\n    assert.equal(formatOpenFolders(), \"l1n1;l2n2;l3n1\");\n    $tree.tree(\"destroy\");\n    // 3. autoOpen level 1\n    $tree.tree({\n        data: data,\n        autoOpen: 1,\n    });\n    assert.equal(formatOpenFolders(), \"l1n1;l2n2\");\n});\ntest(\"onCreateLi\", function (assert) {\n    // 1. init tree with onCreateLi\n    var $tree = $(\"#tree1\");\n    $tree.tree({\n        data: utilsForTest_1.exampleData,\n        onCreateLi: function (node, $li) {\n            var $span = $li.children(\".jqtree-element\").find(\"span\");\n            $span.html(\"_\" + node.name + \"_\");\n        },\n    });\n    assert.equal($tree.find(\"span:eq(0)\").text(), \"_node1_\");\n});\ntest(\"save state\", function (assert) {\n    // Remove state from localstorage\n    if (typeof localStorage !== \"undefined\") {\n        localStorage.setItem(\"my_tree\", \"\");\n    }\n    // 1. init tree\n    var $tree = $(\"#tree1\");\n    $tree.tree({\n        data: utilsForTest_1.exampleData,\n        selectable: true,\n        saveState: \"my_tree\",\n    });\n    var tree = $tree.tree(\"getTree\");\n    assert.equal($tree.tree(\"getSelectedNode\"), false);\n    // 2. select node -> state is saved\n    $tree.tree(\"selectNode\", tree.children[0]);\n    assert.equal(utilsForTest_1.getSelectedNodeName($tree), \"node1\");\n    // 3. init tree again\n    $tree.tree(\"destroy\");\n    $tree.tree({\n        data: utilsForTest_1.exampleData,\n        selectable: true,\n        saveState: \"my_tree\",\n    });\n    assert.equal(utilsForTest_1.getSelectedNodeName($tree), \"node1\");\n});\ntest(\"generate hit areas\", function (assert) {\n    // setup\n    var $tree = $(\"#tree1\");\n    $tree.tree({\n        data: utilsForTest_1.exampleData,\n    });\n    // 1. get hit areas\n    var node = getNodeById($tree, 123);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n    var hitAreas = $tree.tree(\"testGenerateHitAreas\", node);\n    var strings = $.map(hitAreas, function (hitArea) {\n        var positionName = node_1.getPositionName(hitArea.position);\n        return hitArea.node.name + \" \" + positionName;\n    });\n    assert.equal(strings.join(\";\"), \"node1 none;node2 inside;node2 after\");\n});\ntest(\"removeNode\", function (assert) {\n    // setup\n    var $tree = $(\"#tree1\");\n    $tree.tree({\n        data: utilsForTest_1.exampleData,\n        selectable: true,\n    });\n    // 1. Remove selected node; node is 'child1'\n    var child1 = getNodeByName($tree, \"child1\");\n    $tree.tree(\"selectNode\", child1);\n    assert.equal(utilsForTest_1.getSelectedNodeName($tree), \"child1\");\n    $tree.tree(\"removeNode\", child1);\n    assert.equal(utilsForTest_1.formatTitles($tree), \"node1 child2 node2 child3\");\n    // getSelectedNode must now return false\n    assert.equal($tree.tree(\"getSelectedNode\"), false);\n    // 2. No node is selected; remove child3\n    $tree.tree(\"loadData\", utilsForTest_1.exampleData);\n    var child3 = getNodeByName($tree, \"child3\");\n    $tree.tree(\"removeNode\", child3);\n    assert.equal(utilsForTest_1.formatTitles($tree), \"node1 child1 child2 node2\");\n    assert.equal($tree.tree(\"getSelectedNode\"), false);\n    // 3. Remove parent of selected node\n    $tree.tree(\"loadData\", utilsForTest_1.exampleData);\n    var child1a = getNodeByName($tree, \"child1\");\n    var node1 = getNodeByName($tree, \"node1\");\n    $tree.tree(\"selectNode\", child1a);\n    $tree.tree(\"removeNode\", node1);\n    // node is unselected\n    assert.equal($tree.tree(\"getSelectedNode\"), false);\n    // 4. Remove unselected node without an id\n    $tree.tree(\"loadData\", utilsForTest_1.exampleData2);\n    var c1 = getNodeByName($tree, \"c1\");\n    $tree.tree(\"removeNode\", c1);\n    assert.equal(utilsForTest_1.formatTitles($tree), \"main c2\");\n});\ntest(\"appendNode\", function (assert) {\n    // setup\n    var $tree = $(\"#tree1\");\n    $tree.tree({\n        data: utilsForTest_1.exampleData,\n    });\n    var node1 = getNodeByName($tree, \"node1\");\n    // 1. Add child3 to node1\n    $tree.tree(\"appendNode\", \"child3\", node1);\n    assert.equal(utilsForTest_1.formatTitles($(node1.element)), \"node1 child1 child2 child3\");\n    // 2. Add child4 to child1\n    var child1 = getNodeByName($tree, \"child1\");\n    // Node 'child1' does not have a toggler button\n    assert.equal($(child1.element).find(\"> .jqtree-element > .jqtree-toggler\").length, 0);\n    $tree.tree(\"appendNode\", \"child4\", child1);\n    assert.equal(utilsForTest_1.formatTitles($(child1.element)), \"child1 child4\");\n    // Node 'child1' must get a toggler button\n    assert.equal($(child1.element).find(\"> .jqtree-element > .jqtree-toggler\").length, 1);\n});\ntest(\"prependNode\", function (assert) {\n    // setup\n    var $tree = $(\"#tree1\");\n    $tree.tree({\n        data: utilsForTest_1.exampleData,\n    });\n    var node1 = getNodeByName($tree, \"node1\");\n    // 1. Prepend child0 to node1\n    $tree.tree(\"prependNode\", \"child0\", node1);\n    assert.equal(utilsForTest_1.formatTitles($(node1.element)), \"node1 child0 child1 child2\");\n});\ntest(\"init event for local data\", function (assert) {\n    // setup\n    var done = assert.async();\n    var $tree = $(\"#tree1\");\n    $tree.on(\"tree.init\", function () {\n        // Check that we can call functions in 'tree.init' event\n        assert.equal(getNodeByName($tree, \"node2\").name, \"node2\");\n        done();\n    });\n    // init tree\n    $tree.tree({\n        data: utilsForTest_1.exampleData,\n    });\n});\ntest(\"init event for ajax\", function (assert) {\n    // setup\n    var done = assert.async();\n    var $tree = $(\"#tree1\");\n    $.mockjax({\n        url: \"/tree/\",\n        responseText: utilsForTest_1.exampleData,\n        logging: false,\n    });\n    $tree.on(\"tree.init\", function () {\n        assert.equal(getNodeByName($tree, \"node2\").name, \"node2\");\n        done();\n    });\n    // init tree\n    $tree.tree({\n        dataUrl: \"/tree/\",\n    });\n});\ntest(\"updateNode\", function (assert) {\n    // setup\n    var $tree = $(\"#tree1\");\n    $tree.tree({ data: utilsForTest_1.exampleData });\n    assert.equal(utilsForTest_1.formatTitles($tree), \"node1 child1 child2 node2 child3\");\n    // -- update name\n    var node2 = getNodeByName($tree, \"node2\");\n    $tree.tree(\"updateNode\", node2, \"CHANGED\");\n    assert.equal(utilsForTest_1.formatTitles($tree), \"node1 child1 child2 CHANGED child3\");\n    assert.equal(node2.name, \"CHANGED\");\n    // -- update data\n    $tree.tree(\"updateNode\", node2, {\n        name: \"xyz\",\n        tag1: \"abc\",\n    });\n    assert.equal(utilsForTest_1.formatTitles($tree), \"node1 child1 child2 xyz child3\");\n    assert.equal(node2.name, \"xyz\");\n    assert.equal(node2.tag1, \"abc\");\n    // - update id\n    assert.equal(node2.id, 124);\n    $tree.tree(\"updateNode\", node2, { id: 555 });\n    assert.equal(node2.id, 555);\n    assert.equal(node2.name, \"xyz\");\n    // get node by id\n    var node555 = getNodeById($tree, 555);\n    assert.equal(node555.name, \"xyz\");\n    var node124 = $tree.tree(\"getNodeById\", 124);\n    assert.equal(node124, undefined);\n    // update child1\n    var child1 = getNodeByName($tree, \"child1\");\n    $tree.tree(\"updateNode\", child1, \"child1a\");\n    assert.equal(utilsForTest_1.formatTitles($tree), \"node1 child1a child2 xyz child3\");\n    // select child1\n    $tree.tree(\"selectNode\", child1);\n    $tree.tree(\"updateNode\", child1, \"child1b\");\n    assert.ok($(child1.element).hasClass(\"jqtree-selected\"));\n    // add children to child1\n    $tree.tree(\"updateNode\", child1, {\n        id: child1.id,\n        name: \"child1\",\n        children: [{ id: 5, name: \"child1-1\" }],\n    });\n    assert.equal(utilsForTest_1.formatTitles($tree), \"node1 child1 child1-1 child2 xyz child3\");\n    // remove children\n    $tree.tree(\"updateNode\", child1, {\n        id: child1.id,\n        name: \"child1\",\n        children: [],\n    });\n    assert.equal(utilsForTest_1.formatTitles($tree), \"node1 child1 child2 xyz child3\");\n});\ntest(\"moveNode\", function (assert) {\n    // setup\n    var $tree = $(\"#tree1\");\n    $tree.tree({ data: utilsForTest_1.exampleData });\n    var child1 = getNodeByName($tree, \"child1\");\n    var child2 = getNodeByName($tree, \"child2\");\n    var node1 = getNodeByName($tree, \"node1\");\n    var node2 = getNodeByName($tree, \"node2\");\n    // -- Move child1 after node2\n    $tree.tree(\"moveNode\", child1, node2, \"after\");\n    assert.equal(utilsForTest_1.formatTitles($tree), \"node1 child2 node2 child3 child1\");\n    // -- Check that illegal moves are skipped\n    $tree.tree(\"moveNode\", node1, child2, \"inside\");\n});\ntest(\"load on demand\", function (assert) {\n    // setup\n    var done = assert.async();\n    var $tree = $(\"#tree1\");\n    $tree.tree({\n        data: [\n            {\n                id: 1,\n                name: \"node1\",\n                load_on_demand: true,\n            },\n        ],\n        dataUrl: \"/tree/\",\n    });\n    function handleResponse(options) {\n        assert.equal(options.url, \"/tree/\", \"2\");\n        assert.deepEqual(options.data, { node: 1 }, \"3\");\n        this.responseText = [\n            {\n                id: 2,\n                name: \"child1\",\n            },\n        ];\n    }\n    $.mockjax({\n        url: \"*\",\n        response: handleResponse,\n        logging: false,\n    });\n    // -- open node\n    function handleOpenNode(node) {\n        assert.equal(node.name, \"node1\");\n        assert.equal(utilsForTest_1.formatTitles($tree), \"node1 child1\", \"4\");\n        done();\n    }\n    var node1 = getNodeByName($tree, \"node1\");\n    assert.equal(utilsForTest_1.formatTitles($tree), \"node1\", \"1\");\n    $tree.tree(\"openNode\", node1, handleOpenNode);\n});\ntest(\"addNodeAfter\", function (assert) {\n    // setup\n    var $tree = $(\"#tree1\");\n    $tree.tree({ data: utilsForTest_1.exampleData });\n    var node1 = getNodeByName($tree, \"node1\");\n    // -- add node after node1\n    $tree.tree(\"addNodeAfter\", \"node3\", node1);\n    assert.equal(utilsForTest_1.formatTitles($tree), \"node1 child1 child2 node3 node2 child3\");\n});\ntest(\"addNodeBefore\", function (assert) {\n    // setup\n    var $tree = $(\"#tree1\");\n    $tree.tree({ data: utilsForTest_1.exampleData });\n    var node1 = getNodeByName($tree, \"node1\");\n    // -- add node before node1\n    $tree.tree(\"addNodeBefore\", \"node3\", node1);\n    assert.equal(utilsForTest_1.formatTitles($tree), \"node3 node1 child1 child2 node2 child3\");\n});\ntest(\"addParentNode\", function (assert) {\n    // setup\n    var $tree = $(\"#tree1\");\n    $tree.tree({ data: utilsForTest_1.exampleData });\n    var child3 = getNodeByName($tree, \"child3\");\n    // -- add parent to child3\n    $tree.tree(\"addParentNode\", \"node3\", child3);\n    assert.equal(utilsForTest_1.formatTitles($tree), \"node1 child1 child2 node2 node3 child3\");\n});\ntest(\"mouse events\", function (assert) {\n    // setup\n    var $tree = $(\"#tree1\");\n    $tree.tree({\n        data: utilsForTest_1.exampleData,\n        dragAndDrop: true,\n        autoOpen: true,\n    });\n    $tree.tree(\"setMouseDelay\", 0);\n    function getTitleElement(nodeName) {\n        var node = getNodeByName($tree, nodeName);\n        var $el = $(node.element);\n        return $($el.find(\".jqtree-title\"));\n    }\n    var $node1 = getTitleElement(\"node1\");\n    var $child3 = getTitleElement(\"child3\");\n    // -- Move node1 inside child3\n    // 1: trigger mousedown event on node1\n    var node1Offset = $node1.offset() || { left: 0, top: 0 };\n    $node1.trigger($.Event(\"mousedown\", {\n        which: 1,\n        pageX: node1Offset.left,\n        pageY: node1Offset.top,\n    }));\n    // 2: trigger mouse move to child3\n    var child3Offset = $child3.offset() || { left: 0, top: 0 };\n    $tree.trigger($.Event(\"mousemove\", {\n        pageX: child3Offset.left,\n        pageY: child3Offset.top,\n    }));\n    $tree.trigger(\"mouseup\");\n    assert.equal(utilsForTest_1.formatTitles($tree), \"node2 child3 node1 child1 child2\");\n});\ntest(\"multiple select\", function (assert) {\n    // setup\n    var $tree = $(\"#tree1\");\n    $tree.tree({ data: utilsForTest_1.exampleData });\n    var child1 = getNodeByName($tree, \"child1\");\n    var child2 = getNodeByName($tree, \"child2\");\n    // -- add nodes to selection\n    // todo: more nodes as parameters?\n    // todo: rename to 'selection.add' or 'selection' 'add'?\n    $tree.tree(\"addToSelection\", child1);\n    $tree.tree(\"addToSelection\", child2);\n    // -- get selected nodes\n    var selectedNodes = $tree.tree(\"getSelectedNodes\");\n    assert.equal(utilsForTest_1.formatNodes(selectedNodes), \"child1 child2\");\n});\ntest(\"keyboard\", function (assert) {\n    // setup\n    var $tree = $(\"#tree1\");\n    function keyDown(key) {\n        $tree.trigger($.Event(\"keydown\", { which: key }));\n    }\n    $tree.tree({ data: utilsForTest_1.exampleData });\n    var node1 = getNodeByName($tree, \"node1\");\n    // select node1\n    $tree.tree(\"selectNode\", node1);\n    assert.equal(node1.is_open, undefined);\n    // - move down; -> node2\n    keyDown(40);\n    assert.equal(utilsForTest_1.getSelectedNodeName($tree), \"node2\");\n    // - move up; -> back to node1\n    keyDown(38);\n    assert.equal(utilsForTest_1.getSelectedNodeName($tree), \"node1\");\n    // - move right; open node1\n    keyDown(39);\n    assert.equal(node1.is_open, true);\n    assert.equal(utilsForTest_1.getSelectedNodeName($tree), \"node1\");\n    // - down -> child1\n    keyDown(40);\n    assert.equal(utilsForTest_1.getSelectedNodeName($tree), \"child1\");\n    // - up -> node1\n    keyDown(38);\n    assert.equal(utilsForTest_1.getSelectedNodeName($tree), \"node1\");\n    // - left ->  close\n    keyDown(37);\n    assert.equal(node1.is_open, false);\n    assert.equal(utilsForTest_1.getSelectedNodeName($tree), \"node1\");\n});\ntest(\"getNodesByProperty\", function (assert) {\n    // setup\n    var $tree = $(\"#tree1\");\n    $tree.tree({\n        data: utilsForTest_1.exampleData,\n    });\n    var node2 = getNodeByName($tree, \"node2\");\n    // 1. get 'node1' by property\n    assert.equal($tree.tree(\"getNodesByProperty\", \"intProperty\", 1)[0].name, \"node1\");\n    // 2. get property that does not exist in any node\n    assert.equal($tree.tree(\"getNodesByProperty\", \"intProperty\", 123).length, 0);\n    // 3. get string property\n    assert.equal($tree.tree(\"getNodesByProperty\", \"strProperty\", \"1\")[0].name, \"node1\");\n    // 4. add node with string id; search by int\n    $tree.tree(\"appendNode\", {\n        name: \"abc\",\n        id: \"234\",\n        strProperty: \"111\",\n        intProperty: 111,\n    });\n    assert.equal($tree.tree(\"getNodesByProperty\", \"intProperty\", 111)[0].name, \"abc\");\n    assert.equal($tree.tree(\"getNodesByProperty\", \"strProperty\", \"111\")[0].name, \"abc\");\n    // 5. load subtree in node2\n    var subtreeData = [\n        {\n            name: \"sub1\",\n            id: 200,\n            intProperty: 222,\n            children: [{ name: \"sub2\", id: 201, intProperty: 444 }],\n        },\n    ];\n    $tree.tree(\"loadData\", subtreeData, node2);\n    var t = $tree.tree(\"getTree\");\n    assert.notEqual(t, null);\n    assert.equal($tree.tree(\"getNodesByProperty\", \"intProperty\", 222)[0].name, \"sub1\");\n    assert.equal($tree.tree(\"getNodesByProperty\", \"intProperty\", 444)[0].name, \"sub2\");\n});\ntest(\"dataUrl extra options\", function (assert) {\n    var done = assert.async();\n    var $tree = $(\"#tree1\");\n    $.mockjax({\n        url: \"*\",\n        response: function (options) {\n            // 2. handle ajax request\n            // expect 'headers' option\n            assert.equal(options.url, \"/tree2/\");\n            assert.deepEqual(options.headers, { abc: \"def\" });\n            done();\n        },\n        logging: false,\n    });\n    // 1. init tree\n    // dataUrl contains 'headers' option\n    $tree.tree({\n        dataUrl: {\n            url: \"/tree2/\",\n            headers: { abc: \"def\" },\n        },\n    });\n});\ntest(\"dataUrl is function\", function (assert) {\n    var done = assert.async();\n    var $tree = $(\"#tree1\");\n    $.mockjax({\n        url: \"*\",\n        response: function (options) {\n            // 2. handle ajax request\n            // expect 'headers' option\n            assert.equal(options.url, \"/tree3/\");\n            assert.deepEqual(options.headers, { abc: \"def\" });\n            done();\n        },\n        logging: false,\n    });\n    // 1. init tree\n    // dataUrl is a function\n    $tree.tree({\n        dataUrl: function () {\n            return {\n                url: \"/tree3/\",\n                headers: { abc: \"def\" },\n            };\n        },\n    });\n});\ntest(\"getNodeByHtmlElement\", function (assert) {\n    var $tree = $(\"#tree1\");\n    $tree.tree({\n        data: utilsForTest_1.exampleData,\n    });\n    var $el = $(\".jqtree-title\");\n    // Get node for jquery element\n    var node = $tree.tree(\"getNodeByHtmlElement\", $el);\n    assert.ok(node);\n    if (node) {\n        assert.equal(node.name, \"node1\");\n    }\n    // Same for html element\n    var node2 = $tree.tree(\"getNodeByHtmlElement\", $el[0]);\n    assert.ok(node2);\n    if (node2) {\n        assert.equal(node2.name, \"node1\");\n    }\n});\ntest(\"onLoadFailed\", function (assert) {\n    $.mockjax({\n        url: \"/tree/\",\n        status: 500,\n        responseText: \"test error\",\n        logging: false,\n    });\n    var done = assert.async();\n    function handleLoadFailed(e) {\n        assert.equal(e.responseText, \"test error\");\n        done();\n    }\n    var $tree = $(\"#tree1\");\n    $tree.tree({\n        dataUrl: \"/tree/\",\n        onLoadFailed: handleLoadFailed,\n    });\n});\n","\"use strict\";\nexports.__esModule = true;\nvar module = QUnit.module, test = QUnit.test; // eslint-disable-line @typescript-eslint/unbound-method\nvar node_1 = require(\"../src/node\");\nmodule(\"node_util\");\ntest(\"getPositionName\", function (assert) {\n    assert.equal(node_1.getPositionName(node_1.Position.Before), \"before\");\n    assert.equal(node_1.getPositionName(node_1.Position.After), \"after\");\n    assert.equal(node_1.getPositionName(node_1.Position.Inside), \"inside\");\n    assert.equal(node_1.getPositionName(node_1.Position.None), \"none\");\n});\ntest(\"getPosition\", function (assert) {\n    assert.equal(node_1.getPosition(\"inside\"), node_1.Position.Inside);\n});\n","\"use strict\";\nexports.__esModule = true;\nvar module = QUnit.module, test = QUnit.test; // eslint-disable-line @typescript-eslint/unbound-method\nvar utilsForTest_1 = require(\"./utilsForTest\");\nvar node_1 = require(\"../src/node\");\nmodule(\"Tree\");\ntest(\"constructor\", function (assert) {\n    // 1. Create node from string\n    var node = new node_1.Node(\"n1\");\n    assert.equal(node.name, \"n1\");\n    assert.equal(node.children.length, 0);\n    assert.equal(node.parent, null);\n    // 2. Create node from object\n    var node2 = new node_1.Node({\n        label: \"n2\",\n        id: 123,\n        parent: \"abc\",\n        children: [\"c\"],\n        url: \"/\",\n    });\n    assert.equal(node2.name, \"n2\");\n    assert.equal(node2.id, 123);\n    assert.equal(node2[\"url\"], \"/\");\n    assert.equal(node2[\"label\"], undefined);\n    assert.equal(node2.children.length, 0);\n    assert.equal(node2.parent, null);\n});\ntest(\"create tree from data\", function (assert) {\n    function checkData(tree) {\n        assert.equal(utilsForTest_1.formatNodes(tree.children), \"node1 node2\", \"nodes on level 1\");\n        assert.equal(utilsForTest_1.formatNodes(tree.children[0].children), \"child1 child2\", \"children of node1\");\n        assert.equal(utilsForTest_1.formatNodes(tree.children[1].children), \"child3\", \"children of node2\");\n        assert.equal(tree.children[0].id, 123, \"id\");\n    }\n    // - create tree from example data\n    var tree = new node_1.Node({}, true);\n    tree.loadFromData(utilsForTest_1.exampleData);\n    checkData(tree);\n    // - create tree from new data format\n    var data = [\n        {\n            label: \"node1\",\n            id: 123,\n            children: [\"child1\", \"child2\"],\n        },\n        {\n            label: \"node2\",\n            id: 124,\n            children: [\"child3\"],\n        },\n    ];\n    var tree2 = new node_1.Node({}, true);\n    tree2.loadFromData(data);\n    checkData(tree2);\n});\ntest(\"addChild\", function (assert) {\n    var tree = new node_1.Node(\"tree1\", true);\n    tree.addChild(new node_1.Node(\"abc\"));\n    tree.addChild(new node_1.Node(\"def\"));\n    assert.equal(utilsForTest_1.formatNodes(tree.children), \"abc def\", \"children\");\n    var node = tree.children[0];\n    /* istanbul ignore if */\n    if (!node.parent) {\n        throw \"Node has no parent\";\n    }\n    assert.equal(node.parent.name, \"tree1\", \"parent of node\");\n});\ntest(\"addChildAtPosition\", function (assert) {\n    var tree = new node_1.Node({}, true);\n    tree.addChildAtPosition(new node_1.Node(\"abc\"), 0); // first\n    tree.addChildAtPosition(new node_1.Node(\"ghi\"), 2); // index 2 does not exist\n    tree.addChildAtPosition(new node_1.Node(\"def\"), 1);\n    tree.addChildAtPosition(new node_1.Node(\"123\"), 0);\n    assert.equal(utilsForTest_1.formatNodes(tree.children), \"123 abc def ghi\", \"children\");\n});\ntest(\"removeChild\", function (assert) {\n    var tree = new node_1.Node({}, true);\n    var abc = new node_1.Node({ label: \"abc\", id: 1 });\n    var def = new node_1.Node({ label: \"def\", id: 2 });\n    var ghi = new node_1.Node({ label: \"ghi\", id: 3 });\n    tree.addChild(abc);\n    tree.addChild(def);\n    tree.addChild(ghi);\n    var jkl = new node_1.Node({ label: \"jkl\", id: 4 });\n    def.addChild(jkl);\n    assert.equal(utilsForTest_1.formatNodes(tree.children), \"abc def ghi\", \"children\");\n    assert.equal(tree.idMapping[2].name, \"def\");\n    assert.equal(tree.idMapping[4].name, \"jkl\");\n    // remove 'def'\n    tree.removeChild(def);\n    assert.equal(utilsForTest_1.formatNodes(tree.children), \"abc ghi\", \"children\");\n    assert.equal(tree.idMapping[2], null);\n    assert.equal(tree.idMapping[4], null);\n    // remove 'ghi'\n    tree.removeChild(ghi);\n    assert.equal(utilsForTest_1.formatNodes(tree.children), \"abc\", \"children\");\n    // remove 'abc'\n    tree.removeChild(abc);\n    assert.equal(utilsForTest_1.formatNodes(tree.children), \"\", \"children\");\n});\ntest(\"getChildIndex\", function (assert) {\n    // setup\n    var tree = new node_1.Node({}, true);\n    var abc = new node_1.Node(\"abc\");\n    var def = new node_1.Node(\"def\");\n    var ghi = new node_1.Node(\"ghi\");\n    tree.addChild(abc);\n    tree.addChild(def);\n    tree.addChild(ghi);\n    // 1. Get child index of 'def'\n    assert.equal(tree.getChildIndex(def), 1);\n    // 2. Get child index of non-existing node\n    assert.equal(tree.getChildIndex(new node_1.Node(\"xyz\")), -1);\n});\ntest(\"hasChildren\", function (assert) {\n    var tree = new node_1.Node({}, true);\n    assert.equal(tree.hasChildren(), false, \"tree without children\");\n    tree.addChild(new node_1.Node(\"abc\"));\n    assert.equal(tree.hasChildren(), true, \"tree has children\");\n});\ntest(\"iterate\", function (assert) {\n    var tree = new node_1.Node({}, true);\n    tree.loadFromData(utilsForTest_1.exampleData);\n    // iterate over all the nodes\n    var nodes = [];\n    tree.iterate(function (node) {\n        nodes.push(node);\n        return true;\n    });\n    assert.equal(utilsForTest_1.formatNodes(nodes), \"node1 child1 child2 node2 child3\", \"all nodes\");\n    // iterate over nodes on first level\n    var nodes2 = [];\n    tree.iterate(function (node) {\n        nodes2.push(node);\n        return false;\n    });\n    assert.equal(utilsForTest_1.formatNodes(nodes2), \"node1 node2\", \"nodes on first level\");\n    // add child 4\n    var node124 = utilsForTest_1.doGetNodeById(tree, 124);\n    var node3 = node124.children[0];\n    node3.addChild(new node_1.Node(\"child4\"));\n    // test level parameter\n    var nodes3 = [];\n    tree.iterate(function (node, level) {\n        nodes3.push(node.name + \" \" + level);\n        return true;\n    });\n    assert.equal(nodes3.join(\",\"), \"node1 0,child1 1,child2 1,node2 0,child3 1,child4 2\");\n});\ntest(\"moveNode\", function (assert) {\n    var tree = new node_1.Node({}, true);\n    tree.loadFromData(utilsForTest_1.exampleData);\n    /*\n      node1\n      ---child1\n      ---child2\n      node2\n      ---child3\n    */\n    var node1 = tree.children[0];\n    var node2 = tree.children[1];\n    var child1 = node1.children[0];\n    var child2 = node1.children[1];\n    assert.equal(node2.name, \"node2\", \"node2 name\");\n    assert.equal(child2.name, \"child2\", \"child2 name\");\n    // move child2 after node2\n    tree.moveNode(child2, node2, node_1.Position.After);\n    /*\n      node1\n      ---child1\n      node2\n      ---child3\n      child2\n    */\n    assert.equal(utilsForTest_1.formatNodes(tree.children), \"node1 node2 child2\", \"tree nodes at first level\");\n    assert.equal(utilsForTest_1.formatNodes(node1.children), \"child1\", \"node1 children\");\n    // move child1 inside node2\n    // this means it's the first child\n    tree.moveNode(child1, node2, node_1.Position.Inside);\n    /*\n      node1\n      node2\n      ---child1\n      ---child3\n      child2\n    */\n    assert.equal(utilsForTest_1.formatNodes(node2.children), \"child1 child3\", \"node2 children\");\n    assert.equal(utilsForTest_1.formatNodes(node1.children), \"\", \"node1 has no children\");\n    // move child2 before child1\n    tree.moveNode(child2, child1, node_1.Position.Before);\n    /*\n      node1\n      node2\n      ---child2\n      ---child1\n      ---child3\n    */\n    assert.equal(utilsForTest_1.formatNodes(node2.children), \"child2 child1 child3\", \"node2 children\");\n    assert.equal(utilsForTest_1.formatNodes(tree.children), \"node1 node2\", \"tree nodes at first level\");\n});\ntest(\"initFromData\", function (assert) {\n    var data = {\n        label: \"main\",\n        children: [\n            \"c1\",\n            {\n                label: \"c2\",\n                id: 201,\n            },\n        ],\n    };\n    var node = new node_1.Node({}, true);\n    node.initFromData(data);\n    assert.equal(node.name, \"main\");\n    assert.equal(utilsForTest_1.formatNodes(node.children), \"c1 c2\", \"children\");\n    assert.equal(node.children[1].id, 201);\n});\ntest(\"getData\", function (assert) {\n    // 1. empty node\n    var node = new node_1.Node({}, true);\n    assert.deepEqual(node.getData(), []);\n    // 2.node with data\n    node.loadFromData([\n        {\n            label: \"n1\",\n            children: [\n                {\n                    label: \"c1\",\n                },\n            ],\n        },\n    ]);\n    assert.deepEqual(node.getData(), [\n        {\n            name: \"n1\",\n            children: [\n                {\n                    name: \"c1\",\n                },\n            ],\n        },\n    ]);\n    // 3. get data including parent\n    var n1 = utilsForTest_1.doGetNodeByName(node, \"n1\");\n    assert.deepEqual(n1.getData(true), [\n        {\n            name: \"n1\",\n            children: [{ name: \"c1\" }],\n        },\n    ]);\n});\ntest(\"addAfter\", function (assert) {\n    // setup\n    var tree = new node_1.Node({}, true);\n    tree.loadFromData(utilsForTest_1.exampleData);\n    /*\n    -node1\n    ---c1\n    ---c2\n    -node2\n    ---c3\n    */\n    assert.equal(utilsForTest_1.formatNodes(tree.children), \"node1 node2\");\n    // - Add 'node_b' after node2\n    var node2 = utilsForTest_1.doGetNodeByName(tree, \"node2\");\n    node2.addAfter(\"node_b\");\n    assert.equal(utilsForTest_1.formatNodes(tree.children), \"node1 node2 node_b\");\n    var nodeB = utilsForTest_1.doGetNodeByName(tree, \"node_b\");\n    assert.equal(nodeB.name, \"node_b\");\n    // - Add 'node_a' after node1\n    var node1 = utilsForTest_1.doGetNodeByName(tree, \"node1\");\n    node1.addAfter(\"node_a\");\n    assert.equal(utilsForTest_1.formatNodes(tree.children), \"node1 node_a node2 node_b\");\n    // - Add 'node_c' after node_b; new node is an object\n    if (nodeB) {\n        nodeB.addAfter({\n            label: \"node_c\",\n            id: 789,\n        });\n    }\n    var nodeC = utilsForTest_1.doGetNodeByName(tree, \"node_c\");\n    assert.equal(nodeC.id, 789);\n    assert.equal(utilsForTest_1.formatNodes(tree.children), \"node1 node_a node2 node_b node_c\");\n    // - Add after root node; this is not possible\n    assert.equal(tree.addAfter(\"node_x\"), null);\n});\ntest(\"addBefore\", function (assert) {\n    // setup\n    var tree = new node_1.Node({}, true);\n    tree.loadFromData(utilsForTest_1.exampleData);\n    // - Add 'node_0' before node1\n    var node1 = utilsForTest_1.doGetNodeByName(tree, \"node1\");\n    node1.addBefore(\"node0\");\n    assert.equal(utilsForTest_1.formatNodes(tree.children), \"node0 node1 node2\");\n    // - Add before root node; this is not possile\n    assert.equal(tree.addBefore(\"x\"), null);\n});\ntest(\"addParent\", function (assert) {\n    // setup\n    var tree = new node_1.Node({}, true);\n    tree.loadFromData(utilsForTest_1.exampleData);\n    // - Add node 'root' as parent of node1\n    // Note that node also becomes a child of 'root'\n    var node1 = utilsForTest_1.doGetNodeByName(tree, \"node1\");\n    node1.addParent(\"root\");\n    var root = utilsForTest_1.doGetNodeByName(tree, \"root\");\n    assert.equal(utilsForTest_1.formatNodes(root.children), \"node1 node2\");\n    // - Add parent to root node; not possible\n    assert.equal(tree.addParent(\"x\"), null);\n});\ntest(\"remove\", function (assert) {\n    // setup\n    var tree = new node_1.Node({}, true);\n    tree.loadFromData(utilsForTest_1.exampleData);\n    var child1 = utilsForTest_1.doGetNodeByName(tree, \"child1\");\n    var node1 = utilsForTest_1.doGetNodeByName(tree, \"node1\");\n    assert.equal(utilsForTest_1.formatNodes(node1.children), \"child1 child2\");\n    assert.equal(child1.parent, node1);\n    // 1. Remove child1\n    child1.remove();\n    assert.equal(utilsForTest_1.formatNodes(node1.children), \"child2\");\n    assert.equal(child1.parent, null);\n});\ntest(\"append\", function (assert) {\n    // setup\n    var tree = new node_1.Node({}, true);\n    tree.loadFromData(utilsForTest_1.exampleData);\n    var node1 = utilsForTest_1.doGetNodeByName(tree, \"node1\");\n    // 1. Append child3 to node1\n    node1.append(\"child3\");\n    assert.equal(utilsForTest_1.formatNodes(node1.children), \"child1 child2 child3\");\n    // 2. Append subtree\n    node1.append({\n        name: \"child4\",\n        children: [{ name: \"child5\" }],\n    });\n    assert.equal(utilsForTest_1.formatNodes(node1.children), \"child1 child2 child3 child4\");\n    var child4 = utilsForTest_1.doGetNodeByName(node1, \"child4\");\n    assert.equal(utilsForTest_1.formatNodes(child4.children), \"child5\");\n});\ntest(\"prepend\", function (assert) {\n    // setup\n    var tree = new node_1.Node({}, true);\n    tree.loadFromData(utilsForTest_1.exampleData);\n    var node1 = utilsForTest_1.doGetNodeByName(tree, \"node1\");\n    // 1. Prepend child0 to node1\n    node1.prepend(\"child0\");\n    assert.equal(utilsForTest_1.formatNodes(node1.children), \"child0 child1 child2\");\n    // 2. Prepend subtree\n    node1.prepend({\n        name: \"child3\",\n        children: [{ name: \"child4\" }],\n    });\n    assert.equal(utilsForTest_1.formatNodes(node1.children), \"child3 child0 child1 child2\");\n    var child3 = utilsForTest_1.doGetNodeByName(node1, \"child3\");\n    assert.equal(utilsForTest_1.formatNodes(child3.children), \"child4\");\n});\ntest(\"getNodeById\", function (assert) {\n    // setup\n    var tree = new node_1.Node({}, true);\n    tree.loadFromData(utilsForTest_1.exampleData);\n    // 1. Get node with id 124\n    var node = utilsForTest_1.doGetNodeById(tree, 124);\n    assert.equal(node.name, \"node2\");\n    // 2. Delete node with id 124 and search again\n    node.remove();\n    assert.equal(tree.getNodeById(124), null);\n    // 3. Add node with id 456 and search for it\n    var child3 = utilsForTest_1.doGetNodeByName(tree, \"child2\");\n    child3.append({\n        id: 456,\n        label: \"new node\",\n    });\n    var node2 = utilsForTest_1.doGetNodeById(tree, 456);\n    assert.equal(node2.name, \"new node\");\n});\ntest(\"getLevel\", function (assert) {\n    // setup\n    var tree = new node_1.Node({}, true);\n    tree.loadFromData(utilsForTest_1.exampleData);\n    // 1. get level for node1 and child1\n    assert.equal(utilsForTest_1.doGetNodeByName(tree, \"node1\").getLevel(), 1);\n    assert.equal(utilsForTest_1.doGetNodeByName(tree, \"child1\").getLevel(), 2);\n});\ntest(\"loadFromData and id mapping\", function (assert) {\n    // - get node from empty tree\n    var tree = new node_1.Node({}, true);\n    assert.equal(tree.getNodeById(999), null);\n    // - load example data in tree\n    tree.loadFromData(utilsForTest_1.exampleData);\n    assert.equal(utilsForTest_1.doGetNodeById(tree, 124).name, \"node2\");\n    var child2 = utilsForTest_1.doGetNodeById(tree, 126);\n    child2.addChild(new node_1.Node({ label: \"child4\", id: 128 }));\n    child2.addChild(new node_1.Node({ label: \"child5\", id: 129 }));\n    // - load data in node child2\n    child2.loadFromData([\"abc\", \"def\"]);\n    assert.equal(tree.getNodeById(128), null);\n    assert.equal(child2.children.length, 2);\n    assert.equal(child2.children[0].name, \"abc\");\n});\ntest(\"removeChildren\", function (assert) {\n    // - load example data\n    var tree = new node_1.Node({}, true);\n    tree.loadFromData(utilsForTest_1.exampleData);\n    // add child4 and child5\n    var child2 = utilsForTest_1.doGetNodeById(tree, 126);\n    assert.equal(child2.name, \"child2\");\n    child2.addChild(new node_1.Node({ label: \"child4\", id: 128 }));\n    child2.addChild(new node_1.Node({ label: \"child5\", id: 129 }));\n    assert.equal(utilsForTest_1.doGetNodeById(tree, 128).name, \"child4\");\n    // - remove children from child2\n    child2.removeChildren();\n    assert.equal(tree.getNodeById(128), null);\n    assert.equal(child2.children.length, 0);\n});\ntest(\"node with id 0\", function (assert) {\n    // - load node with id 0\n    var tree = new node_1.Node({}, true);\n    tree.loadFromData([\n        {\n            id: 0,\n            label: \"mynode\",\n        },\n    ]);\n    var node = utilsForTest_1.doGetNodeById(tree, 0);\n    assert.equal(node.name, \"mynode\");\n    // -- remove the node\n    node.remove();\n    assert.equal(tree.getNodeById(0), undefined);\n});\ntest(\"getPreviousSibling\", function (assert) {\n    // setup\n    var tree = new node_1.Node({}, true);\n    tree.loadFromData(utilsForTest_1.exampleData);\n    // - getPreviousSibling\n    var previousSibling = utilsForTest_1.doGetNodeByName(tree, \"child2\").getPreviousSibling();\n    /* istanbul ignore if */\n    if (!previousSibling) {\n        throw \"Previous sibling not found\";\n    }\n    assert.equal(previousSibling.name, \"child1\");\n    assert.equal(tree.getPreviousSibling(), null);\n    assert.equal(utilsForTest_1.doGetNodeByName(tree, \"child1\").getPreviousSibling(), null);\n});\ntest(\"getNextSibling\", function (assert) {\n    // setup\n    var tree = new node_1.Node({}, true);\n    tree.loadFromData(utilsForTest_1.exampleData);\n    // - getNextSibling\n    var nextSibling = utilsForTest_1.doGetNodeByName(tree, \"node1\").getNextSibling();\n    /* istanbul ignore if */\n    if (!nextSibling) {\n        throw \"Next sibling not found\";\n    }\n    assert.equal(nextSibling.name, \"node2\");\n    assert.equal(utilsForTest_1.doGetNodeByName(tree, \"node2\").getNextSibling(), null);\n    assert.equal(tree.getNextSibling(), null);\n});\ntest(\"getNodesByProperty\", function (assert) {\n    var tree = new node_1.Node({}, true);\n    tree.loadFromData(utilsForTest_1.exampleData);\n    var nodes = tree.getNodesByProperty(\"name\", \"child1\");\n    assert.equal(nodes.length, 1);\n    assert.equal(nodes[0].name, \"child1\");\n});\ntest(\"getNodeByCallback\", function (assert) {\n    var tree = new node_1.Node({}, true);\n    tree.loadFromData(utilsForTest_1.exampleData);\n    var node = tree.getNodeByCallback(function (n) { return n.name === \"child1\"; });\n    /* istanbul ignore if */\n    if (!node) {\n        throw \"Node not found\";\n    }\n    assert.equal(node.name, \"child1\");\n});\n","\"use strict\";\nexports.__esModule = true;\nvar module = QUnit.module, test = QUnit.test; // eslint-disable-line @typescript-eslint/unbound-method\nvar util_1 = require(\"../src/util\");\nmodule(\"util\");\ntest(\"isInt\", function (assert) {\n    assert.ok(util_1.isInt(10));\n    assert.ok(util_1.isInt(0));\n    assert.ok(util_1.isInt(-1));\n    assert.notOk(util_1.isInt(\"1\"));\n    assert.notOk(null);\n});\ntest(\"isFunction\", function (assert) {\n    assert.ok(util_1.isFunction(util_1.isInt));\n    assert.notOk(util_1.isFunction(\"test\"));\n});\ntest(\"htmlEscape\", function (assert) {\n    assert.equal(util_1.htmlEscape(\"\"), \"\");\n    assert.equal(util_1.htmlEscape(\"test\"), \"test\");\n    assert.equal(util_1.htmlEscape(\"a&b\"), \"a&amp;b\");\n});\ntest(\"getBoolString\", function (assert) {\n    assert.equal(util_1.getBoolString(true), \"true\");\n    assert.equal(util_1.getBoolString(false), \"false\");\n    assert.equal(util_1.getBoolString(1), \"true\");\n    assert.equal(util_1.getBoolString(null), \"false\");\n});\n"],"sourceRoot":""}