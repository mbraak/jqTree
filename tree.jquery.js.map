{"version":3,"file":"tree.jquery.js","sources":["src/position.ts","src/dragAndDropHandler/dragElement.ts","src/util.ts","src/dragAndDropHandler/visibleNodeIterator.ts","src/dragAndDropHandler/hitAreasGenerator.ts","src/dragAndDropHandler/index.ts","src/elementsRenderer.ts","src/dataLoader.ts","src/keyHandler.ts","src/simple.widget.ts","src/mouse.widget.ts","src/saveStateHandler.ts","src/scrollHandler/containerScrollParent.ts","src/scrollHandler/documentScrollParent.ts","src/scrollHandler/createScrollParent.ts","src/scrollHandler.ts","src/selectNodeHandler.ts","src/nodeUtils.ts","src/node.ts","src/nodeElement/borderDropHint.ts","src/nodeElement/ghostDropHint.ts","src/nodeElement/index.ts","src/nodeElement/folderElement.ts","src/tree.jquery.ts","src/version.ts"],"sourcesContent":["export enum Position {\n    Before = 1,\n    After,\n    Inside,\n    None,\n}\n\nconst positionNames: Record<string, Position> = {\n    before: Position.Before,\n    after: Position.After,\n    inside: Position.Inside,\n    none: Position.None,\n};\n\nexport const getPositionName = (position: Position): string => {\n    for (const name in positionNames) {\n        if (Object.prototype.hasOwnProperty.call(positionNames, name)) {\n            if (positionNames[name] === position) {\n                return name;\n            }\n        }\n    }\n\n    return \"\";\n};\n\nexport const getPosition = (name: string): Position | undefined =>\n    positionNames[name];\n","class DragElement {\n    private offsetX: number;\n    private offsetY: number;\n    private $element: JQuery;\n\n    constructor(\n        nodeName: string,\n        offsetX: number,\n        offsetY: number,\n        $tree: JQuery,\n        autoEscape: boolean,\n    ) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n\n        this.$element = jQuery(\"<span>\").addClass(\n            \"jqtree-title jqtree-dragging\",\n        );\n\n        if (autoEscape) {\n            this.$element.text(nodeName);\n        } else {\n            this.$element.html(nodeName);\n        }\n\n        this.$element.css(\"position\", \"absolute\");\n        $tree.append(this.$element);\n    }\n\n    public move(pageX: number, pageY: number): void {\n        this.$element.offset({\n            left: pageX - this.offsetX,\n            top: pageY - this.offsetY,\n        });\n    }\n\n    public remove(): void {\n        this.$element.remove();\n    }\n}\n\nexport default DragElement;\n","export const isInt = (n: unknown): boolean =>\n    typeof n === \"number\" && n % 1 === 0;\n\nexport const isFunction = (v: unknown): boolean => typeof v === \"function\";\n\nexport const getBoolString = (value: unknown): string =>\n    value ? \"true\" : \"false\";\n\nexport const getOffsetTop = (element: HTMLElement) =>\n    element.getBoundingClientRect().y + window.scrollY;\n","import { Node } from \"../node\";\n\nabstract class VisibleNodeIterator {\n    private tree: Node;\n\n    constructor(tree: Node) {\n        this.tree = tree;\n    }\n\n    protected iterate(): void {\n        let isFirstNode = true;\n\n        const _iterateNode = (node: Node, nextNode: Node | null): void => {\n            let mustIterateInside =\n                (node.is_open || !node.element) && node.hasChildren();\n\n            let element: HTMLElement | null = null;\n\n            // Is the element visible?\n            if (node.element?.offsetParent) {\n                element = node.element;\n\n                if (isFirstNode) {\n                    this.handleFirstNode(node);\n                    isFirstNode = false;\n                }\n\n                if (!node.hasChildren()) {\n                    this.handleNode(node, nextNode, node.element);\n                } else if (node.is_open) {\n                    if (!this.handleOpenFolder(node, node.element)) {\n                        mustIterateInside = false;\n                    }\n                } else {\n                    this.handleClosedFolder(node, nextNode, element);\n                }\n            }\n\n            if (mustIterateInside) {\n                const childrenLength = node.children.length;\n                node.children.forEach((_, i) => {\n                    const child = node.children[i];\n\n                    if (child) {\n                        if (i === childrenLength - 1) {\n                            _iterateNode(child, null);\n                        } else {\n                            const nextChild = node.children[i + 1];\n\n                            if (nextChild) {\n                                _iterateNode(child, nextChild);\n                            }\n                        }\n                    }\n                });\n\n                if (node.is_open && element) {\n                    this.handleAfterOpenFolder(node, nextNode);\n                }\n            }\n        };\n\n        _iterateNode(this.tree, null);\n    }\n\n    protected abstract handleNode(\n        node: Node,\n        nextNode: Node | null,\n        element: HTMLElement,\n    ): void;\n\n    /*\n    override\n    return\n        - true: continue iterating\n        - false: stop iterating\n    */\n    protected abstract handleOpenFolder(\n        node: Node,\n        element: HTMLElement,\n    ): boolean;\n\n    protected abstract handleClosedFolder(\n        node: Node,\n        nextNode: Node | null,\n        element: HTMLElement,\n    ): void;\n\n    protected abstract handleAfterOpenFolder(\n        node: Node,\n        nextNode: Node | null,\n    ): void;\n\n    protected abstract handleFirstNode(node: Node): void;\n}\n\nexport default VisibleNodeIterator;\n","import { HitArea } from \"./types\";\nimport { Node } from \"../node\";\nimport { Position } from \"../position\";\nimport { getOffsetTop } from \"../util\";\nimport VisibleNodeIterator from \"./visibleNodeIterator\";\n\nclass HitAreasGenerator extends VisibleNodeIterator {\n    private currentNode: Node;\n    private treeBottom: number;\n    private positions: HitArea[];\n    private lastTop: number;\n\n    constructor(tree: Node, currentNode: Node, treeBottom: number) {\n        super(tree);\n\n        this.currentNode = currentNode;\n        this.treeBottom = treeBottom;\n    }\n\n    public generate(): HitArea[] {\n        this.positions = [];\n        this.lastTop = 0;\n\n        this.iterate();\n\n        return this.generateHitAreas(this.positions);\n    }\n\n    protected generateHitAreas(positions: HitArea[]): HitArea[] {\n        let previousTop = positions[0]?.top ?? 0;\n        let group = [];\n        const hitAreas: HitArea[] = [];\n\n        for (const position of positions) {\n            if (position.top !== previousTop && group.length) {\n                this.generateHitAreasForGroup(\n                    hitAreas,\n                    group,\n                    previousTop,\n                    position.top,\n                );\n\n                previousTop = position.top;\n                group = [];\n            }\n\n            group.push(position);\n        }\n\n        this.generateHitAreasForGroup(\n            hitAreas,\n            group,\n            previousTop,\n            this.treeBottom,\n        );\n\n        return hitAreas;\n    }\n\n    protected handleOpenFolder(node: Node, element: HTMLElement): boolean {\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            // Stop iterating\n            return false;\n        }\n\n        // Cannot move before current item\n        if (node.children[0] !== this.currentNode) {\n            this.addPosition(node, Position.Inside, getOffsetTop(element));\n        }\n\n        // Continue iterating\n        return true;\n    }\n\n    protected handleClosedFolder(\n        node: Node,\n        nextNode: Node,\n        element: HTMLElement,\n    ): void {\n        const top = getOffsetTop(element);\n\n        if (node === this.currentNode) {\n            // Cannot move after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n\n            // Cannot move before current item\n            if (nextNode !== this.currentNode) {\n                this.addPosition(node, Position.After, top);\n            }\n        }\n    }\n\n    protected handleFirstNode(node: Node): void {\n        if (node !== this.currentNode) {\n            this.addPosition(node, Position.Before, getOffsetTop(node.element));\n        }\n    }\n\n    protected handleAfterOpenFolder(node: Node, nextNode: Node): void {\n        if (node === this.currentNode || nextNode === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, this.lastTop);\n        } else {\n            this.addPosition(node, Position.After, this.lastTop);\n        }\n    }\n\n    protected handleNode(\n        node: Node,\n        nextNode: Node,\n        element: HTMLElement,\n    ): void {\n        const top = getOffsetTop(element);\n\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n        }\n\n        if (nextNode === this.currentNode || node === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.After, top);\n        }\n    }\n\n    private addPosition(node: Node, position: number, top: number): void {\n        const area = {\n            top,\n            bottom: 0,\n            node,\n            position,\n        };\n\n        this.positions.push(area);\n        this.lastTop = top;\n    }\n\n    private generateHitAreasForGroup(\n        hitAreas: HitArea[],\n        positionsInGroup: HitArea[],\n        top: number,\n        bottom: number,\n    ): void {\n        // limit positions in group\n        const positionCount = Math.min(positionsInGroup.length, 4);\n\n        const areaHeight = Math.round((bottom - top) / positionCount);\n        let areaTop = top;\n\n        let i = 0;\n        while (i < positionCount) {\n            const position = positionsInGroup[i];\n\n            if (position) {\n                hitAreas.push({\n                    top: areaTop,\n                    bottom: areaTop + areaHeight,\n                    node: position.node,\n                    position: position.position,\n                });\n            }\n\n            areaTop += areaHeight;\n            i += 1;\n        }\n    }\n}\n\nexport default HitAreasGenerator;\n","import { Node } from \"../node\";\nimport { getPositionName, Position } from \"../position\";\nimport { DropHint, HitArea } from \"./types\";\nimport { PositionInfo } from \"../mouseWidgetTypes\";\nimport NodeElement from \"../nodeElement\";\nimport DragElement from \"./dragElement\";\nimport HitAreasGenerator from \"./hitAreasGenerator\";\nimport {\n    OnCanMove,\n    OnCanMoveTo,\n    OnIsMoveHandle,\n    DragMethod,\n} from \"../jqtreeOptions\";\nimport {\n    GetScrollLeft,\n    GetTree,\n    OpenNode,\n    RefreshElements,\n    TriggerEvent,\n} from \"../jqtreeMethodTypes\";\n\ninterface Dimensions {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n}\n\ntype GetNodeElement = (element: HTMLElement) => NodeElement | null;\ntype GetNodeElementForNode = (node: Node) => NodeElement;\n\ninterface DragAndDropHandlerParams {\n    autoEscape?: boolean;\n    getNodeElement: GetNodeElement;\n    getNodeElementForNode: GetNodeElementForNode;\n    getScrollLeft: GetScrollLeft;\n    getTree: GetTree;\n    onCanMove?: OnCanMove;\n    onCanMoveTo?: OnCanMoveTo;\n    onDragMove?: DragMethod;\n    onDragStop?: DragMethod;\n    onIsMoveHandle?: OnIsMoveHandle;\n    openFolderDelay: number | false;\n    openNode: OpenNode;\n    refreshElements: RefreshElements;\n    slide: boolean;\n    $treeElement: JQuery<HTMLElement>;\n    triggerEvent: TriggerEvent;\n}\n\nexport class DragAndDropHandler {\n    public hitAreas: HitArea[];\n    public isDragging: boolean;\n    public currentItem: NodeElement | null;\n    public hoveredArea: HitArea | null;\n\n    private autoEscape?: boolean;\n    private dragElement: DragElement | null;\n    private getNodeElement: GetNodeElement;\n    private getNodeElementForNode: GetNodeElementForNode;\n    private getScrollLeft: GetScrollLeft;\n    private getTree: GetTree;\n    private onCanMove?: OnCanMove;\n    private onCanMoveTo?: OnCanMoveTo;\n    private onDragMove?: DragMethod;\n    private onDragStop?: DragMethod;\n    private onIsMoveHandle?: OnIsMoveHandle;\n    private openFolderDelay: number | false;\n    private openFolderTimer: number | null;\n    private openNode: OpenNode;\n    private previousGhost: DropHint | null;\n    private refreshElements: RefreshElements;\n    private slide: boolean;\n    private $treeElement: JQuery<HTMLElement>;\n    private triggerEvent: TriggerEvent;\n\n    constructor({\n        autoEscape,\n        getNodeElement,\n        getNodeElementForNode,\n        getScrollLeft,\n        getTree,\n        onCanMove,\n        onCanMoveTo,\n        onDragMove,\n        onDragStop,\n        onIsMoveHandle,\n        openNode,\n        refreshElements,\n        slide,\n        $treeElement,\n        triggerEvent,\n    }: DragAndDropHandlerParams) {\n        this.autoEscape = autoEscape;\n        this.getNodeElement = getNodeElement;\n        this.getNodeElementForNode = getNodeElementForNode;\n        this.getScrollLeft = getScrollLeft;\n        this.getTree = getTree;\n        this.onCanMove = onCanMove;\n        this.onCanMoveTo = onCanMoveTo;\n        this.onDragMove = onDragMove;\n        this.onDragStop = onDragStop;\n        this.onIsMoveHandle = onIsMoveHandle;\n        this.openNode = openNode;\n        this.refreshElements = refreshElements;\n        this.slide = slide;\n        this.$treeElement = $treeElement;\n        this.triggerEvent = triggerEvent;\n\n        this.hoveredArea = null;\n        this.hitAreas = [];\n        this.isDragging = false;\n        this.currentItem = null;\n    }\n\n    public mouseCapture(positionInfo: PositionInfo): boolean | null {\n        const element = positionInfo.target;\n\n        if (!this.mustCaptureElement(element)) {\n            return null;\n        }\n\n        if (this.onIsMoveHandle && !this.onIsMoveHandle(jQuery(element))) {\n            return null;\n        }\n\n        let nodeElement = this.getNodeElement(element);\n\n        if (nodeElement && this.onCanMove) {\n            if (!this.onCanMove(nodeElement.node)) {\n                nodeElement = null;\n            }\n        }\n\n        this.currentItem = nodeElement;\n        return this.currentItem != null;\n    }\n\n    public mouseStart(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.refresh();\n\n        const offset = jQuery(positionInfo.target).offset();\n        const left = offset ? offset.left : 0;\n        const top = offset ? offset.top : 0;\n\n        const node = this.currentItem.node;\n\n        this.dragElement = new DragElement(\n            node.name,\n            positionInfo.pageX - left,\n            positionInfo.pageY - top,\n            this.$treeElement,\n            this.autoEscape ?? true,\n        );\n\n        this.isDragging = true;\n        this.currentItem.element.classList.add(\"jqtree-moving\");\n\n        return true;\n    }\n\n    public mouseDrag(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            !this.dragElement ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.dragElement.move(positionInfo.pageX, positionInfo.pageY);\n\n        const area = this.findHoveredArea(\n            positionInfo.pageX,\n            positionInfo.pageY,\n        );\n\n        if (area && this.canMoveToArea(area)) {\n            if (!area.node.isFolder()) {\n                this.stopOpenFolderTimer();\n            }\n\n            if (this.hoveredArea !== area) {\n                this.hoveredArea = area;\n\n                // If this is a closed folder, start timer to open it\n                if (this.mustOpenFolderTimer(area)) {\n                    this.startOpenFolderTimer(area.node);\n                } else {\n                    this.stopOpenFolderTimer();\n                }\n\n                this.updateDropHint();\n            }\n        } else {\n            this.removeDropHint();\n            this.stopOpenFolderTimer();\n            this.hoveredArea = area;\n        }\n\n        if (!area) {\n            if (this.onDragMove) {\n                this.onDragMove(\n                    this.currentItem.node,\n                    positionInfo.originalEvent,\n                );\n            }\n        }\n\n        return true;\n    }\n\n    public mouseStop(positionInfo: PositionInfo): boolean {\n        this.moveItem(positionInfo);\n        this.clear();\n        this.removeHover();\n        this.removeDropHint();\n        this.removeHitAreas();\n\n        const currentItem = this.currentItem;\n\n        if (this.currentItem) {\n            this.currentItem.element.classList.remove(\"jqtree-moving\");\n            this.currentItem = null;\n        }\n\n        this.isDragging = false;\n\n        if (!this.hoveredArea && currentItem) {\n            if (this.onDragStop) {\n                this.onDragStop(currentItem.node, positionInfo.originalEvent);\n            }\n        }\n\n        return false;\n    }\n\n    public refresh(): void {\n        this.removeHitAreas();\n\n        if (this.currentItem) {\n            this.generateHitAreas();\n\n            this.currentItem = this.getNodeElementForNode(\n                this.currentItem.node,\n            );\n\n            if (this.isDragging) {\n                this.currentItem.element.classList.add(\"jqtree-moving\");\n            }\n        }\n    }\n\n    private generateHitAreas(): void {\n        const tree = this.getTree();\n\n        if (!this.currentItem || !tree) {\n            this.hitAreas = [];\n        } else {\n            const hitAreasGenerator = new HitAreasGenerator(\n                tree,\n                this.currentItem.node,\n                this.getTreeDimensions().bottom,\n            );\n            this.hitAreas = hitAreasGenerator.generate();\n        }\n    }\n\n    private mustCaptureElement(element: HTMLElement): boolean {\n        const nodeName = element.nodeName;\n\n        return (\n            nodeName !== \"INPUT\" &&\n            nodeName !== \"SELECT\" &&\n            nodeName !== \"TEXTAREA\"\n        );\n    }\n\n    private canMoveToArea(area: HitArea): boolean {\n        if (!this.onCanMoveTo) {\n            return true;\n        }\n\n        if (!this.currentItem) {\n            return false;\n        }\n\n        const positionName = getPositionName(area.position);\n\n        return this.onCanMoveTo(this.currentItem.node, area.node, positionName);\n    }\n\n    private removeHitAreas(): void {\n        this.hitAreas = [];\n    }\n\n    private clear(): void {\n        if (this.dragElement) {\n            this.dragElement.remove();\n            this.dragElement = null;\n        }\n    }\n\n    private removeDropHint(): void {\n        if (this.previousGhost) {\n            this.previousGhost.remove();\n        }\n    }\n\n    private removeHover(): void {\n        this.hoveredArea = null;\n    }\n\n    private findHoveredArea(x: number, y: number): HitArea | null {\n        const dimensions = this.getTreeDimensions();\n\n        if (\n            x < dimensions.left ||\n            y < dimensions.top ||\n            x > dimensions.right ||\n            y > dimensions.bottom\n        ) {\n            return null;\n        }\n\n        let low = 0;\n        let high = this.hitAreas.length;\n        while (low < high) {\n            const mid = (low + high) >> 1;\n            const area = this.hitAreas[mid];\n\n            if (!area) {\n                return null;\n            }\n\n            if (y < area.top) {\n                high = mid;\n            } else if (y > area.bottom) {\n                low = mid + 1;\n            } else {\n                return area;\n            }\n        }\n\n        return null;\n    }\n\n    private mustOpenFolderTimer(area: HitArea): boolean {\n        const node = area.node;\n\n        return (\n            node.isFolder() &&\n            !node.is_open &&\n            area.position === Position.Inside\n        );\n    }\n\n    private updateDropHint(): void {\n        if (!this.hoveredArea) {\n            return;\n        }\n\n        // remove previous drop hint\n        this.removeDropHint();\n\n        // add new drop hint\n        const nodeElement = this.getNodeElementForNode(this.hoveredArea.node);\n        this.previousGhost = nodeElement.addDropHint(this.hoveredArea.position);\n    }\n\n    private startOpenFolderTimer(folder: Node): void {\n        const openFolder = (): void => {\n            this.openNode(folder, this.slide, () => {\n                this.refresh();\n                this.updateDropHint();\n            });\n        };\n\n        this.stopOpenFolderTimer();\n\n        const openFolderDelay = this.openFolderDelay;\n\n        if (openFolderDelay !== false) {\n            this.openFolderTimer = window.setTimeout(\n                openFolder,\n                openFolderDelay,\n            );\n        }\n    }\n\n    private stopOpenFolderTimer(): void {\n        if (this.openFolderTimer) {\n            clearTimeout(this.openFolderTimer);\n            this.openFolderTimer = null;\n        }\n    }\n\n    private moveItem(positionInfo: PositionInfo): void {\n        if (\n            this.currentItem &&\n            this.hoveredArea &&\n            this.hoveredArea.position !== Position.None &&\n            this.canMoveToArea(this.hoveredArea)\n        ) {\n            const movedNode = this.currentItem.node;\n            const targetNode = this.hoveredArea.node;\n            const position = this.hoveredArea.position;\n            const previousParent = movedNode.parent;\n\n            if (position === Position.Inside) {\n                this.hoveredArea.node.is_open = true;\n            }\n\n            const doMove = (): void => {\n                const tree = this.getTree();\n\n                if (tree) {\n                    tree.moveNode(movedNode, targetNode, position);\n                    this.$treeElement.empty();\n                    this.refreshElements(null);\n                }\n            };\n\n            const event = this.triggerEvent(\"tree.move\", {\n                move_info: {\n                    moved_node: movedNode,\n                    target_node: targetNode,\n                    position: getPositionName(position),\n                    previous_parent: previousParent,\n                    do_move: doMove,\n                    original_event: positionInfo.originalEvent,\n                },\n            });\n\n            if (!event.isDefaultPrevented()) {\n                doMove();\n            }\n        }\n    }\n\n    private getTreeDimensions(): Dimensions {\n        // Return the dimensions of the tree. Add a margin to the bottom to allow\n        // to drag-and-drop after the last element.\n        const offset = this.$treeElement.offset();\n\n        if (!offset) {\n            return { left: 0, top: 0, right: 0, bottom: 0 };\n        } else {\n            const el = this.$treeElement;\n            const width = el.width() || 0;\n            const height = el.height() || 0;\n            const left = offset.left + this.getScrollLeft();\n\n            return {\n                left,\n                top: offset.top,\n                right: left + width,\n                bottom: offset.top + height + 16,\n            };\n        }\n    }\n}\n","import { getBoolString } from \"./util\";\nimport { Node } from \"./node\";\nimport { IconElement, OnCreateLi } from \"./jqtreeOptions\";\nimport { GetTree, IsNodeSelected } from \"./jqtreeMethodTypes\";\n\ninterface ElementsRendererParams {\n    autoEscape: boolean;\n    buttonLeft: boolean;\n    closedIcon?: IconElement;\n    dragAndDrop: boolean;\n    $element: JQuery<HTMLElement>;\n    getTree: GetTree;\n    isNodeSelected: IsNodeSelected;\n    onCreateLi?: OnCreateLi;\n    openedIcon?: IconElement;\n    rtl?: boolean;\n    showEmptyFolder: boolean;\n    tabIndex?: number;\n}\n\nexport default class ElementsRenderer {\n    public openedIconElement?: HTMLElement | Text;\n    public closedIconElement?: HTMLElement | Text;\n    private autoEscape: boolean;\n    private buttonLeft: boolean;\n    private dragAndDrop: boolean;\n    private $element: JQuery<HTMLElement>;\n    private getTree: GetTree;\n    private isNodeSelected: IsNodeSelected;\n    private onCreateLi?: OnCreateLi;\n    private rtl?: boolean;\n    private showEmptyFolder: boolean;\n    private tabIndex?: number;\n\n    constructor({\n        autoEscape,\n        buttonLeft,\n        closedIcon,\n        onCreateLi,\n        dragAndDrop,\n        $element,\n        getTree,\n        isNodeSelected,\n        openedIcon,\n        rtl,\n        showEmptyFolder,\n        tabIndex,\n    }: ElementsRendererParams) {\n        this.autoEscape = autoEscape;\n        this.buttonLeft = buttonLeft;\n        this.dragAndDrop = dragAndDrop;\n        this.$element = $element;\n        this.getTree = getTree;\n        this.isNodeSelected = isNodeSelected;\n        this.onCreateLi = onCreateLi;\n        this.rtl = rtl;\n        this.showEmptyFolder = showEmptyFolder;\n        this.tabIndex = tabIndex;\n        this.openedIconElement = this.createButtonElement(openedIcon || \"+\");\n        this.closedIconElement = this.createButtonElement(closedIcon || \"-\");\n    }\n\n    public render(fromNode: Node | null): void {\n        if (fromNode && fromNode.parent) {\n            this.renderFromNode(fromNode);\n        } else {\n            this.renderFromRoot();\n        }\n    }\n\n    public renderFromRoot(): void {\n        this.$element.empty();\n\n        const tree = this.getTree();\n\n        if (this.$element[0] && tree) {\n            this.createDomElements(this.$element[0], tree.children, true, 1);\n        }\n    }\n\n    public renderFromNode(node: Node): void {\n        // remember current li\n        const $previousLi = jQuery(node.element);\n\n        // create element\n        const li = this.createLi(node, node.getLevel());\n        this.attachNodeData(node, li);\n\n        // add element to dom\n        $previousLi.after(li);\n\n        // remove previous li\n        $previousLi.remove();\n\n        // create children\n        if (node.children) {\n            this.createDomElements(\n                li,\n                node.children,\n                false,\n                node.getLevel() + 1,\n            );\n        }\n    }\n\n    private createDomElements(\n        element: Element,\n        children: Node[],\n        isRootNode: boolean,\n        level: number,\n    ): void {\n        const ul = this.createUl(isRootNode);\n        element.appendChild(ul);\n\n        for (const child of children) {\n            const li = this.createLi(child, level);\n            ul.appendChild(li);\n\n            this.attachNodeData(child, li);\n\n            if (child.hasChildren()) {\n                this.createDomElements(li, child.children, false, level + 1);\n            }\n        }\n    }\n\n    private attachNodeData(node: Node, li: HTMLElement): void {\n        node.element = li;\n        jQuery(li).data(\"node\", node);\n    }\n\n    private createUl(isRootNode: boolean): HTMLUListElement {\n        let classString;\n        let role;\n\n        if (!isRootNode) {\n            classString = \"\";\n            role = \"group\";\n        } else {\n            classString = \"jqtree-tree\";\n            role = \"tree\";\n\n            if (this.rtl) {\n                classString += \" jqtree-rtl\";\n            }\n        }\n\n        if (this.dragAndDrop) {\n            classString += \" jqtree-dnd\";\n        }\n\n        const ul = document.createElement(\"ul\");\n        ul.className = `jqtree_common ${classString}`;\n\n        ul.setAttribute(\"role\", role);\n\n        return ul;\n    }\n\n    private createLi(node: Node, level: number): HTMLLIElement {\n        const isSelected = Boolean(this.isNodeSelected(node));\n\n        const mustShowFolder =\n            node.isFolder() || (node.isEmptyFolder && this.showEmptyFolder);\n\n        const li = mustShowFolder\n            ? this.createFolderLi(node, level, isSelected)\n            : this.createNodeLi(node, level, isSelected);\n\n        if (this.onCreateLi) {\n            this.onCreateLi(node, jQuery(li), isSelected);\n        }\n\n        return li;\n    }\n\n    private setTreeItemAriaAttributes(\n        element: HTMLElement,\n        name: string,\n        level: number,\n        isSelected: boolean,\n    ) {\n        element.setAttribute(\"aria-label\", name);\n        element.setAttribute(\"aria-level\", `${level}`);\n        element.setAttribute(\"aria-selected\", getBoolString(isSelected));\n        element.setAttribute(\"role\", \"treeitem\");\n    }\n\n    private createFolderLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const buttonClasses = this.getButtonClasses(node);\n        const folderClasses = this.getFolderClasses(node, isSelected);\n\n        const iconElement = node.is_open\n            ? this.openedIconElement\n            : this.closedIconElement;\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = `jqtree_common ${folderClasses}`;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // button link\n        const buttonLink = document.createElement(\"a\");\n        buttonLink.className = buttonClasses;\n\n        if (iconElement) {\n            buttonLink.appendChild(iconElement.cloneNode(true));\n        }\n\n        if (this.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            true,\n            level,\n        );\n        titleSpan.setAttribute(\"aria-expanded\", getBoolString(node.is_open));\n        div.appendChild(titleSpan);\n\n        if (!this.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        return li;\n    }\n\n    private createNodeLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const liClasses = [\"jqtree_common\"];\n\n        if (isSelected) {\n            liClasses.push(\"jqtree-selected\");\n        }\n\n        const classString = liClasses.join(\" \");\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = classString;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            false,\n            level,\n        );\n        div.appendChild(titleSpan);\n\n        return li;\n    }\n\n    private createTitleSpan(\n        nodeName: string,\n        isSelected: boolean,\n        isFolder: boolean,\n        level: number,\n    ): HTMLSpanElement {\n        const titleSpan = document.createElement(\"span\");\n\n        let classes = \"jqtree-title jqtree_common\";\n\n        if (isFolder) {\n            classes += \" jqtree-title-folder\";\n        }\n\n        classes += ` jqtree-title-button-${this.buttonLeft ? \"left\" : \"right\"}`;\n\n        titleSpan.className = classes;\n\n        if (isSelected) {\n            const tabIndex = this.tabIndex;\n\n            if (tabIndex !== undefined) {\n                titleSpan.setAttribute(\"tabindex\", `${tabIndex}`);\n            }\n        }\n\n        this.setTreeItemAriaAttributes(titleSpan, nodeName, level, isSelected);\n\n        if (this.autoEscape) {\n            titleSpan.textContent = nodeName;\n        } else {\n            titleSpan.innerHTML = nodeName;\n        }\n\n        return titleSpan;\n    }\n\n    private getButtonClasses(node: Node): string {\n        const classes = [\"jqtree-toggler\", \"jqtree_common\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (this.buttonLeft) {\n            classes.push(\"jqtree-toggler-left\");\n        } else {\n            classes.push(\"jqtree-toggler-right\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private getFolderClasses(node: Node, isSelected: boolean): string {\n        const classes = [\"jqtree-folder\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (isSelected) {\n            classes.push(\"jqtree-selected\");\n        }\n\n        if (node.is_loading) {\n            classes.push(\"jqtree-loading\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private createButtonElement(\n        value: IconElement,\n    ): HTMLElement | Text | undefined {\n        if (typeof value === \"string\") {\n            // convert value to html\n            const div = document.createElement(\"div\");\n            div.innerHTML = value;\n\n            return document.createTextNode(div.innerHTML);\n        } else if (value == null) {\n            return undefined;\n        } else if ((value as HTMLElement).nodeType) {\n            return value as HTMLElement;\n        } else {\n            return jQuery(value)[0];\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { DataFilter, OnLoadFailed, OnLoading } from \"./jqtreeOptions\";\nimport { LoadData, TriggerEvent } from \"./jqtreeMethodTypes\";\n\nexport type HandleFinishedLoading = () => void;\n\ninterface DataLoaderParams {\n    dataFilter?: DataFilter;\n    loadData: LoadData;\n    onLoadFailed?: OnLoadFailed;\n    onLoading?: OnLoading;\n    $treeElement: JQuery<HTMLElement>;\n    triggerEvent: TriggerEvent;\n}\n\nexport default class DataLoader {\n    private dataFilter?: DataFilter;\n    private loadData: LoadData;\n    private onLoadFailed?: OnLoadFailed;\n    private onLoading?: OnLoading;\n    private $treeElement: JQuery<HTMLElement>;\n    private triggerEvent: TriggerEvent;\n\n    constructor({\n        dataFilter,\n        loadData,\n        onLoadFailed,\n        onLoading,\n        $treeElement,\n        triggerEvent,\n    }: DataLoaderParams) {\n        this.dataFilter = dataFilter;\n        this.loadData = loadData;\n        this.onLoadFailed = onLoadFailed;\n        this.onLoading = onLoading;\n        this.$treeElement = $treeElement;\n        this.triggerEvent = triggerEvent;\n    }\n\n    public loadFromUrl(\n        urlInfo: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null,\n    ): void {\n        if (!urlInfo) {\n            return;\n        }\n\n        const $el = this.getDomElement(parentNode);\n        this.addLoadingClass($el);\n        this.notifyLoading(true, parentNode, $el);\n\n        const stopLoading = (): void => {\n            this.removeLoadingClass($el);\n            this.notifyLoading(false, parentNode, $el);\n        };\n\n        const handleSuccess = (data: string | NodeData[]): void => {\n            stopLoading();\n            this.loadData(this.parseData(data), parentNode);\n\n            if (onFinished && typeof onFinished === \"function\") {\n                onFinished();\n            }\n        };\n\n        const handleError = (jqXHR: JQuery.jqXHR): void => {\n            stopLoading();\n\n            if (this.onLoadFailed) {\n                this.onLoadFailed(jqXHR);\n            }\n        };\n\n        this.submitRequest(urlInfo, handleSuccess, handleError);\n    }\n\n    private addLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.addClass(\"jqtree-loading\");\n        }\n    }\n\n    private removeLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.removeClass(\"jqtree-loading\");\n        }\n    }\n\n    private getDomElement(parentNode: Node | null): JQuery<HTMLElement> {\n        if (parentNode) {\n            return jQuery(parentNode.element);\n        } else {\n            return this.$treeElement;\n        }\n    }\n\n    private notifyLoading(\n        isLoading: boolean,\n        node: Node | null,\n        $el: JQuery,\n    ): void {\n        if (this.onLoading) {\n            this.onLoading(isLoading, node, $el);\n        }\n\n        this.triggerEvent(\"tree.loading_data\", {\n            isLoading,\n            node,\n            $el,\n        });\n    }\n\n    private submitRequest(\n        urlInfoInput: string | JQuery.AjaxSettings,\n        handleSuccess: JQuery.Ajax.SuccessCallback<any>,\n        handleError: JQuery.Ajax.ErrorCallback<any>,\n    ): void {\n        const urlInfo =\n            typeof urlInfoInput === \"string\"\n                ? { url: urlInfoInput }\n                : urlInfoInput;\n\n        const ajaxSettings: JQuery.AjaxSettings = {\n            method: \"GET\",\n            cache: false,\n            dataType: \"json\",\n            success: handleSuccess,\n            error: handleError,\n            ...urlInfo,\n        };\n\n        ajaxSettings.method = ajaxSettings.method?.toUpperCase() || \"GET\";\n\n        void jQuery.ajax(ajaxSettings);\n    }\n\n    private parseData(data: string | NodeData[]): NodeData[] {\n        const getParsedData = () => {\n            if (typeof data === \"string\") {\n                return JSON.parse(data) as NodeData[];\n            } else {\n                return data;\n            }\n        };\n\n        const parsedData = getParsedData();\n\n        if (this.dataFilter) {\n            return this.dataFilter(parsedData);\n        } else {\n            return parsedData;\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport {\n    CloseNode,\n    GetSelectedNode,\n    IsFocusOnTree,\n    OpenNode,\n    SelectNode,\n} from \"./jqtreeMethodTypes\";\n\ntype KeyboardEventHandler = (event: KeyboardEvent) => boolean;\n\ninterface KeyHandlerParams {\n    closeNode: CloseNode;\n    getSelectedNode: GetSelectedNode;\n    isFocusOnTree: IsFocusOnTree;\n    keyboardSupport: boolean;\n    openNode: OpenNode;\n    selectNode: SelectNode;\n}\n\nexport default class KeyHandler {\n    private closeNode: CloseNode;\n    private getSelectedNode: GetSelectedNode;\n    private handleKeyDownHandler?: KeyboardEventHandler;\n    private isFocusOnTree: IsFocusOnTree;\n    private keyboardSupport: boolean;\n    private openNode: OpenNode;\n    private originalSelectNode: SelectNode;\n\n    constructor({\n        closeNode,\n        getSelectedNode,\n        isFocusOnTree,\n        keyboardSupport,\n        openNode,\n        selectNode,\n    }: KeyHandlerParams) {\n        this.closeNode = closeNode;\n        this.getSelectedNode = getSelectedNode;\n        this.isFocusOnTree = isFocusOnTree;\n        this.keyboardSupport = keyboardSupport;\n        this.openNode = openNode;\n        this.originalSelectNode = selectNode;\n\n        if (keyboardSupport) {\n            this.handleKeyDownHandler = this.handleKeyDown.bind(this);\n\n            document.addEventListener(\"keydown\", this.handleKeyDownHandler);\n        }\n    }\n\n    public deinit(): void {\n        if (this.handleKeyDownHandler) {\n            document.removeEventListener(\"keydown\", this.handleKeyDownHandler);\n        }\n    }\n\n    public moveDown(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getNextVisibleNode());\n    }\n\n    public moveUp(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getPreviousVisibleNode());\n    }\n\n    public moveRight(selectedNode: Node): boolean {\n        if (!selectedNode.isFolder()) {\n            return true;\n        } else {\n            // folder node\n            if (selectedNode.is_open) {\n                // Right moves to the first child of an open node\n                return this.selectNode(selectedNode.getNextVisibleNode());\n            } else {\n                // Right expands a closed node\n                this.openNode(selectedNode);\n                return false;\n            }\n        }\n    }\n\n    public moveLeft(selectedNode: Node): boolean {\n        if (selectedNode.isFolder() && selectedNode.is_open) {\n            // Left on an open node closes the node\n            this.closeNode(selectedNode);\n            return false;\n        } else {\n            // Left on a closed or end node moves focus to the node's parent\n            return this.selectNode(selectedNode.getParent());\n        }\n    }\n\n    public selectNode(node: Node | null): boolean {\n        if (!node) {\n            return true;\n        } else {\n            this.originalSelectNode(node);\n\n            return false;\n        }\n    }\n\n    private handleKeyDown = (e: KeyboardEvent): boolean => {\n        if (!this.canHandleKeyboard()) {\n            return true;\n        }\n\n        const selectedNode = this.getSelectedNode();\n        if (!selectedNode) {\n            return true;\n        }\n\n        switch (e.key) {\n            case \"ArrowDown\":\n                return this.moveDown(selectedNode);\n\n            case \"ArrowUp\":\n                return this.moveUp(selectedNode);\n\n            case \"ArrowRight\":\n                return this.moveRight(selectedNode);\n\n            case \"ArrowLeft\":\n                return this.moveLeft(selectedNode);\n\n            default:\n                return true;\n        }\n    };\n\n    private canHandleKeyboard(): boolean {\n        return this.keyboardSupport && this.isFocusOnTree();\n    }\n}\n","const register = (widgetClass: unknown, widgetName: string): void => {\n    const getDataKey = (): string => `simple_widget_${widgetName}`;\n\n    const getWidgetData = (\n        el: HTMLElement,\n        dataKey: string\n    ): SimpleWidget<unknown> | null => {\n        const widget = jQuery.data(el, dataKey) as unknown;\n\n        if (widget && widget instanceof SimpleWidget) {\n            return widget;\n        } else {\n            return null;\n        }\n    };\n\n    const createWidget = ($el: JQuery, options: unknown): JQuery => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const existingWidget = getWidgetData(el, dataKey);\n\n            if (!existingWidget) {\n                const simpleWidgetClass = widgetClass as typeof SimpleWidget;\n                const widget = new simpleWidgetClass(el, options);\n\n                if (!jQuery.data(el, dataKey)) {\n                    jQuery.data(el, dataKey, widget);\n                }\n\n                // Call init after setting data, so we can call methods\n                widget.init();\n            }\n        }\n\n        return $el;\n    };\n\n    const destroyWidget = ($el: JQuery): void => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const widget = getWidgetData(el, dataKey);\n\n            if (widget) {\n                widget.destroy();\n            }\n\n            jQuery.removeData(el, dataKey);\n        }\n    };\n\n    const callFunction = (\n        $el: JQuery,\n        functionName: string,\n        args: unknown[]\n    ): unknown => {\n        let result = null;\n\n        for (const el of $el.get()) {\n            const widget = jQuery.data(el, getDataKey()) as unknown;\n\n            if (widget && widget instanceof SimpleWidget) {\n                const simpleWidget = widget as SimpleWidget<unknown>;\n                const widgetFunction = simpleWidget[functionName];\n\n                if (widgetFunction && typeof widgetFunction === \"function\") {\n                    result = widgetFunction.apply(widget, args) as unknown;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (jQuery.fn as any)[widgetName] = function (\n        this: JQuery,\n        argument1: unknown,\n        ...args: unknown[]\n    ) {\n        if (!argument1) {\n            return createWidget(this, null);\n        } else if (typeof argument1 === \"object\") {\n            const options = argument1 as unknown;\n            return createWidget(this, options);\n        } else if (typeof argument1 === \"string\" && argument1[0] !== \"_\") {\n            const functionName = argument1;\n\n            if (functionName === \"destroy\") {\n                return destroyWidget(this);\n            } else if (functionName === \"get_widget_class\") {\n                return widgetClass;\n            } else {\n                return callFunction(this, functionName, args);\n            }\n        } else {\n            return undefined;\n        }\n    };\n};\n\nexport default class SimpleWidget<WidgetOptions> {\n    public static register(widgetClass: unknown, widgetName: string): void {\n        register(widgetClass, widgetName);\n    }\n\n    [key: string]: unknown;\n\n    protected static defaults: unknown = {};\n\n    public options: WidgetOptions;\n\n    public $el: JQuery<HTMLElement>;\n\n    constructor(el: HTMLElement, options: WidgetOptions) {\n        this.$el = jQuery(el);\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const defaults = (this.constructor as any)[\"defaults\"] as WidgetOptions;\n        this.options = { ...defaults, ...options };\n    }\n\n    public destroy(): void {\n        this.deinit();\n    }\n\n    public init(): void {\n        //\n    }\n\n    public deinit(): void {\n        //\n    }\n}\n","/*\nThis widget does the same a the mouse widget in jqueryui.\n*/\nimport SimpleWidget from \"./simple.widget\";\nimport { PositionInfo } from \"./mouseWidgetTypes\";\n\nconst getPositionInfoFromMouseEvent = (e: MouseEvent): PositionInfo => ({\n    pageX: e.pageX,\n    pageY: e.pageY,\n    target: e.target as HTMLElement,\n    originalEvent: e,\n});\n\nconst getPositionInfoFromTouch = (\n    touch: Touch,\n    e: TouchEvent,\n): PositionInfo => ({\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    target: touch.target as HTMLElement,\n    originalEvent: e,\n});\n\nabstract class MouseWidget<WidgetOptions> extends SimpleWidget<WidgetOptions> {\n    protected isMouseStarted: boolean;\n    protected mouseDownInfo: PositionInfo | null;\n    private mouseDelayTimer: number | null;\n    private isMouseDelayMet: boolean;\n\n    public init(): void {\n        const element = this.$el.get(0);\n\n        if (element) {\n            element.addEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n            element.addEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.isMouseStarted = false;\n        this.mouseDelayTimer = null;\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n    }\n\n    public deinit(): void {\n        const el = this.$el.get(0);\n\n        if (el) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.removeMouseMoveEventListeners();\n    }\n\n    protected abstract mouseCapture(positionInfo: PositionInfo): boolean | null;\n\n    protected abstract mouseStart(positionInfo: PositionInfo): boolean;\n\n    protected abstract mouseDrag(positionInfo: PositionInfo): void;\n\n    protected abstract mouseStop(positionInfo: PositionInfo): void;\n\n    protected abstract getMouseDelay(): number;\n\n    private mouseDown = (e: MouseEvent): void => {\n        // Left mouse button?\n        if (e.button !== 0) {\n            return;\n        }\n\n        const result = this.handleMouseDown(getPositionInfoFromMouseEvent(e));\n\n        if (result && e.cancelable) {\n            e.preventDefault();\n        }\n    };\n\n    private handleMouseDown(positionInfo: PositionInfo): boolean {\n        // We may have missed mouseup (out of window)\n        if (this.isMouseStarted) {\n            this.handleMouseUp(positionInfo);\n        }\n\n        this.mouseDownInfo = positionInfo;\n\n        if (!this.mouseCapture(positionInfo)) {\n            return false;\n        }\n\n        this.handleStartMouse();\n\n        return true;\n    }\n\n    private handleStartMouse(): void {\n        document.addEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        document.addEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        document.addEventListener(\"mouseup\", this.mouseUp, { passive: false });\n        document.addEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n\n        const mouseDelay = this.getMouseDelay();\n\n        if (mouseDelay) {\n            this.startMouseDelayTimer(mouseDelay);\n        } else {\n            this.isMouseDelayMet = true;\n        }\n    }\n\n    private startMouseDelayTimer(mouseDelay: number): void {\n        if (this.mouseDelayTimer) {\n            clearTimeout(this.mouseDelayTimer);\n        }\n\n        this.mouseDelayTimer = window.setTimeout(() => {\n            if (this.mouseDownInfo) {\n                this.isMouseDelayMet = true;\n            }\n        }, mouseDelay);\n\n        this.isMouseDelayMet = false;\n    }\n\n    private mouseMove = (e: MouseEvent): void => {\n        this.handleMouseMove(e, getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseMove(\n        e: MouseEvent | TouchEvent,\n        positionInfo: PositionInfo,\n    ): void {\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n            return;\n        }\n\n        if (!this.isMouseDelayMet) {\n            return;\n        }\n\n        if (this.mouseDownInfo) {\n            this.isMouseStarted = this.mouseStart(this.mouseDownInfo) !== false;\n        }\n\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n        } else {\n            this.handleMouseUp(positionInfo);\n        }\n    }\n\n    private mouseUp = (e: MouseEvent): void => {\n        this.handleMouseUp(getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseUp(positionInfo: PositionInfo): void {\n        this.removeMouseMoveEventListeners();\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n\n        if (this.isMouseStarted) {\n            this.isMouseStarted = false;\n            this.mouseStop(positionInfo);\n        }\n    }\n\n    private removeMouseMoveEventListeners() {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mouseup\", this.mouseUp, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n    }\n\n    private touchStart = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseDown(getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchMove = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseMove(e, getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchEnd = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseUp(getPositionInfoFromTouch(touch, e));\n    };\n}\n\nexport default MouseWidget;\n","import { isInt } from \"./util\";\nimport { Node } from \"./node\";\nimport { OnGetStateFromStorage, OnSetStateFromStorage } from \"./jqtreeOptions\";\nimport {\n    AddToSelection,\n    GetNodeById,\n    GetSelectedNodes,\n    GetTree,\n    OpenNode,\n    RefreshElements,\n    RemoveFromSelection,\n} from \"./jqtreeMethodTypes\";\n\nexport interface SavedState {\n    open_nodes: NodeId[];\n    selected_node: NodeId[];\n}\n\ninterface SaveStateHandlerParams {\n    addToSelection: AddToSelection;\n    getNodeById: GetNodeById;\n    getSelectedNodes: GetSelectedNodes;\n    getTree: GetTree;\n    onGetStateFromStorage?: OnGetStateFromStorage;\n    onSetStateFromStorage?: OnSetStateFromStorage;\n    openNode: OpenNode;\n    refreshElements: RefreshElements;\n    removeFromSelection: RemoveFromSelection;\n    saveState: boolean | string;\n}\n\nexport default class SaveStateHandler {\n    private addToSelection: AddToSelection;\n    private getNodeById: GetNodeById;\n    private getSelectedNodes: GetSelectedNodes;\n    private getTree: GetTree;\n    private onGetStateFromStorage?: OnGetStateFromStorage;\n    private onSetStateFromStorage?: OnSetStateFromStorage;\n    private openNode: OpenNode;\n    private refreshElements: RefreshElements;\n    private removeFromSelection: RemoveFromSelection;\n    private saveStateOption: boolean | string;\n    private _supportsLocalStorage: boolean | null;\n\n    constructor({\n        addToSelection,\n        getNodeById,\n        getSelectedNodes,\n        getTree,\n        onGetStateFromStorage,\n        onSetStateFromStorage,\n        openNode,\n        refreshElements,\n        removeFromSelection,\n        saveState,\n    }: SaveStateHandlerParams) {\n        this.addToSelection = addToSelection;\n        this.getNodeById = getNodeById;\n        this.getSelectedNodes = getSelectedNodes;\n        this.getTree = getTree;\n        this.onGetStateFromStorage = onGetStateFromStorage;\n        this.onSetStateFromStorage = onSetStateFromStorage;\n        this.openNode = openNode;\n        this.refreshElements = refreshElements;\n        this.removeFromSelection = removeFromSelection;\n        this.saveStateOption = saveState;\n    }\n\n    public saveState(): void {\n        const state = JSON.stringify(this.getState());\n\n        if (this.onSetStateFromStorage) {\n            this.onSetStateFromStorage(state);\n        } else if (this.supportsLocalStorage()) {\n            localStorage.setItem(this.getKeyName(), state);\n        }\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        const jsonData = this.loadFromStorage();\n\n        if (jsonData) {\n            return this.parseState(jsonData) as unknown as SavedState;\n        } else {\n            return null;\n        }\n    }\n\n    public getState(): SavedState {\n        const getOpenNodeIds = (): NodeId[] => {\n            const openNodes: NodeId[] = [];\n\n            this.getTree()?.iterate((node: Node) => {\n                if (node.is_open && node.id && node.hasChildren()) {\n                    openNodes.push(node.id);\n                }\n                return true;\n            });\n\n            return openNodes;\n        };\n\n        const getSelectedNodeIds = (): NodeId[] => {\n            const selectedNodeIds: NodeId[] = [];\n\n            this.getSelectedNodes().forEach((node) => {\n                if (node.id != null) {\n                    selectedNodeIds.push(node.id);\n                }\n            });\n\n            return selectedNodeIds;\n        };\n\n        return {\n            open_nodes: getOpenNodeIds(),\n            selected_node: getSelectedNodeIds(),\n        };\n    }\n\n    /*\n    Set initial state\n    Don't handle nodes that are loaded on demand\n\n    result: must load on demand\n    */\n    public setInitialState(state: SavedState): boolean {\n        if (!state) {\n            return false;\n        } else {\n            let mustLoadOnDemand = false;\n\n            if (state.open_nodes) {\n                mustLoadOnDemand = this.openInitialNodes(state.open_nodes);\n            }\n\n            if (state.selected_node) {\n                this.resetSelection();\n                this.selectInitialNodes(state.selected_node);\n            }\n\n            return mustLoadOnDemand;\n        }\n    }\n\n    public setInitialStateOnDemand(\n        state: SavedState,\n        cbFinished: () => void,\n    ): void {\n        if (state) {\n            this.doSetInitialStateOnDemand(\n                state.open_nodes,\n                state.selected_node,\n                cbFinished,\n            );\n        } else {\n            cbFinished();\n        }\n    }\n\n    public getNodeIdToBeSelected(): NodeId | null {\n        const state = this.getStateFromStorage();\n\n        if (state && state.selected_node) {\n            return state.selected_node[0] || null;\n        } else {\n            return null;\n        }\n    }\n\n    private parseState(jsonData: string): SavedState {\n        const state = JSON.parse(jsonData) as Record<string, unknown>;\n\n        // Check if selected_node is an int (instead of an array)\n        if (state && state.selected_node && isInt(state.selected_node)) {\n            // Convert to array\n            state.selected_node = [state.selected_node];\n        }\n\n        return state as unknown as SavedState;\n    }\n\n    private loadFromStorage(): string | null {\n        if (this.onGetStateFromStorage) {\n            return this.onGetStateFromStorage();\n        } else if (this.supportsLocalStorage()) {\n            return localStorage.getItem(this.getKeyName());\n        } else {\n            return null;\n        }\n    }\n\n    private openInitialNodes(nodeIds: NodeId[]): boolean {\n        let mustLoadOnDemand = false;\n\n        for (const nodeId of nodeIds) {\n            const node = this.getNodeById(nodeId);\n\n            if (node) {\n                if (!node.load_on_demand) {\n                    node.is_open = true;\n                } else {\n                    mustLoadOnDemand = true;\n                }\n            }\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    private selectInitialNodes(nodeIds: NodeId[]): boolean {\n        let selectCount = 0;\n\n        for (const nodeId of nodeIds) {\n            const node = this.getNodeById(nodeId);\n\n            if (node) {\n                selectCount += 1;\n\n                this.addToSelection(node);\n            }\n        }\n\n        return selectCount !== 0;\n    }\n\n    private resetSelection(): void {\n        const selectedNodes = this.getSelectedNodes();\n\n        selectedNodes.forEach((node) => {\n            this.removeFromSelection(node);\n        });\n    }\n\n    private doSetInitialStateOnDemand(\n        nodeIdsParam: NodeId[],\n        selectedNodes: NodeId[],\n        cbFinished: () => void,\n    ): void {\n        let loadingCount = 0;\n        let nodeIds = nodeIdsParam;\n\n        const openNodes = (): void => {\n            const newNodesIds = [];\n\n            for (const nodeId of nodeIds) {\n                const node = this.getNodeById(nodeId);\n\n                if (!node) {\n                    newNodesIds.push(nodeId);\n                } else {\n                    if (!node.is_loading) {\n                        if (node.load_on_demand) {\n                            loadAndOpenNode(node);\n                        } else {\n                            this.openNode(node, false);\n                        }\n                    }\n                }\n            }\n\n            nodeIds = newNodesIds;\n\n            if (this.selectInitialNodes(selectedNodes)) {\n                this.refreshElements(null);\n            }\n\n            if (loadingCount === 0) {\n                cbFinished();\n            }\n        };\n\n        const loadAndOpenNode = (node: Node): void => {\n            loadingCount += 1;\n            this.openNode(node, false, () => {\n                loadingCount -= 1;\n                openNodes();\n            });\n        };\n\n        openNodes();\n    }\n\n    private getKeyName(): string {\n        if (typeof this.saveStateOption === \"string\") {\n            return this.saveStateOption;\n        } else {\n            return \"tree\";\n        }\n    }\n\n    private supportsLocalStorage(): boolean {\n        const testSupport = (): boolean => {\n            // Is local storage supported?\n            if (localStorage == null) {\n                return false;\n            } else {\n                // Check if it's possible to store an item. Safari does not allow this in private browsing mode.\n                try {\n                    const key = \"_storage_test\";\n                    sessionStorage.setItem(key, \"value\");\n                    sessionStorage.removeItem(key);\n                } catch (error) {\n                    return false;\n                }\n\n                return true;\n            }\n        };\n\n        if (this._supportsLocalStorage == null) {\n            this._supportsLocalStorage = testSupport();\n        }\n\n        return this._supportsLocalStorage;\n    }\n}\n","import type { ScrollParent } from \"./types\";\n\ntype HorizontalScrollDirection = \"left\" | \"right\";\ntype VerticalScrollDirection = \"bottom\" | \"top\";\n\ninterface Params {\n    $container: JQuery<HTMLElement>;\n    refreshHitAreas: () => void;\n    $treeElement: JQuery<HTMLElement>;\n}\n\nexport default class ContainerScrollParent implements ScrollParent {\n    private $container: JQuery<HTMLElement>;\n    private horizontalScrollDirection?: HorizontalScrollDirection;\n    private horizontalScrollTimeout?: number;\n    private refreshHitAreas: () => void;\n    private scrollParentBottom?: number;\n    private scrollParentTop?: number;\n    private verticalScrollTimeout?: number;\n    private verticalScrollDirection?: VerticalScrollDirection;\n\n    constructor({ $container, refreshHitAreas }: Params) {\n        this.$container = $container;\n        this.refreshHitAreas = refreshHitAreas;\n    }\n\n    public checkHorizontalScrolling(pageX: number): void {\n        const newHorizontalScrollDirection =\n            this.getNewHorizontalScrollDirection(pageX);\n\n        if (this.horizontalScrollDirection !== newHorizontalScrollDirection) {\n            this.horizontalScrollDirection = newHorizontalScrollDirection;\n\n            if (this.horizontalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n            }\n\n            if (newHorizontalScrollDirection) {\n                this.horizontalScrollTimeout = window.setTimeout(\n                    this.scrollHorizontally.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public checkVerticalScrolling(pageY: number) {\n        const newVerticalScrollDirection =\n            this.getNewVerticalScrollDirection(pageY);\n\n        if (this.verticalScrollDirection !== newVerticalScrollDirection) {\n            this.verticalScrollDirection = newVerticalScrollDirection;\n\n            if (this.verticalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n                this.verticalScrollTimeout = undefined;\n            }\n\n            if (newVerticalScrollDirection) {\n                this.verticalScrollTimeout = window.setTimeout(\n                    this.scrollVertically.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public getScrollLeft(): number {\n        return this.$container.scrollLeft() || 0;\n    }\n\n    public scrollToY(top: number): void {\n        const container = this.$container.get(0) as HTMLElement;\n        container.scrollTop = top;\n    }\n\n    public stopScrolling() {\n        this.horizontalScrollDirection = undefined;\n        this.verticalScrollDirection = undefined;\n        this.scrollParentTop = undefined;\n        this.scrollParentBottom = undefined;\n    }\n\n    private getNewHorizontalScrollDirection(\n        pageX: number,\n    ): HorizontalScrollDirection | undefined {\n        const scrollParentOffset = this.$container.offset();\n        if (!scrollParentOffset) {\n            return undefined;\n        }\n\n        const container = this.$container.get(0) as HTMLElement;\n\n        const rightEdge = scrollParentOffset.left + container.clientWidth;\n        const leftEdge = scrollParentOffset.left;\n        const isNearRightEdge = pageX > rightEdge - 20;\n        const isNearLeftEdge = pageX < leftEdge + 20;\n\n        if (isNearRightEdge) {\n            return \"right\";\n        } else if (isNearLeftEdge) {\n            return \"left\";\n        }\n\n        return undefined;\n    }\n\n    private getNewVerticalScrollDirection(\n        pageY: number,\n    ): VerticalScrollDirection | undefined {\n        if (pageY < this.getScrollParentTop()) {\n            return \"top\";\n        }\n\n        if (pageY > this.getScrollParentBottom()) {\n            return \"bottom\";\n        }\n\n        return undefined;\n    }\n\n    private scrollHorizontally() {\n        if (!this.horizontalScrollDirection) {\n            return;\n        }\n\n        const distance = this.horizontalScrollDirection === \"left\" ? -20 : 20;\n        const container = this.$container.get(0) as HTMLElement;\n\n        container.scrollBy({\n            left: distance,\n            top: 0,\n            behavior: \"instant\",\n        });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollHorizontally.bind(this), 40);\n    }\n\n    private scrollVertically() {\n        if (!this.verticalScrollDirection) {\n            return;\n        }\n\n        const distance = this.verticalScrollDirection === \"top\" ? -20 : 20;\n        const container = this.$container.get(0) as HTMLElement;\n\n        container.scrollBy({\n            left: 0,\n            top: distance,\n            behavior: \"instant\",\n        });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollVertically.bind(this), 40);\n    }\n\n    private getScrollParentTop() {\n        if (this.scrollParentTop == null) {\n            this.scrollParentTop = this.$container.offset()?.top || 0;\n        }\n\n        return this.scrollParentTop;\n    }\n\n    private getScrollParentBottom() {\n        if (this.scrollParentBottom == null) {\n            this.scrollParentBottom =\n                this.getScrollParentTop() +\n                (this.$container.innerHeight() ?? 0);\n        }\n\n        return this.scrollParentBottom;\n    }\n}\n","import type { ScrollParent } from \"./types\";\n\ntype HorizontalScrollDirection = \"left\" | \"right\";\ntype VerticalScrollDirection = \"bottom\" | \"top\";\n\nexport default class DocumentScrollParent implements ScrollParent {\n    private $element: JQuery<HTMLElement>;\n    private horizontalScrollDirection?: HorizontalScrollDirection;\n    private horizontalScrollTimeout?: number;\n    private refreshHitAreas: () => void;\n    private verticalScrollDirection?: VerticalScrollDirection;\n    private verticalScrollTimeout?: number;\n    private documentScrollHeight?: number;\n    private documentScrollWidth?: number;\n\n    constructor($element: JQuery<HTMLElement>, refreshHitAreas: () => void) {\n        this.$element = $element;\n        this.refreshHitAreas = refreshHitAreas;\n    }\n\n    public checkHorizontalScrolling(pageX: number): void {\n        const newHorizontalScrollDirection =\n            this.getNewHorizontalScrollDirection(pageX);\n\n        if (this.horizontalScrollDirection !== newHorizontalScrollDirection) {\n            this.horizontalScrollDirection = newHorizontalScrollDirection;\n\n            if (this.horizontalScrollTimeout != null) {\n                window.clearTimeout(this.horizontalScrollTimeout);\n            }\n\n            if (newHorizontalScrollDirection) {\n                this.horizontalScrollTimeout = window.setTimeout(\n                    this.scrollHorizontally.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public checkVerticalScrolling(pageY: number) {\n        const newVerticalScrollDirection =\n            this.getNewVerticalScrollDirection(pageY);\n\n        if (this.verticalScrollDirection !== newVerticalScrollDirection) {\n            this.verticalScrollDirection = newVerticalScrollDirection;\n\n            if (this.verticalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n                this.verticalScrollTimeout = undefined;\n            }\n\n            if (newVerticalScrollDirection) {\n                this.verticalScrollTimeout = window.setTimeout(\n                    this.scrollVertically.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public getScrollLeft(): number {\n        return document.documentElement.scrollLeft;\n    }\n\n    public scrollToY(top: number): void {\n        const offset = this.$element.offset();\n        const treeTop = offset ? offset.top : 0;\n\n        jQuery(document).scrollTop(top + treeTop);\n    }\n\n    public stopScrolling() {\n        this.horizontalScrollDirection = undefined;\n        this.verticalScrollDirection = undefined;\n        this.documentScrollHeight = undefined;\n        this.documentScrollWidth = undefined;\n    }\n\n    private getNewHorizontalScrollDirection(\n        pageX: number,\n    ): HorizontalScrollDirection | undefined {\n        const $document = jQuery(document);\n\n        const scrollLeft = $document.scrollLeft() || 0;\n        const windowWidth = jQuery(window).width() || 0;\n\n        const isNearRightEdge = pageX > windowWidth - 20;\n        const isNearLeftEdge = pageX - scrollLeft < 20;\n\n        if (isNearRightEdge && this.canScrollRight()) {\n            return \"right\";\n        }\n\n        if (isNearLeftEdge) {\n            return \"left\";\n        }\n\n        return undefined;\n    }\n\n    private canScrollRight() {\n        const documentElement = document.documentElement;\n\n        return (\n            documentElement.scrollLeft + documentElement.clientWidth <\n            this.getDocumentScrollWidth()\n        );\n    }\n\n    private canScrollDown() {\n        const documentElement = document.documentElement;\n\n        return (\n            documentElement.scrollTop + documentElement.clientHeight <\n            this.getDocumentScrollHeight()\n        );\n    }\n\n    private getDocumentScrollHeight() {\n        // Store the original scroll height because the scroll height can increase when the drag element is moved beyond the scroll height.\n        if (this.documentScrollHeight == null) {\n            this.documentScrollHeight = document.documentElement.scrollHeight;\n        }\n\n        return this.documentScrollHeight;\n    }\n\n    private getDocumentScrollWidth() {\n        // Store the original scroll width because the scroll width can increase when the drag element is moved beyond the scroll width.\n        if (this.documentScrollWidth == null) {\n            this.documentScrollWidth = document.documentElement.scrollWidth;\n        }\n\n        return this.documentScrollWidth;\n    }\n\n    private getNewVerticalScrollDirection(\n        pageY: number,\n    ): VerticalScrollDirection | undefined {\n        const scrollTop = jQuery(document).scrollTop() || 0;\n        const distanceTop = pageY - scrollTop;\n\n        if (distanceTop < 20) {\n            return \"top\";\n        }\n\n        const windowHeight = jQuery(window).height() || 0;\n\n        if (windowHeight - (pageY - scrollTop) < 20 && this.canScrollDown()) {\n            return \"bottom\";\n        }\n\n        return undefined;\n    }\n\n    private scrollHorizontally() {\n        if (!this.horizontalScrollDirection) {\n            return;\n        }\n\n        const distance = this.horizontalScrollDirection === \"left\" ? -20 : 20;\n        window.scrollBy({ left: distance, top: 0, behavior: \"instant\" });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollHorizontally.bind(this), 40);\n    }\n\n    private scrollVertically() {\n        if (!this.verticalScrollDirection) {\n            return;\n        }\n\n        const distance = this.verticalScrollDirection === \"top\" ? -20 : 20;\n        window.scrollBy({ left: 0, top: distance, behavior: \"instant\" });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollVertically.bind(this), 40);\n    }\n}\n","import type { ScrollParent } from \"./types\";\nimport ContainerScrollParent from \"./containerScrollParent\";\nimport DocumentScrollParent from \"./documentScrollParent\";\n\nconst hasOverFlow = ($element: JQuery<HTMLElement>): boolean => {\n    for (const attr of [\"overflow\", \"overflow-y\"]) {\n        const overflowValue = $element.css(attr);\n        if (overflowValue === \"auto\" || overflowValue === \"scroll\") {\n            return true;\n        }\n    }\n\n    return false;\n};\n\nconst getParentWithOverflow = (\n    $treeElement: JQuery<HTMLElement>,\n): JQuery<HTMLElement> | null => {\n    if (hasOverFlow($treeElement)) {\n        return $treeElement;\n    }\n\n    for (const element of $treeElement.parents().get()) {\n        const $element = jQuery(element);\n        if (hasOverFlow($element)) {\n            return $element;\n        }\n    }\n\n    return null;\n};\n\nconst createScrollParent = (\n    $treeElement: JQuery<HTMLElement>,\n    refreshHitAreas: () => void,\n): ScrollParent => {\n    const $container = getParentWithOverflow($treeElement);\n\n    if ($container?.length && $container[0]?.tagName !== \"HTML\") {\n        return new ContainerScrollParent({\n            $container,\n            refreshHitAreas,\n            $treeElement,\n        });\n    } else {\n        return new DocumentScrollParent($treeElement, refreshHitAreas);\n    }\n};\n\nexport default createScrollParent;\n","import { PositionInfo } from \"./mouseWidgetTypes\";\nimport { ScrollParent } from \"./scrollHandler/types\";\nimport createScrollParent from \"./scrollHandler/createScrollParent\";\n\ninterface ScrollHandlerParams {\n    refreshHitAreas: () => void;\n    $treeElement: JQuery<HTMLElement>;\n}\n\nexport default class ScrollHandler {\n    private refreshHitAreas: () => void;\n    private scrollParent?: ScrollParent;\n    private $treeElement: JQuery<HTMLElement>;\n\n    constructor({ refreshHitAreas, $treeElement }: ScrollHandlerParams) {\n        this.refreshHitAreas = refreshHitAreas;\n        this.scrollParent = undefined;\n        this.$treeElement = $treeElement;\n    }\n\n    public checkScrolling(positionInfo: PositionInfo): void {\n        this.checkVerticalScrolling(positionInfo);\n        this.checkHorizontalScrolling(positionInfo);\n    }\n\n    public stopScrolling() {\n        this.getScrollParent().stopScrolling();\n    }\n\n    public scrollToY(top: number): void {\n        this.getScrollParent().scrollToY(top);\n    }\n\n    public getScrollLeft(): number {\n        return this.getScrollParent().getScrollLeft();\n    }\n\n    private checkVerticalScrolling(positionInfo: PositionInfo): void {\n        if (positionInfo.pageY == null) {\n            return;\n        }\n\n        this.getScrollParent().checkVerticalScrolling(positionInfo.pageY);\n    }\n\n    private checkHorizontalScrolling(positionInfo: PositionInfo): void {\n        if (positionInfo.pageX == null) {\n            return;\n        }\n\n        this.getScrollParent().checkHorizontalScrolling(positionInfo.pageX);\n    }\n\n    private getScrollParent(): ScrollParent {\n        if (!this.scrollParent) {\n            this.scrollParent = createScrollParent(\n                this.$treeElement,\n                this.refreshHitAreas,\n            );\n        }\n\n        return this.scrollParent;\n    }\n}\n","import { Node } from \"./node\";\nimport { GetNodeById } from \"./jqtreeMethodTypes\";\n\ninterface SelectNodeHandlerParameters {\n    getNodeById: GetNodeById;\n}\n\nexport default class SelectNodeHandler {\n    private getNodeById: GetNodeById;\n    private selectedNodes: Set<NodeId>;\n    private selectedSingleNode: Node | null;\n\n    constructor({ getNodeById }: SelectNodeHandlerParameters) {\n        this.getNodeById = getNodeById;\n        this.selectedNodes = new Set<NodeId>();\n        this.clear();\n    }\n\n    public getSelectedNode(): Node | false {\n        const selectedNodes = this.getSelectedNodes();\n\n        if (selectedNodes.length) {\n            return selectedNodes[0] || false;\n        } else {\n            return false;\n        }\n    }\n\n    public getSelectedNodes(): Node[] {\n        if (this.selectedSingleNode) {\n            return [this.selectedSingleNode];\n        } else {\n            const selectedNodes: Node[] = [];\n\n            this.selectedNodes.forEach((id) => {\n                const node = this.getNodeById(id);\n                if (node) {\n                    selectedNodes.push(node);\n                }\n            });\n\n            return selectedNodes;\n        }\n    }\n\n    public getSelectedNodesUnder(parent: Node): Node[] {\n        if (this.selectedSingleNode) {\n            if (parent.isParentOf(this.selectedSingleNode)) {\n                return [this.selectedSingleNode];\n            } else {\n                return [];\n            }\n        } else {\n            const selectedNodes = [];\n\n            for (const id in this.selectedNodes) {\n                if (\n                    Object.prototype.hasOwnProperty.call(this.selectedNodes, id)\n                ) {\n                    const node = this.getNodeById(id);\n                    if (node && parent.isParentOf(node)) {\n                        selectedNodes.push(node);\n                    }\n                }\n            }\n\n            return selectedNodes;\n        }\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (node.id != null) {\n            return this.selectedNodes.has(node.id);\n        } else if (this.selectedSingleNode) {\n            return this.selectedSingleNode.element === node.element;\n        } else {\n            return false;\n        }\n    }\n\n    public clear(): void {\n        this.selectedNodes.clear();\n        this.selectedSingleNode = null;\n    }\n\n    public removeFromSelection(node: Node, includeChildren = false): void {\n        if (node.id == null) {\n            if (\n                this.selectedSingleNode &&\n                node.element === this.selectedSingleNode.element\n            ) {\n                this.selectedSingleNode = null;\n            }\n        } else {\n            this.selectedNodes.delete(node.id);\n\n            if (includeChildren) {\n                node.iterate(() => {\n                    if (node.id != null) {\n                        this.selectedNodes.delete(node.id);\n                    }\n                    return true;\n                });\n            }\n        }\n    }\n\n    public addToSelection(node: Node): void {\n        if (node.id != null) {\n            this.selectedNodes.add(node.id);\n        } else {\n            this.selectedSingleNode = node;\n        }\n    }\n}\n","interface NodeRecordWithChildren extends NodeRecord {\n    children: NodeData[];\n}\n\nexport const isNodeRecordWithChildren = (\n    data: NodeData,\n): data is NodeRecordWithChildren =>\n    typeof data === \"object\" &&\n    \"children\" in data &&\n    data[\"children\"] instanceof Array;\n","import { isNodeRecordWithChildren } from \"./nodeUtils\";\nimport { Position } from \"./position\";\n\ntype IterateCallback = (node: Node, level: number) => boolean;\n\nexport class Node implements INode {\n    public id?: NodeId;\n    public name: string;\n    public children: Node[];\n    public parent: Node | null;\n    public idMapping: Map<NodeId, Node>;\n    public tree?: Node;\n    public nodeClass?: typeof Node;\n    public load_on_demand: boolean;\n    public is_open: boolean;\n    public element: HTMLElement;\n    public is_loading: boolean;\n    public isEmptyFolder: boolean;\n\n    [key: string]: unknown;\n\n    constructor(\n        nodeData: NodeData | null = null,\n        isRoot = false,\n        nodeClass = Node,\n    ) {\n        this.name = \"\";\n        this.load_on_demand = false;\n\n        this.isEmptyFolder =\n            nodeData != null &&\n            isNodeRecordWithChildren(nodeData) &&\n            nodeData.children.length === 0;\n\n        this.setData(nodeData);\n\n        this.children = [];\n        this.parent = null;\n\n        if (isRoot) {\n            this.idMapping = new Map<NodeId, Node>();\n            this.tree = this;\n            this.nodeClass = nodeClass;\n        }\n    }\n\n    /*\n    Set the data of this node.\n\n    setData(string): set the name of the node\n    setData(object): set attributes of the node\n\n    Examples:\n        setData('node1')\n\n        setData({ name: 'node1', id: 1});\n\n        setData({ name: 'node2', id: 2, color: 'green'});\n\n    * This is an internal function; it is not in the docs\n    * Does not remove existing node values\n    */\n    public setData(o: NodeData | null): void {\n        if (!o) {\n            return;\n        } else if (typeof o === \"string\") {\n            this.name = o;\n        } else if (typeof o === \"object\") {\n            for (const key in o) {\n                if (Object.prototype.hasOwnProperty.call(o, key)) {\n                    const value = o[key];\n\n                    if (key === \"label\" || key === \"name\") {\n                        // You can use the 'label' key instead of 'name'; this is a legacy feature\n                        if (typeof value === \"string\") {\n                            this.name = value;\n                        }\n                    } else if (key !== \"children\" && key !== \"parent\") {\n                        // You can't update the children or the parent using this function\n                        this[key] = value;\n                    }\n                }\n            }\n        }\n    }\n\n    /*\n    Create tree from data.\n\n    Structure of data is:\n    [\n        {\n            name: 'node1',\n            children: [\n                { name: 'child1' },\n                { name: 'child2' }\n            ]\n        },\n        {\n            name: 'node2'\n        }\n    ]\n    */\n    public loadFromData(data: NodeData[]): Node {\n        this.removeChildren();\n\n        for (const childData of data) {\n            const node = this.createNode(childData);\n            this.addChild(node);\n\n            if (isNodeRecordWithChildren(childData)) {\n                node.loadFromData(childData.children);\n            }\n        }\n\n        return this;\n    }\n\n    /*\n    Add child.\n\n    tree.addChild(\n        new Node('child1')\n    );\n    */\n    public addChild(node: Node): void {\n        this.children.push(node);\n        node.setParent(this);\n    }\n\n    /*\n    Add child at position. Index starts at 0.\n\n    tree.addChildAtPosition(\n        new Node('abc'),\n        1\n    );\n    */\n    public addChildAtPosition(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        node.setParent(this);\n    }\n\n    /*\n    Remove child. This also removes the children of the node.\n\n    tree.removeChild(tree.children[0]);\n    */\n    public removeChild(node: Node): void {\n        // remove children from the index\n        node.removeChildren();\n\n        this.doRemoveChild(node);\n    }\n\n    /*\n    Get child index.\n\n    var index = getChildIndex(node);\n    */\n    public getChildIndex(node: Node): number {\n        return this.children.indexOf(node);\n    }\n\n    /*\n    Does the tree have children?\n\n    if (tree.hasChildren()) {\n        //\n    }\n    */\n    public hasChildren(): boolean {\n        return this.children.length !== 0;\n    }\n\n    public isFolder(): boolean {\n        return this.hasChildren() || this.load_on_demand;\n    }\n\n    /*\n    Iterate over all the nodes in the tree.\n\n    Calls callback with (node, level).\n\n    The callback must return true to continue the iteration on current node.\n\n    tree.iterate(\n        function(node, level) {\n           console.log(node.name);\n\n           // stop iteration after level 2\n           return (level <= 2);\n        }\n    );\n\n    */\n    public iterate(callback: IterateCallback): void {\n        const _iterate = (node: Node, level: number): void => {\n            if (node.children) {\n                for (const child of node.children) {\n                    const result = callback(child, level);\n\n                    if (result && child.hasChildren()) {\n                        _iterate(child, level + 1);\n                    }\n                }\n            }\n        };\n\n        _iterate(this, 0);\n    }\n\n    /*\n    Move node relative to another node.\n\n    Argument position: Position.BEFORE, Position.AFTER or Position.Inside\n\n    // move node1 after node2\n    tree.moveNode(node1, node2, Position.AFTER);\n    */\n    public moveNode(\n        movedNode: Node,\n        targetNode: Node,\n        position: Position,\n    ): boolean {\n        if (!movedNode.parent || movedNode.isParentOf(targetNode)) {\n            // - Node is parent of target node\n            // - Or, parent is empty\n            return false;\n        } else {\n            movedNode.parent.doRemoveChild(movedNode);\n\n            switch (position) {\n                case Position.After: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode) + 1,\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Before: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode),\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Inside: {\n                    // move inside as first child\n                    targetNode.addChildAtPosition(movedNode, 0);\n                    return true;\n                }\n\n                default:\n                    return false;\n            }\n        }\n    }\n\n    /*\n    Get the tree as data.\n    */\n    public getData(includeParent = false): NodeRecord[] {\n        const getDataFromNodes = (nodes: Node[]): Record<string, unknown>[] => {\n            return nodes.map((node) => {\n                const tmpNode: Record<string, unknown> = {};\n\n                for (const k in node) {\n                    if (\n                        [\n                            \"parent\",\n                            \"children\",\n                            \"element\",\n                            \"idMapping\",\n                            \"load_on_demand\",\n                            \"nodeClass\",\n                            \"tree\",\n                            \"isEmptyFolder\",\n                        ].indexOf(k) === -1 &&\n                        Object.prototype.hasOwnProperty.call(node, k)\n                    ) {\n                        const v = node[k];\n                        tmpNode[k] = v;\n                    }\n                }\n\n                if (node.hasChildren()) {\n                    tmpNode[\"children\"] = getDataFromNodes(node.children);\n                }\n\n                return tmpNode;\n            });\n        };\n\n        if (includeParent) {\n            return getDataFromNodes([this]);\n        } else {\n            return getDataFromNodes(this.children);\n        }\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.getNodeByCallback((node: Node) => node.name === name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        const node = this.getNodeByCallback((n: Node) => n.name === name);\n\n        if (!node) {\n            throw `Node with name ${name} not found`;\n        }\n\n        return node;\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        let result: Node | null = null;\n\n        this.iterate((node: Node) => {\n            if (result) {\n                return false;\n            } else if (callback(node)) {\n                result = node;\n                return false;\n            } else {\n                return true;\n            }\n        });\n\n        return result;\n    }\n\n    public addAfter(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex + 1);\n\n            node.loadChildrenFromData(nodeInfo);\n            return node;\n        }\n    }\n\n    public addBefore(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex);\n\n            node.loadChildrenFromData(nodeInfo);\n            return node;\n        }\n    }\n\n    public addParent(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const newParent = this.createNode(nodeInfo);\n\n            if (this.tree) {\n                newParent.setParent(this.tree);\n            }\n            const originalParent = this.parent;\n\n            for (const child of originalParent.children) {\n                newParent.addChild(child);\n            }\n\n            originalParent.children = [];\n            originalParent.addChild(newParent);\n            return newParent;\n        }\n    }\n\n    public remove(): void {\n        if (this.parent) {\n            this.parent.removeChild(this);\n            this.parent = null;\n        }\n    }\n\n    public append(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChild(node);\n\n        node.loadChildrenFromData(nodeInfo);\n        return node;\n    }\n\n    public prepend(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChildAtPosition(node, 0);\n\n        node.loadChildrenFromData(nodeInfo);\n        return node;\n    }\n\n    public isParentOf(node: Node): boolean {\n        let parent = node.parent;\n\n        while (parent) {\n            if (parent === this) {\n                return true;\n            }\n\n            parent = parent.parent;\n        }\n\n        return false;\n    }\n\n    public getLevel(): number {\n        let level = 0;\n        let node: Node = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n        while (node.parent) {\n            level += 1;\n            node = node.parent;\n        }\n\n        return level;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.idMapping.get(nodeId) || null;\n    }\n\n    public addNodeToIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.set(node.id, node);\n        }\n    }\n\n    public removeNodeFromIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.delete(node.id);\n        }\n    }\n\n    public removeChildren(): void {\n        this.iterate((child: Node) => {\n            this.tree?.removeNodeFromIndex(child);\n            return true;\n        });\n\n        this.children = [];\n    }\n\n    public getPreviousSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousIndex = this.parent.getChildIndex(this) - 1;\n            if (previousIndex >= 0) {\n                return this.parent.children[previousIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNextSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const nextIndex = this.parent.getChildIndex(this) + 1;\n            if (nextIndex < this.parent.children.length) {\n                return this.parent.children[nextIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.filter((node: Node) => node[key] === value);\n    }\n\n    public filter(f: (node: Node) => boolean): Node[] {\n        const result: Node[] = [];\n\n        this.iterate((node: Node) => {\n            if (f(node)) {\n                result.push(node);\n            }\n\n            return true;\n        });\n\n        return result;\n    }\n\n    public getNextNode(includeChildren = true): Node | null {\n        if (includeChildren && this.hasChildren()) {\n            return this.children[0] || null;\n        } else if (!this.parent) {\n            return null;\n        } else {\n            const nextSibling = this.getNextSibling();\n\n            if (nextSibling) {\n                return nextSibling;\n            } else {\n                return this.parent.getNextNode(false);\n            }\n        }\n    }\n\n    public getNextVisibleNode(): Node | null {\n        if (this.hasChildren() && this.is_open) {\n            // First child\n            return this.children[0] || null;\n        } else {\n            if (!this.parent) {\n                return null;\n            } else {\n                const nextSibling = this.getNextSibling();\n                if (nextSibling) {\n                    // Next sibling\n                    return nextSibling;\n                } else {\n                    // Next node of parent\n                    return this.parent.getNextNode(false);\n                }\n            }\n        }\n    }\n\n    public getPreviousNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (previousSibling.hasChildren()) {\n                return previousSibling.getLastChild();\n            } else {\n                return previousSibling;\n            }\n        }\n    }\n\n    public getPreviousVisibleNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (\n                !previousSibling.hasChildren() ||\n                !previousSibling.is_open\n            ) {\n                // Previous sibling\n                return previousSibling;\n            } else {\n                // Last child of previous sibling\n                return previousSibling.getLastChild();\n            }\n        }\n    }\n\n    public getParent(): Node | null {\n        // Return parent except if it is the root node\n        if (!this.parent) {\n            return null;\n        } else if (!this.parent.parent) {\n            // Root node -> null\n            return null;\n        } else {\n            return this.parent;\n        }\n    }\n\n    public getLastChild(): Node | null {\n        if (!this.hasChildren()) {\n            return null;\n        } else {\n            const lastChild = this.children[this.children.length - 1];\n\n            if (!lastChild) {\n                return null;\n            }\n\n            if (!(lastChild.hasChildren() && lastChild.is_open)) {\n                return lastChild;\n            } else {\n                return lastChild?.getLastChild();\n            }\n        }\n    }\n\n    // Init Node from data without making it the root of the tree\n    public initFromData(data: NodeData): void {\n        const addNode = (nodeData: NodeData): void => {\n            this.setData(nodeData);\n\n            if (\n                isNodeRecordWithChildren(nodeData) &&\n                nodeData.children.length\n            ) {\n                addChildren(nodeData.children);\n            }\n        };\n\n        const addChildren = (childrenData: NodeData[]): void => {\n            for (const child of childrenData) {\n                const node = this.createNode();\n                node.initFromData(child);\n                this.addChild(node);\n            }\n        };\n\n        addNode(data);\n    }\n\n    private setParent(parent: Node): void {\n        this.parent = parent;\n        this.tree = parent.tree;\n        this.tree?.addNodeToIndex(this);\n    }\n\n    private doRemoveChild(node: Node): void {\n        this.children.splice(this.getChildIndex(node), 1);\n        this.tree?.removeNodeFromIndex(node);\n    }\n\n    private getNodeClass(): typeof Node {\n        return this.nodeClass || this?.tree?.nodeClass || Node;\n    }\n\n    private createNode(nodeData?: NodeData): Node {\n        const nodeClass = this.getNodeClass();\n        return new nodeClass(nodeData);\n    }\n\n    // Load children data from nodeInfo if it has children\n    private loadChildrenFromData(nodeInfo: NodeData) {\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            this.loadFromData(nodeInfo.children);\n        }\n    }\n}\n","import { DropHint } from \"../dragAndDropHandler/types\";\n\nclass BorderDropHint implements DropHint {\n    private hint?: HTMLElement;\n\n    constructor(element: HTMLElement, scrollLeft: number) {\n        const div = element.querySelector(\":scope > .jqtree-element\");\n\n        if (!div) {\n            this.hint = undefined;\n            return;\n        }\n\n        const width = Math.max(element.offsetWidth + scrollLeft - 4, 0);\n        const height = Math.max(element.clientHeight - 4, 0);\n\n        const hint = document.createElement(\"span\");\n        hint.className = \"jqtree-border\";\n        hint.style.width = `${width}px`;\n        hint.style.height = `${height}px`;\n\n        this.hint = hint;\n\n        div.append(this.hint);\n    }\n\n    public remove(): void {\n        this.hint?.remove();\n    }\n}\n\nexport default BorderDropHint;\n","import { Node } from \"../node\";\nimport { Position } from \"../position\";\nimport { DropHint } from \"../dragAndDropHandler/types\";\n\nclass GhostDropHint implements DropHint {\n    private element: HTMLElement;\n    private node: Node;\n    private ghost: HTMLElement;\n\n    constructor(node: Node, element: HTMLElement, position: Position) {\n        this.element = element;\n        this.node = node;\n        this.ghost = this.createGhostElement();\n\n        if (position === Position.After) {\n            this.moveAfter();\n        } else if (position === Position.Before) {\n            this.moveBefore();\n        } else if (position === Position.Inside) {\n            if (node.isFolder() && node.is_open) {\n                this.moveInsideOpenFolder();\n            } else {\n                this.moveInside();\n            }\n        }\n    }\n\n    public remove(): void {\n        this.ghost.remove();\n    }\n\n    private moveAfter(): void {\n        this.element.after(this.ghost);\n    }\n\n    private moveBefore(): void {\n        this.element.before(this.ghost);\n    }\n\n    private moveInsideOpenFolder(): void {\n        const childElement = this.node.children[0]?.element;\n\n        if (childElement) {\n            childElement.before(this.ghost);\n        }\n    }\n\n    private moveInside(): void {\n        this.element.after(this.ghost);\n        this.ghost.classList.add(\"jqtree-inside\");\n    }\n\n    private createGhostElement() {\n        const ghost = document.createElement(\"li\");\n        ghost.className = \"jqtree_common jqtree-ghost\";\n\n        const circleSpan = document.createElement(\"span\");\n        circleSpan.className = \"jqtree_common jqtree-circle\";\n        ghost.append(circleSpan);\n\n        const lineSpan = document.createElement(\"span\");\n        lineSpan.className = \"jqtree_common jqtree-line\";\n        ghost.append(lineSpan);\n\n        return ghost;\n    }\n}\n\nexport default GhostDropHint;\n","import { Node } from \"../node\";\nimport { Position } from \"../position\";\nimport { DropHint } from \"../dragAndDropHandler/types\";\nimport BorderDropHint from \"./borderDropHint\";\nimport GhostDropHint from \"./ghostDropHint\";\nimport { GetScrollLeft } from \"../jqtreeMethodTypes\";\n\nexport interface NodeElementParams {\n    getScrollLeft: GetScrollLeft;\n    node: Node;\n    tabIndex?: number;\n    $treeElement: JQuery<HTMLElement>;\n}\n\nclass NodeElement {\n    public node: Node;\n    public element: HTMLElement;\n    private getScrollLeft: GetScrollLeft;\n    private tabIndex?: number;\n    private $treeElement: JQuery<HTMLElement>;\n\n    constructor({\n        getScrollLeft,\n        node,\n        tabIndex,\n        $treeElement,\n    }: NodeElementParams) {\n        this.getScrollLeft = getScrollLeft;\n        this.tabIndex = tabIndex;\n        this.$treeElement = $treeElement;\n\n        this.init(node);\n    }\n\n    public init(node: Node): void {\n        this.node = node;\n\n        if (!node.element) {\n            const element = this.$treeElement.get(0);\n\n            if (element) {\n                node.element = element;\n            }\n        }\n\n        if (node.element) {\n            this.element = node.element;\n        }\n    }\n\n    public addDropHint(position: number): DropHint {\n        if (this.mustShowBorderDropHint(position)) {\n            return new BorderDropHint(this.element, this.getScrollLeft());\n        } else {\n            return new GhostDropHint(this.node, this.element, position);\n        }\n    }\n\n    public select(mustSetFocus: boolean): void {\n        this.element.classList.add(\"jqtree-selected\");\n\n        const titleSpan = this.getTitleSpan();\n        const tabIndex = this.tabIndex;\n\n        // Check for null or undefined\n        if (tabIndex != null) {\n            titleSpan.setAttribute(\"tabindex\", tabIndex.toString());\n        }\n\n        titleSpan.setAttribute(\"aria-selected\", \"true\");\n\n        if (mustSetFocus) {\n            titleSpan.focus();\n        }\n    }\n\n    public deselect(): void {\n        this.element.classList.remove(\"jqtree-selected\");\n\n        const titleSpan = this.getTitleSpan();\n        titleSpan.removeAttribute(\"tabindex\");\n        titleSpan.setAttribute(\"aria-selected\", \"false\");\n\n        titleSpan.blur();\n    }\n\n    protected getUl(): HTMLUListElement {\n        return this.element.querySelector(\":scope > ul\") as HTMLUListElement;\n    }\n\n    protected getTitleSpan(): HTMLSpanElement {\n        return this.element.querySelector(\n            \":scope > .jqtree-element > span.jqtree-title\",\n        ) as HTMLSpanElement;\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return position === Position.Inside;\n    }\n}\n\nexport default NodeElement;\n","import { Position } from \"../position\";\nimport NodeElement, { NodeElementParams } from \"./index\";\nimport { OnFinishOpenNode, TriggerEvent } from \"../jqtreeMethodTypes\";\n\ninterface FolderElementParams extends NodeElementParams {\n    closedIconElement?: HTMLElement | Text;\n    openedIconElement?: HTMLElement | Text;\n    triggerEvent: TriggerEvent;\n}\n\nclass FolderElement extends NodeElement {\n    private closedIconElement?: HTMLElement | Text;\n    private openedIconElement?: HTMLElement | Text;\n    private triggerEvent: TriggerEvent;\n\n    constructor({\n        closedIconElement,\n        getScrollLeft,\n        node,\n        openedIconElement,\n        tabIndex,\n        $treeElement,\n        triggerEvent,\n    }: FolderElementParams) {\n        super({\n            getScrollLeft,\n            node,\n            tabIndex,\n            $treeElement,\n        });\n\n        this.closedIconElement = closedIconElement;\n        this.openedIconElement = openedIconElement;\n        this.triggerEvent = triggerEvent;\n    }\n\n    public open(\n        onFinished: OnFinishOpenNode | undefined,\n        slide = true,\n        animationSpeed: JQuery.Duration = \"fast\",\n    ): void {\n        if (this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = true;\n\n        const button = this.getButton();\n        button.classList.remove(\"jqtree-closed\");\n        button.innerHTML = \"\";\n\n        const openedIconElement = this.openedIconElement;\n\n        if (openedIconElement) {\n            const icon = openedIconElement.cloneNode(true);\n            button.appendChild(icon);\n        }\n\n        const doOpen = (): void => {\n            this.element.classList.remove(\"jqtree-closed\");\n\n            const titleSpan = this.getTitleSpan();\n            titleSpan.setAttribute(\"aria-expanded\", \"true\");\n\n            if (onFinished) {\n                onFinished(this.node);\n            }\n\n            this.triggerEvent(\"tree.open\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            jQuery(this.getUl()).slideDown(animationSpeed, doOpen);\n        } else {\n            jQuery(this.getUl()).show();\n            doOpen();\n        }\n    }\n\n    public close(\n        slide = true,\n        animationSpeed: JQuery.Duration | undefined = \"fast\",\n    ): void {\n        if (!this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = false;\n\n        const button = this.getButton();\n        button.classList.add(\"jqtree-closed\");\n        button.innerHTML = \"\";\n\n        const closedIconElement = this.closedIconElement;\n\n        if (closedIconElement) {\n            const icon = closedIconElement.cloneNode(true);\n            button.appendChild(icon);\n        }\n\n        const doClose = (): void => {\n            this.element.classList.add(\"jqtree-closed\");\n\n            const titleSpan = this.getTitleSpan();\n            titleSpan.setAttribute(\"aria-expanded\", \"false\");\n\n            this.triggerEvent(\"tree.close\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            jQuery(this.getUl()).slideUp(animationSpeed, doClose);\n        } else {\n            jQuery(this.getUl()).hide();\n            doClose();\n        }\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return !this.node.is_open && position === Position.Inside;\n    }\n\n    private getButton(): HTMLLinkElement {\n        return this.element.querySelector(\n            \":scope > .jqtree-element > a.jqtree-toggler\",\n        ) as HTMLLinkElement;\n    }\n}\n\nexport default FolderElement;\n","import __version__ from \"./version\";\nimport { DragAndDropHandler } from \"./dragAndDropHandler\";\nimport ElementsRenderer from \"./elementsRenderer\";\nimport DataLoader, { HandleFinishedLoading } from \"./dataLoader\";\nimport KeyHandler from \"./keyHandler\";\nimport MouseWidget from \"./mouse.widget\";\nimport { PositionInfo } from \"./mouseWidgetTypes\";\nimport SaveStateHandler, { SavedState } from \"./saveStateHandler\";\nimport ScrollHandler from \"./scrollHandler\";\nimport SelectNodeHandler from \"./selectNodeHandler\";\nimport SimpleWidget from \"./simple.widget\";\nimport { Node } from \"./node\";\nimport { getPosition } from \"./position\";\nimport { isFunction } from \"./util\";\nimport NodeElement from \"./nodeElement\";\nimport FolderElement from \"./nodeElement/folderElement\";\nimport { OnFinishOpenNode } from \"./jqtreeMethodTypes\";\nimport { JQTreeOptions } from \"./jqtreeOptions\";\n\ninterface ClickTarget {\n    node: Node;\n    type: \"button\" | \"label\";\n}\n\ninterface SelectNodeOptions {\n    mustToggle?: boolean;\n    mustSetFocus?: boolean;\n}\n\nconst NODE_PARAM_IS_EMPTY = \"Node parameter is empty\";\nconst PARAM_IS_EMPTY = \"Parameter is empty: \";\n\nexport class JqTreeWidget extends MouseWidget<JQTreeOptions> {\n    protected static defaults: JQTreeOptions = {\n        animationSpeed: \"fast\",\n        autoEscape: true,\n        autoOpen: false, // true / false / int (open n levels starting at 0)\n        buttonLeft: true,\n        // The symbol to use for a closed node - ► BLACK RIGHT-POINTING POINTER\n        // http://www.fileformat.info/info/unicode/char/25ba/index.htm\n        closedIcon: undefined,\n        data: undefined,\n        dataFilter: undefined,\n        dataUrl: undefined,\n        dragAndDrop: false,\n        keyboardSupport: true,\n        nodeClass: Node,\n        onCanMove: undefined, // Can this node be moved?\n        onCanMoveTo: undefined, // Can this node be moved to this position? function(moved_node, target_node, position)\n        onCanSelectNode: undefined,\n        onCreateLi: undefined,\n        onDragMove: undefined,\n        onDragStop: undefined,\n        onGetStateFromStorage: undefined,\n        onIsMoveHandle: undefined,\n        onLoadFailed: undefined,\n        onLoading: undefined,\n        onSetStateFromStorage: undefined,\n        openedIcon: \"&#x25bc;\",\n        openFolderDelay: 500, // The delay for opening a folder during drag and drop; the value is in milliseconds\n        // The symbol to use for an open node - ▼ BLACK DOWN-POINTING TRIANGLE\n        // http://www.fileformat.info/info/unicode/char/25bc/index.htm\n        rtl: undefined, // right-to-left support; true / false (default)\n        saveState: false, // true / false / string (cookie name)\n        selectable: true,\n        showEmptyFolder: false,\n        slide: true, // must display slide animation?\n        startDndDelay: 300, // The delay for starting dnd (in milliseconds)\n        tabIndex: 0,\n        useContextMenu: true,\n    };\n\n    public element: JQuery;\n    public tree: Node;\n    public dndHandler: DragAndDropHandler;\n    public renderer: ElementsRenderer;\n    public dataLoader: DataLoader;\n    public scrollHandler: ScrollHandler;\n    public selectNodeHandler: SelectNodeHandler;\n\n    private isInitialized: boolean;\n    private saveStateHandler: SaveStateHandler;\n    private keyHandler: KeyHandler;\n\n    public toggle(node: Node, slideParam: null | boolean = null): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.is_open) {\n            this.closeNode(node, slide);\n        } else {\n            this.openNode(node, slide);\n        }\n\n        return this.element;\n    }\n\n    public getTree(): Node {\n        return this.tree;\n    }\n\n    public selectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): JQuery {\n        this.doSelectNode(node, optionsParam);\n        return this.element;\n    }\n\n    public getSelectedNode(): Node | false {\n        return this.selectNodeHandler.getSelectedNode();\n    }\n\n    public toJson(): string {\n        return JSON.stringify(this.tree.getData());\n    }\n\n    public loadData(data: NodeData[], parentNode: Node | null): JQuery {\n        this.doLoadData(data, parentNode);\n        return this.element;\n    }\n\n    /*\n    signatures:\n    - loadDataFromUrl(url, parent_node=null, on_finished=null)\n        loadDataFromUrl('/my_data');\n        loadDataFromUrl('/my_data', node1);\n        loadDataFromUrl('/my_data', node1, function() { console.log('finished'); });\n        loadDataFromUrl('/my_data', null, function() { console.log('finished'); });\n\n    - loadDataFromUrl(parent_node=null, on_finished=null)\n        loadDataFromUrl();\n        loadDataFromUrl(node1);\n        loadDataFromUrl(null, function() { console.log('finished'); });\n        loadDataFromUrl(node1, function() { console.log('finished'); });\n    */\n    public loadDataFromUrl(\n        param1: string | null | Node,\n        param2?: Node | null | HandleFinishedLoading,\n        param3?: HandleFinishedLoading,\n    ): JQuery {\n        if (typeof param1 === \"string\") {\n            // first parameter is url\n            this.doLoadDataFromUrl(\n                param1,\n                param2 as Node | null,\n                param3 ?? null,\n            );\n        } else {\n            // first parameter is not url\n            this.doLoadDataFromUrl(\n                null,\n                param1,\n                param2 as HandleFinishedLoading | null,\n            );\n        }\n\n        return this.element;\n    }\n\n    public reload(onFinished: HandleFinishedLoading | null): JQuery {\n        this.doLoadDataFromUrl(null, null, onFinished);\n        return this.element;\n    }\n\n    public refresh(): JQuery {\n        this._refreshElements(null);\n        return this.element;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.tree.getNodeById(nodeId);\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.tree.getNodeByName(name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        return this.tree.getNodeByNameMustExist(name);\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.tree.getNodesByProperty(key, value);\n    }\n\n    public getNodeByHtmlElement(\n        inputElement: HTMLElement | JQuery<HTMLElement>,\n    ): Node | null {\n        const element =\n            inputElement instanceof HTMLElement\n                ? inputElement\n                : inputElement[0];\n\n        if (!element) {\n            return null;\n        }\n\n        return this.getNode(element);\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        return this.tree.getNodeByCallback(callback);\n    }\n\n    public openNode(\n        node: Node,\n        param1?: boolean | OnFinishOpenNode,\n        param2?: OnFinishOpenNode,\n    ): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const parseParams = (): [boolean, OnFinishOpenNode | undefined] => {\n            let onFinished: OnFinishOpenNode | null;\n            let slide: boolean | null;\n\n            if (isFunction(param1)) {\n                onFinished = param1 as OnFinishOpenNode;\n                slide = null;\n            } else {\n                slide = param1 as boolean;\n                onFinished = param2 as OnFinishOpenNode;\n            }\n\n            if (slide == null) {\n                slide = this.options.slide ?? false;\n            }\n\n            return [slide, onFinished];\n        };\n\n        const [slide, onFinished] = parseParams();\n\n        this._openNode(node, slide, onFinished);\n        return this.element;\n    }\n\n    public closeNode(node: Node, slideParam?: null | boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            this.createFolderElement(node).close(\n                slide,\n                this.options.animationSpeed,\n            );\n\n            this.saveState();\n        }\n\n        return this.element;\n    }\n\n    public isDragging(): boolean {\n        return this.dndHandler.isDragging;\n    }\n\n    public refreshHitAreas(): JQuery {\n        this.dndHandler.refresh();\n        return this.element;\n    }\n\n    public addNodeAfter(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        const newNode = existingNode.addAfter(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addNodeBefore(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addBefore(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addParentNode(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addParent(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(newNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public removeNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!node.parent) {\n            throw Error(\"Node has no parent\");\n        }\n\n        this.selectNodeHandler.removeFromSelection(node, true); // including children\n\n        const parent = node.parent;\n        node.remove();\n        this._refreshElements(parent);\n\n        return this.element;\n    }\n\n    public appendNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam || this.tree;\n\n        const node = parentNode.append(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public prependNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam ?? this.tree;\n\n        const node = parentNode.prepend(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public updateNode(node: Node, data: NodeData): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const idIsChanged =\n            typeof data === \"object\" && data.id && data.id !== node.id;\n\n        if (idIsChanged) {\n            this.tree.removeNodeFromIndex(node);\n        }\n\n        node.setData(data);\n\n        if (idIsChanged) {\n            this.tree.addNodeToIndex(node);\n        }\n\n        if (\n            typeof data === \"object\" &&\n            data[\"children\"] &&\n            data[\"children\"] instanceof Array\n        ) {\n            node.removeChildren();\n\n            if (data.children.length) {\n                node.loadFromData(data.children as Node[]);\n            }\n        }\n\n        this._refreshElements(node);\n\n        return this.element;\n    }\n\n    private isSelectedNodeInSubtree(subtree: Node): boolean {\n        const selectedNode = this.getSelectedNode();\n\n        if (!selectedNode) {\n            return false;\n        } else {\n            return subtree === selectedNode || subtree.isParentOf(selectedNode);\n        }\n    }\n\n    public moveNode(node: Node, targetNode: Node, position: string): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!targetNode) {\n            throw Error(PARAM_IS_EMPTY + \"targetNode\");\n        }\n\n        const positionIndex = getPosition(position);\n\n        if (positionIndex !== undefined) {\n            this.tree.moveNode(node, targetNode, positionIndex);\n            this._refreshElements(null);\n        }\n\n        return this.element;\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        return this.saveStateHandler.getStateFromStorage();\n    }\n\n    public addToSelection(node: Node, mustSetFocus?: boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.addToSelection(node);\n        this.openParents(node);\n\n        this._getNodeElementForNode(node).select(\n            mustSetFocus === undefined ? true : mustSetFocus,\n        );\n\n        this.saveState();\n\n        return this.element;\n    }\n\n    public getSelectedNodes(): Node[] {\n        return this.selectNodeHandler.getSelectedNodes();\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        return this.selectNodeHandler.isNodeSelected(node);\n    }\n\n    public removeFromSelection(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.removeFromSelection(node);\n\n        this._getNodeElementForNode(node).deselect();\n        this.saveState();\n\n        return this.element;\n    }\n\n    public scrollToNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const nodeTop = jQuery(node.element).offset()?.top ?? 0;\n        const treeTop = this.$el.offset()?.top ?? 0;\n        const top = nodeTop - treeTop;\n\n        this.scrollHandler.scrollToY(top);\n\n        return this.element;\n    }\n\n    public getState(): SavedState | null {\n        return this.saveStateHandler.getState();\n    }\n\n    public setState(state: SavedState): JQuery {\n        this.saveStateHandler.setInitialState(state);\n        this._refreshElements(null);\n\n        return this.element;\n    }\n\n    public setOption(option: string, value: unknown): JQuery {\n        (this.options as unknown as Record<string, unknown>)[option] = value;\n        return this.element;\n    }\n\n    public moveDown(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveDown(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public moveUp(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveUp(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public getVersion(): string {\n        return __version__;\n    }\n\n    public _triggerEvent(\n        eventName: string,\n        values?: Record<string, unknown>,\n    ): JQuery.Event {\n        const event = jQuery.Event(eventName, values);\n        this.element.trigger(event);\n        return event;\n    }\n\n    public _openNode(\n        node: Node,\n        slide = true,\n        onFinished?: OnFinishOpenNode,\n    ): void {\n        const doOpenNode = (\n            _node: Node,\n            _slide: boolean,\n            _onFinished?: OnFinishOpenNode,\n        ): void => {\n            const folderElement = this.createFolderElement(_node);\n            folderElement.open(\n                _onFinished,\n                _slide,\n                this.options.animationSpeed,\n            );\n        };\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            if (node.load_on_demand) {\n                this.loadFolderOnDemand(node, slide, onFinished);\n            } else {\n                let parent = node.parent;\n\n                while (parent) {\n                    // nb: do not open root element\n                    if (parent.parent) {\n                        doOpenNode(parent, false);\n                    }\n                    parent = parent.parent;\n                }\n\n                doOpenNode(node, slide, onFinished);\n                this.saveState();\n            }\n        }\n    }\n\n    /*\n    Redraw the tree or part of the tree.\n     from_node: redraw this subtree\n    */\n    public _refreshElements(fromNode: Node | null): void {\n        const mustSetFocus = this.isFocusOnTree();\n        const mustSelect = fromNode\n            ? this.isSelectedNodeInSubtree(fromNode)\n            : false;\n\n        this.renderer.render(fromNode);\n\n        if (mustSelect) {\n            this.selectCurrentNode(mustSetFocus);\n        }\n\n        this._triggerEvent(\"tree.refresh\");\n    }\n\n    public _getNodeElementForNode(node: Node): NodeElement {\n        if (node.isFolder()) {\n            return this.createFolderElement(node);\n        } else {\n            return this.createNodeElement(node);\n        }\n    }\n\n    public _getNodeElement(element: HTMLElement): NodeElement | null {\n        const node = this.getNode(element);\n        if (node) {\n            return this._getNodeElementForNode(node);\n        } else {\n            return null;\n        }\n    }\n\n    public _getScrollLeft(): number {\n        return this.scrollHandler.getScrollLeft();\n    }\n\n    public init(): void {\n        super.init();\n\n        this.element = this.$el;\n        this.isInitialized = false;\n\n        this.options.rtl = this.getRtlOption();\n\n        if (this.options.closedIcon == null) {\n            this.options.closedIcon = this.getDefaultClosedIcon();\n        }\n\n        this.connectHandlers();\n\n        this.initData();\n\n        this.element.on(\"click\", this.handleClick);\n        this.element.on(\"dblclick\", this.handleDblclick);\n\n        if (this.options.useContextMenu) {\n            this.element.on(\"contextmenu\", this.handleContextmenu);\n        }\n    }\n\n    public deinit(): void {\n        this.element.empty();\n        this.element.off();\n\n        this.keyHandler.deinit();\n\n        this.tree = new Node({}, true);\n\n        super.deinit();\n    }\n\n    protected mouseCapture(positionInfo: PositionInfo): boolean | null {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseCapture(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStart(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStart(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseDrag(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            const result = this.dndHandler.mouseDrag(positionInfo);\n\n            this.scrollHandler.checkScrolling(positionInfo);\n            return result;\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStop(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            this.scrollHandler.stopScrolling();\n            return this.dndHandler.mouseStop(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected getMouseDelay(): number {\n        return this.options.startDndDelay ?? 0;\n    }\n\n    private initData(): void {\n        if (this.options.data) {\n            this.doLoadData(this.options.data, null);\n        } else {\n            const dataUrl = this.getDataUrlInfo(null);\n\n            if (dataUrl) {\n                this.doLoadDataFromUrl(null, null, null);\n            } else {\n                this.doLoadData([], null);\n            }\n        }\n    }\n\n    private getDataUrlInfo(node: Node | null): JQuery.AjaxSettings | null {\n        const dataUrl =\n            this.options.dataUrl || (this.element.data(\"url\") as string | null);\n\n        const getUrlFromString = (url: string): JQuery.AjaxSettings => {\n            const urlInfo: JQuery.AjaxSettings = { url };\n\n            setUrlInfoData(urlInfo);\n\n            return urlInfo;\n        };\n\n        const setUrlInfoData = (urlInfo: JQuery.AjaxSettings): void => {\n            if (node?.id) {\n                // Load on demand of a subtree; add node parameter\n                const data = { node: node.id };\n                urlInfo[\"data\"] = data;\n            } else {\n                // Add selected_node parameter\n                const selectedNodeId = this.getNodeIdToBeSelected();\n                if (selectedNodeId) {\n                    const data = { selected_node: selectedNodeId };\n                    urlInfo[\"data\"] = data;\n                }\n            }\n        };\n\n        if (typeof dataUrl === \"function\") {\n            return dataUrl(node);\n        } else if (typeof dataUrl === \"string\") {\n            return getUrlFromString(dataUrl);\n        } else if (dataUrl && typeof dataUrl === \"object\") {\n            setUrlInfoData(dataUrl);\n            return dataUrl;\n        } else {\n            return null;\n        }\n    }\n\n    private getNodeIdToBeSelected(): NodeId | null {\n        if (this.options.saveState) {\n            return this.saveStateHandler.getNodeIdToBeSelected();\n        } else {\n            return null;\n        }\n    }\n\n    private initTree(data: NodeData[]): void {\n        const doInit = (): void => {\n            if (!this.isInitialized) {\n                this.isInitialized = true;\n                this._triggerEvent(\"tree.init\");\n            }\n        };\n\n        if (!this.options.nodeClass) {\n            return;\n        }\n\n        this.tree = new this.options.nodeClass(\n            null,\n            true,\n            this.options.nodeClass,\n        );\n\n        this.selectNodeHandler.clear();\n\n        this.tree.loadFromData(data);\n\n        const mustLoadOnDemand = this.setInitialState();\n\n        this._refreshElements(null);\n\n        if (!mustLoadOnDemand) {\n            doInit();\n        } else {\n            // Load data on demand and then init the tree\n            this.setInitialStateOnDemand(doInit);\n        }\n    }\n\n    // Set initial state, either by restoring the state or auto-opening nodes\n    // result: must load nodes on demand?\n    private setInitialState(): boolean {\n        const restoreState = (): [boolean, boolean] => {\n            // result: is state restored, must load on demand?\n            if (!this.options.saveState) {\n                return [false, false];\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return [false, false];\n                } else {\n                    const mustLoadOnDemand =\n                        this.saveStateHandler.setInitialState(state);\n\n                    // return true: the state is restored\n                    return [true, mustLoadOnDemand];\n                }\n            }\n        };\n\n        const autoOpenNodes = (): boolean => {\n            // result: must load on demand?\n            if (this.options.autoOpen === false) {\n                return false;\n            }\n\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let mustLoadOnDemand = false;\n\n            this.tree.iterate((node: Node, level: number) => {\n                if (node.load_on_demand) {\n                    mustLoadOnDemand = true;\n                    return false;\n                } else if (!node.hasChildren()) {\n                    return false;\n                } else {\n                    node.is_open = true;\n                    return level !== maxLevel;\n                }\n            });\n\n            return mustLoadOnDemand;\n        };\n\n        let [isRestored, mustLoadOnDemand] = restoreState(); // eslint-disable-line prefer-const\n\n        if (!isRestored) {\n            mustLoadOnDemand = autoOpenNodes();\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    // Set the initial state for nodes that are loaded on demand\n    // Call cb_finished when done\n    private setInitialStateOnDemand(cbFinished: () => void): void {\n        const restoreState = (): boolean => {\n            if (!this.options.saveState) {\n                return false;\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return false;\n                } else {\n                    this.saveStateHandler.setInitialStateOnDemand(\n                        state,\n                        cbFinished,\n                    );\n\n                    return true;\n                }\n            }\n        };\n\n        const autoOpenNodes = (): void => {\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let loadingCount = 0;\n\n            const loadAndOpenNode = (node: Node): void => {\n                loadingCount += 1;\n                this._openNode(node, false, () => {\n                    loadingCount -= 1;\n                    openNodes();\n                });\n            };\n\n            const openNodes = (): void => {\n                this.tree.iterate((node: Node, level: number) => {\n                    if (node.load_on_demand) {\n                        if (!node.is_loading) {\n                            loadAndOpenNode(node);\n                        }\n\n                        return false;\n                    } else {\n                        this._openNode(node, false);\n\n                        return level !== maxLevel;\n                    }\n                });\n\n                if (loadingCount === 0) {\n                    cbFinished();\n                }\n            };\n\n            openNodes();\n        };\n\n        if (!restoreState()) {\n            autoOpenNodes();\n        }\n    }\n\n    private getAutoOpenMaxLevel(): number {\n        if (this.options.autoOpen === true) {\n            return -1;\n        } else if (typeof this.options.autoOpen === \"number\") {\n            return this.options.autoOpen;\n        } else if (typeof this.options.autoOpen === \"string\") {\n            return parseInt(this.options.autoOpen, 10);\n        } else {\n            return 0;\n        }\n    }\n\n    private handleClick = (\n        e: JQuery.ClickEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget) {\n            if (clickTarget.type === \"button\") {\n                this.toggle(clickTarget.node, this.options.slide);\n\n                e.preventDefault();\n                e.stopPropagation();\n            } else if (clickTarget.type === \"label\") {\n                const node = clickTarget.node;\n                const event = this._triggerEvent(\"tree.click\", {\n                    node,\n                    click_event: e,\n                });\n\n                if (!event.isDefaultPrevented()) {\n                    this.doSelectNode(node);\n                }\n            }\n        }\n    };\n\n    private handleDblclick = (\n        e: JQuery.DoubleClickEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget?.type === \"label\") {\n            this._triggerEvent(\"tree.dblclick\", {\n                node: clickTarget.node,\n                click_event: e,\n            });\n        }\n    };\n\n    private getClickTarget(element: HTMLElement): ClickTarget | null {\n        const button = element.closest(\".jqtree-toggler\");\n\n        if (button) {\n            const node = this.getNode(button as HTMLElement);\n\n            if (node) {\n                return {\n                    type: \"button\",\n                    node,\n                };\n            }\n        } else {\n            const jqTreeElement = element.closest(\".jqtree-element\");\n\n            if (jqTreeElement) {\n                const node = this.getNode(jqTreeElement as HTMLElement);\n                if (node) {\n                    return {\n                        type: \"label\",\n                        node,\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    private getNode(element: HTMLElement): null | Node {\n        const liElement = element.closest(\"li.jqtree_common\");\n\n        if (liElement) {\n            return jQuery(liElement).data(\"node\") as Node;\n        } else {\n            return null;\n        }\n    }\n\n    private handleContextmenu = (\n        e: JQuery.ContextMenuEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ) => {\n        const div = e.target.closest(\"ul.jqtree-tree .jqtree-element\");\n\n        if (div) {\n            const node = this.getNode(div as HTMLElement);\n            if (node) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                this._triggerEvent(\"tree.contextmenu\", {\n                    node,\n                    click_event: e,\n                });\n                return false;\n            }\n        }\n\n        return null;\n    };\n\n    private saveState(): void {\n        if (this.options.saveState) {\n            this.saveStateHandler.saveState();\n        }\n    }\n\n    private selectCurrentNode(mustSetFocus: boolean): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            const nodeElement = this._getNodeElementForNode(node);\n            if (nodeElement) {\n                nodeElement.select(mustSetFocus);\n            }\n        }\n    }\n\n    private deselectCurrentNode(): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            this.removeFromSelection(node);\n        }\n    }\n\n    private getDefaultClosedIcon(): string {\n        if (this.options.rtl) {\n            // triangle to the left\n            return \"&#x25c0;\";\n        } else {\n            // triangle to the right\n            return \"&#x25ba;\";\n        }\n    }\n\n    private getRtlOption(): boolean {\n        if (this.options.rtl != null) {\n            return this.options.rtl;\n        } else {\n            const dataRtl = this.element.data(\"rtl\") as unknown;\n\n            if (\n                dataRtl !== null &&\n                dataRtl !== false &&\n                dataRtl !== undefined\n            ) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    private doSelectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): void {\n        const saveState = (): void => {\n            if (this.options.saveState) {\n                this.saveStateHandler.saveState();\n            }\n        };\n\n        if (!node) {\n            // Called with empty node -> deselect current node\n            this.deselectCurrentNode();\n            saveState();\n            return;\n        }\n        const defaultOptions = { mustSetFocus: true, mustToggle: true };\n        const selectOptions = { ...defaultOptions, ...(optionsParam || {}) };\n\n        const canSelect = (): boolean => {\n            if (this.options.onCanSelectNode) {\n                return (\n                    this.options.selectable === true &&\n                    this.options.onCanSelectNode(node)\n                );\n            } else {\n                return this.options.selectable === true;\n            }\n        };\n\n        if (!canSelect()) {\n            return;\n        }\n\n        if (this.selectNodeHandler.isNodeSelected(node)) {\n            if (selectOptions.mustToggle) {\n                this.deselectCurrentNode();\n                this._triggerEvent(\"tree.select\", {\n                    node: null,\n                    previous_node: node,\n                });\n            }\n        } else {\n            const deselectedNode = this.getSelectedNode() || null;\n            this.deselectCurrentNode();\n            this.addToSelection(node, selectOptions.mustSetFocus);\n\n            this._triggerEvent(\"tree.select\", {\n                node,\n                deselected_node: deselectedNode,\n            });\n            this.openParents(node);\n        }\n\n        saveState();\n    }\n\n    private doLoadData(data: NodeData[] | null, parentNode: Node | null): void {\n        if (data) {\n            if (parentNode) {\n                this.deselectNodes(parentNode);\n                this.loadSubtree(data, parentNode);\n            } else {\n                this.initTree(data);\n            }\n\n            if (this.isDragging()) {\n                this.dndHandler.refresh();\n            }\n        }\n\n        this._triggerEvent(\"tree.load_data\", {\n            tree_data: data,\n            parent_node: parentNode,\n        });\n    }\n\n    private deselectNodes(parentNode: Node): void {\n        const selectedNodesUnderParent =\n            this.selectNodeHandler.getSelectedNodesUnder(parentNode);\n        for (const n of selectedNodesUnderParent) {\n            this.selectNodeHandler.removeFromSelection(n);\n        }\n    }\n\n    private loadSubtree(data: NodeData[], parentNode: Node): void {\n        parentNode.loadFromData(data);\n\n        parentNode.load_on_demand = false;\n        parentNode.is_loading = false;\n\n        this._refreshElements(parentNode);\n    }\n\n    private doLoadDataFromUrl(\n        urlInfoParam: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null,\n    ): void {\n        const urlInfo = urlInfoParam || this.getDataUrlInfo(parentNode);\n\n        this.dataLoader.loadFromUrl(urlInfo, parentNode, onFinished);\n    }\n\n    private loadFolderOnDemand(\n        node: Node,\n        slide = true,\n        onFinished?: OnFinishOpenNode,\n    ): void {\n        node.is_loading = true;\n\n        this.doLoadDataFromUrl(null, node, () => {\n            this._openNode(node, slide, onFinished);\n        });\n    }\n\n    private containsElement(element: HTMLElement): boolean {\n        const node = this.getNode(element);\n\n        return node != null && node.tree === this.tree;\n    }\n\n    private isFocusOnTree(): boolean {\n        const activeElement = document.activeElement;\n\n        return Boolean(\n            activeElement &&\n                activeElement.tagName === \"SPAN\" &&\n                this.containsElement(activeElement as HTMLElement),\n        );\n    }\n\n    private connectHandlers() {\n        const {\n            autoEscape,\n            buttonLeft,\n            closedIcon,\n            dataFilter,\n            dragAndDrop,\n            keyboardSupport,\n            onCanMove,\n            onCreateLi,\n            onDragMove,\n            onDragStop,\n            onGetStateFromStorage,\n            onIsMoveHandle,\n            onLoadFailed,\n            onLoading,\n            onSetStateFromStorage,\n            openedIcon,\n            openFolderDelay,\n            rtl,\n            saveState,\n            showEmptyFolder,\n            slide,\n            tabIndex,\n        } = this.options;\n\n        const closeNode = this.closeNode.bind(this);\n        const getNodeElement = this._getNodeElement.bind(this);\n        const getNodeElementForNode = this._getNodeElementForNode.bind(this);\n        const getNodeById = this.getNodeById.bind(this);\n        const getScrollLeft = this._getScrollLeft.bind(this);\n        const getSelectedNode = this.getSelectedNode.bind(this);\n        const getTree = this.getTree.bind(this);\n        const isFocusOnTree = this.isFocusOnTree.bind(this);\n        const loadData = this.loadData.bind(this);\n        const openNode = this._openNode.bind(this);\n        const refreshElements = this._refreshElements.bind(this);\n        const refreshHitAreas = this.refreshHitAreas.bind(this);\n        const selectNode = this.selectNode.bind(this);\n        const $treeElement = this.element;\n        const triggerEvent = this._triggerEvent.bind(this);\n\n        const selectNodeHandler = new SelectNodeHandler({\n            getNodeById,\n        });\n\n        const addToSelection =\n            selectNodeHandler.addToSelection.bind(selectNodeHandler);\n        const getSelectedNodes =\n            selectNodeHandler.getSelectedNodes.bind(selectNodeHandler);\n        const isNodeSelected =\n            selectNodeHandler.isNodeSelected.bind(selectNodeHandler);\n        const removeFromSelection =\n            selectNodeHandler.removeFromSelection.bind(selectNodeHandler);\n\n        const dataLoader = new DataLoader({\n            dataFilter,\n            loadData,\n            onLoadFailed,\n            onLoading,\n            $treeElement,\n            triggerEvent,\n        });\n\n        const saveStateHandler = new SaveStateHandler({\n            addToSelection,\n            getNodeById,\n            getSelectedNodes,\n            getTree,\n            onGetStateFromStorage,\n            onSetStateFromStorage,\n            openNode,\n            refreshElements,\n            removeFromSelection,\n            saveState,\n        });\n\n        const dndHandler = new DragAndDropHandler({\n            autoEscape,\n            getNodeElement,\n            getNodeElementForNode,\n            getScrollLeft,\n            getTree,\n            onCanMove,\n            onDragMove,\n            onDragStop,\n            onIsMoveHandle,\n            openFolderDelay,\n            openNode,\n            refreshElements,\n            slide,\n            $treeElement,\n            triggerEvent,\n        });\n\n        const scrollHandler = new ScrollHandler({\n            refreshHitAreas,\n            $treeElement,\n        });\n\n        const keyHandler = new KeyHandler({\n            closeNode,\n            getSelectedNode,\n            isFocusOnTree,\n            keyboardSupport,\n            openNode,\n            selectNode,\n        });\n\n        const renderer = new ElementsRenderer({\n            autoEscape,\n            buttonLeft,\n            closedIcon,\n            dragAndDrop,\n            $element: $treeElement,\n            getTree,\n            isNodeSelected,\n            onCreateLi,\n            openedIcon,\n            rtl,\n            showEmptyFolder,\n            tabIndex,\n        });\n\n        this.dataLoader = dataLoader;\n        this.dndHandler = dndHandler;\n        this.keyHandler = keyHandler;\n        this.renderer = renderer;\n        this.saveStateHandler = saveStateHandler;\n        this.scrollHandler = scrollHandler;\n        this.selectNodeHandler = selectNodeHandler;\n    }\n\n    private createFolderElement(node: Node) {\n        const closedIconElement = this.renderer.closedIconElement;\n        const getScrollLeft = this._getScrollLeft.bind(this);\n        const openedIconElement = this.renderer.openedIconElement;\n        const tabIndex = this.options.tabIndex;\n        const $treeElement = this.element;\n        const triggerEvent = this._triggerEvent.bind(this);\n\n        return new FolderElement({\n            closedIconElement,\n            getScrollLeft,\n            node,\n            openedIconElement,\n            tabIndex,\n            $treeElement,\n            triggerEvent,\n        });\n    }\n\n    private createNodeElement(node: Node) {\n        const getScrollLeft = this._getScrollLeft.bind(this);\n        const tabIndex = this.options.tabIndex;\n        const $treeElement = this.element;\n\n        return new NodeElement({\n            getScrollLeft,\n            node,\n            tabIndex,\n            $treeElement,\n        });\n    }\n\n    private openParents(node: Node) {\n        const parent = node.parent;\n\n        if (parent && parent.parent && !parent.is_open) {\n            this.openNode(parent, false);\n        }\n    }\n}\n\nSimpleWidget.register(JqTreeWidget, \"tree\");\n","const version = \"1.8.0\";\n\nexport default version;\n"],"names":["Position","positionNames","before","Before","after","After","inside","Inside","none","None","getPositionName","position","name","Object","prototype","hasOwnProperty","call","DragElement","constructor","nodeName","offsetX","offsetY","$tree","autoEscape","this","$element","jQuery","addClass","text","html","css","append","move","pageX","pageY","offset","left","top","remove","getBoolString","value","getOffsetTop","element","getBoundingClientRect","y","window","scrollY","VisibleNodeIterator","tree","iterate","isFirstNode","_iterateNode","node","nextNode","mustIterateInside","is_open","hasChildren","offsetParent","handleFirstNode","handleOpenFolder","handleClosedFolder","handleNode","childrenLength","children","length","forEach","_","i","child","nextChild","handleAfterOpenFolder","HitAreasGenerator","currentNode","treeBottom","super","generate","positions","lastTop","generateHitAreas","previousTop","group","hitAreas","generateHitAreasForGroup","push","addPosition","area","bottom","positionsInGroup","positionCount","Math","min","areaHeight","round","areaTop","DragAndDropHandler","_ref","getNodeElement","getNodeElementForNode","getScrollLeft","getTree","onCanMove","onCanMoveTo","onDragMove","onDragStop","onIsMoveHandle","openNode","refreshElements","slide","$treeElement","triggerEvent","hoveredArea","isDragging","currentItem","mouseCapture","positionInfo","target","mustCaptureElement","nodeElement","mouseStart","undefined","refresh","dragElement","classList","add","mouseDrag","findHoveredArea","canMoveToArea","isFolder","stopOpenFolderTimer","mustOpenFolderTimer","startOpenFolderTimer","updateDropHint","removeDropHint","originalEvent","mouseStop","moveItem","clear","removeHover","removeHitAreas","hitAreasGenerator","getTreeDimensions","positionName","previousGhost","x","dimensions","right","low","high","mid","addDropHint","folder","openFolder","openFolderDelay","openFolderTimer","setTimeout","clearTimeout","movedNode","targetNode","previousParent","parent","doMove","moveNode","empty","move_info","moved_node","target_node","previous_parent","do_move","original_event","isDefaultPrevented","el","width","height","ElementsRenderer","buttonLeft","closedIcon","onCreateLi","dragAndDrop","isNodeSelected","openedIcon","rtl","showEmptyFolder","tabIndex","openedIconElement","createButtonElement","closedIconElement","render","fromNode","renderFromNode","renderFromRoot","createDomElements","$previousLi","li","createLi","getLevel","attachNodeData","isRootNode","level","ul","createUl","appendChild","data","classString","role","document","createElement","className","setAttribute","isSelected","Boolean","isEmptyFolder","createFolderLi","createNodeLi","setTreeItemAriaAttributes","buttonClasses","getButtonClasses","folderClasses","getFolderClasses","iconElement","div","buttonLink","cloneNode","titleSpan","createTitleSpan","liClasses","join","classes","textContent","innerHTML","is_loading","createTextNode","nodeType","DataLoader","dataFilter","loadData","onLoadFailed","onLoading","loadFromUrl","urlInfo","parentNode","onFinished","$el","getDomElement","addLoadingClass","notifyLoading","stopLoading","removeLoadingClass","submitRequest","parseData","jqXHR","removeClass","isLoading","urlInfoInput","handleSuccess","handleError","ajaxSettings","method","cache","dataType","success","error","url","toUpperCase","ajax","parsedData","JSON","parse","KeyHandler","closeNode","getSelectedNode","isFocusOnTree","keyboardSupport","selectNode","originalSelectNode","handleKeyDownHandler","handleKeyDown","bind","addEventListener","deinit","removeEventListener","moveDown","selectedNode","getNextVisibleNode","moveUp","getPreviousVisibleNode","moveRight","moveLeft","getParent","e","canHandleKeyboard","key","register","widgetClass","widgetName","getDataKey","getWidgetData","dataKey","widget","SimpleWidget","createWidget","options","get","init","fn","argument1","functionName","destroy","removeData","destroyWidget","_len","arguments","args","Array","_key","callFunction","result","widgetFunction","apply","static","defaults","getPositionInfoFromMouseEvent","getPositionInfoFromTouch","touch","MouseWidget","mouseDown","passive","touchStart","isMouseStarted","mouseDelayTimer","isMouseDelayMet","mouseDownInfo","removeMouseMoveEventListeners","button","handleMouseDown","cancelable","preventDefault","handleMouseUp","handleStartMouse","mouseMove","touchMove","mouseUp","touchEnd","mouseDelay","getMouseDelay","startMouseDelayTimer","handleMouseMove","touches","changedTouches","SaveStateHandler","addToSelection","getNodeById","getSelectedNodes","onGetStateFromStorage","onSetStateFromStorage","removeFromSelection","saveState","saveStateOption","state","stringify","getState","supportsLocalStorage","localStorage","setItem","getKeyName","getStateFromStorage","jsonData","loadFromStorage","parseState","open_nodes","getOpenNodeIds","openNodes","id","selected_node","getSelectedNodeIds","selectedNodeIds","setInitialState","mustLoadOnDemand","openInitialNodes","resetSelection","selectInitialNodes","setInitialStateOnDemand","cbFinished","doSetInitialStateOnDemand","getNodeIdToBeSelected","n","getItem","nodeIds","nodeId","load_on_demand","selectCount","nodeIdsParam","selectedNodes","loadingCount","newNodesIds","loadAndOpenNode","_supportsLocalStorage","testSupport","sessionStorage","removeItem","ContainerScrollParent","$container","refreshHitAreas","checkHorizontalScrolling","newHorizontalScrollDirection","getNewHorizontalScrollDirection","horizontalScrollDirection","horizontalScrollTimeout","verticalScrollTimeout","scrollHorizontally","checkVerticalScrolling","newVerticalScrollDirection","getNewVerticalScrollDirection","verticalScrollDirection","scrollVertically","scrollLeft","scrollToY","scrollTop","stopScrolling","scrollParentTop","scrollParentBottom","scrollParentOffset","container","rightEdge","clientWidth","leftEdge","getScrollParentTop","getScrollParentBottom","distance","scrollBy","behavior","innerHeight","DocumentScrollParent","documentElement","treeTop","documentScrollHeight","documentScrollWidth","isNearLeftEdge","canScrollRight","getDocumentScrollWidth","canScrollDown","clientHeight","getDocumentScrollHeight","scrollHeight","scrollWidth","hasOverFlow","attr","overflowValue","createScrollParent","parents","getParentWithOverflow","tagName","ScrollHandler","scrollParent","checkScrolling","getScrollParent","SelectNodeHandler","Set","selectedSingleNode","getSelectedNodesUnder","isParentOf","has","includeChildren","delete","isNodeRecordWithChildren","Node","nodeData","isRoot","nodeClass","setData","idMapping","Map","o","loadFromData","removeChildren","childData","createNode","addChild","setParent","addChildAtPosition","index","splice","removeChild","doRemoveChild","getChildIndex","indexOf","callback","_iterate","getData","getDataFromNodes","nodes","map","tmpNode","k","v","getNodeByName","getNodeByCallback","getNodeByNameMustExist","addAfter","nodeInfo","childIndex","loadChildrenFromData","addBefore","addParent","newParent","originalParent","prepend","addNodeToIndex","set","removeNodeFromIndex","getPreviousSibling","previousIndex","getNextSibling","nextIndex","getNodesByProperty","filter","f","getNextNode","nextSibling","getPreviousNode","previousSibling","getLastChild","lastChild","initFromData","addChildren","childrenData","addNode","getNodeClass","BorderDropHint","querySelector","hint","max","offsetWidth","style","GhostDropHint","ghost","createGhostElement","moveAfter","moveBefore","moveInsideOpenFolder","moveInside","childElement","circleSpan","lineSpan","NodeElement","mustShowBorderDropHint","select","mustSetFocus","getTitleSpan","toString","focus","deselect","removeAttribute","blur","getUl","FolderElement","open","animationSpeed","getButton","icon","doOpen","slideDown","show","close","doClose","slideUp","hide","NODE_PARAM_IS_EMPTY","PARAM_IS_EMPTY","JqTreeWidget","autoOpen","dataUrl","onCanSelectNode","selectable","startDndDelay","useContextMenu","toggle","slideParam","Error","optionsParam","doSelectNode","selectNodeHandler","toJson","doLoadData","loadDataFromUrl","param1","param2","param3","doLoadDataFromUrl","reload","_refreshElements","getNodeByHtmlElement","inputElement","HTMLElement","getNode","parseParams","_openNode","createFolderElement","dndHandler","addNodeAfter","newNodeInfo","existingNode","newNode","addNodeBefore","addParentNode","removeNode","appendNode","parentNodeParam","prependNode","updateNode","idIsChanged","isSelectedNodeInSubtree","subtree","positionIndex","saveStateHandler","openParents","_getNodeElementForNode","scrollToNode","scrollHandler","setState","setOption","option","keyHandler","getVersion","_triggerEvent","eventName","values","event","Event","trigger","doOpenNode","_node","_slide","_onFinished","loadFolderOnDemand","mustSelect","renderer","selectCurrentNode","createNodeElement","_getNodeElement","_getScrollLeft","isInitialized","getRtlOption","getDefaultClosedIcon","connectHandlers","initData","on","handleClick","handleDblclick","handleContextmenu","off","getDataUrlInfo","setUrlInfoData","selectedNodeId","getUrlFromString","initTree","doInit","autoOpenNodes","maxLevel","getAutoOpenMaxLevel","isRestored","restoreState","parseInt","clickTarget","getClickTarget","type","stopPropagation","click_event","closest","jqTreeElement","liElement","deselectCurrentNode","dataRtl","selectOptions","mustToggle","canSelect","previous_node","deselectedNode","deselected_node","deselectNodes","loadSubtree","tree_data","parent_node","selectedNodesUnderParent","urlInfoParam","dataLoader","containsElement","activeElement"],"mappings":";;;;;;;;;;;;;;;;;;;oCAAYA,IAAAA,WAAAA,GAAQ,OAARA,EAAAA,EAAQ,OAAA,GAAA,SAARA,EAAAA,EAAQ,MAAA,GAAA,QAARA,EAAAA,EAAQ,OAAA,GAAA,SAARA,EAAAA,EAAQ,KAAA,GAAA,OAARA,CAAQ,EAAA,CAAA,GAOpB,MAAMC,EAA0C,CAC5CC,OAAQF,EAASG,OACjBC,MAAOJ,EAASK,MAChBC,OAAQN,EAASO,OACjBC,KAAMR,EAASS,MAGNC,EAAmBC,IAC5B,IAAK,MAAMC,KAAQX,EACf,GAAIY,OAAOC,UAAUC,eAAeC,KAAKf,EAAeW,IAChDX,EAAcW,KAAUD,EACxB,OAAOC,EAKnB,MAAO,EAAE,ECvBb,MAAMK,EAKFC,WAAAA,CACIC,EACAC,EACAC,EACAC,EACAC,GAEAC,KAAKJ,QAAUA,EACfI,KAAKH,QAAUA,EAEfG,KAAKC,SAAWC,OAAO,UAAUC,SAC7B,gCAGAJ,EACAC,KAAKC,SAASG,KAAKT,GAEnBK,KAAKC,SAASI,KAAKV,GAGvBK,KAAKC,SAASK,IAAI,WAAY,YAC9BR,EAAMS,OAAOP,KAAKC,SACtB,CAEOO,IAAAA,CAAKC,EAAeC,GACvBV,KAAKC,SAASU,OAAO,CACjBC,KAAMH,EAAQT,KAAKJ,QACnBiB,IAAKH,EAAQV,KAAKH,SAE1B,CAEOiB,MAAAA,GACHd,KAAKC,SAASa,QAClB,ECtCG,MAKMC,EAAiBC,GAC1BA,EAAQ,OAAS,QAERC,EAAgBC,GACzBA,EAAQC,wBAAwBC,EAAIC,OAAOC,QCP/C,MAAeC,EAGX7B,WAAAA,CAAY8B,GACRxB,KAAKwB,KAAOA,CAChB,CAEUC,OAAAA,GACN,IAAIC,GAAc,EAElB,MAAMC,EAAeA,CAACC,EAAYC,KAC9B,IAAIC,GACCF,EAAKG,UAAYH,EAAKV,UAAYU,EAAKI,cAExCd,EAA8B,KAsBlC,GAnBIU,EAAKV,SAASe,eACdf,EAAUU,EAAKV,QAEXQ,IACA1B,KAAKkC,gBAAgBN,GACrBF,GAAc,GAGbE,EAAKI,cAECJ,EAAKG,QACP/B,KAAKmC,iBAAiBP,EAAMA,EAAKV,WAClCY,GAAoB,GAGxB9B,KAAKoC,mBAAmBR,EAAMC,EAAUX,GANxClB,KAAKqC,WAAWT,EAAMC,EAAUD,EAAKV,UAUzCY,EAAmB,CACnB,MAAMQ,EAAiBV,EAAKW,SAASC,OACrCZ,EAAKW,SAASE,SAAQ,CAACC,EAAGC,KACtB,MAAMC,EAAQhB,EAAKW,SAASI,GAE5B,GAAIC,EACA,GAAID,IAAML,EAAiB,EACvBX,EAAaiB,EAAO,UACjB,CACH,MAAMC,EAAYjB,EAAKW,SAASI,EAAI,GAEhCE,GACAlB,EAAaiB,EAAOC,EAE5B,CACJ,IAGAjB,EAAKG,SAAWb,GAChBlB,KAAK8C,sBAAsBlB,EAAMC,EAEzC,GAGJF,EAAa3B,KAAKwB,KAAM,KAC5B,ECzDJ,MAAMuB,UAA0BxB,EAM5B7B,WAAAA,CAAY8B,EAAYwB,EAAmBC,GACvCC,MAAM1B,GAENxB,KAAKgD,YAAcA,EACnBhD,KAAKiD,WAAaA,CACtB,CAEOE,QAAAA,GAMH,OALAnD,KAAKoD,UAAY,GACjBpD,KAAKqD,QAAU,EAEfrD,KAAKyB,UAEEzB,KAAKsD,iBAAiBtD,KAAKoD,UACtC,CAEUE,gBAAAA,CAAiBF,GACvB,IAAIG,EAAcH,EAAU,IAAIvC,KAAO,EACnC2C,EAAQ,GACZ,MAAMC,EAAsB,GAE5B,IAAK,MAAMtE,KAAYiE,EACfjE,EAAS0B,MAAQ0C,GAAeC,EAAMhB,SACtCxC,KAAK0D,yBACDD,EACAD,EACAD,EACApE,EAAS0B,KAGb0C,EAAcpE,EAAS0B,IACvB2C,EAAQ,IAGZA,EAAMG,KAAKxE,GAUf,OAPAa,KAAK0D,yBACDD,EACAD,EACAD,EACAvD,KAAKiD,YAGFQ,CACX,CAEUtB,gBAAAA,CAAiBP,EAAYV,GACnC,OAAIU,IAAS5B,KAAKgD,cAOdpB,EAAKW,SAAS,KAAOvC,KAAKgD,aAC1BhD,KAAK4D,YAAYhC,EAAMpD,EAASO,OAAQkC,EAAaC,KAIlD,EACX,CAEUkB,kBAAAA,CACNR,EACAC,EACAX,GAEA,MAAML,EAAMI,EAAaC,GAErBU,IAAS5B,KAAKgD,YAEdhD,KAAK4D,YAAYhC,EAAMpD,EAASS,KAAM4B,IAEtCb,KAAK4D,YAAYhC,EAAMpD,EAASO,OAAQ8B,GAGpCgB,IAAa7B,KAAKgD,aAClBhD,KAAK4D,YAAYhC,EAAMpD,EAASK,MAAOgC,GAGnD,CAEUqB,eAAAA,CAAgBN,GAClBA,IAAS5B,KAAKgD,aACdhD,KAAK4D,YAAYhC,EAAMpD,EAASG,OAAQsC,EAAaW,EAAKV,SAElE,CAEU4B,qBAAAA,CAAsBlB,EAAYC,GACpCD,IAAS5B,KAAKgD,aAAenB,IAAa7B,KAAKgD,YAE/ChD,KAAK4D,YAAYhC,EAAMpD,EAASS,KAAMe,KAAKqD,SAE3CrD,KAAK4D,YAAYhC,EAAMpD,EAASK,MAAOmB,KAAKqD,QAEpD,CAEUhB,UAAAA,CACNT,EACAC,EACAX,GAEA,MAAML,EAAMI,EAAaC,GAErBU,IAAS5B,KAAKgD,YAEdhD,KAAK4D,YAAYhC,EAAMpD,EAASS,KAAM4B,GAEtCb,KAAK4D,YAAYhC,EAAMpD,EAASO,OAAQ8B,GAGxCgB,IAAa7B,KAAKgD,aAAepB,IAAS5B,KAAKgD,YAE/ChD,KAAK4D,YAAYhC,EAAMpD,EAASS,KAAM4B,GAEtCb,KAAK4D,YAAYhC,EAAMpD,EAASK,MAAOgC,EAE/C,CAEQ+C,WAAAA,CAAYhC,EAAYzC,EAAkB0B,GAC9C,MAAMgD,EAAO,CACThD,MACAiD,OAAQ,EACRlC,OACAzC,YAGJa,KAAKoD,UAAUO,KAAKE,GACpB7D,KAAKqD,QAAUxC,CACnB,CAEQ6C,wBAAAA,CACJD,EACAM,EACAlD,EACAiD,GAGA,MAAME,EAAgBC,KAAKC,IAAIH,EAAiBvB,OAAQ,GAElD2B,EAAaF,KAAKG,OAAON,EAASjD,GAAOmD,GAC/C,IAAIK,EAAUxD,EAEV8B,EAAI,EACR,KAAOA,EAAIqB,GAAe,CACtB,MAAM7E,EAAW4E,EAAiBpB,GAE9BxD,GACAsE,EAASE,KAAK,CACV9C,IAAKwD,EACLP,OAAQO,EAAUF,EAClBvC,KAAMzC,EAASyC,KACfzC,SAAUA,EAASA,WAI3BkF,GAAWF,EACXxB,GAAK,CACT,CACJ,EC1HG,MAAM2B,EA0BT5E,WAAAA,CAAW6E,GAgBkB,IAhBjBxE,WACRA,EAAUyE,eACVA,EAAcC,sBACdA,EAAqBC,cACrBA,EAAaC,QACbA,EAAOC,UACPA,EAASC,YACTA,EAAWC,WACXA,EAAUC,WACVA,EAAUC,eACVA,EAAcC,SACdA,EAAQC,gBACRA,EAAeC,MACfA,EAAKC,aACLA,EAAYC,aACZA,GACuBd,EACvBvE,KAAKD,WAAaA,EAClBC,KAAKwE,eAAiBA,EACtBxE,KAAKyE,sBAAwBA,EAC7BzE,KAAK0E,cAAgBA,EACrB1E,KAAK2E,QAAUA,EACf3E,KAAK4E,UAAYA,EACjB5E,KAAK6E,YAAcA,EACnB7E,KAAK8E,WAAaA,EAClB9E,KAAK+E,WAAaA,EAClB/E,KAAKgF,eAAiBA,EACtBhF,KAAKiF,SAAWA,EAChBjF,KAAKkF,gBAAkBA,EACvBlF,KAAKmF,MAAQA,EACbnF,KAAKoF,aAAeA,EACpBpF,KAAKqF,aAAeA,EAEpBrF,KAAKsF,YAAc,KACnBtF,KAAKyD,SAAW,GAChBzD,KAAKuF,YAAa,EAClBvF,KAAKwF,YAAc,IACvB,CAEOC,YAAAA,CAAaC,GAChB,MAAMxE,EAAUwE,EAAaC,OAE7B,IAAK3F,KAAK4F,mBAAmB1E,GACzB,OAAO,KAGX,GAAIlB,KAAKgF,iBAAmBhF,KAAKgF,eAAe9E,OAAOgB,IACnD,OAAO,KAGX,IAAI2E,EAAc7F,KAAKwE,eAAetD,GAStC,OAPI2E,GAAe7F,KAAK4E,YACf5E,KAAK4E,UAAUiB,EAAYjE,QAC5BiE,EAAc,OAItB7F,KAAKwF,YAAcK,EACQ,MAApB7F,KAAKwF,WAChB,CAEOM,UAAAA,CAAWJ,GACd,IACK1F,KAAKwF,kBACiBO,IAAvBL,EAAajF,YACUsF,IAAvBL,EAAahF,MAEb,OAAO,EAGXV,KAAKgG,UAEL,MAAMrF,EAAST,OAAOwF,EAAaC,QAAQhF,SACrCC,EAAOD,EAASA,EAAOC,KAAO,EAC9BC,EAAMF,EAASA,EAAOE,IAAM,EAE5Be,EAAO5B,KAAKwF,YAAY5D,KAa9B,OAXA5B,KAAKiG,YAAc,IAAIxG,EACnBmC,EAAKxC,KACLsG,EAAajF,MAAQG,EACrB8E,EAAahF,MAAQG,EACrBb,KAAKoF,aACLpF,KAAKD,aAAc,GAGvBC,KAAKuF,YAAa,EAClBvF,KAAKwF,YAAYtE,QAAQgF,UAAUC,IAAI,kBAEhC,CACX,CAEOC,SAAAA,CAAUV,GACb,IACK1F,KAAKwF,cACLxF,KAAKiG,kBACiBF,IAAvBL,EAAajF,YACUsF,IAAvBL,EAAahF,MAEb,OAAO,EAGXV,KAAKiG,YAAYzF,KAAKkF,EAAajF,MAAOiF,EAAahF,OAEvD,MAAMmD,EAAO7D,KAAKqG,gBACdX,EAAajF,MACbiF,EAAahF,OAmCjB,OAhCImD,GAAQ7D,KAAKsG,cAAczC,IACtBA,EAAKjC,KAAK2E,YACXvG,KAAKwG,sBAGLxG,KAAKsF,cAAgBzB,IACrB7D,KAAKsF,YAAczB,EAGf7D,KAAKyG,oBAAoB5C,GACzB7D,KAAK0G,qBAAqB7C,EAAKjC,MAE/B5B,KAAKwG,sBAGTxG,KAAK2G,oBAGT3G,KAAK4G,iBACL5G,KAAKwG,sBACLxG,KAAKsF,YAAczB,GAGlBA,GACG7D,KAAK8E,YACL9E,KAAK8E,WACD9E,KAAKwF,YAAY5D,KACjB8D,EAAamB,gBAKlB,CACX,CAEOC,SAAAA,CAAUpB,GACb1F,KAAK+G,SAASrB,GACd1F,KAAKgH,QACLhH,KAAKiH,cACLjH,KAAK4G,iBACL5G,KAAKkH,iBAEL,MAAM1B,EAAcxF,KAAKwF,YAezB,OAbIxF,KAAKwF,cACLxF,KAAKwF,YAAYtE,QAAQgF,UAAUpF,OAAO,iBAC1Cd,KAAKwF,YAAc,MAGvBxF,KAAKuF,YAAa,GAEbvF,KAAKsF,aAAeE,GACjBxF,KAAK+E,YACL/E,KAAK+E,WAAWS,EAAY5D,KAAM8D,EAAamB,gBAIhD,CACX,CAEOb,OAAAA,GACHhG,KAAKkH,iBAEDlH,KAAKwF,cACLxF,KAAKsD,mBAELtD,KAAKwF,YAAcxF,KAAKyE,sBACpBzE,KAAKwF,YAAY5D,MAGjB5B,KAAKuF,YACLvF,KAAKwF,YAAYtE,QAAQgF,UAAUC,IAAI,iBAGnD,CAEQ7C,gBAAAA,GACJ,MAAM9B,EAAOxB,KAAK2E,UAElB,GAAK3E,KAAKwF,aAAgBhE,EAEnB,CACH,MAAM2F,EAAoB,IAAIpE,EAC1BvB,EACAxB,KAAKwF,YAAY5D,KACjB5B,KAAKoH,oBAAoBtD,QAE7B9D,KAAKyD,SAAW0D,EAAkBhE,UACtC,MARInD,KAAKyD,SAAW,EASxB,CAEQmC,kBAAAA,CAAmB1E,GACvB,MAAMvB,EAAWuB,EAAQvB,SAEzB,MACiB,UAAbA,GACa,WAAbA,GACa,aAAbA,CAER,CAEQ2G,aAAAA,CAAczC,GAClB,IAAK7D,KAAK6E,YACN,OAAO,EAGX,IAAK7E,KAAKwF,YACN,OAAO,EAGX,MAAM6B,EAAenI,EAAgB2E,EAAK1E,UAE1C,OAAOa,KAAK6E,YAAY7E,KAAKwF,YAAY5D,KAAMiC,EAAKjC,KAAMyF,EAC9D,CAEQH,cAAAA,GACJlH,KAAKyD,SAAW,EACpB,CAEQuD,KAAAA,GACAhH,KAAKiG,cACLjG,KAAKiG,YAAYnF,SACjBd,KAAKiG,YAAc,KAE3B,CAEQW,cAAAA,GACA5G,KAAKsH,eACLtH,KAAKsH,cAAcxG,QAE3B,CAEQmG,WAAAA,GACJjH,KAAKsF,YAAc,IACvB,CAEQe,eAAAA,CAAgBkB,EAAWnG,GAC/B,MAAMoG,EAAaxH,KAAKoH,oBAExB,GACIG,EAAIC,EAAW5G,MACfQ,EAAIoG,EAAW3G,KACf0G,EAAIC,EAAWC,OACfrG,EAAIoG,EAAW1D,OAEf,OAAO,KAGX,IAAI4D,EAAM,EACNC,EAAO3H,KAAKyD,SAASjB,OACzB,KAAOkF,EAAMC,GAAM,CACf,MAAMC,EAAOF,EAAMC,GAAS,EACtB9D,EAAO7D,KAAKyD,SAASmE,GAE3B,IAAK/D,EACD,OAAO,KAGX,GAAIzC,EAAIyC,EAAKhD,IACT8G,EAAOC,MACJ,MAAIxG,EAAIyC,EAAKC,QAGhB,OAAOD,EAFP6D,EAAME,EAAM,CAGhB,CACJ,CAEA,OAAO,IACX,CAEQnB,mBAAAA,CAAoB5C,GACxB,MAAMjC,EAAOiC,EAAKjC,KAElB,OACIA,EAAK2E,aACJ3E,EAAKG,SACN8B,EAAK1E,WAAaX,EAASO,MAEnC,CAEQ4H,cAAAA,GACJ,IAAK3G,KAAKsF,YACN,OAIJtF,KAAK4G,iBAGL,MAAMf,EAAc7F,KAAKyE,sBAAsBzE,KAAKsF,YAAY1D,MAChE5B,KAAKsH,cAAgBzB,EAAYgC,YAAY7H,KAAKsF,YAAYnG,SAClE,CAEQuH,oBAAAA,CAAqBoB,GACzB,MAAMC,EAAaA,KACf/H,KAAKiF,SAAS6C,EAAQ9H,KAAKmF,OAAO,KAC9BnF,KAAKgG,UACLhG,KAAK2G,gBAAgB,GACvB,EAGN3G,KAAKwG,sBAEL,MAAMwB,EAAkBhI,KAAKgI,iBAEL,IAApBA,IACAhI,KAAKiI,gBAAkB5G,OAAO6G,WAC1BH,EACAC,GAGZ,CAEQxB,mBAAAA,GACAxG,KAAKiI,kBACLE,aAAanI,KAAKiI,iBAClBjI,KAAKiI,gBAAkB,KAE/B,CAEQlB,QAAAA,CAASrB,GACb,GACI1F,KAAKwF,aACLxF,KAAKsF,aACLtF,KAAKsF,YAAYnG,WAAaX,EAASS,MACvCe,KAAKsG,cAActG,KAAKsF,aAC1B,CACE,MAAM8C,EAAYpI,KAAKwF,YAAY5D,KAC7ByG,EAAarI,KAAKsF,YAAY1D,KAC9BzC,EAAWa,KAAKsF,YAAYnG,SAC5BmJ,EAAiBF,EAAUG,OAE7BpJ,IAAaX,EAASO,SACtBiB,KAAKsF,YAAY1D,KAAKG,SAAU,GAGpC,MAAMyG,EAASA,KACX,MAAMhH,EAAOxB,KAAK2E,UAEdnD,IACAA,EAAKiH,SAASL,EAAWC,EAAYlJ,GACrCa,KAAKoF,aAAasD,QAClB1I,KAAKkF,gBAAgB,MACzB,EAGUlF,KAAKqF,aAAa,YAAa,CACzCsD,UAAW,CACPC,WAAYR,EACZS,YAAaR,EACblJ,SAAUD,EAAgBC,GAC1B2J,gBAAiBR,EACjBS,QAASP,EACTQ,eAAgBtD,EAAamB,iBAI1BoC,sBACPT,GAER,CACJ,CAEQpB,iBAAAA,GAGJ,MAAMzG,EAASX,KAAKoF,aAAazE,SAEjC,GAAKA,EAEE,CACH,MAAMuI,EAAKlJ,KAAKoF,aACV+D,EAAQD,EAAGC,SAAW,EACtBC,EAASF,EAAGE,UAAY,EACxBxI,EAAOD,EAAOC,KAAOZ,KAAK0E,gBAEhC,MAAO,CACH9D,OACAC,IAAKF,EAAOE,IACZ4G,MAAO7G,EAAOuI,EACdrF,OAAQnD,EAAOE,IAAMuI,EAAS,GAEtC,CAbI,MAAO,CAAExI,KAAM,EAAGC,IAAK,EAAG4G,MAAO,EAAG3D,OAAQ,EAcpD,ECjcW,MAAMuF,EAcjB3J,WAAAA,CAAW6E,GAagB,IAbfxE,WACRA,EAAUuJ,WACVA,EAAUC,WACVA,EAAUC,WACVA,EAAUC,YACVA,EAAWxJ,SACXA,EAAQ0E,QACRA,EAAO+E,eACPA,EAAcC,WACdA,EAAUC,IACVA,EAAGC,gBACHA,EAAeC,SACfA,GACqBvF,EACrBvE,KAAKD,WAAaA,EAClBC,KAAKsJ,WAAaA,EAClBtJ,KAAKyJ,YAAcA,EACnBzJ,KAAKC,SAAWA,EAChBD,KAAK2E,QAAUA,EACf3E,KAAK0J,eAAiBA,EACtB1J,KAAKwJ,WAAaA,EAClBxJ,KAAK4J,IAAMA,EACX5J,KAAK6J,gBAAkBA,EACvB7J,KAAK8J,SAAWA,EAChB9J,KAAK+J,kBAAoB/J,KAAKgK,oBAAoBL,GAAc,KAChE3J,KAAKiK,kBAAoBjK,KAAKgK,oBAAoBT,GAAc,IACpE,CAEOW,MAAAA,CAAOC,GACNA,GAAYA,EAAS5B,OACrBvI,KAAKoK,eAAeD,GAEpBnK,KAAKqK,gBAEb,CAEOA,cAAAA,GACHrK,KAAKC,SAASyI,QAEd,MAAMlH,EAAOxB,KAAK2E,UAEd3E,KAAKC,SAAS,IAAMuB,GACpBxB,KAAKsK,kBAAkBtK,KAAKC,SAAS,GAAIuB,EAAKe,UAAU,EAAM,EAEtE,CAEO6H,cAAAA,CAAexI,GAElB,MAAM2I,EAAcrK,OAAO0B,EAAKV,SAG1BsJ,EAAKxK,KAAKyK,SAAS7I,EAAMA,EAAK8I,YACpC1K,KAAK2K,eAAe/I,EAAM4I,GAG1BD,EAAY3L,MAAM4L,GAGlBD,EAAYzJ,SAGRc,EAAKW,UACLvC,KAAKsK,kBACDE,EACA5I,EAAKW,UACL,EACAX,EAAK8I,WAAa,EAG9B,CAEQJ,iBAAAA,CACJpJ,EACAqB,EACAqI,EACAC,GAEA,MAAMC,EAAK9K,KAAK+K,SAASH,GACzB1J,EAAQ8J,YAAYF,GAEpB,IAAK,MAAMlI,KAASL,EAAU,CAC1B,MAAMiI,EAAKxK,KAAKyK,SAAS7H,EAAOiI,GAChCC,EAAGE,YAAYR,GAEfxK,KAAK2K,eAAe/H,EAAO4H,GAEvB5H,EAAMZ,eACNhC,KAAKsK,kBAAkBE,EAAI5H,EAAML,UAAU,EAAOsI,EAAQ,EAElE,CACJ,CAEQF,cAAAA,CAAe/I,EAAY4I,GAC/B5I,EAAKV,QAAUsJ,EACftK,OAAOsK,GAAIS,KAAK,OAAQrJ,EAC5B,CAEQmJ,QAAAA,CAASH,GACb,IAAIM,EACAC,EAECP,GAIDM,EAAc,cACdC,EAAO,OAEHnL,KAAK4J,MACLsB,GAAe,iBAPnBA,EAAc,GACdC,EAAO,SAUPnL,KAAKyJ,cACLyB,GAAe,eAGnB,MAAMJ,EAAKM,SAASC,cAAc,MAKlC,OAJAP,EAAGQ,UAAa,iBAAgBJ,IAEhCJ,EAAGS,aAAa,OAAQJ,GAEjBL,CACX,CAEQL,QAAAA,CAAS7I,EAAYiJ,GACzB,MAAMW,EAAaC,QAAQzL,KAAK0J,eAAe9H,IAKzC4I,EAFF5I,EAAK2E,YAAe3E,EAAK8J,eAAiB1L,KAAK6J,gBAG7C7J,KAAK2L,eAAe/J,EAAMiJ,EAAOW,GACjCxL,KAAK4L,aAAahK,EAAMiJ,EAAOW,GAMrC,OAJIxL,KAAKwJ,YACLxJ,KAAKwJ,WAAW5H,EAAM1B,OAAOsK,GAAKgB,GAG/BhB,CACX,CAEQqB,yBAAAA,CACJ3K,EACA9B,EACAyL,EACAW,GAEAtK,EAAQqK,aAAa,aAAcnM,GACnC8B,EAAQqK,aAAa,aAAe,GAAEV,KACtC3J,EAAQqK,aAAa,gBAAiBxK,EAAcyK,IACpDtK,EAAQqK,aAAa,OAAQ,WACjC,CAEQI,cAAAA,CACJ/J,EACAiJ,EACAW,GAEA,MAAMM,EAAgB9L,KAAK+L,iBAAiBnK,GACtCoK,EAAgBhM,KAAKiM,iBAAiBrK,EAAM4J,GAE5CU,EAActK,EAAKG,QACnB/B,KAAK+J,kBACL/J,KAAKiK,kBAGLO,EAAKY,SAASC,cAAc,MAClCb,EAAGc,UAAa,iBAAgBU,IAChCxB,EAAGe,aAAa,OAAQ,QAGxB,MAAMY,EAAMf,SAASC,cAAc,OACnCc,EAAIb,UAAY,+BAChBa,EAAIZ,aAAa,OAAQ,QAEzBf,EAAGQ,YAAYmB,GAGf,MAAMC,EAAahB,SAASC,cAAc,KAC1Ce,EAAWd,UAAYQ,EAEnBI,GACAE,EAAWpB,YAAYkB,EAAYG,WAAU,IAG7CrM,KAAKsJ,YACL6C,EAAInB,YAAYoB,GAIpB,MAAME,EAAYtM,KAAKuM,gBACnB3K,EAAKxC,KACLoM,GACA,EACAX,GASJ,OAPAyB,EAAUf,aAAa,gBAAiBxK,EAAca,EAAKG,UAC3DoK,EAAInB,YAAYsB,GAEXtM,KAAKsJ,YACN6C,EAAInB,YAAYoB,GAGb5B,CACX,CAEQoB,YAAAA,CACJhK,EACAiJ,EACAW,GAEA,MAAMgB,EAAY,CAAC,iBAEfhB,GACAgB,EAAU7I,KAAK,mBAGnB,MAAMuH,EAAcsB,EAAUC,KAAK,KAG7BjC,EAAKY,SAASC,cAAc,MAClCb,EAAGc,UAAYJ,EACfV,EAAGe,aAAa,OAAQ,QAGxB,MAAMY,EAAMf,SAASC,cAAc,OACnCc,EAAIb,UAAY,+BAChBa,EAAIZ,aAAa,OAAQ,QAEzBf,EAAGQ,YAAYmB,GAGf,MAAMG,EAAYtM,KAAKuM,gBACnB3K,EAAKxC,KACLoM,GACA,EACAX,GAIJ,OAFAsB,EAAInB,YAAYsB,GAET9B,CACX,CAEQ+B,eAAAA,CACJ5M,EACA6L,EACAjF,EACAsE,GAEA,MAAMyB,EAAYlB,SAASC,cAAc,QAEzC,IAAIqB,EAAU,6BAUd,GARInG,IACAmG,GAAW,wBAGfA,GAAY,yBAAuB1M,KAAKsJ,WAAa,OAAS,SAE9DgD,EAAUhB,UAAYoB,EAElBlB,EAAY,CACZ,MAAM1B,EAAW9J,KAAK8J,cAEL/D,IAAb+D,GACAwC,EAAUf,aAAa,WAAa,GAAEzB,IAE9C,CAUA,OARA9J,KAAK6L,0BAA0BS,EAAW3M,EAAUkL,EAAOW,GAEvDxL,KAAKD,WACLuM,EAAUK,YAAchN,EAExB2M,EAAUM,UAAYjN,EAGnB2M,CACX,CAEQP,gBAAAA,CAAiBnK,GACrB,MAAM8K,EAAU,CAAC,iBAAkB,iBAYnC,OAVK9K,EAAKG,SACN2K,EAAQ/I,KAAK,iBAGb3D,KAAKsJ,WACLoD,EAAQ/I,KAAK,uBAEb+I,EAAQ/I,KAAK,wBAGV+I,EAAQD,KAAK,IACxB,CAEQR,gBAAAA,CAAiBrK,EAAY4J,GACjC,MAAMkB,EAAU,CAAC,iBAcjB,OAZK9K,EAAKG,SACN2K,EAAQ/I,KAAK,iBAGb6H,GACAkB,EAAQ/I,KAAK,mBAGb/B,EAAKiL,YACLH,EAAQ/I,KAAK,kBAGV+I,EAAQD,KAAK,IACxB,CAEQzC,mBAAAA,CACJhJ,GAEA,GAAqB,iBAAVA,EAAoB,CAE3B,MAAMmL,EAAMf,SAASC,cAAc,OAGnC,OAFAc,EAAIS,UAAY5L,EAEToK,SAAS0B,eAAeX,EAAIS,UACvC,CAAO,OAAa,MAAT5L,OACP,EACQA,EAAsB+L,SACvB/L,EAEAd,OAAOc,GAAO,EAE7B,EC9VW,MAAMgM,EAQjBtN,WAAAA,CAAW6E,GAOU,IAPT0I,WACRA,EAAUC,SACVA,EAAQC,aACRA,EAAYC,UACZA,EAAShI,aACTA,EAAYC,aACZA,GACed,EACfvE,KAAKiN,WAAaA,EAClBjN,KAAKkN,SAAWA,EAChBlN,KAAKmN,aAAeA,EACpBnN,KAAKoN,UAAYA,EACjBpN,KAAKoF,aAAeA,EACpBpF,KAAKqF,aAAeA,CACxB,CAEOgI,WAAAA,CACHC,EACAC,EACAC,GAEA,IAAKF,EACD,OAGJ,MAAMG,EAAMzN,KAAK0N,cAAcH,GAC/BvN,KAAK2N,gBAAgBF,GACrBzN,KAAK4N,eAAc,EAAML,EAAYE,GAErC,MAAMI,EAAcA,KAChB7N,KAAK8N,mBAAmBL,GACxBzN,KAAK4N,eAAc,EAAOL,EAAYE,EAAI,EAoB9CzN,KAAK+N,cAAcT,GAjBIrC,IACnB4C,IACA7N,KAAKkN,SAASlN,KAAKgO,UAAU/C,GAAOsC,GAEhCC,GAAoC,mBAAfA,GACrBA,GACJ,IAGiBS,IACjBJ,IAEI7N,KAAKmN,cACLnN,KAAKmN,aAAac,EACtB,GAIR,CAEQN,eAAAA,CAAgBF,GAChBA,GACAA,EAAItN,SAAS,iBAErB,CAEQ2N,kBAAAA,CAAmBL,GACnBA,GACAA,EAAIS,YAAY,iBAExB,CAEQR,aAAAA,CAAcH,GAClB,OAAIA,EACOrN,OAAOqN,EAAWrM,SAElBlB,KAAKoF,YAEpB,CAEQwI,aAAAA,CACJO,EACAvM,EACA6L,GAEIzN,KAAKoN,WACLpN,KAAKoN,UAAUe,EAAWvM,EAAM6L,GAGpCzN,KAAKqF,aAAa,oBAAqB,CACnC8I,YACAvM,OACA6L,OAER,CAEQM,aAAAA,CACJK,EACAC,EACAC,GAEA,MAKMC,EAAoC,CACtCC,OAAQ,MACRC,OAAO,EACPC,SAAU,OACVC,QAASN,EACTO,MAAON,KATiB,iBAAjBF,EACD,CAAES,IAAKT,GACPA,GAWVG,EAAaC,OAASD,EAAaC,QAAQM,eAAiB,MAEvD5O,OAAO6O,KAAKR,EACrB,CAEQP,SAAAA,CAAU/C,GACd,MAQM+D,EAPkB,iBAAT/D,EACAgE,KAAKC,MAAMjE,GAEXA,EAMf,OAAIjL,KAAKiN,WACEjN,KAAKiN,WAAW+B,GAEhBA,CAEf,ECrIW,MAAMG,EASjBzP,WAAAA,CAAW6E,GAOU,IAPT6K,UACRA,EAASC,gBACTA,EAAeC,cACfA,EAAaC,gBACbA,EAAetK,SACfA,EAAQuK,WACRA,GACejL,EACfvE,KAAKoP,UAAYA,EACjBpP,KAAKqP,gBAAkBA,EACvBrP,KAAKsP,cAAgBA,EACrBtP,KAAKuP,gBAAkBA,EACvBvP,KAAKiF,SAAWA,EAChBjF,KAAKyP,mBAAqBD,EAEtBD,IACAvP,KAAK0P,qBAAuB1P,KAAK2P,cAAcC,KAAK5P,MAEpDoL,SAASyE,iBAAiB,UAAW7P,KAAK0P,sBAElD,CAEOI,MAAAA,GACC9P,KAAK0P,sBACLtE,SAAS2E,oBAAoB,UAAW/P,KAAK0P,qBAErD,CAEOM,QAAAA,CAASC,GACZ,OAAOjQ,KAAKwP,WAAWS,EAAaC,qBACxC,CAEOC,MAAAA,CAAOF,GACV,OAAOjQ,KAAKwP,WAAWS,EAAaG,yBACxC,CAEOC,SAAAA,CAAUJ,GACb,OAAKA,EAAa1J,aAIV0J,EAAalO,QAEN/B,KAAKwP,WAAWS,EAAaC,uBAGpClQ,KAAKiF,SAASgL,IACP,GAGnB,CAEOK,QAAAA,CAASL,GACZ,OAAIA,EAAa1J,YAAc0J,EAAalO,SAExC/B,KAAKoP,UAAUa,IACR,GAGAjQ,KAAKwP,WAAWS,EAAaM,YAE5C,CAEOf,UAAAA,CAAW5N,GACd,OAAKA,IAGD5B,KAAKyP,mBAAmB7N,IAEjB,EAEf,CAEQ+N,cAAiBa,IACrB,IAAKxQ,KAAKyQ,oBACN,OAAO,EAGX,MAAMR,EAAejQ,KAAKqP,kBAC1B,IAAKY,EACD,OAAO,EAGX,OAAQO,EAAEE,KACN,IAAK,YACD,OAAO1Q,KAAKgQ,SAASC,GAEzB,IAAK,UACD,OAAOjQ,KAAKmQ,OAAOF,GAEvB,IAAK,aACD,OAAOjQ,KAAKqQ,UAAUJ,GAE1B,IAAK,YACD,OAAOjQ,KAAKsQ,SAASL,GAEzB,QACI,OAAO,EACf,EAGIQ,iBAAAA,GACJ,OAAOzQ,KAAKuP,iBAAmBvP,KAAKsP,eACxC,ECpIJ,MAAMqB,EAAWA,CAACC,EAAsBC,KACpC,MAAMC,EAAaA,IAAe,iBAAgBD,IAE5CE,EAAgBA,CAClB7H,EACA8H,KAEA,MAAMC,EAAS/Q,OAAO+K,KAAK/B,EAAI8H,GAE/B,OAAIC,GAAUA,aAAkBC,EACrBD,EAEA,IACX,EAGEE,EAAeA,CAAC1D,EAAa2D,KAC/B,MAAMJ,EAAUF,IAEhB,IAAK,MAAM5H,KAAMuE,EAAI4D,MAAO,CAGxB,IAFuBN,EAAc7H,EAAI8H,GAEpB,CACjB,MACMC,EAAS,IADWL,EACW1H,EAAIkI,GAEpClR,OAAO+K,KAAK/B,EAAI8H,IACjB9Q,OAAO+K,KAAK/B,EAAI8H,EAASC,GAI7BA,EAAOK,MACX,CACJ,CAEA,OAAO7D,CAAG,EAyCbvN,OAAOqR,GAAWV,GAAc,SAE7BW,GAGA,IAAKA,EACD,OAAOL,EAAanR,KAAM,MACvB,GAAyB,iBAAdwR,EAAwB,CAEtC,OAAOL,EAAanR,KADJwR,EAEpB,CAAO,GAAyB,iBAAdA,GAA2C,MAAjBA,EAAU,GAAY,CAC9D,MAAMC,EAAeD,EAErB,GAAqB,YAAjBC,EACA,MApDWhE,KACnB,MAAMuD,EAAUF,IAEhB,IAAK,MAAM5H,KAAMuE,EAAI4D,MAAO,CACxB,MAAMJ,EAASF,EAAc7H,EAAI8H,GAE7BC,GACAA,EAAOS,UAGXxR,OAAOyR,WAAWzI,EAAI8H,EAC1B,GAyCeY,CAAc5R,MAClB,GAAqB,qBAAjByR,EACP,OAAOb,EACJ,IAAAiB,IAAAA,EAAAC,UAAAtP,OAdRuP,MAAIC,MAAAH,EAAAA,EAAAA,OAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAJF,EAAIE,EAAAH,GAAAA,UAAAG,GAeC,MA1CSC,EACjBzE,EACAgE,EACAM,KAEA,IAAII,EAAS,KAEb,IAAK,MAAMjJ,KAAMuE,EAAI4D,MAAO,CACxB,MAAMJ,EAAS/Q,OAAO+K,KAAK/B,EAAI4H,KAE/B,GAAIG,GAAUA,aAAkBC,EAAc,CAC1C,MACMkB,EADenB,EACeQ,GAEhCW,GAA4C,mBAAnBA,IACzBD,EAASC,EAAeC,MAAMpB,EAAQc,GAE9C,CACJ,CAEA,OAAOI,CAAM,EAsBED,CAAalS,KAAMyR,EAAcM,EAEhD,EAGH,EAGU,MAAMb,EACjB,eAAcP,CAASC,EAAsBC,GACzCF,EAASC,EAAaC,EAC1B,CAIAyB,gBAAqC,CAAA,EAMrC5S,WAAAA,CAAYwJ,EAAiBkI,GACzBpR,KAAKyN,IAAMvN,OAAOgJ,GAGlB,MAAMqJ,EAAYvS,KAAKN,YAA8B,SACrDM,KAAKoR,QAAU,IAAKmB,KAAanB,EACrC,CAEOM,OAAAA,GACH1R,KAAK8P,QACT,CAEOwB,IAAAA,GACH,CAGGxB,MAAAA,GACH,EC9HR,MAAM0C,EAAiChC,IAAiC,CACpE/P,MAAO+P,EAAE/P,MACTC,MAAO8P,EAAE9P,MACTiF,OAAQ6K,EAAE7K,OACVkB,cAAe2J,IAGbiC,EAA2BA,CAC7BC,EACAlC,KACgB,CAChB/P,MAAOiS,EAAMjS,MACbC,MAAOgS,EAAMhS,MACbiF,OAAQ+M,EAAM/M,OACdkB,cAAe2J,IAGnB,MAAemC,UAAmCzB,EAMvCI,IAAAA,GACH,MAAMpQ,EAAUlB,KAAKyN,IAAI4D,IAAI,GAEzBnQ,IACAA,EAAQ2O,iBAAiB,YAAa7P,KAAK4S,UAAW,CAClDC,SAAS,IAEb3R,EAAQ2O,iBAAiB,aAAc7P,KAAK8S,WAAY,CACpDD,SAAS,KAIjB7S,KAAK+S,gBAAiB,EACtB/S,KAAKgT,gBAAkB,KACvBhT,KAAKiT,iBAAkB,EACvBjT,KAAKkT,cAAgB,IACzB,CAEOpD,MAAAA,GACH,MAAM5G,EAAKlJ,KAAKyN,IAAI4D,IAAI,GAEpBnI,IAECA,EAAW6G,oBAAoB,YAAa/P,KAAK4S,UAAW,CACzDC,SAAS,IAIZ3J,EAAW6G,oBAAoB,aAAc/P,KAAK8S,WAAY,CAC3DD,SAAS,KAIjB7S,KAAKmT,+BACT,CAYQP,UAAapC,IAEjB,GAAiB,IAAbA,EAAE4C,OACF,OAGWpT,KAAKqT,gBAAgBb,EAA8BhC,KAEpDA,EAAE8C,YACZ9C,EAAE+C,gBACN,EAGIF,eAAAA,CAAgB3N,GAQpB,OANI1F,KAAK+S,gBACL/S,KAAKwT,cAAc9N,GAGvB1F,KAAKkT,cAAgBxN,IAEhB1F,KAAKyF,aAAaC,KAIvB1F,KAAKyT,oBAEE,EACX,CAEQA,gBAAAA,GACJrI,SAASyE,iBAAiB,YAAa7P,KAAK0T,UAAW,CACnDb,SAAS,IAEbzH,SAASyE,iBAAiB,YAAa7P,KAAK2T,UAAW,CACnDd,SAAS,IAEbzH,SAASyE,iBAAiB,UAAW7P,KAAK4T,QAAS,CAAEf,SAAS,IAC9DzH,SAASyE,iBAAiB,WAAY7P,KAAK6T,SAAU,CACjDhB,SAAS,IAGb,MAAMiB,EAAa9T,KAAK+T,gBAEpBD,EACA9T,KAAKgU,qBAAqBF,GAE1B9T,KAAKiT,iBAAkB,CAE/B,CAEQe,oBAAAA,CAAqBF,GACrB9T,KAAKgT,iBACL7K,aAAanI,KAAKgT,iBAGtBhT,KAAKgT,gBAAkB3R,OAAO6G,YAAW,KACjClI,KAAKkT,gBACLlT,KAAKiT,iBAAkB,EAC3B,GACDa,GAEH9T,KAAKiT,iBAAkB,CAC3B,CAEQS,UAAalD,IACjBxQ,KAAKiU,gBAAgBzD,EAAGgC,EAA8BhC,GAAG,EAGrDyD,eAAAA,CACJzD,EACA9K,GAEA,GAAI1F,KAAK+S,eAML,OALA/S,KAAKoG,UAAUV,QAEX8K,EAAE8C,YACF9C,EAAE+C,kBAKLvT,KAAKiT,kBAINjT,KAAKkT,gBACLlT,KAAK+S,gBAAyD,IAAxC/S,KAAK8F,WAAW9F,KAAKkT,gBAG3ClT,KAAK+S,gBACL/S,KAAKoG,UAAUV,GAEX8K,EAAE8C,YACF9C,EAAE+C,kBAGNvT,KAAKwT,cAAc9N,GAE3B,CAEQkO,QAAWpD,IACfxQ,KAAKwT,cAAchB,EAA8BhC,GAAG,EAGhDgD,aAAAA,CAAc9N,GAClB1F,KAAKmT,gCACLnT,KAAKiT,iBAAkB,EACvBjT,KAAKkT,cAAgB,KAEjBlT,KAAK+S,iBACL/S,KAAK+S,gBAAiB,EACtB/S,KAAK8G,UAAUpB,GAEvB,CAEQyN,6BAAAA,GAEH/H,SAAiB2E,oBAAoB,YAAa/P,KAAK0T,UAAW,CAC/Db,SAAS,IAGZzH,SAAiB2E,oBAAoB,YAAa/P,KAAK2T,UAAW,CAC/Dd,SAAS,IAGZzH,SAAiB2E,oBAAoB,UAAW/P,KAAK4T,QAAS,CAC3Df,SAAS,IAGZzH,SAAiB2E,oBAAoB,WAAY/P,KAAK6T,SAAU,CAC7DhB,SAAS,GAEjB,CAEQC,WAActC,IAClB,IAAKA,EACD,OAGJ,GAAIA,EAAE0D,QAAQ1R,OAAS,EACnB,OAGJ,MAAMkQ,EAAQlC,EAAE2D,eAAe,GAE1BzB,GAIL1S,KAAKqT,gBAAgBZ,EAAyBC,EAAOlC,GAAG,EAGpDmD,UAAanD,IACjB,IAAKA,EACD,OAGJ,GAAIA,EAAE0D,QAAQ1R,OAAS,EACnB,OAGJ,MAAMkQ,EAAQlC,EAAE2D,eAAe,GAE1BzB,GAIL1S,KAAKiU,gBAAgBzD,EAAGiC,EAAyBC,EAAOlC,GAAG,EAGvDqD,SAAYrD,IAChB,IAAKA,EACD,OAGJ,GAAIA,EAAE0D,QAAQ1R,OAAS,EACnB,OAGJ,MAAMkQ,EAAQlC,EAAE2D,eAAe,GAE1BzB,GAIL1S,KAAKwT,cAAcf,EAAyBC,EAAOlC,GAAG,ECtO/C,MAAM4D,EAajB1U,WAAAA,CAAW6E,GAWgB,IAXf8P,eACRA,EAAcC,YACdA,EAAWC,iBACXA,EAAgB5P,QAChBA,EAAO6P,sBACPA,EAAqBC,sBACrBA,EAAqBxP,SACrBA,EAAQC,gBACRA,EAAewP,oBACfA,EAAmBC,UACnBA,GACqBpQ,EACrBvE,KAAKqU,eAAiBA,EACtBrU,KAAKsU,YAAcA,EACnBtU,KAAKuU,iBAAmBA,EACxBvU,KAAK2E,QAAUA,EACf3E,KAAKwU,sBAAwBA,EAC7BxU,KAAKyU,sBAAwBA,EAC7BzU,KAAKiF,SAAWA,EAChBjF,KAAKkF,gBAAkBA,EACvBlF,KAAK0U,oBAAsBA,EAC3B1U,KAAK4U,gBAAkBD,CAC3B,CAEOA,SAAAA,GACH,MAAME,EAAQ5F,KAAK6F,UAAU9U,KAAK+U,YAE9B/U,KAAKyU,sBACLzU,KAAKyU,sBAAsBI,GACpB7U,KAAKgV,wBACZC,aAAaC,QAAQlV,KAAKmV,aAAcN,EAEhD,CAEOO,mBAAAA,GACH,MAAMC,EAAWrV,KAAKsV,kBAEtB,OAAID,EACOrV,KAAKuV,WAAWF,GAEhB,IAEf,CAEON,QAAAA,GA0BH,MAAO,CACHS,WA1BmBC,MACnB,MAAMC,EAAsB,GAS5B,OAPA1V,KAAK2E,WAAWlD,SAASG,IACjBA,EAAKG,SAAWH,EAAK+T,IAAM/T,EAAKI,eAChC0T,EAAU/R,KAAK/B,EAAK+T,KAEjB,KAGJD,CAAS,EAgBJD,GACZG,cAduBC,MACvB,MAAMC,EAA4B,GAQlC,OANA9V,KAAKuU,mBAAmB9R,SAASb,IACd,MAAXA,EAAK+T,IACLG,EAAgBnS,KAAK/B,EAAK+T,GAC9B,IAGGG,CAAe,EAKPD,GAEvB,CAQOE,eAAAA,CAAgBlB,GACnB,GAAKA,EAEE,CACH,IAAImB,GAAmB,EAWvB,OATInB,EAAMW,aACNQ,EAAmBhW,KAAKiW,iBAAiBpB,EAAMW,aAG/CX,EAAMe,gBACN5V,KAAKkW,iBACLlW,KAAKmW,mBAAmBtB,EAAMe,gBAG3BI,CACX,CAdI,OAAO,CAef,CAEOI,uBAAAA,CACHvB,EACAwB,GAEIxB,EACA7U,KAAKsW,0BACDzB,EAAMW,WACNX,EAAMe,cACNS,GAGJA,GAER,CAEOE,qBAAAA,GACH,MAAM1B,EAAQ7U,KAAKoV,sBAEnB,OAAIP,GAASA,EAAMe,eACRf,EAAMe,cAAc,IAEpB,IAEf,CAEQL,UAAAA,CAAWF,GACf,MAAMR,EAAQ5F,KAAKC,MAAMmG,GT3KXmB,MSmLd,OALI3B,GAASA,EAAMe,gBT7KV,iBADKY,ES8K4B3B,EAAMe,gBT7K3BY,EAAI,GAAM,KS+K3B3B,EAAMe,cAAgB,CAACf,EAAMe,gBAG1Bf,CACX,CAEQS,eAAAA,GACJ,OAAItV,KAAKwU,sBACExU,KAAKwU,wBACLxU,KAAKgV,uBACLC,aAAawB,QAAQzW,KAAKmV,cAE1B,IAEf,CAEQc,gBAAAA,CAAiBS,GACrB,IAAIV,GAAmB,EAEvB,IAAK,MAAMW,KAAUD,EAAS,CAC1B,MAAM9U,EAAO5B,KAAKsU,YAAYqC,GAE1B/U,IACKA,EAAKgV,eAGNZ,GAAmB,EAFnBpU,EAAKG,SAAU,EAK3B,CAEA,OAAOiU,CACX,CAEQG,kBAAAA,CAAmBO,GACvB,IAAIG,EAAc,EAElB,IAAK,MAAMF,KAAUD,EAAS,CAC1B,MAAM9U,EAAO5B,KAAKsU,YAAYqC,GAE1B/U,IACAiV,GAAe,EAEf7W,KAAKqU,eAAezS,GAE5B,CAEA,OAAuB,IAAhBiV,CACX,CAEQX,cAAAA,GACkBlW,KAAKuU,mBAEb9R,SAASb,IACnB5B,KAAK0U,oBAAoB9S,EAAK,GAEtC,CAEQ0U,yBAAAA,CACJQ,EACAC,EACAV,GAEA,IAAIW,EAAe,EACfN,EAAUI,EAEd,MAAMpB,EAAYA,KACd,MAAMuB,EAAc,GAEpB,IAAK,MAAMN,KAAUD,EAAS,CAC1B,MAAM9U,EAAO5B,KAAKsU,YAAYqC,GAEzB/U,EAGIA,EAAKiL,aACFjL,EAAKgV,eACLM,EAAgBtV,GAEhB5B,KAAKiF,SAASrD,GAAM,IAN5BqV,EAAYtT,KAAKgT,EAUzB,CAEAD,EAAUO,EAENjX,KAAKmW,mBAAmBY,IACxB/W,KAAKkF,gBAAgB,MAGJ,IAAjB8R,GACAX,GACJ,EAGEa,EAAmBtV,IACrBoV,GAAgB,EAChBhX,KAAKiF,SAASrD,GAAM,GAAO,KACvBoV,GAAgB,EAChBtB,GAAW,GACb,EAGNA,GACJ,CAEQP,UAAAA,GACJ,MAAoC,iBAAzBnV,KAAK4U,gBACL5U,KAAK4U,gBAEL,MAEf,CAEQI,oBAAAA,GAuBJ,OAJkC,MAA9BhV,KAAKmX,wBACLnX,KAAKmX,sBAnBWC,MAEhB,GAAoB,MAAhBnC,aACA,OAAO,EAGP,IACI,MAAMvE,EAAM,gBACZ2G,eAAenC,QAAQxE,EAAK,SAC5B2G,eAAeC,WAAW5G,EAC7B,CAAC,MAAO9B,GACL,OAAO,CACX,CAEA,OAAO,CACX,EAI6BwI,IAG1BpX,KAAKmX,qBAChB,EChTW,MAAMI,EAUjB7X,WAAAA,CAAW6E,GAA0C,IAAzCiT,WAAEA,EAAUC,gBAAEA,GAAyBlT,EAC/CvE,KAAKwX,WAAaA,EAClBxX,KAAKyX,gBAAkBA,CAC3B,CAEOC,wBAAAA,CAAyBjX,GAC5B,MAAMkX,EACF3X,KAAK4X,gCAAgCnX,GAErCT,KAAK6X,4BAA8BF,IACnC3X,KAAK6X,0BAA4BF,EAEG,MAAhC3X,KAAK8X,yBACLzW,OAAO8G,aAAanI,KAAK+X,uBAGzBJ,IACA3X,KAAK8X,wBAA0BzW,OAAO6G,WAClClI,KAAKgY,mBAAmBpI,KAAK5P,MAC7B,KAIhB,CAEOiY,sBAAAA,CAAuBvX,GAC1B,MAAMwX,EACFlY,KAAKmY,8BAA8BzX,GAEnCV,KAAKoY,0BAA4BF,IACjClY,KAAKoY,wBAA0BF,EAEG,MAA9BlY,KAAK+X,wBACL1W,OAAO8G,aAAanI,KAAK+X,uBACzB/X,KAAK+X,2BAAwBhS,GAG7BmS,IACAlY,KAAK+X,sBAAwB1W,OAAO6G,WAChClI,KAAKqY,iBAAiBzI,KAAK5P,MAC3B,KAIhB,CAEO0E,aAAAA,GACH,OAAO1E,KAAKwX,WAAWc,cAAgB,CAC3C,CAEOC,SAAAA,CAAU1X,GACKb,KAAKwX,WAAWnG,IAAI,GAC5BmH,UAAY3X,CAC1B,CAEO4X,aAAAA,GACHzY,KAAK6X,+BAA4B9R,EACjC/F,KAAKoY,6BAA0BrS,EAC/B/F,KAAK0Y,qBAAkB3S,EACvB/F,KAAK2Y,wBAAqB5S,CAC9B,CAEQ6R,+BAAAA,CACJnX,GAEA,MAAMmY,EAAqB5Y,KAAKwX,WAAW7W,SAC3C,IAAKiY,EACD,OAGJ,MAAMC,EAAY7Y,KAAKwX,WAAWnG,IAAI,GAEhCyH,EAAYF,EAAmBhY,KAAOiY,EAAUE,YAChDC,EAAWJ,EAAmBhY,KAIpC,OAHwBH,EAAQqY,EAAY,GAIjC,QAHYrY,EAAQuY,EAAW,GAK/B,YADJ,CAKX,CAEQb,6BAAAA,CACJzX,GAEA,OAAIA,EAAQV,KAAKiZ,qBACN,MAGPvY,EAAQV,KAAKkZ,wBACN,cADX,CAKJ,CAEQlB,kBAAAA,GACJ,IAAKhY,KAAK6X,0BACN,OAGJ,MAAMsB,EAA8C,SAAnCnZ,KAAK6X,2BAAwC,GAAK,GACjD7X,KAAKwX,WAAWnG,IAAI,GAE5B+H,SAAS,CACfxY,KAAMuY,EACNtY,IAAK,EACLwY,SAAU,YAGdrZ,KAAKyX,kBAELvP,WAAWlI,KAAKgY,mBAAmBpI,KAAK5P,MAAO,GACnD,CAEQqY,gBAAAA,GACJ,IAAKrY,KAAKoY,wBACN,OAGJ,MAAMe,EAA4C,QAAjCnZ,KAAKoY,yBAAqC,GAAK,GAC9CpY,KAAKwX,WAAWnG,IAAI,GAE5B+H,SAAS,CACfxY,KAAM,EACNC,IAAKsY,EACLE,SAAU,YAGdrZ,KAAKyX,kBAELvP,WAAWlI,KAAKqY,iBAAiBzI,KAAK5P,MAAO,GACjD,CAEQiZ,kBAAAA,GAKJ,OAJ4B,MAAxBjZ,KAAK0Y,kBACL1Y,KAAK0Y,gBAAkB1Y,KAAKwX,WAAW7W,UAAUE,KAAO,GAGrDb,KAAK0Y,eAChB,CAEQQ,qBAAAA,GAOJ,OAN+B,MAA3BlZ,KAAK2Y,qBACL3Y,KAAK2Y,mBACD3Y,KAAKiZ,sBACJjZ,KAAKwX,WAAW8B,eAAiB,IAGnCtZ,KAAK2Y,kBAChB,EC1KW,MAAMY,EAUjB7Z,WAAAA,CAAYO,EAA+BwX,GACvCzX,KAAKC,SAAWA,EAChBD,KAAKyX,gBAAkBA,CAC3B,CAEOC,wBAAAA,CAAyBjX,GAC5B,MAAMkX,EACF3X,KAAK4X,gCAAgCnX,GAErCT,KAAK6X,4BAA8BF,IACnC3X,KAAK6X,0BAA4BF,EAEG,MAAhC3X,KAAK8X,yBACLzW,OAAO8G,aAAanI,KAAK8X,yBAGzBH,IACA3X,KAAK8X,wBAA0BzW,OAAO6G,WAClClI,KAAKgY,mBAAmBpI,KAAK5P,MAC7B,KAIhB,CAEOiY,sBAAAA,CAAuBvX,GAC1B,MAAMwX,EACFlY,KAAKmY,8BAA8BzX,GAEnCV,KAAKoY,0BAA4BF,IACjClY,KAAKoY,wBAA0BF,EAEG,MAA9BlY,KAAK+X,wBACL1W,OAAO8G,aAAanI,KAAK+X,uBACzB/X,KAAK+X,2BAAwBhS,GAG7BmS,IACAlY,KAAK+X,sBAAwB1W,OAAO6G,WAChClI,KAAKqY,iBAAiBzI,KAAK5P,MAC3B,KAIhB,CAEO0E,aAAAA,GACH,OAAO0G,SAASoO,gBAAgBlB,UACpC,CAEOC,SAAAA,CAAU1X,GACb,MAAMF,EAASX,KAAKC,SAASU,SACvB8Y,EAAU9Y,EAASA,EAAOE,IAAM,EAEtCX,OAAOkL,UAAUoN,UAAU3X,EAAM4Y,EACrC,CAEOhB,aAAAA,GACHzY,KAAK6X,+BAA4B9R,EACjC/F,KAAKoY,6BAA0BrS,EAC/B/F,KAAK0Z,0BAAuB3T,EAC5B/F,KAAK2Z,yBAAsB5T,CAC/B,CAEQ6R,+BAAAA,CACJnX,GAEA,MAMMmZ,EAAiBnZ,GANLP,OAAOkL,UAEIkN,cAAgB,GAID,GAE5C,OAHwB7X,GAFJP,OAAOmB,QAAQ8H,SAAW,GAEA,IAGvBnJ,KAAK6Z,iBACjB,QAGPD,EACO,YADX,CAKJ,CAEQC,cAAAA,GACJ,MAAML,EAAkBpO,SAASoO,gBAEjC,OACIA,EAAgBlB,WAAakB,EAAgBT,YAC7C/Y,KAAK8Z,wBAEb,CAEQC,aAAAA,GACJ,MAAMP,EAAkBpO,SAASoO,gBAEjC,OACIA,EAAgBhB,UAAYgB,EAAgBQ,aAC5Cha,KAAKia,yBAEb,CAEQA,uBAAAA,GAMJ,OAJiC,MAA7Bja,KAAK0Z,uBACL1Z,KAAK0Z,qBAAuBtO,SAASoO,gBAAgBU,cAGlDla,KAAK0Z,oBAChB,CAEQI,sBAAAA,GAMJ,OAJgC,MAA5B9Z,KAAK2Z,sBACL3Z,KAAK2Z,oBAAsBvO,SAASoO,gBAAgBW,aAGjDna,KAAK2Z,mBAChB,CAEQxB,6BAAAA,CACJzX,GAEA,MAAM8X,EAAYtY,OAAOkL,UAAUoN,aAAe,EAGlD,GAFoB9X,EAAQ8X,EAEV,GACd,MAAO,MAKX,OAFqBtY,OAAOmB,QAAQ+H,UAAY,IAE5B1I,EAAQ8X,GAAa,IAAMxY,KAAK+Z,gBACzC,cADX,CAKJ,CAEQ/B,kBAAAA,GACJ,IAAKhY,KAAK6X,0BACN,OAGJ,MAAMsB,EAA8C,SAAnCnZ,KAAK6X,2BAAwC,GAAK,GACnExW,OAAO+X,SAAS,CAAExY,KAAMuY,EAAUtY,IAAK,EAAGwY,SAAU,YAEpDrZ,KAAKyX,kBAELvP,WAAWlI,KAAKgY,mBAAmBpI,KAAK5P,MAAO,GACnD,CAEQqY,gBAAAA,GACJ,IAAKrY,KAAKoY,wBACN,OAGJ,MAAMe,EAA4C,QAAjCnZ,KAAKoY,yBAAqC,GAAK,GAChE/W,OAAO+X,SAAS,CAAExY,KAAM,EAAGC,IAAKsY,EAAUE,SAAU,YAEpDrZ,KAAKyX,kBAELvP,WAAWlI,KAAKqY,iBAAiBzI,KAAK5P,MAAO,GACjD,EChLJ,MAAMoa,EAAena,IACjB,IAAK,MAAMoa,IAAQ,CAAC,WAAY,cAAe,CAC3C,MAAMC,EAAgBra,EAASK,IAAI+Z,GACnC,GAAsB,SAAlBC,GAA8C,WAAlBA,EAC5B,OAAO,CAEf,CAEA,OAAO,CAAK,EAoBVC,EAAqBA,CACvBnV,EACAqS,KAEA,MAAMD,EApBNpS,KAEA,GAAIgV,EAAYhV,GACZ,OAAOA,EAGX,IAAK,MAAMlE,KAAWkE,EAAaoV,UAAUnJ,MAAO,CAChD,MAAMpR,EAAWC,OAAOgB,GACxB,GAAIkZ,EAAYna,GACZ,OAAOA,CAEf,CAEA,OAAO,IAAI,EAOQwa,CAAsBrV,GAEzC,OAAIoS,GAAYhV,QAAqC,SAA3BgV,EAAW,IAAIkD,QAC9B,IAAInD,EAAsB,CAC7BC,aACAC,kBACArS,iBAGG,IAAImU,EAAqBnU,EAAcqS,EAClD,ECrCW,MAAMkD,EAKjBjb,WAAAA,CAAW6E,GAAyD,IAAxDkT,gBAAEA,EAAerS,aAAEA,GAAmCb,EAC9DvE,KAAKyX,gBAAkBA,EACvBzX,KAAK4a,kBAAe7U,EACpB/F,KAAKoF,aAAeA,CACxB,CAEOyV,cAAAA,CAAenV,GAClB1F,KAAKiY,uBAAuBvS,GAC5B1F,KAAK0X,yBAAyBhS,EAClC,CAEO+S,aAAAA,GACHzY,KAAK8a,kBAAkBrC,eAC3B,CAEOF,SAAAA,CAAU1X,GACbb,KAAK8a,kBAAkBvC,UAAU1X,EACrC,CAEO6D,aAAAA,GACH,OAAO1E,KAAK8a,kBAAkBpW,eAClC,CAEQuT,sBAAAA,CAAuBvS,GACD,MAAtBA,EAAahF,OAIjBV,KAAK8a,kBAAkB7C,uBAAuBvS,EAAahF,MAC/D,CAEQgX,wBAAAA,CAAyBhS,GACH,MAAtBA,EAAajF,OAIjBT,KAAK8a,kBAAkBpD,yBAAyBhS,EAAajF,MACjE,CAEQqa,eAAAA,GAQJ,OAPK9a,KAAK4a,eACN5a,KAAK4a,aAAeL,EAChBva,KAAKoF,aACLpF,KAAKyX,kBAINzX,KAAK4a,YAChB,ECvDW,MAAMG,EAKjBrb,WAAAA,CAAW6E,GAA+C,IAA9C+P,YAAEA,GAA0C/P,EACpDvE,KAAKsU,YAAcA,EACnBtU,KAAK+W,cAAgB,IAAIiE,IACzBhb,KAAKgH,OACT,CAEOqI,eAAAA,GACH,MAAM0H,EAAgB/W,KAAKuU,mBAE3B,OAAIwC,EAAcvU,QACPuU,EAAc,KAEd,CAEf,CAEOxC,gBAAAA,GACH,GAAIvU,KAAKib,mBACL,MAAO,CAACjb,KAAKib,oBACV,CACH,MAAMlE,EAAwB,GAS9B,OAPA/W,KAAK+W,cAActU,SAASkT,IACxB,MAAM/T,EAAO5B,KAAKsU,YAAYqB,GAC1B/T,GACAmV,EAAcpT,KAAK/B,EACvB,IAGGmV,CACX,CACJ,CAEOmE,qBAAAA,CAAsB3S,GACzB,GAAIvI,KAAKib,mBACL,OAAI1S,EAAO4S,WAAWnb,KAAKib,oBAChB,CAACjb,KAAKib,oBAEN,GAER,CACH,MAAMlE,EAAgB,GAEtB,IAAK,MAAMpB,KAAM3V,KAAK+W,cAClB,GACI1X,OAAOC,UAAUC,eAAeC,KAAKQ,KAAK+W,cAAepB,GAC3D,CACE,MAAM/T,EAAO5B,KAAKsU,YAAYqB,GAC1B/T,GAAQ2G,EAAO4S,WAAWvZ,IAC1BmV,EAAcpT,KAAK/B,EAE3B,CAGJ,OAAOmV,CACX,CACJ,CAEOrN,cAAAA,CAAe9H,GAClB,OAAe,MAAXA,EAAK+T,GACE3V,KAAK+W,cAAcqE,IAAIxZ,EAAK+T,MAC5B3V,KAAKib,oBACLjb,KAAKib,mBAAmB/Z,UAAYU,EAAKV,OAIxD,CAEO8F,KAAAA,GACHhH,KAAK+W,cAAc/P,QACnBhH,KAAKib,mBAAqB,IAC9B,CAEOvG,mBAAAA,CAAoB9S,GAA2C,IAA/ByZ,EAAevJ,UAAAtP,OAAA,QAAAuD,IAAA+L,UAAA,IAAAA,UAAA,GACnC,MAAXlQ,EAAK+T,GAED3V,KAAKib,oBACLrZ,EAAKV,UAAYlB,KAAKib,mBAAmB/Z,UAEzClB,KAAKib,mBAAqB,OAG9Bjb,KAAK+W,cAAcuE,OAAO1Z,EAAK+T,IAE3B0F,GACAzZ,EAAKH,SAAQ,KACM,MAAXG,EAAK+T,IACL3V,KAAK+W,cAAcuE,OAAO1Z,EAAK+T,KAE5B,KAIvB,CAEOtB,cAAAA,CAAezS,GACH,MAAXA,EAAK+T,GACL3V,KAAK+W,cAAc5Q,IAAIvE,EAAK+T,IAE5B3V,KAAKib,mBAAqBrZ,CAElC,EC7GG,MAAM2Z,EACTtQ,GAEgB,iBAATA,GACP,aAAcA,GACdA,EAAe,oBAAa+G,MCJzB,MAAMwJ,EAgBT9b,WAAAA,GAIE,IAHE+b,EAAyB3J,UAAAtP,OAAA,QAAAuD,IAAA+L,UAAA,GAAAA,UAAA,GAAG,KAC5B4J,EAAM5J,UAAAtP,OAAA,QAAAuD,IAAA+L,UAAA,IAAAA,UAAA,GACN6J,EAAS7J,UAAAtP,OAAA,QAAAuD,IAAA+L,UAAA,GAAAA,UAAA,GAAG0J,EAEZxb,KAAKZ,KAAO,GACZY,KAAK4W,gBAAiB,EAEtB5W,KAAK0L,cACW,MAAZ+P,GACAF,EAAyBE,IACI,IAA7BA,EAASlZ,SAASC,OAEtBxC,KAAK4b,QAAQH,GAEbzb,KAAKuC,SAAW,GAChBvC,KAAKuI,OAAS,KAEVmT,IACA1b,KAAK6b,UAAY,IAAIC,IACrB9b,KAAKwB,KAAOxB,KACZA,KAAK2b,UAAYA,EAEzB,CAkBOC,OAAAA,CAAQG,GACX,GAAKA,EAEE,GAAiB,iBAANA,EACd/b,KAAKZ,KAAO2c,OACT,GAAiB,iBAANA,EACd,IAAK,MAAMrL,KAAOqL,EACd,GAAI1c,OAAOC,UAAUC,eAAeC,KAAKuc,EAAGrL,GAAM,CAC9C,MAAM1P,EAAQ+a,EAAErL,GAEJ,UAARA,GAA2B,SAARA,EAEE,iBAAV1P,IACPhB,KAAKZ,KAAO4B,GAED,aAAR0P,GAA8B,WAARA,IAE7B1Q,KAAK0Q,GAAO1P,EAEpB,CAGZ,CAmBOgb,YAAAA,CAAa/Q,GAChBjL,KAAKic,iBAEL,IAAK,MAAMC,KAAajR,EAAM,CAC1B,MAAMrJ,EAAO5B,KAAKmc,WAAWD,GAC7Blc,KAAKoc,SAASxa,GAEV2Z,EAAyBW,IACzBta,EAAKoa,aAAaE,EAAU3Z,SAEpC,CAEA,OAAOvC,IACX,CASOoc,QAAAA,CAASxa,GACZ5B,KAAKuC,SAASoB,KAAK/B,GACnBA,EAAKya,UAAUrc,KACnB,CAUOsc,kBAAAA,CAAmB1a,EAAY2a,GAClCvc,KAAKuC,SAASia,OAAOD,EAAO,EAAG3a,GAC/BA,EAAKya,UAAUrc,KACnB,CAOOyc,WAAAA,CAAY7a,GAEfA,EAAKqa,iBAELjc,KAAK0c,cAAc9a,EACvB,CAOO+a,aAAAA,CAAc/a,GACjB,OAAO5B,KAAKuC,SAASqa,QAAQhb,EACjC,CASOI,WAAAA,GACH,OAAgC,IAAzBhC,KAAKuC,SAASC,MACzB,CAEO+D,QAAAA,GACH,OAAOvG,KAAKgC,eAAiBhC,KAAK4W,cACtC,CAmBOnV,OAAAA,CAAQob,GACX,MAAMC,EAAWA,CAAClb,EAAYiJ,KAC1B,GAAIjJ,EAAKW,SACL,IAAK,MAAMK,KAAShB,EAAKW,SAAU,CAChBsa,EAASja,EAAOiI,IAEjBjI,EAAMZ,eAChB8a,EAASla,EAAOiI,EAAQ,EAEhC,CACJ,EAGJiS,EAAS9c,KAAM,EACnB,CAUOyI,QAAAA,CACHL,EACAC,EACAlJ,GAEA,IAAKiJ,EAAUG,QAAUH,EAAU+S,WAAW9S,GAG1C,OAAO,EAIP,OAFAD,EAAUG,OAAOmU,cAActU,GAEvBjJ,GACJ,KAAKX,EAASK,MACV,QAAIwJ,EAAWE,SACXF,EAAWE,OAAO+T,mBACdlU,EACAC,EAAWE,OAAOoU,cAActU,GAAc,IAE3C,GAKf,KAAK7J,EAASG,OACV,QAAI0J,EAAWE,SACXF,EAAWE,OAAO+T,mBACdlU,EACAC,EAAWE,OAAOoU,cAActU,KAE7B,GAKf,KAAK7J,EAASO,OAGV,OADAsJ,EAAWiU,mBAAmBlU,EAAW,IAClC,EAGX,QACI,OAAO,EAGvB,CAKO2U,OAAAA,GACH,MAAMC,EAAoBC,GACfA,EAAMC,KAAKtb,IACd,MAAMub,EAAmC,CAAA,EAEzC,IAAK,MAAMC,KAAKxb,EACZ,IAUsB,IATlB,CACI,SACA,WACA,UACA,YACA,iBACA,YACA,OACA,iBACFgb,QAAQQ,IACV/d,OAAOC,UAAUC,eAAeC,KAAKoC,EAAMwb,GAC7C,CACE,MAAMC,EAAIzb,EAAKwb,GACfD,EAAQC,GAAKC,CACjB,CAOJ,OAJIzb,EAAKI,gBACLmb,EAAkB,SAAIH,EAAiBpb,EAAKW,WAGzC4a,CAAO,IAItB,OACWH,EAjCalL,UAAAtP,OAAA,QAAAuD,IAAA+L,UAAA,IAAAA,UAAA,GAiCI,CAAC9R,MAEDA,KAAKuC,SAErC,CAEO+a,aAAAA,CAAcle,GACjB,OAAOY,KAAKud,mBAAmB3b,GAAeA,EAAKxC,OAASA,GAChE,CAEOoe,sBAAAA,CAAuBpe,GAC1B,MAAMwC,EAAO5B,KAAKud,mBAAmB/G,GAAYA,EAAEpX,OAASA,IAE5D,IAAKwC,EACD,KAAO,kBAAiBxC,cAG5B,OAAOwC,CACX,CAEO2b,iBAAAA,CAAkBV,GACrB,IAAI1K,EAAsB,KAa1B,OAXAnS,KAAKyB,SAASG,IACNuQ,KAEO0K,EAASjb,KAChBuQ,EAASvQ,GACF,MAMRuQ,CACX,CAEOsL,QAAAA,CAASC,GACZ,GAAK1d,KAAKuI,OAEH,CACH,MAAM3G,EAAO5B,KAAKmc,WAAWuB,GAEvBC,EAAa3d,KAAKuI,OAAOoU,cAAc3c,MAI7C,OAHAA,KAAKuI,OAAO+T,mBAAmB1a,EAAM+b,EAAa,GAElD/b,EAAKgc,qBAAqBF,GACnB9b,CACX,CATI,OAAO,IAUf,CAEOic,SAAAA,CAAUH,GACb,GAAK1d,KAAKuI,OAEH,CACH,MAAM3G,EAAO5B,KAAKmc,WAAWuB,GAEvBC,EAAa3d,KAAKuI,OAAOoU,cAAc3c,MAI7C,OAHAA,KAAKuI,OAAO+T,mBAAmB1a,EAAM+b,GAErC/b,EAAKgc,qBAAqBF,GACnB9b,CACX,CATI,OAAO,IAUf,CAEOkc,SAAAA,CAAUJ,GACb,GAAK1d,KAAKuI,OAEH,CACH,MAAMwV,EAAY/d,KAAKmc,WAAWuB,GAE9B1d,KAAKwB,MACLuc,EAAU1B,UAAUrc,KAAKwB,MAE7B,MAAMwc,EAAiBhe,KAAKuI,OAE5B,IAAK,MAAM3F,KAASob,EAAezb,SAC/Bwb,EAAU3B,SAASxZ,GAKvB,OAFAob,EAAezb,SAAW,GAC1Byb,EAAe5B,SAAS2B,GACjBA,CACX,CAhBI,OAAO,IAiBf,CAEOjd,MAAAA,GACCd,KAAKuI,SACLvI,KAAKuI,OAAOkU,YAAYzc,MACxBA,KAAKuI,OAAS,KAEtB,CAEOhI,MAAAA,CAAOmd,GACV,MAAM9b,EAAO5B,KAAKmc,WAAWuB,GAI7B,OAHA1d,KAAKoc,SAASxa,GAEdA,EAAKgc,qBAAqBF,GACnB9b,CACX,CAEOqc,OAAAA,CAAQP,GACX,MAAM9b,EAAO5B,KAAKmc,WAAWuB,GAI7B,OAHA1d,KAAKsc,mBAAmB1a,EAAM,GAE9BA,EAAKgc,qBAAqBF,GACnB9b,CACX,CAEOuZ,UAAAA,CAAWvZ,GACd,IAAI2G,EAAS3G,EAAK2G,OAElB,KAAOA,GAAQ,CACX,GAAIA,IAAWvI,KACX,OAAO,EAGXuI,EAASA,EAAOA,MACpB,CAEA,OAAO,CACX,CAEOmC,QAAAA,GACH,IAAIG,EAAQ,EACRjJ,EAAa5B,KAEjB,KAAO4B,EAAK2G,QACRsC,GAAS,EACTjJ,EAAOA,EAAK2G,OAGhB,OAAOsC,CACX,CAEOyJ,WAAAA,CAAYqC,GACf,OAAO3W,KAAK6b,UAAUxK,IAAIsF,IAAW,IACzC,CAEOuH,cAAAA,CAAetc,GACH,MAAXA,EAAK+T,IACL3V,KAAK6b,UAAUsC,IAAIvc,EAAK+T,GAAI/T,EAEpC,CAEOwc,mBAAAA,CAAoBxc,GACR,MAAXA,EAAK+T,IACL3V,KAAK6b,UAAUP,OAAO1Z,EAAK+T,GAEnC,CAEOsG,cAAAA,GACHjc,KAAKyB,SAASmB,IACV5C,KAAKwB,MAAM4c,oBAAoBxb,IACxB,KAGX5C,KAAKuC,SAAW,EACpB,CAEO8b,kBAAAA,GACH,GAAKre,KAAKuI,OAEH,CACH,MAAM+V,EAAgBte,KAAKuI,OAAOoU,cAAc3c,MAAQ,EACxD,OAAIse,GAAiB,GACVte,KAAKuI,OAAOhG,SAAS+b,IAErB,IAEf,CARI,OAAO,IASf,CAEOC,cAAAA,GACH,GAAKve,KAAKuI,OAEH,CACH,MAAMiW,EAAYxe,KAAKuI,OAAOoU,cAAc3c,MAAQ,EACpD,OAAIwe,EAAYxe,KAAKuI,OAAOhG,SAASC,QAC1BxC,KAAKuI,OAAOhG,SAASic,IAErB,IAEf,CARI,OAAO,IASf,CAEOC,kBAAAA,CAAmB/N,EAAa1P,GACnC,OAAOhB,KAAK0e,QAAQ9c,GAAeA,EAAK8O,KAAS1P,GACrD,CAEO0d,MAAAA,CAAOC,GACV,MAAMxM,EAAiB,GAUvB,OARAnS,KAAKyB,SAASG,IACN+c,EAAE/c,IACFuQ,EAAOxO,KAAK/B,IAGT,KAGJuQ,CACX,CAEOyM,WAAAA,GACH,MAD8B9M,UAAAtP,OAAA,QAAAuD,IAAA+L,UAAA,KAAAA,UAAA,KACP9R,KAAKgC,cACxB,OAAOhC,KAAKuC,SAAS,IAAM,KACxB,GAAKvC,KAAKuI,OAEV,CACH,MAAMsW,EAAc7e,KAAKue,iBAEzB,OAAIM,GAGO7e,KAAKuI,OAAOqW,aAAY,EAEvC,CATI,OAAO,IAUf,CAEO1O,kBAAAA,GACH,GAAIlQ,KAAKgC,eAAiBhC,KAAK+B,QAE3B,OAAO/B,KAAKuC,SAAS,IAAM,KAE3B,GAAKvC,KAAKuI,OAEH,CACH,MAAMsW,EAAc7e,KAAKue,iBACzB,OAAIM,GAKO7e,KAAKuI,OAAOqW,aAAY,EAEvC,CAVI,OAAO,IAYnB,CAEOE,eAAAA,GACH,GAAK9e,KAAKuI,OAEH,CACH,MAAMwW,EAAkB/e,KAAKqe,qBAE7B,OAAKU,EAEMA,EAAgB/c,cAChB+c,EAAgBC,eAEhBD,EAJA/e,KAAKuQ,WAMpB,CAXI,OAAO,IAYf,CAEOH,sBAAAA,GACH,GAAKpQ,KAAKuI,OAEH,CACH,MAAMwW,EAAkB/e,KAAKqe,qBAE7B,OAAKU,EAGAA,EAAgB/c,eAChB+c,EAAgBhd,QAMVgd,EAAgBC,eAHhBD,EANA/e,KAAKuQ,WAWpB,CAhBI,OAAO,IAiBf,CAEOA,SAAAA,GAEH,OAAKvQ,KAAKuI,QAEEvI,KAAKuI,OAAOA,OAIbvI,KAAKuI,OALL,IAOf,CAEOyW,YAAAA,GACH,GAAKhf,KAAKgC,cAEH,CACH,MAAMid,EAAYjf,KAAKuC,SAASvC,KAAKuC,SAASC,OAAS,GAEvD,OAAKyc,EAICA,EAAUjd,eAAiBid,EAAUld,QAGhCkd,GAAWD,eAFXC,EAJA,IAQf,CAbI,OAAO,IAcf,CAGOC,YAAAA,CAAajU,GAChB,MAWMkU,EAAeC,IACjB,IAAK,MAAMxc,KAASwc,EAAc,CAC9B,MAAMxd,EAAO5B,KAAKmc,aAClBva,EAAKsd,aAAatc,GAClB5C,KAAKoc,SAASxa,EAClB,GAhBa6Z,KACbzb,KAAK4b,QAAQH,GAGTF,EAAyBE,IACzBA,EAASlZ,SAASC,QAElB2c,EAAY1D,EAASlZ,SACzB,EAWJ8c,CAAQpU,EACZ,CAEQoR,SAAAA,CAAU9T,GACdvI,KAAKuI,OAASA,EACdvI,KAAKwB,KAAO+G,EAAO/G,KACnBxB,KAAKwB,MAAM0c,eAAele,KAC9B,CAEQ0c,aAAAA,CAAc9a,GAClB5B,KAAKuC,SAASia,OAAOxc,KAAK2c,cAAc/a,GAAO,GAC/C5B,KAAKwB,MAAM4c,oBAAoBxc,EACnC,CAEQ0d,YAAAA,GACJ,OAAOtf,KAAK2b,WAAa3b,MAAMwB,MAAMma,WAAaH,CACtD,CAEQW,UAAAA,CAAWV,GAEf,OAAO,IADWzb,KAAKsf,eAChB,CAAc7D,EACzB,CAGQmC,oBAAAA,CAAqBF,GACrBnC,EAAyBmC,IAAaA,EAASnb,SAASC,QACxDxC,KAAKgc,aAAa0B,EAASnb,SAEnC,ECjpBJ,MAAMgd,EAGF7f,WAAAA,CAAYwB,EAAsBoX,GAC9B,MAAMnM,EAAMjL,EAAQse,cAAc,4BAElC,IAAKrT,EAED,YADAnM,KAAKyf,UAAO1Z,GAIhB,MAAMoD,EAAQlF,KAAKyb,IAAIxe,EAAQye,YAAcrH,EAAa,EAAG,GACvDlP,EAASnF,KAAKyb,IAAIxe,EAAQ8Y,aAAe,EAAG,GAE5CyF,EAAOrU,SAASC,cAAc,QACpCoU,EAAKnU,UAAY,gBACjBmU,EAAKG,MAAMzW,MAAS,GAAEA,MACtBsW,EAAKG,MAAMxW,OAAU,GAAEA,MAEvBpJ,KAAKyf,KAAOA,EAEZtT,EAAI5L,OAAOP,KAAKyf,KACpB,CAEO3e,MAAAA,GACHd,KAAKyf,MAAM3e,QACf,ECxBJ,MAAM+e,EAKFngB,WAAAA,CAAYkC,EAAYV,EAAsB/B,GAC1Ca,KAAKkB,QAAUA,EACflB,KAAK4B,KAAOA,EACZ5B,KAAK8f,MAAQ9f,KAAK+f,qBAEd5gB,IAAaX,EAASK,MACtBmB,KAAKggB,YACE7gB,IAAaX,EAASG,OAC7BqB,KAAKigB,aACE9gB,IAAaX,EAASO,SACzB6C,EAAK2E,YAAc3E,EAAKG,QACxB/B,KAAKkgB,uBAELlgB,KAAKmgB,aAGjB,CAEOrf,MAAAA,GACHd,KAAK8f,MAAMhf,QACf,CAEQkf,SAAAA,GACJhgB,KAAKkB,QAAQtC,MAAMoB,KAAK8f,MAC5B,CAEQG,UAAAA,GACJjgB,KAAKkB,QAAQxC,OAAOsB,KAAK8f,MAC7B,CAEQI,oBAAAA,GACJ,MAAME,EAAepgB,KAAK4B,KAAKW,SAAS,IAAIrB,QAExCkf,GACAA,EAAa1hB,OAAOsB,KAAK8f,MAEjC,CAEQK,UAAAA,GACJngB,KAAKkB,QAAQtC,MAAMoB,KAAK8f,OACxB9f,KAAK8f,MAAM5Z,UAAUC,IAAI,gBAC7B,CAEQ4Z,kBAAAA,GACJ,MAAMD,EAAQ1U,SAASC,cAAc,MACrCyU,EAAMxU,UAAY,6BAElB,MAAM+U,EAAajV,SAASC,cAAc,QAC1CgV,EAAW/U,UAAY,8BACvBwU,EAAMvf,OAAO8f,GAEb,MAAMC,EAAWlV,SAASC,cAAc,QAIxC,OAHAiV,EAAShV,UAAY,4BACrBwU,EAAMvf,OAAO+f,GAENR,CACX,ECnDJ,MAAMS,EAOF7gB,WAAAA,CAAW6E,GAKW,IALVG,cACRA,EAAa9C,KACbA,EAAIkI,SACJA,EAAQ1E,aACRA,GACgBb,EAChBvE,KAAK0E,cAAgBA,EACrB1E,KAAK8J,SAAWA,EAChB9J,KAAKoF,aAAeA,EAEpBpF,KAAKsR,KAAK1P,EACd,CAEO0P,IAAAA,CAAK1P,GAGR,GAFA5B,KAAK4B,KAAOA,GAEPA,EAAKV,QAAS,CACf,MAAMA,EAAUlB,KAAKoF,aAAaiM,IAAI,GAElCnQ,IACAU,EAAKV,QAAUA,EAEvB,CAEIU,EAAKV,UACLlB,KAAKkB,QAAUU,EAAKV,QAE5B,CAEO2G,WAAAA,CAAY1I,GACf,OAAIa,KAAKwgB,uBAAuBrhB,GACrB,IAAIogB,EAAevf,KAAKkB,QAASlB,KAAK0E,iBAEtC,IAAImb,EAAc7f,KAAK4B,KAAM5B,KAAKkB,QAAS/B,EAE1D,CAEOshB,MAAAA,CAAOC,GACV1gB,KAAKkB,QAAQgF,UAAUC,IAAI,mBAE3B,MAAMmG,EAAYtM,KAAK2gB,eACjB7W,EAAW9J,KAAK8J,SAGN,MAAZA,GACAwC,EAAUf,aAAa,WAAYzB,EAAS8W,YAGhDtU,EAAUf,aAAa,gBAAiB,QAEpCmV,GACApU,EAAUuU,OAElB,CAEOC,QAAAA,GACH9gB,KAAKkB,QAAQgF,UAAUpF,OAAO,mBAE9B,MAAMwL,EAAYtM,KAAK2gB,eACvBrU,EAAUyU,gBAAgB,YAC1BzU,EAAUf,aAAa,gBAAiB,SAExCe,EAAU0U,MACd,CAEUC,KAAAA,GACN,OAAOjhB,KAAKkB,QAAQse,cAAc,cACtC,CAEUmB,YAAAA,GACN,OAAO3gB,KAAKkB,QAAQse,cAChB,+CAER,CAEUgB,sBAAAA,CAAuBrhB,GAC7B,OAAOA,IAAaX,EAASO,MACjC,ECxFJ,MAAMmiB,UAAsBX,EAKxB7gB,WAAAA,CAAW6E,GAQa,IARZ0F,kBACRA,EAAiBvF,cACjBA,EAAa9C,KACbA,EAAImI,kBACJA,EAAiBD,SACjBA,EAAQ1E,aACRA,EAAYC,aACZA,GACkBd,EAClBrB,MAAM,CACFwB,gBACA9C,OACAkI,WACA1E,iBAGJpF,KAAKiK,kBAAoBA,EACzBjK,KAAK+J,kBAAoBA,EACzB/J,KAAKqF,aAAeA,CACxB,CAEO8b,IAAAA,CACH3T,GAGI,IAFJrI,IAAK2M,UAAAtP,OAAA,QAAAuD,IAAA+L,UAAA,KAAAA,UAAA,GACLsP,EAA+BtP,UAAAtP,OAAA,QAAAuD,IAAA+L,UAAA,GAAAA,UAAA,GAAG,OAElC,GAAI9R,KAAK4B,KAAKG,QACV,OAGJ/B,KAAK4B,KAAKG,SAAU,EAEpB,MAAMqR,EAASpT,KAAKqhB,YACpBjO,EAAOlN,UAAUpF,OAAO,iBACxBsS,EAAOxG,UAAY,GAEnB,MAAM7C,EAAoB/J,KAAK+J,kBAE/B,GAAIA,EAAmB,CACnB,MAAMuX,EAAOvX,EAAkBsC,WAAU,GACzC+G,EAAOpI,YAAYsW,EACvB,CAEA,MAAMC,EAASA,KACXvhB,KAAKkB,QAAQgF,UAAUpF,OAAO,iBAEZd,KAAK2gB,eACbpV,aAAa,gBAAiB,QAEpCiC,GACAA,EAAWxN,KAAK4B,MAGpB5B,KAAKqF,aAAa,YAAa,CAC3BzD,KAAM5B,KAAK4B,MACb,EAGFuD,EACAjF,OAAOF,KAAKihB,SAASO,UAAUJ,EAAgBG,IAE/CrhB,OAAOF,KAAKihB,SAASQ,OACrBF,IAER,CAEOG,KAAAA,GAGC,IAFJvc,IAAK2M,UAAAtP,OAAA,QAAAuD,IAAA+L,UAAA,KAAAA,UAAA,GACLsP,EAA2CtP,UAAAtP,OAAA,QAAAuD,IAAA+L,UAAA,GAAAA,UAAA,GAAG,OAE9C,IAAK9R,KAAK4B,KAAKG,QACX,OAGJ/B,KAAK4B,KAAKG,SAAU,EAEpB,MAAMqR,EAASpT,KAAKqhB,YACpBjO,EAAOlN,UAAUC,IAAI,iBACrBiN,EAAOxG,UAAY,GAEnB,MAAM3C,EAAoBjK,KAAKiK,kBAE/B,GAAIA,EAAmB,CACnB,MAAMqX,EAAOrX,EAAkBoC,WAAU,GACzC+G,EAAOpI,YAAYsW,EACvB,CAEA,MAAMK,EAAUA,KACZ3hB,KAAKkB,QAAQgF,UAAUC,IAAI,iBAETnG,KAAK2gB,eACbpV,aAAa,gBAAiB,SAExCvL,KAAKqF,aAAa,aAAc,CAC5BzD,KAAM5B,KAAK4B,MACb,EAGFuD,EACAjF,OAAOF,KAAKihB,SAASW,QAAQR,EAAgBO,IAE7CzhB,OAAOF,KAAKihB,SAASY,OACrBF,IAER,CAEUnB,sBAAAA,CAAuBrhB,GAC7B,OAAQa,KAAK4B,KAAKG,SAAW5C,IAAaX,EAASO,MACvD,CAEQsiB,SAAAA,GACJ,OAAOrhB,KAAKkB,QAAQse,cAChB,8CAER,ECpGJ,MAAMsC,EAAsB,0BACtBC,EAAiB,uBAEhB,MAAMC,UAAqBrP,EAC9BL,gBAA2C,CACvC8O,eAAgB,OAChBrhB,YAAY,EACZkiB,UAAU,EACV3Y,YAAY,EAGZC,gBAAYxD,EACZkF,UAAMlF,EACNkH,gBAAYlH,EACZmc,aAASnc,EACT0D,aAAa,EACb8F,iBAAiB,EACjBoM,UAAWH,EACX5W,eAAWmB,EACXlB,iBAAakB,EACboc,qBAAiBpc,EACjByD,gBAAYzD,EACZjB,gBAAYiB,EACZhB,gBAAYgB,EACZyO,2BAAuBzO,EACvBf,oBAAgBe,EAChBoH,kBAAcpH,EACdqH,eAAWrH,EACX0O,2BAAuB1O,EACvB4D,WAAY,WACZ3B,gBAAiB,IAGjB4B,SAAK7D,EACL4O,WAAW,EACXyN,YAAY,EACZvY,iBAAiB,EACjB1E,OAAO,EACPkd,cAAe,IACfvY,SAAU,EACVwY,gBAAgB,GAebC,MAAAA,CAAO3gB,GAAuD,IAA3C4gB,EAA0B1Q,UAAAtP,OAAA,QAAAuD,IAAA+L,UAAA,GAAAA,UAAA,GAAG,KACnD,IAAKlQ,EACD,MAAM6gB,MAAMX,GAGhB,MAAM3c,EAAQqd,GAAcxiB,KAAKoR,QAAQjM,MAQzC,OANIvD,EAAKG,QACL/B,KAAKoP,UAAUxN,EAAMuD,GAErBnF,KAAKiF,SAASrD,EAAMuD,GAGjBnF,KAAKkB,OAChB,CAEOyD,OAAAA,GACH,OAAO3E,KAAKwB,IAChB,CAEOgO,UAAAA,CACH5N,EACA8gB,GAGA,OADA1iB,KAAK2iB,aAAa/gB,EAAM8gB,GACjB1iB,KAAKkB,OAChB,CAEOmO,eAAAA,GACH,OAAOrP,KAAK4iB,kBAAkBvT,iBAClC,CAEOwT,MAAAA,GACH,OAAO5T,KAAK6F,UAAU9U,KAAKwB,KAAKub,UACpC,CAEO7P,QAAAA,CAASjC,EAAkBsC,GAE9B,OADAvN,KAAK8iB,WAAW7X,EAAMsC,GACfvN,KAAKkB,OAChB,CAgBO6hB,eAAAA,CACHC,EACAC,EACAC,GAkBA,MAhBsB,iBAAXF,EAEPhjB,KAAKmjB,kBACDH,EACAC,EACAC,GAAU,MAIdljB,KAAKmjB,kBACD,KACAH,EACAC,GAIDjjB,KAAKkB,OAChB,CAEOkiB,MAAAA,CAAO5V,GAEV,OADAxN,KAAKmjB,kBAAkB,KAAM,KAAM3V,GAC5BxN,KAAKkB,OAChB,CAEO8E,OAAAA,GAEH,OADAhG,KAAKqjB,iBAAiB,MACfrjB,KAAKkB,OAChB,CAEOoT,WAAAA,CAAYqC,GACf,OAAO3W,KAAKwB,KAAK8S,YAAYqC,EACjC,CAEO2G,aAAAA,CAAcle,GACjB,OAAOY,KAAKwB,KAAK8b,cAAcle,EACnC,CAEOoe,sBAAAA,CAAuBpe,GAC1B,OAAOY,KAAKwB,KAAKgc,uBAAuBpe,EAC5C,CAEOqf,kBAAAA,CAAmB/N,EAAa1P,GACnC,OAAOhB,KAAKwB,KAAKid,mBAAmB/N,EAAK1P,EAC7C,CAEOsiB,oBAAAA,CACHC,GAEA,MAAMriB,EACFqiB,aAAwBC,YAClBD,EACAA,EAAa,GAEvB,OAAKriB,EAIElB,KAAKyjB,QAAQviB,GAHT,IAIf,CAEOqc,iBAAAA,CAAkBV,GACrB,OAAO7c,KAAKwB,KAAK+b,kBAAkBV,EACvC,CAEO5X,QAAAA,CACHrD,EACAohB,EACAC,GAEA,IAAKrhB,EACD,MAAM6gB,MAAMX,GAGhB,MAmBO3c,EAAOqI,GAnBMkW,MAChB,IAAIlW,EACArI,EAcJ,MrBtOoD,mBqB0NrC6d,GACXxV,EAAawV,EACb7d,EAAQ,OAERA,EAAQ6d,EACRxV,EAAayV,GAGJ,MAAT9d,IACAA,EAAQnF,KAAKoR,QAAQjM,QAAS,GAG3B,CAACA,EAAOqI,EAAW,EAGFkW,GAG5B,OADA1jB,KAAK2jB,UAAU/hB,EAAMuD,EAAOqI,GACrBxN,KAAKkB,OAChB,CAEOkO,SAAAA,CAAUxN,EAAY4gB,GACzB,IAAK5gB,EACD,MAAM6gB,MAAMX,GAGhB,MAAM3c,EAAQqd,GAAcxiB,KAAKoR,QAAQjM,MAWzC,OATIvD,EAAK2E,YAAc3E,EAAK8J,iBACxB1L,KAAK4jB,oBAAoBhiB,GAAM8f,MAC3Bvc,EACAnF,KAAKoR,QAAQgQ,gBAGjBphB,KAAK2U,aAGF3U,KAAKkB,OAChB,CAEOqE,UAAAA,GACH,OAAOvF,KAAK6jB,WAAWte,UAC3B,CAEOkS,eAAAA,GAEH,OADAzX,KAAK6jB,WAAW7d,UACThG,KAAKkB,OAChB,CAEO4iB,YAAAA,CACHC,EACAC,GAEA,MAAMC,EAAUD,EAAavG,SAASsG,GAMtC,OAJIE,GACAjkB,KAAKqjB,iBAAiBW,EAAazb,QAGhC0b,CACX,CAEOC,aAAAA,CACHH,EACAC,GAEA,IAAKA,EACD,MAAMvB,MAAMV,EAAiB,gBAGjC,MAAMkC,EAAUD,EAAanG,UAAUkG,GAMvC,OAJIE,GACAjkB,KAAKqjB,iBAAiBW,EAAazb,QAGhC0b,CACX,CAEOE,aAAAA,CACHJ,EACAC,GAEA,IAAKA,EACD,MAAMvB,MAAMV,EAAiB,gBAGjC,MAAMkC,EAAUD,EAAalG,UAAUiG,GAMvC,OAJIE,GACAjkB,KAAKqjB,iBAAiBY,EAAQ1b,QAG3B0b,CACX,CAEOG,UAAAA,CAAWxiB,GACd,IAAKA,EACD,MAAM6gB,MAAMX,GAGhB,IAAKlgB,EAAK2G,OACN,MAAMka,MAAM,sBAGhBziB,KAAK4iB,kBAAkBlO,oBAAoB9S,GAAM,GAEjD,MAAM2G,EAAS3G,EAAK2G,OAIpB,OAHA3G,EAAKd,SACLd,KAAKqjB,iBAAiB9a,GAEfvI,KAAKkB,OAChB,CAEOmjB,UAAAA,CAAWN,EAAuBO,GACrC,MAAM/W,EAAa+W,GAAmBtkB,KAAKwB,KAErCI,EAAO2L,EAAWhN,OAAOwjB,GAI/B,OAFA/jB,KAAKqjB,iBAAiB9V,GAEf3L,CACX,CAEO2iB,WAAAA,CAAYR,EAAuBO,GACtC,MAAM/W,EAAa+W,GAAmBtkB,KAAKwB,KAErCI,EAAO2L,EAAW0Q,QAAQ8F,GAIhC,OAFA/jB,KAAKqjB,iBAAiB9V,GAEf3L,CACX,CAEO4iB,UAAAA,CAAW5iB,EAAYqJ,GAC1B,IAAKrJ,EACD,MAAM6gB,MAAMX,GAGhB,MAAM2C,EACc,iBAATxZ,GAAqBA,EAAK0K,IAAM1K,EAAK0K,KAAO/T,EAAK+T,GA0B5D,OAxBI8O,GACAzkB,KAAKwB,KAAK4c,oBAAoBxc,GAGlCA,EAAKga,QAAQ3Q,GAETwZ,GACAzkB,KAAKwB,KAAK0c,eAAetc,GAIT,iBAATqJ,GACPA,EAAe,UACfA,EAAe,oBAAa+G,QAE5BpQ,EAAKqa,iBAEDhR,EAAK1I,SAASC,QACdZ,EAAKoa,aAAa/Q,EAAK1I,WAI/BvC,KAAKqjB,iBAAiBzhB,GAEf5B,KAAKkB,OAChB,CAEQwjB,uBAAAA,CAAwBC,GAC5B,MAAM1U,EAAejQ,KAAKqP,kBAE1B,QAAKY,IAGM0U,IAAY1U,GAAgB0U,EAAQxJ,WAAWlL,GAE9D,CAEOxH,QAAAA,CAAS7G,EAAYyG,EAAkBlJ,GAC1C,IAAKyC,EACD,MAAM6gB,MAAMX,GAGhB,IAAKzZ,EACD,MAAMoa,MAAMV,EAAiB,cAGjC,MAAM6C,EvB9XVnmB,EuB8XsCU,GAOlC,YALsB4G,IAAlB6e,IACA5kB,KAAKwB,KAAKiH,SAAS7G,EAAMyG,EAAYuc,GACrC5kB,KAAKqjB,iBAAiB,OAGnBrjB,KAAKkB,OAChB,CAEOkU,mBAAAA,GACH,OAAOpV,KAAK6kB,iBAAiBzP,qBACjC,CAEOf,cAAAA,CAAezS,EAAY8e,GAC9B,IAAK9e,EACD,MAAM6gB,MAAMX,GAYhB,OATA9hB,KAAK4iB,kBAAkBvO,eAAezS,GACtC5B,KAAK8kB,YAAYljB,GAEjB5B,KAAK+kB,uBAAuBnjB,GAAM6e,YACb1a,IAAjB2a,GAAoCA,GAGxC1gB,KAAK2U,YAEE3U,KAAKkB,OAChB,CAEOqT,gBAAAA,GACH,OAAOvU,KAAK4iB,kBAAkBrO,kBAClC,CAEO7K,cAAAA,CAAe9H,GAClB,IAAKA,EACD,MAAM6gB,MAAMX,GAGhB,OAAO9hB,KAAK4iB,kBAAkBlZ,eAAe9H,EACjD,CAEO8S,mBAAAA,CAAoB9S,GACvB,IAAKA,EACD,MAAM6gB,MAAMX,GAQhB,OALA9hB,KAAK4iB,kBAAkBlO,oBAAoB9S,GAE3C5B,KAAK+kB,uBAAuBnjB,GAAMkf,WAClC9gB,KAAK2U,YAEE3U,KAAKkB,OAChB,CAEO8jB,YAAAA,CAAapjB,GAChB,IAAKA,EACD,MAAM6gB,MAAMX,GAGhB,MAEMjhB,GAFUX,OAAO0B,EAAKV,SAASP,UAAUE,KAAO,IACtCb,KAAKyN,IAAI9M,UAAUE,KAAO,GAK1C,OAFAb,KAAKilB,cAAc1M,UAAU1X,GAEtBb,KAAKkB,OAChB,CAEO6T,QAAAA,GACH,OAAO/U,KAAK6kB,iBAAiB9P,UACjC,CAEOmQ,QAAAA,CAASrQ,GAIZ,OAHA7U,KAAK6kB,iBAAiB9O,gBAAgBlB,GACtC7U,KAAKqjB,iBAAiB,MAEfrjB,KAAKkB,OAChB,CAEOikB,SAAAA,CAAUC,EAAgBpkB,GAE7B,OADChB,KAAKoR,QAA+CgU,GAAUpkB,EACxDhB,KAAKkB,OAChB,CAEO8O,QAAAA,GACH,MAAMC,EAAejQ,KAAKqP,kBAK1B,OAJIY,GACAjQ,KAAKqlB,WAAWrV,SAASC,GAGtBjQ,KAAKkB,OAChB,CAEOiP,MAAAA,GACH,MAAMF,EAAejQ,KAAKqP,kBAK1B,OAJIY,GACAjQ,KAAKqlB,WAAWlV,OAAOF,GAGpBjQ,KAAKkB,OAChB,CAEOokB,UAAAA,GACH,MClgBQ,ODmgBZ,CAEOC,aAAAA,CACHC,EACAC,GAEA,MAAMC,EAAQxlB,OAAOylB,MAAMH,EAAWC,GAEtC,OADAzlB,KAAKkB,QAAQ0kB,QAAQF,GACdA,CACX,CAEO/B,SAAAA,CACH/hB,GAGI,IAFJuD,IAAK2M,UAAAtP,OAAA,QAAAuD,IAAA+L,UAAA,KAAAA,UAAA,GACLtE,EAA6BsE,UAAAtP,OAAAsP,EAAAA,kBAAA/L,EAE7B,MAAM8f,EAAaA,CACfC,EACAC,EACAC,KAEsBhmB,KAAK4jB,oBAAoBkC,GACjC3E,KACV6E,EACAD,EACA/lB,KAAKoR,QAAQgQ,eAChB,EAGL,GAAIxf,EAAK2E,YAAc3E,EAAK8J,cACxB,GAAI9J,EAAKgV,eACL5W,KAAKimB,mBAAmBrkB,EAAMuD,EAAOqI,OAClC,CACH,IAAIjF,EAAS3G,EAAK2G,OAElB,KAAOA,GAECA,EAAOA,QACPsd,EAAWtd,GAAQ,GAEvBA,EAASA,EAAOA,OAGpBsd,EAAWjkB,EAAMuD,EAAOqI,GACxBxN,KAAK2U,WACT,CAER,CAMO0O,gBAAAA,CAAiBlZ,GACpB,MAAMuW,EAAe1gB,KAAKsP,gBACpB4W,IAAa/b,GACbnK,KAAK0kB,wBAAwBva,GAGnCnK,KAAKmmB,SAASjc,OAAOC,GAEjB+b,GACAlmB,KAAKomB,kBAAkB1F,GAG3B1gB,KAAKulB,cAAc,eACvB,CAEOR,sBAAAA,CAAuBnjB,GAC1B,OAAIA,EAAK2E,WACEvG,KAAK4jB,oBAAoBhiB,GAEzB5B,KAAKqmB,kBAAkBzkB,EAEtC,CAEO0kB,eAAAA,CAAgBplB,GACnB,MAAMU,EAAO5B,KAAKyjB,QAAQviB,GAC1B,OAAIU,EACO5B,KAAK+kB,uBAAuBnjB,GAE5B,IAEf,CAEO2kB,cAAAA,GACH,OAAOvmB,KAAKilB,cAAcvgB,eAC9B,CAEO4M,IAAAA,GACHpO,MAAMoO,OAENtR,KAAKkB,QAAUlB,KAAKyN,IACpBzN,KAAKwmB,eAAgB,EAErBxmB,KAAKoR,QAAQxH,IAAM5J,KAAKymB,eAEO,MAA3BzmB,KAAKoR,QAAQ7H,aACbvJ,KAAKoR,QAAQ7H,WAAavJ,KAAK0mB,wBAGnC1mB,KAAK2mB,kBAEL3mB,KAAK4mB,WAEL5mB,KAAKkB,QAAQ2lB,GAAG,QAAS7mB,KAAK8mB,aAC9B9mB,KAAKkB,QAAQ2lB,GAAG,WAAY7mB,KAAK+mB,gBAE7B/mB,KAAKoR,QAAQkR,gBACbtiB,KAAKkB,QAAQ2lB,GAAG,cAAe7mB,KAAKgnB,kBAE5C,CAEOlX,MAAAA,GACH9P,KAAKkB,QAAQwH,QACb1I,KAAKkB,QAAQ+lB,MAEbjnB,KAAKqlB,WAAWvV,SAEhB9P,KAAKwB,KAAO,IAAIga,EAAK,CAAE,GAAE,GAEzBtY,MAAM4M,QACV,CAEUrK,YAAAA,CAAaC,GACnB,QAAI1F,KAAKoR,QAAQ3H,aACNzJ,KAAK6jB,WAAWpe,aAAaC,EAI5C,CAEUI,UAAAA,CAAWJ,GACjB,QAAI1F,KAAKoR,QAAQ3H,aACNzJ,KAAK6jB,WAAW/d,WAAWJ,EAI1C,CAEUU,SAAAA,CAAUV,GAChB,GAAI1F,KAAKoR,QAAQ3H,YAAa,CAC1B,MAAM0I,EAASnS,KAAK6jB,WAAWzd,UAAUV,GAGzC,OADA1F,KAAKilB,cAAcpK,eAAenV,GAC3ByM,CACX,CACI,OAAO,CAEf,CAEUrL,SAAAA,CAAUpB,GAChB,QAAI1F,KAAKoR,QAAQ3H,cACbzJ,KAAKilB,cAAcxM,gBACZzY,KAAK6jB,WAAW/c,UAAUpB,GAIzC,CAEUqO,aAAAA,GACN,OAAO/T,KAAKoR,QAAQiR,eAAiB,CACzC,CAEQuE,QAAAA,GACJ,GAAI5mB,KAAKoR,QAAQnG,KACbjL,KAAK8iB,WAAW9iB,KAAKoR,QAAQnG,KAAM,UAChC,CACajL,KAAKknB,eAAe,MAGhClnB,KAAKmjB,kBAAkB,KAAM,KAAM,MAEnCnjB,KAAK8iB,WAAW,GAAI,KAE5B,CACJ,CAEQoE,cAAAA,CAAetlB,GACnB,MAAMsgB,EACFliB,KAAKoR,QAAQ8Q,SAAYliB,KAAKkB,QAAQ+J,KAAK,OAUzCkc,EAAkB7Z,IACpB,GAAI1L,GAAM+T,GAAI,CAEV,MAAM1K,EAAO,CAAErJ,KAAMA,EAAK+T,IAC1BrI,EAAc,KAAIrC,CACtB,KAAO,CAEH,MAAMmc,EAAiBpnB,KAAKuW,wBAC5B,GAAI6Q,EAAgB,CAChB,MAAMnc,EAAO,CAAE2K,cAAewR,GAC9B9Z,EAAc,KAAIrC,CACtB,CACJ,GAGJ,MAAuB,mBAAZiX,EACAA,EAAQtgB,GACW,iBAAZsgB,EAzBQrT,KACtB,MAAMvB,EAA+B,CAAEuB,OAIvC,OAFAsY,EAAe7Z,GAERA,CAAO,EAqBP+Z,CAAiBnF,GACjBA,GAA8B,iBAAZA,GACzBiF,EAAejF,GACRA,GAEA,IAEf,CAEQ3L,qBAAAA,GACJ,OAAIvW,KAAKoR,QAAQuD,UACN3U,KAAK6kB,iBAAiBtO,wBAEtB,IAEf,CAEQ+Q,QAAAA,CAASrc,GACb,MAAMsc,EAASA,KACNvnB,KAAKwmB,gBACNxmB,KAAKwmB,eAAgB,EACrBxmB,KAAKulB,cAAc,aACvB,EAGJ,IAAKvlB,KAAKoR,QAAQuK,UACd,OAGJ3b,KAAKwB,KAAO,IAAIxB,KAAKoR,QAAQuK,UACzB,MACA,EACA3b,KAAKoR,QAAQuK,WAGjB3b,KAAK4iB,kBAAkB5b,QAEvBhH,KAAKwB,KAAKwa,aAAa/Q,GAEvB,MAAM+K,EAAmBhW,KAAK+V,kBAE9B/V,KAAKqjB,iBAAiB,MAEjBrN,EAIDhW,KAAKoW,wBAAwBmR,GAH7BA,GAKR,CAIQxR,eAAAA,GACJ,MAmBMyR,EAAgBA,KAElB,IAA8B,IAA1BxnB,KAAKoR,QAAQ6Q,SACb,OAAO,EAGX,MAAMwF,EAAWznB,KAAK0nB,sBACtB,IAAI1R,GAAmB,EAcvB,OAZAhW,KAAKwB,KAAKC,SAAQ,CAACG,EAAYiJ,IACvBjJ,EAAKgV,gBACLZ,GAAmB,GACZ,KACCpU,EAAKI,gBAGbJ,EAAKG,SAAU,EACR8I,IAAU4c,KAIlBzR,CAAgB,EAG3B,IAAK2R,EAAY3R,GA3CI4R,MAEjB,GAAK5nB,KAAKoR,QAAQuD,UAEX,CACH,MAAME,EAAQ7U,KAAK6kB,iBAAiBzP,sBAEpC,GAAKP,EAEE,CAKH,MAAO,EAAC,EAHJ7U,KAAK6kB,iBAAiB9O,gBAAgBlB,GAI9C,CAPI,MAAO,EAAC,GAAO,EAQvB,CAbI,MAAO,EAAC,GAAO,EAanB,EA2BiC+S,GAMrC,OAJKD,IACD3R,EAAmBwR,KAGhBxR,CACX,CAIQI,uBAAAA,CAAwBC,GAC5B,MAmBMmR,EAAgBA,KAClB,MAAMC,EAAWznB,KAAK0nB,sBACtB,IAAI1Q,EAAe,EAEnB,MAAME,EAAmBtV,IACrBoV,GAAgB,EAChBhX,KAAK2jB,UAAU/hB,GAAM,GAAO,KACxBoV,GAAgB,EAChBtB,GAAW,GACb,EAGAA,EAAYA,KACd1V,KAAKwB,KAAKC,SAAQ,CAACG,EAAYiJ,IACvBjJ,EAAKgV,gBACAhV,EAAKiL,YACNqK,EAAgBtV,IAGb,IAEP5B,KAAK2jB,UAAU/hB,GAAM,GAEdiJ,IAAU4c,KAIJ,IAAjBzQ,GACAX,GACJ,EAGJX,GAAW,EAnDMkS,MACjB,GAAK5nB,KAAKoR,QAAQuD,UAEX,CACH,MAAME,EAAQ7U,KAAK6kB,iBAAiBzP,sBAEpC,QAAKP,IAGD7U,KAAK6kB,iBAAiBzO,wBAClBvB,EACAwB,IAGG,EAEf,CAdI,OAAO,CAcX,EAsCCuR,IACDJ,GAER,CAEQE,mBAAAA,GACJ,OAA8B,IAA1B1nB,KAAKoR,QAAQ6Q,UACL,EACgC,iBAA1BjiB,KAAKoR,QAAQ6Q,SACpBjiB,KAAKoR,QAAQ6Q,SACoB,iBAA1BjiB,KAAKoR,QAAQ6Q,SACpB4F,SAAS7nB,KAAKoR,QAAQ6Q,SAAU,IAEhC,CAEf,CAEQ6E,YACJtW,IAEA,MAAMsX,EAAc9nB,KAAK+nB,eAAevX,EAAE7K,QAE1C,GAAImiB,EACA,GAAyB,WAArBA,EAAYE,KACZhoB,KAAKuiB,OAAOuF,EAAYlmB,KAAM5B,KAAKoR,QAAQjM,OAE3CqL,EAAE+C,iBACF/C,EAAEyX,uBACC,GAAyB,UAArBH,EAAYE,KAAkB,CACrC,MAAMpmB,EAAOkmB,EAAYlmB,KACX5B,KAAKulB,cAAc,aAAc,CAC3C3jB,OACAsmB,YAAa1X,IAGNvH,sBACPjJ,KAAK2iB,aAAa/gB,EAE1B,CACJ,EAGImlB,eACJvW,IAEA,MAAMsX,EAAc9nB,KAAK+nB,eAAevX,EAAE7K,QAEhB,UAAtBmiB,GAAaE,MACbhoB,KAAKulB,cAAc,gBAAiB,CAChC3jB,KAAMkmB,EAAYlmB,KAClBsmB,YAAa1X,GAErB,EAGIuX,cAAAA,CAAe7mB,GACnB,MAAMkS,EAASlS,EAAQinB,QAAQ,mBAE/B,GAAI/U,EAAQ,CACR,MAAMxR,EAAO5B,KAAKyjB,QAAQrQ,GAE1B,GAAIxR,EACA,MAAO,CACHomB,KAAM,SACNpmB,OAGZ,KAAO,CACH,MAAMwmB,EAAgBlnB,EAAQinB,QAAQ,mBAEtC,GAAIC,EAAe,CACf,MAAMxmB,EAAO5B,KAAKyjB,QAAQ2E,GAC1B,GAAIxmB,EACA,MAAO,CACHomB,KAAM,QACNpmB,OAGZ,CACJ,CAEA,OAAO,IACX,CAEQ6hB,OAAAA,CAAQviB,GACZ,MAAMmnB,EAAYnnB,EAAQinB,QAAQ,oBAElC,OAAIE,EACOnoB,OAAOmoB,GAAWpd,KAAK,QAEvB,IAEf,CAEQ+b,kBACJxW,IAEA,MAAMrE,EAAMqE,EAAE7K,OAAOwiB,QAAQ,kCAE7B,GAAIhc,EAAK,CACL,MAAMvK,EAAO5B,KAAKyjB,QAAQtX,GAC1B,GAAIvK,EAQA,OAPA4O,EAAE+C,iBACF/C,EAAEyX,kBAEFjoB,KAAKulB,cAAc,mBAAoB,CACnC3jB,OACAsmB,YAAa1X,KAEV,CAEf,CAEA,OAAO,IAAI,EAGPmE,SAAAA,GACA3U,KAAKoR,QAAQuD,WACb3U,KAAK6kB,iBAAiBlQ,WAE9B,CAEQyR,iBAAAA,CAAkB1F,GACtB,MAAM9e,EAAO5B,KAAKqP,kBAClB,GAAIzN,EAAM,CACN,MAAMiE,EAAc7F,KAAK+kB,uBAAuBnjB,GAC5CiE,GACAA,EAAY4a,OAAOC,EAE3B,CACJ,CAEQ4H,mBAAAA,GACJ,MAAM1mB,EAAO5B,KAAKqP,kBACdzN,GACA5B,KAAK0U,oBAAoB9S,EAEjC,CAEQ8kB,oBAAAA,GACJ,OAAI1mB,KAAKoR,QAAQxH,IAEN,WAGA,UAEf,CAEQ6c,YAAAA,GACJ,GAAwB,MAApBzmB,KAAKoR,QAAQxH,IACb,OAAO5J,KAAKoR,QAAQxH,IACjB,CACH,MAAM2e,EAAUvoB,KAAKkB,QAAQ+J,KAAK,OAElC,OACgB,OAAZsd,IACY,IAAZA,QACYxiB,IAAZwiB,CAMR,CACJ,CAEQ5F,YAAAA,CACJ/gB,EACA8gB,GAEA,MAAM/N,EAAYA,KACV3U,KAAKoR,QAAQuD,WACb3U,KAAK6kB,iBAAiBlQ,WAC1B,EAGJ,IAAK/S,EAID,OAFA5B,KAAKsoB,2BACL3T,IAGJ,MACM6T,EAAgB,CADG9H,cAAc,EAAM+H,YAAY,KACV/F,GAAgB,CAAE,GAajE,GAXkBgG,KACV1oB,KAAKoR,QAAQ+Q,iBAEmB,IAA5BniB,KAAKoR,QAAQgR,YACbpiB,KAAKoR,QAAQ+Q,gBAAgBvgB,IAGE,IAA5B5B,KAAKoR,QAAQgR,WAIvBsG,GAAL,CAIA,GAAI1oB,KAAK4iB,kBAAkBlZ,eAAe9H,GAClC4mB,EAAcC,aACdzoB,KAAKsoB,sBACLtoB,KAAKulB,cAAc,cAAe,CAC9B3jB,KAAM,KACN+mB,cAAe/mB,SAGpB,CACH,MAAMgnB,EAAiB5oB,KAAKqP,mBAAqB,KACjDrP,KAAKsoB,sBACLtoB,KAAKqU,eAAezS,EAAM4mB,EAAc9H,cAExC1gB,KAAKulB,cAAc,cAAe,CAC9B3jB,OACAinB,gBAAiBD,IAErB5oB,KAAK8kB,YAAYljB,EACrB,CAEA+S,GAtBA,CAuBJ,CAEQmO,UAAAA,CAAW7X,EAAyBsC,GACpCtC,IACIsC,GACAvN,KAAK8oB,cAAcvb,GACnBvN,KAAK+oB,YAAY9d,EAAMsC,IAEvBvN,KAAKsnB,SAASrc,GAGdjL,KAAKuF,cACLvF,KAAK6jB,WAAW7d,WAIxBhG,KAAKulB,cAAc,iBAAkB,CACjCyD,UAAW/d,EACXge,YAAa1b,GAErB,CAEQub,aAAAA,CAAcvb,GAClB,MAAM2b,EACFlpB,KAAK4iB,kBAAkB1H,sBAAsB3N,GACjD,IAAK,MAAMiJ,KAAK0S,EACZlpB,KAAK4iB,kBAAkBlO,oBAAoB8B,EAEnD,CAEQuS,WAAAA,CAAY9d,EAAkBsC,GAClCA,EAAWyO,aAAa/Q,GAExBsC,EAAWqJ,gBAAiB,EAC5BrJ,EAAWV,YAAa,EAExB7M,KAAKqjB,iBAAiB9V,EAC1B,CAEQ4V,iBAAAA,CACJgG,EACA5b,EACAC,GAEA,MAAMF,EAAU6b,GAAgBnpB,KAAKknB,eAAe3Z,GAEpDvN,KAAKopB,WAAW/b,YAAYC,EAASC,EAAYC,EACrD,CAEQyY,kBAAAA,CACJrkB,GAGI,IAFJuD,IAAK2M,UAAAtP,OAAA,QAAAuD,IAAA+L,UAAA,KAAAA,UAAA,GACLtE,EAA6BsE,UAAAtP,OAAAsP,EAAAA,kBAAA/L,EAE7BnE,EAAKiL,YAAa,EAElB7M,KAAKmjB,kBAAkB,KAAMvhB,GAAM,KAC/B5B,KAAK2jB,UAAU/hB,EAAMuD,EAAOqI,EAAW,GAE/C,CAEQ6b,eAAAA,CAAgBnoB,GACpB,MAAMU,EAAO5B,KAAKyjB,QAAQviB,GAE1B,OAAe,MAARU,GAAgBA,EAAKJ,OAASxB,KAAKwB,IAC9C,CAEQ8N,aAAAA,GACJ,MAAMga,EAAgBle,SAASke,cAE/B,OAAO7d,QACH6d,GAC8B,SAA1BA,EAAc5O,SACd1a,KAAKqpB,gBAAgBC,GAEjC,CAEQ3C,eAAAA,GACJ,MAAM5mB,WACFA,EAAUuJ,WACVA,EAAUC,WACVA,EAAU0D,WACVA,EAAUxD,YACVA,EAAW8F,gBACXA,EAAe3K,UACfA,EAAS4E,WACTA,EAAU1E,WACVA,EAAUC,WACVA,EAAUyP,sBACVA,EAAqBxP,eACrBA,EAAcmI,aACdA,EAAYC,UACZA,EAASqH,sBACTA,EAAqB9K,WACrBA,EAAU3B,gBACVA,EAAe4B,IACfA,EAAG+K,UACHA,EAAS9K,gBACTA,EAAe1E,MACfA,EAAK2E,SACLA,GACA9J,KAAKoR,QAEHhC,EAAYpP,KAAKoP,UAAUQ,KAAK5P,MAChCwE,EAAiBxE,KAAKsmB,gBAAgB1W,KAAK5P,MAC3CyE,EAAwBzE,KAAK+kB,uBAAuBnV,KAAK5P,MACzDsU,EAActU,KAAKsU,YAAY1E,KAAK5P,MACpC0E,EAAgB1E,KAAKumB,eAAe3W,KAAK5P,MACzCqP,EAAkBrP,KAAKqP,gBAAgBO,KAAK5P,MAC5C2E,EAAU3E,KAAK2E,QAAQiL,KAAK5P,MAC5BsP,EAAgBtP,KAAKsP,cAAcM,KAAK5P,MACxCkN,EAAWlN,KAAKkN,SAAS0C,KAAK5P,MAC9BiF,EAAWjF,KAAK2jB,UAAU/T,KAAK5P,MAC/BkF,EAAkBlF,KAAKqjB,iBAAiBzT,KAAK5P,MAC7CyX,EAAkBzX,KAAKyX,gBAAgB7H,KAAK5P,MAC5CwP,EAAaxP,KAAKwP,WAAWI,KAAK5P,MAClCoF,EAAepF,KAAKkB,QACpBmE,EAAerF,KAAKulB,cAAc3V,KAAK5P,MAEvC4iB,EAAoB,IAAI7H,EAAkB,CAC5CzG,gBAGED,EACFuO,EAAkBvO,eAAezE,KAAKgT,GACpCrO,EACFqO,EAAkBrO,iBAAiB3E,KAAKgT,GACtClZ,EACFkZ,EAAkBlZ,eAAekG,KAAKgT,GACpClO,EACFkO,EAAkBlO,oBAAoB9E,KAAKgT,GAEzCwG,EAAa,IAAIpc,EAAW,CAC9BC,aACAC,WACAC,eACAC,YACAhI,eACAC,iBAGEwf,EAAmB,IAAIzQ,EAAiB,CAC1CC,iBACAC,cACAC,mBACA5P,UACA6P,wBACAC,wBACAxP,WACAC,kBACAwP,sBACAC,cAGEkP,EAAa,IAAIvf,EAAmB,CACtCvE,aACAyE,iBACAC,wBACAC,gBACAC,UACAC,YACAE,aACAC,aACAC,iBACAgD,kBACA/C,WACAC,kBACAC,QACAC,eACAC,iBAGE4f,EAAgB,IAAItK,EAAc,CACpClD,kBACArS,iBAGEigB,EAAa,IAAIlW,EAAW,CAC9BC,YACAC,kBACAC,gBACAC,kBACAtK,WACAuK,eAGE2W,GAAW,IAAI9c,EAAiB,CAClCtJ,aACAuJ,aACAC,aACAE,cACAxJ,SAAUmF,EACVT,UACA+E,iBACAF,aACAG,aACAC,MACAC,kBACAC,aAGJ9J,KAAKopB,WAAaA,EAClBppB,KAAK6jB,WAAaA,EAClB7jB,KAAKqlB,WAAaA,EAClBrlB,KAAKmmB,SAAWA,GAChBnmB,KAAK6kB,iBAAmBA,EACxB7kB,KAAKilB,cAAgBA,EACrBjlB,KAAK4iB,kBAAoBA,CAC7B,CAEQgB,mBAAAA,CAAoBhiB,GACxB,MAAMqI,EAAoBjK,KAAKmmB,SAASlc,kBAClCvF,EAAgB1E,KAAKumB,eAAe3W,KAAK5P,MACzC+J,EAAoB/J,KAAKmmB,SAASpc,kBAClCD,EAAW9J,KAAKoR,QAAQtH,SACxB1E,EAAepF,KAAKkB,QACpBmE,EAAerF,KAAKulB,cAAc3V,KAAK5P,MAE7C,OAAO,IAAIkhB,EAAc,CACrBjX,oBACAvF,gBACA9C,OACAmI,oBACAD,WACA1E,eACAC,gBAER,CAEQghB,iBAAAA,CAAkBzkB,GACtB,MAAM8C,EAAgB1E,KAAKumB,eAAe3W,KAAK5P,MACzC8J,EAAW9J,KAAKoR,QAAQtH,SACxB1E,EAAepF,KAAKkB,QAE1B,OAAO,IAAIqf,EAAY,CACnB7b,gBACA9C,OACAkI,WACA1E,gBAER,CAEQ0f,WAAAA,CAAYljB,GAChB,MAAM2G,EAAS3G,EAAK2G,OAEhBA,GAAUA,EAAOA,SAAWA,EAAOxG,SACnC/B,KAAKiF,SAASsD,GAAQ,EAE9B,SAGJ2I,EAAaP,SAASqR,EAAc"}