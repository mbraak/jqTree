{"version":3,"file":"tree.jquery.js","sources":["src/version.ts","src/node.ts","src/dragAndDropHandler.ts","src/util.ts","src/elementsRenderer.ts","src/dataLoader.ts","src/keyHandler.ts","src/simple.widget.ts","src/mouse.widget.ts","src/saveStateHandler.ts","src/scrollHandler.ts","src/selectNodeHandler.ts","src/nodeElement.ts","src/tree.jquery.ts"],"sourcesContent":["const version = \"1.6.2\";\n\nexport default version;\n","interface NodeRecordWithChildren extends NodeRecord {\n    children: NodeData[];\n}\n\nexport enum Position {\n    Before = 1,\n    After,\n    Inside,\n    None,\n}\n\nconst positionNames: Record<string, Position> = {\n    before: Position.Before,\n    after: Position.After,\n    inside: Position.Inside,\n    none: Position.None,\n};\n\ntype IterateCallback = (node: Node, level: number) => boolean;\n\nexport const getPositionName = (position: Position): string => {\n    for (const name in positionNames) {\n        if (Object.prototype.hasOwnProperty.call(positionNames, name)) {\n            if (positionNames[name] === position) {\n                return name;\n            }\n        }\n    }\n\n    return \"\";\n};\n\nexport const getPosition = (name: string): Position | undefined =>\n    positionNames[name];\n\nconst isNodeRecordWithChildren = (\n    data: NodeData\n): data is NodeRecordWithChildren =>\n    typeof data === \"object\" &&\n    \"children\" in data &&\n    data[\"children\"] instanceof Array;\n\nexport class Node implements INode {\n    public id?: NodeId;\n    public name: string;\n    public children: Node[];\n    public parent: Node | null;\n    public idMapping: Map<NodeId, Node>;\n    public tree?: Node;\n    public nodeClass?: typeof Node;\n    public load_on_demand: boolean;\n    public is_open: boolean;\n    public element: HTMLElement;\n    public is_loading: boolean;\n    public isEmptyFolder: boolean;\n\n    [key: string]: unknown;\n\n    constructor(o: NodeData | null = null, isRoot = false, nodeClass = Node) {\n        this.name = \"\";\n        this.isEmptyFolder = false;\n        this.load_on_demand = false;\n\n        this.setData(o);\n\n        this.children = [];\n        this.parent = null;\n\n        if (isRoot) {\n            this.idMapping = new Map<NodeId, Node>();\n            this.tree = this;\n            this.nodeClass = nodeClass;\n        }\n    }\n\n    /*\n    Set the data of this node.\n\n    setData(string): set the name of the node\n    setdata(object): set attributes of the node\n\n    Examples:\n        setdata('node1')\n\n        setData({ name: 'node1', id: 1});\n\n        setData({ name: 'node2', id: 2, color: 'green'});\n\n    * This is an internal function; it is not in the docs\n    * Does not remove existing node values\n    */\n    public setData(o: NodeData | null): void {\n        if (!o) {\n            return;\n        } else if (typeof o === \"string\") {\n            this.name = o;\n        } else if (typeof o === \"object\") {\n            for (const key in o) {\n                if (Object.prototype.hasOwnProperty.call(o, key)) {\n                    const value = o[key];\n\n                    if (key === \"label\" || key === \"name\") {\n                        // You can use the 'label' key instead of 'name'; this is a legacy feature\n                        if (typeof value === \"string\") {\n                            this.name = value;\n                        }\n                    } else if (key !== \"children\" && key !== \"parent\") {\n                        // You can't update the children or the parent using this function\n                        this[key] = value;\n                    }\n                }\n            }\n        }\n    }\n\n    /*\n    Create tree from data.\n\n    Structure of data is:\n    [\n        {\n            name: 'node1',\n            children: [\n                { name: 'child1' },\n                { name: 'child2' }\n            ]\n        },\n        {\n            name: 'node2'\n        }\n    ]\n    */\n    public loadFromData(data: NodeData[]): Node {\n        this.removeChildren();\n\n        for (const o of data) {\n            const node = this.createNode(o);\n            this.addChild(node);\n\n            if (isNodeRecordWithChildren(o)) {\n                if (o.children.length === 0) {\n                    node.isEmptyFolder = true;\n                } else {\n                    node.loadFromData(o.children);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /*\n    Add child.\n\n    tree.addChild(\n        new Node('child1')\n    );\n    */\n    public addChild(node: Node): void {\n        this.children.push(node);\n        node.setParent(this);\n    }\n\n    /*\n    Add child at position. Index starts at 0.\n\n    tree.addChildAtPosition(\n        new Node('abc'),\n        1\n    );\n    */\n    public addChildAtPosition(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        node.setParent(this);\n    }\n\n    /*\n    Remove child. This also removes the children of the node.\n\n    tree.removeChild(tree.children[0]);\n    */\n    public removeChild(node: Node): void {\n        // remove children from the index\n        node.removeChildren();\n\n        this.doRemoveChild(node);\n    }\n\n    /*\n    Get child index.\n\n    var index = getChildIndex(node);\n    */\n    public getChildIndex(node: Node): number {\n        return this.children.indexOf(node);\n    }\n\n    /*\n    Does the tree have children?\n\n    if (tree.hasChildren()) {\n        //\n    }\n    */\n    public hasChildren(): boolean {\n        return this.children.length !== 0;\n    }\n\n    public isFolder(): boolean {\n        return this.hasChildren() || this.load_on_demand;\n    }\n\n    /*\n    Iterate over all the nodes in the tree.\n\n    Calls callback with (node, level).\n\n    The callback must return true to continue the iteration on current node.\n\n    tree.iterate(\n        function(node, level) {\n           console.log(node.name);\n\n           // stop iteration after level 2\n           return (level <= 2);\n        }\n    );\n\n    */\n    public iterate(callback: IterateCallback): void {\n        const _iterate = (node: Node, level: number): void => {\n            if (node.children) {\n                for (const child of node.children) {\n                    const result = callback(child, level);\n\n                    if (result && child.hasChildren()) {\n                        _iterate(child, level + 1);\n                    }\n                }\n            }\n        };\n\n        _iterate(this, 0);\n    }\n\n    /*\n    Move node relative to another node.\n\n    Argument position: Position.BEFORE, Position.AFTER or Position.Inside\n\n    // move node1 after node2\n    tree.moveNode(node1, node2, Position.AFTER);\n    */\n    public moveNode(\n        movedNode: Node,\n        targetNode: Node,\n        position: Position\n    ): boolean {\n        if (!movedNode.parent || movedNode.isParentOf(targetNode)) {\n            // - Node is parent of target node\n            // - Or, parent is empty\n            return false;\n        } else {\n            movedNode.parent.doRemoveChild(movedNode);\n\n            switch (position) {\n                case Position.After: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode) + 1\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Before: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode)\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Inside: {\n                    // move inside as first child\n                    targetNode.addChildAtPosition(movedNode, 0);\n                    return true;\n                }\n\n                default:\n                    return false;\n            }\n        }\n    }\n\n    /*\n    Get the tree as data.\n    */\n    public getData(includeParent = false): NodeRecord[] {\n        const getDataFromNodes = (nodes: Node[]): Record<string, unknown>[] => {\n            return nodes.map((node) => {\n                const tmpNode: Record<string, unknown> = {};\n\n                for (const k in node) {\n                    if (\n                        [\n                            \"parent\",\n                            \"children\",\n                            \"element\",\n                            \"idMapping\",\n                            \"load_on_demand\",\n                            \"nodeClass\",\n                            \"tree\",\n                            \"isEmptyFolder\",\n                        ].indexOf(k) === -1 &&\n                        Object.prototype.hasOwnProperty.call(node, k)\n                    ) {\n                        const v = node[k];\n                        tmpNode[k] = v;\n                    }\n                }\n\n                if (node.hasChildren()) {\n                    tmpNode[\"children\"] = getDataFromNodes(node.children);\n                }\n\n                return tmpNode;\n            });\n        };\n\n        if (includeParent) {\n            return getDataFromNodes([this]);\n        } else {\n            return getDataFromNodes(this.children);\n        }\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.getNodeByCallback((node: Node) => node.name === name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        const node = this.getNodeByCallback((n: Node) => n.name === name);\n\n        if (!node) {\n            throw `Node with name ${name} not found`;\n        }\n\n        return node;\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        let result: Node | null = null;\n\n        this.iterate((node: Node) => {\n            if (result) {\n                return false;\n            } else if (callback(node)) {\n                result = node;\n                return false;\n            } else {\n                return true;\n            }\n        });\n\n        return result;\n    }\n\n    public addAfter(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex + 1);\n\n            if (\n                isNodeRecordWithChildren(nodeInfo) &&\n                nodeInfo.children.length\n            ) {\n                node.loadFromData(nodeInfo.children);\n            }\n\n            return node;\n        }\n    }\n\n    public addBefore(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex);\n\n            if (\n                isNodeRecordWithChildren(nodeInfo) &&\n                nodeInfo.children.length\n            ) {\n                node.loadFromData(nodeInfo.children);\n            }\n\n            return node;\n        }\n    }\n\n    public addParent(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const newParent = this.createNode(nodeInfo);\n\n            if (this.tree) {\n                newParent.setParent(this.tree);\n            }\n            const originalParent = this.parent;\n\n            for (const child of originalParent.children) {\n                newParent.addChild(child);\n            }\n\n            originalParent.children = [];\n            originalParent.addChild(newParent);\n            return newParent;\n        }\n    }\n\n    public remove(): void {\n        if (this.parent) {\n            this.parent.removeChild(this);\n            this.parent = null;\n        }\n    }\n\n    public append(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChild(node);\n\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            node.loadFromData(nodeInfo.children);\n        }\n\n        return node;\n    }\n\n    public prepend(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChildAtPosition(node, 0);\n\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            node.loadFromData(nodeInfo.children);\n        }\n\n        return node;\n    }\n\n    public isParentOf(node: Node): boolean {\n        let parent = node.parent;\n\n        while (parent) {\n            if (parent === this) {\n                return true;\n            }\n\n            parent = parent.parent;\n        }\n\n        return false;\n    }\n\n    public getLevel(): number {\n        let level = 0;\n        let node: Node = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n        while (node.parent) {\n            level += 1;\n            node = node.parent;\n        }\n\n        return level;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.idMapping.get(nodeId) || null;\n    }\n\n    public addNodeToIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.set(node.id, node);\n        }\n    }\n\n    public removeNodeFromIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.delete(node.id);\n        }\n    }\n\n    public removeChildren(): void {\n        this.iterate((child: Node) => {\n            this.tree?.removeNodeFromIndex(child);\n            return true;\n        });\n\n        this.children = [];\n    }\n\n    public getPreviousSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousIndex = this.parent.getChildIndex(this) - 1;\n            if (previousIndex >= 0) {\n                return this.parent.children[previousIndex];\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNextSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const nextIndex = this.parent.getChildIndex(this) + 1;\n            if (nextIndex < this.parent.children.length) {\n                return this.parent.children[nextIndex];\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.filter((node: Node) => node[key] === value);\n    }\n\n    public filter(f: (node: Node) => boolean): Node[] {\n        const result: Node[] = [];\n\n        this.iterate((node: Node) => {\n            if (f(node)) {\n                result.push(node);\n            }\n\n            return true;\n        });\n\n        return result;\n    }\n\n    public getNextNode(includeChildren = true): Node | null {\n        if (includeChildren && this.hasChildren() && this.is_open) {\n            // First child\n            return this.children[0];\n        } else {\n            if (!this.parent) {\n                return null;\n            } else {\n                const nextSibling = this.getNextSibling();\n                if (nextSibling) {\n                    // Next sibling\n                    return nextSibling;\n                } else {\n                    // Next node of parent\n                    return this.parent.getNextNode(false);\n                }\n            }\n        }\n    }\n\n    public getPreviousNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n            if (previousSibling) {\n                if (\n                    !previousSibling.hasChildren() ||\n                    !previousSibling.is_open\n                ) {\n                    // Previous sibling\n                    return previousSibling;\n                } else {\n                    // Last child of previous sibling\n                    return previousSibling.getLastChild();\n                }\n            } else {\n                return this.getParent();\n            }\n        }\n    }\n\n    public getParent(): Node | null {\n        // Return parent except if it is the root node\n        if (!this.parent) {\n            return null;\n        } else if (!this.parent.parent) {\n            // Root node -> null\n            return null;\n        } else {\n            return this.parent;\n        }\n    }\n\n    public getLastChild(): Node | null {\n        if (!this.hasChildren()) {\n            return null;\n        } else {\n            const lastChild = this.children[this.children.length - 1];\n            if (!(lastChild.hasChildren() && lastChild.is_open)) {\n                return lastChild;\n            } else {\n                return lastChild.getLastChild();\n            }\n        }\n    }\n\n    // Init Node from data without making it the root of the tree\n    public initFromData(data: NodeData): void {\n        const addNode = (nodeData: NodeData): void => {\n            this.setData(nodeData);\n\n            if (\n                isNodeRecordWithChildren(nodeData) &&\n                nodeData.children.length\n            ) {\n                addChildren(nodeData.children);\n            }\n        };\n\n        const addChildren = (childrenData: NodeData[]): void => {\n            for (const child of childrenData) {\n                const node = this.createNode();\n                node.initFromData(child);\n                this.addChild(node);\n            }\n        };\n\n        addNode(data);\n    }\n\n    private setParent(parent: Node): void {\n        this.parent = parent;\n        this.tree = parent.tree;\n        this.tree?.addNodeToIndex(this);\n    }\n\n    private doRemoveChild(node: Node): void {\n        this.children.splice(this.getChildIndex(node), 1);\n        this.tree?.removeNodeFromIndex(node);\n    }\n\n    private getNodeClass(): typeof Node {\n        return this.nodeClass || this?.tree?.nodeClass || Node;\n    }\n\n    private createNode(nodeData?: NodeData): Node {\n        const nodeClass = this.getNodeClass();\n        return new nodeClass(nodeData);\n    }\n}\n","import { getPositionName, Node, Position } from \"./node\";\nimport { DropHint, HitArea, PositionInfo } from \"./types\";\nimport { NodeElement } from \"./nodeElement\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\ninterface Dimensions {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n}\n\nexport class DragAndDropHandler {\n    public hitAreas: HitArea[];\n    public isDragging: boolean;\n    public currentItem: NodeElement | null;\n    public hoveredArea: HitArea | null;\n    public positionInfo: PositionInfo | null;\n\n    private treeWidget: JqTreeWidget;\n    private dragElement: DragElement | null;\n    private previousGhost: DropHint | null;\n    private openFolderTimer: number | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        this.hoveredArea = null;\n        this.hitAreas = [];\n        this.isDragging = false;\n        this.currentItem = null;\n        this.positionInfo = null;\n    }\n\n    public mouseCapture(positionInfo: PositionInfo): boolean | null {\n        const $element = jQuery(positionInfo.target);\n\n        if (!this.mustCaptureElement($element)) {\n            return null;\n        }\n\n        if (\n            this.treeWidget.options.onIsMoveHandle &&\n            !this.treeWidget.options.onIsMoveHandle($element)\n        ) {\n            return null;\n        }\n\n        let nodeElement = this.treeWidget._getNodeElement($element);\n\n        if (nodeElement && this.treeWidget.options.onCanMove) {\n            if (!this.treeWidget.options.onCanMove(nodeElement.node)) {\n                nodeElement = null;\n            }\n        }\n\n        this.currentItem = nodeElement;\n        return this.currentItem != null;\n    }\n\n    public mouseStart(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.refresh();\n\n        const offset = jQuery(positionInfo.target).offset();\n        const left = offset ? offset.left : 0;\n        const top = offset ? offset.top : 0;\n\n        const node = this.currentItem.node;\n\n        this.dragElement = new DragElement(\n            node.name,\n            positionInfo.pageX - left,\n            positionInfo.pageY - top,\n            this.treeWidget.element,\n            this.treeWidget.options.autoEscape ?? true\n        );\n\n        this.isDragging = true;\n        this.positionInfo = positionInfo;\n        this.currentItem.$element.addClass(\"jqtree-moving\");\n        return true;\n    }\n\n    public mouseDrag(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            !this.dragElement ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.dragElement.move(positionInfo.pageX, positionInfo.pageY);\n        this.positionInfo = positionInfo;\n\n        const area = this.findHoveredArea(\n            positionInfo.pageX,\n            positionInfo.pageY\n        );\n\n        if (area && this.canMoveToArea(area)) {\n            if (!area.node.isFolder()) {\n                this.stopOpenFolderTimer();\n            }\n\n            if (this.hoveredArea !== area) {\n                this.hoveredArea = area;\n\n                // If this is a closed folder, start timer to open it\n                if (this.mustOpenFolderTimer(area)) {\n                    this.startOpenFolderTimer(area.node);\n                } else {\n                    this.stopOpenFolderTimer();\n                }\n\n                this.updateDropHint();\n            }\n        } else {\n            this.removeDropHint();\n            this.stopOpenFolderTimer();\n            this.hoveredArea = area;\n        }\n\n        if (!area) {\n            if (this.treeWidget.options.onDragMove) {\n                this.treeWidget.options.onDragMove(\n                    this.currentItem.node,\n                    positionInfo.originalEvent\n                );\n            }\n        }\n\n        return true;\n    }\n\n    public mouseStop(positionInfo: PositionInfo): boolean {\n        this.moveItem(positionInfo);\n        this.clear();\n        this.removeHover();\n        this.removeDropHint();\n        this.removeHitAreas();\n\n        const currentItem = this.currentItem;\n\n        if (this.currentItem) {\n            this.currentItem.$element.removeClass(\"jqtree-moving\");\n            this.currentItem = null;\n        }\n\n        this.isDragging = false;\n        this.positionInfo = null;\n\n        if (!this.hoveredArea && currentItem) {\n            if (this.treeWidget.options.onDragStop) {\n                this.treeWidget.options.onDragStop(\n                    currentItem.node,\n                    positionInfo.originalEvent\n                );\n            }\n        }\n\n        return false;\n    }\n\n    public refresh(): void {\n        this.removeHitAreas();\n\n        if (this.currentItem) {\n            this.generateHitAreas();\n\n            this.currentItem = this.treeWidget._getNodeElementForNode(\n                this.currentItem.node\n            );\n\n            if (this.isDragging) {\n                this.currentItem.$element.addClass(\"jqtree-moving\");\n            }\n        }\n    }\n\n    private generateHitAreas(): void {\n        if (!this.currentItem) {\n            this.hitAreas = [];\n        } else {\n            const hitAreasGenerator = new HitAreasGenerator(\n                this.treeWidget.tree,\n                this.currentItem.node,\n                this.getTreeDimensions().bottom\n            );\n            this.hitAreas = hitAreasGenerator.generate();\n        }\n    }\n\n    private mustCaptureElement($element: JQuery<HTMLElement>): boolean {\n        return !$element.is(\"input,select,textarea\");\n    }\n\n    private canMoveToArea(area: HitArea): boolean {\n        if (!this.treeWidget.options.onCanMoveTo) {\n            return true;\n        }\n\n        if (!this.currentItem) {\n            return false;\n        }\n\n        const positionName = getPositionName(area.position);\n\n        return this.treeWidget.options.onCanMoveTo(\n            this.currentItem.node,\n            area.node,\n            positionName\n        );\n    }\n\n    private removeHitAreas(): void {\n        this.hitAreas = [];\n    }\n\n    private clear(): void {\n        if (this.dragElement) {\n            this.dragElement.remove();\n            this.dragElement = null;\n        }\n    }\n\n    private removeDropHint(): void {\n        if (this.previousGhost) {\n            this.previousGhost.remove();\n        }\n    }\n\n    private removeHover(): void {\n        this.hoveredArea = null;\n    }\n\n    private findHoveredArea(x: number, y: number): HitArea | null {\n        const dimensions = this.getTreeDimensions();\n\n        if (\n            x < dimensions.left ||\n            y < dimensions.top ||\n            x > dimensions.right ||\n            y > dimensions.bottom\n        ) {\n            return null;\n        }\n\n        let low = 0;\n        let high = this.hitAreas.length;\n        while (low < high) {\n            const mid = (low + high) >> 1;\n            const area = this.hitAreas[mid];\n\n            if (y < area.top) {\n                high = mid;\n            } else if (y > area.bottom) {\n                low = mid + 1;\n            } else {\n                return area;\n            }\n        }\n\n        return null;\n    }\n\n    private mustOpenFolderTimer(area: HitArea): boolean {\n        const node = area.node;\n\n        return (\n            node.isFolder() &&\n            !node.is_open &&\n            area.position === Position.Inside\n        );\n    }\n\n    private updateDropHint(): void {\n        if (!this.hoveredArea) {\n            return;\n        }\n\n        // remove previous drop hint\n        this.removeDropHint();\n\n        // add new drop hint\n        const nodeElement = this.treeWidget._getNodeElementForNode(\n            this.hoveredArea.node\n        );\n        this.previousGhost = nodeElement.addDropHint(this.hoveredArea.position);\n    }\n\n    private startOpenFolderTimer(folder: Node): void {\n        const openFolder = (): void => {\n            this.treeWidget._openNode(\n                folder,\n                this.treeWidget.options.slide,\n                () => {\n                    this.refresh();\n                    this.updateDropHint();\n                }\n            );\n        };\n\n        this.stopOpenFolderTimer();\n\n        const openFolderDelay = this.treeWidget.options.openFolderDelay;\n\n        if (openFolderDelay !== false) {\n            this.openFolderTimer = window.setTimeout(\n                openFolder,\n                openFolderDelay\n            );\n        }\n    }\n\n    private stopOpenFolderTimer(): void {\n        if (this.openFolderTimer) {\n            clearTimeout(this.openFolderTimer);\n            this.openFolderTimer = null;\n        }\n    }\n\n    private moveItem(positionInfo: PositionInfo): void {\n        if (\n            this.currentItem &&\n            this.hoveredArea &&\n            this.hoveredArea.position !== Position.None &&\n            this.canMoveToArea(this.hoveredArea)\n        ) {\n            const movedNode = this.currentItem.node;\n            const targetNode = this.hoveredArea.node;\n            const position = this.hoveredArea.position;\n            const previousParent = movedNode.parent;\n\n            if (position === Position.Inside) {\n                this.hoveredArea.node.is_open = true;\n            }\n\n            const doMove = (): void => {\n                this.treeWidget.tree.moveNode(movedNode, targetNode, position);\n                this.treeWidget.element.empty();\n                this.treeWidget._refreshElements(null);\n            };\n\n            const event = this.treeWidget._triggerEvent(\"tree.move\", {\n                move_info: {\n                    moved_node: movedNode,\n                    target_node: targetNode,\n                    position: getPositionName(position),\n                    previous_parent: previousParent,\n                    do_move: doMove,\n                    original_event: positionInfo.originalEvent,\n                },\n            });\n\n            if (!event.isDefaultPrevented()) {\n                doMove();\n            }\n        }\n    }\n\n    private getTreeDimensions(): Dimensions {\n        // Return the dimensions of the tree. Add a margin to the bottom to allow\n        // to drag-and-drop after the last element.\n        const offset = this.treeWidget.element.offset();\n\n        if (!offset) {\n            return { left: 0, top: 0, right: 0, bottom: 0 };\n        } else {\n            const el = this.treeWidget.element;\n            const width = el.width() || 0;\n            const height = el.height() || 0;\n            const left = offset.left + this.treeWidget._getScrollLeft();\n\n            return {\n                left,\n                top: offset.top,\n                right: left + width,\n                bottom: offset.top + height + 16,\n            };\n        }\n    }\n}\n\nabstract class VisibleNodeIterator {\n    private tree: Node;\n\n    constructor(tree: Node) {\n        this.tree = tree;\n    }\n\n    protected iterate(): void {\n        let isFirstNode = true;\n\n        const _iterateNode = (node: Node, nextNode: Node | null): void => {\n            let mustIterateInside =\n                (node.is_open || !node.element) && node.hasChildren();\n\n            let $element: JQuery<HTMLElement> | null = null;\n\n            if (node.element) {\n                $element = jQuery(node.element);\n\n                if (!$element.is(\":visible\")) {\n                    return;\n                }\n\n                if (isFirstNode) {\n                    this.handleFirstNode(node);\n                    isFirstNode = false;\n                }\n\n                if (!node.hasChildren()) {\n                    this.handleNode(node, nextNode, $element);\n                } else if (node.is_open) {\n                    if (!this.handleOpenFolder(node, $element)) {\n                        mustIterateInside = false;\n                    }\n                } else {\n                    this.handleClosedFolder(node, nextNode, $element);\n                }\n            }\n\n            if (mustIterateInside) {\n                const childrenLength = node.children.length;\n                node.children.forEach((_, i) => {\n                    if (i === childrenLength - 1) {\n                        _iterateNode(node.children[i], null);\n                    } else {\n                        _iterateNode(node.children[i], node.children[i + 1]);\n                    }\n                });\n\n                if (node.is_open && $element) {\n                    this.handleAfterOpenFolder(node, nextNode);\n                }\n            }\n        };\n\n        _iterateNode(this.tree, null);\n    }\n\n    protected abstract handleNode(\n        node: Node,\n        nextNode: Node | null,\n        $element: JQuery\n    ): void;\n\n    /*\n    override\n    return\n        - true: continue iterating\n        - false: stop iterating\n    */\n    protected abstract handleOpenFolder(node: Node, $element: JQuery): boolean;\n\n    protected abstract handleClosedFolder(\n        node: Node,\n        nextNode: Node | null,\n        $element: JQuery\n    ): void;\n\n    protected abstract handleAfterOpenFolder(\n        node: Node,\n        nextNode: Node | null\n    ): void;\n\n    protected abstract handleFirstNode(node: Node): void;\n}\n\nexport class HitAreasGenerator extends VisibleNodeIterator {\n    private currentNode: Node;\n    private treeBottom: number;\n    private positions: HitArea[];\n    private lastTop: number;\n\n    constructor(tree: Node, currentNode: Node, treeBottom: number) {\n        super(tree);\n\n        this.currentNode = currentNode;\n        this.treeBottom = treeBottom;\n    }\n\n    public generate(): HitArea[] {\n        this.positions = [];\n        this.lastTop = 0;\n\n        this.iterate();\n\n        return this.generateHitAreas(this.positions);\n    }\n\n    protected generateHitAreas(positions: HitArea[]): HitArea[] {\n        let previousTop = -1;\n        let group = [];\n        const hitAreas: HitArea[] = [];\n\n        for (const position of positions) {\n            if (position.top !== previousTop && group.length) {\n                if (group.length) {\n                    this.generateHitAreasForGroup(\n                        hitAreas,\n                        group,\n                        previousTop,\n                        position.top\n                    );\n                }\n\n                previousTop = position.top;\n                group = [];\n            }\n\n            group.push(position);\n        }\n\n        this.generateHitAreasForGroup(\n            hitAreas,\n            group,\n            previousTop,\n            this.treeBottom\n        );\n\n        return hitAreas;\n    }\n\n    protected handleOpenFolder(node: Node, $element: JQuery): boolean {\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            // Stop iterating\n            return false;\n        }\n\n        // Cannot move before current item\n        if (node.children[0] !== this.currentNode) {\n            this.addPosition(node, Position.Inside, this.getTop($element));\n        }\n\n        // Continue iterating\n        return true;\n    }\n\n    protected handleClosedFolder(\n        node: Node,\n        nextNode: Node,\n        $element: JQuery\n    ): void {\n        const top = this.getTop($element);\n\n        if (node === this.currentNode) {\n            // Cannot move after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n\n            // Cannot move before current item\n            if (nextNode !== this.currentNode) {\n                this.addPosition(node, Position.After, top);\n            }\n        }\n    }\n\n    protected handleFirstNode(node: Node): void {\n        if (node !== this.currentNode) {\n            this.addPosition(\n                node,\n                Position.Before,\n                this.getTop(jQuery(node.element))\n            );\n        }\n    }\n\n    protected handleAfterOpenFolder(node: Node, nextNode: Node): void {\n        if (node === this.currentNode || nextNode === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, this.lastTop);\n        } else {\n            this.addPosition(node, Position.After, this.lastTop);\n        }\n    }\n\n    protected handleNode(node: Node, nextNode: Node, $element: JQuery): void {\n        const top = this.getTop($element);\n\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n        }\n\n        if (nextNode === this.currentNode || node === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.After, top);\n        }\n    }\n\n    private getTop($element: JQuery<HTMLElement>): number {\n        const offset = $element.offset();\n\n        return offset ? offset.top : 0;\n    }\n\n    private addPosition(node: Node, position: number, top: number): void {\n        const area = {\n            top,\n            bottom: 0,\n            node,\n            position,\n        };\n\n        this.positions.push(area);\n        this.lastTop = top;\n    }\n\n    private generateHitAreasForGroup(\n        hitAreas: HitArea[],\n        positionsInGroup: HitArea[],\n        top: number,\n        bottom: number\n    ): void {\n        // limit positions in group\n        const positionCount = Math.min(positionsInGroup.length, 4);\n\n        const areaHeight = Math.round((bottom - top) / positionCount);\n        let areaTop = top;\n\n        let i = 0;\n        while (i < positionCount) {\n            const position = positionsInGroup[i];\n\n            hitAreas.push({\n                top: areaTop,\n                bottom: areaTop + areaHeight,\n                node: position.node,\n                position: position.position,\n            });\n\n            areaTop += areaHeight;\n            i += 1;\n        }\n    }\n}\n\nclass DragElement {\n    private offsetX: number;\n    private offsetY: number;\n    private $element: JQuery;\n\n    constructor(\n        nodeName: string,\n        offsetX: number,\n        offsetY: number,\n        $tree: JQuery,\n        autoEscape: boolean\n    ) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n\n        this.$element = jQuery(\"<span>\").addClass(\n            \"jqtree-title jqtree-dragging\"\n        );\n\n        if (autoEscape) {\n            this.$element.text(nodeName);\n        } else {\n            this.$element.html(nodeName);\n        }\n\n        this.$element.css(\"position\", \"absolute\");\n        $tree.append(this.$element);\n    }\n\n    public move(pageX: number, pageY: number): void {\n        this.$element.offset({\n            left: pageX - this.offsetX,\n            top: pageY - this.offsetY,\n        });\n    }\n\n    public remove(): void {\n        this.$element.remove();\n    }\n}\n","export const isInt = (n: unknown): boolean =>\n    typeof n === \"number\" && n % 1 === 0;\n\nexport const isFunction = (v: unknown): boolean => typeof v === \"function\";\n\nexport const getBoolString = (value: unknown): string =>\n    value ? \"true\" : \"false\";\n","import { getBoolString } from \"./util\";\nimport { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\ntype IconElement = Text | Element;\n\nexport default class ElementsRenderer {\n    public openedIconElement: IconElement;\n    public closedIconElement: IconElement;\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        this.openedIconElement = this.createButtonElement(\n            treeWidget.options.openedIcon || \"+\"\n        );\n        this.closedIconElement = this.createButtonElement(\n            treeWidget.options.closedIcon || \"-\"\n        );\n    }\n\n    public render(fromNode: Node | null): void {\n        if (fromNode && fromNode.parent) {\n            this.renderFromNode(fromNode);\n        } else {\n            this.renderFromRoot();\n        }\n    }\n\n    public renderFromRoot(): void {\n        const $element = this.treeWidget.element;\n        $element.empty();\n\n        this.createDomElements(\n            $element[0],\n            this.treeWidget.tree.children,\n            true,\n            1\n        );\n    }\n\n    public renderFromNode(node: Node): void {\n        // remember current li\n        const $previousLi = jQuery(node.element);\n\n        // create element\n        const li = this.createLi(node, node.getLevel());\n        this.attachNodeData(node, li);\n\n        // add element to dom\n        $previousLi.after(li);\n\n        // remove previous li\n        $previousLi.remove();\n\n        // create children\n        if (node.children) {\n            this.createDomElements(\n                li,\n                node.children,\n                false,\n                node.getLevel() + 1\n            );\n        }\n    }\n\n    private createDomElements(\n        element: Element,\n        children: Node[],\n        isRootNode: boolean,\n        level: number\n    ): void {\n        const ul = this.createUl(isRootNode);\n        element.appendChild(ul);\n\n        for (const child of children) {\n            const li = this.createLi(child, level);\n            ul.appendChild(li);\n\n            this.attachNodeData(child, li);\n\n            if (child.hasChildren()) {\n                this.createDomElements(li, child.children, false, level + 1);\n            }\n        }\n    }\n\n    private attachNodeData(node: Node, li: HTMLElement): void {\n        node.element = li;\n        jQuery(li).data(\"node\", node);\n    }\n\n    private createUl(isRootNode: boolean): HTMLUListElement {\n        let classString;\n        let role;\n\n        if (!isRootNode) {\n            classString = \"\";\n            role = \"group\";\n        } else {\n            classString = \"jqtree-tree\";\n            role = \"tree\";\n\n            if (this.treeWidget.options.rtl) {\n                classString += \" jqtree-rtl\";\n            }\n        }\n\n        if (this.treeWidget.options.dragAndDrop) {\n            classString += \" jqtree-dnd\";\n        }\n\n        const ul = document.createElement(\"ul\");\n        ul.className = `jqtree_common ${classString}`;\n\n        ul.setAttribute(\"role\", role);\n\n        return ul;\n    }\n\n    private createLi(node: Node, level: number): HTMLLIElement {\n        const isSelected = Boolean(\n            this.treeWidget.selectNodeHandler.isNodeSelected(node)\n        );\n\n        const mustShowFolder =\n            node.isFolder() ||\n            (node.isEmptyFolder && this.treeWidget.options.showEmptyFolder);\n\n        const li = mustShowFolder\n            ? this.createFolderLi(node, level, isSelected)\n            : this.createNodeLi(node, level, isSelected);\n\n        if (this.treeWidget.options.onCreateLi) {\n            this.treeWidget.options.onCreateLi(node, jQuery(li), isSelected);\n        }\n\n        return li;\n    }\n\n    private createFolderLi(\n        node: Node,\n        level: number,\n        isSelected: boolean\n    ): HTMLLIElement {\n        const buttonClasses = this.getButtonClasses(node);\n        const folderClasses = this.getFolderClasses(node, isSelected);\n\n        const iconElement = node.is_open\n            ? this.openedIconElement\n            : this.closedIconElement;\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = `jqtree_common ${folderClasses}`;\n        li.setAttribute(\"role\", \"presentation\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"presentation\");\n\n        li.appendChild(div);\n\n        // button link\n        const buttonLink = document.createElement(\"a\");\n        buttonLink.className = buttonClasses;\n\n        buttonLink.appendChild(iconElement.cloneNode(true));\n\n        buttonLink.setAttribute(\"role\", \"presentation\");\n        buttonLink.setAttribute(\"aria-hidden\", \"true\");\n\n        if (this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        // title span\n        div.appendChild(\n            this.createTitleSpan(\n                node.name,\n                level,\n                isSelected,\n                node.is_open,\n                true\n            )\n        );\n\n        if (!this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        return li;\n    }\n\n    private createNodeLi(\n        node: Node,\n        level: number,\n        isSelected: boolean\n    ): HTMLLIElement {\n        const liClasses = [\"jqtree_common\"];\n\n        if (isSelected) {\n            liClasses.push(\"jqtree-selected\");\n        }\n\n        const classString = liClasses.join(\" \");\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = classString;\n        li.setAttribute(\"role\", \"presentation\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"presentation\");\n\n        li.appendChild(div);\n\n        // title span\n        div.appendChild(\n            this.createTitleSpan(\n                node.name,\n                level,\n                isSelected,\n                node.is_open,\n                false\n            )\n        );\n\n        return li;\n    }\n\n    private createTitleSpan(\n        nodeName: string,\n        level: number,\n        isSelected: boolean,\n        isOpen: boolean,\n        isFolder: boolean\n    ): HTMLSpanElement {\n        const titleSpan = document.createElement(\"span\");\n\n        let classes = \"jqtree-title jqtree_common\";\n\n        if (isFolder) {\n            classes += \" jqtree-title-folder\";\n        }\n\n        classes += ` jqtree-title-button-${\n            this.treeWidget.options.buttonLeft ? \"left\" : \"right\"\n        }`;\n\n        titleSpan.className = classes;\n\n        titleSpan.setAttribute(\"role\", \"treeitem\");\n        titleSpan.setAttribute(\"aria-level\", `${level}`);\n\n        titleSpan.setAttribute(\"aria-selected\", getBoolString(isSelected));\n        titleSpan.setAttribute(\"aria-expanded\", getBoolString(isOpen));\n\n        if (isSelected) {\n            const tabIndex = this.treeWidget.options.tabIndex;\n\n            if (tabIndex !== undefined) {\n                titleSpan.setAttribute(\"tabindex\", `${tabIndex}`);\n            }\n        }\n\n        if (this.treeWidget.options.autoEscape) {\n            titleSpan.textContent = nodeName;\n        } else {\n            titleSpan.innerHTML = nodeName;\n        }\n\n        return titleSpan;\n    }\n\n    private getButtonClasses(node: Node): string {\n        const classes = [\"jqtree-toggler\", \"jqtree_common\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (this.treeWidget.options.buttonLeft) {\n            classes.push(\"jqtree-toggler-left\");\n        } else {\n            classes.push(\"jqtree-toggler-right\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private getFolderClasses(node: Node, isSelected: boolean): string {\n        const classes = [\"jqtree-folder\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (isSelected) {\n            classes.push(\"jqtree-selected\");\n        }\n\n        if (node.is_loading) {\n            classes.push(\"jqtree-loading\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private createButtonElement(value: string | Element): IconElement {\n        if (typeof value === \"string\") {\n            // convert value to html\n            const div = document.createElement(\"div\");\n            div.innerHTML = value;\n\n            return document.createTextNode(div.innerHTML);\n        } else {\n            return jQuery(value)[0];\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport type HandleFinishedLoading = () => void;\n\nexport default class DataLoader {\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n    }\n\n    public loadFromUrl(\n        urlInfo: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null\n    ): void {\n        if (!urlInfo) {\n            return;\n        }\n\n        const $el = this.getDomElement(parentNode);\n        this.addLoadingClass($el);\n        this.notifyLoading(true, parentNode, $el);\n\n        const stopLoading = (): void => {\n            this.removeLoadingClass($el);\n            this.notifyLoading(false, parentNode, $el);\n        };\n\n        const handleSuccess = (data: string | NodeData[]): void => {\n            stopLoading();\n            this.treeWidget.loadData(this.parseData(data), parentNode);\n\n            if (onFinished && typeof onFinished === \"function\") {\n                onFinished();\n            }\n        };\n\n        const handleError = (jqXHR: JQuery.jqXHR): void => {\n            stopLoading();\n\n            if (this.treeWidget.options.onLoadFailed) {\n                this.treeWidget.options.onLoadFailed(jqXHR);\n            }\n        };\n\n        this.submitRequest(urlInfo, handleSuccess, handleError);\n    }\n\n    private addLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.addClass(\"jqtree-loading\");\n        }\n    }\n\n    private removeLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.removeClass(\"jqtree-loading\");\n        }\n    }\n\n    private getDomElement(parentNode: Node | null): JQuery<HTMLElement> {\n        if (parentNode) {\n            return jQuery(parentNode.element);\n        } else {\n            return this.treeWidget.element;\n        }\n    }\n\n    private notifyLoading(\n        isLoading: boolean,\n        node: Node | null,\n        $el: JQuery\n    ): void {\n        if (this.treeWidget.options.onLoading) {\n            this.treeWidget.options.onLoading(isLoading, node, $el);\n        }\n\n        this.treeWidget._triggerEvent(\"tree.loading_data\", {\n            isLoading,\n            node,\n            $el,\n        });\n    }\n\n    private submitRequest(\n        urlInfoInput: string | JQuery.AjaxSettings,\n        handleSuccess: JQuery.Ajax.SuccessCallback<any>,\n        handleError: JQuery.Ajax.ErrorCallback<any>\n    ): void {\n        const urlInfo =\n            typeof urlInfoInput === \"string\"\n                ? { url: urlInfoInput }\n                : urlInfoInput;\n\n        const ajaxSettings: JQuery.AjaxSettings = {\n            method: \"GET\",\n            cache: false,\n            dataType: \"json\",\n            success: handleSuccess,\n            error: handleError,\n            ...urlInfo,\n        };\n\n        ajaxSettings.method = ajaxSettings.method?.toUpperCase() || \"GET\";\n\n        void jQuery.ajax(ajaxSettings);\n    }\n\n    private parseData(data: string | NodeData[]): NodeData[] {\n        const { dataFilter } = this.treeWidget.options;\n\n        const getParsedData = () => {\n            if (typeof data === \"string\") {\n                return JSON.parse(data) as NodeData[];\n            } else {\n                return data;\n            }\n        };\n\n        const parsedData = getParsedData();\n\n        if (dataFilter) {\n            return dataFilter(parsedData);\n        } else {\n            return parsedData;\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport default class KeyHandler {\n    private static LEFT = 37;\n    private static UP = 38;\n    private static RIGHT = 39;\n    private static DOWN = 40;\n\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        if (treeWidget.options.keyboardSupport) {\n            jQuery(document).on(\"keydown.jqtree\", this.handleKeyDown);\n        }\n    }\n\n    public deinit(): void {\n        jQuery(document).off(\"keydown.jqtree\");\n    }\n\n    public moveDown(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getNextNode());\n    }\n\n    public moveUp(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getPreviousNode());\n    }\n\n    public moveRight(selectedNode: Node): boolean {\n        if (!selectedNode.isFolder()) {\n            return true;\n        } else {\n            // folder node\n            if (selectedNode.is_open) {\n                // Right moves to the first child of an open node\n                return this.selectNode(selectedNode.getNextNode());\n            } else {\n                // Right expands a closed node\n                this.treeWidget.openNode(selectedNode);\n                return false;\n            }\n        }\n    }\n\n    public moveLeft(selectedNode: Node): boolean {\n        if (selectedNode.isFolder() && selectedNode.is_open) {\n            // Left on an open node closes the node\n            this.treeWidget.closeNode(selectedNode);\n            return false;\n        } else {\n            // Left on a closed or end node moves focus to the node's parent\n            return this.selectNode(selectedNode.getParent());\n        }\n    }\n\n    public selectNode(node: Node | null): boolean {\n        if (!node) {\n            return true;\n        } else {\n            this.treeWidget.selectNode(node);\n\n            if (\n                !this.treeWidget.scrollHandler.isScrolledIntoView(\n                    jQuery(node.element).find(\".jqtree-element\")\n                )\n            ) {\n                this.treeWidget.scrollToNode(node);\n            }\n\n            return false;\n        }\n    }\n\n    private handleKeyDown = (e: JQuery.Event): boolean => {\n        if (!this.canHandleKeyboard()) {\n            return true;\n        }\n\n        const selectedNode = this.treeWidget.getSelectedNode();\n        if (!selectedNode) {\n            return true;\n        }\n\n        const key = e.which;\n\n        switch (key) {\n            case KeyHandler.DOWN:\n                return this.moveDown(selectedNode);\n\n            case KeyHandler.UP:\n                return this.moveUp(selectedNode);\n\n            case KeyHandler.RIGHT:\n                return this.moveRight(selectedNode);\n\n            case KeyHandler.LEFT:\n                return this.moveLeft(selectedNode);\n\n            default:\n                return true;\n        }\n    };\n\n    private canHandleKeyboard(): boolean {\n        return (\n            (this.treeWidget.options.keyboardSupport || false) &&\n            this.treeWidget.selectNodeHandler.isFocusOnTree()\n        );\n    }\n}\n","const register = (widgetClass: unknown, widgetName: string): void => {\n    const getDataKey = (): string => `simple_widget_${widgetName}`;\n\n    const getWidgetData = (\n        el: HTMLElement,\n        dataKey: string\n    ): SimpleWidget<unknown> | null => {\n        const widget = jQuery.data(el, dataKey) as unknown;\n\n        if (widget && widget instanceof SimpleWidget) {\n            return widget;\n        } else {\n            return null;\n        }\n    };\n\n    const createWidget = ($el: JQuery, options: unknown): JQuery => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const existingWidget = getWidgetData(el, dataKey);\n\n            if (!existingWidget) {\n                const simpleWidgetClass = widgetClass as typeof SimpleWidget;\n                const widget = new simpleWidgetClass(el, options);\n\n                if (!jQuery.data(el, dataKey)) {\n                    jQuery.data(el, dataKey, widget);\n                }\n\n                // Call init after setting data, so we can call methods\n                widget.init();\n            }\n        }\n\n        return $el;\n    };\n\n    const destroyWidget = ($el: JQuery): void => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const widget = getWidgetData(el, dataKey);\n\n            if (widget) {\n                widget.destroy();\n            }\n\n            jQuery.removeData(el, dataKey);\n        }\n    };\n\n    const callFunction = (\n        $el: JQuery,\n        functionName: string,\n        args: unknown[]\n    ): unknown => {\n        let result = null;\n\n        for (const el of $el.get()) {\n            const widget = jQuery.data(el, getDataKey()) as unknown;\n\n            if (widget && widget instanceof SimpleWidget) {\n                const simpleWidget = widget as SimpleWidget<unknown>;\n                const widgetFunction = simpleWidget[functionName];\n\n                if (widgetFunction && typeof widgetFunction === \"function\") {\n                    result = widgetFunction.apply(widget, args) as unknown;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (jQuery.fn as any)[widgetName] = function (\n        this: JQuery,\n        argument1: unknown,\n        ...args: unknown[]\n    ) {\n        if (!argument1) {\n            return createWidget(this, null);\n        } else if (typeof argument1 === \"object\") {\n            const options = argument1 as unknown;\n            return createWidget(this, options);\n        } else if (typeof argument1 === \"string\" && argument1[0] !== \"_\") {\n            const functionName = argument1;\n\n            if (functionName === \"destroy\") {\n                return destroyWidget(this);\n            } else if (functionName === \"get_widget_class\") {\n                return widgetClass;\n            } else {\n                return callFunction(this, functionName, args);\n            }\n        }\n    };\n};\n\nexport default class SimpleWidget<WidgetOptions> {\n    public static register(widgetClass: unknown, widgetName: string): void {\n        register(widgetClass, widgetName);\n    }\n\n    [key: string]: unknown;\n\n    protected static defaults: unknown = {};\n\n    public options: WidgetOptions;\n\n    public $el: JQuery<HTMLElement>;\n\n    constructor(el: HTMLElement, options: WidgetOptions) {\n        this.$el = jQuery(el);\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const defaults = (this.constructor as any)[\"defaults\"] as WidgetOptions;\n        this.options = { ...defaults, ...options };\n    }\n\n    public destroy(): void {\n        this.deinit();\n    }\n\n    public init(): void {\n        //\n    }\n\n    public deinit(): void {\n        //\n    }\n}\n","/*\nThis widget does the same a the mouse widget in jqueryui.\n*/\nimport SimpleWidget from \"./simple.widget\";\nimport { PositionInfo } from \"./types\";\n\nconst getPositionInfoFromMouseEvent = (e: MouseEvent): PositionInfo => ({\n    pageX: e.pageX,\n    pageY: e.pageY,\n    target: e.target as HTMLElement,\n    originalEvent: e,\n});\n\nconst getPositionInfoFromTouch = (\n    touch: Touch,\n    e: TouchEvent\n): PositionInfo => ({\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    target: touch.target as HTMLElement,\n    originalEvent: e,\n});\n\nabstract class MouseWidget<WidgetOptions> extends SimpleWidget<WidgetOptions> {\n    protected isMouseStarted: boolean;\n    protected mouseDownInfo: PositionInfo | null;\n    private mouseDelayTimer: number | null;\n    private isMouseDelayMet: boolean;\n\n    public init(): void {\n        const element = this.$el.get(0);\n\n        if (element) {\n            element.addEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n            element.addEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.isMouseStarted = false;\n        this.mouseDelayTimer = null;\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n    }\n\n    public deinit(): void {\n        const el = this.$el.get(0);\n\n        if (el) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.removeMouseMoveEventListeners();\n    }\n\n    protected abstract mouseCapture(positionInfo: PositionInfo): boolean | null;\n\n    protected abstract mouseStart(positionInfo: PositionInfo): boolean;\n\n    protected abstract mouseDrag(positionInfo: PositionInfo): void;\n\n    protected abstract mouseStop(positionInfo: PositionInfo): void;\n\n    protected abstract getMouseDelay(): number;\n\n    private mouseDown = (e: MouseEvent): void => {\n        // Left mouse button?\n        if (e.button !== 0) {\n            return;\n        }\n\n        const result = this.handleMouseDown(getPositionInfoFromMouseEvent(e));\n\n        if (result && e.cancelable) {\n            e.preventDefault();\n        }\n    };\n\n    private handleMouseDown(positionInfo: PositionInfo): boolean {\n        // We may have missed mouseup (out of window)\n        if (this.isMouseStarted) {\n            this.handleMouseUp(positionInfo);\n        }\n\n        this.mouseDownInfo = positionInfo;\n\n        if (!this.mouseCapture(positionInfo)) {\n            return false;\n        }\n\n        this.handleStartMouse();\n\n        return true;\n    }\n\n    private handleStartMouse(): void {\n        document.addEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        document.addEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        document.addEventListener(\"mouseup\", this.mouseUp, { passive: false });\n        document.addEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n\n        const mouseDelay = this.getMouseDelay();\n\n        if (mouseDelay) {\n            this.startMouseDelayTimer(mouseDelay);\n        } else {\n            this.isMouseDelayMet = true;\n        }\n    }\n\n    private startMouseDelayTimer(mouseDelay: number): void {\n        if (this.mouseDelayTimer) {\n            clearTimeout(this.mouseDelayTimer);\n        }\n\n        this.mouseDelayTimer = window.setTimeout(() => {\n            if (this.mouseDownInfo) {\n                this.isMouseDelayMet = true;\n            }\n        }, mouseDelay);\n\n        this.isMouseDelayMet = false;\n    }\n\n    private mouseMove = (e: MouseEvent): void => {\n        this.handleMouseMove(e, getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseMove(\n        e: MouseEvent | TouchEvent,\n        positionInfo: PositionInfo\n    ): void {\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n            return;\n        }\n\n        if (!this.isMouseDelayMet) {\n            return;\n        }\n\n        if (this.mouseDownInfo) {\n            this.isMouseStarted = this.mouseStart(this.mouseDownInfo) !== false;\n        }\n\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n        } else {\n            this.handleMouseUp(positionInfo);\n        }\n    }\n\n    private mouseUp = (e: MouseEvent): void => {\n        this.handleMouseUp(getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseUp(positionInfo: PositionInfo): void {\n        this.removeMouseMoveEventListeners();\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n\n        if (this.isMouseStarted) {\n            this.isMouseStarted = false;\n            this.mouseStop(positionInfo);\n        }\n    }\n\n    private removeMouseMoveEventListeners() {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mouseup\", this.mouseUp, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n    }\n\n    private touchStart = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        this.handleMouseDown(getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchMove = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        this.handleMouseMove(e, getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchEnd = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        this.handleMouseUp(getPositionInfoFromTouch(touch, e));\n    };\n}\n\nexport default MouseWidget;\n","import { isInt } from \"./util\";\nimport { JqTreeWidget } from \"./tree.jquery\";\nimport { Node } from \"./node\";\n\nexport interface SavedState {\n    open_nodes: NodeId[];\n    selected_node: NodeId[];\n}\n\nexport default class SaveStateHandler {\n    private treeWidget: JqTreeWidget;\n    private _supportsLocalStorage: boolean | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n    }\n\n    public saveState(): void {\n        const state = JSON.stringify(this.getState());\n\n        if (this.treeWidget.options.onSetStateFromStorage) {\n            this.treeWidget.options.onSetStateFromStorage(state);\n        } else if (this.supportsLocalStorage()) {\n            localStorage.setItem(this.getKeyName(), state);\n        }\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        const jsonData = this.loadFromStorage();\n\n        if (jsonData) {\n            return this.parseState(jsonData) as unknown as SavedState;\n        } else {\n            return null;\n        }\n    }\n\n    public getState(): SavedState {\n        const getOpenNodeIds = (): NodeId[] => {\n            const openNodes: NodeId[] = [];\n\n            this.treeWidget.tree.iterate((node: Node) => {\n                if (node.is_open && node.id && node.hasChildren()) {\n                    openNodes.push(node.id);\n                }\n                return true;\n            });\n\n            return openNodes;\n        };\n\n        const getSelectedNodeIds = (): NodeId[] => {\n            const selectedNodeIds: NodeId[] = [];\n\n            this.treeWidget.getSelectedNodes().forEach((node) => {\n                if (node.id != null) {\n                    selectedNodeIds.push(node.id);\n                }\n            });\n\n            return selectedNodeIds;\n        };\n\n        return {\n            open_nodes: getOpenNodeIds(),\n            selected_node: getSelectedNodeIds(),\n        };\n    }\n\n    /*\n    Set initial state\n    Don't handle nodes that are loaded on demand\n\n    result: must load on demand\n    */\n    public setInitialState(state: SavedState): boolean {\n        if (!state) {\n            return false;\n        } else {\n            let mustLoadOnDemand = false;\n\n            if (state.open_nodes) {\n                mustLoadOnDemand = this.openInitialNodes(state.open_nodes);\n            }\n\n            if (state.selected_node) {\n                this.resetSelection();\n                this.selectInitialNodes(state.selected_node);\n            }\n\n            return mustLoadOnDemand;\n        }\n    }\n\n    public setInitialStateOnDemand(\n        state: SavedState,\n        cbFinished: () => void\n    ): void {\n        if (state) {\n            this.doSetInitialStateOnDemand(\n                state.open_nodes,\n                state.selected_node,\n                cbFinished\n            );\n        } else {\n            cbFinished();\n        }\n    }\n\n    public getNodeIdToBeSelected(): NodeId | null {\n        const state = this.getStateFromStorage();\n\n        if (state && state.selected_node) {\n            return state.selected_node[0];\n        } else {\n            return null;\n        }\n    }\n\n    private parseState(jsonData: string): SavedState {\n        const state = JSON.parse(jsonData) as Record<string, unknown>;\n\n        // Check if selected_node is an int (instead of an array)\n        if (state && state.selected_node && isInt(state.selected_node)) {\n            // Convert to array\n            state.selected_node = [state.selected_node];\n        }\n\n        return state as unknown as SavedState;\n    }\n\n    private loadFromStorage(): string | null {\n        if (this.treeWidget.options.onGetStateFromStorage) {\n            return this.treeWidget.options.onGetStateFromStorage();\n        } else if (this.supportsLocalStorage()) {\n            return localStorage.getItem(this.getKeyName());\n        } else {\n            return null;\n        }\n    }\n\n    private openInitialNodes(nodeIds: NodeId[]): boolean {\n        let mustLoadOnDemand = false;\n\n        for (const nodeId of nodeIds) {\n            const node = this.treeWidget.getNodeById(nodeId);\n\n            if (node) {\n                if (!node.load_on_demand) {\n                    node.is_open = true;\n                } else {\n                    mustLoadOnDemand = true;\n                }\n            }\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    private selectInitialNodes(nodeIds: NodeId[]): boolean {\n        let selectCount = 0;\n\n        for (const nodeId of nodeIds) {\n            const node = this.treeWidget.getNodeById(nodeId);\n\n            if (node) {\n                selectCount += 1;\n\n                this.treeWidget.selectNodeHandler.addToSelection(node);\n            }\n        }\n\n        return selectCount !== 0;\n    }\n\n    private resetSelection(): void {\n        const selectNodeHandler = this.treeWidget.selectNodeHandler;\n\n        const selectedNodes = selectNodeHandler.getSelectedNodes();\n\n        selectedNodes.forEach((node) => {\n            selectNodeHandler.removeFromSelection(node);\n        });\n    }\n\n    private doSetInitialStateOnDemand(\n        nodeIdsParam: NodeId[],\n        selectedNodes: NodeId[],\n        cbFinished: () => void\n    ): void {\n        let loadingCount = 0;\n        let nodeIds = nodeIdsParam;\n\n        const openNodes = (): void => {\n            const newNodesIds = [];\n\n            for (const nodeId of nodeIds) {\n                const node = this.treeWidget.getNodeById(nodeId);\n\n                if (!node) {\n                    newNodesIds.push(nodeId);\n                } else {\n                    if (!node.is_loading) {\n                        if (node.load_on_demand) {\n                            loadAndOpenNode(node);\n                        } else {\n                            this.treeWidget._openNode(node, false, null);\n                        }\n                    }\n                }\n            }\n\n            nodeIds = newNodesIds;\n\n            if (this.selectInitialNodes(selectedNodes)) {\n                this.treeWidget._refreshElements(null);\n            }\n\n            if (loadingCount === 0) {\n                cbFinished();\n            }\n        };\n\n        const loadAndOpenNode = (node: Node): void => {\n            loadingCount += 1;\n            this.treeWidget._openNode(node, false, () => {\n                loadingCount -= 1;\n                openNodes();\n            });\n        };\n\n        openNodes();\n    }\n\n    private getKeyName(): string {\n        if (typeof this.treeWidget.options.saveState === \"string\") {\n            return this.treeWidget.options.saveState;\n        } else {\n            return \"tree\";\n        }\n    }\n\n    private supportsLocalStorage(): boolean {\n        const testSupport = (): boolean => {\n            // Is local storage supported?\n            if (localStorage == null) {\n                return false;\n            } else {\n                // Check if it's possible to store an item. Safari does not allow this in private browsing mode.\n                try {\n                    const key = \"_storage_test\";\n                    sessionStorage.setItem(key, \"value\");\n                    sessionStorage.removeItem(key);\n                } catch (error) {\n                    return false;\n                }\n\n                return true;\n            }\n        };\n\n        if (this._supportsLocalStorage == null) {\n            this._supportsLocalStorage = testSupport();\n        }\n\n        return this._supportsLocalStorage;\n    }\n}\n","import { JqTreeWidget } from \"./tree.jquery\";\nimport { HitArea, PositionInfo } from \"./types\";\n\nexport default class ScrollHandler {\n    private treeWidget: JqTreeWidget;\n    private previousTop: number;\n    private isInitialized: boolean;\n    private $scrollParent: JQuery | null;\n    private scrollParentTop: number;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n        this.previousTop = -1;\n        this.isInitialized = false;\n    }\n\n    public checkScrolling(): void {\n        this.ensureInit();\n        this.checkVerticalScrolling();\n        this.checkHorizontalScrolling();\n    }\n\n    public scrollToY(top: number): void {\n        this.ensureInit();\n\n        if (this.$scrollParent) {\n            this.$scrollParent[0].scrollTop = top;\n        } else {\n            const offset = this.treeWidget.$el.offset();\n            const treeTop = offset ? offset.top : 0;\n\n            jQuery(document).scrollTop(top + treeTop);\n        }\n    }\n\n    public isScrolledIntoView($element: JQuery): boolean {\n        this.ensureInit();\n\n        let elementBottom: number;\n        let viewBottom: number;\n        let elementTop: number;\n        let viewTop: number;\n\n        const elHeight = $element.height() || 0;\n\n        if (this.$scrollParent) {\n            viewTop = 0;\n            viewBottom = this.$scrollParent.height() || 0;\n\n            const offset = $element.offset();\n            const originalTop = offset ? offset.top : 0;\n\n            elementTop = originalTop - this.scrollParentTop;\n            elementBottom = elementTop + elHeight;\n        } else {\n            viewTop = jQuery(window).scrollTop() || 0;\n\n            const windowHeight = jQuery(window).height() || 0;\n            viewBottom = viewTop + windowHeight;\n\n            const offset = $element.offset();\n\n            elementTop = offset ? offset.top : 0;\n            elementBottom = elementTop + elHeight;\n        }\n\n        return elementBottom <= viewBottom && elementTop >= viewTop;\n    }\n\n    public getScrollLeft(): number {\n        if (!this.$scrollParent) {\n            return 0;\n        } else {\n            return this.$scrollParent.scrollLeft() || 0;\n        }\n    }\n\n    private initScrollParent(): void {\n        const getParentWithOverflow = (): JQuery | null => {\n            const cssAttributes = [\"overflow\", \"overflow-y\"];\n\n            const hasOverFlow = ($el: JQuery): boolean => {\n                for (const attr of cssAttributes) {\n                    const overflowValue = $el.css(attr);\n                    if (\n                        overflowValue === \"auto\" ||\n                        overflowValue === \"scroll\"\n                    ) {\n                        return true;\n                    }\n                }\n\n                return false;\n            };\n\n            if (hasOverFlow(this.treeWidget.$el)) {\n                return this.treeWidget.$el;\n            }\n\n            for (const el of this.treeWidget.$el.parents().get()) {\n                const $el = jQuery(el);\n                if (hasOverFlow($el)) {\n                    return $el;\n                }\n            }\n\n            return null;\n        };\n\n        const setDocumentAsScrollParent = (): void => {\n            this.scrollParentTop = 0;\n            this.$scrollParent = null;\n        };\n\n        if (this.treeWidget.$el.css(\"position\") === \"fixed\") {\n            setDocumentAsScrollParent();\n        }\n\n        const $scrollParent = getParentWithOverflow();\n\n        if (\n            $scrollParent &&\n            $scrollParent.length &&\n            $scrollParent[0].tagName !== \"HTML\"\n        ) {\n            this.$scrollParent = $scrollParent;\n\n            const offset = this.$scrollParent.offset();\n            this.scrollParentTop = offset ? offset.top : 0;\n        } else {\n            setDocumentAsScrollParent();\n        }\n\n        this.isInitialized = true;\n    }\n\n    private ensureInit(): void {\n        if (!this.isInitialized) {\n            this.initScrollParent();\n        }\n    }\n\n    private handleVerticalScrollingWithScrollParent(area: HitArea): void {\n        const scrollParent = this.$scrollParent && this.$scrollParent[0];\n\n        if (!scrollParent) {\n            return;\n        }\n\n        const distanceBottom =\n            this.scrollParentTop + scrollParent.offsetHeight - area.bottom;\n\n        if (distanceBottom < 20) {\n            scrollParent.scrollTop += 20;\n            this.treeWidget.refreshHitAreas();\n            this.previousTop = -1;\n        } else if (area.top - this.scrollParentTop < 20) {\n            scrollParent.scrollTop -= 20;\n            this.treeWidget.refreshHitAreas();\n            this.previousTop = -1;\n        }\n    }\n\n    private handleVerticalScrollingWithDocument(area: HitArea): void {\n        const scrollTop = jQuery(document).scrollTop() || 0;\n        const distanceTop = area.top - scrollTop;\n\n        if (distanceTop < 20) {\n            jQuery(document).scrollTop(scrollTop - 20);\n        } else {\n            const windowHeight = jQuery(window).height() || 0;\n\n            if (windowHeight - (area.bottom - scrollTop) < 20) {\n                jQuery(document).scrollTop(scrollTop + 20);\n            }\n        }\n    }\n\n    private checkVerticalScrolling(): void {\n        const hoveredArea = this.treeWidget.dndHandler.hoveredArea;\n\n        if (hoveredArea && hoveredArea.top !== this.previousTop) {\n            this.previousTop = hoveredArea.top;\n\n            if (this.$scrollParent) {\n                this.handleVerticalScrollingWithScrollParent(hoveredArea);\n            } else {\n                this.handleVerticalScrollingWithDocument(hoveredArea);\n            }\n        }\n    }\n\n    private checkHorizontalScrolling(): void {\n        const positionInfo = this.treeWidget.dndHandler.positionInfo;\n\n        if (!positionInfo) {\n            return;\n        }\n\n        if (this.$scrollParent) {\n            this.handleHorizontalScrollingWithParent(positionInfo);\n        } else {\n            this.handleHorizontalScrollingWithDocument(positionInfo);\n        }\n    }\n\n    private handleHorizontalScrollingWithParent(\n        positionInfo: PositionInfo\n    ): void {\n        if (\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return;\n        }\n\n        const $scrollParent = this.$scrollParent;\n        const scrollParentOffset = $scrollParent && $scrollParent.offset();\n\n        if (!($scrollParent && scrollParentOffset)) {\n            return;\n        }\n\n        const scrollParent = $scrollParent[0];\n\n        const canScrollRight =\n            scrollParent.scrollLeft + scrollParent.clientWidth <\n            scrollParent.scrollWidth;\n        const canScrollLeft = scrollParent.scrollLeft > 0;\n\n        const rightEdge = scrollParentOffset.left + scrollParent.clientWidth;\n        const leftEdge = scrollParentOffset.left;\n        const isNearRightEdge = positionInfo.pageX > rightEdge - 20;\n        const isNearLeftEdge = positionInfo.pageX < leftEdge + 20;\n\n        if (isNearRightEdge && canScrollRight) {\n            scrollParent.scrollLeft = Math.min(\n                scrollParent.scrollLeft + 20,\n                scrollParent.scrollWidth\n            );\n        } else if (isNearLeftEdge && canScrollLeft) {\n            scrollParent.scrollLeft = Math.max(scrollParent.scrollLeft - 20, 0);\n        }\n    }\n\n    private handleHorizontalScrollingWithDocument(\n        positionInfo: PositionInfo\n    ): void {\n        if (\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return;\n        }\n\n        const $document = jQuery(document);\n\n        const scrollLeft = $document.scrollLeft() || 0;\n        const windowWidth = jQuery(window).width() || 0;\n\n        const canScrollLeft = scrollLeft > 0;\n\n        const isNearRightEdge = positionInfo.pageX > windowWidth - 20;\n        const isNearLeftEdge = positionInfo.pageX - scrollLeft < 20;\n\n        if (isNearRightEdge) {\n            $document.scrollLeft(scrollLeft + 20);\n        } else if (isNearLeftEdge && canScrollLeft) {\n            $document.scrollLeft(Math.max(scrollLeft - 20, 0));\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport default class SelectNodeHandler {\n    private treeWidget: JqTreeWidget;\n    private selectedNodes: Set<NodeId>;\n    private selectedSingleNode: Node | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n        this.selectedNodes = new Set<NodeId>();\n        this.clear();\n    }\n\n    public getSelectedNode(): Node | false {\n        const selectedNodes = this.getSelectedNodes();\n\n        if (selectedNodes.length) {\n            return selectedNodes[0];\n        } else {\n            return false;\n        }\n    }\n\n    public getSelectedNodes(): Node[] {\n        if (this.selectedSingleNode) {\n            return [this.selectedSingleNode];\n        } else {\n            const selectedNodes: Node[] = [];\n\n            this.selectedNodes.forEach((id) => {\n                const node = this.treeWidget.getNodeById(id);\n                if (node) {\n                    selectedNodes.push(node);\n                }\n            });\n\n            return selectedNodes;\n        }\n    }\n\n    public getSelectedNodesUnder(parent: Node): Node[] {\n        if (this.selectedSingleNode) {\n            if (parent.isParentOf(this.selectedSingleNode)) {\n                return [this.selectedSingleNode];\n            } else {\n                return [];\n            }\n        } else {\n            const selectedNodes = [];\n\n            for (const id in this.selectedNodes) {\n                if (\n                    Object.prototype.hasOwnProperty.call(this.selectedNodes, id)\n                ) {\n                    const node = this.treeWidget.getNodeById(id);\n                    if (node && parent.isParentOf(node)) {\n                        selectedNodes.push(node);\n                    }\n                }\n            }\n\n            return selectedNodes;\n        }\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (node.id != null) {\n            return this.selectedNodes.has(node.id);\n        } else if (this.selectedSingleNode) {\n            return this.selectedSingleNode.element === node.element;\n        } else {\n            return false;\n        }\n    }\n\n    public clear(): void {\n        this.selectedNodes.clear();\n        this.selectedSingleNode = null;\n    }\n\n    public removeFromSelection(node: Node, includeChildren = false): void {\n        if (node.id == null) {\n            if (\n                this.selectedSingleNode &&\n                node.element === this.selectedSingleNode.element\n            ) {\n                this.selectedSingleNode = null;\n            }\n        } else {\n            this.selectedNodes.delete(node.id);\n\n            if (includeChildren) {\n                node.iterate(() => {\n                    if (node.id != null) {\n                        this.selectedNodes.delete(node.id);\n                    }\n                    return true;\n                });\n            }\n        }\n    }\n\n    public addToSelection(node: Node): void {\n        if (node.id != null) {\n            this.selectedNodes.add(node.id);\n        } else {\n            this.selectedSingleNode = node;\n        }\n    }\n\n    public isFocusOnTree(): boolean {\n        const activeElement = document.activeElement;\n\n        return Boolean(\n            activeElement &&\n                activeElement.tagName === \"SPAN\" &&\n                this.treeWidget._containsElement(activeElement as HTMLElement)\n        );\n    }\n}\n","import { Position, Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\nimport { DropHint } from \"./types\";\n\nexport type OnFinishOpenNode = (node: Node) => void;\n\nexport class NodeElement {\n    public node: Node;\n    public $element: JQuery<HTMLElement>;\n    protected treeWidget: JqTreeWidget;\n\n    constructor(node: Node, treeWidget: JqTreeWidget) {\n        this.init(node, treeWidget);\n    }\n\n    public init(node: Node, treeWidget: JqTreeWidget): void {\n        this.node = node;\n        this.treeWidget = treeWidget;\n\n        if (!node.element) {\n            const element = this.treeWidget.element.get(0);\n\n            if (element) {\n                node.element = element;\n            }\n        }\n\n        if (node.element) {\n            this.$element = jQuery(node.element);\n        }\n    }\n\n    public addDropHint(position: number): DropHint {\n        if (this.mustShowBorderDropHint(position)) {\n            return new BorderDropHint(\n                this.$element,\n                this.treeWidget._getScrollLeft()\n            );\n        } else {\n            return new GhostDropHint(this.node, this.$element, position);\n        }\n    }\n\n    public select(mustSetFocus: boolean): void {\n        const $li = this.getLi();\n\n        $li.addClass(\"jqtree-selected\");\n        $li.attr(\"aria-selected\", \"true\");\n\n        const $span = this.getSpan();\n        $span.attr(\"tabindex\", this.treeWidget.options.tabIndex ?? null);\n\n        if (mustSetFocus) {\n            $span.trigger(\"focus\");\n        }\n    }\n\n    public deselect(): void {\n        const $li = this.getLi();\n\n        $li.removeClass(\"jqtree-selected\");\n        $li.attr(\"aria-selected\", \"false\");\n\n        const $span = this.getSpan();\n        $span.removeAttr(\"tabindex\");\n\n        $span.blur();\n    }\n\n    protected getUl(): JQuery<HTMLElement> {\n        return this.$element.children(\"ul:first\");\n    }\n\n    protected getSpan(): JQuery<HTMLElement> {\n        return this.$element\n            .children(\".jqtree-element\")\n            .find(\"span.jqtree-title\");\n    }\n\n    protected getLi(): JQuery<HTMLElement> {\n        return this.$element;\n    }\n\n    protected mustShowBorderDropHint(position: number): boolean {\n        return position === Position.Inside;\n    }\n}\n\nexport class FolderElement extends NodeElement {\n    public open(\n        onFinished: OnFinishOpenNode | null,\n        slide = true,\n        animationSpeed: JQuery.Duration | string = \"fast\"\n    ): void {\n        if (this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = true;\n\n        const $button = this.getButton();\n        $button.removeClass(\"jqtree-closed\");\n        $button.html(\"\");\n\n        const buttonEl = $button.get(0);\n\n        if (buttonEl) {\n            const icon =\n                this.treeWidget.renderer.openedIconElement.cloneNode(true);\n\n            buttonEl.appendChild(icon);\n        }\n\n        const doOpen = (): void => {\n            const $li = this.getLi();\n            $li.removeClass(\"jqtree-closed\");\n\n            const $span = this.getSpan();\n            $span.attr(\"aria-expanded\", \"true\");\n\n            if (onFinished) {\n                onFinished(this.node);\n            }\n\n            this.treeWidget._triggerEvent(\"tree.open\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            this.getUl().slideDown(animationSpeed, doOpen);\n        } else {\n            this.getUl().show();\n            doOpen();\n        }\n    }\n\n    public close(\n        slide = true,\n        animationSpeed: JQuery.Duration | string = \"fast\"\n    ): void {\n        if (!this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = false;\n\n        const $button = this.getButton();\n        $button.addClass(\"jqtree-closed\");\n        $button.html(\"\");\n\n        const buttonEl = $button.get(0);\n\n        if (buttonEl) {\n            const icon =\n                this.treeWidget.renderer.closedIconElement.cloneNode(true);\n\n            buttonEl.appendChild(icon);\n        }\n\n        const doClose = (): void => {\n            const $li = this.getLi();\n            $li.addClass(\"jqtree-closed\");\n\n            const $span = this.getSpan();\n            $span.attr(\"aria-expanded\", \"false\");\n\n            this.treeWidget._triggerEvent(\"tree.close\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            this.getUl().slideUp(animationSpeed, doClose);\n        } else {\n            this.getUl().hide();\n            doClose();\n        }\n    }\n\n    protected mustShowBorderDropHint(position: number): boolean {\n        return !this.node.is_open && position === Position.Inside;\n    }\n\n    private getButton(): JQuery {\n        return this.$element\n            .children(\".jqtree-element\")\n            .find(\"a.jqtree-toggler\");\n    }\n}\n\nexport class BorderDropHint implements DropHint {\n    private $hint: JQuery<Element>;\n\n    constructor($element: JQuery<Element>, scrollLeft: number) {\n        const $div = $element.children(\".jqtree-element\");\n\n        const elWidth = $element.width() || 0;\n        const width = Math.max(elWidth + scrollLeft - 4, 0);\n\n        const elHeight = $div.outerHeight() || 0;\n        const height = Math.max(elHeight - 4, 0);\n\n        this.$hint = jQuery('<span class=\"jqtree-border\"></span>');\n        $div.append(this.$hint);\n\n        this.$hint.css({ width, height });\n    }\n\n    public remove(): void {\n        this.$hint.remove();\n    }\n}\n\nclass GhostDropHint implements DropHint {\n    private $element: JQuery<Element>;\n    private node: Node;\n    private $ghost: JQuery;\n\n    constructor(node: Node, $element: JQuery<Element>, position: number) {\n        this.$element = $element;\n\n        this.node = node;\n        this.$ghost = jQuery(\n            `<li class=\"jqtree_common jqtree-ghost\"><span class=\"jqtree_common jqtree-circle\"></span>\n            <span class=\"jqtree_common jqtree-line\"></span></li>`\n        );\n\n        if (position === Position.After) {\n            this.moveAfter();\n        } else if (position === Position.Before) {\n            this.moveBefore();\n        } else if (position === Position.Inside) {\n            if (node.isFolder() && node.is_open) {\n                this.moveInsideOpenFolder();\n            } else {\n                this.moveInside();\n            }\n        }\n    }\n\n    public remove(): void {\n        this.$ghost.remove();\n    }\n\n    public moveAfter(): void {\n        this.$element.after(this.$ghost);\n    }\n\n    public moveBefore(): void {\n        this.$element.before(this.$ghost);\n    }\n\n    public moveInsideOpenFolder(): void {\n        const childElement = this.node.children[0].element;\n\n        if (childElement) {\n            jQuery(childElement).before(this.$ghost);\n        }\n    }\n\n    public moveInside(): void {\n        this.$element.after(this.$ghost);\n        this.$ghost.addClass(\"jqtree-inside\");\n    }\n}\n","import __version__ from \"./version\";\nimport { DragAndDropHandler } from \"./dragAndDropHandler\";\nimport ElementsRenderer from \"./elementsRenderer\";\nimport DataLoader, { HandleFinishedLoading } from \"./dataLoader\";\nimport KeyHandler from \"./keyHandler\";\nimport MouseWidget from \"./mouse.widget\";\nimport { PositionInfo } from \"./types\";\nimport SaveStateHandler, { SavedState } from \"./saveStateHandler\";\nimport ScrollHandler from \"./scrollHandler\";\nimport SelectNodeHandler from \"./selectNodeHandler\";\nimport SimpleWidget from \"./simple.widget\";\nimport { Node, getPosition } from \"./node\";\nimport { isFunction } from \"./util\";\nimport { FolderElement, NodeElement, OnFinishOpenNode } from \"./nodeElement\";\nimport { JQTreeOptions } from \"./jqtreeOptions\";\n\ninterface ClickTarget {\n    node: Node;\n    type: \"button\" | \"label\";\n}\n\ninterface SelectNodeOptions {\n    mustToggle?: boolean;\n    mustSetFocus?: boolean;\n}\n\nconst NODE_PARAM_IS_EMPTY = \"Node parameter is empty\";\nconst PARAM_IS_EMPTY = \"Parameter is empty: \";\n\nexport class JqTreeWidget extends MouseWidget<JQTreeOptions> {\n    protected static defaults: JQTreeOptions = {\n        animationSpeed: \"fast\",\n        autoEscape: true,\n        autoOpen: false, // true / false / int (open n levels starting at 0)\n        buttonLeft: true,\n        // The symbol to use for a closed node - ► BLACK RIGHT-POINTING POINTER\n        // http://www.fileformat.info/info/unicode/char/25ba/index.htm\n        closedIcon: undefined,\n        data: undefined,\n        dataFilter: undefined,\n        dataUrl: undefined,\n        dragAndDrop: false,\n        keyboardSupport: true,\n        nodeClass: Node,\n        onCanMove: undefined, // Can this node be moved?\n        onCanMoveTo: undefined, // Can this node be moved to this position? function(moved_node, target_node, position)\n        onCanSelectNode: undefined,\n        onCreateLi: undefined,\n        onDragMove: undefined,\n        onDragStop: undefined,\n        onGetStateFromStorage: undefined,\n        onIsMoveHandle: undefined,\n        onLoadFailed: undefined,\n        onLoading: undefined,\n        onSetStateFromStorage: undefined,\n        openedIcon: \"&#x25bc;\",\n        openFolderDelay: 500, // The delay for opening a folder during drag and drop; the value is in milliseconds\n        // The symbol to use for an open node - ▼ BLACK DOWN-POINTING TRIANGLE\n        // http://www.fileformat.info/info/unicode/char/25bc/index.htm\n        rtl: undefined, // right-to-left support; true / false (default)\n        saveState: false, // true / false / string (cookie name)\n        selectable: true,\n        showEmptyFolder: false,\n        slide: true, // must display slide animation?\n        startDndDelay: 300, // The delay for starting dnd (in milliseconds)\n        tabIndex: 0,\n        useContextMenu: true,\n    };\n\n    public element: JQuery;\n    public tree: Node;\n    public dndHandler: DragAndDropHandler;\n    public renderer: ElementsRenderer;\n    public dataLoader: DataLoader;\n    public scrollHandler: ScrollHandler;\n    public selectNodeHandler: SelectNodeHandler;\n\n    private isInitialized: boolean;\n    private saveStateHandler: SaveStateHandler;\n    private keyHandler: KeyHandler;\n\n    public toggle(node: Node, slideParam: null | boolean = null): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.is_open) {\n            this.closeNode(node, slide);\n        } else {\n            this.openNode(node, slide);\n        }\n\n        return this.element;\n    }\n\n    public getTree(): Node {\n        return this.tree;\n    }\n\n    public selectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions\n    ): JQuery {\n        this.doSelectNode(node, optionsParam);\n        return this.element;\n    }\n\n    public getSelectedNode(): Node | false {\n        return this.selectNodeHandler.getSelectedNode();\n    }\n\n    public toJson(): string {\n        return JSON.stringify(this.tree.getData());\n    }\n\n    public loadData(data: NodeData[], parentNode: Node | null): JQuery {\n        this.doLoadData(data, parentNode);\n        return this.element;\n    }\n\n    /*\n    signatures:\n    - loadDataFromUrl(url, parent_node=null, on_finished=null)\n        loadDataFromUrl('/my_data');\n        loadDataFromUrl('/my_data', node1);\n        loadDataFromUrl('/my_data', node1, function() { console.log('finished'); });\n        loadDataFromUrl('/my_data', null, function() { console.log('finished'); });\n\n    - loadDataFromUrl(parent_node=null, on_finished=null)\n        loadDataFromUrl();\n        loadDataFromUrl(node1);\n        loadDataFromUrl(null, function() { console.log('finished'); });\n        loadDataFromUrl(node1, function() { console.log('finished'); });\n    */\n    public loadDataFromUrl(\n        param1: string | null | Node,\n        param2?: Node | null | HandleFinishedLoading,\n        param3?: HandleFinishedLoading\n    ): JQuery {\n        if (typeof param1 === \"string\") {\n            // first parameter is url\n            this.doLoadDataFromUrl(\n                param1,\n                param2 as Node | null,\n                param3 ?? null\n            );\n        } else {\n            // first parameter is not url\n            this.doLoadDataFromUrl(\n                null,\n                param1,\n                param2 as HandleFinishedLoading | null\n            );\n        }\n\n        return this.element;\n    }\n\n    public reload(onFinished: HandleFinishedLoading | null): JQuery {\n        this.doLoadDataFromUrl(null, null, onFinished);\n        return this.element;\n    }\n\n    public refresh(): JQuery {\n        this._refreshElements(null);\n        return this.element;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.tree.getNodeById(nodeId);\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.tree.getNodeByName(name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        return this.tree.getNodeByNameMustExist(name);\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.tree.getNodesByProperty(key, value);\n    }\n\n    public getNodeByHtmlElement(\n        element: HTMLElement | JQuery<HTMLElement>\n    ): Node | null {\n        return this.getNode(jQuery(element));\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        return this.tree.getNodeByCallback(callback);\n    }\n\n    public openNode(\n        node: Node,\n        param1?: boolean | OnFinishOpenNode,\n        param2?: OnFinishOpenNode\n    ): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const parseParams = (): [boolean, OnFinishOpenNode | null] => {\n            let onFinished: OnFinishOpenNode | null;\n            let slide: boolean | null;\n\n            if (isFunction(param1)) {\n                onFinished = param1 as OnFinishOpenNode | null;\n                slide = null;\n            } else {\n                slide = param1 as boolean;\n                onFinished = param2 as OnFinishOpenNode;\n            }\n\n            if (slide == null) {\n                slide = this.options.slide ?? false;\n            }\n\n            return [slide, onFinished];\n        };\n\n        const [slide, onFinished] = parseParams();\n\n        this._openNode(node, slide, onFinished);\n        return this.element;\n    }\n\n    public closeNode(node: Node, slideParam?: null | boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            new FolderElement(node, this).close(\n                slide,\n                this.options.animationSpeed\n            );\n\n            this.saveState();\n        }\n\n        return this.element;\n    }\n\n    public isDragging(): boolean {\n        return this.dndHandler.isDragging;\n    }\n\n    public refreshHitAreas(): JQuery {\n        this.dndHandler.refresh();\n        return this.element;\n    }\n\n    public addNodeAfter(\n        newNodeInfo: NodeData,\n        existingNode: Node\n    ): Node | null {\n        const newNode = existingNode.addAfter(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addNodeBefore(\n        newNodeInfo: NodeData,\n        existingNode: Node\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addBefore(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addParentNode(\n        newNodeInfo: NodeData,\n        existingNode: Node\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addParent(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(newNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public removeNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!node.parent) {\n            throw Error(\"Node has no parent\");\n        }\n\n        this.selectNodeHandler.removeFromSelection(node, true); // including children\n\n        const parent = node.parent;\n        node.remove();\n        this._refreshElements(parent);\n\n        return this.element;\n    }\n\n    public appendNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam || this.tree;\n\n        const node = parentNode.append(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public prependNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam ?? this.tree;\n\n        const node = parentNode.prepend(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public updateNode(node: Node, data: NodeData): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const idIsChanged =\n            typeof data === \"object\" && data.id && data.id !== node.id;\n\n        if (idIsChanged) {\n            this.tree.removeNodeFromIndex(node);\n        }\n\n        node.setData(data);\n\n        if (idIsChanged) {\n            this.tree.addNodeToIndex(node);\n        }\n\n        if (\n            typeof data === \"object\" &&\n            data[\"children\"] &&\n            data[\"children\"] instanceof Array\n        ) {\n            node.removeChildren();\n\n            if (data.children.length) {\n                node.loadFromData(data.children as Node[]);\n            }\n        }\n\n        this._refreshElements(node);\n\n        return this.element;\n    }\n\n    private isSelectedNodeInSubtree(subtree: Node): boolean {\n        const selectedNode = this.getSelectedNode();\n\n        if (!selectedNode) {\n            return false;\n        } else {\n            return subtree === selectedNode || subtree.isParentOf(selectedNode);\n        }\n    }\n\n    public moveNode(node: Node, targetNode: Node, position: string): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!targetNode) {\n            throw Error(PARAM_IS_EMPTY + \"targetNode\");\n        }\n\n        const positionIndex = getPosition(position);\n\n        if (positionIndex !== undefined) {\n            this.tree.moveNode(node, targetNode, positionIndex);\n            this._refreshElements(null);\n        }\n\n        return this.element;\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        return this.saveStateHandler.getStateFromStorage();\n    }\n\n    public addToSelection(node: Node, mustSetFocus?: boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.addToSelection(node);\n\n        this._getNodeElementForNode(node).select(\n            mustSetFocus === undefined ? true : mustSetFocus\n        );\n\n        this.saveState();\n\n        return this.element;\n    }\n\n    public getSelectedNodes(): Node[] {\n        return this.selectNodeHandler.getSelectedNodes();\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        return this.selectNodeHandler.isNodeSelected(node);\n    }\n\n    public removeFromSelection(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.removeFromSelection(node);\n\n        this._getNodeElementForNode(node).deselect();\n        this.saveState();\n\n        return this.element;\n    }\n\n    public scrollToNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const nodeOffset = jQuery(node.element).offset();\n        const nodeTop = nodeOffset ? nodeOffset.top : 0;\n\n        const treeOffset = this.$el.offset();\n        const treeTop = treeOffset ? treeOffset.top : 0;\n\n        const top = nodeTop - treeTop;\n\n        this.scrollHandler.scrollToY(top);\n\n        return this.element;\n    }\n\n    public getState(): SavedState | null {\n        return this.saveStateHandler.getState();\n    }\n\n    public setState(state: SavedState): JQuery {\n        this.saveStateHandler.setInitialState(state);\n        this._refreshElements(null);\n\n        return this.element;\n    }\n\n    public setOption(option: string, value: unknown): JQuery {\n        (this.options as unknown as Record<string, unknown>)[option] = value;\n        return this.element;\n    }\n\n    public moveDown(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveDown(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public moveUp(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveUp(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public getVersion(): string {\n        return __version__;\n    }\n\n    public _triggerEvent(\n        eventName: string,\n        values?: Record<string, unknown>\n    ): JQuery.Event {\n        const event = jQuery.Event(eventName, values);\n        this.element.trigger(event);\n        return event;\n    }\n\n    public _openNode(\n        node: Node,\n        slide = true,\n        onFinished: OnFinishOpenNode | null\n    ): void {\n        const doOpenNode = (\n            _node: Node,\n            _slide: boolean,\n            _onFinished: OnFinishOpenNode | null\n        ): void => {\n            const folderElement = new FolderElement(_node, this);\n            folderElement.open(\n                _onFinished,\n                _slide,\n                this.options.animationSpeed\n            );\n        };\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            if (node.load_on_demand) {\n                this.loadFolderOnDemand(node, slide, onFinished);\n            } else {\n                let parent = node.parent;\n\n                while (parent) {\n                    // nb: do not open root element\n                    if (parent.parent) {\n                        doOpenNode(parent, false, null);\n                    }\n                    parent = parent.parent;\n                }\n\n                doOpenNode(node, slide, onFinished);\n                this.saveState();\n            }\n        }\n    }\n\n    /*\n    Redraw the tree or part of the tree.\n     from_node: redraw this subtree\n    */\n    public _refreshElements(fromNode: Node | null): void {\n        const mustSetFocus = this.selectNodeHandler.isFocusOnTree();\n        const mustSelect = fromNode\n            ? this.isSelectedNodeInSubtree(fromNode)\n            : false;\n\n        this.renderer.render(fromNode);\n\n        if (mustSelect) {\n            this.selectCurrentNode(mustSetFocus);\n        }\n\n        this._triggerEvent(\"tree.refresh\");\n    }\n\n    public _getNodeElementForNode(node: Node): NodeElement {\n        if (node.isFolder()) {\n            return new FolderElement(node, this);\n        } else {\n            return new NodeElement(node, this);\n        }\n    }\n\n    public _getNodeElement($element: JQuery<HTMLElement>): NodeElement | null {\n        const node = this.getNode($element);\n        if (node) {\n            return this._getNodeElementForNode(node);\n        } else {\n            return null;\n        }\n    }\n\n    public _containsElement(element: HTMLElement): boolean {\n        const node = this.getNode(jQuery(element));\n\n        return node != null && node.tree === this.tree;\n    }\n\n    public _getScrollLeft(): number {\n        return this.scrollHandler.getScrollLeft();\n    }\n\n    public init(): void {\n        super.init();\n\n        this.element = this.$el;\n        this.isInitialized = false;\n\n        this.options.rtl = this.getRtlOption();\n\n        if (this.options.closedIcon == null) {\n            this.options.closedIcon = this.getDefaultClosedIcon();\n        }\n\n        this.renderer = new ElementsRenderer(this);\n        this.dataLoader = new DataLoader(this);\n        this.saveStateHandler = new SaveStateHandler(this);\n        this.selectNodeHandler = new SelectNodeHandler(this);\n        this.dndHandler = new DragAndDropHandler(this);\n        this.scrollHandler = new ScrollHandler(this);\n        this.keyHandler = new KeyHandler(this);\n\n        this.initData();\n\n        this.element.on(\"click\", this.handleClick);\n        this.element.on(\"dblclick\", this.handleDblclick);\n\n        if (this.options.useContextMenu) {\n            this.element.on(\"contextmenu\", this.handleContextmenu);\n        }\n    }\n\n    public deinit(): void {\n        this.element.empty();\n        this.element.off();\n\n        this.keyHandler.deinit();\n\n        this.tree = new Node({}, true);\n\n        super.deinit();\n    }\n\n    protected mouseCapture(positionInfo: PositionInfo): boolean | null {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseCapture(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStart(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStart(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseDrag(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            const result = this.dndHandler.mouseDrag(positionInfo);\n\n            this.scrollHandler.checkScrolling();\n            return result;\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStop(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStop(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected getMouseDelay(): number {\n        return this.options.startDndDelay ?? 0;\n    }\n\n    private initData(): void {\n        if (this.options.data) {\n            this.doLoadData(this.options.data, null);\n        } else {\n            const dataUrl = this.getDataUrlInfo(null);\n\n            if (dataUrl) {\n                this.doLoadDataFromUrl(null, null, null);\n            } else {\n                this.doLoadData([], null);\n            }\n        }\n    }\n\n    private getDataUrlInfo(node: Node | null): JQuery.AjaxSettings | null {\n        const dataUrl =\n            this.options.dataUrl || (this.element.data(\"url\") as string | null);\n\n        const getUrlFromString = (url: string): JQuery.AjaxSettings => {\n            const urlInfo: JQuery.AjaxSettings = { url };\n\n            setUrlInfoData(urlInfo);\n\n            return urlInfo;\n        };\n\n        const setUrlInfoData = (urlInfo: JQuery.AjaxSettings): void => {\n            if (node?.id) {\n                // Load on demand of a subtree; add node parameter\n                const data = { node: node.id };\n                urlInfo[\"data\"] = data;\n            } else {\n                // Add selected_node parameter\n                const selectedNodeId = this.getNodeIdToBeSelected();\n                if (selectedNodeId) {\n                    const data = { selected_node: selectedNodeId };\n                    urlInfo[\"data\"] = data;\n                }\n            }\n        };\n\n        if (typeof dataUrl === \"function\") {\n            return dataUrl(node);\n        } else if (typeof dataUrl === \"string\") {\n            return getUrlFromString(dataUrl);\n        } else if (dataUrl && typeof dataUrl === \"object\") {\n            setUrlInfoData(dataUrl);\n            return dataUrl;\n        } else {\n            return null;\n        }\n    }\n\n    private getNodeIdToBeSelected(): NodeId | null {\n        if (this.options.saveState) {\n            return this.saveStateHandler.getNodeIdToBeSelected();\n        } else {\n            return null;\n        }\n    }\n\n    private initTree(data: NodeData[]): void {\n        const doInit = (): void => {\n            if (!this.isInitialized) {\n                this.isInitialized = true;\n                this._triggerEvent(\"tree.init\");\n            }\n        };\n\n        if (!this.options.nodeClass) {\n            return;\n        }\n\n        this.tree = new this.options.nodeClass(\n            null,\n            true,\n            this.options.nodeClass\n        );\n\n        this.selectNodeHandler.clear();\n\n        this.tree.loadFromData(data);\n\n        const mustLoadOnDemand = this.setInitialState();\n\n        this._refreshElements(null);\n\n        if (!mustLoadOnDemand) {\n            doInit();\n        } else {\n            // Load data on demand and then init the tree\n            this.setInitialStateOnDemand(doInit);\n        }\n    }\n\n    // Set initial state, either by restoring the state or auto-opening nodes\n    // result: must load nodes on demand?\n    private setInitialState(): boolean {\n        const restoreState = (): boolean[] => {\n            // result: is state restored, must load on demand?\n            if (!this.options.saveState) {\n                return [false, false];\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return [false, false];\n                } else {\n                    const mustLoadOnDemand =\n                        this.saveStateHandler.setInitialState(state);\n\n                    // return true: the state is restored\n                    return [true, mustLoadOnDemand];\n                }\n            }\n        };\n\n        const autoOpenNodes = (): boolean => {\n            // result: must load on demand?\n            if (this.options.autoOpen === false) {\n                return false;\n            }\n\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let mustLoadOnDemand = false;\n\n            this.tree.iterate((node: Node, level: number) => {\n                if (node.load_on_demand) {\n                    mustLoadOnDemand = true;\n                    return false;\n                } else if (!node.hasChildren()) {\n                    return false;\n                } else {\n                    node.is_open = true;\n                    return level !== maxLevel;\n                }\n            });\n\n            return mustLoadOnDemand;\n        };\n\n        let [isRestored, mustLoadOnDemand] = restoreState(); // eslint-disable-line prefer-const\n\n        if (!isRestored) {\n            mustLoadOnDemand = autoOpenNodes();\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    // Set the initial state for nodes that are loaded on demand\n    // Call cb_finished when done\n    private setInitialStateOnDemand(cbFinished: () => void): void {\n        const restoreState = (): boolean => {\n            if (!this.options.saveState) {\n                return false;\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return false;\n                } else {\n                    this.saveStateHandler.setInitialStateOnDemand(\n                        state,\n                        cbFinished\n                    );\n\n                    return true;\n                }\n            }\n        };\n\n        const autoOpenNodes = (): void => {\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let loadingCount = 0;\n\n            const loadAndOpenNode = (node: Node): void => {\n                loadingCount += 1;\n                this._openNode(node, false, () => {\n                    loadingCount -= 1;\n                    openNodes();\n                });\n            };\n\n            const openNodes = (): void => {\n                this.tree.iterate((node: Node, level: number) => {\n                    if (node.load_on_demand) {\n                        if (!node.is_loading) {\n                            loadAndOpenNode(node);\n                        }\n\n                        return false;\n                    } else {\n                        this._openNode(node, false, null);\n\n                        return level !== maxLevel;\n                    }\n                });\n\n                if (loadingCount === 0) {\n                    cbFinished();\n                }\n            };\n\n            openNodes();\n        };\n\n        if (!restoreState()) {\n            autoOpenNodes();\n        }\n    }\n\n    private getAutoOpenMaxLevel(): number {\n        if (this.options.autoOpen === true) {\n            return -1;\n        } else if (typeof this.options.autoOpen === \"number\") {\n            return this.options.autoOpen;\n        } else if (typeof this.options.autoOpen === \"string\") {\n            return parseInt(this.options.autoOpen, 10);\n        } else {\n            return 0;\n        }\n    }\n\n    private handleClick = (\n        e: JQuery.ClickEvent<HTMLElement, any, HTMLElement, HTMLElement>\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget) {\n            if (clickTarget.type === \"button\") {\n                this.toggle(clickTarget.node, this.options.slide);\n\n                e.preventDefault();\n                e.stopPropagation();\n            } else if (clickTarget.type === \"label\") {\n                const node = clickTarget.node;\n                const event = this._triggerEvent(\"tree.click\", {\n                    node,\n                    click_event: e,\n                });\n\n                if (!event.isDefaultPrevented()) {\n                    this.doSelectNode(node);\n                }\n            }\n        }\n    };\n\n    private handleDblclick = (\n        e: JQuery.DoubleClickEvent<HTMLElement, any, HTMLElement, HTMLElement>\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget?.type === \"label\") {\n            this._triggerEvent(\"tree.dblclick\", {\n                node: clickTarget.node,\n                click_event: e,\n            });\n        }\n    };\n\n    private getClickTarget(element: EventTarget): ClickTarget | null {\n        const $target = jQuery(element);\n\n        const $button = $target.closest(\".jqtree-toggler\");\n\n        if ($button.length) {\n            const node = this.getNode($button as JQuery<HTMLElement>);\n\n            if (node) {\n                return {\n                    type: \"button\",\n                    node,\n                };\n            }\n        } else {\n            const $el = $target.closest(\".jqtree-element\");\n            if ($el.length) {\n                const node = this.getNode($el as JQuery<HTMLElement>);\n                if (node) {\n                    return {\n                        type: \"label\",\n                        node,\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    private getNode($element: JQuery<HTMLElement>): null | Node {\n        const $li = $element.closest(\"li.jqtree_common\");\n        if ($li.length === 0) {\n            return null;\n        } else {\n            return $li.data(\"node\") as Node;\n        }\n    }\n\n    private handleContextmenu = (\n        e: JQuery.ContextMenuEvent<HTMLElement, any, HTMLElement, HTMLElement>\n    ) => {\n        const $div = jQuery(e.target).closest(\"ul.jqtree-tree .jqtree-element\");\n        if ($div.length) {\n            const node = this.getNode($div);\n            if (node) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                this._triggerEvent(\"tree.contextmenu\", {\n                    node,\n                    click_event: e,\n                });\n                return false;\n            }\n        }\n\n        return null;\n    };\n\n    private saveState(): void {\n        if (this.options.saveState) {\n            this.saveStateHandler.saveState();\n        }\n    }\n\n    private selectCurrentNode(mustSetFocus: boolean): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            const nodeElement = this._getNodeElementForNode(node);\n            if (nodeElement) {\n                nodeElement.select(mustSetFocus);\n            }\n        }\n    }\n\n    private deselectCurrentNode(): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            this.removeFromSelection(node);\n        }\n    }\n\n    private getDefaultClosedIcon(): string {\n        if (this.options.rtl) {\n            // triangle to the left\n            return \"&#x25c0;\";\n        } else {\n            // triangle to the right\n            return \"&#x25ba;\";\n        }\n    }\n\n    private getRtlOption(): boolean {\n        if (this.options.rtl != null) {\n            return this.options.rtl;\n        } else {\n            const dataRtl = this.element.data(\"rtl\") as unknown;\n\n            if (\n                dataRtl !== null &&\n                dataRtl !== false &&\n                dataRtl !== undefined\n            ) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    private doSelectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions\n    ): void {\n        const saveState = (): void => {\n            if (this.options.saveState) {\n                this.saveStateHandler.saveState();\n            }\n        };\n\n        if (!node) {\n            // Called with empty node -> deselect current node\n            this.deselectCurrentNode();\n            saveState();\n            return;\n        }\n        const defaultOptions = { mustSetFocus: true, mustToggle: true };\n        const selectOptions = { ...defaultOptions, ...(optionsParam || {}) };\n\n        const canSelect = (): boolean => {\n            if (this.options.onCanSelectNode) {\n                return (\n                    this.options.selectable === true &&\n                    this.options.onCanSelectNode(node)\n                );\n            } else {\n                return this.options.selectable === true;\n            }\n        };\n\n        const openParents = (): void => {\n            const parent = node.parent;\n\n            if (parent && parent.parent && !parent.is_open) {\n                this.openNode(parent, false);\n            }\n        };\n\n        if (!canSelect()) {\n            return;\n        }\n\n        if (this.selectNodeHandler.isNodeSelected(node)) {\n            if (selectOptions.mustToggle) {\n                this.deselectCurrentNode();\n                this._triggerEvent(\"tree.select\", {\n                    node: null,\n                    previous_node: node,\n                });\n            }\n        } else {\n            const deselectedNode = this.getSelectedNode() || null;\n            this.deselectCurrentNode();\n            this.addToSelection(node, selectOptions.mustSetFocus);\n\n            this._triggerEvent(\"tree.select\", {\n                node,\n                deselected_node: deselectedNode,\n            });\n            openParents();\n        }\n\n        saveState();\n    }\n\n    private doLoadData(data: NodeData[] | null, parentNode: Node | null): void {\n        if (!data) {\n            return;\n        } else {\n            this._triggerEvent(\"tree.load_data\", { tree_data: data });\n\n            if (parentNode) {\n                this.deselectNodes(parentNode);\n                this.loadSubtree(data, parentNode);\n            } else {\n                this.initTree(data);\n            }\n\n            if (this.isDragging()) {\n                this.dndHandler.refresh();\n            }\n        }\n    }\n\n    private deselectNodes(parentNode: Node): void {\n        const selectedNodesUnderParent =\n            this.selectNodeHandler.getSelectedNodesUnder(parentNode);\n        for (const n of selectedNodesUnderParent) {\n            this.selectNodeHandler.removeFromSelection(n);\n        }\n    }\n\n    private loadSubtree(data: NodeData[], parentNode: Node): void {\n        parentNode.loadFromData(data);\n\n        parentNode.load_on_demand = false;\n        parentNode.is_loading = false;\n\n        this._refreshElements(parentNode);\n    }\n\n    private doLoadDataFromUrl(\n        urlInfoParam: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null\n    ): void {\n        const urlInfo = urlInfoParam || this.getDataUrlInfo(parentNode);\n\n        this.dataLoader.loadFromUrl(urlInfo, parentNode, onFinished);\n    }\n\n    private loadFolderOnDemand(\n        node: Node,\n        slide = true,\n        onFinished: OnFinishOpenNode | null\n    ): void {\n        node.is_loading = true;\n\n        this.doLoadDataFromUrl(null, node, () => {\n            this._openNode(node, slide, onFinished);\n        });\n    }\n}\n\nSimpleWidget.register(JqTreeWidget, \"tree\");\n"],"names":["cov_1jhqvd1ctl","actualCoverage","Position","version","cov_2qqcosohvg","positionNames","s","before","Before","after","After","inside","Inside","none","None","getPositionName","position","name","f","Object","prototype","hasOwnProperty","call","b","isNodeRecordWithChildren","data","_typeof","Array","Node","o","isRoot","nodeClass","_classCallCheck","this","_defineProperty","isEmptyFolder","load_on_demand","setData","children","parent","idMapping","Map","tree","_createClass","key","value","removeChildren","_step","_iterator","_createForOfIteratorHelper","n","done","node","createNode","addChild","length","loadFromData","err","e","push","setParent","index","splice","doRemoveChild","indexOf","hasChildren","callback","_iterate","level","_step2","_iterator2","child","result","movedNode","targetNode","isParentOf","addChildAtPosition","getChildIndex","includeParent","getDataFromNodes","nodes","map","tmpNode","k","v","getNodeByCallback","concat","iterate","nodeInfo","childIndex","newParent","originalParent","_step3","_iterator3","removeChild","nodeId","get","id","set","_this","_this$tree","removeNodeFromIndex","previousIndex","nextIndex","filter","includeChildren","is_open","nextSibling","getNextSibling","getNextNode","previousSibling","getPreviousSibling","getLastChild","getParent","lastChild","_this2","nodeData","addChildren","childrenData","_step4","_iterator4","initFromData","_this$tree2","addNodeToIndex","_this$tree3","_this$tree4","getNodeClass","cov_sc0df2nho","DragAndDropHandler","treeWidget","hoveredArea","hitAreas","isDragging","currentItem","positionInfo","$element","jQuery","target","mustCaptureElement","options","onIsMoveHandle","nodeElement","_getNodeElement","onCanMove","_ref","undefined","pageX","pageY","refresh","offset","left","top","dragElement","DragElement","element","autoEscape","addClass","move","area","findHoveredArea","canMoveToArea","isFolder","stopOpenFolderTimer","mustOpenFolderTimer","startOpenFolderTimer","updateDropHint","removeDropHint","onDragMove","originalEvent","moveItem","clear","removeHover","removeHitAreas","removeClass","onDragStop","generateHitAreas","_getNodeElementForNode","hitAreasGenerator","HitAreasGenerator","getTreeDimensions","bottom","generate","is","onCanMoveTo","positionName","remove","previousGhost","x","y","dimensions","right","low","high","mid","addDropHint","folder","openFolderDelay","openFolderTimer","window","setTimeout","_openNode","slide","clearTimeout","previousParent","doMove","moveNode","empty","_refreshElements","event","_triggerEvent","move_info","moved_node","target_node","previous_parent","do_move","original_event","isDefaultPrevented","el","width","height","_getScrollLeft","_VisibleNodeIterator","_inherits","_super","_createSuper","currentNode","treeBottom","_this4","_assertThisInitialized","positions","lastTop","previousTop","group","generateHitAreasForGroup","addPosition","getTop","nextNode","positionsInGroup","positionCount","Math","min","areaHeight","round","areaTop","i","VisibleNodeIterator","_this3","isFirstNode","_iterateNode","mustIterateInside","handleFirstNode","handleOpenFolder","handleClosedFolder","handleNode","childrenLength","forEach","_","handleAfterOpenFolder","nodeName","offsetX","offsetY","$tree","text","html","css","append","cov_10tavjd8qg","getBoolString","cov_10i4ljzk4p","ElementsRenderer","openedIconElement","createButtonElement","openedIcon","closedIconElement","closedIcon","fromNode","renderFromNode","renderFromRoot","createDomElements","$previousLi","li","createLi","getLevel","attachNodeData","isRootNode","ul","createUl","appendChild","classString","role","rtl","dragAndDrop","document","createElement","className","setAttribute","isSelected","Boolean","selectNodeHandler","isNodeSelected","mustShowFolder","showEmptyFolder","createFolderLi","createNodeLi","onCreateLi","buttonClasses","getButtonClasses","folderClasses","getFolderClasses","iconElement","div","buttonLink","cloneNode","buttonLeft","createTitleSpan","liClasses","join","isOpen","titleSpan","classes","tabIndex","textContent","innerHTML","is_loading","createTextNode","cov_aezeizepo","DataLoader","urlInfo","parentNode","onFinished","$el","getDomElement","addLoadingClass","notifyLoading","stopLoading","removeLoadingClass","submitRequest","loadData","parseData","jqXHR","onLoadFailed","isLoading","onLoading","urlInfoInput","handleSuccess","handleError","_ajaxSettings$method","url","ajaxSettings","_objectSpread","method","cache","dataType","success","error","toUpperCase","ajax","dataFilter","parsedData","getParsedData","JSON","parse","cov_kszaz655s","KeyHandler","canHandleKeyboard","selectedNode","getSelectedNode","which","DOWN","moveDown","UP","moveUp","RIGHT","moveRight","LEFT","moveLeft","keyboardSupport","on","handleKeyDown","off","selectNode","getPreviousNode","openNode","closeNode","scrollHandler","isScrolledIntoView","find","scrollToNode","isFocusOnTree","cov_qt1ad7fol","register","widgetClass","widgetName","getDataKey","getWidgetData","dataKey","widget","SimpleWidget","createWidget","existingWidget","simpleWidgetClass","init","destroyWidget","destroy","removeData","callFunction","functionName","args","simpleWidget","widgetFunction","apply","fn","argument1","_len","arguments","_key","defaults","constructor","deinit","cov_2ijrgowxs6","getPositionInfoFromMouseEvent","getPositionInfoFromTouch","touch","MouseWidget","_SimpleWidget","button","handleMouseDown","cancelable","preventDefault","handleMouseMove","handleMouseUp","touches","changedTouches","addEventListener","mouseDown","passive","touchStart","isMouseStarted","mouseDelayTimer","isMouseDelayMet","mouseDownInfo","removeEventListener","removeMouseMoveEventListeners","mouseCapture","handleStartMouse","mouseMove","touchMove","mouseUp","touchEnd","mouseDelay","getMouseDelay","startMouseDelayTimer","mouseDrag","mouseStart","mouseStop","cov_1nvl6c1v2s","SaveStateHandler","state","stringify","getState","onSetStateFromStorage","supportsLocalStorage","localStorage","setItem","getKeyName","jsonData","loadFromStorage","parseState","open_nodes","openNodes","getOpenNodeIds","selected_node","selectedNodeIds","getSelectedNodes","getSelectedNodeIds","mustLoadOnDemand","openInitialNodes","resetSelection","selectInitialNodes","cbFinished","doSetInitialStateOnDemand","getStateFromStorage","isInt","onGetStateFromStorage","getItem","nodeIds","getNodeById","selectCount","addToSelection","selectedNodes","removeFromSelection","nodeIdsParam","loadingCount","newNodesIds","loadAndOpenNode","saveState","_supportsLocalStorage","sessionStorage","removeItem","testSupport","cov_16cltnkdi1","ScrollHandler","isInitialized","ensureInit","checkVerticalScrolling","checkHorizontalScrolling","$scrollParent","scrollTop","treeTop","elementBottom","viewBottom","elementTop","viewTop","elHeight","originalTop","scrollParentTop","windowHeight","scrollLeft","setDocumentAsScrollParent","getParentWithOverflow","cssAttributes","hasOverFlow","attr","overflowValue","parents","tagName","initScrollParent","scrollParent","distanceBottom","offsetHeight","refreshHitAreas","distanceTop","dndHandler","handleVerticalScrollingWithScrollParent","handleVerticalScrollingWithDocument","handleHorizontalScrollingWithParent","handleHorizontalScrollingWithDocument","scrollParentOffset","canScrollRight","clientWidth","scrollWidth","canScrollLeft","rightEdge","leftEdge","isNearRightEdge","isNearLeftEdge","max","$document","windowWidth","cov_1ge74vhjb3","SelectNodeHandler","Set","selectedSingleNode","has","add","activeElement","_containsElement","cov_12a0jefb06","NodeElement","mustShowBorderDropHint","BorderDropHint","GhostDropHint","mustSetFocus","$li","getLi","$span","getSpan","trigger","removeAttr","blur","FolderElement","_NodeElement","animationSpeed","$button","getButton","buttonEl","icon","renderer","doOpen","getUl","slideDown","show","doClose","slideUp","hide","$div","elWidth","outerHeight","$hint","$ghost","moveAfter","moveBefore","moveInsideOpenFolder","moveInside","childElement","cov_1ezfcexyui","NODE_PARAM_IS_EMPTY","PARAM_IS_EMPTY","JqTreeWidget","_MouseWidget","clickTarget","getClickTarget","type","toggle","stopPropagation","click_event","doSelectNode","closest","getNode","slideParam","Error","optionsParam","getData","doLoadData","param1","param2","param3","_ref2","doLoadDataFromUrl","getNodeByName","getNodeByNameMustExist","getNodesByProperty","_ref4","_ref3","parseParams","_ref5","_slicedToArray","_ref6","close","newNodeInfo","existingNode","newNode","addAfter","addBefore","addParent","parentNodeParam","_ref7","prepend","idIsChanged","subtree","positionIndex","saveStateHandler","select","deselect","nodeOffset","nodeTop","treeOffset","scrollToY","setInitialState","option","keyHandler","__version__","eventName","values","Event","doOpenNode","_node","_slide","_onFinished","folderElement","open","loadFolderOnDemand","mustSelect","isSelectedNodeInSubtree","render","selectCurrentNode","getScrollLeft","_get","_getPrototypeOf","getRtlOption","getDefaultClosedIcon","dataLoader","initData","handleClick","handleDblclick","useContextMenu","handleContextmenu","checkScrolling","_ref8","startDndDelay","dataUrl","getDataUrlInfo","setUrlInfoData","selectedNodeId","getNodeIdToBeSelected","getUrlFromString","_this5","doInit","setInitialStateOnDemand","_this6","_ref10","restoreState","isRestored","autoOpen","maxLevel","getAutoOpenMaxLevel","autoOpenNodes","_this7","parseInt","$target","dataRtl","_this8","deselectCurrentNode","defaultOptions","mustToggle","selectOptions","onCanSelectNode","selectable","previous_node","deselectedNode","deselected_node","openParents","tree_data","deselectNodes","loadSubtree","initTree","selectedNodesUnderParent","getSelectedNodesUnder","urlInfoParam","loadFromUrl","_this9"],"mappings":"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"}