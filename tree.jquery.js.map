{"version":3,"file":"tree.jquery.js","sources":["src/version.ts","src/node.ts","src/dragAndDropHandler/dragElement.ts","src/dragAndDropHandler/hitAreasGenerator.ts","src/dragAndDropHandler/visibleNodeIterator.ts","src/dragAndDropHandler/index.ts","src/util.ts","src/elementsRenderer.ts","src/dataLoader.ts","src/keyHandler.ts","src/simple.widget.ts","src/mouse.widget.ts","src/saveStateHandler.ts","src/scrollHandler.ts","src/selectNodeHandler.ts","src/nodeElement/borderDropHint.ts","src/nodeElement/ghostDropHint.ts","src/nodeElement/index.ts","src/nodeElement/folderElement.ts","src/tree.jquery.ts"],"sourcesContent":["const version = \"1.7.3\";\n\nexport default version;\n","interface NodeRecordWithChildren extends NodeRecord {\n    children: NodeData[];\n}\n\nexport enum Position {\n    Before = 1,\n    After,\n    Inside,\n    None,\n}\n\nconst positionNames: Record<string, Position> = {\n    before: Position.Before,\n    after: Position.After,\n    inside: Position.Inside,\n    none: Position.None,\n};\n\ntype IterateCallback = (node: Node, level: number) => boolean;\n\nexport const getPositionName = (position: Position): string => {\n    for (const name in positionNames) {\n        if (Object.prototype.hasOwnProperty.call(positionNames, name)) {\n            if (positionNames[name] === position) {\n                return name;\n            }\n        }\n    }\n\n    return \"\";\n};\n\nexport const getPosition = (name: string): Position | undefined =>\n    positionNames[name];\n\nconst isNodeRecordWithChildren = (\n    data: NodeData\n): data is NodeRecordWithChildren =>\n    typeof data === \"object\" &&\n    \"children\" in data &&\n    data[\"children\"] instanceof Array;\n\nexport class Node implements INode {\n    public id?: NodeId;\n    public name: string;\n    public children: Node[];\n    public parent: Node | null;\n    public idMapping: Map<NodeId, Node>;\n    public tree?: Node;\n    public nodeClass?: typeof Node;\n    public load_on_demand: boolean;\n    public is_open: boolean;\n    public element: HTMLElement;\n    public is_loading: boolean;\n    public isEmptyFolder: boolean;\n\n    [key: string]: unknown;\n\n    constructor(o: NodeData | null = null, isRoot = false, nodeClass = Node) {\n        this.name = \"\";\n        this.isEmptyFolder = false;\n        this.load_on_demand = false;\n\n        this.setData(o);\n\n        this.children = [];\n        this.parent = null;\n\n        if (isRoot) {\n            this.idMapping = new Map<NodeId, Node>();\n            this.tree = this;\n            this.nodeClass = nodeClass;\n        }\n    }\n\n    /*\n    Set the data of this node.\n\n    setData(string): set the name of the node\n    setdata(object): set attributes of the node\n\n    Examples:\n        setdata('node1')\n\n        setData({ name: 'node1', id: 1});\n\n        setData({ name: 'node2', id: 2, color: 'green'});\n\n    * This is an internal function; it is not in the docs\n    * Does not remove existing node values\n    */\n    public setData(o: NodeData | null): void {\n        if (!o) {\n            return;\n        } else if (typeof o === \"string\") {\n            this.name = o;\n        } else if (typeof o === \"object\") {\n            for (const key in o) {\n                if (Object.prototype.hasOwnProperty.call(o, key)) {\n                    const value = o[key];\n\n                    if (key === \"label\" || key === \"name\") {\n                        // You can use the 'label' key instead of 'name'; this is a legacy feature\n                        if (typeof value === \"string\") {\n                            this.name = value;\n                        }\n                    } else if (key !== \"children\" && key !== \"parent\") {\n                        // You can't update the children or the parent using this function\n                        this[key] = value;\n                    }\n                }\n            }\n        }\n    }\n\n    /*\n    Create tree from data.\n\n    Structure of data is:\n    [\n        {\n            name: 'node1',\n            children: [\n                { name: 'child1' },\n                { name: 'child2' }\n            ]\n        },\n        {\n            name: 'node2'\n        }\n    ]\n    */\n    public loadFromData(data: NodeData[]): Node {\n        this.removeChildren();\n\n        for (const o of data) {\n            const node = this.createNode(o);\n            this.addChild(node);\n\n            if (isNodeRecordWithChildren(o)) {\n                if (o.children.length === 0) {\n                    node.isEmptyFolder = true;\n                } else {\n                    node.loadFromData(o.children);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /*\n    Add child.\n\n    tree.addChild(\n        new Node('child1')\n    );\n    */\n    public addChild(node: Node): void {\n        this.children.push(node);\n        node.setParent(this);\n    }\n\n    /*\n    Add child at position. Index starts at 0.\n\n    tree.addChildAtPosition(\n        new Node('abc'),\n        1\n    );\n    */\n    public addChildAtPosition(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        node.setParent(this);\n    }\n\n    /*\n    Remove child. This also removes the children of the node.\n\n    tree.removeChild(tree.children[0]);\n    */\n    public removeChild(node: Node): void {\n        // remove children from the index\n        node.removeChildren();\n\n        this.doRemoveChild(node);\n    }\n\n    /*\n    Get child index.\n\n    var index = getChildIndex(node);\n    */\n    public getChildIndex(node: Node): number {\n        return this.children.indexOf(node);\n    }\n\n    /*\n    Does the tree have children?\n\n    if (tree.hasChildren()) {\n        //\n    }\n    */\n    public hasChildren(): boolean {\n        return this.children.length !== 0;\n    }\n\n    public isFolder(): boolean {\n        return this.hasChildren() || this.load_on_demand;\n    }\n\n    /*\n    Iterate over all the nodes in the tree.\n\n    Calls callback with (node, level).\n\n    The callback must return true to continue the iteration on current node.\n\n    tree.iterate(\n        function(node, level) {\n           console.log(node.name);\n\n           // stop iteration after level 2\n           return (level <= 2);\n        }\n    );\n\n    */\n    public iterate(callback: IterateCallback): void {\n        const _iterate = (node: Node, level: number): void => {\n            if (node.children) {\n                for (const child of node.children) {\n                    const result = callback(child, level);\n\n                    if (result && child.hasChildren()) {\n                        _iterate(child, level + 1);\n                    }\n                }\n            }\n        };\n\n        _iterate(this, 0);\n    }\n\n    /*\n    Move node relative to another node.\n\n    Argument position: Position.BEFORE, Position.AFTER or Position.Inside\n\n    // move node1 after node2\n    tree.moveNode(node1, node2, Position.AFTER);\n    */\n    public moveNode(\n        movedNode: Node,\n        targetNode: Node,\n        position: Position\n    ): boolean {\n        if (!movedNode.parent || movedNode.isParentOf(targetNode)) {\n            // - Node is parent of target node\n            // - Or, parent is empty\n            return false;\n        } else {\n            movedNode.parent.doRemoveChild(movedNode);\n\n            switch (position) {\n                case Position.After: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode) + 1\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Before: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode)\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Inside: {\n                    // move inside as first child\n                    targetNode.addChildAtPosition(movedNode, 0);\n                    return true;\n                }\n\n                default:\n                    return false;\n            }\n        }\n    }\n\n    /*\n    Get the tree as data.\n    */\n    public getData(includeParent = false): NodeRecord[] {\n        const getDataFromNodes = (nodes: Node[]): Record<string, unknown>[] => {\n            return nodes.map((node) => {\n                const tmpNode: Record<string, unknown> = {};\n\n                for (const k in node) {\n                    if (\n                        [\n                            \"parent\",\n                            \"children\",\n                            \"element\",\n                            \"idMapping\",\n                            \"load_on_demand\",\n                            \"nodeClass\",\n                            \"tree\",\n                            \"isEmptyFolder\",\n                        ].indexOf(k) === -1 &&\n                        Object.prototype.hasOwnProperty.call(node, k)\n                    ) {\n                        const v = node[k];\n                        tmpNode[k] = v;\n                    }\n                }\n\n                if (node.hasChildren()) {\n                    tmpNode[\"children\"] = getDataFromNodes(node.children);\n                }\n\n                return tmpNode;\n            });\n        };\n\n        if (includeParent) {\n            return getDataFromNodes([this]);\n        } else {\n            return getDataFromNodes(this.children);\n        }\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.getNodeByCallback((node: Node) => node.name === name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        const node = this.getNodeByCallback((n: Node) => n.name === name);\n\n        if (!node) {\n            throw `Node with name ${name} not found`;\n        }\n\n        return node;\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        let result: Node | null = null;\n\n        this.iterate((node: Node) => {\n            if (result) {\n                return false;\n            } else if (callback(node)) {\n                result = node;\n                return false;\n            } else {\n                return true;\n            }\n        });\n\n        return result;\n    }\n\n    public addAfter(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex + 1);\n\n            if (\n                isNodeRecordWithChildren(nodeInfo) &&\n                nodeInfo.children.length\n            ) {\n                node.loadFromData(nodeInfo.children);\n            }\n\n            return node;\n        }\n    }\n\n    public addBefore(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex);\n\n            if (\n                isNodeRecordWithChildren(nodeInfo) &&\n                nodeInfo.children.length\n            ) {\n                node.loadFromData(nodeInfo.children);\n            }\n\n            return node;\n        }\n    }\n\n    public addParent(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const newParent = this.createNode(nodeInfo);\n\n            if (this.tree) {\n                newParent.setParent(this.tree);\n            }\n            const originalParent = this.parent;\n\n            for (const child of originalParent.children) {\n                newParent.addChild(child);\n            }\n\n            originalParent.children = [];\n            originalParent.addChild(newParent);\n            return newParent;\n        }\n    }\n\n    public remove(): void {\n        if (this.parent) {\n            this.parent.removeChild(this);\n            this.parent = null;\n        }\n    }\n\n    public append(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChild(node);\n\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            node.loadFromData(nodeInfo.children);\n        }\n\n        return node;\n    }\n\n    public prepend(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChildAtPosition(node, 0);\n\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            node.loadFromData(nodeInfo.children);\n        }\n\n        return node;\n    }\n\n    public isParentOf(node: Node): boolean {\n        let parent = node.parent;\n\n        while (parent) {\n            if (parent === this) {\n                return true;\n            }\n\n            parent = parent.parent;\n        }\n\n        return false;\n    }\n\n    public getLevel(): number {\n        let level = 0;\n        let node: Node = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n        while (node.parent) {\n            level += 1;\n            node = node.parent;\n        }\n\n        return level;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.idMapping.get(nodeId) || null;\n    }\n\n    public addNodeToIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.set(node.id, node);\n        }\n    }\n\n    public removeNodeFromIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.delete(node.id);\n        }\n    }\n\n    public removeChildren(): void {\n        this.iterate((child: Node) => {\n            this.tree?.removeNodeFromIndex(child);\n            return true;\n        });\n\n        this.children = [];\n    }\n\n    public getPreviousSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousIndex = this.parent.getChildIndex(this) - 1;\n            if (previousIndex >= 0) {\n                return this.parent.children[previousIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNextSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const nextIndex = this.parent.getChildIndex(this) + 1;\n            if (nextIndex < this.parent.children.length) {\n                return this.parent.children[nextIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.filter((node: Node) => node[key] === value);\n    }\n\n    public filter(f: (node: Node) => boolean): Node[] {\n        const result: Node[] = [];\n\n        this.iterate((node: Node) => {\n            if (f(node)) {\n                result.push(node);\n            }\n\n            return true;\n        });\n\n        return result;\n    }\n\n    public getNextNode(includeChildren = true): Node | null {\n        if (includeChildren && this.hasChildren()) {\n            return this.children[0] || null;\n        } else if (!this.parent) {\n            return null;\n        } else {\n            const nextSibling = this.getNextSibling();\n\n            if (nextSibling) {\n                return nextSibling;\n            } else {\n                return this.parent.getNextNode(false);\n            }\n        }\n    }\n\n    public getNextVisibleNode(): Node | null {\n        if (this.hasChildren() && this.is_open) {\n            // First child\n            return this.children[0] || null;\n        } else {\n            if (!this.parent) {\n                return null;\n            } else {\n                const nextSibling = this.getNextSibling();\n                if (nextSibling) {\n                    // Next sibling\n                    return nextSibling;\n                } else {\n                    // Next node of parent\n                    return this.parent.getNextNode(false);\n                }\n            }\n        }\n    }\n\n    public getPreviousNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (previousSibling.hasChildren()) {\n                return previousSibling.getLastChild();\n            } else {\n                return previousSibling;\n            }\n        }\n    }\n\n    public getPreviousVisibleNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (\n                !previousSibling.hasChildren() ||\n                !previousSibling.is_open\n            ) {\n                // Previous sibling\n                return previousSibling;\n            } else {\n                // Last child of previous sibling\n                return previousSibling.getLastChild();\n            }\n        }\n    }\n\n    public getParent(): Node | null {\n        // Return parent except if it is the root node\n        if (!this.parent) {\n            return null;\n        } else if (!this.parent.parent) {\n            // Root node -> null\n            return null;\n        } else {\n            return this.parent;\n        }\n    }\n\n    public getLastChild(): Node | null {\n        if (!this.hasChildren()) {\n            return null;\n        } else {\n            const lastChild = this.children[this.children.length - 1];\n\n            if (!lastChild) {\n                return null;\n            }\n\n            if (!(lastChild.hasChildren() && lastChild.is_open)) {\n                return lastChild;\n            } else {\n                return lastChild?.getLastChild();\n            }\n        }\n    }\n\n    // Init Node from data without making it the root of the tree\n    public initFromData(data: NodeData): void {\n        const addNode = (nodeData: NodeData): void => {\n            this.setData(nodeData);\n\n            if (\n                isNodeRecordWithChildren(nodeData) &&\n                nodeData.children.length\n            ) {\n                addChildren(nodeData.children);\n            }\n        };\n\n        const addChildren = (childrenData: NodeData[]): void => {\n            for (const child of childrenData) {\n                const node = this.createNode();\n                node.initFromData(child);\n                this.addChild(node);\n            }\n        };\n\n        addNode(data);\n    }\n\n    private setParent(parent: Node): void {\n        this.parent = parent;\n        this.tree = parent.tree;\n        this.tree?.addNodeToIndex(this);\n    }\n\n    private doRemoveChild(node: Node): void {\n        this.children.splice(this.getChildIndex(node), 1);\n        this.tree?.removeNodeFromIndex(node);\n    }\n\n    private getNodeClass(): typeof Node {\n        return this.nodeClass || this?.tree?.nodeClass || Node;\n    }\n\n    private createNode(nodeData?: NodeData): Node {\n        const nodeClass = this.getNodeClass();\n        return new nodeClass(nodeData);\n    }\n}\n","class DragElement {\n    private offsetX: number;\n    private offsetY: number;\n    private $element: JQuery;\n\n    constructor(\n        nodeName: string,\n        offsetX: number,\n        offsetY: number,\n        $tree: JQuery,\n        autoEscape: boolean,\n    ) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n\n        this.$element = jQuery(\"<span>\").addClass(\n            \"jqtree-title jqtree-dragging\",\n        );\n\n        if (autoEscape) {\n            this.$element.text(nodeName);\n        } else {\n            this.$element.html(nodeName);\n        }\n\n        this.$element.css(\"position\", \"absolute\");\n        $tree.append(this.$element);\n    }\n\n    public move(pageX: number, pageY: number): void {\n        this.$element.offset({\n            left: pageX - this.offsetX,\n            top: pageY - this.offsetY,\n        });\n    }\n\n    public remove(): void {\n        this.$element.remove();\n    }\n}\n\nexport default DragElement;\n","import { HitArea } from \"../types\";\nimport { Node, Position } from \"../node\";\nimport VisibleNodeIterator from \"./visibleNodeIterator\";\n\nclass HitAreasGenerator extends VisibleNodeIterator {\n    private currentNode: Node;\n    private treeBottom: number;\n    private positions: HitArea[];\n    private lastTop: number;\n\n    constructor(tree: Node, currentNode: Node, treeBottom: number) {\n        super(tree);\n\n        this.currentNode = currentNode;\n        this.treeBottom = treeBottom;\n    }\n\n    public generate(): HitArea[] {\n        this.positions = [];\n        this.lastTop = 0;\n\n        this.iterate();\n\n        return this.generateHitAreas(this.positions);\n    }\n\n    protected generateHitAreas(positions: HitArea[]): HitArea[] {\n        let previousTop = -1;\n        let group = [];\n        const hitAreas: HitArea[] = [];\n\n        for (const position of positions) {\n            if (position.top !== previousTop && group.length) {\n                if (group.length) {\n                    this.generateHitAreasForGroup(\n                        hitAreas,\n                        group,\n                        previousTop,\n                        position.top,\n                    );\n                }\n\n                previousTop = position.top;\n                group = [];\n            }\n\n            group.push(position);\n        }\n\n        this.generateHitAreasForGroup(\n            hitAreas,\n            group,\n            previousTop,\n            this.treeBottom,\n        );\n\n        return hitAreas;\n    }\n\n    protected handleOpenFolder(node: Node, $element: JQuery): boolean {\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            // Stop iterating\n            return false;\n        }\n\n        // Cannot move before current item\n        if (node.children[0] !== this.currentNode) {\n            this.addPosition(node, Position.Inside, this.getTop($element));\n        }\n\n        // Continue iterating\n        return true;\n    }\n\n    protected handleClosedFolder(\n        node: Node,\n        nextNode: Node,\n        $element: JQuery,\n    ): void {\n        const top = this.getTop($element);\n\n        if (node === this.currentNode) {\n            // Cannot move after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n\n            // Cannot move before current item\n            if (nextNode !== this.currentNode) {\n                this.addPosition(node, Position.After, top);\n            }\n        }\n    }\n\n    protected handleFirstNode(node: Node): void {\n        if (node !== this.currentNode) {\n            this.addPosition(\n                node,\n                Position.Before,\n                this.getTop(jQuery(node.element)),\n            );\n        }\n    }\n\n    protected handleAfterOpenFolder(node: Node, nextNode: Node): void {\n        if (node === this.currentNode || nextNode === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, this.lastTop);\n        } else {\n            this.addPosition(node, Position.After, this.lastTop);\n        }\n    }\n\n    protected handleNode(node: Node, nextNode: Node, $element: JQuery): void {\n        const top = this.getTop($element);\n\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n        }\n\n        if (nextNode === this.currentNode || node === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.After, top);\n        }\n    }\n\n    private getTop($element: JQuery<HTMLElement>): number {\n        const offset = $element.offset();\n\n        return offset ? offset.top : 0;\n    }\n\n    private addPosition(node: Node, position: number, top: number): void {\n        const area = {\n            top,\n            bottom: 0,\n            node,\n            position,\n        };\n\n        this.positions.push(area);\n        this.lastTop = top;\n    }\n\n    private generateHitAreasForGroup(\n        hitAreas: HitArea[],\n        positionsInGroup: HitArea[],\n        top: number,\n        bottom: number,\n    ): void {\n        // limit positions in group\n        const positionCount = Math.min(positionsInGroup.length, 4);\n\n        const areaHeight = Math.round((bottom - top) / positionCount);\n        let areaTop = top;\n\n        let i = 0;\n        while (i < positionCount) {\n            const position = positionsInGroup[i];\n\n            if (position) {\n                hitAreas.push({\n                    top: areaTop,\n                    bottom: areaTop + areaHeight,\n                    node: position.node,\n                    position: position.position,\n                });\n            }\n\n            areaTop += areaHeight;\n            i += 1;\n        }\n    }\n}\n\nexport default HitAreasGenerator;\n","import { Node } from \"../node\";\n\nabstract class VisibleNodeIterator {\n    private tree: Node;\n\n    constructor(tree: Node) {\n        this.tree = tree;\n    }\n\n    protected iterate(): void {\n        let isFirstNode = true;\n\n        const _iterateNode = (node: Node, nextNode: Node | null): void => {\n            let mustIterateInside =\n                (node.is_open || !node.element) && node.hasChildren();\n\n            let $element: JQuery<HTMLElement> | null = null;\n\n            if (node.element) {\n                $element = jQuery(node.element);\n\n                if (!$element.is(\":visible\")) {\n                    return;\n                }\n\n                if (isFirstNode) {\n                    this.handleFirstNode(node);\n                    isFirstNode = false;\n                }\n\n                if (!node.hasChildren()) {\n                    this.handleNode(node, nextNode, $element);\n                } else if (node.is_open) {\n                    if (!this.handleOpenFolder(node, $element)) {\n                        mustIterateInside = false;\n                    }\n                } else {\n                    this.handleClosedFolder(node, nextNode, $element);\n                }\n            }\n\n            if (mustIterateInside) {\n                const childrenLength = node.children.length;\n                node.children.forEach((_, i) => {\n                    const child = node.children[i];\n\n                    if (child) {\n                        if (i === childrenLength - 1) {\n                            _iterateNode(child, null);\n                        } else {\n                            const nextChild = node.children[i + 1];\n\n                            if (nextChild) {\n                                _iterateNode(child, nextChild);\n                            }\n                        }\n                    }\n                });\n\n                if (node.is_open && $element) {\n                    this.handleAfterOpenFolder(node, nextNode);\n                }\n            }\n        };\n\n        _iterateNode(this.tree, null);\n    }\n\n    protected abstract handleNode(\n        node: Node,\n        nextNode: Node | null,\n        $element: JQuery,\n    ): void;\n\n    /*\n    override\n    return\n        - true: continue iterating\n        - false: stop iterating\n    */\n    protected abstract handleOpenFolder(node: Node, $element: JQuery): boolean;\n\n    protected abstract handleClosedFolder(\n        node: Node,\n        nextNode: Node | null,\n        $element: JQuery,\n    ): void;\n\n    protected abstract handleAfterOpenFolder(\n        node: Node,\n        nextNode: Node | null,\n    ): void;\n\n    protected abstract handleFirstNode(node: Node): void;\n}\n\nexport default VisibleNodeIterator;\n","import { getPositionName, Node, Position } from \"../node\";\nimport { DropHint, HitArea, PositionInfo } from \"../types\";\nimport NodeElement from \"../nodeElement\";\nimport { JqTreeWidget } from \"../tree.jquery\";\nimport DragElement from \"./dragElement\";\nimport HitAreasGenerator from \"./hitAreasGenerator\";\n\ninterface Dimensions {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n}\n\nexport class DragAndDropHandler {\n    public hitAreas: HitArea[];\n    public isDragging: boolean;\n    public currentItem: NodeElement | null;\n    public hoveredArea: HitArea | null;\n    public positionInfo: PositionInfo | null;\n\n    private treeWidget: JqTreeWidget;\n    private dragElement: DragElement | null;\n    private previousGhost: DropHint | null;\n    private openFolderTimer: number | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        this.hoveredArea = null;\n        this.hitAreas = [];\n        this.isDragging = false;\n        this.currentItem = null;\n        this.positionInfo = null;\n    }\n\n    public mouseCapture(positionInfo: PositionInfo): boolean | null {\n        const $element = jQuery(positionInfo.target);\n\n        if (!this.mustCaptureElement($element)) {\n            return null;\n        }\n\n        if (\n            this.treeWidget.options.onIsMoveHandle &&\n            !this.treeWidget.options.onIsMoveHandle($element)\n        ) {\n            return null;\n        }\n\n        let nodeElement = this.treeWidget._getNodeElement($element);\n\n        if (nodeElement && this.treeWidget.options.onCanMove) {\n            if (!this.treeWidget.options.onCanMove(nodeElement.node)) {\n                nodeElement = null;\n            }\n        }\n\n        this.currentItem = nodeElement;\n        return this.currentItem != null;\n    }\n\n    public mouseStart(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.refresh();\n\n        const offset = jQuery(positionInfo.target).offset();\n        const left = offset ? offset.left : 0;\n        const top = offset ? offset.top : 0;\n\n        const node = this.currentItem.node;\n\n        this.dragElement = new DragElement(\n            node.name,\n            positionInfo.pageX - left,\n            positionInfo.pageY - top,\n            this.treeWidget.element,\n            this.treeWidget.options.autoEscape ?? true,\n        );\n\n        this.isDragging = true;\n        this.positionInfo = positionInfo;\n        this.currentItem.element.classList.add(\"jqtree-moving\");\n        return true;\n    }\n\n    public mouseDrag(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            !this.dragElement ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.dragElement.move(positionInfo.pageX, positionInfo.pageY);\n        this.positionInfo = positionInfo;\n\n        const area = this.findHoveredArea(\n            positionInfo.pageX,\n            positionInfo.pageY,\n        );\n\n        if (area && this.canMoveToArea(area)) {\n            if (!area.node.isFolder()) {\n                this.stopOpenFolderTimer();\n            }\n\n            if (this.hoveredArea !== area) {\n                this.hoveredArea = area;\n\n                // If this is a closed folder, start timer to open it\n                if (this.mustOpenFolderTimer(area)) {\n                    this.startOpenFolderTimer(area.node);\n                } else {\n                    this.stopOpenFolderTimer();\n                }\n\n                this.updateDropHint();\n            }\n        } else {\n            this.removeDropHint();\n            this.stopOpenFolderTimer();\n            this.hoveredArea = area;\n        }\n\n        if (!area) {\n            if (this.treeWidget.options.onDragMove) {\n                this.treeWidget.options.onDragMove(\n                    this.currentItem.node,\n                    positionInfo.originalEvent,\n                );\n            }\n        }\n\n        return true;\n    }\n\n    public mouseStop(positionInfo: PositionInfo): boolean {\n        this.moveItem(positionInfo);\n        this.clear();\n        this.removeHover();\n        this.removeDropHint();\n        this.removeHitAreas();\n\n        const currentItem = this.currentItem;\n\n        if (this.currentItem) {\n            this.currentItem.element.classList.remove(\"jqtree-moving\");\n            this.currentItem = null;\n        }\n\n        this.isDragging = false;\n        this.positionInfo = null;\n\n        if (!this.hoveredArea && currentItem) {\n            if (this.treeWidget.options.onDragStop) {\n                this.treeWidget.options.onDragStop(\n                    currentItem.node,\n                    positionInfo.originalEvent,\n                );\n            }\n        }\n\n        return false;\n    }\n\n    public refresh(): void {\n        this.removeHitAreas();\n\n        if (this.currentItem) {\n            this.generateHitAreas();\n\n            this.currentItem = this.treeWidget._getNodeElementForNode(\n                this.currentItem.node,\n            );\n\n            if (this.isDragging) {\n                this.currentItem.element.classList.add(\"jqtree-moving\");\n            }\n        }\n    }\n\n    private generateHitAreas(): void {\n        if (!this.currentItem) {\n            this.hitAreas = [];\n        } else {\n            const hitAreasGenerator = new HitAreasGenerator(\n                this.treeWidget.tree,\n                this.currentItem.node,\n                this.getTreeDimensions().bottom,\n            );\n            this.hitAreas = hitAreasGenerator.generate();\n        }\n    }\n\n    private mustCaptureElement($element: JQuery<HTMLElement>): boolean {\n        return !$element.is(\"input,select,textarea\");\n    }\n\n    private canMoveToArea(area: HitArea): boolean {\n        if (!this.treeWidget.options.onCanMoveTo) {\n            return true;\n        }\n\n        if (!this.currentItem) {\n            return false;\n        }\n\n        const positionName = getPositionName(area.position);\n\n        return this.treeWidget.options.onCanMoveTo(\n            this.currentItem.node,\n            area.node,\n            positionName,\n        );\n    }\n\n    private removeHitAreas(): void {\n        this.hitAreas = [];\n    }\n\n    private clear(): void {\n        if (this.dragElement) {\n            this.dragElement.remove();\n            this.dragElement = null;\n        }\n    }\n\n    private removeDropHint(): void {\n        if (this.previousGhost) {\n            this.previousGhost.remove();\n        }\n    }\n\n    private removeHover(): void {\n        this.hoveredArea = null;\n    }\n\n    private findHoveredArea(x: number, y: number): HitArea | null {\n        const dimensions = this.getTreeDimensions();\n\n        if (\n            x < dimensions.left ||\n            y < dimensions.top ||\n            x > dimensions.right ||\n            y > dimensions.bottom\n        ) {\n            return null;\n        }\n\n        let low = 0;\n        let high = this.hitAreas.length;\n        while (low < high) {\n            const mid = (low + high) >> 1;\n            const area = this.hitAreas[mid];\n\n            if (!area) {\n                return null;\n            }\n\n            if (y < area.top) {\n                high = mid;\n            } else if (y > area.bottom) {\n                low = mid + 1;\n            } else {\n                return area;\n            }\n        }\n\n        return null;\n    }\n\n    private mustOpenFolderTimer(area: HitArea): boolean {\n        const node = area.node;\n\n        return (\n            node.isFolder() &&\n            !node.is_open &&\n            area.position === Position.Inside\n        );\n    }\n\n    private updateDropHint(): void {\n        if (!this.hoveredArea) {\n            return;\n        }\n\n        // remove previous drop hint\n        this.removeDropHint();\n\n        // add new drop hint\n        const nodeElement = this.treeWidget._getNodeElementForNode(\n            this.hoveredArea.node,\n        );\n        this.previousGhost = nodeElement.addDropHint(this.hoveredArea.position);\n    }\n\n    private startOpenFolderTimer(folder: Node): void {\n        const openFolder = (): void => {\n            this.treeWidget._openNode(\n                folder,\n                this.treeWidget.options.slide,\n                () => {\n                    this.refresh();\n                    this.updateDropHint();\n                },\n            );\n        };\n\n        this.stopOpenFolderTimer();\n\n        const openFolderDelay = this.treeWidget.options.openFolderDelay;\n\n        if (openFolderDelay !== false) {\n            this.openFolderTimer = window.setTimeout(\n                openFolder,\n                openFolderDelay,\n            );\n        }\n    }\n\n    private stopOpenFolderTimer(): void {\n        if (this.openFolderTimer) {\n            clearTimeout(this.openFolderTimer);\n            this.openFolderTimer = null;\n        }\n    }\n\n    private moveItem(positionInfo: PositionInfo): void {\n        if (\n            this.currentItem &&\n            this.hoveredArea &&\n            this.hoveredArea.position !== Position.None &&\n            this.canMoveToArea(this.hoveredArea)\n        ) {\n            const movedNode = this.currentItem.node;\n            const targetNode = this.hoveredArea.node;\n            const position = this.hoveredArea.position;\n            const previousParent = movedNode.parent;\n\n            if (position === Position.Inside) {\n                this.hoveredArea.node.is_open = true;\n            }\n\n            const doMove = (): void => {\n                this.treeWidget.tree.moveNode(movedNode, targetNode, position);\n                this.treeWidget.element.empty();\n                this.treeWidget._refreshElements(null);\n            };\n\n            const event = this.treeWidget._triggerEvent(\"tree.move\", {\n                move_info: {\n                    moved_node: movedNode,\n                    target_node: targetNode,\n                    position: getPositionName(position),\n                    previous_parent: previousParent,\n                    do_move: doMove,\n                    original_event: positionInfo.originalEvent,\n                },\n            });\n\n            if (!event.isDefaultPrevented()) {\n                doMove();\n            }\n        }\n    }\n\n    private getTreeDimensions(): Dimensions {\n        // Return the dimensions of the tree. Add a margin to the bottom to allow\n        // to drag-and-drop after the last element.\n        const offset = this.treeWidget.element.offset();\n\n        if (!offset) {\n            return { left: 0, top: 0, right: 0, bottom: 0 };\n        } else {\n            const el = this.treeWidget.element;\n            const width = el.width() || 0;\n            const height = el.height() || 0;\n            const left = offset.left + this.treeWidget._getScrollLeft();\n\n            return {\n                left,\n                top: offset.top,\n                right: left + width,\n                bottom: offset.top + height + 16,\n            };\n        }\n    }\n}\n","export const isInt = (n: unknown): boolean =>\n    typeof n === \"number\" && n % 1 === 0;\n\nexport const isFunction = (v: unknown): boolean => typeof v === \"function\";\n\nexport const getBoolString = (value: unknown): string =>\n    value ? \"true\" : \"false\";\n","import { getBoolString } from \"./util\";\nimport { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\ntype IconElement = string | HTMLElement | JQuery<HTMLElement>;\n\nexport default class ElementsRenderer {\n    public openedIconElement?: HTMLElement | Text;\n    public closedIconElement?: HTMLElement | Text;\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        this.openedIconElement = this.createButtonElement(\n            treeWidget.options.openedIcon || \"+\",\n        );\n        this.closedIconElement = this.createButtonElement(\n            treeWidget.options.closedIcon || \"-\",\n        );\n    }\n\n    public render(fromNode: Node | null): void {\n        if (fromNode && fromNode.parent) {\n            this.renderFromNode(fromNode);\n        } else {\n            this.renderFromRoot();\n        }\n    }\n\n    public renderFromRoot(): void {\n        const $element = this.treeWidget.element;\n        $element.empty();\n\n        if ($element[0]) {\n            this.createDomElements(\n                $element[0],\n                this.treeWidget.tree.children,\n                true,\n                1,\n            );\n        }\n    }\n\n    public renderFromNode(node: Node): void {\n        // remember current li\n        const $previousLi = jQuery(node.element);\n\n        // create element\n        const li = this.createLi(node, node.getLevel());\n        this.attachNodeData(node, li);\n\n        // add element to dom\n        $previousLi.after(li);\n\n        // remove previous li\n        $previousLi.remove();\n\n        // create children\n        if (node.children) {\n            this.createDomElements(\n                li,\n                node.children,\n                false,\n                node.getLevel() + 1,\n            );\n        }\n    }\n\n    private createDomElements(\n        element: Element,\n        children: Node[],\n        isRootNode: boolean,\n        level: number,\n    ): void {\n        const ul = this.createUl(isRootNode);\n        element.appendChild(ul);\n\n        for (const child of children) {\n            const li = this.createLi(child, level);\n            ul.appendChild(li);\n\n            this.attachNodeData(child, li);\n\n            if (child.hasChildren()) {\n                this.createDomElements(li, child.children, false, level + 1);\n            }\n        }\n    }\n\n    private attachNodeData(node: Node, li: HTMLElement): void {\n        node.element = li;\n        jQuery(li).data(\"node\", node);\n    }\n\n    private createUl(isRootNode: boolean): HTMLUListElement {\n        let classString;\n        let role;\n\n        if (!isRootNode) {\n            classString = \"\";\n            role = \"group\";\n        } else {\n            classString = \"jqtree-tree\";\n            role = \"tree\";\n\n            if (this.treeWidget.options.rtl) {\n                classString += \" jqtree-rtl\";\n            }\n        }\n\n        if (this.treeWidget.options.dragAndDrop) {\n            classString += \" jqtree-dnd\";\n        }\n\n        const ul = document.createElement(\"ul\");\n        ul.className = `jqtree_common ${classString}`;\n\n        ul.setAttribute(\"role\", role);\n\n        return ul;\n    }\n\n    private createLi(node: Node, level: number): HTMLLIElement {\n        const isSelected = Boolean(\n            this.treeWidget.selectNodeHandler.isNodeSelected(node),\n        );\n\n        const mustShowFolder =\n            node.isFolder() ||\n            (node.isEmptyFolder && this.treeWidget.options.showEmptyFolder);\n\n        const li = mustShowFolder\n            ? this.createFolderLi(node, level, isSelected)\n            : this.createNodeLi(node, level, isSelected);\n\n        if (this.treeWidget.options.onCreateLi) {\n            this.treeWidget.options.onCreateLi(node, jQuery(li), isSelected);\n        }\n\n        return li;\n    }\n\n    private setTreeItemAriaAttributes(\n        element: HTMLElement,\n        name: string,\n        level: number,\n        isSelected: boolean,\n    ) {\n        element.setAttribute(\"aria-label\", name);\n        element.setAttribute(\"aria-level\", `${level}`);\n        element.setAttribute(\"aria-selected\", getBoolString(isSelected));\n        element.setAttribute(\"role\", \"treeitem\");\n    }\n\n    private createFolderLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const buttonClasses = this.getButtonClasses(node);\n        const folderClasses = this.getFolderClasses(node, isSelected);\n\n        const iconElement = node.is_open\n            ? this.openedIconElement\n            : this.closedIconElement;\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = `jqtree_common ${folderClasses}`;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // button link\n        const buttonLink = document.createElement(\"a\");\n        buttonLink.className = buttonClasses;\n\n        if (iconElement) {\n            buttonLink.appendChild(iconElement.cloneNode(true));\n        }\n\n        if (this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            true,\n            level,\n        );\n        titleSpan.setAttribute(\"aria-expanded\", getBoolString(node.is_open));\n        div.appendChild(titleSpan);\n\n        if (!this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        return li;\n    }\n\n    private createNodeLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const liClasses = [\"jqtree_common\"];\n\n        if (isSelected) {\n            liClasses.push(\"jqtree-selected\");\n        }\n\n        const classString = liClasses.join(\" \");\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = classString;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            false,\n            level,\n        );\n        div.appendChild(titleSpan);\n\n        return li;\n    }\n\n    private createTitleSpan(\n        nodeName: string,\n        isSelected: boolean,\n        isFolder: boolean,\n        level: number,\n    ): HTMLSpanElement {\n        const titleSpan = document.createElement(\"span\");\n\n        let classes = \"jqtree-title jqtree_common\";\n\n        if (isFolder) {\n            classes += \" jqtree-title-folder\";\n        }\n\n        classes += ` jqtree-title-button-${\n            this.treeWidget.options.buttonLeft ? \"left\" : \"right\"\n        }`;\n\n        titleSpan.className = classes;\n\n        if (isSelected) {\n            const tabIndex = this.treeWidget.options.tabIndex;\n\n            if (tabIndex !== undefined) {\n                titleSpan.setAttribute(\"tabindex\", `${tabIndex}`);\n            }\n        }\n\n        this.setTreeItemAriaAttributes(titleSpan, nodeName, level, isSelected);\n\n        if (this.treeWidget.options.autoEscape) {\n            titleSpan.textContent = nodeName;\n        } else {\n            titleSpan.innerHTML = nodeName;\n        }\n\n        return titleSpan;\n    }\n\n    private getButtonClasses(node: Node): string {\n        const classes = [\"jqtree-toggler\", \"jqtree_common\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (this.treeWidget.options.buttonLeft) {\n            classes.push(\"jqtree-toggler-left\");\n        } else {\n            classes.push(\"jqtree-toggler-right\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private getFolderClasses(node: Node, isSelected: boolean): string {\n        const classes = [\"jqtree-folder\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (isSelected) {\n            classes.push(\"jqtree-selected\");\n        }\n\n        if (node.is_loading) {\n            classes.push(\"jqtree-loading\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private createButtonElement(\n        value: IconElement,\n    ): HTMLElement | Text | undefined {\n        if (typeof value === \"string\") {\n            // convert value to html\n            const div = document.createElement(\"div\");\n            div.innerHTML = value;\n\n            return document.createTextNode(div.innerHTML);\n        } else if (value == null) {\n            return undefined;\n        } else if ((value as HTMLElement).nodeType) {\n            return value as HTMLElement;\n        } else {\n            return jQuery(value)[0];\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport type HandleFinishedLoading = () => void;\n\nexport default class DataLoader {\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n    }\n\n    public loadFromUrl(\n        urlInfo: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null\n    ): void {\n        if (!urlInfo) {\n            return;\n        }\n\n        const $el = this.getDomElement(parentNode);\n        this.addLoadingClass($el);\n        this.notifyLoading(true, parentNode, $el);\n\n        const stopLoading = (): void => {\n            this.removeLoadingClass($el);\n            this.notifyLoading(false, parentNode, $el);\n        };\n\n        const handleSuccess = (data: string | NodeData[]): void => {\n            stopLoading();\n            this.treeWidget.loadData(this.parseData(data), parentNode);\n\n            if (onFinished && typeof onFinished === \"function\") {\n                onFinished();\n            }\n        };\n\n        const handleError = (jqXHR: JQuery.jqXHR): void => {\n            stopLoading();\n\n            if (this.treeWidget.options.onLoadFailed) {\n                this.treeWidget.options.onLoadFailed(jqXHR);\n            }\n        };\n\n        this.submitRequest(urlInfo, handleSuccess, handleError);\n    }\n\n    private addLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.addClass(\"jqtree-loading\");\n        }\n    }\n\n    private removeLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.removeClass(\"jqtree-loading\");\n        }\n    }\n\n    private getDomElement(parentNode: Node | null): JQuery<HTMLElement> {\n        if (parentNode) {\n            return jQuery(parentNode.element);\n        } else {\n            return this.treeWidget.element;\n        }\n    }\n\n    private notifyLoading(\n        isLoading: boolean,\n        node: Node | null,\n        $el: JQuery\n    ): void {\n        if (this.treeWidget.options.onLoading) {\n            this.treeWidget.options.onLoading(isLoading, node, $el);\n        }\n\n        this.treeWidget._triggerEvent(\"tree.loading_data\", {\n            isLoading,\n            node,\n            $el,\n        });\n    }\n\n    private submitRequest(\n        urlInfoInput: string | JQuery.AjaxSettings,\n        handleSuccess: JQuery.Ajax.SuccessCallback<any>,\n        handleError: JQuery.Ajax.ErrorCallback<any>\n    ): void {\n        const urlInfo =\n            typeof urlInfoInput === \"string\"\n                ? { url: urlInfoInput }\n                : urlInfoInput;\n\n        const ajaxSettings: JQuery.AjaxSettings = {\n            method: \"GET\",\n            cache: false,\n            dataType: \"json\",\n            success: handleSuccess,\n            error: handleError,\n            ...urlInfo,\n        };\n\n        ajaxSettings.method = ajaxSettings.method?.toUpperCase() || \"GET\";\n\n        void jQuery.ajax(ajaxSettings);\n    }\n\n    private parseData(data: string | NodeData[]): NodeData[] {\n        const { dataFilter } = this.treeWidget.options;\n\n        const getParsedData = () => {\n            if (typeof data === \"string\") {\n                return JSON.parse(data) as NodeData[];\n            } else {\n                return data;\n            }\n        };\n\n        const parsedData = getParsedData();\n\n        if (dataFilter) {\n            return dataFilter(parsedData);\n        } else {\n            return parsedData;\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport default class KeyHandler {\n    private static LEFT = 37;\n    private static UP = 38;\n    private static RIGHT = 39;\n    private static DOWN = 40;\n\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        if (treeWidget.options.keyboardSupport) {\n            jQuery(document).on(\"keydown.jqtree\", this.handleKeyDown);\n        }\n    }\n\n    public deinit(): void {\n        jQuery(document).off(\"keydown.jqtree\");\n    }\n\n    public moveDown(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getNextVisibleNode());\n    }\n\n    public moveUp(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getPreviousVisibleNode());\n    }\n\n    public moveRight(selectedNode: Node): boolean {\n        if (!selectedNode.isFolder()) {\n            return true;\n        } else {\n            // folder node\n            if (selectedNode.is_open) {\n                // Right moves to the first child of an open node\n                return this.selectNode(selectedNode.getNextVisibleNode());\n            } else {\n                // Right expands a closed node\n                this.treeWidget.openNode(selectedNode);\n                return false;\n            }\n        }\n    }\n\n    public moveLeft(selectedNode: Node): boolean {\n        if (selectedNode.isFolder() && selectedNode.is_open) {\n            // Left on an open node closes the node\n            this.treeWidget.closeNode(selectedNode);\n            return false;\n        } else {\n            // Left on a closed or end node moves focus to the node's parent\n            return this.selectNode(selectedNode.getParent());\n        }\n    }\n\n    public selectNode(node: Node | null): boolean {\n        if (!node) {\n            return true;\n        } else {\n            this.treeWidget.selectNode(node);\n\n            if (\n                !this.treeWidget.scrollHandler.isScrolledIntoView(\n                    jQuery(node.element).find(\".jqtree-element\")\n                )\n            ) {\n                this.treeWidget.scrollToNode(node);\n            }\n\n            return false;\n        }\n    }\n\n    private handleKeyDown = (e: JQuery.Event): boolean => {\n        if (!this.canHandleKeyboard()) {\n            return true;\n        }\n\n        const selectedNode = this.treeWidget.getSelectedNode();\n        if (!selectedNode) {\n            return true;\n        }\n\n        const key = e.which;\n\n        switch (key) {\n            case KeyHandler.DOWN:\n                return this.moveDown(selectedNode);\n\n            case KeyHandler.UP:\n                return this.moveUp(selectedNode);\n\n            case KeyHandler.RIGHT:\n                return this.moveRight(selectedNode);\n\n            case KeyHandler.LEFT:\n                return this.moveLeft(selectedNode);\n\n            default:\n                return true;\n        }\n    };\n\n    private canHandleKeyboard(): boolean {\n        return (\n            (this.treeWidget.options.keyboardSupport || false) &&\n            this.treeWidget.selectNodeHandler.isFocusOnTree()\n        );\n    }\n}\n","const register = (widgetClass: unknown, widgetName: string): void => {\n    const getDataKey = (): string => `simple_widget_${widgetName}`;\n\n    const getWidgetData = (\n        el: HTMLElement,\n        dataKey: string\n    ): SimpleWidget<unknown> | null => {\n        const widget = jQuery.data(el, dataKey) as unknown;\n\n        if (widget && widget instanceof SimpleWidget) {\n            return widget;\n        } else {\n            return null;\n        }\n    };\n\n    const createWidget = ($el: JQuery, options: unknown): JQuery => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const existingWidget = getWidgetData(el, dataKey);\n\n            if (!existingWidget) {\n                const simpleWidgetClass = widgetClass as typeof SimpleWidget;\n                const widget = new simpleWidgetClass(el, options);\n\n                if (!jQuery.data(el, dataKey)) {\n                    jQuery.data(el, dataKey, widget);\n                }\n\n                // Call init after setting data, so we can call methods\n                widget.init();\n            }\n        }\n\n        return $el;\n    };\n\n    const destroyWidget = ($el: JQuery): void => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const widget = getWidgetData(el, dataKey);\n\n            if (widget) {\n                widget.destroy();\n            }\n\n            jQuery.removeData(el, dataKey);\n        }\n    };\n\n    const callFunction = (\n        $el: JQuery,\n        functionName: string,\n        args: unknown[]\n    ): unknown => {\n        let result = null;\n\n        for (const el of $el.get()) {\n            const widget = jQuery.data(el, getDataKey()) as unknown;\n\n            if (widget && widget instanceof SimpleWidget) {\n                const simpleWidget = widget as SimpleWidget<unknown>;\n                const widgetFunction = simpleWidget[functionName];\n\n                if (widgetFunction && typeof widgetFunction === \"function\") {\n                    result = widgetFunction.apply(widget, args) as unknown;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (jQuery.fn as any)[widgetName] = function (\n        this: JQuery,\n        argument1: unknown,\n        ...args: unknown[]\n    ) {\n        if (!argument1) {\n            return createWidget(this, null);\n        } else if (typeof argument1 === \"object\") {\n            const options = argument1 as unknown;\n            return createWidget(this, options);\n        } else if (typeof argument1 === \"string\" && argument1[0] !== \"_\") {\n            const functionName = argument1;\n\n            if (functionName === \"destroy\") {\n                return destroyWidget(this);\n            } else if (functionName === \"get_widget_class\") {\n                return widgetClass;\n            } else {\n                return callFunction(this, functionName, args);\n            }\n        } else {\n            return undefined;\n        }\n    };\n};\n\nexport default class SimpleWidget<WidgetOptions> {\n    public static register(widgetClass: unknown, widgetName: string): void {\n        register(widgetClass, widgetName);\n    }\n\n    [key: string]: unknown;\n\n    protected static defaults: unknown = {};\n\n    public options: WidgetOptions;\n\n    public $el: JQuery<HTMLElement>;\n\n    constructor(el: HTMLElement, options: WidgetOptions) {\n        this.$el = jQuery(el);\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const defaults = (this.constructor as any)[\"defaults\"] as WidgetOptions;\n        this.options = { ...defaults, ...options };\n    }\n\n    public destroy(): void {\n        this.deinit();\n    }\n\n    public init(): void {\n        //\n    }\n\n    public deinit(): void {\n        //\n    }\n}\n","/*\nThis widget does the same a the mouse widget in jqueryui.\n*/\nimport SimpleWidget from \"./simple.widget\";\nimport { PositionInfo } from \"./types\";\n\nconst getPositionInfoFromMouseEvent = (e: MouseEvent): PositionInfo => ({\n    pageX: e.pageX,\n    pageY: e.pageY,\n    target: e.target as HTMLElement,\n    originalEvent: e,\n});\n\nconst getPositionInfoFromTouch = (\n    touch: Touch,\n    e: TouchEvent\n): PositionInfo => ({\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    target: touch.target as HTMLElement,\n    originalEvent: e,\n});\n\nabstract class MouseWidget<WidgetOptions> extends SimpleWidget<WidgetOptions> {\n    protected isMouseStarted: boolean;\n    protected mouseDownInfo: PositionInfo | null;\n    private mouseDelayTimer: number | null;\n    private isMouseDelayMet: boolean;\n\n    public init(): void {\n        const element = this.$el.get(0);\n\n        if (element) {\n            element.addEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n            element.addEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.isMouseStarted = false;\n        this.mouseDelayTimer = null;\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n    }\n\n    public deinit(): void {\n        const el = this.$el.get(0);\n\n        if (el) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.removeMouseMoveEventListeners();\n    }\n\n    protected abstract mouseCapture(positionInfo: PositionInfo): boolean | null;\n\n    protected abstract mouseStart(positionInfo: PositionInfo): boolean;\n\n    protected abstract mouseDrag(positionInfo: PositionInfo): void;\n\n    protected abstract mouseStop(positionInfo: PositionInfo): void;\n\n    protected abstract getMouseDelay(): number;\n\n    private mouseDown = (e: MouseEvent): void => {\n        // Left mouse button?\n        if (e.button !== 0) {\n            return;\n        }\n\n        const result = this.handleMouseDown(getPositionInfoFromMouseEvent(e));\n\n        if (result && e.cancelable) {\n            e.preventDefault();\n        }\n    };\n\n    private handleMouseDown(positionInfo: PositionInfo): boolean {\n        // We may have missed mouseup (out of window)\n        if (this.isMouseStarted) {\n            this.handleMouseUp(positionInfo);\n        }\n\n        this.mouseDownInfo = positionInfo;\n\n        if (!this.mouseCapture(positionInfo)) {\n            return false;\n        }\n\n        this.handleStartMouse();\n\n        return true;\n    }\n\n    private handleStartMouse(): void {\n        document.addEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        document.addEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        document.addEventListener(\"mouseup\", this.mouseUp, { passive: false });\n        document.addEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n\n        const mouseDelay = this.getMouseDelay();\n\n        if (mouseDelay) {\n            this.startMouseDelayTimer(mouseDelay);\n        } else {\n            this.isMouseDelayMet = true;\n        }\n    }\n\n    private startMouseDelayTimer(mouseDelay: number): void {\n        if (this.mouseDelayTimer) {\n            clearTimeout(this.mouseDelayTimer);\n        }\n\n        this.mouseDelayTimer = window.setTimeout(() => {\n            if (this.mouseDownInfo) {\n                this.isMouseDelayMet = true;\n            }\n        }, mouseDelay);\n\n        this.isMouseDelayMet = false;\n    }\n\n    private mouseMove = (e: MouseEvent): void => {\n        this.handleMouseMove(e, getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseMove(\n        e: MouseEvent | TouchEvent,\n        positionInfo: PositionInfo\n    ): void {\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n            return;\n        }\n\n        if (!this.isMouseDelayMet) {\n            return;\n        }\n\n        if (this.mouseDownInfo) {\n            this.isMouseStarted = this.mouseStart(this.mouseDownInfo) !== false;\n        }\n\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n        } else {\n            this.handleMouseUp(positionInfo);\n        }\n    }\n\n    private mouseUp = (e: MouseEvent): void => {\n        this.handleMouseUp(getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseUp(positionInfo: PositionInfo): void {\n        this.removeMouseMoveEventListeners();\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n\n        if (this.isMouseStarted) {\n            this.isMouseStarted = false;\n            this.mouseStop(positionInfo);\n        }\n    }\n\n    private removeMouseMoveEventListeners() {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mouseup\", this.mouseUp, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n    }\n\n    private touchStart = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseDown(getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchMove = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseMove(e, getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchEnd = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseUp(getPositionInfoFromTouch(touch, e));\n    };\n}\n\nexport default MouseWidget;\n","import { isInt } from \"./util\";\nimport { JqTreeWidget } from \"./tree.jquery\";\nimport { Node } from \"./node\";\n\nexport interface SavedState {\n    open_nodes: NodeId[];\n    selected_node: NodeId[];\n}\n\nexport default class SaveStateHandler {\n    private treeWidget: JqTreeWidget;\n    private _supportsLocalStorage: boolean | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n    }\n\n    public saveState(): void {\n        const state = JSON.stringify(this.getState());\n\n        if (this.treeWidget.options.onSetStateFromStorage) {\n            this.treeWidget.options.onSetStateFromStorage(state);\n        } else if (this.supportsLocalStorage()) {\n            localStorage.setItem(this.getKeyName(), state);\n        }\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        const jsonData = this.loadFromStorage();\n\n        if (jsonData) {\n            return this.parseState(jsonData) as unknown as SavedState;\n        } else {\n            return null;\n        }\n    }\n\n    public getState(): SavedState {\n        const getOpenNodeIds = (): NodeId[] => {\n            const openNodes: NodeId[] = [];\n\n            this.treeWidget.tree.iterate((node: Node) => {\n                if (node.is_open && node.id && node.hasChildren()) {\n                    openNodes.push(node.id);\n                }\n                return true;\n            });\n\n            return openNodes;\n        };\n\n        const getSelectedNodeIds = (): NodeId[] => {\n            const selectedNodeIds: NodeId[] = [];\n\n            this.treeWidget.getSelectedNodes().forEach((node) => {\n                if (node.id != null) {\n                    selectedNodeIds.push(node.id);\n                }\n            });\n\n            return selectedNodeIds;\n        };\n\n        return {\n            open_nodes: getOpenNodeIds(),\n            selected_node: getSelectedNodeIds(),\n        };\n    }\n\n    /*\n    Set initial state\n    Don't handle nodes that are loaded on demand\n\n    result: must load on demand\n    */\n    public setInitialState(state: SavedState): boolean {\n        if (!state) {\n            return false;\n        } else {\n            let mustLoadOnDemand = false;\n\n            if (state.open_nodes) {\n                mustLoadOnDemand = this.openInitialNodes(state.open_nodes);\n            }\n\n            if (state.selected_node) {\n                this.resetSelection();\n                this.selectInitialNodes(state.selected_node);\n            }\n\n            return mustLoadOnDemand;\n        }\n    }\n\n    public setInitialStateOnDemand(\n        state: SavedState,\n        cbFinished: () => void\n    ): void {\n        if (state) {\n            this.doSetInitialStateOnDemand(\n                state.open_nodes,\n                state.selected_node,\n                cbFinished\n            );\n        } else {\n            cbFinished();\n        }\n    }\n\n    public getNodeIdToBeSelected(): NodeId | null {\n        const state = this.getStateFromStorage();\n\n        if (state && state.selected_node) {\n            return state.selected_node[0] || null;\n        } else {\n            return null;\n        }\n    }\n\n    private parseState(jsonData: string): SavedState {\n        const state = JSON.parse(jsonData) as Record<string, unknown>;\n\n        // Check if selected_node is an int (instead of an array)\n        if (state && state.selected_node && isInt(state.selected_node)) {\n            // Convert to array\n            state.selected_node = [state.selected_node];\n        }\n\n        return state as unknown as SavedState;\n    }\n\n    private loadFromStorage(): string | null {\n        if (this.treeWidget.options.onGetStateFromStorage) {\n            return this.treeWidget.options.onGetStateFromStorage();\n        } else if (this.supportsLocalStorage()) {\n            return localStorage.getItem(this.getKeyName());\n        } else {\n            return null;\n        }\n    }\n\n    private openInitialNodes(nodeIds: NodeId[]): boolean {\n        let mustLoadOnDemand = false;\n\n        for (const nodeId of nodeIds) {\n            const node = this.treeWidget.getNodeById(nodeId);\n\n            if (node) {\n                if (!node.load_on_demand) {\n                    node.is_open = true;\n                } else {\n                    mustLoadOnDemand = true;\n                }\n            }\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    private selectInitialNodes(nodeIds: NodeId[]): boolean {\n        let selectCount = 0;\n\n        for (const nodeId of nodeIds) {\n            const node = this.treeWidget.getNodeById(nodeId);\n\n            if (node) {\n                selectCount += 1;\n\n                this.treeWidget.selectNodeHandler.addToSelection(node);\n            }\n        }\n\n        return selectCount !== 0;\n    }\n\n    private resetSelection(): void {\n        const selectNodeHandler = this.treeWidget.selectNodeHandler;\n\n        const selectedNodes = selectNodeHandler.getSelectedNodes();\n\n        selectedNodes.forEach((node) => {\n            selectNodeHandler.removeFromSelection(node);\n        });\n    }\n\n    private doSetInitialStateOnDemand(\n        nodeIdsParam: NodeId[],\n        selectedNodes: NodeId[],\n        cbFinished: () => void\n    ): void {\n        let loadingCount = 0;\n        let nodeIds = nodeIdsParam;\n\n        const openNodes = (): void => {\n            const newNodesIds = [];\n\n            for (const nodeId of nodeIds) {\n                const node = this.treeWidget.getNodeById(nodeId);\n\n                if (!node) {\n                    newNodesIds.push(nodeId);\n                } else {\n                    if (!node.is_loading) {\n                        if (node.load_on_demand) {\n                            loadAndOpenNode(node);\n                        } else {\n                            this.treeWidget._openNode(node, false, null);\n                        }\n                    }\n                }\n            }\n\n            nodeIds = newNodesIds;\n\n            if (this.selectInitialNodes(selectedNodes)) {\n                this.treeWidget._refreshElements(null);\n            }\n\n            if (loadingCount === 0) {\n                cbFinished();\n            }\n        };\n\n        const loadAndOpenNode = (node: Node): void => {\n            loadingCount += 1;\n            this.treeWidget._openNode(node, false, () => {\n                loadingCount -= 1;\n                openNodes();\n            });\n        };\n\n        openNodes();\n    }\n\n    private getKeyName(): string {\n        if (typeof this.treeWidget.options.saveState === \"string\") {\n            return this.treeWidget.options.saveState;\n        } else {\n            return \"tree\";\n        }\n    }\n\n    private supportsLocalStorage(): boolean {\n        const testSupport = (): boolean => {\n            // Is local storage supported?\n            if (localStorage == null) {\n                return false;\n            } else {\n                // Check if it's possible to store an item. Safari does not allow this in private browsing mode.\n                try {\n                    const key = \"_storage_test\";\n                    sessionStorage.setItem(key, \"value\");\n                    sessionStorage.removeItem(key);\n                } catch (error) {\n                    return false;\n                }\n\n                return true;\n            }\n        };\n\n        if (this._supportsLocalStorage == null) {\n            this._supportsLocalStorage = testSupport();\n        }\n\n        return this._supportsLocalStorage;\n    }\n}\n","import { JqTreeWidget } from \"./tree.jquery\";\nimport { HitArea, PositionInfo } from \"./types\";\n\nexport default class ScrollHandler {\n    private treeWidget: JqTreeWidget;\n    private previousTop: number;\n    private isInitialized: boolean;\n    private $scrollParent: JQuery | null;\n    private scrollParentTop: number;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n        this.previousTop = -1;\n        this.isInitialized = false;\n    }\n\n    public checkScrolling(): void {\n        this.ensureInit();\n        this.checkVerticalScrolling();\n        this.checkHorizontalScrolling();\n    }\n\n    public scrollToY(top: number): void {\n        this.ensureInit();\n\n        if (this.$scrollParent && this.$scrollParent[0]) {\n            this.$scrollParent[0].scrollTop = top;\n        } else {\n            const offset = this.treeWidget.$el.offset();\n            const treeTop = offset ? offset.top : 0;\n\n            jQuery(document).scrollTop(top + treeTop);\n        }\n    }\n\n    public isScrolledIntoView($element: JQuery): boolean {\n        this.ensureInit();\n\n        let elementBottom: number;\n        let viewBottom: number;\n        let elementTop: number;\n        let viewTop: number;\n\n        const elHeight = $element.height() || 0;\n\n        if (this.$scrollParent) {\n            viewTop = 0;\n            viewBottom = this.$scrollParent.height() || 0;\n\n            const offset = $element.offset();\n            const originalTop = offset ? offset.top : 0;\n\n            elementTop = originalTop - this.scrollParentTop;\n            elementBottom = elementTop + elHeight;\n        } else {\n            viewTop = jQuery(window).scrollTop() || 0;\n\n            const windowHeight = jQuery(window).height() || 0;\n            viewBottom = viewTop + windowHeight;\n\n            const offset = $element.offset();\n\n            elementTop = offset ? offset.top : 0;\n            elementBottom = elementTop + elHeight;\n        }\n\n        return elementBottom <= viewBottom && elementTop >= viewTop;\n    }\n\n    public getScrollLeft(): number {\n        if (!this.$scrollParent) {\n            return 0;\n        } else {\n            return this.$scrollParent.scrollLeft() || 0;\n        }\n    }\n\n    private initScrollParent(): void {\n        const getParentWithOverflow = (): JQuery | null => {\n            const cssAttributes = [\"overflow\", \"overflow-y\"];\n\n            const hasOverFlow = ($el: JQuery): boolean => {\n                for (const attr of cssAttributes) {\n                    const overflowValue = $el.css(attr);\n                    if (\n                        overflowValue === \"auto\" ||\n                        overflowValue === \"scroll\"\n                    ) {\n                        return true;\n                    }\n                }\n\n                return false;\n            };\n\n            if (hasOverFlow(this.treeWidget.$el)) {\n                return this.treeWidget.$el;\n            }\n\n            for (const el of this.treeWidget.$el.parents().get()) {\n                const $el = jQuery(el);\n                if (hasOverFlow($el)) {\n                    return $el;\n                }\n            }\n\n            return null;\n        };\n\n        const setDocumentAsScrollParent = (): void => {\n            this.scrollParentTop = 0;\n            this.$scrollParent = null;\n        };\n\n        if (this.treeWidget.$el.css(\"position\") === \"fixed\") {\n            setDocumentAsScrollParent();\n        }\n\n        const $scrollParent = getParentWithOverflow();\n\n        if (\n            $scrollParent &&\n            $scrollParent.length &&\n            $scrollParent[0]?.tagName !== \"HTML\"\n        ) {\n            this.$scrollParent = $scrollParent;\n\n            const offset = this.$scrollParent.offset();\n            this.scrollParentTop = offset ? offset.top : 0;\n        } else {\n            setDocumentAsScrollParent();\n        }\n\n        this.isInitialized = true;\n    }\n\n    private ensureInit(): void {\n        if (!this.isInitialized) {\n            this.initScrollParent();\n        }\n    }\n\n    private handleVerticalScrollingWithScrollParent(area: HitArea): void {\n        const scrollParent = this.$scrollParent && this.$scrollParent[0];\n\n        if (!scrollParent) {\n            return;\n        }\n\n        const distanceBottom =\n            this.scrollParentTop + scrollParent.offsetHeight - area.bottom;\n\n        if (distanceBottom < 20) {\n            scrollParent.scrollTop += 20;\n            this.treeWidget.refreshHitAreas();\n            this.previousTop = -1;\n        } else if (area.top - this.scrollParentTop < 20) {\n            scrollParent.scrollTop -= 20;\n            this.treeWidget.refreshHitAreas();\n            this.previousTop = -1;\n        }\n    }\n\n    private handleVerticalScrollingWithDocument(area: HitArea): void {\n        const scrollTop = jQuery(document).scrollTop() || 0;\n        const distanceTop = area.top - scrollTop;\n\n        if (distanceTop < 20) {\n            jQuery(document).scrollTop(scrollTop - 20);\n        } else {\n            const windowHeight = jQuery(window).height() || 0;\n\n            if (windowHeight - (area.bottom - scrollTop) < 20) {\n                jQuery(document).scrollTop(scrollTop + 20);\n            }\n        }\n    }\n\n    private checkVerticalScrolling(): void {\n        const hoveredArea = this.treeWidget.dndHandler.hoveredArea;\n\n        if (hoveredArea && hoveredArea.top !== this.previousTop) {\n            this.previousTop = hoveredArea.top;\n\n            if (this.$scrollParent) {\n                this.handleVerticalScrollingWithScrollParent(hoveredArea);\n            } else {\n                this.handleVerticalScrollingWithDocument(hoveredArea);\n            }\n        }\n    }\n\n    private checkHorizontalScrolling(): void {\n        const positionInfo = this.treeWidget.dndHandler.positionInfo;\n\n        if (!positionInfo) {\n            return;\n        }\n\n        if (this.$scrollParent) {\n            this.handleHorizontalScrollingWithParent(positionInfo);\n        } else {\n            this.handleHorizontalScrollingWithDocument(positionInfo);\n        }\n    }\n\n    private handleHorizontalScrollingWithParent(\n        positionInfo: PositionInfo\n    ): void {\n        if (\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return;\n        }\n\n        const $scrollParent = this.$scrollParent;\n        const scrollParentOffset = $scrollParent && $scrollParent.offset();\n\n        if (!($scrollParent && scrollParentOffset)) {\n            return;\n        }\n\n        const scrollParent = $scrollParent[0];\n\n        if (!scrollParent) {\n            return;\n        }\n\n        const canScrollRight =\n            scrollParent.scrollLeft + scrollParent.clientWidth <\n            scrollParent.scrollWidth;\n        const canScrollLeft = scrollParent.scrollLeft > 0;\n\n        const rightEdge = scrollParentOffset.left + scrollParent.clientWidth;\n        const leftEdge = scrollParentOffset.left;\n        const isNearRightEdge = positionInfo.pageX > rightEdge - 20;\n        const isNearLeftEdge = positionInfo.pageX < leftEdge + 20;\n\n        if (isNearRightEdge && canScrollRight) {\n            scrollParent.scrollLeft = Math.min(\n                scrollParent.scrollLeft + 20,\n                scrollParent.scrollWidth\n            );\n        } else if (isNearLeftEdge && canScrollLeft) {\n            scrollParent.scrollLeft = Math.max(scrollParent.scrollLeft - 20, 0);\n        }\n    }\n\n    private handleHorizontalScrollingWithDocument(\n        positionInfo: PositionInfo\n    ): void {\n        if (\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return;\n        }\n\n        const $document = jQuery(document);\n\n        const scrollLeft = $document.scrollLeft() || 0;\n        const windowWidth = jQuery(window).width() || 0;\n\n        const canScrollLeft = scrollLeft > 0;\n\n        const isNearRightEdge = positionInfo.pageX > windowWidth - 20;\n        const isNearLeftEdge = positionInfo.pageX - scrollLeft < 20;\n\n        if (isNearRightEdge) {\n            $document.scrollLeft(scrollLeft + 20);\n        } else if (isNearLeftEdge && canScrollLeft) {\n            $document.scrollLeft(Math.max(scrollLeft - 20, 0));\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport default class SelectNodeHandler {\n    private treeWidget: JqTreeWidget;\n    private selectedNodes: Set<NodeId>;\n    private selectedSingleNode: Node | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n        this.selectedNodes = new Set<NodeId>();\n        this.clear();\n    }\n\n    public getSelectedNode(): Node | false {\n        const selectedNodes = this.getSelectedNodes();\n\n        if (selectedNodes.length) {\n            return selectedNodes[0] || false;\n        } else {\n            return false;\n        }\n    }\n\n    public getSelectedNodes(): Node[] {\n        if (this.selectedSingleNode) {\n            return [this.selectedSingleNode];\n        } else {\n            const selectedNodes: Node[] = [];\n\n            this.selectedNodes.forEach((id) => {\n                const node = this.treeWidget.getNodeById(id);\n                if (node) {\n                    selectedNodes.push(node);\n                }\n            });\n\n            return selectedNodes;\n        }\n    }\n\n    public getSelectedNodesUnder(parent: Node): Node[] {\n        if (this.selectedSingleNode) {\n            if (parent.isParentOf(this.selectedSingleNode)) {\n                return [this.selectedSingleNode];\n            } else {\n                return [];\n            }\n        } else {\n            const selectedNodes = [];\n\n            for (const id in this.selectedNodes) {\n                if (\n                    Object.prototype.hasOwnProperty.call(this.selectedNodes, id)\n                ) {\n                    const node = this.treeWidget.getNodeById(id);\n                    if (node && parent.isParentOf(node)) {\n                        selectedNodes.push(node);\n                    }\n                }\n            }\n\n            return selectedNodes;\n        }\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (node.id != null) {\n            return this.selectedNodes.has(node.id);\n        } else if (this.selectedSingleNode) {\n            return this.selectedSingleNode.element === node.element;\n        } else {\n            return false;\n        }\n    }\n\n    public clear(): void {\n        this.selectedNodes.clear();\n        this.selectedSingleNode = null;\n    }\n\n    public removeFromSelection(node: Node, includeChildren = false): void {\n        if (node.id == null) {\n            if (\n                this.selectedSingleNode &&\n                node.element === this.selectedSingleNode.element\n            ) {\n                this.selectedSingleNode = null;\n            }\n        } else {\n            this.selectedNodes.delete(node.id);\n\n            if (includeChildren) {\n                node.iterate(() => {\n                    if (node.id != null) {\n                        this.selectedNodes.delete(node.id);\n                    }\n                    return true;\n                });\n            }\n        }\n    }\n\n    public addToSelection(node: Node): void {\n        if (node.id != null) {\n            this.selectedNodes.add(node.id);\n        } else {\n            this.selectedSingleNode = node;\n        }\n    }\n\n    public isFocusOnTree(): boolean {\n        const activeElement = document.activeElement;\n\n        return Boolean(\n            activeElement &&\n                activeElement.tagName === \"SPAN\" &&\n                this.treeWidget._containsElement(activeElement as HTMLElement)\n        );\n    }\n}\n","import { DropHint } from \"..//types\";\n\nclass BorderDropHint implements DropHint {\n    private hint?: HTMLElement;\n\n    constructor(element: HTMLElement, scrollLeft: number) {\n        const div = element.querySelector(\":scope > .jqtree-element\");\n\n        if (!div) {\n            this.hint = undefined;\n            return;\n        }\n\n        const width = Math.max(element.offsetWidth + scrollLeft - 4, 0);\n        const height = Math.max(element.clientHeight - 4, 0);\n\n        const hint = document.createElement(\"span\");\n        hint.className = \"jqtree-border\";\n        hint.style.width = `${width}px`;\n        hint.style.height = `${height}px`;\n\n        this.hint = hint;\n\n        div.append(this.hint);\n    }\n\n    public remove(): void {\n        this.hint?.remove();\n    }\n}\n\nexport default BorderDropHint;\n","import { Position, Node } from \"../node\";\nimport { DropHint } from \"../types\";\n\nclass GhostDropHint implements DropHint {\n    private element: HTMLElement;\n    private node: Node;\n    private ghost: HTMLElement;\n\n    constructor(node: Node, element: HTMLElement, position: Position) {\n        this.element = element;\n        this.node = node;\n        this.ghost = this.createGhostElement();\n\n        if (position === Position.After) {\n            this.moveAfter();\n        } else if (position === Position.Before) {\n            this.moveBefore();\n        } else if (position === Position.Inside) {\n            if (node.isFolder() && node.is_open) {\n                this.moveInsideOpenFolder();\n            } else {\n                this.moveInside();\n            }\n        }\n    }\n\n    public remove(): void {\n        this.ghost.remove();\n    }\n\n    private moveAfter(): void {\n        this.element.after(this.ghost);\n    }\n\n    private moveBefore(): void {\n        this.element.before(this.ghost);\n    }\n\n    private moveInsideOpenFolder(): void {\n        const childElement = this.node.children[0]?.element;\n\n        if (childElement) {\n            childElement.before(this.ghost);\n        }\n    }\n\n    private moveInside(): void {\n        this.element.after(this.ghost);\n        this.ghost.classList.add(\"jqtree-inside\");\n    }\n\n    private createGhostElement() {\n        const ghost = document.createElement(\"li\");\n        ghost.className = \"jqtree_common jqtree-ghost\";\n\n        const circleSpan = document.createElement(\"span\");\n        circleSpan.className = \"jqtree_common jqtree-circle\";\n        ghost.append(circleSpan);\n\n        const lineSpan = document.createElement(\"span\");\n        lineSpan.className = \"jqtree_common jqtree-line\";\n        ghost.append(lineSpan);\n\n        return ghost;\n    }\n}\n\nexport default GhostDropHint;\n","import { Position, Node } from \"../node\";\nimport { JqTreeWidget } from \"../tree.jquery\";\nimport { DropHint } from \"../types\";\nimport BorderDropHint from \"./borderDropHint\";\nimport GhostDropHint from \"./ghostDropHint\";\n\nclass NodeElement {\n    public node: Node;\n    public element: HTMLElement;\n    protected treeWidget: JqTreeWidget;\n\n    constructor(node: Node, treeWidget: JqTreeWidget) {\n        this.init(node, treeWidget);\n    }\n\n    public init(node: Node, treeWidget: JqTreeWidget): void {\n        this.node = node;\n        this.treeWidget = treeWidget;\n\n        if (!node.element) {\n            const element = this.treeWidget.element.get(0);\n\n            if (element) {\n                node.element = element;\n            }\n        }\n\n        if (node.element) {\n            this.element = node.element;\n        }\n    }\n\n    public addDropHint(position: number): DropHint {\n        if (this.mustShowBorderDropHint(position)) {\n            return new BorderDropHint(\n                this.element,\n                this.treeWidget._getScrollLeft(),\n            );\n        } else {\n            return new GhostDropHint(this.node, this.element, position);\n        }\n    }\n\n    public select(mustSetFocus: boolean): void {\n        this.element.classList.add(\"jqtree-selected\");\n\n        const titleSpan = this.getTitleSpan();\n        const tabIndex = this.treeWidget.options.tabIndex;\n\n        // Check for null or undefined\n        if (tabIndex != null) {\n            titleSpan.setAttribute(\"tabindex\", tabIndex.toString());\n        }\n\n        titleSpan.setAttribute(\"aria-selected\", \"true\");\n\n        if (mustSetFocus) {\n            titleSpan.focus();\n        }\n    }\n\n    public deselect(): void {\n        this.element.classList.remove(\"jqtree-selected\");\n\n        const titleSpan = this.getTitleSpan();\n        titleSpan.removeAttribute(\"tabindex\");\n        titleSpan.setAttribute(\"aria-selected\", \"false\");\n\n        titleSpan.blur();\n    }\n\n    protected getUl(): HTMLUListElement {\n        return this.element.querySelector(\":scope > ul\") as HTMLUListElement;\n    }\n\n    protected getTitleSpan(): HTMLSpanElement {\n        return this.element.querySelector(\n            \":scope > .jqtree-element > span.jqtree-title\",\n        ) as HTMLSpanElement;\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return position === Position.Inside;\n    }\n}\n\nexport default NodeElement;\n","import { Position, Node } from \"../node\";\nimport NodeElement from \"./index\";\n\nexport type OnFinishOpenNode = (node: Node) => void;\n\nclass FolderElement extends NodeElement {\n    public open(\n        onFinished: OnFinishOpenNode | null,\n        slide = true,\n        animationSpeed: JQuery.Duration = \"fast\",\n    ): void {\n        if (this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = true;\n\n        const button = this.getButton();\n        button.classList.remove(\"jqtree-closed\");\n        button.innerHTML = \"\";\n\n        const openedIconElement = this.treeWidget.renderer.openedIconElement;\n\n        if (openedIconElement) {\n            const icon = openedIconElement.cloneNode(true);\n            button.appendChild(icon);\n        }\n\n        const doOpen = (): void => {\n            this.element.classList.remove(\"jqtree-closed\");\n\n            const titleSpan = this.getTitleSpan();\n            titleSpan.setAttribute(\"aria-expanded\", \"true\");\n\n            if (onFinished) {\n                onFinished(this.node);\n            }\n\n            this.treeWidget._triggerEvent(\"tree.open\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            jQuery(this.getUl()).slideDown(animationSpeed, doOpen);\n        } else {\n            jQuery(this.getUl()).show();\n            doOpen();\n        }\n    }\n\n    public close(\n        slide = true,\n        animationSpeed: JQuery.Duration | undefined = \"fast\",\n    ): void {\n        if (!this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = false;\n\n        const button = this.getButton();\n        button.classList.add(\"jqtree-closed\");\n        button.innerHTML = \"\";\n\n        const closedIconElement = this.treeWidget.renderer.closedIconElement;\n\n        if (closedIconElement) {\n            const icon = closedIconElement.cloneNode(true);\n            button.appendChild(icon);\n        }\n\n        const doClose = (): void => {\n            this.element.classList.add(\"jqtree-closed\");\n\n            const titleSpan = this.getTitleSpan();\n            titleSpan.setAttribute(\"aria-expanded\", \"false\");\n\n            this.treeWidget._triggerEvent(\"tree.close\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            jQuery(this.getUl()).slideUp(animationSpeed, doClose);\n        } else {\n            jQuery(this.getUl()).hide();\n            doClose();\n        }\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return !this.node.is_open && position === Position.Inside;\n    }\n\n    private getButton(): HTMLLinkElement {\n        return this.element.querySelector(\n            \":scope > .jqtree-element > a.jqtree-toggler\",\n        ) as HTMLLinkElement;\n    }\n}\n\nexport default FolderElement;\n","import __version__ from \"./version\";\nimport { DragAndDropHandler } from \"./dragAndDropHandler\";\nimport ElementsRenderer from \"./elementsRenderer\";\nimport DataLoader, { HandleFinishedLoading } from \"./dataLoader\";\nimport KeyHandler from \"./keyHandler\";\nimport MouseWidget from \"./mouse.widget\";\nimport { PositionInfo } from \"./types\";\nimport SaveStateHandler, { SavedState } from \"./saveStateHandler\";\nimport ScrollHandler from \"./scrollHandler\";\nimport SelectNodeHandler from \"./selectNodeHandler\";\nimport SimpleWidget from \"./simple.widget\";\nimport { Node, getPosition } from \"./node\";\nimport { isFunction } from \"./util\";\nimport NodeElement from \"./nodeElement\";\nimport FolderElement, { OnFinishOpenNode } from \"./nodeElement/folderElement\";\n\nimport { JQTreeOptions } from \"./jqtreeOptions\";\n\ninterface ClickTarget {\n    node: Node;\n    type: \"button\" | \"label\";\n}\n\ninterface SelectNodeOptions {\n    mustToggle?: boolean;\n    mustSetFocus?: boolean;\n}\n\nconst NODE_PARAM_IS_EMPTY = \"Node parameter is empty\";\nconst PARAM_IS_EMPTY = \"Parameter is empty: \";\n\nexport class JqTreeWidget extends MouseWidget<JQTreeOptions> {\n    protected static defaults: JQTreeOptions = {\n        animationSpeed: \"fast\",\n        autoEscape: true,\n        autoOpen: false, // true / false / int (open n levels starting at 0)\n        buttonLeft: true,\n        // The symbol to use for a closed node - ► BLACK RIGHT-POINTING POINTER\n        // http://www.fileformat.info/info/unicode/char/25ba/index.htm\n        closedIcon: undefined,\n        data: undefined,\n        dataFilter: undefined,\n        dataUrl: undefined,\n        dragAndDrop: false,\n        keyboardSupport: true,\n        nodeClass: Node,\n        onCanMove: undefined, // Can this node be moved?\n        onCanMoveTo: undefined, // Can this node be moved to this position? function(moved_node, target_node, position)\n        onCanSelectNode: undefined,\n        onCreateLi: undefined,\n        onDragMove: undefined,\n        onDragStop: undefined,\n        onGetStateFromStorage: undefined,\n        onIsMoveHandle: undefined,\n        onLoadFailed: undefined,\n        onLoading: undefined,\n        onSetStateFromStorage: undefined,\n        openedIcon: \"&#x25bc;\",\n        openFolderDelay: 500, // The delay for opening a folder during drag and drop; the value is in milliseconds\n        // The symbol to use for an open node - ▼ BLACK DOWN-POINTING TRIANGLE\n        // http://www.fileformat.info/info/unicode/char/25bc/index.htm\n        rtl: undefined, // right-to-left support; true / false (default)\n        saveState: false, // true / false / string (cookie name)\n        selectable: true,\n        showEmptyFolder: false,\n        slide: true, // must display slide animation?\n        startDndDelay: 300, // The delay for starting dnd (in milliseconds)\n        tabIndex: 0,\n        useContextMenu: true,\n    };\n\n    public element: JQuery;\n    public tree: Node;\n    public dndHandler: DragAndDropHandler;\n    public renderer: ElementsRenderer;\n    public dataLoader: DataLoader;\n    public scrollHandler: ScrollHandler;\n    public selectNodeHandler: SelectNodeHandler;\n\n    private isInitialized: boolean;\n    private saveStateHandler: SaveStateHandler;\n    private keyHandler: KeyHandler;\n\n    public toggle(node: Node, slideParam: null | boolean = null): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.is_open) {\n            this.closeNode(node, slide);\n        } else {\n            this.openNode(node, slide);\n        }\n\n        return this.element;\n    }\n\n    public getTree(): Node {\n        return this.tree;\n    }\n\n    public selectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): JQuery {\n        this.doSelectNode(node, optionsParam);\n        return this.element;\n    }\n\n    public getSelectedNode(): Node | false {\n        return this.selectNodeHandler.getSelectedNode();\n    }\n\n    public toJson(): string {\n        return JSON.stringify(this.tree.getData());\n    }\n\n    public loadData(data: NodeData[], parentNode: Node | null): JQuery {\n        this.doLoadData(data, parentNode);\n        return this.element;\n    }\n\n    /*\n    signatures:\n    - loadDataFromUrl(url, parent_node=null, on_finished=null)\n        loadDataFromUrl('/my_data');\n        loadDataFromUrl('/my_data', node1);\n        loadDataFromUrl('/my_data', node1, function() { console.log('finished'); });\n        loadDataFromUrl('/my_data', null, function() { console.log('finished'); });\n\n    - loadDataFromUrl(parent_node=null, on_finished=null)\n        loadDataFromUrl();\n        loadDataFromUrl(node1);\n        loadDataFromUrl(null, function() { console.log('finished'); });\n        loadDataFromUrl(node1, function() { console.log('finished'); });\n    */\n    public loadDataFromUrl(\n        param1: string | null | Node,\n        param2?: Node | null | HandleFinishedLoading,\n        param3?: HandleFinishedLoading,\n    ): JQuery {\n        if (typeof param1 === \"string\") {\n            // first parameter is url\n            this.doLoadDataFromUrl(\n                param1,\n                param2 as Node | null,\n                param3 ?? null,\n            );\n        } else {\n            // first parameter is not url\n            this.doLoadDataFromUrl(\n                null,\n                param1,\n                param2 as HandleFinishedLoading | null,\n            );\n        }\n\n        return this.element;\n    }\n\n    public reload(onFinished: HandleFinishedLoading | null): JQuery {\n        this.doLoadDataFromUrl(null, null, onFinished);\n        return this.element;\n    }\n\n    public refresh(): JQuery {\n        this._refreshElements(null);\n        return this.element;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.tree.getNodeById(nodeId);\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.tree.getNodeByName(name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        return this.tree.getNodeByNameMustExist(name);\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.tree.getNodesByProperty(key, value);\n    }\n\n    public getNodeByHtmlElement(\n        element: HTMLElement | JQuery<HTMLElement>,\n    ): Node | null {\n        return this.getNode(jQuery(element));\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        return this.tree.getNodeByCallback(callback);\n    }\n\n    public openNode(\n        node: Node,\n        param1?: boolean | OnFinishOpenNode,\n        param2?: OnFinishOpenNode,\n    ): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const parseParams = (): [boolean, OnFinishOpenNode | null] => {\n            let onFinished: OnFinishOpenNode | null;\n            let slide: boolean | null;\n\n            if (isFunction(param1)) {\n                onFinished = param1 as OnFinishOpenNode | null;\n                slide = null;\n            } else {\n                slide = param1 as boolean;\n                onFinished = param2 as OnFinishOpenNode;\n            }\n\n            if (slide == null) {\n                slide = this.options.slide ?? false;\n            }\n\n            return [slide, onFinished];\n        };\n\n        const [slide, onFinished] = parseParams();\n\n        this._openNode(node, slide, onFinished);\n        return this.element;\n    }\n\n    public closeNode(node: Node, slideParam?: null | boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            new FolderElement(node, this).close(\n                slide,\n                this.options.animationSpeed,\n            );\n\n            this.saveState();\n        }\n\n        return this.element;\n    }\n\n    public isDragging(): boolean {\n        return this.dndHandler.isDragging;\n    }\n\n    public refreshHitAreas(): JQuery {\n        this.dndHandler.refresh();\n        return this.element;\n    }\n\n    public addNodeAfter(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        const newNode = existingNode.addAfter(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addNodeBefore(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addBefore(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addParentNode(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addParent(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(newNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public removeNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!node.parent) {\n            throw Error(\"Node has no parent\");\n        }\n\n        this.selectNodeHandler.removeFromSelection(node, true); // including children\n\n        const parent = node.parent;\n        node.remove();\n        this._refreshElements(parent);\n\n        return this.element;\n    }\n\n    public appendNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam || this.tree;\n\n        const node = parentNode.append(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public prependNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam ?? this.tree;\n\n        const node = parentNode.prepend(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public updateNode(node: Node, data: NodeData): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const idIsChanged =\n            typeof data === \"object\" && data.id && data.id !== node.id;\n\n        if (idIsChanged) {\n            this.tree.removeNodeFromIndex(node);\n        }\n\n        node.setData(data);\n\n        if (idIsChanged) {\n            this.tree.addNodeToIndex(node);\n        }\n\n        if (\n            typeof data === \"object\" &&\n            data[\"children\"] &&\n            data[\"children\"] instanceof Array\n        ) {\n            node.removeChildren();\n\n            if (data.children.length) {\n                node.loadFromData(data.children as Node[]);\n            }\n        }\n\n        this._refreshElements(node);\n\n        return this.element;\n    }\n\n    private isSelectedNodeInSubtree(subtree: Node): boolean {\n        const selectedNode = this.getSelectedNode();\n\n        if (!selectedNode) {\n            return false;\n        } else {\n            return subtree === selectedNode || subtree.isParentOf(selectedNode);\n        }\n    }\n\n    public moveNode(node: Node, targetNode: Node, position: string): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!targetNode) {\n            throw Error(PARAM_IS_EMPTY + \"targetNode\");\n        }\n\n        const positionIndex = getPosition(position);\n\n        if (positionIndex !== undefined) {\n            this.tree.moveNode(node, targetNode, positionIndex);\n            this._refreshElements(null);\n        }\n\n        return this.element;\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        return this.saveStateHandler.getStateFromStorage();\n    }\n\n    public addToSelection(node: Node, mustSetFocus?: boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.addToSelection(node);\n\n        this._getNodeElementForNode(node).select(\n            mustSetFocus === undefined ? true : mustSetFocus,\n        );\n\n        this.saveState();\n\n        return this.element;\n    }\n\n    public getSelectedNodes(): Node[] {\n        return this.selectNodeHandler.getSelectedNodes();\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        return this.selectNodeHandler.isNodeSelected(node);\n    }\n\n    public removeFromSelection(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.removeFromSelection(node);\n\n        this._getNodeElementForNode(node).deselect();\n        this.saveState();\n\n        return this.element;\n    }\n\n    public scrollToNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const nodeOffset = jQuery(node.element).offset();\n        const nodeTop = nodeOffset ? nodeOffset.top : 0;\n\n        const treeOffset = this.$el.offset();\n        const treeTop = treeOffset ? treeOffset.top : 0;\n\n        const top = nodeTop - treeTop;\n\n        this.scrollHandler.scrollToY(top);\n\n        return this.element;\n    }\n\n    public getState(): SavedState | null {\n        return this.saveStateHandler.getState();\n    }\n\n    public setState(state: SavedState): JQuery {\n        this.saveStateHandler.setInitialState(state);\n        this._refreshElements(null);\n\n        return this.element;\n    }\n\n    public setOption(option: string, value: unknown): JQuery {\n        (this.options as unknown as Record<string, unknown>)[option] = value;\n        return this.element;\n    }\n\n    public moveDown(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveDown(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public moveUp(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveUp(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public getVersion(): string {\n        return __version__;\n    }\n\n    public _triggerEvent(\n        eventName: string,\n        values?: Record<string, unknown>,\n    ): JQuery.Event {\n        const event = jQuery.Event(eventName, values);\n        this.element.trigger(event);\n        return event;\n    }\n\n    public _openNode(\n        node: Node,\n        slide = true,\n        onFinished: OnFinishOpenNode | null,\n    ): void {\n        const doOpenNode = (\n            _node: Node,\n            _slide: boolean,\n            _onFinished: OnFinishOpenNode | null,\n        ): void => {\n            const folderElement = new FolderElement(_node, this);\n            folderElement.open(\n                _onFinished,\n                _slide,\n                this.options.animationSpeed,\n            );\n        };\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            if (node.load_on_demand) {\n                this.loadFolderOnDemand(node, slide, onFinished);\n            } else {\n                let parent = node.parent;\n\n                while (parent) {\n                    // nb: do not open root element\n                    if (parent.parent) {\n                        doOpenNode(parent, false, null);\n                    }\n                    parent = parent.parent;\n                }\n\n                doOpenNode(node, slide, onFinished);\n                this.saveState();\n            }\n        }\n    }\n\n    /*\n    Redraw the tree or part of the tree.\n     from_node: redraw this subtree\n    */\n    public _refreshElements(fromNode: Node | null): void {\n        const mustSetFocus = this.selectNodeHandler.isFocusOnTree();\n        const mustSelect = fromNode\n            ? this.isSelectedNodeInSubtree(fromNode)\n            : false;\n\n        this.renderer.render(fromNode);\n\n        if (mustSelect) {\n            this.selectCurrentNode(mustSetFocus);\n        }\n\n        this._triggerEvent(\"tree.refresh\");\n    }\n\n    public _getNodeElementForNode(node: Node): NodeElement {\n        if (node.isFolder()) {\n            return new FolderElement(node, this);\n        } else {\n            return new NodeElement(node, this);\n        }\n    }\n\n    public _getNodeElement($element: JQuery<HTMLElement>): NodeElement | null {\n        const node = this.getNode($element);\n        if (node) {\n            return this._getNodeElementForNode(node);\n        } else {\n            return null;\n        }\n    }\n\n    public _containsElement(element: HTMLElement): boolean {\n        const node = this.getNode(jQuery(element));\n\n        return node != null && node.tree === this.tree;\n    }\n\n    public _getScrollLeft(): number {\n        return this.scrollHandler.getScrollLeft();\n    }\n\n    public init(): void {\n        super.init();\n\n        this.element = this.$el;\n        this.isInitialized = false;\n\n        this.options.rtl = this.getRtlOption();\n\n        if (this.options.closedIcon == null) {\n            this.options.closedIcon = this.getDefaultClosedIcon();\n        }\n\n        this.renderer = new ElementsRenderer(this);\n        this.dataLoader = new DataLoader(this);\n        this.saveStateHandler = new SaveStateHandler(this);\n        this.selectNodeHandler = new SelectNodeHandler(this);\n        this.dndHandler = new DragAndDropHandler(this);\n        this.scrollHandler = new ScrollHandler(this);\n        this.keyHandler = new KeyHandler(this);\n\n        this.initData();\n\n        this.element.on(\"click\", this.handleClick);\n        this.element.on(\"dblclick\", this.handleDblclick);\n\n        if (this.options.useContextMenu) {\n            this.element.on(\"contextmenu\", this.handleContextmenu);\n        }\n    }\n\n    public deinit(): void {\n        this.element.empty();\n        this.element.off();\n\n        this.keyHandler.deinit();\n\n        this.tree = new Node({}, true);\n\n        super.deinit();\n    }\n\n    protected mouseCapture(positionInfo: PositionInfo): boolean | null {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseCapture(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStart(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStart(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseDrag(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            const result = this.dndHandler.mouseDrag(positionInfo);\n\n            this.scrollHandler.checkScrolling();\n            return result;\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStop(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStop(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected getMouseDelay(): number {\n        return this.options.startDndDelay ?? 0;\n    }\n\n    private initData(): void {\n        if (this.options.data) {\n            this.doLoadData(this.options.data, null);\n        } else {\n            const dataUrl = this.getDataUrlInfo(null);\n\n            if (dataUrl) {\n                this.doLoadDataFromUrl(null, null, null);\n            } else {\n                this.doLoadData([], null);\n            }\n        }\n    }\n\n    private getDataUrlInfo(node: Node | null): JQuery.AjaxSettings | null {\n        const dataUrl =\n            this.options.dataUrl || (this.element.data(\"url\") as string | null);\n\n        const getUrlFromString = (url: string): JQuery.AjaxSettings => {\n            const urlInfo: JQuery.AjaxSettings = { url };\n\n            setUrlInfoData(urlInfo);\n\n            return urlInfo;\n        };\n\n        const setUrlInfoData = (urlInfo: JQuery.AjaxSettings): void => {\n            if (node?.id) {\n                // Load on demand of a subtree; add node parameter\n                const data = { node: node.id };\n                urlInfo[\"data\"] = data;\n            } else {\n                // Add selected_node parameter\n                const selectedNodeId = this.getNodeIdToBeSelected();\n                if (selectedNodeId) {\n                    const data = { selected_node: selectedNodeId };\n                    urlInfo[\"data\"] = data;\n                }\n            }\n        };\n\n        if (typeof dataUrl === \"function\") {\n            return dataUrl(node);\n        } else if (typeof dataUrl === \"string\") {\n            return getUrlFromString(dataUrl);\n        } else if (dataUrl && typeof dataUrl === \"object\") {\n            setUrlInfoData(dataUrl);\n            return dataUrl;\n        } else {\n            return null;\n        }\n    }\n\n    private getNodeIdToBeSelected(): NodeId | null {\n        if (this.options.saveState) {\n            return this.saveStateHandler.getNodeIdToBeSelected();\n        } else {\n            return null;\n        }\n    }\n\n    private initTree(data: NodeData[]): void {\n        const doInit = (): void => {\n            if (!this.isInitialized) {\n                this.isInitialized = true;\n                this._triggerEvent(\"tree.init\");\n            }\n        };\n\n        if (!this.options.nodeClass) {\n            return;\n        }\n\n        this.tree = new this.options.nodeClass(\n            null,\n            true,\n            this.options.nodeClass,\n        );\n\n        this.selectNodeHandler.clear();\n\n        this.tree.loadFromData(data);\n\n        const mustLoadOnDemand = this.setInitialState();\n\n        this._refreshElements(null);\n\n        if (!mustLoadOnDemand) {\n            doInit();\n        } else {\n            // Load data on demand and then init the tree\n            this.setInitialStateOnDemand(doInit);\n        }\n    }\n\n    // Set initial state, either by restoring the state or auto-opening nodes\n    // result: must load nodes on demand?\n    private setInitialState(): boolean {\n        const restoreState = (): [boolean, boolean] => {\n            // result: is state restored, must load on demand?\n            if (!this.options.saveState) {\n                return [false, false];\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return [false, false];\n                } else {\n                    const mustLoadOnDemand =\n                        this.saveStateHandler.setInitialState(state);\n\n                    // return true: the state is restored\n                    return [true, mustLoadOnDemand];\n                }\n            }\n        };\n\n        const autoOpenNodes = (): boolean => {\n            // result: must load on demand?\n            if (this.options.autoOpen === false) {\n                return false;\n            }\n\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let mustLoadOnDemand = false;\n\n            this.tree.iterate((node: Node, level: number) => {\n                if (node.load_on_demand) {\n                    mustLoadOnDemand = true;\n                    return false;\n                } else if (!node.hasChildren()) {\n                    return false;\n                } else {\n                    node.is_open = true;\n                    return level !== maxLevel;\n                }\n            });\n\n            return mustLoadOnDemand;\n        };\n\n        let [isRestored, mustLoadOnDemand] = restoreState(); // eslint-disable-line prefer-const\n\n        if (!isRestored) {\n            mustLoadOnDemand = autoOpenNodes();\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    // Set the initial state for nodes that are loaded on demand\n    // Call cb_finished when done\n    private setInitialStateOnDemand(cbFinished: () => void): void {\n        const restoreState = (): boolean => {\n            if (!this.options.saveState) {\n                return false;\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return false;\n                } else {\n                    this.saveStateHandler.setInitialStateOnDemand(\n                        state,\n                        cbFinished,\n                    );\n\n                    return true;\n                }\n            }\n        };\n\n        const autoOpenNodes = (): void => {\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let loadingCount = 0;\n\n            const loadAndOpenNode = (node: Node): void => {\n                loadingCount += 1;\n                this._openNode(node, false, () => {\n                    loadingCount -= 1;\n                    openNodes();\n                });\n            };\n\n            const openNodes = (): void => {\n                this.tree.iterate((node: Node, level: number) => {\n                    if (node.load_on_demand) {\n                        if (!node.is_loading) {\n                            loadAndOpenNode(node);\n                        }\n\n                        return false;\n                    } else {\n                        this._openNode(node, false, null);\n\n                        return level !== maxLevel;\n                    }\n                });\n\n                if (loadingCount === 0) {\n                    cbFinished();\n                }\n            };\n\n            openNodes();\n        };\n\n        if (!restoreState()) {\n            autoOpenNodes();\n        }\n    }\n\n    private getAutoOpenMaxLevel(): number {\n        if (this.options.autoOpen === true) {\n            return -1;\n        } else if (typeof this.options.autoOpen === \"number\") {\n            return this.options.autoOpen;\n        } else if (typeof this.options.autoOpen === \"string\") {\n            return parseInt(this.options.autoOpen, 10);\n        } else {\n            return 0;\n        }\n    }\n\n    private handleClick = (\n        e: JQuery.ClickEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget) {\n            if (clickTarget.type === \"button\") {\n                this.toggle(clickTarget.node, this.options.slide);\n\n                e.preventDefault();\n                e.stopPropagation();\n            } else if (clickTarget.type === \"label\") {\n                const node = clickTarget.node;\n                const event = this._triggerEvent(\"tree.click\", {\n                    node,\n                    click_event: e,\n                });\n\n                if (!event.isDefaultPrevented()) {\n                    this.doSelectNode(node);\n                }\n            }\n        }\n    };\n\n    private handleDblclick = (\n        e: JQuery.DoubleClickEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget?.type === \"label\") {\n            this._triggerEvent(\"tree.dblclick\", {\n                node: clickTarget.node,\n                click_event: e,\n            });\n        }\n    };\n\n    private getClickTarget(element: EventTarget): ClickTarget | null {\n        const $target = jQuery(element);\n\n        const $button = $target.closest(\".jqtree-toggler\");\n\n        if ($button.length) {\n            const node = this.getNode($button as JQuery<HTMLElement>);\n\n            if (node) {\n                return {\n                    type: \"button\",\n                    node,\n                };\n            }\n        } else {\n            const $el = $target.closest(\".jqtree-element\");\n            if ($el.length) {\n                const node = this.getNode($el as JQuery<HTMLElement>);\n                if (node) {\n                    return {\n                        type: \"label\",\n                        node,\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    private getNode($element: JQuery<HTMLElement>): null | Node {\n        const $li = $element.closest(\"li.jqtree_common\");\n        if ($li.length === 0) {\n            return null;\n        } else {\n            return $li.data(\"node\") as Node;\n        }\n    }\n\n    private handleContextmenu = (\n        e: JQuery.ContextMenuEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ) => {\n        const $div = jQuery(e.target).closest(\"ul.jqtree-tree .jqtree-element\");\n        if ($div.length) {\n            const node = this.getNode($div);\n            if (node) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                this._triggerEvent(\"tree.contextmenu\", {\n                    node,\n                    click_event: e,\n                });\n                return false;\n            }\n        }\n\n        return null;\n    };\n\n    private saveState(): void {\n        if (this.options.saveState) {\n            this.saveStateHandler.saveState();\n        }\n    }\n\n    private selectCurrentNode(mustSetFocus: boolean): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            const nodeElement = this._getNodeElementForNode(node);\n            if (nodeElement) {\n                nodeElement.select(mustSetFocus);\n            }\n        }\n    }\n\n    private deselectCurrentNode(): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            this.removeFromSelection(node);\n        }\n    }\n\n    private getDefaultClosedIcon(): string {\n        if (this.options.rtl) {\n            // triangle to the left\n            return \"&#x25c0;\";\n        } else {\n            // triangle to the right\n            return \"&#x25ba;\";\n        }\n    }\n\n    private getRtlOption(): boolean {\n        if (this.options.rtl != null) {\n            return this.options.rtl;\n        } else {\n            const dataRtl = this.element.data(\"rtl\") as unknown;\n\n            if (\n                dataRtl !== null &&\n                dataRtl !== false &&\n                dataRtl !== undefined\n            ) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    private doSelectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): void {\n        const saveState = (): void => {\n            if (this.options.saveState) {\n                this.saveStateHandler.saveState();\n            }\n        };\n\n        if (!node) {\n            // Called with empty node -> deselect current node\n            this.deselectCurrentNode();\n            saveState();\n            return;\n        }\n        const defaultOptions = { mustSetFocus: true, mustToggle: true };\n        const selectOptions = { ...defaultOptions, ...(optionsParam || {}) };\n\n        const canSelect = (): boolean => {\n            if (this.options.onCanSelectNode) {\n                return (\n                    this.options.selectable === true &&\n                    this.options.onCanSelectNode(node)\n                );\n            } else {\n                return this.options.selectable === true;\n            }\n        };\n\n        const openParents = (): void => {\n            const parent = node.parent;\n\n            if (parent && parent.parent && !parent.is_open) {\n                this.openNode(parent, false);\n            }\n        };\n\n        if (!canSelect()) {\n            return;\n        }\n\n        if (this.selectNodeHandler.isNodeSelected(node)) {\n            if (selectOptions.mustToggle) {\n                this.deselectCurrentNode();\n                this._triggerEvent(\"tree.select\", {\n                    node: null,\n                    previous_node: node,\n                });\n            }\n        } else {\n            const deselectedNode = this.getSelectedNode() || null;\n            this.deselectCurrentNode();\n            this.addToSelection(node, selectOptions.mustSetFocus);\n\n            this._triggerEvent(\"tree.select\", {\n                node,\n                deselected_node: deselectedNode,\n            });\n            openParents();\n        }\n\n        saveState();\n    }\n\n    private doLoadData(data: NodeData[] | null, parentNode: Node | null): void {\n        if (data) {\n            if (parentNode) {\n                this.deselectNodes(parentNode);\n                this.loadSubtree(data, parentNode);\n            } else {\n                this.initTree(data);\n            }\n\n            if (this.isDragging()) {\n                this.dndHandler.refresh();\n            }\n        }\n\n        this._triggerEvent(\"tree.load_data\", {\n            tree_data: data,\n            parent_node: parentNode,\n        });\n    }\n\n    private deselectNodes(parentNode: Node): void {\n        const selectedNodesUnderParent =\n            this.selectNodeHandler.getSelectedNodesUnder(parentNode);\n        for (const n of selectedNodesUnderParent) {\n            this.selectNodeHandler.removeFromSelection(n);\n        }\n    }\n\n    private loadSubtree(data: NodeData[], parentNode: Node): void {\n        parentNode.loadFromData(data);\n\n        parentNode.load_on_demand = false;\n        parentNode.is_loading = false;\n\n        this._refreshElements(parentNode);\n    }\n\n    private doLoadDataFromUrl(\n        urlInfoParam: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null,\n    ): void {\n        const urlInfo = urlInfoParam || this.getDataUrlInfo(parentNode);\n\n        this.dataLoader.loadFromUrl(urlInfo, parentNode, onFinished);\n    }\n\n    private loadFolderOnDemand(\n        node: Node,\n        slide = true,\n        onFinished: OnFinishOpenNode | null,\n    ): void {\n        node.is_loading = true;\n\n        this.doLoadDataFromUrl(null, node, () => {\n            this._openNode(node, slide, onFinished);\n        });\n    }\n}\n\nSimpleWidget.register(JqTreeWidget, \"tree\");\n"],"names":["Position","positionNames","before","Before","after","After","inside","Inside","none","None","getPositionName","position","name","Object","prototype","hasOwnProperty","call","isNodeRecordWithChildren","data","_typeof","Array","Node","o","arguments","length","undefined","isRoot","nodeClass","_classCallCheck","_defineProperty","this","isEmptyFolder","load_on_demand","setData","children","parent","idMapping","Map","tree","_createClass","key","value","removeChildren","_step","_iterator","_createForOfIteratorHelper","s","n","done","node","createNode","addChild","loadFromData","err","e","f","push","setParent","index","splice","doRemoveChild","indexOf","hasChildren","callback","_iterate","level","_step2","_iterator2","child","movedNode","targetNode","isParentOf","addChildAtPosition","getChildIndex","getDataFromNodes","nodes","map","tmpNode","k","v","getNodeByCallback","concat","result","iterate","nodeInfo","childIndex","newParent","_step3","originalParent","_iterator3","removeChild","nodeId","get","id","set","_this","_this$tree","removeNodeFromIndex","previousIndex","nextIndex","filter","nextSibling","getNextSibling","getNextNode","is_open","previousSibling","getPreviousSibling","getLastChild","getParent","lastChild","nodeData","_this2","addChildren","childrenData","_step4","_iterator4","initFromData","_this$tree2","addNodeToIndex","_this$tree3","_this$tree4","getNodeClass","DragElement","nodeName","offsetX","offsetY","$tree","autoEscape","$element","jQuery","addClass","text","html","css","append","pageX","pageY","offset","left","top","remove","HitAreasGenerator","_VisibleNodeIterator","_inherits","_super","_createSuper","currentNode","treeBottom","_assertThisInitialized","positions","lastTop","generateHitAreas","previousTop","group","hitAreas","generateHitAreasForGroup","addPosition","getTop","nextNode","element","area","bottom","positionsInGroup","positionCount","Math","min","areaHeight","round","areaTop","i","VisibleNodeIterator","isFirstNode","_iterateNode","mustIterateInside","is","handleFirstNode","handleOpenFolder","handleClosedFolder","handleNode","childrenLength","forEach","_","nextChild","handleAfterOpenFolder","DragAndDropHandler","treeWidget","hoveredArea","isDragging","currentItem","positionInfo","target","mustCaptureElement","options","onIsMoveHandle","nodeElement","_getNodeElement","onCanMove","_this$treeWidget$opti","refresh","dragElement","classList","add","move","findHoveredArea","canMoveToArea","isFolder","stopOpenFolderTimer","mustOpenFolderTimer","startOpenFolderTimer","updateDropHint","removeDropHint","onDragMove","originalEvent","moveItem","clear","removeHover","removeHitAreas","onDragStop","_getNodeElementForNode","hitAreasGenerator","getTreeDimensions","generate","onCanMoveTo","positionName","previousGhost","x","y","dimensions","right","low","high","mid","addDropHint","folder","openFolderDelay","openFolderTimer","window","setTimeout","_openNode","slide","clearTimeout","previousParent","doMove","moveNode","empty","_refreshElements","_triggerEvent","move_info","moved_node","target_node","previous_parent","do_move","original_event","isDefaultPrevented","el","width","height","_getScrollLeft","getBoolString","ElementsRenderer","openedIconElement","createButtonElement","openedIcon","closedIconElement","closedIcon","fromNode","renderFromNode","renderFromRoot","createDomElements","$previousLi","li","createLi","getLevel","attachNodeData","isRootNode","ul","createUl","appendChild","classString","role","rtl","dragAndDrop","document","createElement","className","setAttribute","isSelected","Boolean","selectNodeHandler","isNodeSelected","showEmptyFolder","createFolderLi","createNodeLi","onCreateLi","buttonClasses","getButtonClasses","folderClasses","getFolderClasses","iconElement","div","buttonLink","cloneNode","buttonLeft","titleSpan","createTitleSpan","liClasses","join","classes","tabIndex","setTreeItemAriaAttributes","textContent","innerHTML","is_loading","createTextNode","nodeType","DataLoader","urlInfo","parentNode","onFinished","$el","getDomElement","addLoadingClass","notifyLoading","stopLoading","removeLoadingClass","submitRequest","loadData","parseData","jqXHR","onLoadFailed","removeClass","isLoading","onLoading","urlInfoInput","handleSuccess","handleError","_ajaxSettings$method","ajaxSettings","_objectSpread","method","cache","dataType","success","error","url","toUpperCase","ajax","dataFilter","parsedData","JSON","parse","KeyHandler","canHandleKeyboard","selectedNode","getSelectedNode","which","DOWN","moveDown","UP","moveUp","RIGHT","moveRight","LEFT","moveLeft","keyboardSupport","on","handleKeyDown","off","selectNode","getNextVisibleNode","getPreviousVisibleNode","openNode","closeNode","scrollHandler","isScrolledIntoView","find","scrollToNode","isFocusOnTree","register","widgetClass","widgetName","getDataKey","getWidgetData","dataKey","widget","SimpleWidget","createWidget","init","fn","argument1","functionName","destroy","removeData","destroyWidget","_len","args","_key","widgetFunction","apply","callFunction","defaults","constructor","deinit","getPositionInfoFromMouseEvent","getPositionInfoFromTouch","touch","MouseWidget","_SimpleWidget","button","handleMouseDown","cancelable","preventDefault","handleMouseMove","handleMouseUp","touches","changedTouches","addEventListener","mouseDown","passive","touchStart","isMouseStarted","mouseDelayTimer","isMouseDelayMet","mouseDownInfo","removeEventListener","removeMouseMoveEventListeners","mouseCapture","handleStartMouse","mouseMove","touchMove","mouseUp","touchEnd","mouseDelay","getMouseDelay","startMouseDelayTimer","mouseDrag","mouseStart","mouseStop","SaveStateHandler","state","stringify","getState","onSetStateFromStorage","supportsLocalStorage","localStorage","setItem","getKeyName","jsonData","loadFromStorage","parseState","selectedNodeIds","openNodes","open_nodes","selected_node","getSelectedNodes","mustLoadOnDemand","openInitialNodes","resetSelection","selectInitialNodes","cbFinished","doSetInitialStateOnDemand","getStateFromStorage","onGetStateFromStorage","getItem","nodeIds","getNodeById","selectCount","addToSelection","removeFromSelection","nodeIdsParam","selectedNodes","loadingCount","newNodesIds","loadAndOpenNode","saveState","_supportsLocalStorage","sessionStorage","removeItem","testSupport","ScrollHandler","isInitialized","ensureInit","checkVerticalScrolling","checkHorizontalScrolling","$scrollParent","scrollTop","treeTop","elementBottom","viewBottom","elementTop","viewTop","elHeight","scrollParentTop","scrollLeft","_$scrollParent$","setDocumentAsScrollParent","cssAttributes","hasOverFlow","_i","_cssAttributes","attr","overflowValue","parents","getParentWithOverflow","tagName","initScrollParent","scrollParent","offsetHeight","refreshHitAreas","dndHandler","handleVerticalScrollingWithScrollParent","handleVerticalScrollingWithDocument","handleHorizontalScrollingWithParent","handleHorizontalScrollingWithDocument","scrollParentOffset","canScrollRight","clientWidth","scrollWidth","canScrollLeft","rightEdge","leftEdge","isNearRightEdge","isNearLeftEdge","max","$document","windowWidth","SelectNodeHandler","Set","selectedSingleNode","has","includeChildren","activeElement","_containsElement","BorderDropHint","querySelector","offsetWidth","clientHeight","hint","style","_this$hint","GhostDropHint","ghost","createGhostElement","moveAfter","moveBefore","moveInsideOpenFolder","moveInside","_this$node$children$","childElement","circleSpan","lineSpan","NodeElement","mustShowBorderDropHint","mustSetFocus","getTitleSpan","toString","focus","removeAttribute","blur","FolderElement","_NodeElement","animationSpeed","getButton","renderer","icon","doOpen","getUl","slideDown","show","doClose","slideUp","hide","NODE_PARAM_IS_EMPTY","PARAM_IS_EMPTY","JqTreeWidget","_MouseWidget","clickTarget","getClickTarget","type","toggle","stopPropagation","click_event","doSelectNode","$div","closest","getNode","slideParam","Error","optionsParam","getData","doLoadData","param1","param2","param3","doLoadDataFromUrl","getNodeByName","getNodeByNameMustExist","getNodesByProperty","_parseParams","_this2$options$slide","parseParams","_parseParams2","_slicedToArray","close","newNodeInfo","existingNode","newNode","addAfter","addBefore","addParent","parentNodeParam","prepend","idIsChanged","subtree","positionIndex","saveStateHandler","select","deselect","nodeOffset","nodeTop","treeOffset","scrollToY","setInitialState","option","keyHandler","eventName","values","event","Event","trigger","_this3","doOpenNode","_node","_slide","_onFinished","open","loadFolderOnDemand","mustSelect","isSelectedNodeInSubtree","render","selectCurrentNode","getScrollLeft","_get","_getPrototypeOf","getRtlOption","getDefaultClosedIcon","dataLoader","initData","handleClick","handleDblclick","useContextMenu","handleContextmenu","checkScrolling","_this$options$startDn","startDndDelay","getDataUrlInfo","_this4","dataUrl","setUrlInfoData","selectedNodeId","getNodeIdToBeSelected","_this5","doInit","setInitialStateOnDemand","_this6","_restoreState2","restoreState","isRestored","autoOpen","maxLevel","getAutoOpenMaxLevel","autoOpenNodes","_this7","parseInt","$target","$button","$li","dataRtl","_this8","deselectCurrentNode","selectOptions","mustToggle","onCanSelectNode","selectable","previous_node","deselectedNode","deselected_node","deselectNodes","loadSubtree","initTree","tree_data","parent_node","getSelectedNodesUnder","urlInfoParam","loadFromUrl","_this9"],"mappings":"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"}