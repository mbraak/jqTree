{"version":3,"file":"tree.jquery.js","sources":["src/position.ts","src/dragAndDropHandler/dragElement.ts","src/util.ts","src/dragAndDropHandler/visibleNodeIterator.ts","src/dragAndDropHandler/hitAreasGenerator.ts","src/dragAndDropHandler/index.ts","src/elementsRenderer.ts","src/dataLoader.ts","src/keyHandler.ts","src/mouseHandler.ts","src/saveStateHandler.ts","src/scrollHandler/containerScrollParent.ts","src/scrollHandler/documentScrollParent.ts","src/scrollHandler/createScrollParent.ts","src/scrollHandler.ts","src/selectNodeHandler.ts","src/simple.widget.ts","src/nodeUtils.ts","src/node.ts","src/nodeElement/borderDropHint.ts","src/nodeElement/ghostDropHint.ts","src/nodeElement/index.ts","src/nodeElement/folderElement.ts","src/tree.jquery.ts","src/version.ts"],"sourcesContent":["export enum Position {\n    Before = 1,\n    After,\n    Inside,\n    None,\n}\n\nconst positionNames: Record<string, Position> = {\n    before: Position.Before,\n    after: Position.After,\n    inside: Position.Inside,\n    none: Position.None,\n};\n\nexport const getPositionName = (position: Position): string => {\n    for (const name in positionNames) {\n        if (Object.prototype.hasOwnProperty.call(positionNames, name)) {\n            if (positionNames[name] === position) {\n                return name;\n            }\n        }\n    }\n\n    return \"\";\n};\n\nexport const getPosition = (name: string): Position | undefined =>\n    positionNames[name];\n","interface DragElementParams {\n    autoEscape: boolean;\n    nodeName: string;\n    offsetX: number;\n    offsetY: number;\n    treeElement: HTMLElement;\n}\n\nclass DragElement {\n    private offsetX: number;\n    private offsetY: number;\n    private element: HTMLElement;\n\n    constructor({\n        autoEscape,\n        nodeName,\n        offsetX,\n        offsetY,\n        treeElement,\n    }: DragElementParams) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n\n        this.element = this.createElement(nodeName, autoEscape);\n\n        treeElement.appendChild(this.element);\n    }\n\n    public move(pageX: number, pageY: number): void {\n        this.element.style.left = `${pageX - this.offsetX}px`;\n        this.element.style.top = `${pageY - this.offsetY}px`;\n    }\n\n    public remove(): void {\n        this.element.remove();\n    }\n\n    private createElement(nodeName: string, autoEscape: boolean) {\n        const element = document.createElement(\"span\");\n        element.classList.add(\"jqtree-title\", \"jqtree-dragging\");\n\n        if (autoEscape) {\n            element.textContent = nodeName;\n        } else {\n            element.innerHTML = nodeName;\n        }\n\n        element.style.position = \"absolute\";\n\n        return element;\n    }\n}\n\nexport default DragElement;\n","export const isInt = (n: unknown): boolean =>\n    typeof n === \"number\" && n % 1 === 0;\n\nexport const isFunction = (v: unknown): boolean => typeof v === \"function\";\n\nexport const getBoolString = (value: unknown): string =>\n    value ? \"true\" : \"false\";\n\nexport const getOffsetTop = (element: HTMLElement) =>\n    getElementPosition(element).top;\n\nexport const getElementPosition = (element: HTMLElement) => {\n    const rect = element.getBoundingClientRect();\n\n    return {\n        left: rect.x + window.scrollX,\n        top: rect.y + window.scrollY,\n    };\n};\n","import { Node } from \"../node\";\n\nabstract class VisibleNodeIterator {\n    private tree: Node;\n\n    constructor(tree: Node) {\n        this.tree = tree;\n    }\n\n    protected iterate(): void {\n        let isFirstNode = true;\n\n        const _iterateNode = (node: Node, nextNode: Node | null): void => {\n            let mustIterateInside =\n                (node.is_open || !node.element) && node.hasChildren();\n\n            let element: HTMLElement | null = null;\n\n            // Is the element visible?\n            if (node.element?.offsetParent) {\n                element = node.element;\n\n                if (isFirstNode) {\n                    this.handleFirstNode(node);\n                    isFirstNode = false;\n                }\n\n                if (!node.hasChildren()) {\n                    this.handleNode(node, nextNode, node.element);\n                } else if (node.is_open) {\n                    if (!this.handleOpenFolder(node, node.element)) {\n                        mustIterateInside = false;\n                    }\n                } else {\n                    this.handleClosedFolder(node, nextNode, element);\n                }\n            }\n\n            if (mustIterateInside) {\n                const childrenLength = node.children.length;\n                node.children.forEach((_, i) => {\n                    const child = node.children[i];\n\n                    if (child) {\n                        if (i === childrenLength - 1) {\n                            _iterateNode(child, null);\n                        } else {\n                            const nextChild = node.children[i + 1];\n\n                            if (nextChild) {\n                                _iterateNode(child, nextChild);\n                            }\n                        }\n                    }\n                });\n\n                if (node.is_open && element) {\n                    this.handleAfterOpenFolder(node, nextNode);\n                }\n            }\n        };\n\n        _iterateNode(this.tree, null);\n    }\n\n    protected abstract handleNode(\n        node: Node,\n        nextNode: Node | null,\n        element: HTMLElement,\n    ): void;\n\n    /*\n    override\n    return\n        - true: continue iterating\n        - false: stop iterating\n    */\n    protected abstract handleOpenFolder(\n        node: Node,\n        element: HTMLElement,\n    ): boolean;\n\n    protected abstract handleClosedFolder(\n        node: Node,\n        nextNode: Node | null,\n        element: HTMLElement,\n    ): void;\n\n    protected abstract handleAfterOpenFolder(\n        node: Node,\n        nextNode: Node | null,\n    ): void;\n\n    protected abstract handleFirstNode(node: Node): void;\n}\n\nexport default VisibleNodeIterator;\n","import { HitArea } from \"./types\";\nimport { Node } from \"../node\";\nimport { Position } from \"../position\";\nimport { getOffsetTop } from \"../util\";\nimport VisibleNodeIterator from \"./visibleNodeIterator\";\n\nclass HitAreasGenerator extends VisibleNodeIterator {\n    private currentNode: Node;\n    private treeBottom: number;\n    private positions: HitArea[];\n    private lastTop: number;\n\n    constructor(tree: Node, currentNode: Node, treeBottom: number) {\n        super(tree);\n\n        this.currentNode = currentNode;\n        this.treeBottom = treeBottom;\n    }\n\n    public generate(): HitArea[] {\n        this.positions = [];\n        this.lastTop = 0;\n\n        this.iterate();\n\n        return this.generateHitAreas(this.positions);\n    }\n\n    protected generateHitAreas(positions: HitArea[]): HitArea[] {\n        let previousTop = positions[0]?.top ?? 0;\n        let group = [];\n        const hitAreas: HitArea[] = [];\n\n        for (const position of positions) {\n            if (position.top !== previousTop && group.length) {\n                this.generateHitAreasForGroup(\n                    hitAreas,\n                    group,\n                    previousTop,\n                    position.top,\n                );\n\n                previousTop = position.top;\n                group = [];\n            }\n\n            group.push(position);\n        }\n\n        this.generateHitAreasForGroup(\n            hitAreas,\n            group,\n            previousTop,\n            this.treeBottom,\n        );\n\n        return hitAreas;\n    }\n\n    protected handleOpenFolder(node: Node, element: HTMLElement): boolean {\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            // Stop iterating\n            return false;\n        }\n\n        // Cannot move before current item\n        if (node.children[0] !== this.currentNode) {\n            this.addPosition(node, Position.Inside, getOffsetTop(element));\n        }\n\n        // Continue iterating\n        return true;\n    }\n\n    protected handleClosedFolder(\n        node: Node,\n        nextNode: Node,\n        element: HTMLElement,\n    ): void {\n        const top = getOffsetTop(element);\n\n        if (node === this.currentNode) {\n            // Cannot move after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n\n            // Cannot move before current item\n            if (nextNode !== this.currentNode) {\n                this.addPosition(node, Position.After, top);\n            }\n        }\n    }\n\n    protected handleFirstNode(node: Node): void {\n        if (node !== this.currentNode) {\n            this.addPosition(node, Position.Before, getOffsetTop(node.element));\n        }\n    }\n\n    protected handleAfterOpenFolder(node: Node, nextNode: Node): void {\n        if (node === this.currentNode || nextNode === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, this.lastTop);\n        } else {\n            this.addPosition(node, Position.After, this.lastTop);\n        }\n    }\n\n    protected handleNode(\n        node: Node,\n        nextNode: Node,\n        element: HTMLElement,\n    ): void {\n        const top = getOffsetTop(element);\n\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n        }\n\n        if (nextNode === this.currentNode || node === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.After, top);\n        }\n    }\n\n    private addPosition(node: Node, position: number, top: number): void {\n        const area = {\n            top,\n            bottom: 0,\n            node,\n            position,\n        };\n\n        this.positions.push(area);\n        this.lastTop = top;\n    }\n\n    private generateHitAreasForGroup(\n        hitAreas: HitArea[],\n        positionsInGroup: HitArea[],\n        top: number,\n        bottom: number,\n    ): void {\n        // limit positions in group\n        const positionCount = Math.min(positionsInGroup.length, 4);\n\n        const areaHeight = Math.round((bottom - top) / positionCount);\n        let areaTop = top;\n\n        let i = 0;\n        while (i < positionCount) {\n            const position = positionsInGroup[i];\n\n            if (position) {\n                hitAreas.push({\n                    top: areaTop,\n                    bottom: areaTop + areaHeight,\n                    node: position.node,\n                    position: position.position,\n                });\n            }\n\n            areaTop += areaHeight;\n            i += 1;\n        }\n    }\n}\n\nexport default HitAreasGenerator;\n","import { Node } from \"../node\";\nimport { getPositionName, Position } from \"../position\";\nimport { DropHint, HitArea } from \"./types\";\nimport { PositionInfo } from \"../mouseWidgetTypes\";\nimport NodeElement from \"../nodeElement\";\nimport DragElement from \"./dragElement\";\nimport HitAreasGenerator from \"./hitAreasGenerator\";\nimport { getElementPosition } from \"../util\";\nimport {\n    OnCanMove,\n    OnCanMoveTo,\n    OnIsMoveHandle,\n    DragMethod,\n} from \"../jqtreeOptions\";\nimport {\n    GetScrollLeft,\n    GetTree,\n    OpenNode,\n    RefreshElements,\n    TriggerEvent,\n} from \"../jqtreeMethodTypes\";\n\ninterface Dimensions {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n}\n\ntype GetNodeElement = (element: HTMLElement) => NodeElement | null;\ntype GetNodeElementForNode = (node: Node) => NodeElement;\n\ninterface DragAndDropHandlerParams {\n    autoEscape?: boolean;\n    getNodeElement: GetNodeElement;\n    getNodeElementForNode: GetNodeElementForNode;\n    getScrollLeft: GetScrollLeft;\n    getTree: GetTree;\n    onCanMove?: OnCanMove;\n    onCanMoveTo?: OnCanMoveTo;\n    onDragMove?: DragMethod;\n    onDragStop?: DragMethod;\n    onIsMoveHandle?: OnIsMoveHandle;\n    openFolderDelay: number | false;\n    openNode: OpenNode;\n    refreshElements: RefreshElements;\n    slide: boolean;\n    treeElement: HTMLElement;\n    triggerEvent: TriggerEvent;\n}\n\nexport class DragAndDropHandler {\n    public hitAreas: HitArea[];\n    public isDragging: boolean;\n    public currentItem: NodeElement | null;\n    public hoveredArea: HitArea | null;\n\n    private autoEscape?: boolean;\n    private dragElement: DragElement | null;\n    private getNodeElement: GetNodeElement;\n    private getNodeElementForNode: GetNodeElementForNode;\n    private getScrollLeft: GetScrollLeft;\n    private getTree: GetTree;\n    private onCanMove?: OnCanMove;\n    private onCanMoveTo?: OnCanMoveTo;\n    private onDragMove?: DragMethod;\n    private onDragStop?: DragMethod;\n    private onIsMoveHandle?: OnIsMoveHandle;\n    private openFolderDelay: number | false;\n    private openFolderTimer: number | null;\n    private openNode: OpenNode;\n    private previousGhost: DropHint | null;\n    private refreshElements: RefreshElements;\n    private slide: boolean;\n    private treeElement: HTMLElement;\n    private triggerEvent: TriggerEvent;\n\n    constructor({\n        autoEscape,\n        getNodeElement,\n        getNodeElementForNode,\n        getScrollLeft,\n        getTree,\n        onCanMove,\n        onCanMoveTo,\n        onDragMove,\n        onDragStop,\n        onIsMoveHandle,\n        openNode,\n        refreshElements,\n        slide,\n        treeElement,\n        triggerEvent,\n    }: DragAndDropHandlerParams) {\n        this.autoEscape = autoEscape;\n        this.getNodeElement = getNodeElement;\n        this.getNodeElementForNode = getNodeElementForNode;\n        this.getScrollLeft = getScrollLeft;\n        this.getTree = getTree;\n        this.onCanMove = onCanMove;\n        this.onCanMoveTo = onCanMoveTo;\n        this.onDragMove = onDragMove;\n        this.onDragStop = onDragStop;\n        this.onIsMoveHandle = onIsMoveHandle;\n        this.openNode = openNode;\n        this.refreshElements = refreshElements;\n        this.slide = slide;\n        this.treeElement = treeElement;\n        this.triggerEvent = triggerEvent;\n\n        this.hoveredArea = null;\n        this.hitAreas = [];\n        this.isDragging = false;\n        this.currentItem = null;\n    }\n\n    public mouseCapture(positionInfo: PositionInfo): boolean | null {\n        const element = positionInfo.target;\n\n        if (!this.mustCaptureElement(element)) {\n            return null;\n        }\n\n        if (this.onIsMoveHandle && !this.onIsMoveHandle(jQuery(element))) {\n            return null;\n        }\n\n        let nodeElement = this.getNodeElement(element);\n\n        if (nodeElement && this.onCanMove) {\n            if (!this.onCanMove(nodeElement.node)) {\n                nodeElement = null;\n            }\n        }\n\n        this.currentItem = nodeElement;\n        return this.currentItem != null;\n    }\n\n    public mouseStart(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.refresh();\n\n        const { left, top } = getElementPosition(positionInfo.target);\n\n        const node = this.currentItem.node;\n\n        this.dragElement = new DragElement({\n            autoEscape: this.autoEscape ?? true,\n            nodeName: node.name,\n            offsetX: positionInfo.pageX - left,\n            offsetY: positionInfo.pageY - top,\n            treeElement: this.treeElement,\n        });\n\n        this.isDragging = true;\n        this.currentItem.element.classList.add(\"jqtree-moving\");\n\n        return true;\n    }\n\n    public mouseDrag(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            !this.dragElement ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.dragElement.move(positionInfo.pageX, positionInfo.pageY);\n\n        const area = this.findHoveredArea(\n            positionInfo.pageX,\n            positionInfo.pageY,\n        );\n\n        if (area && this.canMoveToArea(area)) {\n            if (!area.node.isFolder()) {\n                this.stopOpenFolderTimer();\n            }\n\n            if (this.hoveredArea !== area) {\n                this.hoveredArea = area;\n\n                // If this is a closed folder, start timer to open it\n                if (this.mustOpenFolderTimer(area)) {\n                    this.startOpenFolderTimer(area.node);\n                } else {\n                    this.stopOpenFolderTimer();\n                }\n\n                this.updateDropHint();\n            }\n        } else {\n            this.removeDropHint();\n            this.stopOpenFolderTimer();\n            this.hoveredArea = area;\n        }\n\n        if (!area) {\n            if (this.onDragMove) {\n                this.onDragMove(\n                    this.currentItem.node,\n                    positionInfo.originalEvent,\n                );\n            }\n        }\n\n        return true;\n    }\n\n    public mouseStop(positionInfo: PositionInfo): boolean {\n        this.moveItem(positionInfo);\n        this.clear();\n        this.removeHover();\n        this.removeDropHint();\n        this.removeHitAreas();\n\n        const currentItem = this.currentItem;\n\n        if (this.currentItem) {\n            this.currentItem.element.classList.remove(\"jqtree-moving\");\n            this.currentItem = null;\n        }\n\n        this.isDragging = false;\n\n        if (!this.hoveredArea && currentItem) {\n            if (this.onDragStop) {\n                this.onDragStop(currentItem.node, positionInfo.originalEvent);\n            }\n        }\n\n        return false;\n    }\n\n    public refresh(): void {\n        this.removeHitAreas();\n\n        if (this.currentItem) {\n            this.generateHitAreas();\n\n            this.currentItem = this.getNodeElementForNode(\n                this.currentItem.node,\n            );\n\n            if (this.isDragging) {\n                this.currentItem.element.classList.add(\"jqtree-moving\");\n            }\n        }\n    }\n\n    private generateHitAreas(): void {\n        const tree = this.getTree();\n\n        if (!this.currentItem || !tree) {\n            this.hitAreas = [];\n        } else {\n            const hitAreasGenerator = new HitAreasGenerator(\n                tree,\n                this.currentItem.node,\n                this.getTreeDimensions().bottom,\n            );\n            this.hitAreas = hitAreasGenerator.generate();\n        }\n    }\n\n    private mustCaptureElement(element: HTMLElement): boolean {\n        const nodeName = element.nodeName;\n\n        return (\n            nodeName !== \"INPUT\" &&\n            nodeName !== \"SELECT\" &&\n            nodeName !== \"TEXTAREA\"\n        );\n    }\n\n    private canMoveToArea(area: HitArea): boolean {\n        if (!this.onCanMoveTo) {\n            return true;\n        }\n\n        if (!this.currentItem) {\n            return false;\n        }\n\n        const positionName = getPositionName(area.position);\n\n        return this.onCanMoveTo(this.currentItem.node, area.node, positionName);\n    }\n\n    private removeHitAreas(): void {\n        this.hitAreas = [];\n    }\n\n    private clear(): void {\n        if (this.dragElement) {\n            this.dragElement.remove();\n            this.dragElement = null;\n        }\n    }\n\n    private removeDropHint(): void {\n        if (this.previousGhost) {\n            this.previousGhost.remove();\n        }\n    }\n\n    private removeHover(): void {\n        this.hoveredArea = null;\n    }\n\n    private findHoveredArea(x: number, y: number): HitArea | null {\n        const dimensions = this.getTreeDimensions();\n\n        if (\n            x < dimensions.left ||\n            y < dimensions.top ||\n            x > dimensions.right ||\n            y > dimensions.bottom\n        ) {\n            return null;\n        }\n\n        let low = 0;\n        let high = this.hitAreas.length;\n        while (low < high) {\n            const mid = (low + high) >> 1;\n            const area = this.hitAreas[mid];\n\n            if (!area) {\n                return null;\n            }\n\n            if (y < area.top) {\n                high = mid;\n            } else if (y > area.bottom) {\n                low = mid + 1;\n            } else {\n                return area;\n            }\n        }\n\n        return null;\n    }\n\n    private mustOpenFolderTimer(area: HitArea): boolean {\n        const node = area.node;\n\n        return (\n            node.isFolder() &&\n            !node.is_open &&\n            area.position === Position.Inside\n        );\n    }\n\n    private updateDropHint(): void {\n        if (!this.hoveredArea) {\n            return;\n        }\n\n        // remove previous drop hint\n        this.removeDropHint();\n\n        // add new drop hint\n        const nodeElement = this.getNodeElementForNode(this.hoveredArea.node);\n        this.previousGhost = nodeElement.addDropHint(this.hoveredArea.position);\n    }\n\n    private startOpenFolderTimer(folder: Node): void {\n        const openFolder = (): void => {\n            this.openNode(folder, this.slide, () => {\n                this.refresh();\n                this.updateDropHint();\n            });\n        };\n\n        this.stopOpenFolderTimer();\n\n        const openFolderDelay = this.openFolderDelay;\n\n        if (openFolderDelay !== false) {\n            this.openFolderTimer = window.setTimeout(\n                openFolder,\n                openFolderDelay,\n            );\n        }\n    }\n\n    private stopOpenFolderTimer(): void {\n        if (this.openFolderTimer) {\n            clearTimeout(this.openFolderTimer);\n            this.openFolderTimer = null;\n        }\n    }\n\n    private moveItem(positionInfo: PositionInfo): void {\n        if (\n            this.currentItem &&\n            this.hoveredArea &&\n            this.hoveredArea.position !== Position.None &&\n            this.canMoveToArea(this.hoveredArea)\n        ) {\n            const movedNode = this.currentItem.node;\n            const targetNode = this.hoveredArea.node;\n            const position = this.hoveredArea.position;\n            const previousParent = movedNode.parent;\n\n            if (position === Position.Inside) {\n                this.hoveredArea.node.is_open = true;\n            }\n\n            const doMove = (): void => {\n                const tree = this.getTree();\n\n                if (tree) {\n                    tree.moveNode(movedNode, targetNode, position);\n\n                    this.treeElement.textContent = \"\";\n                    this.refreshElements(null);\n                }\n            };\n\n            const event = this.triggerEvent(\"tree.move\", {\n                move_info: {\n                    moved_node: movedNode,\n                    target_node: targetNode,\n                    position: getPositionName(position),\n                    previous_parent: previousParent,\n                    do_move: doMove,\n                    original_event: positionInfo.originalEvent,\n                },\n            });\n\n            if (!event.isDefaultPrevented()) {\n                doMove();\n            }\n        }\n    }\n\n    private getTreeDimensions(): Dimensions {\n        // Return the dimensions of the tree. Add a margin to the bottom to allow\n        // to drag-and-drop after the last element.\n        const treePosition = getElementPosition(this.treeElement);\n        const left = treePosition.left + this.getScrollLeft();\n        const top = treePosition.top;\n\n        return {\n            left,\n            top,\n            right: left + this.treeElement.clientWidth,\n            bottom: top + this.treeElement.clientHeight + 16,\n        };\n    }\n}\n","import { getBoolString } from \"./util\";\nimport { Node } from \"./node\";\nimport { IconElement, OnCreateLi } from \"./jqtreeOptions\";\nimport { GetTree, IsNodeSelected } from \"./jqtreeMethodTypes\";\n\ninterface ElementsRendererParams {\n    autoEscape: boolean;\n    buttonLeft: boolean;\n    closedIcon?: IconElement;\n    dragAndDrop: boolean;\n    $element: JQuery<HTMLElement>;\n    getTree: GetTree;\n    isNodeSelected: IsNodeSelected;\n    onCreateLi?: OnCreateLi;\n    openedIcon?: IconElement;\n    rtl?: boolean;\n    showEmptyFolder: boolean;\n    tabIndex?: number;\n}\n\nexport default class ElementsRenderer {\n    public openedIconElement?: HTMLElement | Text;\n    public closedIconElement?: HTMLElement | Text;\n    private autoEscape: boolean;\n    private buttonLeft: boolean;\n    private dragAndDrop: boolean;\n    private $element: JQuery<HTMLElement>;\n    private getTree: GetTree;\n    private isNodeSelected: IsNodeSelected;\n    private onCreateLi?: OnCreateLi;\n    private rtl?: boolean;\n    private showEmptyFolder: boolean;\n    private tabIndex?: number;\n\n    constructor({\n        autoEscape,\n        buttonLeft,\n        closedIcon,\n        onCreateLi,\n        dragAndDrop,\n        $element,\n        getTree,\n        isNodeSelected,\n        openedIcon,\n        rtl,\n        showEmptyFolder,\n        tabIndex,\n    }: ElementsRendererParams) {\n        this.autoEscape = autoEscape;\n        this.buttonLeft = buttonLeft;\n        this.dragAndDrop = dragAndDrop;\n        this.$element = $element;\n        this.getTree = getTree;\n        this.isNodeSelected = isNodeSelected;\n        this.onCreateLi = onCreateLi;\n        this.rtl = rtl;\n        this.showEmptyFolder = showEmptyFolder;\n        this.tabIndex = tabIndex;\n        this.openedIconElement = this.createButtonElement(openedIcon || \"+\");\n        this.closedIconElement = this.createButtonElement(closedIcon || \"-\");\n    }\n\n    public render(fromNode: Node | null): void {\n        if (fromNode && fromNode.parent) {\n            this.renderFromNode(fromNode);\n        } else {\n            this.renderFromRoot();\n        }\n    }\n\n    public renderFromRoot(): void {\n        this.$element.empty();\n\n        const tree = this.getTree();\n\n        if (this.$element[0] && tree) {\n            this.createDomElements(this.$element[0], tree.children, true, 1);\n        }\n    }\n\n    public renderFromNode(node: Node): void {\n        // remember current li\n        const $previousLi = jQuery(node.element);\n\n        // create element\n        const li = this.createLi(node, node.getLevel());\n        this.attachNodeData(node, li);\n\n        // add element to dom\n        $previousLi.after(li);\n\n        // remove previous li\n        $previousLi.remove();\n\n        // create children\n        if (node.children) {\n            this.createDomElements(\n                li,\n                node.children,\n                false,\n                node.getLevel() + 1,\n            );\n        }\n    }\n\n    private createDomElements(\n        element: Element,\n        children: Node[],\n        isRootNode: boolean,\n        level: number,\n    ): void {\n        const ul = this.createUl(isRootNode);\n        element.appendChild(ul);\n\n        for (const child of children) {\n            const li = this.createLi(child, level);\n            ul.appendChild(li);\n\n            this.attachNodeData(child, li);\n\n            if (child.hasChildren()) {\n                this.createDomElements(li, child.children, false, level + 1);\n            }\n        }\n    }\n\n    private attachNodeData(node: Node, li: HTMLElement): void {\n        node.element = li;\n        jQuery(li).data(\"node\", node);\n    }\n\n    private createUl(isRootNode: boolean): HTMLUListElement {\n        let classString;\n        let role;\n\n        if (!isRootNode) {\n            classString = \"\";\n            role = \"group\";\n        } else {\n            classString = \"jqtree-tree\";\n            role = \"tree\";\n\n            if (this.rtl) {\n                classString += \" jqtree-rtl\";\n            }\n        }\n\n        if (this.dragAndDrop) {\n            classString += \" jqtree-dnd\";\n        }\n\n        const ul = document.createElement(\"ul\");\n        ul.className = `jqtree_common ${classString}`;\n\n        ul.setAttribute(\"role\", role);\n\n        return ul;\n    }\n\n    private createLi(node: Node, level: number): HTMLLIElement {\n        const isSelected = Boolean(this.isNodeSelected(node));\n\n        const mustShowFolder =\n            node.isFolder() || (node.isEmptyFolder && this.showEmptyFolder);\n\n        const li = mustShowFolder\n            ? this.createFolderLi(node, level, isSelected)\n            : this.createNodeLi(node, level, isSelected);\n\n        if (this.onCreateLi) {\n            this.onCreateLi(node, jQuery(li), isSelected);\n        }\n\n        return li;\n    }\n\n    private setTreeItemAriaAttributes(\n        element: HTMLElement,\n        name: string,\n        level: number,\n        isSelected: boolean,\n    ) {\n        element.setAttribute(\"aria-label\", name);\n        element.setAttribute(\"aria-level\", `${level}`);\n        element.setAttribute(\"aria-selected\", getBoolString(isSelected));\n        element.setAttribute(\"role\", \"treeitem\");\n    }\n\n    private createFolderLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const buttonClasses = this.getButtonClasses(node);\n        const folderClasses = this.getFolderClasses(node, isSelected);\n\n        const iconElement = node.is_open\n            ? this.openedIconElement\n            : this.closedIconElement;\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = `jqtree_common ${folderClasses}`;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // button link\n        const buttonLink = document.createElement(\"a\");\n        buttonLink.className = buttonClasses;\n\n        if (iconElement) {\n            buttonLink.appendChild(iconElement.cloneNode(true));\n        }\n\n        if (this.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            true,\n            level,\n        );\n        titleSpan.setAttribute(\"aria-expanded\", getBoolString(node.is_open));\n        div.appendChild(titleSpan);\n\n        if (!this.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        return li;\n    }\n\n    private createNodeLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const liClasses = [\"jqtree_common\"];\n\n        if (isSelected) {\n            liClasses.push(\"jqtree-selected\");\n        }\n\n        const classString = liClasses.join(\" \");\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = classString;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            false,\n            level,\n        );\n        div.appendChild(titleSpan);\n\n        return li;\n    }\n\n    private createTitleSpan(\n        nodeName: string,\n        isSelected: boolean,\n        isFolder: boolean,\n        level: number,\n    ): HTMLSpanElement {\n        const titleSpan = document.createElement(\"span\");\n\n        let classes = \"jqtree-title jqtree_common\";\n\n        if (isFolder) {\n            classes += \" jqtree-title-folder\";\n        }\n\n        classes += ` jqtree-title-button-${this.buttonLeft ? \"left\" : \"right\"}`;\n\n        titleSpan.className = classes;\n\n        if (isSelected) {\n            const tabIndex = this.tabIndex;\n\n            if (tabIndex !== undefined) {\n                titleSpan.setAttribute(\"tabindex\", `${tabIndex}`);\n            }\n        }\n\n        this.setTreeItemAriaAttributes(titleSpan, nodeName, level, isSelected);\n\n        if (this.autoEscape) {\n            titleSpan.textContent = nodeName;\n        } else {\n            titleSpan.innerHTML = nodeName;\n        }\n\n        return titleSpan;\n    }\n\n    private getButtonClasses(node: Node): string {\n        const classes = [\"jqtree-toggler\", \"jqtree_common\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (this.buttonLeft) {\n            classes.push(\"jqtree-toggler-left\");\n        } else {\n            classes.push(\"jqtree-toggler-right\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private getFolderClasses(node: Node, isSelected: boolean): string {\n        const classes = [\"jqtree-folder\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (isSelected) {\n            classes.push(\"jqtree-selected\");\n        }\n\n        if (node.is_loading) {\n            classes.push(\"jqtree-loading\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private createButtonElement(\n        value: IconElement,\n    ): HTMLElement | Text | undefined {\n        if (typeof value === \"string\") {\n            // convert value to html\n            const div = document.createElement(\"div\");\n            div.innerHTML = value;\n\n            return document.createTextNode(div.innerHTML);\n        } else if (value == null) {\n            return undefined;\n        } else if ((value as HTMLElement).nodeType) {\n            return value as HTMLElement;\n        } else {\n            return jQuery(value)[0];\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { DataFilter, OnLoadFailed, OnLoading } from \"./jqtreeOptions\";\nimport { LoadData, TriggerEvent } from \"./jqtreeMethodTypes\";\n\nexport type HandleFinishedLoading = () => void;\n\ninterface DataLoaderParams {\n    dataFilter?: DataFilter;\n    loadData: LoadData;\n    onLoadFailed?: OnLoadFailed;\n    onLoading?: OnLoading;\n    $treeElement: JQuery<HTMLElement>;\n    triggerEvent: TriggerEvent;\n}\n\nexport default class DataLoader {\n    private dataFilter?: DataFilter;\n    private loadData: LoadData;\n    private onLoadFailed?: OnLoadFailed;\n    private onLoading?: OnLoading;\n    private $treeElement: JQuery<HTMLElement>;\n    private triggerEvent: TriggerEvent;\n\n    constructor({\n        dataFilter,\n        loadData,\n        onLoadFailed,\n        onLoading,\n        $treeElement,\n        triggerEvent,\n    }: DataLoaderParams) {\n        this.dataFilter = dataFilter;\n        this.loadData = loadData;\n        this.onLoadFailed = onLoadFailed;\n        this.onLoading = onLoading;\n        this.$treeElement = $treeElement;\n        this.triggerEvent = triggerEvent;\n    }\n\n    public loadFromUrl(\n        urlInfo: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null,\n    ): void {\n        if (!urlInfo) {\n            return;\n        }\n\n        const $el = this.getDomElement(parentNode);\n        this.addLoadingClass($el);\n        this.notifyLoading(true, parentNode, $el);\n\n        const stopLoading = (): void => {\n            this.removeLoadingClass($el);\n            this.notifyLoading(false, parentNode, $el);\n        };\n\n        const handleSuccess = (data: string | NodeData[]): void => {\n            stopLoading();\n            this.loadData(this.parseData(data), parentNode);\n\n            if (onFinished && typeof onFinished === \"function\") {\n                onFinished();\n            }\n        };\n\n        const handleError = (jqXHR: JQuery.jqXHR): void => {\n            stopLoading();\n\n            if (this.onLoadFailed) {\n                this.onLoadFailed(jqXHR);\n            }\n        };\n\n        this.submitRequest(urlInfo, handleSuccess, handleError);\n    }\n\n    private addLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.addClass(\"jqtree-loading\");\n        }\n    }\n\n    private removeLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.removeClass(\"jqtree-loading\");\n        }\n    }\n\n    private getDomElement(parentNode: Node | null): JQuery<HTMLElement> {\n        if (parentNode) {\n            return jQuery(parentNode.element);\n        } else {\n            return this.$treeElement;\n        }\n    }\n\n    private notifyLoading(\n        isLoading: boolean,\n        node: Node | null,\n        $el: JQuery,\n    ): void {\n        if (this.onLoading) {\n            this.onLoading(isLoading, node, $el);\n        }\n\n        this.triggerEvent(\"tree.loading_data\", {\n            isLoading,\n            node,\n            $el,\n        });\n    }\n\n    private submitRequest(\n        urlInfoInput: string | JQuery.AjaxSettings,\n        handleSuccess: JQuery.Ajax.SuccessCallback<any>,\n        handleError: JQuery.Ajax.ErrorCallback<any>,\n    ): void {\n        const urlInfo =\n            typeof urlInfoInput === \"string\"\n                ? { url: urlInfoInput }\n                : urlInfoInput;\n\n        const ajaxSettings: JQuery.AjaxSettings = {\n            method: \"GET\",\n            cache: false,\n            dataType: \"json\",\n            success: handleSuccess,\n            error: handleError,\n            ...urlInfo,\n        };\n\n        ajaxSettings.method = ajaxSettings.method?.toUpperCase() || \"GET\";\n\n        void jQuery.ajax(ajaxSettings);\n    }\n\n    private parseData(data: string | NodeData[]): NodeData[] {\n        const getParsedData = () => {\n            if (typeof data === \"string\") {\n                return JSON.parse(data) as NodeData[];\n            } else {\n                return data;\n            }\n        };\n\n        const parsedData = getParsedData();\n\n        if (this.dataFilter) {\n            return this.dataFilter(parsedData);\n        } else {\n            return parsedData;\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport {\n    CloseNode,\n    GetSelectedNode,\n    IsFocusOnTree,\n    OpenNode,\n    SelectNode,\n} from \"./jqtreeMethodTypes\";\n\ntype KeyboardEventHandler = (event: KeyboardEvent) => boolean;\n\ninterface KeyHandlerParams {\n    closeNode: CloseNode;\n    getSelectedNode: GetSelectedNode;\n    isFocusOnTree: IsFocusOnTree;\n    keyboardSupport: boolean;\n    openNode: OpenNode;\n    selectNode: SelectNode;\n}\n\nexport default class KeyHandler {\n    private closeNode: CloseNode;\n    private getSelectedNode: GetSelectedNode;\n    private handleKeyDownHandler?: KeyboardEventHandler;\n    private isFocusOnTree: IsFocusOnTree;\n    private keyboardSupport: boolean;\n    private openNode: OpenNode;\n    private originalSelectNode: SelectNode;\n\n    constructor({\n        closeNode,\n        getSelectedNode,\n        isFocusOnTree,\n        keyboardSupport,\n        openNode,\n        selectNode,\n    }: KeyHandlerParams) {\n        this.closeNode = closeNode;\n        this.getSelectedNode = getSelectedNode;\n        this.isFocusOnTree = isFocusOnTree;\n        this.keyboardSupport = keyboardSupport;\n        this.openNode = openNode;\n        this.originalSelectNode = selectNode;\n\n        if (keyboardSupport) {\n            this.handleKeyDownHandler = this.handleKeyDown.bind(this);\n\n            document.addEventListener(\"keydown\", this.handleKeyDownHandler);\n        }\n    }\n\n    public deinit(): void {\n        if (this.handleKeyDownHandler) {\n            document.removeEventListener(\"keydown\", this.handleKeyDownHandler);\n        }\n    }\n\n    public moveDown(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getNextVisibleNode());\n    }\n\n    public moveUp(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getPreviousVisibleNode());\n    }\n\n    public moveRight(selectedNode: Node): boolean {\n        if (!selectedNode.isFolder()) {\n            return true;\n        } else {\n            // folder node\n            if (selectedNode.is_open) {\n                // Right moves to the first child of an open node\n                return this.selectNode(selectedNode.getNextVisibleNode());\n            } else {\n                // Right expands a closed node\n                this.openNode(selectedNode);\n                return false;\n            }\n        }\n    }\n\n    public moveLeft(selectedNode: Node): boolean {\n        if (selectedNode.isFolder() && selectedNode.is_open) {\n            // Left on an open node closes the node\n            this.closeNode(selectedNode);\n            return false;\n        } else {\n            // Left on a closed or end node moves focus to the node's parent\n            return this.selectNode(selectedNode.getParent());\n        }\n    }\n\n    public selectNode(node: Node | null): boolean {\n        if (!node) {\n            return true;\n        } else {\n            this.originalSelectNode(node);\n\n            return false;\n        }\n    }\n\n    private handleKeyDown = (e: KeyboardEvent): boolean => {\n        if (!this.canHandleKeyboard()) {\n            return true;\n        }\n\n        const selectedNode = this.getSelectedNode();\n        if (!selectedNode) {\n            return true;\n        }\n\n        switch (e.key) {\n            case \"ArrowDown\":\n                return this.moveDown(selectedNode);\n\n            case \"ArrowUp\":\n                return this.moveUp(selectedNode);\n\n            case \"ArrowRight\":\n                return this.moveRight(selectedNode);\n\n            case \"ArrowLeft\":\n                return this.moveLeft(selectedNode);\n\n            default:\n                return true;\n        }\n    };\n\n    private canHandleKeyboard(): boolean {\n        return this.keyboardSupport && this.isFocusOnTree();\n    }\n}\n","import { PositionInfo } from \"./mouseWidgetTypes\";\n\nconst getPositionInfoFromMouseEvent = (e: MouseEvent): PositionInfo => ({\n    originalEvent: e,\n    pageX: e.pageX,\n    pageY: e.pageY,\n    target: e.target as HTMLElement,\n});\n\nconst getPositionInfoFromTouch = (\n    touch: Touch,\n    e: TouchEvent,\n): PositionInfo => ({\n    originalEvent: e,\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    target: touch.target as HTMLElement,\n});\n\ninterface MouseHandlerParams {\n    element: HTMLElement;\n    getMouseDelay: () => number;\n    onMouseCapture: (positionInfo: PositionInfo) => boolean | null;\n    onMouseDrag: (positionInfo: PositionInfo) => void;\n    onMouseStart: (positionInfo: PositionInfo) => boolean;\n    onMouseStop: (positionInfo: PositionInfo) => void;\n}\n\nclass MouseHandler {\n    private element: HTMLElement;\n    private getMouseDelay: () => number;\n    private isMouseDelayMet: boolean;\n    private isMouseStarted: boolean;\n    private mouseDelayTimer: number | null;\n    private mouseDownInfo: PositionInfo | null;\n    private onMouseCapture: (positionInfo: PositionInfo) => boolean | null;\n    private onMouseDrag: (positionInfo: PositionInfo) => void;\n    private onMouseStart: (positionInfo: PositionInfo) => boolean;\n    private onMouseStop: (positionInfo: PositionInfo) => void;\n\n    constructor({\n        element,\n        getMouseDelay,\n        onMouseCapture,\n        onMouseDrag,\n        onMouseStart,\n        onMouseStop,\n    }: MouseHandlerParams) {\n        this.element = element;\n        this.getMouseDelay = getMouseDelay;\n        this.onMouseCapture = onMouseCapture;\n        this.onMouseDrag = onMouseDrag;\n        this.onMouseStart = onMouseStart;\n        this.onMouseStop = onMouseStop;\n\n        element.addEventListener(\"mousedown\", this.mouseDown, {\n            passive: false,\n        });\n        element.addEventListener(\"touchstart\", this.touchStart, {\n            passive: false,\n        });\n\n        this.isMouseStarted = false;\n        this.mouseDelayTimer = null;\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n    }\n\n    public deinit(): void {\n        this.element.removeEventListener(\"mousedown\", this.mouseDown);\n        this.element.removeEventListener(\"touchstart\", this.touchStart);\n        this.removeMouseMoveEventListeners();\n    }\n\n    private mouseDown = (e: MouseEvent): void => {\n        // Left mouse button?\n        if (e.button !== 0) {\n            return;\n        }\n\n        const result = this.handleMouseDown(getPositionInfoFromMouseEvent(e));\n\n        if (result && e.cancelable) {\n            e.preventDefault();\n        }\n    };\n\n    private handleMouseDown(positionInfo: PositionInfo): boolean {\n        // We may have missed mouseup (out of window)\n        if (this.isMouseStarted) {\n            this.handleMouseUp(positionInfo);\n        }\n\n        this.mouseDownInfo = positionInfo;\n\n        if (!this.onMouseCapture(positionInfo)) {\n            return false;\n        }\n\n        this.handleStartMouse();\n\n        return true;\n    }\n\n    private handleStartMouse(): void {\n        document.addEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        document.addEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        document.addEventListener(\"mouseup\", this.mouseUp, { passive: false });\n        document.addEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n\n        const mouseDelay = this.getMouseDelay();\n\n        if (mouseDelay) {\n            this.startMouseDelayTimer(mouseDelay);\n        } else {\n            this.isMouseDelayMet = true;\n        }\n    }\n\n    private startMouseDelayTimer(mouseDelay: number): void {\n        if (this.mouseDelayTimer) {\n            clearTimeout(this.mouseDelayTimer);\n        }\n\n        this.mouseDelayTimer = window.setTimeout(() => {\n            if (this.mouseDownInfo) {\n                this.isMouseDelayMet = true;\n            }\n        }, mouseDelay);\n\n        this.isMouseDelayMet = false;\n    }\n\n    private mouseMove = (e: MouseEvent): void => {\n        this.handleMouseMove(e, getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseMove(\n        e: MouseEvent | TouchEvent,\n        positionInfo: PositionInfo,\n    ): void {\n        if (this.isMouseStarted) {\n            this.onMouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n            return;\n        }\n\n        if (!this.isMouseDelayMet) {\n            return;\n        }\n\n        if (this.mouseDownInfo) {\n            this.isMouseStarted =\n                this.onMouseStart(this.mouseDownInfo) !== false;\n        }\n\n        if (this.isMouseStarted) {\n            this.onMouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n        } else {\n            this.handleMouseUp(positionInfo);\n        }\n    }\n\n    private mouseUp = (e: MouseEvent): void => {\n        this.handleMouseUp(getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseUp(positionInfo: PositionInfo): void {\n        this.removeMouseMoveEventListeners();\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n\n        if (this.isMouseStarted) {\n            this.isMouseStarted = false;\n            this.onMouseStop(positionInfo);\n        }\n    }\n\n    private removeMouseMoveEventListeners() {\n        document.removeEventListener(\"mousemove\", this.mouseMove);\n        document.removeEventListener(\"touchmove\", this.touchMove);\n        document.removeEventListener(\"mouseup\", this.mouseUp);\n        document.removeEventListener(\"touchend\", this.touchEnd);\n    }\n\n    private touchStart = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseDown(getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchMove = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseMove(e, getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchEnd = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseUp(getPositionInfoFromTouch(touch, e));\n    };\n}\n\nexport default MouseHandler;\n","import { isInt } from \"./util\";\nimport { Node } from \"./node\";\nimport { OnGetStateFromStorage, OnSetStateFromStorage } from \"./jqtreeOptions\";\nimport {\n    AddToSelection,\n    GetNodeById,\n    GetSelectedNodes,\n    GetTree,\n    OpenNode,\n    RefreshElements,\n    RemoveFromSelection,\n} from \"./jqtreeMethodTypes\";\n\nexport interface SavedState {\n    open_nodes: NodeId[];\n    selected_node: NodeId[];\n}\n\ninterface SaveStateHandlerParams {\n    addToSelection: AddToSelection;\n    getNodeById: GetNodeById;\n    getSelectedNodes: GetSelectedNodes;\n    getTree: GetTree;\n    onGetStateFromStorage?: OnGetStateFromStorage;\n    onSetStateFromStorage?: OnSetStateFromStorage;\n    openNode: OpenNode;\n    refreshElements: RefreshElements;\n    removeFromSelection: RemoveFromSelection;\n    saveState: boolean | string;\n}\n\nexport default class SaveStateHandler {\n    private addToSelection: AddToSelection;\n    private getNodeById: GetNodeById;\n    private getSelectedNodes: GetSelectedNodes;\n    private getTree: GetTree;\n    private onGetStateFromStorage?: OnGetStateFromStorage;\n    private onSetStateFromStorage?: OnSetStateFromStorage;\n    private openNode: OpenNode;\n    private refreshElements: RefreshElements;\n    private removeFromSelection: RemoveFromSelection;\n    private saveStateOption: boolean | string;\n    private _supportsLocalStorage: boolean | null;\n\n    constructor({\n        addToSelection,\n        getNodeById,\n        getSelectedNodes,\n        getTree,\n        onGetStateFromStorage,\n        onSetStateFromStorage,\n        openNode,\n        refreshElements,\n        removeFromSelection,\n        saveState,\n    }: SaveStateHandlerParams) {\n        this.addToSelection = addToSelection;\n        this.getNodeById = getNodeById;\n        this.getSelectedNodes = getSelectedNodes;\n        this.getTree = getTree;\n        this.onGetStateFromStorage = onGetStateFromStorage;\n        this.onSetStateFromStorage = onSetStateFromStorage;\n        this.openNode = openNode;\n        this.refreshElements = refreshElements;\n        this.removeFromSelection = removeFromSelection;\n        this.saveStateOption = saveState;\n    }\n\n    public saveState(): void {\n        const state = JSON.stringify(this.getState());\n\n        if (this.onSetStateFromStorage) {\n            this.onSetStateFromStorage(state);\n        } else if (this.supportsLocalStorage()) {\n            localStorage.setItem(this.getKeyName(), state);\n        }\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        const jsonData = this.loadFromStorage();\n\n        if (jsonData) {\n            return this.parseState(jsonData) as unknown as SavedState;\n        } else {\n            return null;\n        }\n    }\n\n    public getState(): SavedState {\n        const getOpenNodeIds = (): NodeId[] => {\n            const openNodes: NodeId[] = [];\n\n            this.getTree()?.iterate((node: Node) => {\n                if (node.is_open && node.id && node.hasChildren()) {\n                    openNodes.push(node.id);\n                }\n                return true;\n            });\n\n            return openNodes;\n        };\n\n        const getSelectedNodeIds = (): NodeId[] => {\n            const selectedNodeIds: NodeId[] = [];\n\n            this.getSelectedNodes().forEach((node) => {\n                if (node.id != null) {\n                    selectedNodeIds.push(node.id);\n                }\n            });\n\n            return selectedNodeIds;\n        };\n\n        return {\n            open_nodes: getOpenNodeIds(),\n            selected_node: getSelectedNodeIds(),\n        };\n    }\n\n    /*\n    Set initial state\n    Don't handle nodes that are loaded on demand\n\n    result: must load on demand\n    */\n    public setInitialState(state: SavedState): boolean {\n        if (!state) {\n            return false;\n        } else {\n            let mustLoadOnDemand = false;\n\n            if (state.open_nodes) {\n                mustLoadOnDemand = this.openInitialNodes(state.open_nodes);\n            }\n\n            if (state.selected_node) {\n                this.resetSelection();\n                this.selectInitialNodes(state.selected_node);\n            }\n\n            return mustLoadOnDemand;\n        }\n    }\n\n    public setInitialStateOnDemand(\n        state: SavedState,\n        cbFinished: () => void,\n    ): void {\n        if (state) {\n            this.doSetInitialStateOnDemand(\n                state.open_nodes,\n                state.selected_node,\n                cbFinished,\n            );\n        } else {\n            cbFinished();\n        }\n    }\n\n    public getNodeIdToBeSelected(): NodeId | null {\n        const state = this.getStateFromStorage();\n\n        if (state && state.selected_node) {\n            return state.selected_node[0] || null;\n        } else {\n            return null;\n        }\n    }\n\n    private parseState(jsonData: string): SavedState {\n        const state = JSON.parse(jsonData) as Record<string, unknown>;\n\n        // Check if selected_node is an int (instead of an array)\n        if (state && state.selected_node && isInt(state.selected_node)) {\n            // Convert to array\n            state.selected_node = [state.selected_node];\n        }\n\n        return state as unknown as SavedState;\n    }\n\n    private loadFromStorage(): string | null {\n        if (this.onGetStateFromStorage) {\n            return this.onGetStateFromStorage();\n        } else if (this.supportsLocalStorage()) {\n            return localStorage.getItem(this.getKeyName());\n        } else {\n            return null;\n        }\n    }\n\n    private openInitialNodes(nodeIds: NodeId[]): boolean {\n        let mustLoadOnDemand = false;\n\n        for (const nodeId of nodeIds) {\n            const node = this.getNodeById(nodeId);\n\n            if (node) {\n                if (!node.load_on_demand) {\n                    node.is_open = true;\n                } else {\n                    mustLoadOnDemand = true;\n                }\n            }\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    private selectInitialNodes(nodeIds: NodeId[]): boolean {\n        let selectCount = 0;\n\n        for (const nodeId of nodeIds) {\n            const node = this.getNodeById(nodeId);\n\n            if (node) {\n                selectCount += 1;\n\n                this.addToSelection(node);\n            }\n        }\n\n        return selectCount !== 0;\n    }\n\n    private resetSelection(): void {\n        const selectedNodes = this.getSelectedNodes();\n\n        selectedNodes.forEach((node) => {\n            this.removeFromSelection(node);\n        });\n    }\n\n    private doSetInitialStateOnDemand(\n        nodeIdsParam: NodeId[],\n        selectedNodes: NodeId[],\n        cbFinished: () => void,\n    ): void {\n        let loadingCount = 0;\n        let nodeIds = nodeIdsParam;\n\n        const openNodes = (): void => {\n            const newNodesIds = [];\n\n            for (const nodeId of nodeIds) {\n                const node = this.getNodeById(nodeId);\n\n                if (!node) {\n                    newNodesIds.push(nodeId);\n                } else {\n                    if (!node.is_loading) {\n                        if (node.load_on_demand) {\n                            loadAndOpenNode(node);\n                        } else {\n                            this.openNode(node, false);\n                        }\n                    }\n                }\n            }\n\n            nodeIds = newNodesIds;\n\n            if (this.selectInitialNodes(selectedNodes)) {\n                this.refreshElements(null);\n            }\n\n            if (loadingCount === 0) {\n                cbFinished();\n            }\n        };\n\n        const loadAndOpenNode = (node: Node): void => {\n            loadingCount += 1;\n            this.openNode(node, false, () => {\n                loadingCount -= 1;\n                openNodes();\n            });\n        };\n\n        openNodes();\n    }\n\n    private getKeyName(): string {\n        if (typeof this.saveStateOption === \"string\") {\n            return this.saveStateOption;\n        } else {\n            return \"tree\";\n        }\n    }\n\n    private supportsLocalStorage(): boolean {\n        const testSupport = (): boolean => {\n            // Is local storage supported?\n            if (localStorage == null) {\n                return false;\n            } else {\n                // Check if it's possible to store an item. Safari does not allow this in private browsing mode.\n                try {\n                    const key = \"_storage_test\";\n                    sessionStorage.setItem(key, \"value\");\n                    sessionStorage.removeItem(key);\n                } catch (error) {\n                    return false;\n                }\n\n                return true;\n            }\n        };\n\n        if (this._supportsLocalStorage == null) {\n            this._supportsLocalStorage = testSupport();\n        }\n\n        return this._supportsLocalStorage;\n    }\n}\n","import type { ScrollParent } from \"./types\";\nimport { getElementPosition, getOffsetTop } from '../util'\n\ntype HorizontalScrollDirection = \"left\" | \"right\";\ntype VerticalScrollDirection = \"bottom\" | \"top\";\n\ninterface Params {\n    container: HTMLElement;\n    refreshHitAreas: () => void;\n}\n\nexport default class ContainerScrollParent implements ScrollParent {\n    private container: HTMLElement;\n    private horizontalScrollDirection?: HorizontalScrollDirection;\n    private horizontalScrollTimeout?: number;\n    private refreshHitAreas: () => void;\n    private scrollParentBottom?: number;\n    private scrollParentTop?: number;\n    private verticalScrollTimeout?: number;\n    private verticalScrollDirection?: VerticalScrollDirection;\n\n    constructor({ container, refreshHitAreas }: Params) {\n        this.container = container;\n        this.refreshHitAreas = refreshHitAreas;\n    }\n\n    public checkHorizontalScrolling(pageX: number): void {\n        const newHorizontalScrollDirection =\n            this.getNewHorizontalScrollDirection(pageX);\n\n        if (this.horizontalScrollDirection !== newHorizontalScrollDirection) {\n            this.horizontalScrollDirection = newHorizontalScrollDirection;\n\n            if (this.horizontalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n            }\n\n            if (newHorizontalScrollDirection) {\n                this.horizontalScrollTimeout = window.setTimeout(\n                    this.scrollHorizontally.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public checkVerticalScrolling(pageY: number) {\n        const newVerticalScrollDirection =\n            this.getNewVerticalScrollDirection(pageY);\n\n        if (this.verticalScrollDirection !== newVerticalScrollDirection) {\n            this.verticalScrollDirection = newVerticalScrollDirection;\n\n            if (this.verticalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n                this.verticalScrollTimeout = undefined;\n            }\n\n            if (newVerticalScrollDirection) {\n                this.verticalScrollTimeout = window.setTimeout(\n                    this.scrollVertically.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public getScrollLeft(): number {\n        return this.container.scrollLeft;\n    }\n\n    public scrollToY(top: number): void {\n        this.container.scrollTop = top;\n    }\n\n    public stopScrolling() {\n        this.horizontalScrollDirection = undefined;\n        this.verticalScrollDirection = undefined;\n        this.scrollParentTop = undefined;\n        this.scrollParentBottom = undefined;\n    }\n\n    private getNewHorizontalScrollDirection(\n        pageX: number,\n    ): HorizontalScrollDirection | undefined {\n        const scrollParentOffset = getElementPosition(this.container);\n\n        const rightEdge = scrollParentOffset.left + this.container.clientWidth;\n        const leftEdge = scrollParentOffset.left;\n        const isNearRightEdge = pageX > rightEdge - 20;\n        const isNearLeftEdge = pageX < leftEdge + 20;\n\n        if (isNearRightEdge) {\n            return \"right\";\n        } else if (isNearLeftEdge) {\n            return \"left\";\n        }\n\n        return undefined;\n    }\n\n    private getNewVerticalScrollDirection(\n        pageY: number,\n    ): VerticalScrollDirection | undefined {\n        if (pageY < this.getScrollParentTop()) {\n            return \"top\";\n        }\n\n        if (pageY > this.getScrollParentBottom()) {\n            return \"bottom\";\n        }\n\n        return undefined;\n    }\n\n    private scrollHorizontally() {\n        if (!this.horizontalScrollDirection) {\n            return;\n        }\n\n        const distance = this.horizontalScrollDirection === \"left\" ? -20 : 20;\n\n        this.container.scrollBy({\n            left: distance,\n            top: 0,\n            behavior: \"instant\",\n        });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollHorizontally.bind(this), 40);\n    }\n\n    private scrollVertically() {\n        if (!this.verticalScrollDirection) {\n            return;\n        }\n\n        const distance = this.verticalScrollDirection === \"top\" ? -20 : 20;\n\n        this.container.scrollBy({\n            left: 0,\n            top: distance,\n            behavior: \"instant\",\n        });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollVertically.bind(this), 40);\n    }\n\n    private getScrollParentTop() {\n        if (this.scrollParentTop == null) {\n            this.scrollParentTop = getOffsetTop(this.container)\n        }\n\n        return this.scrollParentTop;\n    }\n\n    private getScrollParentBottom() {\n        if (this.scrollParentBottom == null) {\n            this.scrollParentBottom = this.getScrollParentTop() + this.container.clientHeight;\n        }\n\n        return this.scrollParentBottom;\n    }\n}\n","import type { ScrollParent } from \"./types\";\nimport { getOffsetTop } from '../util'\n\ntype HorizontalScrollDirection = \"left\" | \"right\";\ntype VerticalScrollDirection = \"bottom\" | \"top\";\n\ninterface Params {\n    refreshHitAreas: () => void;\n    treeElement: HTMLElement;\n}\n\nexport default class DocumentScrollParent implements ScrollParent {\n    private documentScrollHeight?: number;\n    private documentScrollWidth?: number;\n    private horizontalScrollDirection?: HorizontalScrollDirection;\n    private horizontalScrollTimeout?: number;\n    private refreshHitAreas: () => void;\n    private treeElement: HTMLElement;\n    private verticalScrollDirection?: VerticalScrollDirection;\n    private verticalScrollTimeout?: number;\n\n    constructor({ refreshHitAreas, treeElement }: Params) {\n        this.refreshHitAreas = refreshHitAreas;\n        this.treeElement = treeElement;\n    }\n\n    public checkHorizontalScrolling(pageX: number): void {\n        const newHorizontalScrollDirection =\n            this.getNewHorizontalScrollDirection(pageX);\n\n        if (this.horizontalScrollDirection !== newHorizontalScrollDirection) {\n            this.horizontalScrollDirection = newHorizontalScrollDirection;\n\n            if (this.horizontalScrollTimeout != null) {\n                window.clearTimeout(this.horizontalScrollTimeout);\n            }\n\n            if (newHorizontalScrollDirection) {\n                this.horizontalScrollTimeout = window.setTimeout(\n                    this.scrollHorizontally.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public checkVerticalScrolling(pageY: number) {\n        const newVerticalScrollDirection =\n            this.getNewVerticalScrollDirection(pageY);\n\n        if (this.verticalScrollDirection !== newVerticalScrollDirection) {\n            this.verticalScrollDirection = newVerticalScrollDirection;\n\n            if (this.verticalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n                this.verticalScrollTimeout = undefined;\n            }\n\n            if (newVerticalScrollDirection) {\n                this.verticalScrollTimeout = window.setTimeout(\n                    this.scrollVertically.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public getScrollLeft(): number {\n        return document.documentElement.scrollLeft;\n    }\n\n    public scrollToY(top: number): void {\n        const treeTop = getOffsetTop(this.treeElement);\n\n        document.documentElement.scrollTop = top + treeTop;\n    }\n\n    public stopScrolling() {\n        this.horizontalScrollDirection = undefined;\n        this.verticalScrollDirection = undefined;\n        this.documentScrollHeight = undefined;\n        this.documentScrollWidth = undefined;\n    }\n\n    private getNewHorizontalScrollDirection(\n        pageX: number,\n    ): HorizontalScrollDirection | undefined {\n        const scrollLeft = document.documentElement.scrollLeft;\n        const windowWidth = window.innerWidth;\n\n        const isNearRightEdge = pageX > windowWidth - 20;\n        const isNearLeftEdge = pageX - scrollLeft < 20;\n\n        if (isNearRightEdge && this.canScrollRight()) {\n            return \"right\";\n        }\n\n        if (isNearLeftEdge) {\n            return \"left\";\n        }\n\n        return undefined;\n    }\n\n    private canScrollRight() {\n        const documentElement = document.documentElement;\n\n        return (\n            documentElement.scrollLeft + documentElement.clientWidth <\n            this.getDocumentScrollWidth()\n        );\n    }\n\n    private canScrollDown() {\n        const documentElement = document.documentElement;\n\n        return (\n            documentElement.scrollTop + documentElement.clientHeight <\n            this.getDocumentScrollHeight()\n        );\n    }\n\n    private getDocumentScrollHeight() {\n        // Store the original scroll height because the scroll height can increase when the drag element is moved beyond the scroll height.\n        if (this.documentScrollHeight == null) {\n            this.documentScrollHeight = document.documentElement.scrollHeight;\n        }\n\n        return this.documentScrollHeight;\n    }\n\n    private getDocumentScrollWidth() {\n        // Store the original scroll width because the scroll width can increase when the drag element is moved beyond the scroll width.\n        if (this.documentScrollWidth == null) {\n            this.documentScrollWidth = document.documentElement.scrollWidth;\n        }\n\n        return this.documentScrollWidth;\n    }\n\n    private getNewVerticalScrollDirection(\n        pageY: number,\n    ): VerticalScrollDirection | undefined {\n        const scrollTop = jQuery(document).scrollTop() || 0;\n        const distanceTop = pageY - scrollTop;\n\n        if (distanceTop < 20) {\n            return \"top\";\n        }\n\n        const windowHeight = window.innerHeight;\n\n        if (windowHeight - (pageY - scrollTop) < 20 && this.canScrollDown()) {\n            return \"bottom\";\n        }\n\n        return undefined;\n    }\n\n    private scrollHorizontally() {\n        if (!this.horizontalScrollDirection) {\n            return;\n        }\n\n        const distance = this.horizontalScrollDirection === \"left\" ? -20 : 20;\n        window.scrollBy({ left: distance, top: 0, behavior: \"instant\" });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollHorizontally.bind(this), 40);\n    }\n\n    private scrollVertically() {\n        if (!this.verticalScrollDirection) {\n            return;\n        }\n\n        const distance = this.verticalScrollDirection === \"top\" ? -20 : 20;\n        window.scrollBy({ left: 0, top: distance, behavior: \"instant\" });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollVertically.bind(this), 40);\n    }\n}\n","import type { ScrollParent } from \"./types\";\nimport ContainerScrollParent from \"./containerScrollParent\";\nimport DocumentScrollParent from \"./documentScrollParent\";\n\nconst isOverflow = (overflowValue: string) =>\n    overflowValue === \"auto\" || overflowValue === \"scroll\";\n\nconst hasOverFlow = (element: HTMLElement): boolean => {\n    const style = getComputedStyle(element);\n\n    return isOverflow(style.overflowX) || isOverflow(style.overflowY);\n};\n\nconst getParentWithOverflow = (\n    treeElement: HTMLElement,\n): HTMLElement | null => {\n    if (hasOverFlow(treeElement)) {\n        return treeElement;\n    }\n\n    let parent = treeElement.parentElement;\n\n    while (parent) {\n        if (hasOverFlow(parent)) {\n            return parent;\n        }\n\n        parent = parent.parentElement;\n    }\n\n    return null;\n};\n\nconst createScrollParent = (\n    treeElement: HTMLElement,\n    refreshHitAreas: () => void,\n): ScrollParent => {\n    const container = getParentWithOverflow(treeElement);\n\n    if (container && container.tagName !== \"HTML\") {\n        return new ContainerScrollParent({\n            container,\n            refreshHitAreas,\n        });\n    } else {\n        return new DocumentScrollParent({ refreshHitAreas, treeElement });\n    }\n};\n\nexport default createScrollParent;\n","import { PositionInfo } from \"./mouseWidgetTypes\";\nimport { ScrollParent } from \"./scrollHandler/types\";\nimport createScrollParent from \"./scrollHandler/createScrollParent\";\n\ninterface ScrollHandlerParams {\n    refreshHitAreas: () => void;\n    treeElement: HTMLElement;\n}\n\nexport default class ScrollHandler {\n    private refreshHitAreas: () => void;\n    private scrollParent?: ScrollParent;\n    private treeElement: HTMLElement;\n\n    constructor({ refreshHitAreas, treeElement }: ScrollHandlerParams) {\n        this.refreshHitAreas = refreshHitAreas;\n        this.scrollParent = undefined;\n        this.treeElement = treeElement;\n    }\n\n    public checkScrolling(positionInfo: PositionInfo): void {\n        this.checkVerticalScrolling(positionInfo);\n        this.checkHorizontalScrolling(positionInfo);\n    }\n\n    public stopScrolling() {\n        this.getScrollParent().stopScrolling();\n    }\n\n    public scrollToY(top: number): void {\n        this.getScrollParent().scrollToY(top);\n    }\n\n    public getScrollLeft(): number {\n        return this.getScrollParent().getScrollLeft();\n    }\n\n    private checkVerticalScrolling(positionInfo: PositionInfo): void {\n        if (positionInfo.pageY == null) {\n            return;\n        }\n\n        this.getScrollParent().checkVerticalScrolling(positionInfo.pageY);\n    }\n\n    private checkHorizontalScrolling(positionInfo: PositionInfo): void {\n        if (positionInfo.pageX == null) {\n            return;\n        }\n\n        this.getScrollParent().checkHorizontalScrolling(positionInfo.pageX);\n    }\n\n    private getScrollParent(): ScrollParent {\n        if (!this.scrollParent) {\n            this.scrollParent = createScrollParent(\n                this.treeElement,\n                this.refreshHitAreas,\n            );\n        }\n\n        return this.scrollParent;\n    }\n}\n","import { Node } from \"./node\";\nimport { GetNodeById } from \"./jqtreeMethodTypes\";\n\ninterface SelectNodeHandlerParameters {\n    getNodeById: GetNodeById;\n}\n\nexport default class SelectNodeHandler {\n    private getNodeById: GetNodeById;\n    private selectedNodes: Set<NodeId>;\n    private selectedSingleNode: Node | null;\n\n    constructor({ getNodeById }: SelectNodeHandlerParameters) {\n        this.getNodeById = getNodeById;\n        this.selectedNodes = new Set<NodeId>();\n        this.clear();\n    }\n\n    public getSelectedNode(): Node | false {\n        const selectedNodes = this.getSelectedNodes();\n\n        if (selectedNodes.length) {\n            return selectedNodes[0] || false;\n        } else {\n            return false;\n        }\n    }\n\n    public getSelectedNodes(): Node[] {\n        if (this.selectedSingleNode) {\n            return [this.selectedSingleNode];\n        } else {\n            const selectedNodes: Node[] = [];\n\n            this.selectedNodes.forEach((id) => {\n                const node = this.getNodeById(id);\n                if (node) {\n                    selectedNodes.push(node);\n                }\n            });\n\n            return selectedNodes;\n        }\n    }\n\n    public getSelectedNodesUnder(parent: Node): Node[] {\n        if (this.selectedSingleNode) {\n            if (parent.isParentOf(this.selectedSingleNode)) {\n                return [this.selectedSingleNode];\n            } else {\n                return [];\n            }\n        } else {\n            const selectedNodes = [];\n\n            for (const id in this.selectedNodes) {\n                if (\n                    Object.prototype.hasOwnProperty.call(this.selectedNodes, id)\n                ) {\n                    const node = this.getNodeById(id);\n                    if (node && parent.isParentOf(node)) {\n                        selectedNodes.push(node);\n                    }\n                }\n            }\n\n            return selectedNodes;\n        }\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (node.id != null) {\n            return this.selectedNodes.has(node.id);\n        } else if (this.selectedSingleNode) {\n            return this.selectedSingleNode.element === node.element;\n        } else {\n            return false;\n        }\n    }\n\n    public clear(): void {\n        this.selectedNodes.clear();\n        this.selectedSingleNode = null;\n    }\n\n    public removeFromSelection(node: Node, includeChildren = false): void {\n        if (node.id == null) {\n            if (\n                this.selectedSingleNode &&\n                node.element === this.selectedSingleNode.element\n            ) {\n                this.selectedSingleNode = null;\n            }\n        } else {\n            this.selectedNodes.delete(node.id);\n\n            if (includeChildren) {\n                node.iterate(() => {\n                    if (node.id != null) {\n                        this.selectedNodes.delete(node.id);\n                    }\n                    return true;\n                });\n            }\n        }\n    }\n\n    public addToSelection(node: Node): void {\n        if (node.id != null) {\n            this.selectedNodes.add(node.id);\n        } else {\n            this.selectedSingleNode = node;\n        }\n    }\n}\n","const register = (widgetClass: unknown, widgetName: string): void => {\n    const getDataKey = (): string => `simple_widget_${widgetName}`;\n\n    const getWidgetData = (\n        el: HTMLElement,\n        dataKey: string\n    ): SimpleWidget<unknown> | null => {\n        const widget = jQuery.data(el, dataKey) as unknown;\n\n        if (widget && widget instanceof SimpleWidget) {\n            return widget;\n        } else {\n            return null;\n        }\n    };\n\n    const createWidget = ($el: JQuery, options: unknown): JQuery => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const existingWidget = getWidgetData(el, dataKey);\n\n            if (!existingWidget) {\n                const simpleWidgetClass = widgetClass as typeof SimpleWidget;\n                const widget = new simpleWidgetClass(el, options);\n\n                if (!jQuery.data(el, dataKey)) {\n                    jQuery.data(el, dataKey, widget);\n                }\n\n                // Call init after setting data, so we can call methods\n                widget.init();\n            }\n        }\n\n        return $el;\n    };\n\n    const destroyWidget = ($el: JQuery): void => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const widget = getWidgetData(el, dataKey);\n\n            if (widget) {\n                widget.destroy();\n            }\n\n            jQuery.removeData(el, dataKey);\n        }\n    };\n\n    const callFunction = (\n        $el: JQuery,\n        functionName: string,\n        args: unknown[]\n    ): unknown => {\n        let result = null;\n\n        for (const el of $el.get()) {\n            const widget = jQuery.data(el, getDataKey()) as unknown;\n\n            if (widget && widget instanceof SimpleWidget) {\n                const simpleWidget = widget as SimpleWidget<unknown>;\n                const widgetFunction = simpleWidget[functionName];\n\n                if (widgetFunction && typeof widgetFunction === \"function\") {\n                    result = widgetFunction.apply(widget, args) as unknown;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (jQuery.fn as any)[widgetName] = function (\n        this: JQuery,\n        argument1: unknown,\n        ...args: unknown[]\n    ) {\n        if (!argument1) {\n            return createWidget(this, null);\n        } else if (typeof argument1 === \"object\") {\n            const options = argument1 as unknown;\n            return createWidget(this, options);\n        } else if (typeof argument1 === \"string\" && argument1[0] !== \"_\") {\n            const functionName = argument1;\n\n            if (functionName === \"destroy\") {\n                return destroyWidget(this);\n            } else if (functionName === \"get_widget_class\") {\n                return widgetClass;\n            } else {\n                return callFunction(this, functionName, args);\n            }\n        } else {\n            return undefined;\n        }\n    };\n};\n\nexport default class SimpleWidget<WidgetOptions> {\n    public static register(widgetClass: unknown, widgetName: string): void {\n        register(widgetClass, widgetName);\n    }\n\n    [key: string]: unknown;\n\n    protected static defaults: unknown = {};\n\n    public options: WidgetOptions;\n\n    public $el: JQuery<HTMLElement>;\n\n    constructor(el: HTMLElement, options: WidgetOptions) {\n        this.$el = jQuery(el);\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const defaults = (this.constructor as any)[\"defaults\"] as WidgetOptions;\n        this.options = { ...defaults, ...options };\n    }\n\n    public destroy(): void {\n        this.deinit();\n    }\n\n    public init(): void {\n        //\n    }\n\n    public deinit(): void {\n        //\n    }\n}\n","interface NodeRecordWithChildren extends NodeRecord {\n    children: NodeData[];\n}\n\nexport const isNodeRecordWithChildren = (\n    data: NodeData,\n): data is NodeRecordWithChildren =>\n    typeof data === \"object\" &&\n    \"children\" in data &&\n    data[\"children\"] instanceof Array;\n","import { isNodeRecordWithChildren } from \"./nodeUtils\";\nimport { Position } from \"./position\";\n\ntype IterateCallback = (node: Node, level: number) => boolean;\n\nexport class Node implements INode {\n    public id?: NodeId;\n    public name: string;\n    public children: Node[];\n    public parent: Node | null;\n    public idMapping: Map<NodeId, Node>;\n    public tree?: Node;\n    public nodeClass?: typeof Node;\n    public load_on_demand: boolean;\n    public is_open: boolean;\n    public element: HTMLElement;\n    public is_loading: boolean;\n    public isEmptyFolder: boolean;\n\n    [key: string]: unknown;\n\n    constructor(\n        nodeData: NodeData | null = null,\n        isRoot = false,\n        nodeClass = Node,\n    ) {\n        this.name = \"\";\n        this.load_on_demand = false;\n\n        this.isEmptyFolder =\n            nodeData != null &&\n            isNodeRecordWithChildren(nodeData) &&\n            nodeData.children.length === 0;\n\n        this.setData(nodeData);\n\n        this.children = [];\n        this.parent = null;\n\n        if (isRoot) {\n            this.idMapping = new Map<NodeId, Node>();\n            this.tree = this;\n            this.nodeClass = nodeClass;\n        }\n    }\n\n    /*\n    Set the data of this node.\n\n    setData(string): set the name of the node\n    setData(object): set attributes of the node\n\n    Examples:\n        setData('node1')\n\n        setData({ name: 'node1', id: 1});\n\n        setData({ name: 'node2', id: 2, color: 'green'});\n\n    * This is an internal function; it is not in the docs\n    * Does not remove existing node values\n    */\n    public setData(o: NodeData | null): void {\n        if (!o) {\n            return;\n        } else if (typeof o === \"string\") {\n            this.name = o;\n        } else if (typeof o === \"object\") {\n            for (const key in o) {\n                if (Object.prototype.hasOwnProperty.call(o, key)) {\n                    const value = o[key];\n\n                    if (key === \"label\" || key === \"name\") {\n                        // You can use the 'label' key instead of 'name'; this is a legacy feature\n                        if (typeof value === \"string\") {\n                            this.name = value;\n                        }\n                    } else if (key !== \"children\" && key !== \"parent\") {\n                        // You can't update the children or the parent using this function\n                        this[key] = value;\n                    }\n                }\n            }\n        }\n    }\n\n    /*\n    Create tree from data.\n\n    Structure of data is:\n    [\n        {\n            name: 'node1',\n            children: [\n                { name: 'child1' },\n                { name: 'child2' }\n            ]\n        },\n        {\n            name: 'node2'\n        }\n    ]\n    */\n    public loadFromData(data: NodeData[]): Node {\n        this.removeChildren();\n\n        for (const childData of data) {\n            const node = this.createNode(childData);\n            this.addChild(node);\n\n            if (isNodeRecordWithChildren(childData)) {\n                node.loadFromData(childData.children);\n            }\n        }\n\n        return this;\n    }\n\n    /*\n    Add child.\n\n    tree.addChild(\n        new Node('child1')\n    );\n    */\n    public addChild(node: Node): void {\n        this.children.push(node);\n        node.setParent(this);\n    }\n\n    /*\n    Add child at position. Index starts at 0.\n\n    tree.addChildAtPosition(\n        new Node('abc'),\n        1\n    );\n    */\n    public addChildAtPosition(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        node.setParent(this);\n    }\n\n    /*\n    Remove child. This also removes the children of the node.\n\n    tree.removeChild(tree.children[0]);\n    */\n    public removeChild(node: Node): void {\n        // remove children from the index\n        node.removeChildren();\n\n        this.doRemoveChild(node);\n    }\n\n    /*\n    Get child index.\n\n    var index = getChildIndex(node);\n    */\n    public getChildIndex(node: Node): number {\n        return this.children.indexOf(node);\n    }\n\n    /*\n    Does the tree have children?\n\n    if (tree.hasChildren()) {\n        //\n    }\n    */\n    public hasChildren(): boolean {\n        return this.children.length !== 0;\n    }\n\n    public isFolder(): boolean {\n        return this.hasChildren() || this.load_on_demand;\n    }\n\n    /*\n    Iterate over all the nodes in the tree.\n\n    Calls callback with (node, level).\n\n    The callback must return true to continue the iteration on current node.\n\n    tree.iterate(\n        function(node, level) {\n           console.log(node.name);\n\n           // stop iteration after level 2\n           return (level <= 2);\n        }\n    );\n\n    */\n    public iterate(callback: IterateCallback): void {\n        const _iterate = (node: Node, level: number): void => {\n            if (node.children) {\n                for (const child of node.children) {\n                    const result = callback(child, level);\n\n                    if (result && child.hasChildren()) {\n                        _iterate(child, level + 1);\n                    }\n                }\n            }\n        };\n\n        _iterate(this, 0);\n    }\n\n    /*\n    Move node relative to another node.\n\n    Argument position: Position.BEFORE, Position.AFTER or Position.Inside\n\n    // move node1 after node2\n    tree.moveNode(node1, node2, Position.AFTER);\n    */\n    public moveNode(\n        movedNode: Node,\n        targetNode: Node,\n        position: Position,\n    ): boolean {\n        if (!movedNode.parent || movedNode.isParentOf(targetNode)) {\n            // - Node is parent of target node\n            // - Or, parent is empty\n            return false;\n        } else {\n            movedNode.parent.doRemoveChild(movedNode);\n\n            switch (position) {\n                case Position.After: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode) + 1,\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Before: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode),\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Inside: {\n                    // move inside as first child\n                    targetNode.addChildAtPosition(movedNode, 0);\n                    return true;\n                }\n\n                default:\n                    return false;\n            }\n        }\n    }\n\n    /*\n    Get the tree as data.\n    */\n    public getData(includeParent = false): NodeRecord[] {\n        const getDataFromNodes = (nodes: Node[]): Record<string, unknown>[] => {\n            return nodes.map((node) => {\n                const tmpNode: Record<string, unknown> = {};\n\n                for (const k in node) {\n                    if (\n                        [\n                            \"parent\",\n                            \"children\",\n                            \"element\",\n                            \"idMapping\",\n                            \"load_on_demand\",\n                            \"nodeClass\",\n                            \"tree\",\n                            \"isEmptyFolder\",\n                        ].indexOf(k) === -1 &&\n                        Object.prototype.hasOwnProperty.call(node, k)\n                    ) {\n                        const v = node[k];\n                        tmpNode[k] = v;\n                    }\n                }\n\n                if (node.hasChildren()) {\n                    tmpNode[\"children\"] = getDataFromNodes(node.children);\n                }\n\n                return tmpNode;\n            });\n        };\n\n        if (includeParent) {\n            return getDataFromNodes([this]);\n        } else {\n            return getDataFromNodes(this.children);\n        }\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.getNodeByCallback((node: Node) => node.name === name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        const node = this.getNodeByCallback((n: Node) => n.name === name);\n\n        if (!node) {\n            throw `Node with name ${name} not found`;\n        }\n\n        return node;\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        let result: Node | null = null;\n\n        this.iterate((node: Node) => {\n            if (result) {\n                return false;\n            } else if (callback(node)) {\n                result = node;\n                return false;\n            } else {\n                return true;\n            }\n        });\n\n        return result;\n    }\n\n    public addAfter(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex + 1);\n\n            node.loadChildrenFromData(nodeInfo);\n            return node;\n        }\n    }\n\n    public addBefore(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex);\n\n            node.loadChildrenFromData(nodeInfo);\n            return node;\n        }\n    }\n\n    public addParent(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const newParent = this.createNode(nodeInfo);\n\n            if (this.tree) {\n                newParent.setParent(this.tree);\n            }\n            const originalParent = this.parent;\n\n            for (const child of originalParent.children) {\n                newParent.addChild(child);\n            }\n\n            originalParent.children = [];\n            originalParent.addChild(newParent);\n            return newParent;\n        }\n    }\n\n    public remove(): void {\n        if (this.parent) {\n            this.parent.removeChild(this);\n            this.parent = null;\n        }\n    }\n\n    public append(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChild(node);\n\n        node.loadChildrenFromData(nodeInfo);\n        return node;\n    }\n\n    public prepend(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChildAtPosition(node, 0);\n\n        node.loadChildrenFromData(nodeInfo);\n        return node;\n    }\n\n    public isParentOf(node: Node): boolean {\n        let parent = node.parent;\n\n        while (parent) {\n            if (parent === this) {\n                return true;\n            }\n\n            parent = parent.parent;\n        }\n\n        return false;\n    }\n\n    public getLevel(): number {\n        let level = 0;\n        let node: Node = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n        while (node.parent) {\n            level += 1;\n            node = node.parent;\n        }\n\n        return level;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.idMapping.get(nodeId) || null;\n    }\n\n    public addNodeToIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.set(node.id, node);\n        }\n    }\n\n    public removeNodeFromIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.delete(node.id);\n        }\n    }\n\n    public removeChildren(): void {\n        this.iterate((child: Node) => {\n            this.tree?.removeNodeFromIndex(child);\n            return true;\n        });\n\n        this.children = [];\n    }\n\n    public getPreviousSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousIndex = this.parent.getChildIndex(this) - 1;\n            if (previousIndex >= 0) {\n                return this.parent.children[previousIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNextSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const nextIndex = this.parent.getChildIndex(this) + 1;\n            if (nextIndex < this.parent.children.length) {\n                return this.parent.children[nextIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.filter((node: Node) => node[key] === value);\n    }\n\n    public filter(f: (node: Node) => boolean): Node[] {\n        const result: Node[] = [];\n\n        this.iterate((node: Node) => {\n            if (f(node)) {\n                result.push(node);\n            }\n\n            return true;\n        });\n\n        return result;\n    }\n\n    public getNextNode(includeChildren = true): Node | null {\n        if (includeChildren && this.hasChildren()) {\n            return this.children[0] || null;\n        } else if (!this.parent) {\n            return null;\n        } else {\n            const nextSibling = this.getNextSibling();\n\n            if (nextSibling) {\n                return nextSibling;\n            } else {\n                return this.parent.getNextNode(false);\n            }\n        }\n    }\n\n    public getNextVisibleNode(): Node | null {\n        if (this.hasChildren() && this.is_open) {\n            // First child\n            return this.children[0] || null;\n        } else {\n            if (!this.parent) {\n                return null;\n            } else {\n                const nextSibling = this.getNextSibling();\n                if (nextSibling) {\n                    // Next sibling\n                    return nextSibling;\n                } else {\n                    // Next node of parent\n                    return this.parent.getNextNode(false);\n                }\n            }\n        }\n    }\n\n    public getPreviousNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (previousSibling.hasChildren()) {\n                return previousSibling.getLastChild();\n            } else {\n                return previousSibling;\n            }\n        }\n    }\n\n    public getPreviousVisibleNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (\n                !previousSibling.hasChildren() ||\n                !previousSibling.is_open\n            ) {\n                // Previous sibling\n                return previousSibling;\n            } else {\n                // Last child of previous sibling\n                return previousSibling.getLastChild();\n            }\n        }\n    }\n\n    public getParent(): Node | null {\n        // Return parent except if it is the root node\n        if (!this.parent) {\n            return null;\n        } else if (!this.parent.parent) {\n            // Root node -> null\n            return null;\n        } else {\n            return this.parent;\n        }\n    }\n\n    public getLastChild(): Node | null {\n        if (!this.hasChildren()) {\n            return null;\n        } else {\n            const lastChild = this.children[this.children.length - 1];\n\n            if (!lastChild) {\n                return null;\n            }\n\n            if (!(lastChild.hasChildren() && lastChild.is_open)) {\n                return lastChild;\n            } else {\n                return lastChild?.getLastChild();\n            }\n        }\n    }\n\n    // Init Node from data without making it the root of the tree\n    public initFromData(data: NodeData): void {\n        const addNode = (nodeData: NodeData): void => {\n            this.setData(nodeData);\n\n            if (\n                isNodeRecordWithChildren(nodeData) &&\n                nodeData.children.length\n            ) {\n                addChildren(nodeData.children);\n            }\n        };\n\n        const addChildren = (childrenData: NodeData[]): void => {\n            for (const child of childrenData) {\n                const node = this.createNode();\n                node.initFromData(child);\n                this.addChild(node);\n            }\n        };\n\n        addNode(data);\n    }\n\n    private setParent(parent: Node): void {\n        this.parent = parent;\n        this.tree = parent.tree;\n        this.tree?.addNodeToIndex(this);\n    }\n\n    private doRemoveChild(node: Node): void {\n        this.children.splice(this.getChildIndex(node), 1);\n        this.tree?.removeNodeFromIndex(node);\n    }\n\n    private getNodeClass(): typeof Node {\n        return this.nodeClass || this?.tree?.nodeClass || Node;\n    }\n\n    private createNode(nodeData?: NodeData): Node {\n        const nodeClass = this.getNodeClass();\n        return new nodeClass(nodeData);\n    }\n\n    // Load children data from nodeInfo if it has children\n    private loadChildrenFromData(nodeInfo: NodeData) {\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            this.loadFromData(nodeInfo.children);\n        }\n    }\n}\n","import { DropHint } from \"../dragAndDropHandler/types\";\n\nclass BorderDropHint implements DropHint {\n    private hint?: HTMLElement;\n\n    constructor(element: HTMLElement, scrollLeft: number) {\n        const div = element.querySelector(\":scope > .jqtree-element\");\n\n        if (!div) {\n            this.hint = undefined;\n            return;\n        }\n\n        const width = Math.max(element.offsetWidth + scrollLeft - 4, 0);\n        const height = Math.max(element.clientHeight - 4, 0);\n\n        const hint = document.createElement(\"span\");\n        hint.className = \"jqtree-border\";\n        hint.style.width = `${width}px`;\n        hint.style.height = `${height}px`;\n\n        this.hint = hint;\n\n        div.append(this.hint);\n    }\n\n    public remove(): void {\n        this.hint?.remove();\n    }\n}\n\nexport default BorderDropHint;\n","import { Node } from \"../node\";\nimport { Position } from \"../position\";\nimport { DropHint } from \"../dragAndDropHandler/types\";\n\nclass GhostDropHint implements DropHint {\n    private element: HTMLElement;\n    private node: Node;\n    private ghost: HTMLElement;\n\n    constructor(node: Node, element: HTMLElement, position: Position) {\n        this.element = element;\n        this.node = node;\n        this.ghost = this.createGhostElement();\n\n        if (position === Position.After) {\n            this.moveAfter();\n        } else if (position === Position.Before) {\n            this.moveBefore();\n        } else if (position === Position.Inside) {\n            if (node.isFolder() && node.is_open) {\n                this.moveInsideOpenFolder();\n            } else {\n                this.moveInside();\n            }\n        }\n    }\n\n    public remove(): void {\n        this.ghost.remove();\n    }\n\n    private moveAfter(): void {\n        this.element.after(this.ghost);\n    }\n\n    private moveBefore(): void {\n        this.element.before(this.ghost);\n    }\n\n    private moveInsideOpenFolder(): void {\n        const childElement = this.node.children[0]?.element;\n\n        if (childElement) {\n            childElement.before(this.ghost);\n        }\n    }\n\n    private moveInside(): void {\n        this.element.after(this.ghost);\n        this.ghost.classList.add(\"jqtree-inside\");\n    }\n\n    private createGhostElement() {\n        const ghost = document.createElement(\"li\");\n        ghost.className = \"jqtree_common jqtree-ghost\";\n\n        const circleSpan = document.createElement(\"span\");\n        circleSpan.className = \"jqtree_common jqtree-circle\";\n        ghost.append(circleSpan);\n\n        const lineSpan = document.createElement(\"span\");\n        lineSpan.className = \"jqtree_common jqtree-line\";\n        ghost.append(lineSpan);\n\n        return ghost;\n    }\n}\n\nexport default GhostDropHint;\n","import { Node } from \"../node\";\nimport { Position } from \"../position\";\nimport { DropHint } from \"../dragAndDropHandler/types\";\nimport BorderDropHint from \"./borderDropHint\";\nimport GhostDropHint from \"./ghostDropHint\";\nimport { GetScrollLeft } from \"../jqtreeMethodTypes\";\n\nexport interface NodeElementParams {\n    getScrollLeft: GetScrollLeft;\n    node: Node;\n    tabIndex?: number;\n    $treeElement: JQuery<HTMLElement>;\n}\n\nclass NodeElement {\n    public node: Node;\n    public element: HTMLElement;\n    private getScrollLeft: GetScrollLeft;\n    private tabIndex?: number;\n    private $treeElement: JQuery<HTMLElement>;\n\n    constructor({\n        getScrollLeft,\n        node,\n        tabIndex,\n        $treeElement,\n    }: NodeElementParams) {\n        this.getScrollLeft = getScrollLeft;\n        this.tabIndex = tabIndex;\n        this.$treeElement = $treeElement;\n\n        this.init(node);\n    }\n\n    public init(node: Node): void {\n        this.node = node;\n\n        if (!node.element) {\n            const element = this.$treeElement.get(0);\n\n            if (element) {\n                node.element = element;\n            }\n        }\n\n        if (node.element) {\n            this.element = node.element;\n        }\n    }\n\n    public addDropHint(position: number): DropHint {\n        if (this.mustShowBorderDropHint(position)) {\n            return new BorderDropHint(this.element, this.getScrollLeft());\n        } else {\n            return new GhostDropHint(this.node, this.element, position);\n        }\n    }\n\n    public select(mustSetFocus: boolean): void {\n        this.element.classList.add(\"jqtree-selected\");\n\n        const titleSpan = this.getTitleSpan();\n        const tabIndex = this.tabIndex;\n\n        // Check for null or undefined\n        if (tabIndex != null) {\n            titleSpan.setAttribute(\"tabindex\", tabIndex.toString());\n        }\n\n        titleSpan.setAttribute(\"aria-selected\", \"true\");\n\n        if (mustSetFocus) {\n            titleSpan.focus();\n        }\n    }\n\n    public deselect(): void {\n        this.element.classList.remove(\"jqtree-selected\");\n\n        const titleSpan = this.getTitleSpan();\n        titleSpan.removeAttribute(\"tabindex\");\n        titleSpan.setAttribute(\"aria-selected\", \"false\");\n\n        titleSpan.blur();\n    }\n\n    protected getUl(): HTMLUListElement {\n        return this.element.querySelector(\":scope > ul\") as HTMLUListElement;\n    }\n\n    protected getTitleSpan(): HTMLSpanElement {\n        return this.element.querySelector(\n            \":scope > .jqtree-element > span.jqtree-title\",\n        ) as HTMLSpanElement;\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return position === Position.Inside;\n    }\n}\n\nexport default NodeElement;\n","import { Position } from \"../position\";\nimport NodeElement, { NodeElementParams } from \"./index\";\nimport { OnFinishOpenNode, TriggerEvent } from \"../jqtreeMethodTypes\";\n\ninterface FolderElementParams extends NodeElementParams {\n    closedIconElement?: HTMLElement | Text;\n    openedIconElement?: HTMLElement | Text;\n    triggerEvent: TriggerEvent;\n}\n\nclass FolderElement extends NodeElement {\n    private closedIconElement?: HTMLElement | Text;\n    private openedIconElement?: HTMLElement | Text;\n    private triggerEvent: TriggerEvent;\n\n    constructor({\n        closedIconElement,\n        getScrollLeft,\n        node,\n        openedIconElement,\n        tabIndex,\n        $treeElement,\n        triggerEvent,\n    }: FolderElementParams) {\n        super({\n            getScrollLeft,\n            node,\n            tabIndex,\n            $treeElement,\n        });\n\n        this.closedIconElement = closedIconElement;\n        this.openedIconElement = openedIconElement;\n        this.triggerEvent = triggerEvent;\n    }\n\n    public open(\n        onFinished: OnFinishOpenNode | undefined,\n        slide = true,\n        animationSpeed: JQuery.Duration = \"fast\",\n    ): void {\n        if (this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = true;\n\n        const button = this.getButton();\n        button.classList.remove(\"jqtree-closed\");\n        button.innerHTML = \"\";\n\n        const openedIconElement = this.openedIconElement;\n\n        if (openedIconElement) {\n            const icon = openedIconElement.cloneNode(true);\n            button.appendChild(icon);\n        }\n\n        const doOpen = (): void => {\n            this.element.classList.remove(\"jqtree-closed\");\n\n            const titleSpan = this.getTitleSpan();\n            titleSpan.setAttribute(\"aria-expanded\", \"true\");\n\n            if (onFinished) {\n                onFinished(this.node);\n            }\n\n            this.triggerEvent(\"tree.open\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            jQuery(this.getUl()).slideDown(animationSpeed, doOpen);\n        } else {\n            jQuery(this.getUl()).show();\n            doOpen();\n        }\n    }\n\n    public close(\n        slide = true,\n        animationSpeed: JQuery.Duration | undefined = \"fast\",\n    ): void {\n        if (!this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = false;\n\n        const button = this.getButton();\n        button.classList.add(\"jqtree-closed\");\n        button.innerHTML = \"\";\n\n        const closedIconElement = this.closedIconElement;\n\n        if (closedIconElement) {\n            const icon = closedIconElement.cloneNode(true);\n            button.appendChild(icon);\n        }\n\n        const doClose = (): void => {\n            this.element.classList.add(\"jqtree-closed\");\n\n            const titleSpan = this.getTitleSpan();\n            titleSpan.setAttribute(\"aria-expanded\", \"false\");\n\n            this.triggerEvent(\"tree.close\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            jQuery(this.getUl()).slideUp(animationSpeed, doClose);\n        } else {\n            jQuery(this.getUl()).hide();\n            doClose();\n        }\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return !this.node.is_open && position === Position.Inside;\n    }\n\n    private getButton(): HTMLLinkElement {\n        return this.element.querySelector(\n            \":scope > .jqtree-element > a.jqtree-toggler\",\n        ) as HTMLLinkElement;\n    }\n}\n\nexport default FolderElement;\n","import __version__ from \"./version\";\nimport { DragAndDropHandler } from \"./dragAndDropHandler\";\nimport ElementsRenderer from \"./elementsRenderer\";\nimport DataLoader, { HandleFinishedLoading } from \"./dataLoader\";\nimport KeyHandler from \"./keyHandler\";\nimport MouseHandler from \"./mouseHandler\";\nimport { PositionInfo } from \"./mouseWidgetTypes\";\nimport SaveStateHandler, { SavedState } from \"./saveStateHandler\";\nimport ScrollHandler from \"./scrollHandler\";\nimport SelectNodeHandler from \"./selectNodeHandler\";\nimport SimpleWidget from \"./simple.widget\";\nimport { getOffsetTop, isFunction } from \"./util\";\nimport { Node } from \"./node\";\nimport { getPosition } from \"./position\";\nimport NodeElement from \"./nodeElement\";\nimport FolderElement from \"./nodeElement/folderElement\";\nimport { OnFinishOpenNode } from \"./jqtreeMethodTypes\";\nimport { JQTreeOptions } from \"./jqtreeOptions\";\n\ninterface ClickTarget {\n    node: Node;\n    type: \"button\" | \"label\";\n}\n\ninterface SelectNodeOptions {\n    mustToggle?: boolean;\n    mustSetFocus?: boolean;\n}\n\nconst NODE_PARAM_IS_EMPTY = \"Node parameter is empty\";\nconst PARAM_IS_EMPTY = \"Parameter is empty: \";\n\nexport class JqTreeWidget extends SimpleWidget<JQTreeOptions> {\n    protected static defaults: JQTreeOptions = {\n        animationSpeed: \"fast\",\n        autoEscape: true,\n        autoOpen: false, // true / false / int (open n levels starting at 0)\n        buttonLeft: true,\n        // The symbol to use for a closed node - ► BLACK RIGHT-POINTING POINTER\n        // http://www.fileformat.info/info/unicode/char/25ba/index.htm\n        closedIcon: undefined,\n        data: undefined,\n        dataFilter: undefined,\n        dataUrl: undefined,\n        dragAndDrop: false,\n        keyboardSupport: true,\n        nodeClass: Node,\n        onCanMove: undefined, // Can this node be moved?\n        onCanMoveTo: undefined, // Can this node be moved to this position? function(moved_node, target_node, position)\n        onCanSelectNode: undefined,\n        onCreateLi: undefined,\n        onDragMove: undefined,\n        onDragStop: undefined,\n        onGetStateFromStorage: undefined,\n        onIsMoveHandle: undefined,\n        onLoadFailed: undefined,\n        onLoading: undefined,\n        onSetStateFromStorage: undefined,\n        openedIcon: \"&#x25bc;\",\n        openFolderDelay: 500, // The delay for opening a folder during drag and drop; the value is in milliseconds\n        // The symbol to use for an open node - ▼ BLACK DOWN-POINTING TRIANGLE\n        // http://www.fileformat.info/info/unicode/char/25bc/index.htm\n        rtl: undefined, // right-to-left support; true / false (default)\n        saveState: false, // true / false / string (cookie name)\n        selectable: true,\n        showEmptyFolder: false,\n        slide: true, // must display slide animation?\n        startDndDelay: 300, // The delay for starting dnd (in milliseconds)\n        tabIndex: 0,\n        useContextMenu: true,\n    };\n\n    private element: JQuery;\n    private isInitialized: boolean;\n    private tree: Node;\n\n    private dataLoader: DataLoader;\n    private dndHandler: DragAndDropHandler;\n    private keyHandler: KeyHandler;\n    private mouseHandler: MouseHandler;\n    private renderer: ElementsRenderer;\n    private saveStateHandler: SaveStateHandler;\n    private scrollHandler: ScrollHandler;\n    private selectNodeHandler: SelectNodeHandler;\n\n    public toggle(node: Node, slideParam: null | boolean = null): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.is_open) {\n            this.closeNode(node, slide);\n        } else {\n            this.openNode(node, slide);\n        }\n\n        return this.element;\n    }\n\n    public getTree(): Node {\n        return this.tree;\n    }\n\n    public selectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): JQuery {\n        this.doSelectNode(node, optionsParam);\n        return this.element;\n    }\n\n    public getSelectedNode(): Node | false {\n        return this.selectNodeHandler.getSelectedNode();\n    }\n\n    public toJson(): string {\n        return JSON.stringify(this.tree.getData());\n    }\n\n    public loadData(data: NodeData[], parentNode: Node | null): JQuery {\n        this.doLoadData(data, parentNode);\n        return this.element;\n    }\n\n    /*\n    signatures:\n    - loadDataFromUrl(url, parent_node=null, on_finished=null)\n        loadDataFromUrl('/my_data');\n        loadDataFromUrl('/my_data', node1);\n        loadDataFromUrl('/my_data', node1, function() { console.log('finished'); });\n        loadDataFromUrl('/my_data', null, function() { console.log('finished'); });\n\n    - loadDataFromUrl(parent_node=null, on_finished=null)\n        loadDataFromUrl();\n        loadDataFromUrl(node1);\n        loadDataFromUrl(null, function() { console.log('finished'); });\n        loadDataFromUrl(node1, function() { console.log('finished'); });\n    */\n    public loadDataFromUrl(\n        param1: string | null | Node,\n        param2?: Node | null | HandleFinishedLoading,\n        param3?: HandleFinishedLoading,\n    ): JQuery {\n        if (typeof param1 === \"string\") {\n            // first parameter is url\n            this.doLoadDataFromUrl(\n                param1,\n                param2 as Node | null,\n                param3 ?? null,\n            );\n        } else {\n            // first parameter is not url\n            this.doLoadDataFromUrl(\n                null,\n                param1,\n                param2 as HandleFinishedLoading | null,\n            );\n        }\n\n        return this.element;\n    }\n\n    public reload(onFinished: HandleFinishedLoading | null): JQuery {\n        this.doLoadDataFromUrl(null, null, onFinished);\n        return this.element;\n    }\n\n    public refresh(): JQuery {\n        this._refreshElements(null);\n        return this.element;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.tree.getNodeById(nodeId);\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.tree.getNodeByName(name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        return this.tree.getNodeByNameMustExist(name);\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.tree.getNodesByProperty(key, value);\n    }\n\n    public getNodeByHtmlElement(\n        inputElement: HTMLElement | JQuery<HTMLElement>,\n    ): Node | null {\n        const element =\n            inputElement instanceof HTMLElement\n                ? inputElement\n                : inputElement[0];\n\n        if (!element) {\n            return null;\n        }\n\n        return this.getNode(element);\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        return this.tree.getNodeByCallback(callback);\n    }\n\n    public openNode(\n        node: Node,\n        param1?: boolean | OnFinishOpenNode,\n        param2?: OnFinishOpenNode,\n    ): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const parseParams = (): [boolean, OnFinishOpenNode | undefined] => {\n            let onFinished: OnFinishOpenNode | null;\n            let slide: boolean | null;\n\n            if (isFunction(param1)) {\n                onFinished = param1 as OnFinishOpenNode;\n                slide = null;\n            } else {\n                slide = param1 as boolean;\n                onFinished = param2 as OnFinishOpenNode;\n            }\n\n            if (slide == null) {\n                slide = this.options.slide ?? false;\n            }\n\n            return [slide, onFinished];\n        };\n\n        const [slide, onFinished] = parseParams();\n\n        this._openNode(node, slide, onFinished);\n        return this.element;\n    }\n\n    public closeNode(node: Node, slideParam?: null | boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            this.createFolderElement(node).close(\n                slide,\n                this.options.animationSpeed,\n            );\n\n            this.saveState();\n        }\n\n        return this.element;\n    }\n\n    public isDragging(): boolean {\n        return this.dndHandler.isDragging;\n    }\n\n    public refreshHitAreas(): JQuery {\n        this.dndHandler.refresh();\n        return this.element;\n    }\n\n    public addNodeAfter(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        const newNode = existingNode.addAfter(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addNodeBefore(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addBefore(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addParentNode(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addParent(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(newNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public removeNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!node.parent) {\n            throw Error(\"Node has no parent\");\n        }\n\n        this.selectNodeHandler.removeFromSelection(node, true); // including children\n\n        const parent = node.parent;\n        node.remove();\n        this._refreshElements(parent);\n\n        return this.element;\n    }\n\n    public appendNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam || this.tree;\n\n        const node = parentNode.append(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public prependNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam ?? this.tree;\n\n        const node = parentNode.prepend(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public updateNode(node: Node, data: NodeData): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const idIsChanged =\n            typeof data === \"object\" && data.id && data.id !== node.id;\n\n        if (idIsChanged) {\n            this.tree.removeNodeFromIndex(node);\n        }\n\n        node.setData(data);\n\n        if (idIsChanged) {\n            this.tree.addNodeToIndex(node);\n        }\n\n        if (\n            typeof data === \"object\" &&\n            data[\"children\"] &&\n            data[\"children\"] instanceof Array\n        ) {\n            node.removeChildren();\n\n            if (data.children.length) {\n                node.loadFromData(data.children as Node[]);\n            }\n        }\n\n        this._refreshElements(node);\n\n        return this.element;\n    }\n\n    private isSelectedNodeInSubtree(subtree: Node): boolean {\n        const selectedNode = this.getSelectedNode();\n\n        if (!selectedNode) {\n            return false;\n        } else {\n            return subtree === selectedNode || subtree.isParentOf(selectedNode);\n        }\n    }\n\n    public moveNode(node: Node, targetNode: Node, position: string): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!targetNode) {\n            throw Error(PARAM_IS_EMPTY + \"targetNode\");\n        }\n\n        const positionIndex = getPosition(position);\n\n        if (positionIndex !== undefined) {\n            this.tree.moveNode(node, targetNode, positionIndex);\n            this._refreshElements(null);\n        }\n\n        return this.element;\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        return this.saveStateHandler.getStateFromStorage();\n    }\n\n    public addToSelection(node: Node, mustSetFocus?: boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.addToSelection(node);\n        this.openParents(node);\n\n        this._getNodeElementForNode(node).select(\n            mustSetFocus === undefined ? true : mustSetFocus,\n        );\n\n        this.saveState();\n\n        return this.element;\n    }\n\n    public getSelectedNodes(): Node[] {\n        return this.selectNodeHandler.getSelectedNodes();\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        return this.selectNodeHandler.isNodeSelected(node);\n    }\n\n    public removeFromSelection(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.removeFromSelection(node);\n\n        this._getNodeElementForNode(node).deselect();\n        this.saveState();\n\n        return this.element;\n    }\n\n    public scrollToNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const top =\n            getOffsetTop(node.element) -\n            getOffsetTop(this.$el.get(0) as HTMLElement);\n\n        this.scrollHandler.scrollToY(top);\n\n        return this.element;\n    }\n\n    public getState(): SavedState | null {\n        return this.saveStateHandler.getState();\n    }\n\n    public setState(state: SavedState): JQuery {\n        this.saveStateHandler.setInitialState(state);\n        this._refreshElements(null);\n\n        return this.element;\n    }\n\n    public setOption(option: string, value: unknown): JQuery {\n        (this.options as unknown as Record<string, unknown>)[option] = value;\n        return this.element;\n    }\n\n    public moveDown(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveDown(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public moveUp(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveUp(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public getVersion(): string {\n        return __version__;\n    }\n\n    public _triggerEvent(\n        eventName: string,\n        values?: Record<string, unknown>,\n    ): JQuery.Event {\n        const event = jQuery.Event(eventName, values);\n        this.element.trigger(event);\n        return event;\n    }\n\n    public _openNode(\n        node: Node,\n        slide = true,\n        onFinished?: OnFinishOpenNode,\n    ): void {\n        const doOpenNode = (\n            _node: Node,\n            _slide: boolean,\n            _onFinished?: OnFinishOpenNode,\n        ): void => {\n            const folderElement = this.createFolderElement(_node);\n            folderElement.open(\n                _onFinished,\n                _slide,\n                this.options.animationSpeed,\n            );\n        };\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            if (node.load_on_demand) {\n                this.loadFolderOnDemand(node, slide, onFinished);\n            } else {\n                let parent = node.parent;\n\n                while (parent) {\n                    // nb: do not open root element\n                    if (parent.parent) {\n                        doOpenNode(parent, false);\n                    }\n                    parent = parent.parent;\n                }\n\n                doOpenNode(node, slide, onFinished);\n                this.saveState();\n            }\n        }\n    }\n\n    /*\n    Redraw the tree or part of the tree.\n     from_node: redraw this subtree\n    */\n    public _refreshElements(fromNode: Node | null): void {\n        const mustSetFocus = this.isFocusOnTree();\n        const mustSelect = fromNode\n            ? this.isSelectedNodeInSubtree(fromNode)\n            : false;\n\n        this.renderer.render(fromNode);\n\n        if (mustSelect) {\n            this.selectCurrentNode(mustSetFocus);\n        }\n\n        this._triggerEvent(\"tree.refresh\");\n    }\n\n    public _getNodeElementForNode(node: Node): NodeElement {\n        if (node.isFolder()) {\n            return this.createFolderElement(node);\n        } else {\n            return this.createNodeElement(node);\n        }\n    }\n\n    public _getNodeElement(element: HTMLElement): NodeElement | null {\n        const node = this.getNode(element);\n        if (node) {\n            return this._getNodeElementForNode(node);\n        } else {\n            return null;\n        }\n    }\n\n    public init(): void {\n        super.init();\n\n        this.element = this.$el;\n        this.isInitialized = false;\n\n        this.options.rtl = this.getRtlOption();\n\n        if (this.options.closedIcon == null) {\n            this.options.closedIcon = this.getDefaultClosedIcon();\n        }\n\n        this.connectHandlers();\n\n        this.initData();\n\n        this.element.on(\"click\", this.handleClick);\n        this.element.on(\"dblclick\", this.handleDblclick);\n\n        if (this.options.useContextMenu) {\n            this.element.on(\"contextmenu\", this.handleContextmenu);\n        }\n    }\n\n    public deinit(): void {\n        this.element.empty();\n        this.element.off();\n\n        this.keyHandler.deinit();\n        this.mouseHandler.deinit();\n\n        this.tree = new Node({}, true);\n\n        super.deinit();\n    }\n\n    protected mouseCapture(positionInfo: PositionInfo): boolean | null {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseCapture(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStart(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStart(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseDrag(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            const result = this.dndHandler.mouseDrag(positionInfo);\n\n            this.scrollHandler.checkScrolling(positionInfo);\n            return result;\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStop(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            this.scrollHandler.stopScrolling();\n            return this.dndHandler.mouseStop(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    private getMouseDelay(): number {\n        return this.options.startDndDelay ?? 0;\n    }\n\n    private initData(): void {\n        if (this.options.data) {\n            this.doLoadData(this.options.data, null);\n        } else {\n            const dataUrl = this.getDataUrlInfo(null);\n\n            if (dataUrl) {\n                this.doLoadDataFromUrl(null, null, null);\n            } else {\n                this.doLoadData([], null);\n            }\n        }\n    }\n\n    private getDataUrlInfo(node: Node | null): JQuery.AjaxSettings | null {\n        const dataUrl =\n            this.options.dataUrl || (this.element.data(\"url\") as string | null);\n\n        const getUrlFromString = (url: string): JQuery.AjaxSettings => {\n            const urlInfo: JQuery.AjaxSettings = { url };\n\n            setUrlInfoData(urlInfo);\n\n            return urlInfo;\n        };\n\n        const setUrlInfoData = (urlInfo: JQuery.AjaxSettings): void => {\n            if (node?.id) {\n                // Load on demand of a subtree; add node parameter\n                const data = { node: node.id };\n                urlInfo[\"data\"] = data;\n            } else {\n                // Add selected_node parameter\n                const selectedNodeId = this.getNodeIdToBeSelected();\n                if (selectedNodeId) {\n                    const data = { selected_node: selectedNodeId };\n                    urlInfo[\"data\"] = data;\n                }\n            }\n        };\n\n        if (typeof dataUrl === \"function\") {\n            return dataUrl(node);\n        } else if (typeof dataUrl === \"string\") {\n            return getUrlFromString(dataUrl);\n        } else if (dataUrl && typeof dataUrl === \"object\") {\n            setUrlInfoData(dataUrl);\n            return dataUrl;\n        } else {\n            return null;\n        }\n    }\n\n    private getNodeIdToBeSelected(): NodeId | null {\n        if (this.options.saveState) {\n            return this.saveStateHandler.getNodeIdToBeSelected();\n        } else {\n            return null;\n        }\n    }\n\n    private initTree(data: NodeData[]): void {\n        const doInit = (): void => {\n            if (!this.isInitialized) {\n                this.isInitialized = true;\n                this._triggerEvent(\"tree.init\");\n            }\n        };\n\n        if (!this.options.nodeClass) {\n            return;\n        }\n\n        this.tree = new this.options.nodeClass(\n            null,\n            true,\n            this.options.nodeClass,\n        );\n\n        this.selectNodeHandler.clear();\n\n        this.tree.loadFromData(data);\n\n        const mustLoadOnDemand = this.setInitialState();\n\n        this._refreshElements(null);\n\n        if (!mustLoadOnDemand) {\n            doInit();\n        } else {\n            // Load data on demand and then init the tree\n            this.setInitialStateOnDemand(doInit);\n        }\n    }\n\n    // Set initial state, either by restoring the state or auto-opening nodes\n    // result: must load nodes on demand?\n    private setInitialState(): boolean {\n        const restoreState = (): [boolean, boolean] => {\n            // result: is state restored, must load on demand?\n            if (!this.options.saveState) {\n                return [false, false];\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return [false, false];\n                } else {\n                    const mustLoadOnDemand =\n                        this.saveStateHandler.setInitialState(state);\n\n                    // return true: the state is restored\n                    return [true, mustLoadOnDemand];\n                }\n            }\n        };\n\n        const autoOpenNodes = (): boolean => {\n            // result: must load on demand?\n            if (this.options.autoOpen === false) {\n                return false;\n            }\n\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let mustLoadOnDemand = false;\n\n            this.tree.iterate((node: Node, level: number) => {\n                if (node.load_on_demand) {\n                    mustLoadOnDemand = true;\n                    return false;\n                } else if (!node.hasChildren()) {\n                    return false;\n                } else {\n                    node.is_open = true;\n                    return level !== maxLevel;\n                }\n            });\n\n            return mustLoadOnDemand;\n        };\n\n        let [isRestored, mustLoadOnDemand] = restoreState(); // eslint-disable-line prefer-const\n\n        if (!isRestored) {\n            mustLoadOnDemand = autoOpenNodes();\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    // Set the initial state for nodes that are loaded on demand\n    // Call cb_finished when done\n    private setInitialStateOnDemand(cbFinished: () => void): void {\n        const restoreState = (): boolean => {\n            if (!this.options.saveState) {\n                return false;\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return false;\n                } else {\n                    this.saveStateHandler.setInitialStateOnDemand(\n                        state,\n                        cbFinished,\n                    );\n\n                    return true;\n                }\n            }\n        };\n\n        const autoOpenNodes = (): void => {\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let loadingCount = 0;\n\n            const loadAndOpenNode = (node: Node): void => {\n                loadingCount += 1;\n                this._openNode(node, false, () => {\n                    loadingCount -= 1;\n                    openNodes();\n                });\n            };\n\n            const openNodes = (): void => {\n                this.tree.iterate((node: Node, level: number) => {\n                    if (node.load_on_demand) {\n                        if (!node.is_loading) {\n                            loadAndOpenNode(node);\n                        }\n\n                        return false;\n                    } else {\n                        this._openNode(node, false);\n\n                        return level !== maxLevel;\n                    }\n                });\n\n                if (loadingCount === 0) {\n                    cbFinished();\n                }\n            };\n\n            openNodes();\n        };\n\n        if (!restoreState()) {\n            autoOpenNodes();\n        }\n    }\n\n    private getAutoOpenMaxLevel(): number {\n        if (this.options.autoOpen === true) {\n            return -1;\n        } else if (typeof this.options.autoOpen === \"number\") {\n            return this.options.autoOpen;\n        } else if (typeof this.options.autoOpen === \"string\") {\n            return parseInt(this.options.autoOpen, 10);\n        } else {\n            return 0;\n        }\n    }\n\n    private handleClick = (\n        e: JQuery.ClickEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget) {\n            if (clickTarget.type === \"button\") {\n                this.toggle(clickTarget.node, this.options.slide);\n\n                e.preventDefault();\n                e.stopPropagation();\n            } else if (clickTarget.type === \"label\") {\n                const node = clickTarget.node;\n                const event = this._triggerEvent(\"tree.click\", {\n                    node,\n                    click_event: e,\n                });\n\n                if (!event.isDefaultPrevented()) {\n                    this.doSelectNode(node);\n                }\n            }\n        }\n    };\n\n    private handleDblclick = (\n        e: JQuery.DoubleClickEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget?.type === \"label\") {\n            this._triggerEvent(\"tree.dblclick\", {\n                node: clickTarget.node,\n                click_event: e,\n            });\n        }\n    };\n\n    private getClickTarget(element: HTMLElement): ClickTarget | null {\n        const button = element.closest(\".jqtree-toggler\");\n\n        if (button) {\n            const node = this.getNode(button as HTMLElement);\n\n            if (node) {\n                return {\n                    type: \"button\",\n                    node,\n                };\n            }\n        } else {\n            const jqTreeElement = element.closest(\".jqtree-element\");\n\n            if (jqTreeElement) {\n                const node = this.getNode(jqTreeElement as HTMLElement);\n                if (node) {\n                    return {\n                        type: \"label\",\n                        node,\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    private getNode(element: HTMLElement): null | Node {\n        const liElement = element.closest(\"li.jqtree_common\");\n\n        if (liElement) {\n            return jQuery(liElement).data(\"node\") as Node;\n        } else {\n            return null;\n        }\n    }\n\n    private handleContextmenu = (\n        e: JQuery.ContextMenuEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ) => {\n        const div = e.target.closest(\"ul.jqtree-tree .jqtree-element\");\n\n        if (div) {\n            const node = this.getNode(div as HTMLElement);\n            if (node) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                this._triggerEvent(\"tree.contextmenu\", {\n                    node,\n                    click_event: e,\n                });\n                return false;\n            }\n        }\n\n        return null;\n    };\n\n    private saveState(): void {\n        if (this.options.saveState) {\n            this.saveStateHandler.saveState();\n        }\n    }\n\n    private selectCurrentNode(mustSetFocus: boolean): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            const nodeElement = this._getNodeElementForNode(node);\n            if (nodeElement) {\n                nodeElement.select(mustSetFocus);\n            }\n        }\n    }\n\n    private deselectCurrentNode(): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            this.removeFromSelection(node);\n        }\n    }\n\n    private getDefaultClosedIcon(): string {\n        if (this.options.rtl) {\n            // triangle to the left\n            return \"&#x25c0;\";\n        } else {\n            // triangle to the right\n            return \"&#x25ba;\";\n        }\n    }\n\n    private getRtlOption(): boolean {\n        if (this.options.rtl != null) {\n            return this.options.rtl;\n        } else {\n            const dataRtl = this.element.data(\"rtl\") as unknown;\n\n            if (\n                dataRtl !== null &&\n                dataRtl !== false &&\n                dataRtl !== undefined\n            ) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    private doSelectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): void {\n        const saveState = (): void => {\n            if (this.options.saveState) {\n                this.saveStateHandler.saveState();\n            }\n        };\n\n        if (!node) {\n            // Called with empty node -> deselect current node\n            this.deselectCurrentNode();\n            saveState();\n            return;\n        }\n        const defaultOptions = { mustSetFocus: true, mustToggle: true };\n        const selectOptions = { ...defaultOptions, ...(optionsParam || {}) };\n\n        const canSelect = (): boolean => {\n            if (this.options.onCanSelectNode) {\n                return (\n                    this.options.selectable === true &&\n                    this.options.onCanSelectNode(node)\n                );\n            } else {\n                return this.options.selectable === true;\n            }\n        };\n\n        if (!canSelect()) {\n            return;\n        }\n\n        if (this.selectNodeHandler.isNodeSelected(node)) {\n            if (selectOptions.mustToggle) {\n                this.deselectCurrentNode();\n                this._triggerEvent(\"tree.select\", {\n                    node: null,\n                    previous_node: node,\n                });\n            }\n        } else {\n            const deselectedNode = this.getSelectedNode() || null;\n            this.deselectCurrentNode();\n            this.addToSelection(node, selectOptions.mustSetFocus);\n\n            this._triggerEvent(\"tree.select\", {\n                node,\n                deselected_node: deselectedNode,\n            });\n            this.openParents(node);\n        }\n\n        saveState();\n    }\n\n    private doLoadData(data: NodeData[] | null, parentNode: Node | null): void {\n        if (data) {\n            if (parentNode) {\n                this.deselectNodes(parentNode);\n                this.loadSubtree(data, parentNode);\n            } else {\n                this.initTree(data);\n            }\n\n            if (this.isDragging()) {\n                this.dndHandler.refresh();\n            }\n        }\n\n        this._triggerEvent(\"tree.load_data\", {\n            tree_data: data,\n            parent_node: parentNode,\n        });\n    }\n\n    private deselectNodes(parentNode: Node): void {\n        const selectedNodesUnderParent =\n            this.selectNodeHandler.getSelectedNodesUnder(parentNode);\n        for (const n of selectedNodesUnderParent) {\n            this.selectNodeHandler.removeFromSelection(n);\n        }\n    }\n\n    private loadSubtree(data: NodeData[], parentNode: Node): void {\n        parentNode.loadFromData(data);\n\n        parentNode.load_on_demand = false;\n        parentNode.is_loading = false;\n\n        this._refreshElements(parentNode);\n    }\n\n    private doLoadDataFromUrl(\n        urlInfoParam: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null,\n    ): void {\n        const urlInfo = urlInfoParam || this.getDataUrlInfo(parentNode);\n\n        this.dataLoader.loadFromUrl(urlInfo, parentNode, onFinished);\n    }\n\n    private loadFolderOnDemand(\n        node: Node,\n        slide = true,\n        onFinished?: OnFinishOpenNode,\n    ): void {\n        node.is_loading = true;\n\n        this.doLoadDataFromUrl(null, node, () => {\n            this._openNode(node, slide, onFinished);\n        });\n    }\n\n    private containsElement(element: HTMLElement): boolean {\n        const node = this.getNode(element);\n\n        return node != null && node.tree === this.tree;\n    }\n\n    private isFocusOnTree(): boolean {\n        const activeElement = document.activeElement;\n\n        return Boolean(\n            activeElement &&\n                activeElement.tagName === \"SPAN\" &&\n                this.containsElement(activeElement as HTMLElement),\n        );\n    }\n\n    private connectHandlers() {\n        const {\n            autoEscape,\n            buttonLeft,\n            closedIcon,\n            dataFilter,\n            dragAndDrop,\n            keyboardSupport,\n            onCanMove,\n            onCreateLi,\n            onDragMove,\n            onDragStop,\n            onGetStateFromStorage,\n            onIsMoveHandle,\n            onLoadFailed,\n            onLoading,\n            onSetStateFromStorage,\n            openedIcon,\n            openFolderDelay,\n            rtl,\n            saveState,\n            showEmptyFolder,\n            slide,\n            tabIndex,\n        } = this.options;\n\n        const closeNode = this.closeNode.bind(this);\n        const getNodeElement = this._getNodeElement.bind(this);\n        const getNodeElementForNode = this._getNodeElementForNode.bind(this);\n        const getNodeById = this.getNodeById.bind(this);\n        const getSelectedNode = this.getSelectedNode.bind(this);\n        const getTree = this.getTree.bind(this);\n        const isFocusOnTree = this.isFocusOnTree.bind(this);\n        const loadData = this.loadData.bind(this);\n        const openNode = this._openNode.bind(this);\n        const refreshElements = this._refreshElements.bind(this);\n        const refreshHitAreas = this.refreshHitAreas.bind(this);\n        const selectNode = this.selectNode.bind(this);\n        const $treeElement = this.element;\n        const treeElement = this.element.get(0) as HTMLElement;\n        const triggerEvent = this._triggerEvent.bind(this);\n\n        const selectNodeHandler = new SelectNodeHandler({\n            getNodeById,\n        });\n\n        const addToSelection =\n            selectNodeHandler.addToSelection.bind(selectNodeHandler);\n        const getSelectedNodes =\n            selectNodeHandler.getSelectedNodes.bind(selectNodeHandler);\n        const isNodeSelected =\n            selectNodeHandler.isNodeSelected.bind(selectNodeHandler);\n        const removeFromSelection =\n            selectNodeHandler.removeFromSelection.bind(selectNodeHandler);\n        const getMouseDelay = this.getMouseDelay.bind(this);\n\n        const dataLoader = new DataLoader({\n            dataFilter,\n            loadData,\n            onLoadFailed,\n            onLoading,\n            $treeElement,\n            triggerEvent,\n        });\n\n        const saveStateHandler = new SaveStateHandler({\n            addToSelection,\n            getNodeById,\n            getSelectedNodes,\n            getTree,\n            onGetStateFromStorage,\n            onSetStateFromStorage,\n            openNode,\n            refreshElements,\n            removeFromSelection,\n            saveState,\n        });\n\n        const scrollHandler = new ScrollHandler({\n            refreshHitAreas,\n            treeElement,\n        });\n\n        const getScrollLeft = scrollHandler.getScrollLeft.bind(scrollHandler);\n\n        const dndHandler = new DragAndDropHandler({\n            autoEscape,\n            getNodeElement,\n            getNodeElementForNode,\n            getScrollLeft,\n            getTree,\n            onCanMove,\n            onDragMove,\n            onDragStop,\n            onIsMoveHandle,\n            openFolderDelay,\n            openNode,\n            refreshElements,\n            slide,\n            treeElement,\n            triggerEvent,\n        });\n\n        const keyHandler = new KeyHandler({\n            closeNode,\n            getSelectedNode,\n            isFocusOnTree,\n            keyboardSupport,\n            openNode,\n            selectNode,\n        });\n\n        const renderer = new ElementsRenderer({\n            autoEscape,\n            buttonLeft,\n            closedIcon,\n            dragAndDrop,\n            $element: $treeElement,\n            getTree,\n            isNodeSelected,\n            onCreateLi,\n            openedIcon,\n            rtl,\n            showEmptyFolder,\n            tabIndex,\n        });\n\n        const onMouseCapture = this.mouseCapture.bind(this);\n        const onMouseDrag = this.mouseDrag.bind(this);\n        const onMouseStart = this.mouseStart.bind(this);\n        const onMouseStop = this.mouseStop.bind(this);\n\n        const mouseHandler = new MouseHandler({\n            element: treeElement,\n            getMouseDelay,\n            onMouseCapture,\n            onMouseDrag,\n            onMouseStart,\n            onMouseStop,\n        });\n\n        this.dataLoader = dataLoader;\n        this.dndHandler = dndHandler;\n        this.keyHandler = keyHandler;\n        this.mouseHandler = mouseHandler;\n        this.renderer = renderer;\n        this.saveStateHandler = saveStateHandler;\n        this.scrollHandler = scrollHandler;\n        this.selectNodeHandler = selectNodeHandler;\n    }\n\n    private createFolderElement(node: Node) {\n        const closedIconElement = this.renderer.closedIconElement;\n        const getScrollLeft = this.scrollHandler.getScrollLeft.bind(\n            this.scrollHandler,\n        );\n        const openedIconElement = this.renderer.openedIconElement;\n        const tabIndex = this.options.tabIndex;\n        const $treeElement = this.element;\n        const triggerEvent = this._triggerEvent.bind(this);\n\n        return new FolderElement({\n            closedIconElement,\n            getScrollLeft,\n            node,\n            openedIconElement,\n            tabIndex,\n            $treeElement,\n            triggerEvent,\n        });\n    }\n\n    private createNodeElement(node: Node) {\n        const getScrollLeft = this.scrollHandler.getScrollLeft.bind(\n            this.scrollHandler,\n        );\n        const tabIndex = this.options.tabIndex;\n        const $treeElement = this.element;\n\n        return new NodeElement({\n            getScrollLeft,\n            node,\n            tabIndex,\n            $treeElement,\n        });\n    }\n\n    private openParents(node: Node) {\n        const parent = node.parent;\n\n        if (parent && parent.parent && !parent.is_open) {\n            this.openNode(parent, false);\n        }\n    }\n}\n\nSimpleWidget.register(JqTreeWidget, \"tree\");\n","const version = \"1.8.0\";\n\nexport default version;\n"],"names":["Position","positionNames","before","Before","after","After","inside","Inside","none","None","getPositionName","position","name","Object","prototype","hasOwnProperty","call","DragElement","constructor","_ref","autoEscape","nodeName","offsetX","offsetY","treeElement","this","element","createElement","appendChild","move","pageX","pageY","style","left","top","remove","document","classList","add","textContent","innerHTML","getBoolString","value","getOffsetTop","getElementPosition","rect","getBoundingClientRect","x","window","scrollX","y","scrollY","VisibleNodeIterator","tree","iterate","isFirstNode","_iterateNode","node","nextNode","mustIterateInside","is_open","hasChildren","offsetParent","handleFirstNode","handleOpenFolder","handleClosedFolder","handleNode","childrenLength","children","length","forEach","_","i","child","nextChild","handleAfterOpenFolder","HitAreasGenerator","currentNode","treeBottom","super","generate","positions","lastTop","generateHitAreas","previousTop","group","hitAreas","generateHitAreasForGroup","push","addPosition","area","bottom","positionsInGroup","positionCount","Math","min","areaHeight","round","areaTop","DragAndDropHandler","getNodeElement","getNodeElementForNode","getScrollLeft","getTree","onCanMove","onCanMoveTo","onDragMove","onDragStop","onIsMoveHandle","openNode","refreshElements","slide","triggerEvent","hoveredArea","isDragging","currentItem","mouseCapture","positionInfo","target","mustCaptureElement","jQuery","nodeElement","mouseStart","undefined","refresh","dragElement","mouseDrag","findHoveredArea","canMoveToArea","isFolder","stopOpenFolderTimer","mustOpenFolderTimer","startOpenFolderTimer","updateDropHint","removeDropHint","originalEvent","mouseStop","moveItem","clear","removeHover","removeHitAreas","hitAreasGenerator","getTreeDimensions","positionName","previousGhost","dimensions","right","low","high","mid","addDropHint","folder","openFolder","openFolderDelay","openFolderTimer","setTimeout","clearTimeout","movedNode","targetNode","previousParent","parent","doMove","moveNode","move_info","moved_node","target_node","previous_parent","do_move","original_event","isDefaultPrevented","treePosition","clientWidth","clientHeight","ElementsRenderer","buttonLeft","closedIcon","onCreateLi","dragAndDrop","$element","isNodeSelected","openedIcon","rtl","showEmptyFolder","tabIndex","openedIconElement","createButtonElement","closedIconElement","render","fromNode","renderFromNode","renderFromRoot","empty","createDomElements","$previousLi","li","createLi","getLevel","attachNodeData","isRootNode","level","ul","createUl","data","classString","role","className","setAttribute","isSelected","Boolean","isEmptyFolder","createFolderLi","createNodeLi","setTreeItemAriaAttributes","buttonClasses","getButtonClasses","folderClasses","getFolderClasses","iconElement","div","buttonLink","cloneNode","titleSpan","createTitleSpan","liClasses","join","classes","is_loading","createTextNode","nodeType","DataLoader","dataFilter","loadData","onLoadFailed","onLoading","$treeElement","loadFromUrl","urlInfo","parentNode","onFinished","$el","getDomElement","addLoadingClass","notifyLoading","stopLoading","removeLoadingClass","submitRequest","parseData","jqXHR","addClass","removeClass","isLoading","urlInfoInput","handleSuccess","handleError","ajaxSettings","method","cache","dataType","success","error","url","toUpperCase","ajax","parsedData","JSON","parse","KeyHandler","closeNode","getSelectedNode","isFocusOnTree","keyboardSupport","selectNode","originalSelectNode","handleKeyDownHandler","handleKeyDown","bind","addEventListener","deinit","removeEventListener","moveDown","selectedNode","getNextVisibleNode","moveUp","getPreviousVisibleNode","moveRight","moveLeft","getParent","e","canHandleKeyboard","key","getPositionInfoFromMouseEvent","getPositionInfoFromTouch","touch","MouseHandler","getMouseDelay","onMouseCapture","onMouseDrag","onMouseStart","onMouseStop","mouseDown","passive","touchStart","isMouseStarted","mouseDelayTimer","isMouseDelayMet","mouseDownInfo","removeMouseMoveEventListeners","button","handleMouseDown","cancelable","preventDefault","handleMouseUp","handleStartMouse","mouseMove","touchMove","mouseUp","touchEnd","mouseDelay","startMouseDelayTimer","handleMouseMove","touches","changedTouches","SaveStateHandler","addToSelection","getNodeById","getSelectedNodes","onGetStateFromStorage","onSetStateFromStorage","removeFromSelection","saveState","saveStateOption","state","stringify","getState","supportsLocalStorage","localStorage","setItem","getKeyName","getStateFromStorage","jsonData","loadFromStorage","parseState","open_nodes","getOpenNodeIds","openNodes","id","selected_node","getSelectedNodeIds","selectedNodeIds","setInitialState","mustLoadOnDemand","openInitialNodes","resetSelection","selectInitialNodes","setInitialStateOnDemand","cbFinished","doSetInitialStateOnDemand","getNodeIdToBeSelected","n","getItem","nodeIds","nodeId","load_on_demand","selectCount","nodeIdsParam","selectedNodes","loadingCount","newNodesIds","loadAndOpenNode","_supportsLocalStorage","testSupport","sessionStorage","removeItem","ContainerScrollParent","container","refreshHitAreas","checkHorizontalScrolling","newHorizontalScrollDirection","getNewHorizontalScrollDirection","horizontalScrollDirection","horizontalScrollTimeout","verticalScrollTimeout","scrollHorizontally","checkVerticalScrolling","newVerticalScrollDirection","getNewVerticalScrollDirection","verticalScrollDirection","scrollVertically","scrollLeft","scrollToY","scrollTop","stopScrolling","scrollParentTop","scrollParentBottom","scrollParentOffset","rightEdge","leftEdge","getScrollParentTop","getScrollParentBottom","distance","scrollBy","behavior","DocumentScrollParent","documentElement","treeTop","documentScrollHeight","documentScrollWidth","isNearLeftEdge","innerWidth","canScrollRight","getDocumentScrollWidth","canScrollDown","getDocumentScrollHeight","scrollHeight","scrollWidth","innerHeight","isOverflow","overflowValue","hasOverFlow","getComputedStyle","overflowX","overflowY","createScrollParent","parentElement","getParentWithOverflow","tagName","ScrollHandler","scrollParent","checkScrolling","getScrollParent","SelectNodeHandler","Set","selectedSingleNode","getSelectedNodesUnder","isParentOf","has","includeChildren","arguments","delete","register","widgetClass","widgetName","getDataKey","getWidgetData","el","dataKey","widget","SimpleWidget","createWidget","options","get","init","fn","argument1","functionName","destroy","removeData","destroyWidget","_len","args","Array","_key","callFunction","result","widgetFunction","apply","static","defaults","isNodeRecordWithChildren","Node","nodeData","isRoot","nodeClass","setData","idMapping","Map","o","loadFromData","removeChildren","childData","createNode","addChild","setParent","addChildAtPosition","index","splice","removeChild","doRemoveChild","getChildIndex","indexOf","callback","_iterate","getData","getDataFromNodes","nodes","map","tmpNode","k","v","getNodeByName","getNodeByCallback","getNodeByNameMustExist","addAfter","nodeInfo","childIndex","loadChildrenFromData","addBefore","addParent","newParent","originalParent","append","prepend","addNodeToIndex","set","removeNodeFromIndex","getPreviousSibling","previousIndex","getNextSibling","nextIndex","getNodesByProperty","filter","f","getNextNode","nextSibling","getPreviousNode","previousSibling","getLastChild","lastChild","initFromData","addChildren","childrenData","addNode","getNodeClass","BorderDropHint","querySelector","hint","width","max","offsetWidth","height","GhostDropHint","ghost","createGhostElement","moveAfter","moveBefore","moveInsideOpenFolder","moveInside","childElement","circleSpan","lineSpan","NodeElement","mustShowBorderDropHint","select","mustSetFocus","getTitleSpan","toString","focus","deselect","removeAttribute","blur","getUl","FolderElement","open","animationSpeed","getButton","icon","doOpen","slideDown","show","close","doClose","slideUp","hide","NODE_PARAM_IS_EMPTY","PARAM_IS_EMPTY","JqTreeWidget","autoOpen","dataUrl","onCanSelectNode","selectable","startDndDelay","useContextMenu","toggle","slideParam","Error","optionsParam","doSelectNode","selectNodeHandler","toJson","doLoadData","loadDataFromUrl","param1","param2","param3","doLoadDataFromUrl","reload","_refreshElements","getNodeByHtmlElement","inputElement","HTMLElement","getNode","parseParams","_openNode","createFolderElement","dndHandler","addNodeAfter","newNodeInfo","existingNode","newNode","addNodeBefore","addParentNode","removeNode","appendNode","parentNodeParam","prependNode","updateNode","idIsChanged","isSelectedNodeInSubtree","subtree","positionIndex","saveStateHandler","openParents","_getNodeElementForNode","scrollToNode","scrollHandler","setState","setOption","option","keyHandler","getVersion","_triggerEvent","eventName","values","event","Event","trigger","doOpenNode","_node","_slide","_onFinished","loadFolderOnDemand","mustSelect","renderer","selectCurrentNode","createNodeElement","_getNodeElement","isInitialized","getRtlOption","getDefaultClosedIcon","connectHandlers","initData","on","handleClick","handleDblclick","handleContextmenu","off","mouseHandler","getDataUrlInfo","setUrlInfoData","selectedNodeId","getUrlFromString","initTree","doInit","autoOpenNodes","maxLevel","getAutoOpenMaxLevel","isRestored","restoreState","parseInt","clickTarget","getClickTarget","type","stopPropagation","click_event","closest","jqTreeElement","liElement","deselectCurrentNode","dataRtl","selectOptions","mustToggle","canSelect","previous_node","deselectedNode","deselected_node","deselectNodes","loadSubtree","tree_data","parent_node","selectedNodesUnderParent","urlInfoParam","dataLoader","containsElement","activeElement"],"mappings":"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"}