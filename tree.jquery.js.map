{"version":3,"file":"tree.jquery.js","sources":["src/version.ts","src/nodeUtils.ts","src/node.ts","src/dragAndDropHandler/dragElement.ts","src/util.ts","src/dragAndDropHandler/visibleNodeIterator.ts","src/dragAndDropHandler/hitAreasGenerator.ts","src/dragAndDropHandler/index.ts","src/elementsRenderer.ts","src/dataLoader.ts","src/keyHandler.ts","src/simple.widget.ts","src/mouse.widget.ts","src/saveStateHandler.ts","src/scrollHandler/containerScrollParent.ts","src/scrollHandler/documentScrollParent.ts","src/scrollHandler/createScrollParent.ts","src/scrollHandler.ts","src/selectNodeHandler.ts","src/nodeElement/borderDropHint.ts","src/nodeElement/ghostDropHint.ts","src/nodeElement/index.ts","src/nodeElement/folderElement.ts","src/tree.jquery.ts"],"sourcesContent":["const version = \"1.8.0\";\n\nexport default version;\n","interface NodeRecordWithChildren extends NodeRecord {\n    children: NodeData[];\n}\n\nexport const isNodeRecordWithChildren = (\n    data: NodeData,\n): data is NodeRecordWithChildren =>\n    typeof data === \"object\" &&\n    \"children\" in data &&\n    data[\"children\"] instanceof Array;\n","import { isNodeRecordWithChildren } from \"./nodeUtils\";\n\nexport enum Position {\n    Before = 1,\n    After,\n    Inside,\n    None,\n}\n\nconst positionNames: Record<string, Position> = {\n    before: Position.Before,\n    after: Position.After,\n    inside: Position.Inside,\n    none: Position.None,\n};\n\ntype IterateCallback = (node: Node, level: number) => boolean;\n\nexport const getPositionName = (position: Position): string => {\n    for (const name in positionNames) {\n        if (Object.prototype.hasOwnProperty.call(positionNames, name)) {\n            if (positionNames[name] === position) {\n                return name;\n            }\n        }\n    }\n\n    return \"\";\n};\n\nexport const getPosition = (name: string): Position | undefined =>\n    positionNames[name];\n\nexport class Node implements INode {\n    public id?: NodeId;\n    public name: string;\n    public children: Node[];\n    public parent: Node | null;\n    public idMapping: Map<NodeId, Node>;\n    public tree?: Node;\n    public nodeClass?: typeof Node;\n    public load_on_demand: boolean;\n    public is_open: boolean;\n    public element: HTMLElement;\n    public is_loading: boolean;\n    public isEmptyFolder: boolean;\n\n    [key: string]: unknown;\n\n    constructor(\n        nodeData: NodeData | null = null,\n        isRoot = false,\n        nodeClass = Node,\n    ) {\n        this.name = \"\";\n        this.load_on_demand = false;\n\n        this.isEmptyFolder =\n            nodeData != null &&\n            isNodeRecordWithChildren(nodeData) &&\n            nodeData.children.length === 0;\n\n        this.setData(nodeData);\n\n        this.children = [];\n        this.parent = null;\n\n        if (isRoot) {\n            this.idMapping = new Map<NodeId, Node>();\n            this.tree = this;\n            this.nodeClass = nodeClass;\n        }\n    }\n\n    /*\n    Set the data of this node.\n\n    setData(string): set the name of the node\n    setData(object): set attributes of the node\n\n    Examples:\n        setData('node1')\n\n        setData({ name: 'node1', id: 1});\n\n        setData({ name: 'node2', id: 2, color: 'green'});\n\n    * This is an internal function; it is not in the docs\n    * Does not remove existing node values\n    */\n    public setData(o: NodeData | null): void {\n        if (!o) {\n            return;\n        } else if (typeof o === \"string\") {\n            this.name = o;\n        } else if (typeof o === \"object\") {\n            for (const key in o) {\n                if (Object.prototype.hasOwnProperty.call(o, key)) {\n                    const value = o[key];\n\n                    if (key === \"label\" || key === \"name\") {\n                        // You can use the 'label' key instead of 'name'; this is a legacy feature\n                        if (typeof value === \"string\") {\n                            this.name = value;\n                        }\n                    } else if (key !== \"children\" && key !== \"parent\") {\n                        // You can't update the children or the parent using this function\n                        this[key] = value;\n                    }\n                }\n            }\n        }\n    }\n\n    /*\n    Create tree from data.\n\n    Structure of data is:\n    [\n        {\n            name: 'node1',\n            children: [\n                { name: 'child1' },\n                { name: 'child2' }\n            ]\n        },\n        {\n            name: 'node2'\n        }\n    ]\n    */\n    public loadFromData(data: NodeData[]): Node {\n        this.removeChildren();\n\n        for (const childData of data) {\n            const node = this.createNode(childData);\n            this.addChild(node);\n\n            if (isNodeRecordWithChildren(childData)) {\n                node.loadFromData(childData.children);\n            }\n        }\n\n        return this;\n    }\n\n    /*\n    Add child.\n\n    tree.addChild(\n        new Node('child1')\n    );\n    */\n    public addChild(node: Node): void {\n        this.children.push(node);\n        node.setParent(this);\n    }\n\n    /*\n    Add child at position. Index starts at 0.\n\n    tree.addChildAtPosition(\n        new Node('abc'),\n        1\n    );\n    */\n    public addChildAtPosition(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        node.setParent(this);\n    }\n\n    /*\n    Remove child. This also removes the children of the node.\n\n    tree.removeChild(tree.children[0]);\n    */\n    public removeChild(node: Node): void {\n        // remove children from the index\n        node.removeChildren();\n\n        this.doRemoveChild(node);\n    }\n\n    /*\n    Get child index.\n\n    var index = getChildIndex(node);\n    */\n    public getChildIndex(node: Node): number {\n        return this.children.indexOf(node);\n    }\n\n    /*\n    Does the tree have children?\n\n    if (tree.hasChildren()) {\n        //\n    }\n    */\n    public hasChildren(): boolean {\n        return this.children.length !== 0;\n    }\n\n    public isFolder(): boolean {\n        return this.hasChildren() || this.load_on_demand;\n    }\n\n    /*\n    Iterate over all the nodes in the tree.\n\n    Calls callback with (node, level).\n\n    The callback must return true to continue the iteration on current node.\n\n    tree.iterate(\n        function(node, level) {\n           console.log(node.name);\n\n           // stop iteration after level 2\n           return (level <= 2);\n        }\n    );\n\n    */\n    public iterate(callback: IterateCallback): void {\n        const _iterate = (node: Node, level: number): void => {\n            if (node.children) {\n                for (const child of node.children) {\n                    const result = callback(child, level);\n\n                    if (result && child.hasChildren()) {\n                        _iterate(child, level + 1);\n                    }\n                }\n            }\n        };\n\n        _iterate(this, 0);\n    }\n\n    /*\n    Move node relative to another node.\n\n    Argument position: Position.BEFORE, Position.AFTER or Position.Inside\n\n    // move node1 after node2\n    tree.moveNode(node1, node2, Position.AFTER);\n    */\n    public moveNode(\n        movedNode: Node,\n        targetNode: Node,\n        position: Position,\n    ): boolean {\n        if (!movedNode.parent || movedNode.isParentOf(targetNode)) {\n            // - Node is parent of target node\n            // - Or, parent is empty\n            return false;\n        } else {\n            movedNode.parent.doRemoveChild(movedNode);\n\n            switch (position) {\n                case Position.After: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode) + 1,\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Before: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode),\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Inside: {\n                    // move inside as first child\n                    targetNode.addChildAtPosition(movedNode, 0);\n                    return true;\n                }\n\n                default:\n                    return false;\n            }\n        }\n    }\n\n    /*\n    Get the tree as data.\n    */\n    public getData(includeParent = false): NodeRecord[] {\n        const getDataFromNodes = (nodes: Node[]): Record<string, unknown>[] => {\n            return nodes.map((node) => {\n                const tmpNode: Record<string, unknown> = {};\n\n                for (const k in node) {\n                    if (\n                        [\n                            \"parent\",\n                            \"children\",\n                            \"element\",\n                            \"idMapping\",\n                            \"load_on_demand\",\n                            \"nodeClass\",\n                            \"tree\",\n                            \"isEmptyFolder\",\n                        ].indexOf(k) === -1 &&\n                        Object.prototype.hasOwnProperty.call(node, k)\n                    ) {\n                        const v = node[k];\n                        tmpNode[k] = v;\n                    }\n                }\n\n                if (node.hasChildren()) {\n                    tmpNode[\"children\"] = getDataFromNodes(node.children);\n                }\n\n                return tmpNode;\n            });\n        };\n\n        if (includeParent) {\n            return getDataFromNodes([this]);\n        } else {\n            return getDataFromNodes(this.children);\n        }\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.getNodeByCallback((node: Node) => node.name === name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        const node = this.getNodeByCallback((n: Node) => n.name === name);\n\n        if (!node) {\n            throw `Node with name ${name} not found`;\n        }\n\n        return node;\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        let result: Node | null = null;\n\n        this.iterate((node: Node) => {\n            if (result) {\n                return false;\n            } else if (callback(node)) {\n                result = node;\n                return false;\n            } else {\n                return true;\n            }\n        });\n\n        return result;\n    }\n\n    public addAfter(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex + 1);\n\n            node.loadChildrenFromData(nodeInfo);\n            return node;\n        }\n    }\n\n    public addBefore(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex);\n\n            node.loadChildrenFromData(nodeInfo);\n            return node;\n        }\n    }\n\n    public addParent(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const newParent = this.createNode(nodeInfo);\n\n            if (this.tree) {\n                newParent.setParent(this.tree);\n            }\n            const originalParent = this.parent;\n\n            for (const child of originalParent.children) {\n                newParent.addChild(child);\n            }\n\n            originalParent.children = [];\n            originalParent.addChild(newParent);\n            return newParent;\n        }\n    }\n\n    public remove(): void {\n        if (this.parent) {\n            this.parent.removeChild(this);\n            this.parent = null;\n        }\n    }\n\n    public append(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChild(node);\n\n        node.loadChildrenFromData(nodeInfo);\n        return node;\n    }\n\n    public prepend(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChildAtPosition(node, 0);\n\n        node.loadChildrenFromData(nodeInfo);\n        return node;\n    }\n\n    public isParentOf(node: Node): boolean {\n        let parent = node.parent;\n\n        while (parent) {\n            if (parent === this) {\n                return true;\n            }\n\n            parent = parent.parent;\n        }\n\n        return false;\n    }\n\n    public getLevel(): number {\n        let level = 0;\n        let node: Node = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n        while (node.parent) {\n            level += 1;\n            node = node.parent;\n        }\n\n        return level;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.idMapping.get(nodeId) || null;\n    }\n\n    public addNodeToIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.set(node.id, node);\n        }\n    }\n\n    public removeNodeFromIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.delete(node.id);\n        }\n    }\n\n    public removeChildren(): void {\n        this.iterate((child: Node) => {\n            this.tree?.removeNodeFromIndex(child);\n            return true;\n        });\n\n        this.children = [];\n    }\n\n    public getPreviousSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousIndex = this.parent.getChildIndex(this) - 1;\n            if (previousIndex >= 0) {\n                return this.parent.children[previousIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNextSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const nextIndex = this.parent.getChildIndex(this) + 1;\n            if (nextIndex < this.parent.children.length) {\n                return this.parent.children[nextIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.filter((node: Node) => node[key] === value);\n    }\n\n    public filter(f: (node: Node) => boolean): Node[] {\n        const result: Node[] = [];\n\n        this.iterate((node: Node) => {\n            if (f(node)) {\n                result.push(node);\n            }\n\n            return true;\n        });\n\n        return result;\n    }\n\n    public getNextNode(includeChildren = true): Node | null {\n        if (includeChildren && this.hasChildren()) {\n            return this.children[0] || null;\n        } else if (!this.parent) {\n            return null;\n        } else {\n            const nextSibling = this.getNextSibling();\n\n            if (nextSibling) {\n                return nextSibling;\n            } else {\n                return this.parent.getNextNode(false);\n            }\n        }\n    }\n\n    public getNextVisibleNode(): Node | null {\n        if (this.hasChildren() && this.is_open) {\n            // First child\n            return this.children[0] || null;\n        } else {\n            if (!this.parent) {\n                return null;\n            } else {\n                const nextSibling = this.getNextSibling();\n                if (nextSibling) {\n                    // Next sibling\n                    return nextSibling;\n                } else {\n                    // Next node of parent\n                    return this.parent.getNextNode(false);\n                }\n            }\n        }\n    }\n\n    public getPreviousNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (previousSibling.hasChildren()) {\n                return previousSibling.getLastChild();\n            } else {\n                return previousSibling;\n            }\n        }\n    }\n\n    public getPreviousVisibleNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (\n                !previousSibling.hasChildren() ||\n                !previousSibling.is_open\n            ) {\n                // Previous sibling\n                return previousSibling;\n            } else {\n                // Last child of previous sibling\n                return previousSibling.getLastChild();\n            }\n        }\n    }\n\n    public getParent(): Node | null {\n        // Return parent except if it is the root node\n        if (!this.parent) {\n            return null;\n        } else if (!this.parent.parent) {\n            // Root node -> null\n            return null;\n        } else {\n            return this.parent;\n        }\n    }\n\n    public getLastChild(): Node | null {\n        if (!this.hasChildren()) {\n            return null;\n        } else {\n            const lastChild = this.children[this.children.length - 1];\n\n            if (!lastChild) {\n                return null;\n            }\n\n            if (!(lastChild.hasChildren() && lastChild.is_open)) {\n                return lastChild;\n            } else {\n                return lastChild?.getLastChild();\n            }\n        }\n    }\n\n    // Init Node from data without making it the root of the tree\n    public initFromData(data: NodeData): void {\n        const addNode = (nodeData: NodeData): void => {\n            this.setData(nodeData);\n\n            if (\n                isNodeRecordWithChildren(nodeData) &&\n                nodeData.children.length\n            ) {\n                addChildren(nodeData.children);\n            }\n        };\n\n        const addChildren = (childrenData: NodeData[]): void => {\n            for (const child of childrenData) {\n                const node = this.createNode();\n                node.initFromData(child);\n                this.addChild(node);\n            }\n        };\n\n        addNode(data);\n    }\n\n    private setParent(parent: Node): void {\n        this.parent = parent;\n        this.tree = parent.tree;\n        this.tree?.addNodeToIndex(this);\n    }\n\n    private doRemoveChild(node: Node): void {\n        this.children.splice(this.getChildIndex(node), 1);\n        this.tree?.removeNodeFromIndex(node);\n    }\n\n    private getNodeClass(): typeof Node {\n        return this.nodeClass || this?.tree?.nodeClass || Node;\n    }\n\n    private createNode(nodeData?: NodeData): Node {\n        const nodeClass = this.getNodeClass();\n        return new nodeClass(nodeData);\n    }\n\n    // Load children data from nodeInfo if it has children\n    private loadChildrenFromData(nodeInfo: NodeData) {\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            this.loadFromData(nodeInfo.children);\n        }\n    }\n}\n","interface DragElementParams {\n    autoEscape: boolean;\n    nodeName: string;\n    offsetX: number;\n    offsetY: number;\n    treeElement: HTMLElement;\n}\n\nclass DragElement {\n    private offsetX: number;\n    private offsetY: number;\n    private element: HTMLElement;\n\n    constructor({\n        autoEscape,\n        nodeName,\n        offsetX,\n        offsetY,\n        treeElement,\n    }: DragElementParams) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n\n        this.element = this.createElement(nodeName, autoEscape);\n\n        treeElement.appendChild(this.element);\n    }\n\n    public move(pageX: number, pageY: number): void {\n        this.element.style.left = `${pageX - this.offsetX}px`;\n        this.element.style.top = `${pageY - this.offsetY}px`;\n    }\n\n    public remove(): void {\n        this.element.remove();\n    }\n\n    private createElement(nodeName: string, autoEscape: boolean) {\n        const element = document.createElement(\"span\");\n        element.classList.add(\"jqtree-title\", \"jqtree-dragging\");\n\n        if (autoEscape) {\n            element.textContent = nodeName;\n        } else {\n            element.innerHTML = nodeName;\n        }\n\n        element.style.position = \"absolute\";\n\n        return element;\n    }\n}\n\nexport default DragElement;\n","export const isInt = (n: unknown): boolean =>\n    typeof n === \"number\" && n % 1 === 0;\n\nexport const isFunction = (v: unknown): boolean => typeof v === \"function\";\n\nexport const getBoolString = (value: unknown): string =>\n    value ? \"true\" : \"false\";\n\nexport const getOffsetTop = (element: HTMLElement) =>\n    getElementPosition(element).top;\n\nexport const getElementPosition = (element: HTMLElement) => {\n    const rect = element.getBoundingClientRect();\n\n    return {\n        left: rect.x + window.scrollX,\n        top: rect.y + window.scrollY,\n    };\n};\n","import { Node } from \"../node\";\n\nabstract class VisibleNodeIterator {\n    private tree: Node;\n\n    constructor(tree: Node) {\n        this.tree = tree;\n    }\n\n    protected iterate(): void {\n        let isFirstNode = true;\n\n        const _iterateNode = (node: Node, nextNode: Node | null): void => {\n            let mustIterateInside =\n                (node.is_open || !node.element) && node.hasChildren();\n\n            let element: HTMLElement | null = null;\n\n            // Is the element visible?\n            if (node.element?.offsetParent) {\n                element = node.element;\n\n                if (isFirstNode) {\n                    this.handleFirstNode(node);\n                    isFirstNode = false;\n                }\n\n                if (!node.hasChildren()) {\n                    this.handleNode(node, nextNode, node.element);\n                } else if (node.is_open) {\n                    if (!this.handleOpenFolder(node, node.element)) {\n                        mustIterateInside = false;\n                    }\n                } else {\n                    this.handleClosedFolder(node, nextNode, element);\n                }\n            }\n\n            if (mustIterateInside) {\n                const childrenLength = node.children.length;\n                node.children.forEach((_, i) => {\n                    const child = node.children[i];\n\n                    if (child) {\n                        if (i === childrenLength - 1) {\n                            _iterateNode(child, null);\n                        } else {\n                            const nextChild = node.children[i + 1];\n\n                            if (nextChild) {\n                                _iterateNode(child, nextChild);\n                            }\n                        }\n                    }\n                });\n\n                if (node.is_open && element) {\n                    this.handleAfterOpenFolder(node, nextNode);\n                }\n            }\n        };\n\n        _iterateNode(this.tree, null);\n    }\n\n    protected abstract handleNode(\n        node: Node,\n        nextNode: Node | null,\n        element: HTMLElement,\n    ): void;\n\n    /*\n    override\n    return\n        - true: continue iterating\n        - false: stop iterating\n    */\n    protected abstract handleOpenFolder(\n        node: Node,\n        element: HTMLElement,\n    ): boolean;\n\n    protected abstract handleClosedFolder(\n        node: Node,\n        nextNode: Node | null,\n        element: HTMLElement,\n    ): void;\n\n    protected abstract handleAfterOpenFolder(\n        node: Node,\n        nextNode: Node | null,\n    ): void;\n\n    protected abstract handleFirstNode(node: Node): void;\n}\n\nexport default VisibleNodeIterator;\n","import { HitArea } from \"./types\";\nimport { Node, Position } from \"../node\";\nimport { getOffsetTop } from \"../util\";\nimport VisibleNodeIterator from \"./visibleNodeIterator\";\n\nclass HitAreasGenerator extends VisibleNodeIterator {\n    private currentNode: Node;\n    private treeBottom: number;\n    private positions: HitArea[];\n    private lastTop: number;\n\n    constructor(tree: Node, currentNode: Node, treeBottom: number) {\n        super(tree);\n\n        this.currentNode = currentNode;\n        this.treeBottom = treeBottom;\n    }\n\n    public generate(): HitArea[] {\n        this.positions = [];\n        this.lastTop = 0;\n\n        this.iterate();\n\n        return this.generateHitAreas(this.positions);\n    }\n\n    protected generateHitAreas(positions: HitArea[]): HitArea[] {\n        let previousTop = positions[0]?.top ?? 0;\n        let group = [];\n        const hitAreas: HitArea[] = [];\n\n        for (const position of positions) {\n            if (position.top !== previousTop && group.length) {\n                this.generateHitAreasForGroup(\n                    hitAreas,\n                    group,\n                    previousTop,\n                    position.top,\n                );\n\n                previousTop = position.top;\n                group = [];\n            }\n\n            group.push(position);\n        }\n\n        this.generateHitAreasForGroup(\n            hitAreas,\n            group,\n            previousTop,\n            this.treeBottom,\n        );\n\n        return hitAreas;\n    }\n\n    protected handleOpenFolder(node: Node, element: HTMLElement): boolean {\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            // Stop iterating\n            return false;\n        }\n\n        // Cannot move before current item\n        if (node.children[0] !== this.currentNode) {\n            this.addPosition(node, Position.Inside, getOffsetTop(element));\n        }\n\n        // Continue iterating\n        return true;\n    }\n\n    protected handleClosedFolder(\n        node: Node,\n        nextNode: Node,\n        element: HTMLElement,\n    ): void {\n        const top = getOffsetTop(element);\n\n        if (node === this.currentNode) {\n            // Cannot move after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n\n            // Cannot move before current item\n            if (nextNode !== this.currentNode) {\n                this.addPosition(node, Position.After, top);\n            }\n        }\n    }\n\n    protected handleFirstNode(node: Node): void {\n        if (node !== this.currentNode) {\n            this.addPosition(node, Position.Before, getOffsetTop(node.element));\n        }\n    }\n\n    protected handleAfterOpenFolder(node: Node, nextNode: Node): void {\n        if (node === this.currentNode || nextNode === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, this.lastTop);\n        } else {\n            this.addPosition(node, Position.After, this.lastTop);\n        }\n    }\n\n    protected handleNode(\n        node: Node,\n        nextNode: Node,\n        element: HTMLElement,\n    ): void {\n        const top = getOffsetTop(element);\n\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n        }\n\n        if (nextNode === this.currentNode || node === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.After, top);\n        }\n    }\n\n    private addPosition(node: Node, position: number, top: number): void {\n        const area = {\n            top,\n            bottom: 0,\n            node,\n            position,\n        };\n\n        this.positions.push(area);\n        this.lastTop = top;\n    }\n\n    private generateHitAreasForGroup(\n        hitAreas: HitArea[],\n        positionsInGroup: HitArea[],\n        top: number,\n        bottom: number,\n    ): void {\n        // limit positions in group\n        const positionCount = Math.min(positionsInGroup.length, 4);\n\n        const areaHeight = Math.round((bottom - top) / positionCount);\n        let areaTop = top;\n\n        let i = 0;\n        while (i < positionCount) {\n            const position = positionsInGroup[i];\n\n            if (position) {\n                hitAreas.push({\n                    top: areaTop,\n                    bottom: areaTop + areaHeight,\n                    node: position.node,\n                    position: position.position,\n                });\n            }\n\n            areaTop += areaHeight;\n            i += 1;\n        }\n    }\n}\n\nexport default HitAreasGenerator;\n","import { getPositionName, Node, Position } from \"../node\";\nimport { DropHint, HitArea } from \"./types\";\nimport { PositionInfo } from \"../mouseWidgetTypes\";\nimport NodeElement from \"../nodeElement\";\nimport DragElement from \"./dragElement\";\nimport HitAreasGenerator from \"./hitAreasGenerator\";\nimport { getElementPosition } from \"../util\";\nimport {\n    OnCanMove,\n    OnCanMoveTo,\n    OnIsMoveHandle,\n    DragMethod,\n} from \"../jqtreeOptions\";\nimport {\n    GetTree,\n    OpenNode,\n    RefreshElements,\n    TriggerEvent,\n} from \"../jqtreeMethodTypes\";\n\ninterface Dimensions {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n}\n\ntype GetNodeElement = (element: HTMLElement) => NodeElement | null;\ntype GetNodeElementForNode = (node: Node) => NodeElement;\n\ninterface DragAndDropHandlerParams {\n    autoEscape?: boolean;\n    getNodeElement: GetNodeElement;\n    getNodeElementForNode: GetNodeElementForNode;\n    getTree: GetTree;\n    onCanMove?: OnCanMove;\n    onCanMoveTo?: OnCanMoveTo;\n    onDragMove?: DragMethod;\n    onDragStop?: DragMethod;\n    onIsMoveHandle?: OnIsMoveHandle;\n    openFolderDelay: number | false;\n    openNode: OpenNode;\n    refreshElements: RefreshElements;\n    slide: boolean;\n    treeElement: HTMLElement;\n    triggerEvent: TriggerEvent;\n}\n\nexport class DragAndDropHandler {\n    public hitAreas: HitArea[];\n    public isDragging: boolean;\n    public currentItem: NodeElement | null;\n    public hoveredArea: HitArea | null;\n\n    private autoEscape?: boolean;\n    private dragElement: DragElement | null;\n    private getNodeElement: GetNodeElement;\n    private getNodeElementForNode: GetNodeElementForNode;\n    private getTree: GetTree;\n    private onCanMove?: OnCanMove;\n    private onCanMoveTo?: OnCanMoveTo;\n    private onDragMove?: DragMethod;\n    private onDragStop?: DragMethod;\n    private onIsMoveHandle?: OnIsMoveHandle;\n    private openFolderDelay: number | false;\n    private openFolderTimer: number | null;\n    private openNode: OpenNode;\n    private previousGhost: DropHint | null;\n    private refreshElements: RefreshElements;\n    private slide: boolean;\n    private treeElement: HTMLElement;\n    private triggerEvent: TriggerEvent;\n\n    constructor({\n        autoEscape,\n        getNodeElement,\n        getNodeElementForNode,\n        getTree,\n        onCanMove,\n        onCanMoveTo,\n        onDragMove,\n        onDragStop,\n        onIsMoveHandle,\n        openNode,\n        refreshElements,\n        slide,\n        treeElement,\n        triggerEvent,\n    }: DragAndDropHandlerParams) {\n        this.autoEscape = autoEscape;\n        this.getNodeElement = getNodeElement;\n        this.getNodeElementForNode = getNodeElementForNode;\n        this.getTree = getTree;\n        this.onCanMove = onCanMove;\n        this.onCanMoveTo = onCanMoveTo;\n        this.onDragMove = onDragMove;\n        this.onDragStop = onDragStop;\n        this.onIsMoveHandle = onIsMoveHandle;\n        this.openNode = openNode;\n        this.refreshElements = refreshElements;\n        this.slide = slide;\n        this.treeElement = treeElement;\n        this.triggerEvent = triggerEvent;\n\n        this.hoveredArea = null;\n        this.hitAreas = [];\n        this.isDragging = false;\n        this.currentItem = null;\n    }\n\n    public mouseCapture(positionInfo: PositionInfo): boolean | null {\n        const element = positionInfo.target;\n\n        if (!this.mustCaptureElement(element)) {\n            return null;\n        }\n\n        if (this.onIsMoveHandle && !this.onIsMoveHandle(jQuery(element))) {\n            return null;\n        }\n\n        let nodeElement = this.getNodeElement(element);\n\n        if (nodeElement && this.onCanMove) {\n            if (!this.onCanMove(nodeElement.node)) {\n                nodeElement = null;\n            }\n        }\n\n        this.currentItem = nodeElement;\n        return this.currentItem != null;\n    }\n\n    public mouseStart(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.refresh();\n\n        const { left, top } = getElementPosition(positionInfo.target);\n\n        const node = this.currentItem.node;\n\n        this.dragElement = new DragElement({\n            autoEscape: this.autoEscape ?? true,\n            nodeName: node.name,\n            offsetX: positionInfo.pageX - left,\n            offsetY: positionInfo.pageY - top,\n            treeElement: this.treeElement,\n        });\n\n        this.isDragging = true;\n        this.currentItem.element.classList.add(\"jqtree-moving\");\n\n        return true;\n    }\n\n    public mouseDrag(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            !this.dragElement ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.dragElement.move(positionInfo.pageX, positionInfo.pageY);\n\n        const area = this.findHoveredArea(\n            positionInfo.pageX,\n            positionInfo.pageY,\n        );\n\n        if (area && this.canMoveToArea(area)) {\n            if (!area.node.isFolder()) {\n                this.stopOpenFolderTimer();\n            }\n\n            if (this.hoveredArea !== area) {\n                this.hoveredArea = area;\n\n                // If this is a closed folder, start timer to open it\n                if (this.mustOpenFolderTimer(area)) {\n                    this.startOpenFolderTimer(area.node);\n                } else {\n                    this.stopOpenFolderTimer();\n                }\n\n                this.updateDropHint();\n            }\n        } else {\n            this.removeDropHint();\n            this.stopOpenFolderTimer();\n            this.hoveredArea = area;\n        }\n\n        if (!area) {\n            if (this.onDragMove) {\n                this.onDragMove(\n                    this.currentItem.node,\n                    positionInfo.originalEvent,\n                );\n            }\n        }\n\n        return true;\n    }\n\n    public mouseStop(positionInfo: PositionInfo): boolean {\n        this.moveItem(positionInfo);\n        this.clear();\n        this.removeHover();\n        this.removeDropHint();\n        this.removeHitAreas();\n\n        const currentItem = this.currentItem;\n\n        if (this.currentItem) {\n            this.currentItem.element.classList.remove(\"jqtree-moving\");\n            this.currentItem = null;\n        }\n\n        this.isDragging = false;\n\n        if (!this.hoveredArea && currentItem) {\n            if (this.onDragStop) {\n                this.onDragStop(currentItem.node, positionInfo.originalEvent);\n            }\n        }\n\n        return false;\n    }\n\n    public refresh(): void {\n        this.removeHitAreas();\n\n        if (this.currentItem) {\n            this.generateHitAreas();\n\n            this.currentItem = this.getNodeElementForNode(\n                this.currentItem.node,\n            );\n\n            if (this.isDragging) {\n                this.currentItem.element.classList.add(\"jqtree-moving\");\n            }\n        }\n    }\n\n    private generateHitAreas(): void {\n        const tree = this.getTree();\n\n        if (!this.currentItem || !tree) {\n            this.hitAreas = [];\n        } else {\n            const hitAreasGenerator = new HitAreasGenerator(\n                tree,\n                this.currentItem.node,\n                this.getTreeDimensions().bottom,\n            );\n            this.hitAreas = hitAreasGenerator.generate();\n        }\n    }\n\n    private mustCaptureElement(element: HTMLElement): boolean {\n        const nodeName = element.nodeName;\n\n        return (\n            nodeName !== \"INPUT\" &&\n            nodeName !== \"SELECT\" &&\n            nodeName !== \"TEXTAREA\"\n        );\n    }\n\n    private canMoveToArea(area: HitArea): boolean {\n        if (!this.onCanMoveTo) {\n            return true;\n        }\n\n        if (!this.currentItem) {\n            return false;\n        }\n\n        const positionName = getPositionName(area.position);\n\n        return this.onCanMoveTo(this.currentItem.node, area.node, positionName);\n    }\n\n    private removeHitAreas(): void {\n        this.hitAreas = [];\n    }\n\n    private clear(): void {\n        if (this.dragElement) {\n            this.dragElement.remove();\n            this.dragElement = null;\n        }\n    }\n\n    private removeDropHint(): void {\n        if (this.previousGhost) {\n            this.previousGhost.remove();\n        }\n    }\n\n    private removeHover(): void {\n        this.hoveredArea = null;\n    }\n\n    private findHoveredArea(x: number, y: number): HitArea | null {\n        const dimensions = this.getTreeDimensions();\n\n        if (\n            x < dimensions.left ||\n            y < dimensions.top ||\n            x > dimensions.right ||\n            y > dimensions.bottom\n        ) {\n            return null;\n        }\n\n        let low = 0;\n        let high = this.hitAreas.length;\n        while (low < high) {\n            const mid = (low + high) >> 1;\n            const area = this.hitAreas[mid];\n\n            if (!area) {\n                return null;\n            }\n\n            if (y < area.top) {\n                high = mid;\n            } else if (y > area.bottom) {\n                low = mid + 1;\n            } else {\n                return area;\n            }\n        }\n\n        return null;\n    }\n\n    private mustOpenFolderTimer(area: HitArea): boolean {\n        const node = area.node;\n\n        return (\n            node.isFolder() &&\n            !node.is_open &&\n            area.position === Position.Inside\n        );\n    }\n\n    private updateDropHint(): void {\n        if (!this.hoveredArea) {\n            return;\n        }\n\n        // remove previous drop hint\n        this.removeDropHint();\n\n        // add new drop hint\n        const nodeElement = this.getNodeElementForNode(this.hoveredArea.node);\n        this.previousGhost = nodeElement.addDropHint(this.hoveredArea.position);\n    }\n\n    private startOpenFolderTimer(folder: Node): void {\n        const openFolder = (): void => {\n            this.openNode(folder, this.slide, () => {\n                this.refresh();\n                this.updateDropHint();\n            });\n        };\n\n        this.stopOpenFolderTimer();\n\n        const openFolderDelay = this.openFolderDelay;\n\n        if (openFolderDelay !== false) {\n            this.openFolderTimer = window.setTimeout(\n                openFolder,\n                openFolderDelay,\n            );\n        }\n    }\n\n    private stopOpenFolderTimer(): void {\n        if (this.openFolderTimer) {\n            clearTimeout(this.openFolderTimer);\n            this.openFolderTimer = null;\n        }\n    }\n\n    private moveItem(positionInfo: PositionInfo): void {\n        if (\n            this.currentItem &&\n            this.hoveredArea &&\n            this.hoveredArea.position !== Position.None &&\n            this.canMoveToArea(this.hoveredArea)\n        ) {\n            const movedNode = this.currentItem.node;\n            const targetNode = this.hoveredArea.node;\n            const position = this.hoveredArea.position;\n            const previousParent = movedNode.parent;\n\n            if (position === Position.Inside) {\n                this.hoveredArea.node.is_open = true;\n            }\n\n            const doMove = (): void => {\n                const tree = this.getTree();\n\n                if (tree) {\n                    tree.moveNode(movedNode, targetNode, position);\n\n                    this.treeElement.textContent = \"\";\n                    this.refreshElements(null);\n                }\n            };\n\n            const event = this.triggerEvent(\"tree.move\", {\n                move_info: {\n                    moved_node: movedNode,\n                    target_node: targetNode,\n                    position: getPositionName(position),\n                    previous_parent: previousParent,\n                    do_move: doMove,\n                    original_event: positionInfo.originalEvent,\n                },\n            });\n\n            if (!event.isDefaultPrevented()) {\n                doMove();\n            }\n        }\n    }\n\n    private getTreeDimensions(): Dimensions {\n        // Return the dimensions of the tree. Add a margin to the bottom to allow\n        // to drag-and-drop after the last element.\n        const { left, top } = getElementPosition(this.treeElement);\n\n        return {\n            left,\n            top,\n            right: left + this.treeElement.clientWidth,\n            bottom: top + this.treeElement.clientHeight + 16,\n        };\n    }\n}\n","import { getBoolString } from \"./util\";\nimport { Node } from \"./node\";\nimport { IconElement, OnCreateLi } from \"./jqtreeOptions\";\nimport { GetTree, IsNodeSelected } from \"./jqtreeMethodTypes\";\n\ninterface ElementsRendererParams {\n    autoEscape: boolean;\n    buttonLeft: boolean;\n    closedIcon?: IconElement;\n    dragAndDrop: boolean;\n    $element: JQuery<HTMLElement>;\n    getTree: GetTree;\n    isNodeSelected: IsNodeSelected;\n    onCreateLi?: OnCreateLi;\n    openedIcon?: IconElement;\n    rtl?: boolean;\n    showEmptyFolder: boolean;\n    tabIndex?: number;\n}\n\nexport default class ElementsRenderer {\n    public openedIconElement?: HTMLElement | Text;\n    public closedIconElement?: HTMLElement | Text;\n    private autoEscape: boolean;\n    private buttonLeft: boolean;\n    private dragAndDrop: boolean;\n    private $element: JQuery<HTMLElement>;\n    private getTree: GetTree;\n    private isNodeSelected: IsNodeSelected;\n    private onCreateLi?: OnCreateLi;\n    private rtl?: boolean;\n    private showEmptyFolder: boolean;\n    private tabIndex?: number;\n\n    constructor({\n        autoEscape,\n        buttonLeft,\n        closedIcon,\n        onCreateLi,\n        dragAndDrop,\n        $element,\n        getTree,\n        isNodeSelected,\n        openedIcon,\n        rtl,\n        showEmptyFolder,\n        tabIndex,\n    }: ElementsRendererParams) {\n        this.autoEscape = autoEscape;\n        this.buttonLeft = buttonLeft;\n        this.dragAndDrop = dragAndDrop;\n        this.$element = $element;\n        this.getTree = getTree;\n        this.isNodeSelected = isNodeSelected;\n        this.onCreateLi = onCreateLi;\n        this.rtl = rtl;\n        this.showEmptyFolder = showEmptyFolder;\n        this.tabIndex = tabIndex;\n        this.openedIconElement = this.createButtonElement(openedIcon || \"+\");\n        this.closedIconElement = this.createButtonElement(closedIcon || \"-\");\n    }\n\n    public render(fromNode: Node | null): void {\n        if (fromNode && fromNode.parent) {\n            this.renderFromNode(fromNode);\n        } else {\n            this.renderFromRoot();\n        }\n    }\n\n    public renderFromRoot(): void {\n        this.$element.empty();\n\n        const tree = this.getTree();\n\n        if (this.$element[0] && tree) {\n            this.createDomElements(this.$element[0], tree.children, true, 1);\n        }\n    }\n\n    public renderFromNode(node: Node): void {\n        // remember current li\n        const $previousLi = jQuery(node.element);\n\n        // create element\n        const li = this.createLi(node, node.getLevel());\n        this.attachNodeData(node, li);\n\n        // add element to dom\n        $previousLi.after(li);\n\n        // remove previous li\n        $previousLi.remove();\n\n        // create children\n        if (node.children) {\n            this.createDomElements(\n                li,\n                node.children,\n                false,\n                node.getLevel() + 1,\n            );\n        }\n    }\n\n    private createDomElements(\n        element: Element,\n        children: Node[],\n        isRootNode: boolean,\n        level: number,\n    ): void {\n        const ul = this.createUl(isRootNode);\n        element.appendChild(ul);\n\n        for (const child of children) {\n            const li = this.createLi(child, level);\n            ul.appendChild(li);\n\n            this.attachNodeData(child, li);\n\n            if (child.hasChildren()) {\n                this.createDomElements(li, child.children, false, level + 1);\n            }\n        }\n    }\n\n    private attachNodeData(node: Node, li: HTMLElement): void {\n        node.element = li;\n        jQuery(li).data(\"node\", node);\n    }\n\n    private createUl(isRootNode: boolean): HTMLUListElement {\n        let classString;\n        let role;\n\n        if (!isRootNode) {\n            classString = \"\";\n            role = \"group\";\n        } else {\n            classString = \"jqtree-tree\";\n            role = \"tree\";\n\n            if (this.rtl) {\n                classString += \" jqtree-rtl\";\n            }\n        }\n\n        if (this.dragAndDrop) {\n            classString += \" jqtree-dnd\";\n        }\n\n        const ul = document.createElement(\"ul\");\n        ul.className = `jqtree_common ${classString}`;\n\n        ul.setAttribute(\"role\", role);\n\n        return ul;\n    }\n\n    private createLi(node: Node, level: number): HTMLLIElement {\n        const isSelected = Boolean(this.isNodeSelected(node));\n\n        const mustShowFolder =\n            node.isFolder() || (node.isEmptyFolder && this.showEmptyFolder);\n\n        const li = mustShowFolder\n            ? this.createFolderLi(node, level, isSelected)\n            : this.createNodeLi(node, level, isSelected);\n\n        if (this.onCreateLi) {\n            this.onCreateLi(node, jQuery(li), isSelected);\n        }\n\n        return li;\n    }\n\n    private setTreeItemAriaAttributes(\n        element: HTMLElement,\n        name: string,\n        level: number,\n        isSelected: boolean,\n    ) {\n        element.setAttribute(\"aria-label\", name);\n        element.setAttribute(\"aria-level\", `${level}`);\n        element.setAttribute(\"aria-selected\", getBoolString(isSelected));\n        element.setAttribute(\"role\", \"treeitem\");\n    }\n\n    private createFolderLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const buttonClasses = this.getButtonClasses(node);\n        const folderClasses = this.getFolderClasses(node, isSelected);\n\n        const iconElement = node.is_open\n            ? this.openedIconElement\n            : this.closedIconElement;\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = `jqtree_common ${folderClasses}`;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // button link\n        const buttonLink = document.createElement(\"a\");\n        buttonLink.className = buttonClasses;\n\n        if (iconElement) {\n            buttonLink.appendChild(iconElement.cloneNode(true));\n        }\n\n        if (this.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            true,\n            level,\n        );\n        titleSpan.setAttribute(\"aria-expanded\", getBoolString(node.is_open));\n        div.appendChild(titleSpan);\n\n        if (!this.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        return li;\n    }\n\n    private createNodeLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const liClasses = [\"jqtree_common\"];\n\n        if (isSelected) {\n            liClasses.push(\"jqtree-selected\");\n        }\n\n        const classString = liClasses.join(\" \");\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = classString;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            false,\n            level,\n        );\n        div.appendChild(titleSpan);\n\n        return li;\n    }\n\n    private createTitleSpan(\n        nodeName: string,\n        isSelected: boolean,\n        isFolder: boolean,\n        level: number,\n    ): HTMLSpanElement {\n        const titleSpan = document.createElement(\"span\");\n\n        let classes = \"jqtree-title jqtree_common\";\n\n        if (isFolder) {\n            classes += \" jqtree-title-folder\";\n        }\n\n        classes += ` jqtree-title-button-${this.buttonLeft ? \"left\" : \"right\"}`;\n\n        titleSpan.className = classes;\n\n        if (isSelected) {\n            const tabIndex = this.tabIndex;\n\n            if (tabIndex !== undefined) {\n                titleSpan.setAttribute(\"tabindex\", `${tabIndex}`);\n            }\n        }\n\n        this.setTreeItemAriaAttributes(titleSpan, nodeName, level, isSelected);\n\n        if (this.autoEscape) {\n            titleSpan.textContent = nodeName;\n        } else {\n            titleSpan.innerHTML = nodeName;\n        }\n\n        return titleSpan;\n    }\n\n    private getButtonClasses(node: Node): string {\n        const classes = [\"jqtree-toggler\", \"jqtree_common\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (this.buttonLeft) {\n            classes.push(\"jqtree-toggler-left\");\n        } else {\n            classes.push(\"jqtree-toggler-right\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private getFolderClasses(node: Node, isSelected: boolean): string {\n        const classes = [\"jqtree-folder\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (isSelected) {\n            classes.push(\"jqtree-selected\");\n        }\n\n        if (node.is_loading) {\n            classes.push(\"jqtree-loading\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private createButtonElement(\n        value: IconElement,\n    ): HTMLElement | Text | undefined {\n        if (typeof value === \"string\") {\n            // convert value to html\n            const div = document.createElement(\"div\");\n            div.innerHTML = value;\n\n            return document.createTextNode(div.innerHTML);\n        } else if (value == null) {\n            return undefined;\n        } else if ((value as HTMLElement).nodeType) {\n            return value as HTMLElement;\n        } else {\n            return jQuery(value)[0];\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { DataFilter, OnLoadFailed, OnLoading } from \"./jqtreeOptions\";\nimport { LoadData, TriggerEvent } from \"./jqtreeMethodTypes\";\n\nexport type HandleFinishedLoading = () => void;\n\ninterface DataLoaderParams {\n    dataFilter?: DataFilter;\n    loadData: LoadData;\n    onLoadFailed?: OnLoadFailed;\n    onLoading?: OnLoading;\n    $treeElement: JQuery<HTMLElement>;\n    triggerEvent: TriggerEvent;\n}\n\nexport default class DataLoader {\n    private dataFilter?: DataFilter;\n    private loadData: LoadData;\n    private onLoadFailed?: OnLoadFailed;\n    private onLoading?: OnLoading;\n    private $treeElement: JQuery<HTMLElement>;\n    private triggerEvent: TriggerEvent;\n\n    constructor({\n        dataFilter,\n        loadData,\n        onLoadFailed,\n        onLoading,\n        $treeElement,\n        triggerEvent,\n    }: DataLoaderParams) {\n        this.dataFilter = dataFilter;\n        this.loadData = loadData;\n        this.onLoadFailed = onLoadFailed;\n        this.onLoading = onLoading;\n        this.$treeElement = $treeElement;\n        this.triggerEvent = triggerEvent;\n    }\n\n    public loadFromUrl(\n        urlInfo: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null,\n    ): void {\n        if (!urlInfo) {\n            return;\n        }\n\n        const $el = this.getDomElement(parentNode);\n        this.addLoadingClass($el);\n        this.notifyLoading(true, parentNode, $el);\n\n        const stopLoading = (): void => {\n            this.removeLoadingClass($el);\n            this.notifyLoading(false, parentNode, $el);\n        };\n\n        const handleSuccess = (data: string | NodeData[]): void => {\n            stopLoading();\n            this.loadData(this.parseData(data), parentNode);\n\n            if (onFinished && typeof onFinished === \"function\") {\n                onFinished();\n            }\n        };\n\n        const handleError = (jqXHR: JQuery.jqXHR): void => {\n            stopLoading();\n\n            if (this.onLoadFailed) {\n                this.onLoadFailed(jqXHR);\n            }\n        };\n\n        this.submitRequest(urlInfo, handleSuccess, handleError);\n    }\n\n    private addLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.addClass(\"jqtree-loading\");\n        }\n    }\n\n    private removeLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.removeClass(\"jqtree-loading\");\n        }\n    }\n\n    private getDomElement(parentNode: Node | null): JQuery<HTMLElement> {\n        if (parentNode) {\n            return jQuery(parentNode.element);\n        } else {\n            return this.$treeElement;\n        }\n    }\n\n    private notifyLoading(\n        isLoading: boolean,\n        node: Node | null,\n        $el: JQuery,\n    ): void {\n        if (this.onLoading) {\n            this.onLoading(isLoading, node, $el);\n        }\n\n        this.triggerEvent(\"tree.loading_data\", {\n            isLoading,\n            node,\n            $el,\n        });\n    }\n\n    private submitRequest(\n        urlInfoInput: string | JQuery.AjaxSettings,\n        handleSuccess: JQuery.Ajax.SuccessCallback<any>,\n        handleError: JQuery.Ajax.ErrorCallback<any>,\n    ): void {\n        const urlInfo =\n            typeof urlInfoInput === \"string\"\n                ? { url: urlInfoInput }\n                : urlInfoInput;\n\n        const ajaxSettings: JQuery.AjaxSettings = {\n            method: \"GET\",\n            cache: false,\n            dataType: \"json\",\n            success: handleSuccess,\n            error: handleError,\n            ...urlInfo,\n        };\n\n        ajaxSettings.method = ajaxSettings.method?.toUpperCase() || \"GET\";\n\n        void jQuery.ajax(ajaxSettings);\n    }\n\n    private parseData(data: string | NodeData[]): NodeData[] {\n        const getParsedData = () => {\n            if (typeof data === \"string\") {\n                return JSON.parse(data) as NodeData[];\n            } else {\n                return data;\n            }\n        };\n\n        const parsedData = getParsedData();\n\n        if (this.dataFilter) {\n            return this.dataFilter(parsedData);\n        } else {\n            return parsedData;\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport {\n    CloseNode,\n    GetSelectedNode,\n    IsFocusOnTree,\n    OpenNode,\n    SelectNode,\n} from \"./jqtreeMethodTypes\";\n\ntype KeyboardEventHandler = (event: KeyboardEvent) => boolean;\n\ninterface KeyHandlerParams {\n    closeNode: CloseNode;\n    getSelectedNode: GetSelectedNode;\n    isFocusOnTree: IsFocusOnTree;\n    keyboardSupport: boolean;\n    openNode: OpenNode;\n    selectNode: SelectNode;\n}\n\nexport default class KeyHandler {\n    private closeNode: CloseNode;\n    private getSelectedNode: GetSelectedNode;\n    private handleKeyDownHandler?: KeyboardEventHandler;\n    private isFocusOnTree: IsFocusOnTree;\n    private keyboardSupport: boolean;\n    private openNode: OpenNode;\n    private originalSelectNode: SelectNode;\n\n    constructor({\n        closeNode,\n        getSelectedNode,\n        isFocusOnTree,\n        keyboardSupport,\n        openNode,\n        selectNode,\n    }: KeyHandlerParams) {\n        this.closeNode = closeNode;\n        this.getSelectedNode = getSelectedNode;\n        this.isFocusOnTree = isFocusOnTree;\n        this.keyboardSupport = keyboardSupport;\n        this.openNode = openNode;\n        this.originalSelectNode = selectNode;\n\n        if (keyboardSupport) {\n            this.handleKeyDownHandler = this.handleKeyDown.bind(this);\n\n            document.addEventListener(\"keydown\", this.handleKeyDownHandler);\n        }\n    }\n\n    public deinit(): void {\n        if (this.handleKeyDownHandler) {\n            document.removeEventListener(\"keydown\", this.handleKeyDownHandler);\n        }\n    }\n\n    public moveDown(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getNextVisibleNode());\n    }\n\n    public moveUp(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getPreviousVisibleNode());\n    }\n\n    public moveRight(selectedNode: Node): boolean {\n        if (!selectedNode.isFolder()) {\n            return true;\n        } else {\n            // folder node\n            if (selectedNode.is_open) {\n                // Right moves to the first child of an open node\n                return this.selectNode(selectedNode.getNextVisibleNode());\n            } else {\n                // Right expands a closed node\n                this.openNode(selectedNode);\n                return false;\n            }\n        }\n    }\n\n    public moveLeft(selectedNode: Node): boolean {\n        if (selectedNode.isFolder() && selectedNode.is_open) {\n            // Left on an open node closes the node\n            this.closeNode(selectedNode);\n            return false;\n        } else {\n            // Left on a closed or end node moves focus to the node's parent\n            return this.selectNode(selectedNode.getParent());\n        }\n    }\n\n    public selectNode(node: Node | null): boolean {\n        if (!node) {\n            return true;\n        } else {\n            this.originalSelectNode(node);\n\n            return false;\n        }\n    }\n\n    private handleKeyDown = (e: KeyboardEvent): boolean => {\n        if (!this.canHandleKeyboard()) {\n            return true;\n        }\n\n        const selectedNode = this.getSelectedNode();\n        if (!selectedNode) {\n            return true;\n        }\n\n        switch (e.key) {\n            case \"ArrowDown\":\n                return this.moveDown(selectedNode);\n\n            case \"ArrowUp\":\n                return this.moveUp(selectedNode);\n\n            case \"ArrowRight\":\n                return this.moveRight(selectedNode);\n\n            case \"ArrowLeft\":\n                return this.moveLeft(selectedNode);\n\n            default:\n                return true;\n        }\n    };\n\n    private canHandleKeyboard(): boolean {\n        return this.keyboardSupport && this.isFocusOnTree();\n    }\n}\n","const register = (widgetClass: unknown, widgetName: string): void => {\n    const getDataKey = (): string => `simple_widget_${widgetName}`;\n\n    const getWidgetData = (\n        el: HTMLElement,\n        dataKey: string\n    ): SimpleWidget<unknown> | null => {\n        const widget = jQuery.data(el, dataKey) as unknown;\n\n        if (widget && widget instanceof SimpleWidget) {\n            return widget;\n        } else {\n            return null;\n        }\n    };\n\n    const createWidget = ($el: JQuery, options: unknown): JQuery => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const existingWidget = getWidgetData(el, dataKey);\n\n            if (!existingWidget) {\n                const simpleWidgetClass = widgetClass as typeof SimpleWidget;\n                const widget = new simpleWidgetClass(el, options);\n\n                if (!jQuery.data(el, dataKey)) {\n                    jQuery.data(el, dataKey, widget);\n                }\n\n                // Call init after setting data, so we can call methods\n                widget.init();\n            }\n        }\n\n        return $el;\n    };\n\n    const destroyWidget = ($el: JQuery): void => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const widget = getWidgetData(el, dataKey);\n\n            if (widget) {\n                widget.destroy();\n            }\n\n            jQuery.removeData(el, dataKey);\n        }\n    };\n\n    const callFunction = (\n        $el: JQuery,\n        functionName: string,\n        args: unknown[]\n    ): unknown => {\n        let result = null;\n\n        for (const el of $el.get()) {\n            const widget = jQuery.data(el, getDataKey()) as unknown;\n\n            if (widget && widget instanceof SimpleWidget) {\n                const simpleWidget = widget as SimpleWidget<unknown>;\n                const widgetFunction = simpleWidget[functionName];\n\n                if (widgetFunction && typeof widgetFunction === \"function\") {\n                    result = widgetFunction.apply(widget, args) as unknown;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (jQuery.fn as any)[widgetName] = function (\n        this: JQuery,\n        argument1: unknown,\n        ...args: unknown[]\n    ) {\n        if (!argument1) {\n            return createWidget(this, null);\n        } else if (typeof argument1 === \"object\") {\n            const options = argument1 as unknown;\n            return createWidget(this, options);\n        } else if (typeof argument1 === \"string\" && argument1[0] !== \"_\") {\n            const functionName = argument1;\n\n            if (functionName === \"destroy\") {\n                return destroyWidget(this);\n            } else if (functionName === \"get_widget_class\") {\n                return widgetClass;\n            } else {\n                return callFunction(this, functionName, args);\n            }\n        } else {\n            return undefined;\n        }\n    };\n};\n\nexport default class SimpleWidget<WidgetOptions> {\n    public static register(widgetClass: unknown, widgetName: string): void {\n        register(widgetClass, widgetName);\n    }\n\n    [key: string]: unknown;\n\n    protected static defaults: unknown = {};\n\n    public options: WidgetOptions;\n\n    public $el: JQuery<HTMLElement>;\n\n    constructor(el: HTMLElement, options: WidgetOptions) {\n        this.$el = jQuery(el);\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const defaults = (this.constructor as any)[\"defaults\"] as WidgetOptions;\n        this.options = { ...defaults, ...options };\n    }\n\n    public destroy(): void {\n        this.deinit();\n    }\n\n    public init(): void {\n        //\n    }\n\n    public deinit(): void {\n        //\n    }\n}\n","/*\nThis widget does the same a the mouse widget in jqueryui.\n*/\nimport SimpleWidget from \"./simple.widget\";\nimport { PositionInfo } from \"./mouseWidgetTypes\";\n\nconst getPositionInfoFromMouseEvent = (e: MouseEvent): PositionInfo => ({\n    pageX: e.pageX,\n    pageY: e.pageY,\n    target: e.target as HTMLElement,\n    originalEvent: e,\n});\n\nconst getPositionInfoFromTouch = (\n    touch: Touch,\n    e: TouchEvent,\n): PositionInfo => ({\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    target: touch.target as HTMLElement,\n    originalEvent: e,\n});\n\nabstract class MouseWidget<WidgetOptions> extends SimpleWidget<WidgetOptions> {\n    protected isMouseStarted: boolean;\n    protected mouseDownInfo: PositionInfo | null;\n    private mouseDelayTimer: number | null;\n    private isMouseDelayMet: boolean;\n\n    public init(): void {\n        const element = this.$el.get(0);\n\n        if (element) {\n            element.addEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n            element.addEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.isMouseStarted = false;\n        this.mouseDelayTimer = null;\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n    }\n\n    public deinit(): void {\n        const el = this.$el.get(0);\n\n        if (el) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.removeMouseMoveEventListeners();\n    }\n\n    protected abstract mouseCapture(positionInfo: PositionInfo): boolean | null;\n\n    protected abstract mouseStart(positionInfo: PositionInfo): boolean;\n\n    protected abstract mouseDrag(positionInfo: PositionInfo): void;\n\n    protected abstract mouseStop(positionInfo: PositionInfo): void;\n\n    protected abstract getMouseDelay(): number;\n\n    private mouseDown = (e: MouseEvent): void => {\n        // Left mouse button?\n        if (e.button !== 0) {\n            return;\n        }\n\n        const result = this.handleMouseDown(getPositionInfoFromMouseEvent(e));\n\n        if (result && e.cancelable) {\n            e.preventDefault();\n        }\n    };\n\n    private handleMouseDown(positionInfo: PositionInfo): boolean {\n        // We may have missed mouseup (out of window)\n        if (this.isMouseStarted) {\n            this.handleMouseUp(positionInfo);\n        }\n\n        this.mouseDownInfo = positionInfo;\n\n        if (!this.mouseCapture(positionInfo)) {\n            return false;\n        }\n\n        this.handleStartMouse();\n\n        return true;\n    }\n\n    private handleStartMouse(): void {\n        document.addEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        document.addEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        document.addEventListener(\"mouseup\", this.mouseUp, { passive: false });\n        document.addEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n\n        const mouseDelay = this.getMouseDelay();\n\n        if (mouseDelay) {\n            this.startMouseDelayTimer(mouseDelay);\n        } else {\n            this.isMouseDelayMet = true;\n        }\n    }\n\n    private startMouseDelayTimer(mouseDelay: number): void {\n        if (this.mouseDelayTimer) {\n            clearTimeout(this.mouseDelayTimer);\n        }\n\n        this.mouseDelayTimer = window.setTimeout(() => {\n            if (this.mouseDownInfo) {\n                this.isMouseDelayMet = true;\n            }\n        }, mouseDelay);\n\n        this.isMouseDelayMet = false;\n    }\n\n    private mouseMove = (e: MouseEvent): void => {\n        this.handleMouseMove(e, getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseMove(\n        e: MouseEvent | TouchEvent,\n        positionInfo: PositionInfo,\n    ): void {\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n            return;\n        }\n\n        if (!this.isMouseDelayMet) {\n            return;\n        }\n\n        if (this.mouseDownInfo) {\n            this.isMouseStarted = this.mouseStart(this.mouseDownInfo) !== false;\n        }\n\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n        } else {\n            this.handleMouseUp(positionInfo);\n        }\n    }\n\n    private mouseUp = (e: MouseEvent): void => {\n        this.handleMouseUp(getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseUp(positionInfo: PositionInfo): void {\n        this.removeMouseMoveEventListeners();\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n\n        if (this.isMouseStarted) {\n            this.isMouseStarted = false;\n            this.mouseStop(positionInfo);\n        }\n    }\n\n    private removeMouseMoveEventListeners() {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mouseup\", this.mouseUp, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n    }\n\n    private touchStart = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseDown(getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchMove = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseMove(e, getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchEnd = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseUp(getPositionInfoFromTouch(touch, e));\n    };\n}\n\nexport default MouseWidget;\n","import { isInt } from \"./util\";\nimport { Node } from \"./node\";\nimport { OnGetStateFromStorage, OnSetStateFromStorage } from \"./jqtreeOptions\";\nimport {\n    AddToSelection,\n    GetNodeById,\n    GetSelectedNodes,\n    GetTree,\n    OpenNode,\n    RefreshElements,\n    RemoveFromSelection,\n} from \"./jqtreeMethodTypes\";\n\nexport interface SavedState {\n    open_nodes: NodeId[];\n    selected_node: NodeId[];\n}\n\ninterface SaveStateHandlerParams {\n    addToSelection: AddToSelection;\n    getNodeById: GetNodeById;\n    getSelectedNodes: GetSelectedNodes;\n    getTree: GetTree;\n    onGetStateFromStorage?: OnGetStateFromStorage;\n    onSetStateFromStorage?: OnSetStateFromStorage;\n    openNode: OpenNode;\n    refreshElements: RefreshElements;\n    removeFromSelection: RemoveFromSelection;\n    saveState: boolean | string;\n}\n\nexport default class SaveStateHandler {\n    private addToSelection: AddToSelection;\n    private getNodeById: GetNodeById;\n    private getSelectedNodes: GetSelectedNodes;\n    private getTree: GetTree;\n    private onGetStateFromStorage?: OnGetStateFromStorage;\n    private onSetStateFromStorage?: OnSetStateFromStorage;\n    private openNode: OpenNode;\n    private refreshElements: RefreshElements;\n    private removeFromSelection: RemoveFromSelection;\n    private saveStateOption: boolean | string;\n    private _supportsLocalStorage: boolean | null;\n\n    constructor({\n        addToSelection,\n        getNodeById,\n        getSelectedNodes,\n        getTree,\n        onGetStateFromStorage,\n        onSetStateFromStorage,\n        openNode,\n        refreshElements,\n        removeFromSelection,\n        saveState,\n    }: SaveStateHandlerParams) {\n        this.addToSelection = addToSelection;\n        this.getNodeById = getNodeById;\n        this.getSelectedNodes = getSelectedNodes;\n        this.getTree = getTree;\n        this.onGetStateFromStorage = onGetStateFromStorage;\n        this.onSetStateFromStorage = onSetStateFromStorage;\n        this.openNode = openNode;\n        this.refreshElements = refreshElements;\n        this.removeFromSelection = removeFromSelection;\n        this.saveStateOption = saveState;\n    }\n\n    public saveState(): void {\n        const state = JSON.stringify(this.getState());\n\n        if (this.onSetStateFromStorage) {\n            this.onSetStateFromStorage(state);\n        } else if (this.supportsLocalStorage()) {\n            localStorage.setItem(this.getKeyName(), state);\n        }\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        const jsonData = this.loadFromStorage();\n\n        if (jsonData) {\n            return this.parseState(jsonData) as unknown as SavedState;\n        } else {\n            return null;\n        }\n    }\n\n    public getState(): SavedState {\n        const getOpenNodeIds = (): NodeId[] => {\n            const openNodes: NodeId[] = [];\n\n            this.getTree()?.iterate((node: Node) => {\n                if (node.is_open && node.id && node.hasChildren()) {\n                    openNodes.push(node.id);\n                }\n                return true;\n            });\n\n            return openNodes;\n        };\n\n        const getSelectedNodeIds = (): NodeId[] => {\n            const selectedNodeIds: NodeId[] = [];\n\n            this.getSelectedNodes().forEach((node) => {\n                if (node.id != null) {\n                    selectedNodeIds.push(node.id);\n                }\n            });\n\n            return selectedNodeIds;\n        };\n\n        return {\n            open_nodes: getOpenNodeIds(),\n            selected_node: getSelectedNodeIds(),\n        };\n    }\n\n    /*\n    Set initial state\n    Don't handle nodes that are loaded on demand\n\n    result: must load on demand\n    */\n    public setInitialState(state: SavedState): boolean {\n        if (!state) {\n            return false;\n        } else {\n            let mustLoadOnDemand = false;\n\n            if (state.open_nodes) {\n                mustLoadOnDemand = this.openInitialNodes(state.open_nodes);\n            }\n\n            if (state.selected_node) {\n                this.resetSelection();\n                this.selectInitialNodes(state.selected_node);\n            }\n\n            return mustLoadOnDemand;\n        }\n    }\n\n    public setInitialStateOnDemand(\n        state: SavedState,\n        cbFinished: () => void,\n    ): void {\n        if (state) {\n            this.doSetInitialStateOnDemand(\n                state.open_nodes,\n                state.selected_node,\n                cbFinished,\n            );\n        } else {\n            cbFinished();\n        }\n    }\n\n    public getNodeIdToBeSelected(): NodeId | null {\n        const state = this.getStateFromStorage();\n\n        if (state && state.selected_node) {\n            return state.selected_node[0] || null;\n        } else {\n            return null;\n        }\n    }\n\n    private parseState(jsonData: string): SavedState {\n        const state = JSON.parse(jsonData) as Record<string, unknown>;\n\n        // Check if selected_node is an int (instead of an array)\n        if (state && state.selected_node && isInt(state.selected_node)) {\n            // Convert to array\n            state.selected_node = [state.selected_node];\n        }\n\n        return state as unknown as SavedState;\n    }\n\n    private loadFromStorage(): string | null {\n        if (this.onGetStateFromStorage) {\n            return this.onGetStateFromStorage();\n        } else if (this.supportsLocalStorage()) {\n            return localStorage.getItem(this.getKeyName());\n        } else {\n            return null;\n        }\n    }\n\n    private openInitialNodes(nodeIds: NodeId[]): boolean {\n        let mustLoadOnDemand = false;\n\n        for (const nodeId of nodeIds) {\n            const node = this.getNodeById(nodeId);\n\n            if (node) {\n                if (!node.load_on_demand) {\n                    node.is_open = true;\n                } else {\n                    mustLoadOnDemand = true;\n                }\n            }\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    private selectInitialNodes(nodeIds: NodeId[]): boolean {\n        let selectCount = 0;\n\n        for (const nodeId of nodeIds) {\n            const node = this.getNodeById(nodeId);\n\n            if (node) {\n                selectCount += 1;\n\n                this.addToSelection(node);\n            }\n        }\n\n        return selectCount !== 0;\n    }\n\n    private resetSelection(): void {\n        const selectedNodes = this.getSelectedNodes();\n\n        selectedNodes.forEach((node) => {\n            this.removeFromSelection(node);\n        });\n    }\n\n    private doSetInitialStateOnDemand(\n        nodeIdsParam: NodeId[],\n        selectedNodes: NodeId[],\n        cbFinished: () => void,\n    ): void {\n        let loadingCount = 0;\n        let nodeIds = nodeIdsParam;\n\n        const openNodes = (): void => {\n            const newNodesIds = [];\n\n            for (const nodeId of nodeIds) {\n                const node = this.getNodeById(nodeId);\n\n                if (!node) {\n                    newNodesIds.push(nodeId);\n                } else {\n                    if (!node.is_loading) {\n                        if (node.load_on_demand) {\n                            loadAndOpenNode(node);\n                        } else {\n                            this.openNode(node, false);\n                        }\n                    }\n                }\n            }\n\n            nodeIds = newNodesIds;\n\n            if (this.selectInitialNodes(selectedNodes)) {\n                this.refreshElements(null);\n            }\n\n            if (loadingCount === 0) {\n                cbFinished();\n            }\n        };\n\n        const loadAndOpenNode = (node: Node): void => {\n            loadingCount += 1;\n            this.openNode(node, false, () => {\n                loadingCount -= 1;\n                openNodes();\n            });\n        };\n\n        openNodes();\n    }\n\n    private getKeyName(): string {\n        if (typeof this.saveStateOption === \"string\") {\n            return this.saveStateOption;\n        } else {\n            return \"tree\";\n        }\n    }\n\n    private supportsLocalStorage(): boolean {\n        const testSupport = (): boolean => {\n            // Is local storage supported?\n            if (localStorage == null) {\n                return false;\n            } else {\n                // Check if it's possible to store an item. Safari does not allow this in private browsing mode.\n                try {\n                    const key = \"_storage_test\";\n                    sessionStorage.setItem(key, \"value\");\n                    sessionStorage.removeItem(key);\n                } catch (error) {\n                    return false;\n                }\n\n                return true;\n            }\n        };\n\n        if (this._supportsLocalStorage == null) {\n            this._supportsLocalStorage = testSupport();\n        }\n\n        return this._supportsLocalStorage;\n    }\n}\n","import type { ScrollParent } from \"./types\";\nimport { getElementPosition, getOffsetTop } from '../util'\n\ntype HorizontalScrollDirection = \"left\" | \"right\";\ntype VerticalScrollDirection = \"bottom\" | \"top\";\n\ninterface Params {\n    container: HTMLElement;\n    refreshHitAreas: () => void;\n}\n\nexport default class ContainerScrollParent implements ScrollParent {\n    private container: HTMLElement;\n    private horizontalScrollDirection?: HorizontalScrollDirection;\n    private horizontalScrollTimeout?: number;\n    private refreshHitAreas: () => void;\n    private scrollParentBottom?: number;\n    private scrollParentTop?: number;\n    private verticalScrollTimeout?: number;\n    private verticalScrollDirection?: VerticalScrollDirection;\n\n    constructor({ container, refreshHitAreas }: Params) {\n        this.container = container;\n        this.refreshHitAreas = refreshHitAreas;\n    }\n\n    public checkHorizontalScrolling(pageX: number): void {\n        const newHorizontalScrollDirection =\n            this.getNewHorizontalScrollDirection(pageX);\n\n        if (this.horizontalScrollDirection !== newHorizontalScrollDirection) {\n            this.horizontalScrollDirection = newHorizontalScrollDirection;\n\n            if (this.horizontalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n            }\n\n            if (newHorizontalScrollDirection) {\n                this.horizontalScrollTimeout = window.setTimeout(\n                    this.scrollHorizontally.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public checkVerticalScrolling(pageY: number) {\n        const newVerticalScrollDirection =\n            this.getNewVerticalScrollDirection(pageY);\n\n        if (this.verticalScrollDirection !== newVerticalScrollDirection) {\n            this.verticalScrollDirection = newVerticalScrollDirection;\n\n            if (this.verticalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n                this.verticalScrollTimeout = undefined;\n            }\n\n            if (newVerticalScrollDirection) {\n                this.verticalScrollTimeout = window.setTimeout(\n                    this.scrollVertically.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public getScrollLeft(): number {\n        return this.container.scrollLeft;\n    }\n\n    public scrollToY(top: number): void {\n        this.container.scrollTop = top;\n    }\n\n    public stopScrolling() {\n        this.horizontalScrollDirection = undefined;\n        this.verticalScrollDirection = undefined;\n        this.scrollParentTop = undefined;\n        this.scrollParentBottom = undefined;\n    }\n\n    private getNewHorizontalScrollDirection(\n        pageX: number,\n    ): HorizontalScrollDirection | undefined {\n        const scrollParentOffset = getElementPosition(this.container);\n\n        const rightEdge = scrollParentOffset.left + this.container.clientWidth;\n        const leftEdge = scrollParentOffset.left;\n        const isNearRightEdge = pageX > rightEdge - 20;\n        const isNearLeftEdge = pageX < leftEdge + 20;\n\n        if (isNearRightEdge) {\n            return \"right\";\n        } else if (isNearLeftEdge) {\n            return \"left\";\n        }\n\n        return undefined;\n    }\n\n    private getNewVerticalScrollDirection(\n        pageY: number,\n    ): VerticalScrollDirection | undefined {\n        if (pageY < this.getScrollParentTop()) {\n            return \"top\";\n        }\n\n        if (pageY > this.getScrollParentBottom()) {\n            return \"bottom\";\n        }\n\n        return undefined;\n    }\n\n    private scrollHorizontally() {\n        if (!this.horizontalScrollDirection) {\n            return;\n        }\n\n        const distance = this.horizontalScrollDirection === \"left\" ? -20 : 20;\n\n        this.container.scrollBy({\n            left: distance,\n            top: 0,\n            behavior: \"instant\",\n        });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollHorizontally.bind(this), 40);\n    }\n\n    private scrollVertically() {\n        if (!this.verticalScrollDirection) {\n            return;\n        }\n\n        const distance = this.verticalScrollDirection === \"top\" ? -20 : 20;\n\n        this.container.scrollBy({\n            left: 0,\n            top: distance,\n            behavior: \"instant\",\n        });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollVertically.bind(this), 40);\n    }\n\n    private getScrollParentTop() {\n        if (this.scrollParentTop == null) {\n            this.scrollParentTop = getOffsetTop(this.container)\n        }\n\n        return this.scrollParentTop;\n    }\n\n    private getScrollParentBottom() {\n        if (this.scrollParentBottom == null) {\n            this.scrollParentBottom = this.getScrollParentTop() + this.container.clientHeight;\n        }\n\n        return this.scrollParentBottom;\n    }\n}\n","import type { ScrollParent } from \"./types\";\nimport { getOffsetTop } from '../util'\n\ntype HorizontalScrollDirection = \"left\" | \"right\";\ntype VerticalScrollDirection = \"bottom\" | \"top\";\n\ninterface Params {\n    refreshHitAreas: () => void;\n    treeElement: HTMLElement;\n}\n\nexport default class DocumentScrollParent implements ScrollParent {\n    private documentScrollHeight?: number;\n    private documentScrollWidth?: number;\n    private horizontalScrollDirection?: HorizontalScrollDirection;\n    private horizontalScrollTimeout?: number;\n    private refreshHitAreas: () => void;\n    private treeElement: HTMLElement;\n    private verticalScrollDirection?: VerticalScrollDirection;\n    private verticalScrollTimeout?: number;\n\n    constructor({ refreshHitAreas, treeElement }: Params) {\n        this.refreshHitAreas = refreshHitAreas;\n        this.treeElement = treeElement;\n    }\n\n    public checkHorizontalScrolling(pageX: number): void {\n        const newHorizontalScrollDirection =\n            this.getNewHorizontalScrollDirection(pageX);\n\n        if (this.horizontalScrollDirection !== newHorizontalScrollDirection) {\n            this.horizontalScrollDirection = newHorizontalScrollDirection;\n\n            if (this.horizontalScrollTimeout != null) {\n                window.clearTimeout(this.horizontalScrollTimeout);\n            }\n\n            if (newHorizontalScrollDirection) {\n                this.horizontalScrollTimeout = window.setTimeout(\n                    this.scrollHorizontally.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public checkVerticalScrolling(pageY: number) {\n        const newVerticalScrollDirection =\n            this.getNewVerticalScrollDirection(pageY);\n\n        if (this.verticalScrollDirection !== newVerticalScrollDirection) {\n            this.verticalScrollDirection = newVerticalScrollDirection;\n\n            if (this.verticalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n                this.verticalScrollTimeout = undefined;\n            }\n\n            if (newVerticalScrollDirection) {\n                this.verticalScrollTimeout = window.setTimeout(\n                    this.scrollVertically.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public getScrollLeft(): number {\n        return document.documentElement.scrollLeft;\n    }\n\n    public scrollToY(top: number): void {\n        const treeTop = getOffsetTop(this.treeElement);\n\n        document.documentElement.scrollTop = top + treeTop;\n    }\n\n    public stopScrolling() {\n        this.horizontalScrollDirection = undefined;\n        this.verticalScrollDirection = undefined;\n        this.documentScrollHeight = undefined;\n        this.documentScrollWidth = undefined;\n    }\n\n    private getNewHorizontalScrollDirection(\n        pageX: number,\n    ): HorizontalScrollDirection | undefined {\n        const scrollLeft = document.documentElement.scrollLeft;\n        const windowWidth = window.innerWidth;\n\n        const isNearRightEdge = pageX > windowWidth - 20;\n        const isNearLeftEdge = pageX - scrollLeft < 20;\n\n        if (isNearRightEdge && this.canScrollRight()) {\n            return \"right\";\n        }\n\n        if (isNearLeftEdge) {\n            return \"left\";\n        }\n\n        return undefined;\n    }\n\n    private canScrollRight() {\n        const documentElement = document.documentElement;\n\n        return (\n            documentElement.scrollLeft + documentElement.clientWidth <\n            this.getDocumentScrollWidth()\n        );\n    }\n\n    private canScrollDown() {\n        const documentElement = document.documentElement;\n\n        return (\n            documentElement.scrollTop + documentElement.clientHeight <\n            this.getDocumentScrollHeight()\n        );\n    }\n\n    private getDocumentScrollHeight() {\n        // Store the original scroll height because the scroll height can increase when the drag element is moved beyond the scroll height.\n        if (this.documentScrollHeight == null) {\n            this.documentScrollHeight = document.documentElement.scrollHeight;\n        }\n\n        return this.documentScrollHeight;\n    }\n\n    private getDocumentScrollWidth() {\n        // Store the original scroll width because the scroll width can increase when the drag element is moved beyond the scroll width.\n        if (this.documentScrollWidth == null) {\n            this.documentScrollWidth = document.documentElement.scrollWidth;\n        }\n\n        return this.documentScrollWidth;\n    }\n\n    private getNewVerticalScrollDirection(\n        pageY: number,\n    ): VerticalScrollDirection | undefined {\n        const scrollTop = jQuery(document).scrollTop() || 0;\n        const distanceTop = pageY - scrollTop;\n\n        if (distanceTop < 20) {\n            return \"top\";\n        }\n\n        const windowHeight = window.innerHeight;\n\n        if (windowHeight - (pageY - scrollTop) < 20 && this.canScrollDown()) {\n            return \"bottom\";\n        }\n\n        return undefined;\n    }\n\n    private scrollHorizontally() {\n        if (!this.horizontalScrollDirection) {\n            return;\n        }\n\n        const distance = this.horizontalScrollDirection === \"left\" ? -20 : 20;\n        window.scrollBy({ left: distance, top: 0, behavior: \"instant\" });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollHorizontally.bind(this), 40);\n    }\n\n    private scrollVertically() {\n        if (!this.verticalScrollDirection) {\n            return;\n        }\n\n        const distance = this.verticalScrollDirection === \"top\" ? -20 : 20;\n        window.scrollBy({ left: 0, top: distance, behavior: \"instant\" });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollVertically.bind(this), 40);\n    }\n}\n","import type { ScrollParent } from \"./types\";\nimport ContainerScrollParent from \"./containerScrollParent\";\nimport DocumentScrollParent from \"./documentScrollParent\";\n\nconst isOverflow = (overflowValue: string) => overflowValue === 'auto' || overflowValue === 'scroll';\n\nconst hasOverFlow = (element: HTMLElement): boolean => isOverflow(element.style.overflow) || isOverflow(element.style.overflowY);\n\nconst getParentWithOverflow = (\n    treeElement: HTMLElement,\n): HTMLElement | null => {\n    if (hasOverFlow(treeElement)) {\n        return treeElement;\n    }\n\n    let parent = treeElement.parentElement;\n\n    while (parent) {\n        if (hasOverFlow(parent)) {\n            return parent;\n        }\n\n        parent = parent.parentElement;\n    }\n\n    return null;\n};\n\nconst createScrollParent = (\n    treeElement: HTMLElement,\n    refreshHitAreas: () => void,\n): ScrollParent => {\n    const container = getParentWithOverflow(treeElement);\n\n    if (container && container.tagName !== \"HTML\") {\n        return new ContainerScrollParent({\n            container,\n            refreshHitAreas,\n        });\n    } else {\n        return new DocumentScrollParent({ refreshHitAreas, treeElement });\n    }\n};\n\nexport default createScrollParent;\n","import { PositionInfo } from \"./mouseWidgetTypes\";\nimport { ScrollParent } from \"./scrollHandler/types\";\nimport createScrollParent from \"./scrollHandler/createScrollParent\";\n\ninterface ScrollHandlerParams {\n    refreshHitAreas: () => void;\n    treeElement: HTMLElement;\n}\n\nexport default class ScrollHandler {\n    private refreshHitAreas: () => void;\n    private scrollParent?: ScrollParent;\n    private treeElement: HTMLElement;\n\n    constructor({ refreshHitAreas, treeElement }: ScrollHandlerParams) {\n        this.refreshHitAreas = refreshHitAreas;\n        this.scrollParent = undefined;\n        this.treeElement = treeElement;\n    }\n\n    public checkScrolling(positionInfo: PositionInfo): void {\n        this.checkVerticalScrolling(positionInfo);\n        this.checkHorizontalScrolling(positionInfo);\n    }\n\n    public stopScrolling() {\n        this.getScrollParent().stopScrolling();\n    }\n\n    public scrollToY(top: number): void {\n        this.getScrollParent().scrollToY(top);\n    }\n\n    public getScrollLeft(): number {\n        return this.getScrollParent().getScrollLeft();\n    }\n\n    private checkVerticalScrolling(positionInfo: PositionInfo): void {\n        if (positionInfo.pageY == null) {\n            return;\n        }\n\n        this.getScrollParent().checkVerticalScrolling(positionInfo.pageY);\n    }\n\n    private checkHorizontalScrolling(positionInfo: PositionInfo): void {\n        if (positionInfo.pageX == null) {\n            return;\n        }\n\n        this.getScrollParent().checkHorizontalScrolling(positionInfo.pageX);\n    }\n\n    private getScrollParent(): ScrollParent {\n        if (!this.scrollParent) {\n            this.scrollParent = createScrollParent(\n                this.treeElement,\n                this.refreshHitAreas,\n            );\n        }\n\n        return this.scrollParent;\n    }\n}\n","import { Node } from \"./node\";\nimport { GetNodeById } from \"./jqtreeMethodTypes\";\n\ninterface SelectNodeHandlerParameters {\n    getNodeById: GetNodeById;\n}\n\nexport default class SelectNodeHandler {\n    private getNodeById: GetNodeById;\n    private selectedNodes: Set<NodeId>;\n    private selectedSingleNode: Node | null;\n\n    constructor({ getNodeById }: SelectNodeHandlerParameters) {\n        this.getNodeById = getNodeById;\n        this.selectedNodes = new Set<NodeId>();\n        this.clear();\n    }\n\n    public getSelectedNode(): Node | false {\n        const selectedNodes = this.getSelectedNodes();\n\n        if (selectedNodes.length) {\n            return selectedNodes[0] || false;\n        } else {\n            return false;\n        }\n    }\n\n    public getSelectedNodes(): Node[] {\n        if (this.selectedSingleNode) {\n            return [this.selectedSingleNode];\n        } else {\n            const selectedNodes: Node[] = [];\n\n            this.selectedNodes.forEach((id) => {\n                const node = this.getNodeById(id);\n                if (node) {\n                    selectedNodes.push(node);\n                }\n            });\n\n            return selectedNodes;\n        }\n    }\n\n    public getSelectedNodesUnder(parent: Node): Node[] {\n        if (this.selectedSingleNode) {\n            if (parent.isParentOf(this.selectedSingleNode)) {\n                return [this.selectedSingleNode];\n            } else {\n                return [];\n            }\n        } else {\n            const selectedNodes = [];\n\n            for (const id in this.selectedNodes) {\n                if (\n                    Object.prototype.hasOwnProperty.call(this.selectedNodes, id)\n                ) {\n                    const node = this.getNodeById(id);\n                    if (node && parent.isParentOf(node)) {\n                        selectedNodes.push(node);\n                    }\n                }\n            }\n\n            return selectedNodes;\n        }\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (node.id != null) {\n            return this.selectedNodes.has(node.id);\n        } else if (this.selectedSingleNode) {\n            return this.selectedSingleNode.element === node.element;\n        } else {\n            return false;\n        }\n    }\n\n    public clear(): void {\n        this.selectedNodes.clear();\n        this.selectedSingleNode = null;\n    }\n\n    public removeFromSelection(node: Node, includeChildren = false): void {\n        if (node.id == null) {\n            if (\n                this.selectedSingleNode &&\n                node.element === this.selectedSingleNode.element\n            ) {\n                this.selectedSingleNode = null;\n            }\n        } else {\n            this.selectedNodes.delete(node.id);\n\n            if (includeChildren) {\n                node.iterate(() => {\n                    if (node.id != null) {\n                        this.selectedNodes.delete(node.id);\n                    }\n                    return true;\n                });\n            }\n        }\n    }\n\n    public addToSelection(node: Node): void {\n        if (node.id != null) {\n            this.selectedNodes.add(node.id);\n        } else {\n            this.selectedSingleNode = node;\n        }\n    }\n}\n","import { DropHint } from \"../dragAndDropHandler/types\";\n\nclass BorderDropHint implements DropHint {\n    private hint?: HTMLElement;\n\n    constructor(element: HTMLElement, scrollLeft: number) {\n        const div = element.querySelector(\":scope > .jqtree-element\");\n\n        if (!div) {\n            this.hint = undefined;\n            return;\n        }\n\n        const width = Math.max(element.offsetWidth + scrollLeft - 4, 0);\n        const height = Math.max(element.clientHeight - 4, 0);\n\n        const hint = document.createElement(\"span\");\n        hint.className = \"jqtree-border\";\n        hint.style.width = `${width}px`;\n        hint.style.height = `${height}px`;\n\n        this.hint = hint;\n\n        div.append(this.hint);\n    }\n\n    public remove(): void {\n        this.hint?.remove();\n    }\n}\n\nexport default BorderDropHint;\n","import { Position, Node } from \"../node\";\nimport { DropHint } from \"../dragAndDropHandler/types\";\n\nclass GhostDropHint implements DropHint {\n    private element: HTMLElement;\n    private node: Node;\n    private ghost: HTMLElement;\n\n    constructor(node: Node, element: HTMLElement, position: Position) {\n        this.element = element;\n        this.node = node;\n        this.ghost = this.createGhostElement();\n\n        if (position === Position.After) {\n            this.moveAfter();\n        } else if (position === Position.Before) {\n            this.moveBefore();\n        } else if (position === Position.Inside) {\n            if (node.isFolder() && node.is_open) {\n                this.moveInsideOpenFolder();\n            } else {\n                this.moveInside();\n            }\n        }\n    }\n\n    public remove(): void {\n        this.ghost.remove();\n    }\n\n    private moveAfter(): void {\n        this.element.after(this.ghost);\n    }\n\n    private moveBefore(): void {\n        this.element.before(this.ghost);\n    }\n\n    private moveInsideOpenFolder(): void {\n        const childElement = this.node.children[0]?.element;\n\n        if (childElement) {\n            childElement.before(this.ghost);\n        }\n    }\n\n    private moveInside(): void {\n        this.element.after(this.ghost);\n        this.ghost.classList.add(\"jqtree-inside\");\n    }\n\n    private createGhostElement() {\n        const ghost = document.createElement(\"li\");\n        ghost.className = \"jqtree_common jqtree-ghost\";\n\n        const circleSpan = document.createElement(\"span\");\n        circleSpan.className = \"jqtree_common jqtree-circle\";\n        ghost.append(circleSpan);\n\n        const lineSpan = document.createElement(\"span\");\n        lineSpan.className = \"jqtree_common jqtree-line\";\n        ghost.append(lineSpan);\n\n        return ghost;\n    }\n}\n\nexport default GhostDropHint;\n","import { Position, Node } from \"../node\";\nimport { DropHint } from \"../dragAndDropHandler/types\";\nimport BorderDropHint from \"./borderDropHint\";\nimport GhostDropHint from \"./ghostDropHint\";\nimport { GetScrollLeft } from \"../jqtreeMethodTypes\";\n\nexport interface NodeElementParams {\n    getScrollLeft: GetScrollLeft;\n    node: Node;\n    tabIndex?: number;\n    $treeElement: JQuery<HTMLElement>;\n}\n\nclass NodeElement {\n    public node: Node;\n    public element: HTMLElement;\n    private getScrollLeft: GetScrollLeft;\n    private tabIndex?: number;\n    private $treeElement: JQuery<HTMLElement>;\n\n    constructor({\n        getScrollLeft,\n        node,\n        tabIndex,\n        $treeElement,\n    }: NodeElementParams) {\n        this.getScrollLeft = getScrollLeft;\n        this.tabIndex = tabIndex;\n        this.$treeElement = $treeElement;\n\n        this.init(node);\n    }\n\n    public init(node: Node): void {\n        this.node = node;\n\n        if (!node.element) {\n            const element = this.$treeElement.get(0);\n\n            if (element) {\n                node.element = element;\n            }\n        }\n\n        if (node.element) {\n            this.element = node.element;\n        }\n    }\n\n    public addDropHint(position: number): DropHint {\n        if (this.mustShowBorderDropHint(position)) {\n            return new BorderDropHint(this.element, this.getScrollLeft());\n        } else {\n            return new GhostDropHint(this.node, this.element, position);\n        }\n    }\n\n    public select(mustSetFocus: boolean): void {\n        this.element.classList.add(\"jqtree-selected\");\n\n        const titleSpan = this.getTitleSpan();\n        const tabIndex = this.tabIndex;\n\n        // Check for null or undefined\n        if (tabIndex != null) {\n            titleSpan.setAttribute(\"tabindex\", tabIndex.toString());\n        }\n\n        titleSpan.setAttribute(\"aria-selected\", \"true\");\n\n        if (mustSetFocus) {\n            titleSpan.focus();\n        }\n    }\n\n    public deselect(): void {\n        this.element.classList.remove(\"jqtree-selected\");\n\n        const titleSpan = this.getTitleSpan();\n        titleSpan.removeAttribute(\"tabindex\");\n        titleSpan.setAttribute(\"aria-selected\", \"false\");\n\n        titleSpan.blur();\n    }\n\n    protected getUl(): HTMLUListElement {\n        return this.element.querySelector(\":scope > ul\") as HTMLUListElement;\n    }\n\n    protected getTitleSpan(): HTMLSpanElement {\n        return this.element.querySelector(\n            \":scope > .jqtree-element > span.jqtree-title\",\n        ) as HTMLSpanElement;\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return position === Position.Inside;\n    }\n}\n\nexport default NodeElement;\n","import { Position } from \"../node\";\nimport NodeElement, { NodeElementParams } from \"./index\";\nimport { OnFinishOpenNode, TriggerEvent } from \"../jqtreeMethodTypes\";\n\ninterface FolderElementParams extends NodeElementParams {\n    closedIconElement?: HTMLElement | Text;\n    openedIconElement?: HTMLElement | Text;\n    triggerEvent: TriggerEvent;\n}\n\nclass FolderElement extends NodeElement {\n    private closedIconElement?: HTMLElement | Text;\n    private openedIconElement?: HTMLElement | Text;\n    private triggerEvent: TriggerEvent;\n\n    constructor({\n        closedIconElement,\n        getScrollLeft,\n        node,\n        openedIconElement,\n        tabIndex,\n        $treeElement,\n        triggerEvent,\n    }: FolderElementParams) {\n        super({\n            getScrollLeft,\n            node,\n            tabIndex,\n            $treeElement,\n        });\n\n        this.closedIconElement = closedIconElement;\n        this.openedIconElement = openedIconElement;\n        this.triggerEvent = triggerEvent;\n    }\n\n    public open(\n        onFinished: OnFinishOpenNode | undefined,\n        slide = true,\n        animationSpeed: JQuery.Duration = \"fast\",\n    ): void {\n        if (this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = true;\n\n        const button = this.getButton();\n        button.classList.remove(\"jqtree-closed\");\n        button.innerHTML = \"\";\n\n        const openedIconElement = this.openedIconElement;\n\n        if (openedIconElement) {\n            const icon = openedIconElement.cloneNode(true);\n            button.appendChild(icon);\n        }\n\n        const doOpen = (): void => {\n            this.element.classList.remove(\"jqtree-closed\");\n\n            const titleSpan = this.getTitleSpan();\n            titleSpan.setAttribute(\"aria-expanded\", \"true\");\n\n            if (onFinished) {\n                onFinished(this.node);\n            }\n\n            this.triggerEvent(\"tree.open\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            jQuery(this.getUl()).slideDown(animationSpeed, doOpen);\n        } else {\n            jQuery(this.getUl()).show();\n            doOpen();\n        }\n    }\n\n    public close(\n        slide = true,\n        animationSpeed: JQuery.Duration | undefined = \"fast\",\n    ): void {\n        if (!this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = false;\n\n        const button = this.getButton();\n        button.classList.add(\"jqtree-closed\");\n        button.innerHTML = \"\";\n\n        const closedIconElement = this.closedIconElement;\n\n        if (closedIconElement) {\n            const icon = closedIconElement.cloneNode(true);\n            button.appendChild(icon);\n        }\n\n        const doClose = (): void => {\n            this.element.classList.add(\"jqtree-closed\");\n\n            const titleSpan = this.getTitleSpan();\n            titleSpan.setAttribute(\"aria-expanded\", \"false\");\n\n            this.triggerEvent(\"tree.close\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            jQuery(this.getUl()).slideUp(animationSpeed, doClose);\n        } else {\n            jQuery(this.getUl()).hide();\n            doClose();\n        }\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return !this.node.is_open && position === Position.Inside;\n    }\n\n    private getButton(): HTMLLinkElement {\n        return this.element.querySelector(\n            \":scope > .jqtree-element > a.jqtree-toggler\",\n        ) as HTMLLinkElement;\n    }\n}\n\nexport default FolderElement;\n","import __version__ from \"./version\";\nimport { DragAndDropHandler } from \"./dragAndDropHandler\";\nimport ElementsRenderer from \"./elementsRenderer\";\nimport DataLoader, { HandleFinishedLoading } from \"./dataLoader\";\nimport KeyHandler from \"./keyHandler\";\nimport MouseWidget from \"./mouse.widget\";\nimport { PositionInfo } from \"./mouseWidgetTypes\";\nimport SaveStateHandler, { SavedState } from \"./saveStateHandler\";\nimport ScrollHandler from \"./scrollHandler\";\nimport SelectNodeHandler from \"./selectNodeHandler\";\nimport SimpleWidget from \"./simple.widget\";\nimport { Node, getPosition } from \"./node\";\nimport { getOffsetTop, isFunction } from \"./util\";\nimport NodeElement from \"./nodeElement\";\nimport FolderElement from \"./nodeElement/folderElement\";\nimport { OnFinishOpenNode } from \"./jqtreeMethodTypes\";\nimport { JQTreeOptions } from \"./jqtreeOptions\";\n\ninterface ClickTarget {\n    node: Node;\n    type: \"button\" | \"label\";\n}\n\ninterface SelectNodeOptions {\n    mustToggle?: boolean;\n    mustSetFocus?: boolean;\n}\n\nconst NODE_PARAM_IS_EMPTY = \"Node parameter is empty\";\nconst PARAM_IS_EMPTY = \"Parameter is empty: \";\n\nexport class JqTreeWidget extends MouseWidget<JQTreeOptions> {\n    protected static defaults: JQTreeOptions = {\n        animationSpeed: \"fast\",\n        autoEscape: true,\n        autoOpen: false, // true / false / int (open n levels starting at 0)\n        buttonLeft: true,\n        // The symbol to use for a closed node - ► BLACK RIGHT-POINTING POINTER\n        // http://www.fileformat.info/info/unicode/char/25ba/index.htm\n        closedIcon: undefined,\n        data: undefined,\n        dataFilter: undefined,\n        dataUrl: undefined,\n        dragAndDrop: false,\n        keyboardSupport: true,\n        nodeClass: Node,\n        onCanMove: undefined, // Can this node be moved?\n        onCanMoveTo: undefined, // Can this node be moved to this position? function(moved_node, target_node, position)\n        onCanSelectNode: undefined,\n        onCreateLi: undefined,\n        onDragMove: undefined,\n        onDragStop: undefined,\n        onGetStateFromStorage: undefined,\n        onIsMoveHandle: undefined,\n        onLoadFailed: undefined,\n        onLoading: undefined,\n        onSetStateFromStorage: undefined,\n        openedIcon: \"&#x25bc;\",\n        openFolderDelay: 500, // The delay for opening a folder during drag and drop; the value is in milliseconds\n        // The symbol to use for an open node - ▼ BLACK DOWN-POINTING TRIANGLE\n        // http://www.fileformat.info/info/unicode/char/25bc/index.htm\n        rtl: undefined, // right-to-left support; true / false (default)\n        saveState: false, // true / false / string (cookie name)\n        selectable: true,\n        showEmptyFolder: false,\n        slide: true, // must display slide animation?\n        startDndDelay: 300, // The delay for starting dnd (in milliseconds)\n        tabIndex: 0,\n        useContextMenu: true,\n    };\n\n    public element: JQuery;\n    public tree: Node;\n    public dndHandler: DragAndDropHandler;\n    public renderer: ElementsRenderer;\n    public dataLoader: DataLoader;\n    public scrollHandler: ScrollHandler;\n    public selectNodeHandler: SelectNodeHandler;\n\n    private isInitialized: boolean;\n    private saveStateHandler: SaveStateHandler;\n    private keyHandler: KeyHandler;\n\n    public toggle(node: Node, slideParam: null | boolean = null): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.is_open) {\n            this.closeNode(node, slide);\n        } else {\n            this.openNode(node, slide);\n        }\n\n        return this.element;\n    }\n\n    public getTree(): Node {\n        return this.tree;\n    }\n\n    public selectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): JQuery {\n        this.doSelectNode(node, optionsParam);\n        return this.element;\n    }\n\n    public getSelectedNode(): Node | false {\n        return this.selectNodeHandler.getSelectedNode();\n    }\n\n    public toJson(): string {\n        return JSON.stringify(this.tree.getData());\n    }\n\n    public loadData(data: NodeData[], parentNode: Node | null): JQuery {\n        this.doLoadData(data, parentNode);\n        return this.element;\n    }\n\n    /*\n    signatures:\n    - loadDataFromUrl(url, parent_node=null, on_finished=null)\n        loadDataFromUrl('/my_data');\n        loadDataFromUrl('/my_data', node1);\n        loadDataFromUrl('/my_data', node1, function() { console.log('finished'); });\n        loadDataFromUrl('/my_data', null, function() { console.log('finished'); });\n\n    - loadDataFromUrl(parent_node=null, on_finished=null)\n        loadDataFromUrl();\n        loadDataFromUrl(node1);\n        loadDataFromUrl(null, function() { console.log('finished'); });\n        loadDataFromUrl(node1, function() { console.log('finished'); });\n    */\n    public loadDataFromUrl(\n        param1: string | null | Node,\n        param2?: Node | null | HandleFinishedLoading,\n        param3?: HandleFinishedLoading,\n    ): JQuery {\n        if (typeof param1 === \"string\") {\n            // first parameter is url\n            this.doLoadDataFromUrl(\n                param1,\n                param2 as Node | null,\n                param3 ?? null,\n            );\n        } else {\n            // first parameter is not url\n            this.doLoadDataFromUrl(\n                null,\n                param1,\n                param2 as HandleFinishedLoading | null,\n            );\n        }\n\n        return this.element;\n    }\n\n    public reload(onFinished: HandleFinishedLoading | null): JQuery {\n        this.doLoadDataFromUrl(null, null, onFinished);\n        return this.element;\n    }\n\n    public refresh(): JQuery {\n        this._refreshElements(null);\n        return this.element;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.tree.getNodeById(nodeId);\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.tree.getNodeByName(name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        return this.tree.getNodeByNameMustExist(name);\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.tree.getNodesByProperty(key, value);\n    }\n\n    public getNodeByHtmlElement(\n        inputElement: HTMLElement | JQuery<HTMLElement>,\n    ): Node | null {\n        const element =\n            inputElement instanceof HTMLElement\n                ? inputElement\n                : inputElement[0];\n\n        if (!element) {\n            return null;\n        }\n\n        return this.getNode(element);\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        return this.tree.getNodeByCallback(callback);\n    }\n\n    public openNode(\n        node: Node,\n        param1?: boolean | OnFinishOpenNode,\n        param2?: OnFinishOpenNode,\n    ): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const parseParams = (): [boolean, OnFinishOpenNode | undefined] => {\n            let onFinished: OnFinishOpenNode | null;\n            let slide: boolean | null;\n\n            if (isFunction(param1)) {\n                onFinished = param1 as OnFinishOpenNode;\n                slide = null;\n            } else {\n                slide = param1 as boolean;\n                onFinished = param2 as OnFinishOpenNode;\n            }\n\n            if (slide == null) {\n                slide = this.options.slide ?? false;\n            }\n\n            return [slide, onFinished];\n        };\n\n        const [slide, onFinished] = parseParams();\n\n        this._openNode(node, slide, onFinished);\n        return this.element;\n    }\n\n    public closeNode(node: Node, slideParam?: null | boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            this.createFolderElement(node).close(\n                slide,\n                this.options.animationSpeed,\n            );\n\n            this.saveState();\n        }\n\n        return this.element;\n    }\n\n    public isDragging(): boolean {\n        return this.dndHandler.isDragging;\n    }\n\n    public refreshHitAreas(): JQuery {\n        this.dndHandler.refresh();\n        return this.element;\n    }\n\n    public addNodeAfter(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        const newNode = existingNode.addAfter(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addNodeBefore(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addBefore(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addParentNode(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addParent(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(newNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public removeNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!node.parent) {\n            throw Error(\"Node has no parent\");\n        }\n\n        this.selectNodeHandler.removeFromSelection(node, true); // including children\n\n        const parent = node.parent;\n        node.remove();\n        this._refreshElements(parent);\n\n        return this.element;\n    }\n\n    public appendNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam || this.tree;\n\n        const node = parentNode.append(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public prependNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam ?? this.tree;\n\n        const node = parentNode.prepend(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public updateNode(node: Node, data: NodeData): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const idIsChanged =\n            typeof data === \"object\" && data.id && data.id !== node.id;\n\n        if (idIsChanged) {\n            this.tree.removeNodeFromIndex(node);\n        }\n\n        node.setData(data);\n\n        if (idIsChanged) {\n            this.tree.addNodeToIndex(node);\n        }\n\n        if (\n            typeof data === \"object\" &&\n            data[\"children\"] &&\n            data[\"children\"] instanceof Array\n        ) {\n            node.removeChildren();\n\n            if (data.children.length) {\n                node.loadFromData(data.children as Node[]);\n            }\n        }\n\n        this._refreshElements(node);\n\n        return this.element;\n    }\n\n    private isSelectedNodeInSubtree(subtree: Node): boolean {\n        const selectedNode = this.getSelectedNode();\n\n        if (!selectedNode) {\n            return false;\n        } else {\n            return subtree === selectedNode || subtree.isParentOf(selectedNode);\n        }\n    }\n\n    public moveNode(node: Node, targetNode: Node, position: string): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!targetNode) {\n            throw Error(PARAM_IS_EMPTY + \"targetNode\");\n        }\n\n        const positionIndex = getPosition(position);\n\n        if (positionIndex !== undefined) {\n            this.tree.moveNode(node, targetNode, positionIndex);\n            this._refreshElements(null);\n        }\n\n        return this.element;\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        return this.saveStateHandler.getStateFromStorage();\n    }\n\n    public addToSelection(node: Node, mustSetFocus?: boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.addToSelection(node);\n        this.openParents(node);\n\n        this._getNodeElementForNode(node).select(\n            mustSetFocus === undefined ? true : mustSetFocus,\n        );\n\n        this.saveState();\n\n        return this.element;\n    }\n\n    public getSelectedNodes(): Node[] {\n        return this.selectNodeHandler.getSelectedNodes();\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        return this.selectNodeHandler.isNodeSelected(node);\n    }\n\n    public removeFromSelection(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.removeFromSelection(node);\n\n        this._getNodeElementForNode(node).deselect();\n        this.saveState();\n\n        return this.element;\n    }\n\n    public scrollToNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const top = getOffsetTop(node.element) - getOffsetTop(this.$el.get(0) as HTMLElement);\n\n        this.scrollHandler.scrollToY(top);\n\n        return this.element;\n    }\n\n    public getState(): SavedState | null {\n        return this.saveStateHandler.getState();\n    }\n\n    public setState(state: SavedState): JQuery {\n        this.saveStateHandler.setInitialState(state);\n        this._refreshElements(null);\n\n        return this.element;\n    }\n\n    public setOption(option: string, value: unknown): JQuery {\n        (this.options as unknown as Record<string, unknown>)[option] = value;\n        return this.element;\n    }\n\n    public moveDown(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveDown(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public moveUp(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveUp(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public getVersion(): string {\n        return __version__;\n    }\n\n    public _triggerEvent(\n        eventName: string,\n        values?: Record<string, unknown>,\n    ): JQuery.Event {\n        const event = jQuery.Event(eventName, values);\n        this.element.trigger(event);\n        return event;\n    }\n\n    public _openNode(\n        node: Node,\n        slide = true,\n        onFinished?: OnFinishOpenNode,\n    ): void {\n        const doOpenNode = (\n            _node: Node,\n            _slide: boolean,\n            _onFinished?: OnFinishOpenNode,\n        ): void => {\n            const folderElement = this.createFolderElement(_node);\n            folderElement.open(\n                _onFinished,\n                _slide,\n                this.options.animationSpeed,\n            );\n        };\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            if (node.load_on_demand) {\n                this.loadFolderOnDemand(node, slide, onFinished);\n            } else {\n                let parent = node.parent;\n\n                while (parent) {\n                    // nb: do not open root element\n                    if (parent.parent) {\n                        doOpenNode(parent, false);\n                    }\n                    parent = parent.parent;\n                }\n\n                doOpenNode(node, slide, onFinished);\n                this.saveState();\n            }\n        }\n    }\n\n    /*\n    Redraw the tree or part of the tree.\n     from_node: redraw this subtree\n    */\n    public _refreshElements(fromNode: Node | null): void {\n        const mustSetFocus = this.isFocusOnTree();\n        const mustSelect = fromNode\n            ? this.isSelectedNodeInSubtree(fromNode)\n            : false;\n\n        this.renderer.render(fromNode);\n\n        if (mustSelect) {\n            this.selectCurrentNode(mustSetFocus);\n        }\n\n        this._triggerEvent(\"tree.refresh\");\n    }\n\n    public _getNodeElementForNode(node: Node): NodeElement {\n        if (node.isFolder()) {\n            return this.createFolderElement(node);\n        } else {\n            return this.createNodeElement(node);\n        }\n    }\n\n    public _getNodeElement(element: HTMLElement): NodeElement | null {\n        const node = this.getNode(element);\n        if (node) {\n            return this._getNodeElementForNode(node);\n        } else {\n            return null;\n        }\n    }\n\n    public _getScrollLeft(): number {\n        return this.scrollHandler.getScrollLeft();\n    }\n\n    public init(): void {\n        super.init();\n\n        this.element = this.$el;\n        this.isInitialized = false;\n\n        this.options.rtl = this.getRtlOption();\n\n        if (this.options.closedIcon == null) {\n            this.options.closedIcon = this.getDefaultClosedIcon();\n        }\n\n        this.connectHandlers();\n\n        this.initData();\n\n        this.element.on(\"click\", this.handleClick);\n        this.element.on(\"dblclick\", this.handleDblclick);\n\n        if (this.options.useContextMenu) {\n            this.element.on(\"contextmenu\", this.handleContextmenu);\n        }\n    }\n\n    public deinit(): void {\n        this.element.empty();\n        this.element.off();\n\n        this.keyHandler.deinit();\n\n        this.tree = new Node({}, true);\n\n        super.deinit();\n    }\n\n    protected mouseCapture(positionInfo: PositionInfo): boolean | null {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseCapture(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStart(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStart(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseDrag(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            const result = this.dndHandler.mouseDrag(positionInfo);\n\n            this.scrollHandler.checkScrolling(positionInfo);\n            return result;\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStop(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            this.scrollHandler.stopScrolling();\n            return this.dndHandler.mouseStop(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected getMouseDelay(): number {\n        return this.options.startDndDelay ?? 0;\n    }\n\n    private initData(): void {\n        if (this.options.data) {\n            this.doLoadData(this.options.data, null);\n        } else {\n            const dataUrl = this.getDataUrlInfo(null);\n\n            if (dataUrl) {\n                this.doLoadDataFromUrl(null, null, null);\n            } else {\n                this.doLoadData([], null);\n            }\n        }\n    }\n\n    private getDataUrlInfo(node: Node | null): JQuery.AjaxSettings | null {\n        const dataUrl =\n            this.options.dataUrl || (this.element.data(\"url\") as string | null);\n\n        const getUrlFromString = (url: string): JQuery.AjaxSettings => {\n            const urlInfo: JQuery.AjaxSettings = { url };\n\n            setUrlInfoData(urlInfo);\n\n            return urlInfo;\n        };\n\n        const setUrlInfoData = (urlInfo: JQuery.AjaxSettings): void => {\n            if (node?.id) {\n                // Load on demand of a subtree; add node parameter\n                const data = { node: node.id };\n                urlInfo[\"data\"] = data;\n            } else {\n                // Add selected_node parameter\n                const selectedNodeId = this.getNodeIdToBeSelected();\n                if (selectedNodeId) {\n                    const data = { selected_node: selectedNodeId };\n                    urlInfo[\"data\"] = data;\n                }\n            }\n        };\n\n        if (typeof dataUrl === \"function\") {\n            return dataUrl(node);\n        } else if (typeof dataUrl === \"string\") {\n            return getUrlFromString(dataUrl);\n        } else if (dataUrl && typeof dataUrl === \"object\") {\n            setUrlInfoData(dataUrl);\n            return dataUrl;\n        } else {\n            return null;\n        }\n    }\n\n    private getNodeIdToBeSelected(): NodeId | null {\n        if (this.options.saveState) {\n            return this.saveStateHandler.getNodeIdToBeSelected();\n        } else {\n            return null;\n        }\n    }\n\n    private initTree(data: NodeData[]): void {\n        const doInit = (): void => {\n            if (!this.isInitialized) {\n                this.isInitialized = true;\n                this._triggerEvent(\"tree.init\");\n            }\n        };\n\n        if (!this.options.nodeClass) {\n            return;\n        }\n\n        this.tree = new this.options.nodeClass(\n            null,\n            true,\n            this.options.nodeClass,\n        );\n\n        this.selectNodeHandler.clear();\n\n        this.tree.loadFromData(data);\n\n        const mustLoadOnDemand = this.setInitialState();\n\n        this._refreshElements(null);\n\n        if (!mustLoadOnDemand) {\n            doInit();\n        } else {\n            // Load data on demand and then init the tree\n            this.setInitialStateOnDemand(doInit);\n        }\n    }\n\n    // Set initial state, either by restoring the state or auto-opening nodes\n    // result: must load nodes on demand?\n    private setInitialState(): boolean {\n        const restoreState = (): [boolean, boolean] => {\n            // result: is state restored, must load on demand?\n            if (!this.options.saveState) {\n                return [false, false];\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return [false, false];\n                } else {\n                    const mustLoadOnDemand =\n                        this.saveStateHandler.setInitialState(state);\n\n                    // return true: the state is restored\n                    return [true, mustLoadOnDemand];\n                }\n            }\n        };\n\n        const autoOpenNodes = (): boolean => {\n            // result: must load on demand?\n            if (this.options.autoOpen === false) {\n                return false;\n            }\n\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let mustLoadOnDemand = false;\n\n            this.tree.iterate((node: Node, level: number) => {\n                if (node.load_on_demand) {\n                    mustLoadOnDemand = true;\n                    return false;\n                } else if (!node.hasChildren()) {\n                    return false;\n                } else {\n                    node.is_open = true;\n                    return level !== maxLevel;\n                }\n            });\n\n            return mustLoadOnDemand;\n        };\n\n        let [isRestored, mustLoadOnDemand] = restoreState(); // eslint-disable-line prefer-const\n\n        if (!isRestored) {\n            mustLoadOnDemand = autoOpenNodes();\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    // Set the initial state for nodes that are loaded on demand\n    // Call cb_finished when done\n    private setInitialStateOnDemand(cbFinished: () => void): void {\n        const restoreState = (): boolean => {\n            if (!this.options.saveState) {\n                return false;\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return false;\n                } else {\n                    this.saveStateHandler.setInitialStateOnDemand(\n                        state,\n                        cbFinished,\n                    );\n\n                    return true;\n                }\n            }\n        };\n\n        const autoOpenNodes = (): void => {\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let loadingCount = 0;\n\n            const loadAndOpenNode = (node: Node): void => {\n                loadingCount += 1;\n                this._openNode(node, false, () => {\n                    loadingCount -= 1;\n                    openNodes();\n                });\n            };\n\n            const openNodes = (): void => {\n                this.tree.iterate((node: Node, level: number) => {\n                    if (node.load_on_demand) {\n                        if (!node.is_loading) {\n                            loadAndOpenNode(node);\n                        }\n\n                        return false;\n                    } else {\n                        this._openNode(node, false);\n\n                        return level !== maxLevel;\n                    }\n                });\n\n                if (loadingCount === 0) {\n                    cbFinished();\n                }\n            };\n\n            openNodes();\n        };\n\n        if (!restoreState()) {\n            autoOpenNodes();\n        }\n    }\n\n    private getAutoOpenMaxLevel(): number {\n        if (this.options.autoOpen === true) {\n            return -1;\n        } else if (typeof this.options.autoOpen === \"number\") {\n            return this.options.autoOpen;\n        } else if (typeof this.options.autoOpen === \"string\") {\n            return parseInt(this.options.autoOpen, 10);\n        } else {\n            return 0;\n        }\n    }\n\n    private handleClick = (\n        e: JQuery.ClickEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget) {\n            if (clickTarget.type === \"button\") {\n                this.toggle(clickTarget.node, this.options.slide);\n\n                e.preventDefault();\n                e.stopPropagation();\n            } else if (clickTarget.type === \"label\") {\n                const node = clickTarget.node;\n                const event = this._triggerEvent(\"tree.click\", {\n                    node,\n                    click_event: e,\n                });\n\n                if (!event.isDefaultPrevented()) {\n                    this.doSelectNode(node);\n                }\n            }\n        }\n    };\n\n    private handleDblclick = (\n        e: JQuery.DoubleClickEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget?.type === \"label\") {\n            this._triggerEvent(\"tree.dblclick\", {\n                node: clickTarget.node,\n                click_event: e,\n            });\n        }\n    };\n\n    private getClickTarget(element: HTMLElement): ClickTarget | null {\n        const button = element.closest(\".jqtree-toggler\");\n\n        if (button) {\n            const node = this.getNode(button as HTMLElement);\n\n            if (node) {\n                return {\n                    type: \"button\",\n                    node,\n                };\n            }\n        } else {\n            const jqTreeElement = element.closest(\".jqtree-element\");\n\n            if (jqTreeElement) {\n                const node = this.getNode(jqTreeElement as HTMLElement);\n                if (node) {\n                    return {\n                        type: \"label\",\n                        node,\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    private getNode(element: HTMLElement): null | Node {\n        const liElement = element.closest(\"li.jqtree_common\");\n\n        if (liElement) {\n            return jQuery(liElement).data(\"node\") as Node;\n        } else {\n            return null;\n        }\n    }\n\n    private handleContextmenu = (\n        e: JQuery.ContextMenuEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ) => {\n        const div = e.target.closest(\"ul.jqtree-tree .jqtree-element\");\n\n        if (div) {\n            const node = this.getNode(div as HTMLElement);\n            if (node) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                this._triggerEvent(\"tree.contextmenu\", {\n                    node,\n                    click_event: e,\n                });\n                return false;\n            }\n        }\n\n        return null;\n    };\n\n    private saveState(): void {\n        if (this.options.saveState) {\n            this.saveStateHandler.saveState();\n        }\n    }\n\n    private selectCurrentNode(mustSetFocus: boolean): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            const nodeElement = this._getNodeElementForNode(node);\n            if (nodeElement) {\n                nodeElement.select(mustSetFocus);\n            }\n        }\n    }\n\n    private deselectCurrentNode(): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            this.removeFromSelection(node);\n        }\n    }\n\n    private getDefaultClosedIcon(): string {\n        if (this.options.rtl) {\n            // triangle to the left\n            return \"&#x25c0;\";\n        } else {\n            // triangle to the right\n            return \"&#x25ba;\";\n        }\n    }\n\n    private getRtlOption(): boolean {\n        if (this.options.rtl != null) {\n            return this.options.rtl;\n        } else {\n            const dataRtl = this.element.data(\"rtl\") as unknown;\n\n            if (\n                dataRtl !== null &&\n                dataRtl !== false &&\n                dataRtl !== undefined\n            ) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    private doSelectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): void {\n        const saveState = (): void => {\n            if (this.options.saveState) {\n                this.saveStateHandler.saveState();\n            }\n        };\n\n        if (!node) {\n            // Called with empty node -> deselect current node\n            this.deselectCurrentNode();\n            saveState();\n            return;\n        }\n        const defaultOptions = { mustSetFocus: true, mustToggle: true };\n        const selectOptions = { ...defaultOptions, ...(optionsParam || {}) };\n\n        const canSelect = (): boolean => {\n            if (this.options.onCanSelectNode) {\n                return (\n                    this.options.selectable === true &&\n                    this.options.onCanSelectNode(node)\n                );\n            } else {\n                return this.options.selectable === true;\n            }\n        };\n\n        if (!canSelect()) {\n            return;\n        }\n\n        if (this.selectNodeHandler.isNodeSelected(node)) {\n            if (selectOptions.mustToggle) {\n                this.deselectCurrentNode();\n                this._triggerEvent(\"tree.select\", {\n                    node: null,\n                    previous_node: node,\n                });\n            }\n        } else {\n            const deselectedNode = this.getSelectedNode() || null;\n            this.deselectCurrentNode();\n            this.addToSelection(node, selectOptions.mustSetFocus);\n\n            this._triggerEvent(\"tree.select\", {\n                node,\n                deselected_node: deselectedNode,\n            });\n            this.openParents(node);\n        }\n\n        saveState();\n    }\n\n    private doLoadData(data: NodeData[] | null, parentNode: Node | null): void {\n        if (data) {\n            if (parentNode) {\n                this.deselectNodes(parentNode);\n                this.loadSubtree(data, parentNode);\n            } else {\n                this.initTree(data);\n            }\n\n            if (this.isDragging()) {\n                this.dndHandler.refresh();\n            }\n        }\n\n        this._triggerEvent(\"tree.load_data\", {\n            tree_data: data,\n            parent_node: parentNode,\n        });\n    }\n\n    private deselectNodes(parentNode: Node): void {\n        const selectedNodesUnderParent =\n            this.selectNodeHandler.getSelectedNodesUnder(parentNode);\n        for (const n of selectedNodesUnderParent) {\n            this.selectNodeHandler.removeFromSelection(n);\n        }\n    }\n\n    private loadSubtree(data: NodeData[], parentNode: Node): void {\n        parentNode.loadFromData(data);\n\n        parentNode.load_on_demand = false;\n        parentNode.is_loading = false;\n\n        this._refreshElements(parentNode);\n    }\n\n    private doLoadDataFromUrl(\n        urlInfoParam: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null,\n    ): void {\n        const urlInfo = urlInfoParam || this.getDataUrlInfo(parentNode);\n\n        this.dataLoader.loadFromUrl(urlInfo, parentNode, onFinished);\n    }\n\n    private loadFolderOnDemand(\n        node: Node,\n        slide = true,\n        onFinished?: OnFinishOpenNode,\n    ): void {\n        node.is_loading = true;\n\n        this.doLoadDataFromUrl(null, node, () => {\n            this._openNode(node, slide, onFinished);\n        });\n    }\n\n    private containsElement(element: HTMLElement): boolean {\n        const node = this.getNode(element);\n\n        return node != null && node.tree === this.tree;\n    }\n\n    private isFocusOnTree(): boolean {\n        const activeElement = document.activeElement;\n\n        return Boolean(\n            activeElement &&\n                activeElement.tagName === \"SPAN\" &&\n                this.containsElement(activeElement as HTMLElement),\n        );\n    }\n\n    private connectHandlers() {\n        const {\n            autoEscape,\n            buttonLeft,\n            closedIcon,\n            dataFilter,\n            dragAndDrop,\n            keyboardSupport,\n            onCanMove,\n            onCreateLi,\n            onDragMove,\n            onDragStop,\n            onGetStateFromStorage,\n            onIsMoveHandle,\n            onLoadFailed,\n            onLoading,\n            onSetStateFromStorage,\n            openedIcon,\n            openFolderDelay,\n            rtl,\n            saveState,\n            showEmptyFolder,\n            slide,\n            tabIndex,\n        } = this.options;\n\n        const closeNode = this.closeNode.bind(this);\n        const getNodeElement = this._getNodeElement.bind(this);\n        const getNodeElementForNode = this._getNodeElementForNode.bind(this);\n        const getNodeById = this.getNodeById.bind(this);\n        const getSelectedNode = this.getSelectedNode.bind(this);\n        const getTree = this.getTree.bind(this);\n        const isFocusOnTree = this.isFocusOnTree.bind(this);\n        const loadData = this.loadData.bind(this);\n        const openNode = this._openNode.bind(this);\n        const refreshElements = this._refreshElements.bind(this);\n        const refreshHitAreas = this.refreshHitAreas.bind(this);\n        const selectNode = this.selectNode.bind(this);\n        const $treeElement = this.element;\n        const treeElement = this.element.get(0) as HTMLElement;\n        const triggerEvent = this._triggerEvent.bind(this);\n\n        const selectNodeHandler = new SelectNodeHandler({\n            getNodeById,\n        });\n\n        const addToSelection =\n            selectNodeHandler.addToSelection.bind(selectNodeHandler);\n        const getSelectedNodes =\n            selectNodeHandler.getSelectedNodes.bind(selectNodeHandler);\n        const isNodeSelected =\n            selectNodeHandler.isNodeSelected.bind(selectNodeHandler);\n        const removeFromSelection =\n            selectNodeHandler.removeFromSelection.bind(selectNodeHandler);\n\n        const dataLoader = new DataLoader({\n            dataFilter,\n            loadData,\n            onLoadFailed,\n            onLoading,\n            $treeElement,\n            triggerEvent,\n        });\n\n        const saveStateHandler = new SaveStateHandler({\n            addToSelection,\n            getNodeById,\n            getSelectedNodes,\n            getTree,\n            onGetStateFromStorage,\n            onSetStateFromStorage,\n            openNode,\n            refreshElements,\n            removeFromSelection,\n            saveState,\n        });\n\n        const dndHandler = new DragAndDropHandler({\n            autoEscape,\n            getNodeElement,\n            getNodeElementForNode,\n            getTree,\n            onCanMove,\n            onDragMove,\n            onDragStop,\n            onIsMoveHandle,\n            openFolderDelay,\n            openNode,\n            refreshElements,\n            slide,\n            treeElement,\n            triggerEvent,\n        });\n\n        const scrollHandler = new ScrollHandler({\n            refreshHitAreas,\n            treeElement,\n        });\n\n        const keyHandler = new KeyHandler({\n            closeNode,\n            getSelectedNode,\n            isFocusOnTree,\n            keyboardSupport,\n            openNode,\n            selectNode,\n        });\n\n        const renderer = new ElementsRenderer({\n            autoEscape,\n            buttonLeft,\n            closedIcon,\n            dragAndDrop,\n            $element: $treeElement,\n            getTree,\n            isNodeSelected,\n            onCreateLi,\n            openedIcon,\n            rtl,\n            showEmptyFolder,\n            tabIndex,\n        });\n\n        this.dataLoader = dataLoader;\n        this.dndHandler = dndHandler;\n        this.keyHandler = keyHandler;\n        this.renderer = renderer;\n        this.saveStateHandler = saveStateHandler;\n        this.scrollHandler = scrollHandler;\n        this.selectNodeHandler = selectNodeHandler;\n    }\n\n    private createFolderElement(node: Node) {\n        const closedIconElement = this.renderer.closedIconElement;\n        const getScrollLeft = this._getScrollLeft.bind(this);\n        const openedIconElement = this.renderer.openedIconElement;\n        const tabIndex = this.options.tabIndex;\n        const $treeElement = this.element;\n        const triggerEvent = this._triggerEvent.bind(this);\n\n        return new FolderElement({\n            closedIconElement,\n            getScrollLeft,\n            node,\n            openedIconElement,\n            tabIndex,\n            $treeElement,\n            triggerEvent,\n        });\n    }\n\n    private createNodeElement(node: Node) {\n        const getScrollLeft = this._getScrollLeft.bind(this);\n        const tabIndex = this.options.tabIndex;\n        const $treeElement = this.element;\n\n        return new NodeElement({\n            getScrollLeft,\n            node,\n            tabIndex,\n            $treeElement,\n        });\n    }\n\n    private openParents(node: Node) {\n        const parent = node.parent;\n\n        if (parent && parent.parent && !parent.is_open) {\n            this.openNode(parent, false);\n        }\n    }\n}\n\nSimpleWidget.register(JqTreeWidget, \"tree\");\n"],"names":["isNodeRecordWithChildren","data","Array","Position","positionNames","before","Before","after","After","inside","Inside","none","None","getPositionName","position","name","Object","prototype","hasOwnProperty","call","Node","constructor","nodeData","arguments","length","undefined","isRoot","nodeClass","this","load_on_demand","isEmptyFolder","children","setData","parent","idMapping","Map","tree","o","key","value","loadFromData","removeChildren","childData","node","createNode","addChild","push","setParent","addChildAtPosition","index","splice","removeChild","doRemoveChild","getChildIndex","indexOf","hasChildren","isFolder","iterate","callback","_iterate","level","child","moveNode","movedNode","targetNode","isParentOf","getData","getDataFromNodes","nodes","map","tmpNode","k","v","getNodeByName","getNodeByCallback","getNodeByNameMustExist","n","result","addAfter","nodeInfo","childIndex","loadChildrenFromData","addBefore","addParent","newParent","originalParent","remove","append","prepend","getLevel","getNodeById","nodeId","get","addNodeToIndex","id","set","removeNodeFromIndex","delete","getPreviousSibling","previousIndex","getNextSibling","nextIndex","getNodesByProperty","filter","f","getNextNode","nextSibling","getNextVisibleNode","is_open","getPreviousNode","previousSibling","getLastChild","getParent","getPreviousVisibleNode","lastChild","initFromData","addChildren","childrenData","addNode","getNodeClass","DragElement","_ref","autoEscape","nodeName","offsetX","offsetY","treeElement","element","createElement","appendChild","move","pageX","pageY","style","left","top","document","classList","add","textContent","innerHTML","getBoolString","getOffsetTop","getElementPosition","rect","getBoundingClientRect","x","window","scrollX","y","scrollY","VisibleNodeIterator","isFirstNode","_iterateNode","nextNode","mustIterateInside","offsetParent","handleFirstNode","handleOpenFolder","handleClosedFolder","handleNode","childrenLength","forEach","_","i","nextChild","handleAfterOpenFolder","HitAreasGenerator","currentNode","treeBottom","super","generate","positions","lastTop","generateHitAreas","previousTop","group","hitAreas","generateHitAreasForGroup","addPosition","area","bottom","positionsInGroup","positionCount","Math","min","areaHeight","round","areaTop","DragAndDropHandler","getNodeElement","getNodeElementForNode","getTree","onCanMove","onCanMoveTo","onDragMove","onDragStop","onIsMoveHandle","openNode","refreshElements","slide","triggerEvent","hoveredArea","isDragging","currentItem","mouseCapture","positionInfo","target","mustCaptureElement","jQuery","nodeElement","mouseStart","refresh","dragElement","mouseDrag","findHoveredArea","canMoveToArea","stopOpenFolderTimer","mustOpenFolderTimer","startOpenFolderTimer","updateDropHint","removeDropHint","originalEvent","mouseStop","moveItem","clear","removeHover","removeHitAreas","hitAreasGenerator","getTreeDimensions","positionName","previousGhost","dimensions","right","low","high","mid","addDropHint","folder","openFolder","openFolderDelay","openFolderTimer","setTimeout","clearTimeout","previousParent","doMove","move_info","moved_node","target_node","previous_parent","do_move","original_event","isDefaultPrevented","clientWidth","clientHeight","ElementsRenderer","buttonLeft","closedIcon","onCreateLi","dragAndDrop","$element","isNodeSelected","openedIcon","rtl","showEmptyFolder","tabIndex","openedIconElement","createButtonElement","closedIconElement","render","fromNode","renderFromNode","renderFromRoot","empty","createDomElements","$previousLi","li","createLi","attachNodeData","isRootNode","ul","createUl","classString","role","className","setAttribute","isSelected","Boolean","createFolderLi","createNodeLi","setTreeItemAriaAttributes","buttonClasses","getButtonClasses","folderClasses","getFolderClasses","iconElement","div","buttonLink","cloneNode","titleSpan","createTitleSpan","liClasses","join","classes","is_loading","createTextNode","nodeType","DataLoader","dataFilter","loadData","onLoadFailed","onLoading","$treeElement","loadFromUrl","urlInfo","parentNode","onFinished","$el","getDomElement","addLoadingClass","notifyLoading","stopLoading","removeLoadingClass","submitRequest","parseData","jqXHR","addClass","removeClass","isLoading","urlInfoInput","handleSuccess","handleError","ajaxSettings","method","cache","dataType","success","error","url","toUpperCase","ajax","parsedData","JSON","parse","KeyHandler","closeNode","getSelectedNode","isFocusOnTree","keyboardSupport","selectNode","originalSelectNode","handleKeyDownHandler","handleKeyDown","bind","addEventListener","deinit","removeEventListener","moveDown","selectedNode","moveUp","moveRight","moveLeft","e","canHandleKeyboard","register","widgetClass","widgetName","getDataKey","getWidgetData","el","dataKey","widget","SimpleWidget","createWidget","options","init","fn","argument1","functionName","destroy","removeData","destroyWidget","_len","args","_key","callFunction","widgetFunction","apply","static","defaults","getPositionInfoFromMouseEvent","getPositionInfoFromTouch","touch","MouseWidget","mouseDown","passive","touchStart","isMouseStarted","mouseDelayTimer","isMouseDelayMet","mouseDownInfo","removeMouseMoveEventListeners","button","handleMouseDown","cancelable","preventDefault","handleMouseUp","handleStartMouse","mouseMove","touchMove","mouseUp","touchEnd","mouseDelay","getMouseDelay","startMouseDelayTimer","handleMouseMove","touches","changedTouches","SaveStateHandler","addToSelection","getSelectedNodes","onGetStateFromStorage","onSetStateFromStorage","removeFromSelection","saveState","saveStateOption","state","stringify","getState","supportsLocalStorage","localStorage","setItem","getKeyName","getStateFromStorage","jsonData","loadFromStorage","parseState","open_nodes","getOpenNodeIds","openNodes","selected_node","getSelectedNodeIds","selectedNodeIds","setInitialState","mustLoadOnDemand","openInitialNodes","resetSelection","selectInitialNodes","setInitialStateOnDemand","cbFinished","doSetInitialStateOnDemand","getNodeIdToBeSelected","getItem","nodeIds","selectCount","nodeIdsParam","selectedNodes","loadingCount","newNodesIds","loadAndOpenNode","_supportsLocalStorage","testSupport","sessionStorage","removeItem","ContainerScrollParent","container","refreshHitAreas","checkHorizontalScrolling","newHorizontalScrollDirection","getNewHorizontalScrollDirection","horizontalScrollDirection","horizontalScrollTimeout","verticalScrollTimeout","scrollHorizontally","checkVerticalScrolling","newVerticalScrollDirection","getNewVerticalScrollDirection","verticalScrollDirection","scrollVertically","getScrollLeft","scrollLeft","scrollToY","scrollTop","stopScrolling","scrollParentTop","scrollParentBottom","scrollParentOffset","rightEdge","leftEdge","getScrollParentTop","getScrollParentBottom","distance","scrollBy","behavior","DocumentScrollParent","documentElement","treeTop","documentScrollHeight","documentScrollWidth","isNearLeftEdge","innerWidth","canScrollRight","getDocumentScrollWidth","canScrollDown","getDocumentScrollHeight","scrollHeight","scrollWidth","innerHeight","isOverflow","overflowValue","hasOverFlow","overflow","overflowY","createScrollParent","parentElement","getParentWithOverflow","tagName","ScrollHandler","scrollParent","checkScrolling","getScrollParent","SelectNodeHandler","Set","selectedSingleNode","getSelectedNodesUnder","has","includeChildren","BorderDropHint","querySelector","hint","width","max","offsetWidth","height","GhostDropHint","ghost","createGhostElement","moveAfter","moveBefore","moveInsideOpenFolder","moveInside","childElement","circleSpan","lineSpan","NodeElement","mustShowBorderDropHint","select","mustSetFocus","getTitleSpan","toString","focus","deselect","removeAttribute","blur","getUl","FolderElement","open","animationSpeed","getButton","icon","doOpen","slideDown","show","close","doClose","slideUp","hide","NODE_PARAM_IS_EMPTY","PARAM_IS_EMPTY","JqTreeWidget","autoOpen","dataUrl","onCanSelectNode","selectable","startDndDelay","useContextMenu","toggle","slideParam","Error","optionsParam","doSelectNode","selectNodeHandler","toJson","doLoadData","loadDataFromUrl","param1","param2","param3","doLoadDataFromUrl","reload","_refreshElements","getNodeByHtmlElement","inputElement","HTMLElement","getNode","parseParams","_openNode","createFolderElement","dndHandler","addNodeAfter","newNodeInfo","existingNode","newNode","addNodeBefore","addParentNode","removeNode","appendNode","parentNodeParam","prependNode","updateNode","idIsChanged","isSelectedNodeInSubtree","subtree","positionIndex","saveStateHandler","openParents","_getNodeElementForNode","scrollToNode","scrollHandler","setState","setOption","option","keyHandler","getVersion","_triggerEvent","eventName","values","event","Event","trigger","doOpenNode","_node","_slide","_onFinished","loadFolderOnDemand","mustSelect","renderer","selectCurrentNode","createNodeElement","_getNodeElement","_getScrollLeft","isInitialized","getRtlOption","getDefaultClosedIcon","connectHandlers","initData","on","handleClick","handleDblclick","handleContextmenu","off","getDataUrlInfo","setUrlInfoData","selectedNodeId","getUrlFromString","initTree","doInit","autoOpenNodes","maxLevel","getAutoOpenMaxLevel","isRestored","restoreState","parseInt","clickTarget","getClickTarget","type","stopPropagation","click_event","closest","jqTreeElement","liElement","deselectCurrentNode","dataRtl","selectOptions","mustToggle","canSelect","previous_node","deselectedNode","deselected_node","deselectNodes","loadSubtree","tree_data","parent_node","selectedNodesUnderParent","urlInfoParam","dataLoader","containsElement","activeElement"],"mappings":"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"}