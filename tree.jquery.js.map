{"version":3,"file":"tree.jquery.js","sources":["src/version.ts","src/node.ts","src/dragAndDropHandler.ts","src/util.ts","src/elementsRenderer.ts","src/dataLoader.ts","src/keyHandler.ts","src/simple.widget.ts","src/mouse.widget.ts","src/saveStateHandler.ts","src/scrollHandler.ts","src/selectNodeHandler.ts","src/nodeElement.ts","src/tree.jquery.ts"],"sourcesContent":["const version = \"1.7.1\";\n\nexport default version;\n","interface NodeRecordWithChildren extends NodeRecord {\n    children: NodeData[];\n}\n\nexport enum Position {\n    Before = 1,\n    After,\n    Inside,\n    None,\n}\n\nconst positionNames: Record<string, Position> = {\n    before: Position.Before,\n    after: Position.After,\n    inside: Position.Inside,\n    none: Position.None,\n};\n\ntype IterateCallback = (node: Node, level: number) => boolean;\n\nexport const getPositionName = (position: Position): string => {\n    for (const name in positionNames) {\n        if (Object.prototype.hasOwnProperty.call(positionNames, name)) {\n            if (positionNames[name] === position) {\n                return name;\n            }\n        }\n    }\n\n    return \"\";\n};\n\nexport const getPosition = (name: string): Position | undefined =>\n    positionNames[name];\n\nconst isNodeRecordWithChildren = (\n    data: NodeData\n): data is NodeRecordWithChildren =>\n    typeof data === \"object\" &&\n    \"children\" in data &&\n    data[\"children\"] instanceof Array;\n\nexport class Node implements INode {\n    public id?: NodeId;\n    public name: string;\n    public children: Node[];\n    public parent: Node | null;\n    public idMapping: Map<NodeId, Node>;\n    public tree?: Node;\n    public nodeClass?: typeof Node;\n    public load_on_demand: boolean;\n    public is_open: boolean;\n    public element: HTMLElement;\n    public is_loading: boolean;\n    public isEmptyFolder: boolean;\n\n    [key: string]: unknown;\n\n    constructor(o: NodeData | null = null, isRoot = false, nodeClass = Node) {\n        this.name = \"\";\n        this.isEmptyFolder = false;\n        this.load_on_demand = false;\n\n        this.setData(o);\n\n        this.children = [];\n        this.parent = null;\n\n        if (isRoot) {\n            this.idMapping = new Map<NodeId, Node>();\n            this.tree = this;\n            this.nodeClass = nodeClass;\n        }\n    }\n\n    /*\n    Set the data of this node.\n\n    setData(string): set the name of the node\n    setdata(object): set attributes of the node\n\n    Examples:\n        setdata('node1')\n\n        setData({ name: 'node1', id: 1});\n\n        setData({ name: 'node2', id: 2, color: 'green'});\n\n    * This is an internal function; it is not in the docs\n    * Does not remove existing node values\n    */\n    public setData(o: NodeData | null): void {\n        if (!o) {\n            return;\n        } else if (typeof o === \"string\") {\n            this.name = o;\n        } else if (typeof o === \"object\") {\n            for (const key in o) {\n                if (Object.prototype.hasOwnProperty.call(o, key)) {\n                    const value = o[key];\n\n                    if (key === \"label\" || key === \"name\") {\n                        // You can use the 'label' key instead of 'name'; this is a legacy feature\n                        if (typeof value === \"string\") {\n                            this.name = value;\n                        }\n                    } else if (key !== \"children\" && key !== \"parent\") {\n                        // You can't update the children or the parent using this function\n                        this[key] = value;\n                    }\n                }\n            }\n        }\n    }\n\n    /*\n    Create tree from data.\n\n    Structure of data is:\n    [\n        {\n            name: 'node1',\n            children: [\n                { name: 'child1' },\n                { name: 'child2' }\n            ]\n        },\n        {\n            name: 'node2'\n        }\n    ]\n    */\n    public loadFromData(data: NodeData[]): Node {\n        this.removeChildren();\n\n        for (const o of data) {\n            const node = this.createNode(o);\n            this.addChild(node);\n\n            if (isNodeRecordWithChildren(o)) {\n                if (o.children.length === 0) {\n                    node.isEmptyFolder = true;\n                } else {\n                    node.loadFromData(o.children);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /*\n    Add child.\n\n    tree.addChild(\n        new Node('child1')\n    );\n    */\n    public addChild(node: Node): void {\n        this.children.push(node);\n        node.setParent(this);\n    }\n\n    /*\n    Add child at position. Index starts at 0.\n\n    tree.addChildAtPosition(\n        new Node('abc'),\n        1\n    );\n    */\n    public addChildAtPosition(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        node.setParent(this);\n    }\n\n    /*\n    Remove child. This also removes the children of the node.\n\n    tree.removeChild(tree.children[0]);\n    */\n    public removeChild(node: Node): void {\n        // remove children from the index\n        node.removeChildren();\n\n        this.doRemoveChild(node);\n    }\n\n    /*\n    Get child index.\n\n    var index = getChildIndex(node);\n    */\n    public getChildIndex(node: Node): number {\n        return this.children.indexOf(node);\n    }\n\n    /*\n    Does the tree have children?\n\n    if (tree.hasChildren()) {\n        //\n    }\n    */\n    public hasChildren(): boolean {\n        return this.children.length !== 0;\n    }\n\n    public isFolder(): boolean {\n        return this.hasChildren() || this.load_on_demand;\n    }\n\n    /*\n    Iterate over all the nodes in the tree.\n\n    Calls callback with (node, level).\n\n    The callback must return true to continue the iteration on current node.\n\n    tree.iterate(\n        function(node, level) {\n           console.log(node.name);\n\n           // stop iteration after level 2\n           return (level <= 2);\n        }\n    );\n\n    */\n    public iterate(callback: IterateCallback): void {\n        const _iterate = (node: Node, level: number): void => {\n            if (node.children) {\n                for (const child of node.children) {\n                    const result = callback(child, level);\n\n                    if (result && child.hasChildren()) {\n                        _iterate(child, level + 1);\n                    }\n                }\n            }\n        };\n\n        _iterate(this, 0);\n    }\n\n    /*\n    Move node relative to another node.\n\n    Argument position: Position.BEFORE, Position.AFTER or Position.Inside\n\n    // move node1 after node2\n    tree.moveNode(node1, node2, Position.AFTER);\n    */\n    public moveNode(\n        movedNode: Node,\n        targetNode: Node,\n        position: Position\n    ): boolean {\n        if (!movedNode.parent || movedNode.isParentOf(targetNode)) {\n            // - Node is parent of target node\n            // - Or, parent is empty\n            return false;\n        } else {\n            movedNode.parent.doRemoveChild(movedNode);\n\n            switch (position) {\n                case Position.After: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode) + 1\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Before: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode)\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Inside: {\n                    // move inside as first child\n                    targetNode.addChildAtPosition(movedNode, 0);\n                    return true;\n                }\n\n                default:\n                    return false;\n            }\n        }\n    }\n\n    /*\n    Get the tree as data.\n    */\n    public getData(includeParent = false): NodeRecord[] {\n        const getDataFromNodes = (nodes: Node[]): Record<string, unknown>[] => {\n            return nodes.map((node) => {\n                const tmpNode: Record<string, unknown> = {};\n\n                for (const k in node) {\n                    if (\n                        [\n                            \"parent\",\n                            \"children\",\n                            \"element\",\n                            \"idMapping\",\n                            \"load_on_demand\",\n                            \"nodeClass\",\n                            \"tree\",\n                            \"isEmptyFolder\",\n                        ].indexOf(k) === -1 &&\n                        Object.prototype.hasOwnProperty.call(node, k)\n                    ) {\n                        const v = node[k];\n                        tmpNode[k] = v;\n                    }\n                }\n\n                if (node.hasChildren()) {\n                    tmpNode[\"children\"] = getDataFromNodes(node.children);\n                }\n\n                return tmpNode;\n            });\n        };\n\n        if (includeParent) {\n            return getDataFromNodes([this]);\n        } else {\n            return getDataFromNodes(this.children);\n        }\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.getNodeByCallback((node: Node) => node.name === name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        const node = this.getNodeByCallback((n: Node) => n.name === name);\n\n        if (!node) {\n            throw `Node with name ${name} not found`;\n        }\n\n        return node;\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        let result: Node | null = null;\n\n        this.iterate((node: Node) => {\n            if (result) {\n                return false;\n            } else if (callback(node)) {\n                result = node;\n                return false;\n            } else {\n                return true;\n            }\n        });\n\n        return result;\n    }\n\n    public addAfter(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex + 1);\n\n            if (\n                isNodeRecordWithChildren(nodeInfo) &&\n                nodeInfo.children.length\n            ) {\n                node.loadFromData(nodeInfo.children);\n            }\n\n            return node;\n        }\n    }\n\n    public addBefore(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex);\n\n            if (\n                isNodeRecordWithChildren(nodeInfo) &&\n                nodeInfo.children.length\n            ) {\n                node.loadFromData(nodeInfo.children);\n            }\n\n            return node;\n        }\n    }\n\n    public addParent(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const newParent = this.createNode(nodeInfo);\n\n            if (this.tree) {\n                newParent.setParent(this.tree);\n            }\n            const originalParent = this.parent;\n\n            for (const child of originalParent.children) {\n                newParent.addChild(child);\n            }\n\n            originalParent.children = [];\n            originalParent.addChild(newParent);\n            return newParent;\n        }\n    }\n\n    public remove(): void {\n        if (this.parent) {\n            this.parent.removeChild(this);\n            this.parent = null;\n        }\n    }\n\n    public append(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChild(node);\n\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            node.loadFromData(nodeInfo.children);\n        }\n\n        return node;\n    }\n\n    public prepend(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChildAtPosition(node, 0);\n\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            node.loadFromData(nodeInfo.children);\n        }\n\n        return node;\n    }\n\n    public isParentOf(node: Node): boolean {\n        let parent = node.parent;\n\n        while (parent) {\n            if (parent === this) {\n                return true;\n            }\n\n            parent = parent.parent;\n        }\n\n        return false;\n    }\n\n    public getLevel(): number {\n        let level = 0;\n        let node: Node = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n        while (node.parent) {\n            level += 1;\n            node = node.parent;\n        }\n\n        return level;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.idMapping.get(nodeId) || null;\n    }\n\n    public addNodeToIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.set(node.id, node);\n        }\n    }\n\n    public removeNodeFromIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.delete(node.id);\n        }\n    }\n\n    public removeChildren(): void {\n        this.iterate((child: Node) => {\n            this.tree?.removeNodeFromIndex(child);\n            return true;\n        });\n\n        this.children = [];\n    }\n\n    public getPreviousSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousIndex = this.parent.getChildIndex(this) - 1;\n            if (previousIndex >= 0) {\n                return this.parent.children[previousIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNextSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const nextIndex = this.parent.getChildIndex(this) + 1;\n            if (nextIndex < this.parent.children.length) {\n                return this.parent.children[nextIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.filter((node: Node) => node[key] === value);\n    }\n\n    public filter(f: (node: Node) => boolean): Node[] {\n        const result: Node[] = [];\n\n        this.iterate((node: Node) => {\n            if (f(node)) {\n                result.push(node);\n            }\n\n            return true;\n        });\n\n        return result;\n    }\n\n    public getNextNode(includeChildren = true): Node | null {\n        if (includeChildren && this.hasChildren()) {\n            return this.children[0] || null;\n        } else if (!this.parent) {\n            return null;\n        } else {\n            const nextSibling = this.getNextSibling();\n\n            if (nextSibling) {\n                return nextSibling;\n            } else {\n                return this.parent.getNextNode(false);\n            }\n        }\n    }\n\n    public getNextVisibleNode(): Node | null {\n        if (this.hasChildren() && this.is_open) {\n            // First child\n            return this.children[0] || null;\n        } else {\n            if (!this.parent) {\n                return null;\n            } else {\n                const nextSibling = this.getNextSibling();\n                if (nextSibling) {\n                    // Next sibling\n                    return nextSibling;\n                } else {\n                    // Next node of parent\n                    return this.parent.getNextNode(false);\n                }\n            }\n        }\n    }\n\n    public getPreviousNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (previousSibling.hasChildren()) {\n                return previousSibling.getLastChild();\n            } else {\n                return previousSibling;\n            }\n        }\n    }\n\n    public getPreviousVisibleNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (\n                !previousSibling.hasChildren() ||\n                !previousSibling.is_open\n            ) {\n                // Previous sibling\n                return previousSibling;\n            } else {\n                // Last child of previous sibling\n                return previousSibling.getLastChild();\n            }\n        }\n    }\n\n    public getParent(): Node | null {\n        // Return parent except if it is the root node\n        if (!this.parent) {\n            return null;\n        } else if (!this.parent.parent) {\n            // Root node -> null\n            return null;\n        } else {\n            return this.parent;\n        }\n    }\n\n    public getLastChild(): Node | null {\n        if (!this.hasChildren()) {\n            return null;\n        } else {\n            const lastChild = this.children[this.children.length - 1];\n\n            if (!lastChild) {\n                return null;\n            }\n\n            if (!(lastChild.hasChildren() && lastChild.is_open)) {\n                return lastChild;\n            } else {\n                return lastChild?.getLastChild();\n            }\n        }\n    }\n\n    // Init Node from data without making it the root of the tree\n    public initFromData(data: NodeData): void {\n        const addNode = (nodeData: NodeData): void => {\n            this.setData(nodeData);\n\n            if (\n                isNodeRecordWithChildren(nodeData) &&\n                nodeData.children.length\n            ) {\n                addChildren(nodeData.children);\n            }\n        };\n\n        const addChildren = (childrenData: NodeData[]): void => {\n            for (const child of childrenData) {\n                const node = this.createNode();\n                node.initFromData(child);\n                this.addChild(node);\n            }\n        };\n\n        addNode(data);\n    }\n\n    private setParent(parent: Node): void {\n        this.parent = parent;\n        this.tree = parent.tree;\n        this.tree?.addNodeToIndex(this);\n    }\n\n    private doRemoveChild(node: Node): void {\n        this.children.splice(this.getChildIndex(node), 1);\n        this.tree?.removeNodeFromIndex(node);\n    }\n\n    private getNodeClass(): typeof Node {\n        return this.nodeClass || this?.tree?.nodeClass || Node;\n    }\n\n    private createNode(nodeData?: NodeData): Node {\n        const nodeClass = this.getNodeClass();\n        return new nodeClass(nodeData);\n    }\n}\n","import { getPositionName, Node, Position } from \"./node\";\nimport { DropHint, HitArea, PositionInfo } from \"./types\";\nimport { NodeElement } from \"./nodeElement\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\ninterface Dimensions {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n}\n\nexport class DragAndDropHandler {\n    public hitAreas: HitArea[];\n    public isDragging: boolean;\n    public currentItem: NodeElement | null;\n    public hoveredArea: HitArea | null;\n    public positionInfo: PositionInfo | null;\n\n    private treeWidget: JqTreeWidget;\n    private dragElement: DragElement | null;\n    private previousGhost: DropHint | null;\n    private openFolderTimer: number | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        this.hoveredArea = null;\n        this.hitAreas = [];\n        this.isDragging = false;\n        this.currentItem = null;\n        this.positionInfo = null;\n    }\n\n    public mouseCapture(positionInfo: PositionInfo): boolean | null {\n        const $element = jQuery(positionInfo.target);\n\n        if (!this.mustCaptureElement($element)) {\n            return null;\n        }\n\n        if (\n            this.treeWidget.options.onIsMoveHandle &&\n            !this.treeWidget.options.onIsMoveHandle($element)\n        ) {\n            return null;\n        }\n\n        let nodeElement = this.treeWidget._getNodeElement($element);\n\n        if (nodeElement && this.treeWidget.options.onCanMove) {\n            if (!this.treeWidget.options.onCanMove(nodeElement.node)) {\n                nodeElement = null;\n            }\n        }\n\n        this.currentItem = nodeElement;\n        return this.currentItem != null;\n    }\n\n    public mouseStart(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.refresh();\n\n        const offset = jQuery(positionInfo.target).offset();\n        const left = offset ? offset.left : 0;\n        const top = offset ? offset.top : 0;\n\n        const node = this.currentItem.node;\n\n        this.dragElement = new DragElement(\n            node.name,\n            positionInfo.pageX - left,\n            positionInfo.pageY - top,\n            this.treeWidget.element,\n            this.treeWidget.options.autoEscape ?? true\n        );\n\n        this.isDragging = true;\n        this.positionInfo = positionInfo;\n        this.currentItem.$element.addClass(\"jqtree-moving\");\n        return true;\n    }\n\n    public mouseDrag(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            !this.dragElement ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.dragElement.move(positionInfo.pageX, positionInfo.pageY);\n        this.positionInfo = positionInfo;\n\n        const area = this.findHoveredArea(\n            positionInfo.pageX,\n            positionInfo.pageY\n        );\n\n        if (area && this.canMoveToArea(area)) {\n            if (!area.node.isFolder()) {\n                this.stopOpenFolderTimer();\n            }\n\n            if (this.hoveredArea !== area) {\n                this.hoveredArea = area;\n\n                // If this is a closed folder, start timer to open it\n                if (this.mustOpenFolderTimer(area)) {\n                    this.startOpenFolderTimer(area.node);\n                } else {\n                    this.stopOpenFolderTimer();\n                }\n\n                this.updateDropHint();\n            }\n        } else {\n            this.removeDropHint();\n            this.stopOpenFolderTimer();\n            this.hoveredArea = area;\n        }\n\n        if (!area) {\n            if (this.treeWidget.options.onDragMove) {\n                this.treeWidget.options.onDragMove(\n                    this.currentItem.node,\n                    positionInfo.originalEvent\n                );\n            }\n        }\n\n        return true;\n    }\n\n    public mouseStop(positionInfo: PositionInfo): boolean {\n        this.moveItem(positionInfo);\n        this.clear();\n        this.removeHover();\n        this.removeDropHint();\n        this.removeHitAreas();\n\n        const currentItem = this.currentItem;\n\n        if (this.currentItem) {\n            this.currentItem.$element.removeClass(\"jqtree-moving\");\n            this.currentItem = null;\n        }\n\n        this.isDragging = false;\n        this.positionInfo = null;\n\n        if (!this.hoveredArea && currentItem) {\n            if (this.treeWidget.options.onDragStop) {\n                this.treeWidget.options.onDragStop(\n                    currentItem.node,\n                    positionInfo.originalEvent\n                );\n            }\n        }\n\n        return false;\n    }\n\n    public refresh(): void {\n        this.removeHitAreas();\n\n        if (this.currentItem) {\n            this.generateHitAreas();\n\n            this.currentItem = this.treeWidget._getNodeElementForNode(\n                this.currentItem.node\n            );\n\n            if (this.isDragging) {\n                this.currentItem.$element.addClass(\"jqtree-moving\");\n            }\n        }\n    }\n\n    private generateHitAreas(): void {\n        if (!this.currentItem) {\n            this.hitAreas = [];\n        } else {\n            const hitAreasGenerator = new HitAreasGenerator(\n                this.treeWidget.tree,\n                this.currentItem.node,\n                this.getTreeDimensions().bottom\n            );\n            this.hitAreas = hitAreasGenerator.generate();\n        }\n    }\n\n    private mustCaptureElement($element: JQuery<HTMLElement>): boolean {\n        return !$element.is(\"input,select,textarea\");\n    }\n\n    private canMoveToArea(area: HitArea): boolean {\n        if (!this.treeWidget.options.onCanMoveTo) {\n            return true;\n        }\n\n        if (!this.currentItem) {\n            return false;\n        }\n\n        const positionName = getPositionName(area.position);\n\n        return this.treeWidget.options.onCanMoveTo(\n            this.currentItem.node,\n            area.node,\n            positionName\n        );\n    }\n\n    private removeHitAreas(): void {\n        this.hitAreas = [];\n    }\n\n    private clear(): void {\n        if (this.dragElement) {\n            this.dragElement.remove();\n            this.dragElement = null;\n        }\n    }\n\n    private removeDropHint(): void {\n        if (this.previousGhost) {\n            this.previousGhost.remove();\n        }\n    }\n\n    private removeHover(): void {\n        this.hoveredArea = null;\n    }\n\n    private findHoveredArea(x: number, y: number): HitArea | null {\n        const dimensions = this.getTreeDimensions();\n\n        if (\n            x < dimensions.left ||\n            y < dimensions.top ||\n            x > dimensions.right ||\n            y > dimensions.bottom\n        ) {\n            return null;\n        }\n\n        let low = 0;\n        let high = this.hitAreas.length;\n        while (low < high) {\n            const mid = (low + high) >> 1;\n            const area = this.hitAreas[mid];\n\n            if (!area) {\n                return null;\n            }\n\n            if (y < area.top) {\n                high = mid;\n            } else if (y > area.bottom) {\n                low = mid + 1;\n            } else {\n                return area;\n            }\n        }\n\n        return null;\n    }\n\n    private mustOpenFolderTimer(area: HitArea): boolean {\n        const node = area.node;\n\n        return (\n            node.isFolder() &&\n            !node.is_open &&\n            area.position === Position.Inside\n        );\n    }\n\n    private updateDropHint(): void {\n        if (!this.hoveredArea) {\n            return;\n        }\n\n        // remove previous drop hint\n        this.removeDropHint();\n\n        // add new drop hint\n        const nodeElement = this.treeWidget._getNodeElementForNode(\n            this.hoveredArea.node\n        );\n        this.previousGhost = nodeElement.addDropHint(this.hoveredArea.position);\n    }\n\n    private startOpenFolderTimer(folder: Node): void {\n        const openFolder = (): void => {\n            this.treeWidget._openNode(\n                folder,\n                this.treeWidget.options.slide,\n                () => {\n                    this.refresh();\n                    this.updateDropHint();\n                }\n            );\n        };\n\n        this.stopOpenFolderTimer();\n\n        const openFolderDelay = this.treeWidget.options.openFolderDelay;\n\n        if (openFolderDelay !== false) {\n            this.openFolderTimer = window.setTimeout(\n                openFolder,\n                openFolderDelay\n            );\n        }\n    }\n\n    private stopOpenFolderTimer(): void {\n        if (this.openFolderTimer) {\n            clearTimeout(this.openFolderTimer);\n            this.openFolderTimer = null;\n        }\n    }\n\n    private moveItem(positionInfo: PositionInfo): void {\n        if (\n            this.currentItem &&\n            this.hoveredArea &&\n            this.hoveredArea.position !== Position.None &&\n            this.canMoveToArea(this.hoveredArea)\n        ) {\n            const movedNode = this.currentItem.node;\n            const targetNode = this.hoveredArea.node;\n            const position = this.hoveredArea.position;\n            const previousParent = movedNode.parent;\n\n            if (position === Position.Inside) {\n                this.hoveredArea.node.is_open = true;\n            }\n\n            const doMove = (): void => {\n                this.treeWidget.tree.moveNode(movedNode, targetNode, position);\n                this.treeWidget.element.empty();\n                this.treeWidget._refreshElements(null);\n            };\n\n            const event = this.treeWidget._triggerEvent(\"tree.move\", {\n                move_info: {\n                    moved_node: movedNode,\n                    target_node: targetNode,\n                    position: getPositionName(position),\n                    previous_parent: previousParent,\n                    do_move: doMove,\n                    original_event: positionInfo.originalEvent,\n                },\n            });\n\n            if (!event.isDefaultPrevented()) {\n                doMove();\n            }\n        }\n    }\n\n    private getTreeDimensions(): Dimensions {\n        // Return the dimensions of the tree. Add a margin to the bottom to allow\n        // to drag-and-drop after the last element.\n        const offset = this.treeWidget.element.offset();\n\n        if (!offset) {\n            return { left: 0, top: 0, right: 0, bottom: 0 };\n        } else {\n            const el = this.treeWidget.element;\n            const width = el.width() || 0;\n            const height = el.height() || 0;\n            const left = offset.left + this.treeWidget._getScrollLeft();\n\n            return {\n                left,\n                top: offset.top,\n                right: left + width,\n                bottom: offset.top + height + 16,\n            };\n        }\n    }\n}\n\nabstract class VisibleNodeIterator {\n    private tree: Node;\n\n    constructor(tree: Node) {\n        this.tree = tree;\n    }\n\n    protected iterate(): void {\n        let isFirstNode = true;\n\n        const _iterateNode = (node: Node, nextNode: Node | null): void => {\n            let mustIterateInside =\n                (node.is_open || !node.element) && node.hasChildren();\n\n            let $element: JQuery<HTMLElement> | null = null;\n\n            if (node.element) {\n                $element = jQuery(node.element);\n\n                if (!$element.is(\":visible\")) {\n                    return;\n                }\n\n                if (isFirstNode) {\n                    this.handleFirstNode(node);\n                    isFirstNode = false;\n                }\n\n                if (!node.hasChildren()) {\n                    this.handleNode(node, nextNode, $element);\n                } else if (node.is_open) {\n                    if (!this.handleOpenFolder(node, $element)) {\n                        mustIterateInside = false;\n                    }\n                } else {\n                    this.handleClosedFolder(node, nextNode, $element);\n                }\n            }\n\n            if (mustIterateInside) {\n                const childrenLength = node.children.length;\n                node.children.forEach((_, i) => {\n                    const child = node.children[i];\n\n                    if (child) {\n                        if (i === childrenLength - 1) {\n                            _iterateNode(child, null);\n                        } else {\n                            const nextChild = node.children[i + 1];\n\n                            if (nextChild) {\n                                _iterateNode(child, nextChild);\n                            }\n                        }\n                    }\n                });\n\n                if (node.is_open && $element) {\n                    this.handleAfterOpenFolder(node, nextNode);\n                }\n            }\n        };\n\n        _iterateNode(this.tree, null);\n    }\n\n    protected abstract handleNode(\n        node: Node,\n        nextNode: Node | null,\n        $element: JQuery\n    ): void;\n\n    /*\n    override\n    return\n        - true: continue iterating\n        - false: stop iterating\n    */\n    protected abstract handleOpenFolder(node: Node, $element: JQuery): boolean;\n\n    protected abstract handleClosedFolder(\n        node: Node,\n        nextNode: Node | null,\n        $element: JQuery\n    ): void;\n\n    protected abstract handleAfterOpenFolder(\n        node: Node,\n        nextNode: Node | null\n    ): void;\n\n    protected abstract handleFirstNode(node: Node): void;\n}\n\nexport class HitAreasGenerator extends VisibleNodeIterator {\n    private currentNode: Node;\n    private treeBottom: number;\n    private positions: HitArea[];\n    private lastTop: number;\n\n    constructor(tree: Node, currentNode: Node, treeBottom: number) {\n        super(tree);\n\n        this.currentNode = currentNode;\n        this.treeBottom = treeBottom;\n    }\n\n    public generate(): HitArea[] {\n        this.positions = [];\n        this.lastTop = 0;\n\n        this.iterate();\n\n        return this.generateHitAreas(this.positions);\n    }\n\n    protected generateHitAreas(positions: HitArea[]): HitArea[] {\n        let previousTop = -1;\n        let group = [];\n        const hitAreas: HitArea[] = [];\n\n        for (const position of positions) {\n            if (position.top !== previousTop && group.length) {\n                if (group.length) {\n                    this.generateHitAreasForGroup(\n                        hitAreas,\n                        group,\n                        previousTop,\n                        position.top\n                    );\n                }\n\n                previousTop = position.top;\n                group = [];\n            }\n\n            group.push(position);\n        }\n\n        this.generateHitAreasForGroup(\n            hitAreas,\n            group,\n            previousTop,\n            this.treeBottom\n        );\n\n        return hitAreas;\n    }\n\n    protected handleOpenFolder(node: Node, $element: JQuery): boolean {\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            // Stop iterating\n            return false;\n        }\n\n        // Cannot move before current item\n        if (node.children[0] !== this.currentNode) {\n            this.addPosition(node, Position.Inside, this.getTop($element));\n        }\n\n        // Continue iterating\n        return true;\n    }\n\n    protected handleClosedFolder(\n        node: Node,\n        nextNode: Node,\n        $element: JQuery\n    ): void {\n        const top = this.getTop($element);\n\n        if (node === this.currentNode) {\n            // Cannot move after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n\n            // Cannot move before current item\n            if (nextNode !== this.currentNode) {\n                this.addPosition(node, Position.After, top);\n            }\n        }\n    }\n\n    protected handleFirstNode(node: Node): void {\n        if (node !== this.currentNode) {\n            this.addPosition(\n                node,\n                Position.Before,\n                this.getTop(jQuery(node.element))\n            );\n        }\n    }\n\n    protected handleAfterOpenFolder(node: Node, nextNode: Node): void {\n        if (node === this.currentNode || nextNode === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, this.lastTop);\n        } else {\n            this.addPosition(node, Position.After, this.lastTop);\n        }\n    }\n\n    protected handleNode(node: Node, nextNode: Node, $element: JQuery): void {\n        const top = this.getTop($element);\n\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n        }\n\n        if (nextNode === this.currentNode || node === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.After, top);\n        }\n    }\n\n    private getTop($element: JQuery<HTMLElement>): number {\n        const offset = $element.offset();\n\n        return offset ? offset.top : 0;\n    }\n\n    private addPosition(node: Node, position: number, top: number): void {\n        const area = {\n            top,\n            bottom: 0,\n            node,\n            position,\n        };\n\n        this.positions.push(area);\n        this.lastTop = top;\n    }\n\n    private generateHitAreasForGroup(\n        hitAreas: HitArea[],\n        positionsInGroup: HitArea[],\n        top: number,\n        bottom: number\n    ): void {\n        // limit positions in group\n        const positionCount = Math.min(positionsInGroup.length, 4);\n\n        const areaHeight = Math.round((bottom - top) / positionCount);\n        let areaTop = top;\n\n        let i = 0;\n        while (i < positionCount) {\n            const position = positionsInGroup[i];\n\n            if (position) {\n                hitAreas.push({\n                    top: areaTop,\n                    bottom: areaTop + areaHeight,\n                    node: position.node,\n                    position: position.position,\n                });\n            }\n\n            areaTop += areaHeight;\n            i += 1;\n        }\n    }\n}\n\nclass DragElement {\n    private offsetX: number;\n    private offsetY: number;\n    private $element: JQuery;\n\n    constructor(\n        nodeName: string,\n        offsetX: number,\n        offsetY: number,\n        $tree: JQuery,\n        autoEscape: boolean\n    ) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n\n        this.$element = jQuery(\"<span>\").addClass(\n            \"jqtree-title jqtree-dragging\"\n        );\n\n        if (autoEscape) {\n            this.$element.text(nodeName);\n        } else {\n            this.$element.html(nodeName);\n        }\n\n        this.$element.css(\"position\", \"absolute\");\n        $tree.append(this.$element);\n    }\n\n    public move(pageX: number, pageY: number): void {\n        this.$element.offset({\n            left: pageX - this.offsetX,\n            top: pageY - this.offsetY,\n        });\n    }\n\n    public remove(): void {\n        this.$element.remove();\n    }\n}\n","export const isInt = (n: unknown): boolean =>\n    typeof n === \"number\" && n % 1 === 0;\n\nexport const isFunction = (v: unknown): boolean => typeof v === \"function\";\n\nexport const getBoolString = (value: unknown): string =>\n    value ? \"true\" : \"false\";\n","import { getBoolString } from \"./util\";\nimport { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\ntype IconElement = Text | Element;\n\nexport default class ElementsRenderer {\n    public openedIconElement?: IconElement;\n    public closedIconElement?: IconElement;\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        this.openedIconElement = this.createButtonElement(\n            treeWidget.options.openedIcon || \"+\"\n        );\n        this.closedIconElement = this.createButtonElement(\n            treeWidget.options.closedIcon || \"-\"\n        );\n    }\n\n    public render(fromNode: Node | null): void {\n        if (fromNode && fromNode.parent) {\n            this.renderFromNode(fromNode);\n        } else {\n            this.renderFromRoot();\n        }\n    }\n\n    public renderFromRoot(): void {\n        const $element = this.treeWidget.element;\n        $element.empty();\n\n        if ($element[0]) {\n            this.createDomElements(\n                $element[0],\n                this.treeWidget.tree.children,\n                true,\n                1\n            );\n        }\n    }\n\n    public renderFromNode(node: Node): void {\n        // remember current li\n        const $previousLi = jQuery(node.element);\n\n        // create element\n        const li = this.createLi(node, node.getLevel());\n        this.attachNodeData(node, li);\n\n        // add element to dom\n        $previousLi.after(li);\n\n        // remove previous li\n        $previousLi.remove();\n\n        // create children\n        if (node.children) {\n            this.createDomElements(\n                li,\n                node.children,\n                false,\n                node.getLevel() + 1\n            );\n        }\n    }\n\n    private createDomElements(\n        element: Element,\n        children: Node[],\n        isRootNode: boolean,\n        level: number\n    ): void {\n        const ul = this.createUl(isRootNode);\n        element.appendChild(ul);\n\n        for (const child of children) {\n            const li = this.createLi(child, level);\n            ul.appendChild(li);\n\n            this.attachNodeData(child, li);\n\n            if (child.hasChildren()) {\n                this.createDomElements(li, child.children, false, level + 1);\n            }\n        }\n    }\n\n    private attachNodeData(node: Node, li: HTMLElement): void {\n        node.element = li;\n        jQuery(li).data(\"node\", node);\n    }\n\n    private createUl(isRootNode: boolean): HTMLUListElement {\n        let classString;\n        let role;\n\n        if (!isRootNode) {\n            classString = \"\";\n            role = \"group\";\n        } else {\n            classString = \"jqtree-tree\";\n            role = \"tree\";\n\n            if (this.treeWidget.options.rtl) {\n                classString += \" jqtree-rtl\";\n            }\n        }\n\n        if (this.treeWidget.options.dragAndDrop) {\n            classString += \" jqtree-dnd\";\n        }\n\n        const ul = document.createElement(\"ul\");\n        ul.className = `jqtree_common ${classString}`;\n\n        ul.setAttribute(\"role\", role);\n\n        return ul;\n    }\n\n    private createLi(node: Node, level: number): HTMLLIElement {\n        const isSelected = Boolean(\n            this.treeWidget.selectNodeHandler.isNodeSelected(node)\n        );\n\n        const mustShowFolder =\n            node.isFolder() ||\n            (node.isEmptyFolder && this.treeWidget.options.showEmptyFolder);\n\n        const li = mustShowFolder\n            ? this.createFolderLi(node, level, isSelected)\n            : this.createNodeLi(node, level, isSelected);\n\n        if (this.treeWidget.options.onCreateLi) {\n            this.treeWidget.options.onCreateLi(node, jQuery(li), isSelected);\n        }\n\n        return li;\n    }\n\n    private setTreeItemAriaAttributes(\n        element: HTMLElement,\n        name: string,\n        level: number,\n        isSelected: boolean\n    ) {\n        element.setAttribute(\"aria-label\", name);\n        element.setAttribute(\"aria-level\", `${level}`);\n        element.setAttribute(\"aria-selected\", getBoolString(isSelected));\n        element.setAttribute(\"role\", \"treeitem\");\n    }\n\n    private createFolderLi(\n        node: Node,\n        level: number,\n        isSelected: boolean\n    ): HTMLLIElement {\n        const buttonClasses = this.getButtonClasses(node);\n        const folderClasses = this.getFolderClasses(node, isSelected);\n\n        const iconElement = node.is_open\n            ? this.openedIconElement\n            : this.closedIconElement;\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = `jqtree_common ${folderClasses}`;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // button link\n        const buttonLink = document.createElement(\"a\");\n        buttonLink.className = buttonClasses;\n\n        if (iconElement) {\n            buttonLink.appendChild(iconElement.cloneNode(true));\n        }\n\n        if (this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            true,\n            level\n        );\n        titleSpan.setAttribute(\"aria-expanded\", getBoolString(node.is_open));\n        div.appendChild(titleSpan);\n\n        if (!this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        return li;\n    }\n\n    private createNodeLi(\n        node: Node,\n        level: number,\n        isSelected: boolean\n    ): HTMLLIElement {\n        const liClasses = [\"jqtree_common\"];\n\n        if (isSelected) {\n            liClasses.push(\"jqtree-selected\");\n        }\n\n        const classString = liClasses.join(\" \");\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = classString;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            false,\n            level\n        );\n        div.appendChild(titleSpan);\n\n        return li;\n    }\n\n    private createTitleSpan(\n        nodeName: string,\n        isSelected: boolean,\n        isFolder: boolean,\n        level: number\n    ): HTMLSpanElement {\n        const titleSpan = document.createElement(\"span\");\n\n        let classes = \"jqtree-title jqtree_common\";\n\n        if (isFolder) {\n            classes += \" jqtree-title-folder\";\n        }\n\n        classes += ` jqtree-title-button-${\n            this.treeWidget.options.buttonLeft ? \"left\" : \"right\"\n        }`;\n\n        titleSpan.className = classes;\n\n        if (isSelected) {\n            const tabIndex = this.treeWidget.options.tabIndex;\n\n            if (tabIndex !== undefined) {\n                titleSpan.setAttribute(\"tabindex\", `${tabIndex}`);\n            }\n        }\n\n        this.setTreeItemAriaAttributes(titleSpan, nodeName, level, isSelected);\n\n        if (this.treeWidget.options.autoEscape) {\n            titleSpan.textContent = nodeName;\n        } else {\n            titleSpan.innerHTML = nodeName;\n        }\n\n        return titleSpan;\n    }\n\n    private getButtonClasses(node: Node): string {\n        const classes = [\"jqtree-toggler\", \"jqtree_common\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (this.treeWidget.options.buttonLeft) {\n            classes.push(\"jqtree-toggler-left\");\n        } else {\n            classes.push(\"jqtree-toggler-right\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private getFolderClasses(node: Node, isSelected: boolean): string {\n        const classes = [\"jqtree-folder\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (isSelected) {\n            classes.push(\"jqtree-selected\");\n        }\n\n        if (node.is_loading) {\n            classes.push(\"jqtree-loading\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private createButtonElement(\n        value: string | Element\n    ): IconElement | undefined {\n        if (typeof value === \"string\") {\n            // convert value to html\n            const div = document.createElement(\"div\");\n            div.innerHTML = value;\n\n            return document.createTextNode(div.innerHTML);\n        } else {\n            return jQuery(value)[0];\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport type HandleFinishedLoading = () => void;\n\nexport default class DataLoader {\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n    }\n\n    public loadFromUrl(\n        urlInfo: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null\n    ): void {\n        if (!urlInfo) {\n            return;\n        }\n\n        const $el = this.getDomElement(parentNode);\n        this.addLoadingClass($el);\n        this.notifyLoading(true, parentNode, $el);\n\n        const stopLoading = (): void => {\n            this.removeLoadingClass($el);\n            this.notifyLoading(false, parentNode, $el);\n        };\n\n        const handleSuccess = (data: string | NodeData[]): void => {\n            stopLoading();\n            this.treeWidget.loadData(this.parseData(data), parentNode);\n\n            if (onFinished && typeof onFinished === \"function\") {\n                onFinished();\n            }\n        };\n\n        const handleError = (jqXHR: JQuery.jqXHR): void => {\n            stopLoading();\n\n            if (this.treeWidget.options.onLoadFailed) {\n                this.treeWidget.options.onLoadFailed(jqXHR);\n            }\n        };\n\n        this.submitRequest(urlInfo, handleSuccess, handleError);\n    }\n\n    private addLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.addClass(\"jqtree-loading\");\n        }\n    }\n\n    private removeLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.removeClass(\"jqtree-loading\");\n        }\n    }\n\n    private getDomElement(parentNode: Node | null): JQuery<HTMLElement> {\n        if (parentNode) {\n            return jQuery(parentNode.element);\n        } else {\n            return this.treeWidget.element;\n        }\n    }\n\n    private notifyLoading(\n        isLoading: boolean,\n        node: Node | null,\n        $el: JQuery\n    ): void {\n        if (this.treeWidget.options.onLoading) {\n            this.treeWidget.options.onLoading(isLoading, node, $el);\n        }\n\n        this.treeWidget._triggerEvent(\"tree.loading_data\", {\n            isLoading,\n            node,\n            $el,\n        });\n    }\n\n    private submitRequest(\n        urlInfoInput: string | JQuery.AjaxSettings,\n        handleSuccess: JQuery.Ajax.SuccessCallback<any>,\n        handleError: JQuery.Ajax.ErrorCallback<any>\n    ): void {\n        const urlInfo =\n            typeof urlInfoInput === \"string\"\n                ? { url: urlInfoInput }\n                : urlInfoInput;\n\n        const ajaxSettings: JQuery.AjaxSettings = {\n            method: \"GET\",\n            cache: false,\n            dataType: \"json\",\n            success: handleSuccess,\n            error: handleError,\n            ...urlInfo,\n        };\n\n        ajaxSettings.method = ajaxSettings.method?.toUpperCase() || \"GET\";\n\n        void jQuery.ajax(ajaxSettings);\n    }\n\n    private parseData(data: string | NodeData[]): NodeData[] {\n        const { dataFilter } = this.treeWidget.options;\n\n        const getParsedData = () => {\n            if (typeof data === \"string\") {\n                return JSON.parse(data) as NodeData[];\n            } else {\n                return data;\n            }\n        };\n\n        const parsedData = getParsedData();\n\n        if (dataFilter) {\n            return dataFilter(parsedData);\n        } else {\n            return parsedData;\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport default class KeyHandler {\n    private static LEFT = 37;\n    private static UP = 38;\n    private static RIGHT = 39;\n    private static DOWN = 40;\n\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        if (treeWidget.options.keyboardSupport) {\n            jQuery(document).on(\"keydown.jqtree\", this.handleKeyDown);\n        }\n    }\n\n    public deinit(): void {\n        jQuery(document).off(\"keydown.jqtree\");\n    }\n\n    public moveDown(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getNextVisibleNode());\n    }\n\n    public moveUp(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getPreviousVisibleNode());\n    }\n\n    public moveRight(selectedNode: Node): boolean {\n        if (!selectedNode.isFolder()) {\n            return true;\n        } else {\n            // folder node\n            if (selectedNode.is_open) {\n                // Right moves to the first child of an open node\n                return this.selectNode(selectedNode.getNextVisibleNode());\n            } else {\n                // Right expands a closed node\n                this.treeWidget.openNode(selectedNode);\n                return false;\n            }\n        }\n    }\n\n    public moveLeft(selectedNode: Node): boolean {\n        if (selectedNode.isFolder() && selectedNode.is_open) {\n            // Left on an open node closes the node\n            this.treeWidget.closeNode(selectedNode);\n            return false;\n        } else {\n            // Left on a closed or end node moves focus to the node's parent\n            return this.selectNode(selectedNode.getParent());\n        }\n    }\n\n    public selectNode(node: Node | null): boolean {\n        if (!node) {\n            return true;\n        } else {\n            this.treeWidget.selectNode(node);\n\n            if (\n                !this.treeWidget.scrollHandler.isScrolledIntoView(\n                    jQuery(node.element).find(\".jqtree-element\")\n                )\n            ) {\n                this.treeWidget.scrollToNode(node);\n            }\n\n            return false;\n        }\n    }\n\n    private handleKeyDown = (e: JQuery.Event): boolean => {\n        if (!this.canHandleKeyboard()) {\n            return true;\n        }\n\n        const selectedNode = this.treeWidget.getSelectedNode();\n        if (!selectedNode) {\n            return true;\n        }\n\n        const key = e.which;\n\n        switch (key) {\n            case KeyHandler.DOWN:\n                return this.moveDown(selectedNode);\n\n            case KeyHandler.UP:\n                return this.moveUp(selectedNode);\n\n            case KeyHandler.RIGHT:\n                return this.moveRight(selectedNode);\n\n            case KeyHandler.LEFT:\n                return this.moveLeft(selectedNode);\n\n            default:\n                return true;\n        }\n    };\n\n    private canHandleKeyboard(): boolean {\n        return (\n            (this.treeWidget.options.keyboardSupport || false) &&\n            this.treeWidget.selectNodeHandler.isFocusOnTree()\n        );\n    }\n}\n","const register = (widgetClass: unknown, widgetName: string): void => {\n    const getDataKey = (): string => `simple_widget_${widgetName}`;\n\n    const getWidgetData = (\n        el: HTMLElement,\n        dataKey: string\n    ): SimpleWidget<unknown> | null => {\n        const widget = jQuery.data(el, dataKey) as unknown;\n\n        if (widget && widget instanceof SimpleWidget) {\n            return widget;\n        } else {\n            return null;\n        }\n    };\n\n    const createWidget = ($el: JQuery, options: unknown): JQuery => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const existingWidget = getWidgetData(el, dataKey);\n\n            if (!existingWidget) {\n                const simpleWidgetClass = widgetClass as typeof SimpleWidget;\n                const widget = new simpleWidgetClass(el, options);\n\n                if (!jQuery.data(el, dataKey)) {\n                    jQuery.data(el, dataKey, widget);\n                }\n\n                // Call init after setting data, so we can call methods\n                widget.init();\n            }\n        }\n\n        return $el;\n    };\n\n    const destroyWidget = ($el: JQuery): void => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const widget = getWidgetData(el, dataKey);\n\n            if (widget) {\n                widget.destroy();\n            }\n\n            jQuery.removeData(el, dataKey);\n        }\n    };\n\n    const callFunction = (\n        $el: JQuery,\n        functionName: string,\n        args: unknown[]\n    ): unknown => {\n        let result = null;\n\n        for (const el of $el.get()) {\n            const widget = jQuery.data(el, getDataKey()) as unknown;\n\n            if (widget && widget instanceof SimpleWidget) {\n                const simpleWidget = widget as SimpleWidget<unknown>;\n                const widgetFunction = simpleWidget[functionName];\n\n                if (widgetFunction && typeof widgetFunction === \"function\") {\n                    result = widgetFunction.apply(widget, args) as unknown;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (jQuery.fn as any)[widgetName] = function (\n        this: JQuery,\n        argument1: unknown,\n        ...args: unknown[]\n    ) {\n        if (!argument1) {\n            return createWidget(this, null);\n        } else if (typeof argument1 === \"object\") {\n            const options = argument1 as unknown;\n            return createWidget(this, options);\n        } else if (typeof argument1 === \"string\" && argument1[0] !== \"_\") {\n            const functionName = argument1;\n\n            if (functionName === \"destroy\") {\n                return destroyWidget(this);\n            } else if (functionName === \"get_widget_class\") {\n                return widgetClass;\n            } else {\n                return callFunction(this, functionName, args);\n            }\n        } else {\n            return undefined;\n        }\n    };\n};\n\nexport default class SimpleWidget<WidgetOptions> {\n    public static register(widgetClass: unknown, widgetName: string): void {\n        register(widgetClass, widgetName);\n    }\n\n    [key: string]: unknown;\n\n    protected static defaults: unknown = {};\n\n    public options: WidgetOptions;\n\n    public $el: JQuery<HTMLElement>;\n\n    constructor(el: HTMLElement, options: WidgetOptions) {\n        this.$el = jQuery(el);\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const defaults = (this.constructor as any)[\"defaults\"] as WidgetOptions;\n        this.options = { ...defaults, ...options };\n    }\n\n    public destroy(): void {\n        this.deinit();\n    }\n\n    public init(): void {\n        //\n    }\n\n    public deinit(): void {\n        //\n    }\n}\n","/*\nThis widget does the same a the mouse widget in jqueryui.\n*/\nimport SimpleWidget from \"./simple.widget\";\nimport { PositionInfo } from \"./types\";\n\nconst getPositionInfoFromMouseEvent = (e: MouseEvent): PositionInfo => ({\n    pageX: e.pageX,\n    pageY: e.pageY,\n    target: e.target as HTMLElement,\n    originalEvent: e,\n});\n\nconst getPositionInfoFromTouch = (\n    touch: Touch,\n    e: TouchEvent\n): PositionInfo => ({\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    target: touch.target as HTMLElement,\n    originalEvent: e,\n});\n\nabstract class MouseWidget<WidgetOptions> extends SimpleWidget<WidgetOptions> {\n    protected isMouseStarted: boolean;\n    protected mouseDownInfo: PositionInfo | null;\n    private mouseDelayTimer: number | null;\n    private isMouseDelayMet: boolean;\n\n    public init(): void {\n        const element = this.$el.get(0);\n\n        if (element) {\n            element.addEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n            element.addEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.isMouseStarted = false;\n        this.mouseDelayTimer = null;\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n    }\n\n    public deinit(): void {\n        const el = this.$el.get(0);\n\n        if (el) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.removeMouseMoveEventListeners();\n    }\n\n    protected abstract mouseCapture(positionInfo: PositionInfo): boolean | null;\n\n    protected abstract mouseStart(positionInfo: PositionInfo): boolean;\n\n    protected abstract mouseDrag(positionInfo: PositionInfo): void;\n\n    protected abstract mouseStop(positionInfo: PositionInfo): void;\n\n    protected abstract getMouseDelay(): number;\n\n    private mouseDown = (e: MouseEvent): void => {\n        // Left mouse button?\n        if (e.button !== 0) {\n            return;\n        }\n\n        const result = this.handleMouseDown(getPositionInfoFromMouseEvent(e));\n\n        if (result && e.cancelable) {\n            e.preventDefault();\n        }\n    };\n\n    private handleMouseDown(positionInfo: PositionInfo): boolean {\n        // We may have missed mouseup (out of window)\n        if (this.isMouseStarted) {\n            this.handleMouseUp(positionInfo);\n        }\n\n        this.mouseDownInfo = positionInfo;\n\n        if (!this.mouseCapture(positionInfo)) {\n            return false;\n        }\n\n        this.handleStartMouse();\n\n        return true;\n    }\n\n    private handleStartMouse(): void {\n        document.addEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        document.addEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        document.addEventListener(\"mouseup\", this.mouseUp, { passive: false });\n        document.addEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n\n        const mouseDelay = this.getMouseDelay();\n\n        if (mouseDelay) {\n            this.startMouseDelayTimer(mouseDelay);\n        } else {\n            this.isMouseDelayMet = true;\n        }\n    }\n\n    private startMouseDelayTimer(mouseDelay: number): void {\n        if (this.mouseDelayTimer) {\n            clearTimeout(this.mouseDelayTimer);\n        }\n\n        this.mouseDelayTimer = window.setTimeout(() => {\n            if (this.mouseDownInfo) {\n                this.isMouseDelayMet = true;\n            }\n        }, mouseDelay);\n\n        this.isMouseDelayMet = false;\n    }\n\n    private mouseMove = (e: MouseEvent): void => {\n        this.handleMouseMove(e, getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseMove(\n        e: MouseEvent | TouchEvent,\n        positionInfo: PositionInfo\n    ): void {\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n            return;\n        }\n\n        if (!this.isMouseDelayMet) {\n            return;\n        }\n\n        if (this.mouseDownInfo) {\n            this.isMouseStarted = this.mouseStart(this.mouseDownInfo) !== false;\n        }\n\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n        } else {\n            this.handleMouseUp(positionInfo);\n        }\n    }\n\n    private mouseUp = (e: MouseEvent): void => {\n        this.handleMouseUp(getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseUp(positionInfo: PositionInfo): void {\n        this.removeMouseMoveEventListeners();\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n\n        if (this.isMouseStarted) {\n            this.isMouseStarted = false;\n            this.mouseStop(positionInfo);\n        }\n    }\n\n    private removeMouseMoveEventListeners() {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mouseup\", this.mouseUp, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n    }\n\n    private touchStart = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseDown(getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchMove = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseMove(e, getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchEnd = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseUp(getPositionInfoFromTouch(touch, e));\n    };\n}\n\nexport default MouseWidget;\n","import { isInt } from \"./util\";\nimport { JqTreeWidget } from \"./tree.jquery\";\nimport { Node } from \"./node\";\n\nexport interface SavedState {\n    open_nodes: NodeId[];\n    selected_node: NodeId[];\n}\n\nexport default class SaveStateHandler {\n    private treeWidget: JqTreeWidget;\n    private _supportsLocalStorage: boolean | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n    }\n\n    public saveState(): void {\n        const state = JSON.stringify(this.getState());\n\n        if (this.treeWidget.options.onSetStateFromStorage) {\n            this.treeWidget.options.onSetStateFromStorage(state);\n        } else if (this.supportsLocalStorage()) {\n            localStorage.setItem(this.getKeyName(), state);\n        }\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        const jsonData = this.loadFromStorage();\n\n        if (jsonData) {\n            return this.parseState(jsonData) as unknown as SavedState;\n        } else {\n            return null;\n        }\n    }\n\n    public getState(): SavedState {\n        const getOpenNodeIds = (): NodeId[] => {\n            const openNodes: NodeId[] = [];\n\n            this.treeWidget.tree.iterate((node: Node) => {\n                if (node.is_open && node.id && node.hasChildren()) {\n                    openNodes.push(node.id);\n                }\n                return true;\n            });\n\n            return openNodes;\n        };\n\n        const getSelectedNodeIds = (): NodeId[] => {\n            const selectedNodeIds: NodeId[] = [];\n\n            this.treeWidget.getSelectedNodes().forEach((node) => {\n                if (node.id != null) {\n                    selectedNodeIds.push(node.id);\n                }\n            });\n\n            return selectedNodeIds;\n        };\n\n        return {\n            open_nodes: getOpenNodeIds(),\n            selected_node: getSelectedNodeIds(),\n        };\n    }\n\n    /*\n    Set initial state\n    Don't handle nodes that are loaded on demand\n\n    result: must load on demand\n    */\n    public setInitialState(state: SavedState): boolean {\n        if (!state) {\n            return false;\n        } else {\n            let mustLoadOnDemand = false;\n\n            if (state.open_nodes) {\n                mustLoadOnDemand = this.openInitialNodes(state.open_nodes);\n            }\n\n            if (state.selected_node) {\n                this.resetSelection();\n                this.selectInitialNodes(state.selected_node);\n            }\n\n            return mustLoadOnDemand;\n        }\n    }\n\n    public setInitialStateOnDemand(\n        state: SavedState,\n        cbFinished: () => void\n    ): void {\n        if (state) {\n            this.doSetInitialStateOnDemand(\n                state.open_nodes,\n                state.selected_node,\n                cbFinished\n            );\n        } else {\n            cbFinished();\n        }\n    }\n\n    public getNodeIdToBeSelected(): NodeId | null {\n        const state = this.getStateFromStorage();\n\n        if (state && state.selected_node) {\n            return state.selected_node[0] || null;\n        } else {\n            return null;\n        }\n    }\n\n    private parseState(jsonData: string): SavedState {\n        const state = JSON.parse(jsonData) as Record<string, unknown>;\n\n        // Check if selected_node is an int (instead of an array)\n        if (state && state.selected_node && isInt(state.selected_node)) {\n            // Convert to array\n            state.selected_node = [state.selected_node];\n        }\n\n        return state as unknown as SavedState;\n    }\n\n    private loadFromStorage(): string | null {\n        if (this.treeWidget.options.onGetStateFromStorage) {\n            return this.treeWidget.options.onGetStateFromStorage();\n        } else if (this.supportsLocalStorage()) {\n            return localStorage.getItem(this.getKeyName());\n        } else {\n            return null;\n        }\n    }\n\n    private openInitialNodes(nodeIds: NodeId[]): boolean {\n        let mustLoadOnDemand = false;\n\n        for (const nodeId of nodeIds) {\n            const node = this.treeWidget.getNodeById(nodeId);\n\n            if (node) {\n                if (!node.load_on_demand) {\n                    node.is_open = true;\n                } else {\n                    mustLoadOnDemand = true;\n                }\n            }\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    private selectInitialNodes(nodeIds: NodeId[]): boolean {\n        let selectCount = 0;\n\n        for (const nodeId of nodeIds) {\n            const node = this.treeWidget.getNodeById(nodeId);\n\n            if (node) {\n                selectCount += 1;\n\n                this.treeWidget.selectNodeHandler.addToSelection(node);\n            }\n        }\n\n        return selectCount !== 0;\n    }\n\n    private resetSelection(): void {\n        const selectNodeHandler = this.treeWidget.selectNodeHandler;\n\n        const selectedNodes = selectNodeHandler.getSelectedNodes();\n\n        selectedNodes.forEach((node) => {\n            selectNodeHandler.removeFromSelection(node);\n        });\n    }\n\n    private doSetInitialStateOnDemand(\n        nodeIdsParam: NodeId[],\n        selectedNodes: NodeId[],\n        cbFinished: () => void\n    ): void {\n        let loadingCount = 0;\n        let nodeIds = nodeIdsParam;\n\n        const openNodes = (): void => {\n            const newNodesIds = [];\n\n            for (const nodeId of nodeIds) {\n                const node = this.treeWidget.getNodeById(nodeId);\n\n                if (!node) {\n                    newNodesIds.push(nodeId);\n                } else {\n                    if (!node.is_loading) {\n                        if (node.load_on_demand) {\n                            loadAndOpenNode(node);\n                        } else {\n                            this.treeWidget._openNode(node, false, null);\n                        }\n                    }\n                }\n            }\n\n            nodeIds = newNodesIds;\n\n            if (this.selectInitialNodes(selectedNodes)) {\n                this.treeWidget._refreshElements(null);\n            }\n\n            if (loadingCount === 0) {\n                cbFinished();\n            }\n        };\n\n        const loadAndOpenNode = (node: Node): void => {\n            loadingCount += 1;\n            this.treeWidget._openNode(node, false, () => {\n                loadingCount -= 1;\n                openNodes();\n            });\n        };\n\n        openNodes();\n    }\n\n    private getKeyName(): string {\n        if (typeof this.treeWidget.options.saveState === \"string\") {\n            return this.treeWidget.options.saveState;\n        } else {\n            return \"tree\";\n        }\n    }\n\n    private supportsLocalStorage(): boolean {\n        const testSupport = (): boolean => {\n            // Is local storage supported?\n            if (localStorage == null) {\n                return false;\n            } else {\n                // Check if it's possible to store an item. Safari does not allow this in private browsing mode.\n                try {\n                    const key = \"_storage_test\";\n                    sessionStorage.setItem(key, \"value\");\n                    sessionStorage.removeItem(key);\n                } catch (error) {\n                    return false;\n                }\n\n                return true;\n            }\n        };\n\n        if (this._supportsLocalStorage == null) {\n            this._supportsLocalStorage = testSupport();\n        }\n\n        return this._supportsLocalStorage;\n    }\n}\n","import { JqTreeWidget } from \"./tree.jquery\";\nimport { HitArea, PositionInfo } from \"./types\";\n\nexport default class ScrollHandler {\n    private treeWidget: JqTreeWidget;\n    private previousTop: number;\n    private isInitialized: boolean;\n    private $scrollParent: JQuery | null;\n    private scrollParentTop: number;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n        this.previousTop = -1;\n        this.isInitialized = false;\n    }\n\n    public checkScrolling(): void {\n        this.ensureInit();\n        this.checkVerticalScrolling();\n        this.checkHorizontalScrolling();\n    }\n\n    public scrollToY(top: number): void {\n        this.ensureInit();\n\n        if (this.$scrollParent && this.$scrollParent[0]) {\n            this.$scrollParent[0].scrollTop = top;\n        } else {\n            const offset = this.treeWidget.$el.offset();\n            const treeTop = offset ? offset.top : 0;\n\n            jQuery(document).scrollTop(top + treeTop);\n        }\n    }\n\n    public isScrolledIntoView($element: JQuery): boolean {\n        this.ensureInit();\n\n        let elementBottom: number;\n        let viewBottom: number;\n        let elementTop: number;\n        let viewTop: number;\n\n        const elHeight = $element.height() || 0;\n\n        if (this.$scrollParent) {\n            viewTop = 0;\n            viewBottom = this.$scrollParent.height() || 0;\n\n            const offset = $element.offset();\n            const originalTop = offset ? offset.top : 0;\n\n            elementTop = originalTop - this.scrollParentTop;\n            elementBottom = elementTop + elHeight;\n        } else {\n            viewTop = jQuery(window).scrollTop() || 0;\n\n            const windowHeight = jQuery(window).height() || 0;\n            viewBottom = viewTop + windowHeight;\n\n            const offset = $element.offset();\n\n            elementTop = offset ? offset.top : 0;\n            elementBottom = elementTop + elHeight;\n        }\n\n        return elementBottom <= viewBottom && elementTop >= viewTop;\n    }\n\n    public getScrollLeft(): number {\n        if (!this.$scrollParent) {\n            return 0;\n        } else {\n            return this.$scrollParent.scrollLeft() || 0;\n        }\n    }\n\n    private initScrollParent(): void {\n        const getParentWithOverflow = (): JQuery | null => {\n            const cssAttributes = [\"overflow\", \"overflow-y\"];\n\n            const hasOverFlow = ($el: JQuery): boolean => {\n                for (const attr of cssAttributes) {\n                    const overflowValue = $el.css(attr);\n                    if (\n                        overflowValue === \"auto\" ||\n                        overflowValue === \"scroll\"\n                    ) {\n                        return true;\n                    }\n                }\n\n                return false;\n            };\n\n            if (hasOverFlow(this.treeWidget.$el)) {\n                return this.treeWidget.$el;\n            }\n\n            for (const el of this.treeWidget.$el.parents().get()) {\n                const $el = jQuery(el);\n                if (hasOverFlow($el)) {\n                    return $el;\n                }\n            }\n\n            return null;\n        };\n\n        const setDocumentAsScrollParent = (): void => {\n            this.scrollParentTop = 0;\n            this.$scrollParent = null;\n        };\n\n        if (this.treeWidget.$el.css(\"position\") === \"fixed\") {\n            setDocumentAsScrollParent();\n        }\n\n        const $scrollParent = getParentWithOverflow();\n\n        if (\n            $scrollParent &&\n            $scrollParent.length &&\n            $scrollParent[0]?.tagName !== \"HTML\"\n        ) {\n            this.$scrollParent = $scrollParent;\n\n            const offset = this.$scrollParent.offset();\n            this.scrollParentTop = offset ? offset.top : 0;\n        } else {\n            setDocumentAsScrollParent();\n        }\n\n        this.isInitialized = true;\n    }\n\n    private ensureInit(): void {\n        if (!this.isInitialized) {\n            this.initScrollParent();\n        }\n    }\n\n    private handleVerticalScrollingWithScrollParent(area: HitArea): void {\n        const scrollParent = this.$scrollParent && this.$scrollParent[0];\n\n        if (!scrollParent) {\n            return;\n        }\n\n        const distanceBottom =\n            this.scrollParentTop + scrollParent.offsetHeight - area.bottom;\n\n        if (distanceBottom < 20) {\n            scrollParent.scrollTop += 20;\n            this.treeWidget.refreshHitAreas();\n            this.previousTop = -1;\n        } else if (area.top - this.scrollParentTop < 20) {\n            scrollParent.scrollTop -= 20;\n            this.treeWidget.refreshHitAreas();\n            this.previousTop = -1;\n        }\n    }\n\n    private handleVerticalScrollingWithDocument(area: HitArea): void {\n        const scrollTop = jQuery(document).scrollTop() || 0;\n        const distanceTop = area.top - scrollTop;\n\n        if (distanceTop < 20) {\n            jQuery(document).scrollTop(scrollTop - 20);\n        } else {\n            const windowHeight = jQuery(window).height() || 0;\n\n            if (windowHeight - (area.bottom - scrollTop) < 20) {\n                jQuery(document).scrollTop(scrollTop + 20);\n            }\n        }\n    }\n\n    private checkVerticalScrolling(): void {\n        const hoveredArea = this.treeWidget.dndHandler.hoveredArea;\n\n        if (hoveredArea && hoveredArea.top !== this.previousTop) {\n            this.previousTop = hoveredArea.top;\n\n            if (this.$scrollParent) {\n                this.handleVerticalScrollingWithScrollParent(hoveredArea);\n            } else {\n                this.handleVerticalScrollingWithDocument(hoveredArea);\n            }\n        }\n    }\n\n    private checkHorizontalScrolling(): void {\n        const positionInfo = this.treeWidget.dndHandler.positionInfo;\n\n        if (!positionInfo) {\n            return;\n        }\n\n        if (this.$scrollParent) {\n            this.handleHorizontalScrollingWithParent(positionInfo);\n        } else {\n            this.handleHorizontalScrollingWithDocument(positionInfo);\n        }\n    }\n\n    private handleHorizontalScrollingWithParent(\n        positionInfo: PositionInfo\n    ): void {\n        if (\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return;\n        }\n\n        const $scrollParent = this.$scrollParent;\n        const scrollParentOffset = $scrollParent && $scrollParent.offset();\n\n        if (!($scrollParent && scrollParentOffset)) {\n            return;\n        }\n\n        const scrollParent = $scrollParent[0];\n\n        if (!scrollParent) {\n            return;\n        }\n\n        const canScrollRight =\n            scrollParent.scrollLeft + scrollParent.clientWidth <\n            scrollParent.scrollWidth;\n        const canScrollLeft = scrollParent.scrollLeft > 0;\n\n        const rightEdge = scrollParentOffset.left + scrollParent.clientWidth;\n        const leftEdge = scrollParentOffset.left;\n        const isNearRightEdge = positionInfo.pageX > rightEdge - 20;\n        const isNearLeftEdge = positionInfo.pageX < leftEdge + 20;\n\n        if (isNearRightEdge && canScrollRight) {\n            scrollParent.scrollLeft = Math.min(\n                scrollParent.scrollLeft + 20,\n                scrollParent.scrollWidth\n            );\n        } else if (isNearLeftEdge && canScrollLeft) {\n            scrollParent.scrollLeft = Math.max(scrollParent.scrollLeft - 20, 0);\n        }\n    }\n\n    private handleHorizontalScrollingWithDocument(\n        positionInfo: PositionInfo\n    ): void {\n        if (\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return;\n        }\n\n        const $document = jQuery(document);\n\n        const scrollLeft = $document.scrollLeft() || 0;\n        const windowWidth = jQuery(window).width() || 0;\n\n        const canScrollLeft = scrollLeft > 0;\n\n        const isNearRightEdge = positionInfo.pageX > windowWidth - 20;\n        const isNearLeftEdge = positionInfo.pageX - scrollLeft < 20;\n\n        if (isNearRightEdge) {\n            $document.scrollLeft(scrollLeft + 20);\n        } else if (isNearLeftEdge && canScrollLeft) {\n            $document.scrollLeft(Math.max(scrollLeft - 20, 0));\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport default class SelectNodeHandler {\n    private treeWidget: JqTreeWidget;\n    private selectedNodes: Set<NodeId>;\n    private selectedSingleNode: Node | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n        this.selectedNodes = new Set<NodeId>();\n        this.clear();\n    }\n\n    public getSelectedNode(): Node | false {\n        const selectedNodes = this.getSelectedNodes();\n\n        if (selectedNodes.length) {\n            return selectedNodes[0] || false;\n        } else {\n            return false;\n        }\n    }\n\n    public getSelectedNodes(): Node[] {\n        if (this.selectedSingleNode) {\n            return [this.selectedSingleNode];\n        } else {\n            const selectedNodes: Node[] = [];\n\n            this.selectedNodes.forEach((id) => {\n                const node = this.treeWidget.getNodeById(id);\n                if (node) {\n                    selectedNodes.push(node);\n                }\n            });\n\n            return selectedNodes;\n        }\n    }\n\n    public getSelectedNodesUnder(parent: Node): Node[] {\n        if (this.selectedSingleNode) {\n            if (parent.isParentOf(this.selectedSingleNode)) {\n                return [this.selectedSingleNode];\n            } else {\n                return [];\n            }\n        } else {\n            const selectedNodes = [];\n\n            for (const id in this.selectedNodes) {\n                if (\n                    Object.prototype.hasOwnProperty.call(this.selectedNodes, id)\n                ) {\n                    const node = this.treeWidget.getNodeById(id);\n                    if (node && parent.isParentOf(node)) {\n                        selectedNodes.push(node);\n                    }\n                }\n            }\n\n            return selectedNodes;\n        }\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (node.id != null) {\n            return this.selectedNodes.has(node.id);\n        } else if (this.selectedSingleNode) {\n            return this.selectedSingleNode.element === node.element;\n        } else {\n            return false;\n        }\n    }\n\n    public clear(): void {\n        this.selectedNodes.clear();\n        this.selectedSingleNode = null;\n    }\n\n    public removeFromSelection(node: Node, includeChildren = false): void {\n        if (node.id == null) {\n            if (\n                this.selectedSingleNode &&\n                node.element === this.selectedSingleNode.element\n            ) {\n                this.selectedSingleNode = null;\n            }\n        } else {\n            this.selectedNodes.delete(node.id);\n\n            if (includeChildren) {\n                node.iterate(() => {\n                    if (node.id != null) {\n                        this.selectedNodes.delete(node.id);\n                    }\n                    return true;\n                });\n            }\n        }\n    }\n\n    public addToSelection(node: Node): void {\n        if (node.id != null) {\n            this.selectedNodes.add(node.id);\n        } else {\n            this.selectedSingleNode = node;\n        }\n    }\n\n    public isFocusOnTree(): boolean {\n        const activeElement = document.activeElement;\n\n        return Boolean(\n            activeElement &&\n                activeElement.tagName === \"SPAN\" &&\n                this.treeWidget._containsElement(activeElement as HTMLElement)\n        );\n    }\n}\n","import { Position, Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\nimport { DropHint } from \"./types\";\n\nexport type OnFinishOpenNode = (node: Node) => void;\n\nexport class NodeElement {\n    public node: Node;\n    public $element: JQuery<HTMLElement>;\n    protected treeWidget: JqTreeWidget;\n\n    constructor(node: Node, treeWidget: JqTreeWidget) {\n        this.init(node, treeWidget);\n    }\n\n    public init(node: Node, treeWidget: JqTreeWidget): void {\n        this.node = node;\n        this.treeWidget = treeWidget;\n\n        if (!node.element) {\n            const element = this.treeWidget.element.get(0);\n\n            if (element) {\n                node.element = element;\n            }\n        }\n\n        if (node.element) {\n            this.$element = jQuery(node.element);\n        }\n    }\n\n    public addDropHint(position: number): DropHint {\n        if (this.mustShowBorderDropHint(position)) {\n            return new BorderDropHint(\n                this.$element,\n                this.treeWidget._getScrollLeft(),\n            );\n        } else {\n            return new GhostDropHint(this.node, this.$element, position);\n        }\n    }\n\n    public select(mustSetFocus: boolean): void {\n        const $li = this.getLi();\n\n        $li.addClass(\"jqtree-selected\");\n\n        const $span = this.getSpan();\n        $span.attr(\"tabindex\", this.treeWidget.options.tabIndex ?? null);\n        $span.attr(\"aria-selected\", \"true\");\n\n        if (mustSetFocus) {\n            $span.trigger(\"focus\");\n        }\n    }\n\n    public deselect(): void {\n        const $li = this.getLi();\n\n        $li.removeClass(\"jqtree-selected\");\n\n        const $span = this.getSpan();\n        $span.removeAttr(\"tabindex\");\n        $span.attr(\"aria-selected\", \"false\");\n\n        $span.trigger(\"blur\");\n    }\n\n    protected getUl(): JQuery<HTMLElement> {\n        return this.$element.children(\"ul:first\");\n    }\n\n    protected getSpan(): JQuery<HTMLElement> {\n        return this.$element\n            .children(\".jqtree-element\")\n            .find(\"span.jqtree-title\");\n    }\n\n    protected getLi(): JQuery<HTMLElement> {\n        return this.$element;\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return position === Position.Inside;\n    }\n}\n\nexport class FolderElement extends NodeElement {\n    public open(\n        onFinished: OnFinishOpenNode | null,\n        slide = true,\n        animationSpeed: JQuery.Duration = \"fast\",\n    ): void {\n        if (this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = true;\n\n        const $button = this.getButton();\n        $button.removeClass(\"jqtree-closed\");\n        $button.html(\"\");\n\n        const buttonEl = $button.get(0);\n\n        if (buttonEl) {\n            const openedIconElement =\n                this.treeWidget.renderer.openedIconElement;\n\n            if (openedIconElement) {\n                const icon = openedIconElement.cloneNode(true);\n                buttonEl.appendChild(icon);\n            }\n        }\n\n        const doOpen = (): void => {\n            const $li = this.getLi();\n            $li.removeClass(\"jqtree-closed\");\n\n            const $titleSpan = this.getSpan();\n            $titleSpan.attr(\"aria-expanded\", \"true\");\n\n            if (onFinished) {\n                onFinished(this.node);\n            }\n\n            this.treeWidget._triggerEvent(\"tree.open\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            this.getUl().slideDown(animationSpeed, doOpen);\n        } else {\n            this.getUl().show();\n            doOpen();\n        }\n    }\n\n    public close(\n        slide = true,\n        animationSpeed: JQuery.Duration | undefined = \"fast\",\n    ): void {\n        if (!this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = false;\n\n        const $button = this.getButton();\n        $button.addClass(\"jqtree-closed\");\n        $button.html(\"\");\n\n        const buttonEl = $button.get(0);\n\n        if (buttonEl) {\n            const closedIconElement =\n                this.treeWidget.renderer.closedIconElement;\n\n            if (closedIconElement) {\n                const icon = closedIconElement.cloneNode(true);\n                buttonEl.appendChild(icon);\n            }\n        }\n\n        const doClose = (): void => {\n            const $li = this.getLi();\n            $li.addClass(\"jqtree-closed\");\n\n            const $titleSpan = this.getSpan();\n            $titleSpan.attr(\"aria-expanded\", \"false\");\n\n            this.treeWidget._triggerEvent(\"tree.close\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            this.getUl().slideUp(animationSpeed, doClose);\n        } else {\n            this.getUl().hide();\n            doClose();\n        }\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return !this.node.is_open && position === Position.Inside;\n    }\n\n    private getButton(): JQuery {\n        return this.$element\n            .children(\".jqtree-element\")\n            .find(\"a.jqtree-toggler\");\n    }\n}\n\nexport class BorderDropHint implements DropHint {\n    private $hint: JQuery<Element>;\n\n    constructor($element: JQuery<Element>, scrollLeft: number) {\n        const $div = $element.children(\".jqtree-element\");\n\n        const elWidth = $element.width() || 0;\n        const width = Math.max(elWidth + scrollLeft - 4, 0);\n\n        const elHeight = $div.outerHeight() || 0;\n        const height = Math.max(elHeight - 4, 0);\n\n        this.$hint = jQuery('<span class=\"jqtree-border\"></span>');\n        $div.append(this.$hint);\n\n        this.$hint.css({ width, height });\n    }\n\n    public remove(): void {\n        this.$hint.remove();\n    }\n}\n\nclass GhostDropHint implements DropHint {\n    private $element: JQuery<Element>;\n    private node: Node;\n    private $ghost: JQuery;\n\n    constructor(node: Node, $element: JQuery<Element>, position: Position) {\n        this.$element = $element;\n\n        this.node = node;\n        this.$ghost = jQuery(\n            `<li class=\"jqtree_common jqtree-ghost\"><span class=\"jqtree_common jqtree-circle\"></span>\n            <span class=\"jqtree_common jqtree-line\"></span></li>`,\n        );\n\n        if (position === Position.After) {\n            this.moveAfter();\n        } else if (position === Position.Before) {\n            this.moveBefore();\n        } else if (position === Position.Inside) {\n            if (node.isFolder() && node.is_open) {\n                this.moveInsideOpenFolder();\n            } else {\n                this.moveInside();\n            }\n        }\n    }\n\n    public remove(): void {\n        this.$ghost.remove();\n    }\n\n    public moveAfter(): void {\n        this.$element.after(this.$ghost);\n    }\n\n    public moveBefore(): void {\n        this.$element.before(this.$ghost);\n    }\n\n    public moveInsideOpenFolder(): void {\n        const childElement = this.node.children[0]?.element;\n\n        if (childElement) {\n            jQuery(childElement).before(this.$ghost);\n        }\n    }\n\n    public moveInside(): void {\n        this.$element.after(this.$ghost);\n        this.$ghost.addClass(\"jqtree-inside\");\n    }\n}\n","import __version__ from \"./version\";\nimport { DragAndDropHandler } from \"./dragAndDropHandler\";\nimport ElementsRenderer from \"./elementsRenderer\";\nimport DataLoader, { HandleFinishedLoading } from \"./dataLoader\";\nimport KeyHandler from \"./keyHandler\";\nimport MouseWidget from \"./mouse.widget\";\nimport { PositionInfo } from \"./types\";\nimport SaveStateHandler, { SavedState } from \"./saveStateHandler\";\nimport ScrollHandler from \"./scrollHandler\";\nimport SelectNodeHandler from \"./selectNodeHandler\";\nimport SimpleWidget from \"./simple.widget\";\nimport { Node, getPosition } from \"./node\";\nimport { isFunction } from \"./util\";\nimport { FolderElement, NodeElement, OnFinishOpenNode } from \"./nodeElement\";\nimport { JQTreeOptions } from \"./jqtreeOptions\";\n\ninterface ClickTarget {\n    node: Node;\n    type: \"button\" | \"label\";\n}\n\ninterface SelectNodeOptions {\n    mustToggle?: boolean;\n    mustSetFocus?: boolean;\n}\n\nconst NODE_PARAM_IS_EMPTY = \"Node parameter is empty\";\nconst PARAM_IS_EMPTY = \"Parameter is empty: \";\n\nexport class JqTreeWidget extends MouseWidget<JQTreeOptions> {\n    protected static defaults: JQTreeOptions = {\n        animationSpeed: \"fast\",\n        autoEscape: true,\n        autoOpen: false, // true / false / int (open n levels starting at 0)\n        buttonLeft: true,\n        // The symbol to use for a closed node - ► BLACK RIGHT-POINTING POINTER\n        // http://www.fileformat.info/info/unicode/char/25ba/index.htm\n        closedIcon: undefined,\n        data: undefined,\n        dataFilter: undefined,\n        dataUrl: undefined,\n        dragAndDrop: false,\n        keyboardSupport: true,\n        nodeClass: Node,\n        onCanMove: undefined, // Can this node be moved?\n        onCanMoveTo: undefined, // Can this node be moved to this position? function(moved_node, target_node, position)\n        onCanSelectNode: undefined,\n        onCreateLi: undefined,\n        onDragMove: undefined,\n        onDragStop: undefined,\n        onGetStateFromStorage: undefined,\n        onIsMoveHandle: undefined,\n        onLoadFailed: undefined,\n        onLoading: undefined,\n        onSetStateFromStorage: undefined,\n        openedIcon: \"&#x25bc;\",\n        openFolderDelay: 500, // The delay for opening a folder during drag and drop; the value is in milliseconds\n        // The symbol to use for an open node - ▼ BLACK DOWN-POINTING TRIANGLE\n        // http://www.fileformat.info/info/unicode/char/25bc/index.htm\n        rtl: undefined, // right-to-left support; true / false (default)\n        saveState: false, // true / false / string (cookie name)\n        selectable: true,\n        showEmptyFolder: false,\n        slide: true, // must display slide animation?\n        startDndDelay: 300, // The delay for starting dnd (in milliseconds)\n        tabIndex: 0,\n        useContextMenu: true,\n    };\n\n    public element: JQuery;\n    public tree: Node;\n    public dndHandler: DragAndDropHandler;\n    public renderer: ElementsRenderer;\n    public dataLoader: DataLoader;\n    public scrollHandler: ScrollHandler;\n    public selectNodeHandler: SelectNodeHandler;\n\n    private isInitialized: boolean;\n    private saveStateHandler: SaveStateHandler;\n    private keyHandler: KeyHandler;\n\n    public toggle(node: Node, slideParam: null | boolean = null): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.is_open) {\n            this.closeNode(node, slide);\n        } else {\n            this.openNode(node, slide);\n        }\n\n        return this.element;\n    }\n\n    public getTree(): Node {\n        return this.tree;\n    }\n\n    public selectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions\n    ): JQuery {\n        this.doSelectNode(node, optionsParam);\n        return this.element;\n    }\n\n    public getSelectedNode(): Node | false {\n        return this.selectNodeHandler.getSelectedNode();\n    }\n\n    public toJson(): string {\n        return JSON.stringify(this.tree.getData());\n    }\n\n    public loadData(data: NodeData[], parentNode: Node | null): JQuery {\n        this.doLoadData(data, parentNode);\n        return this.element;\n    }\n\n    /*\n    signatures:\n    - loadDataFromUrl(url, parent_node=null, on_finished=null)\n        loadDataFromUrl('/my_data');\n        loadDataFromUrl('/my_data', node1);\n        loadDataFromUrl('/my_data', node1, function() { console.log('finished'); });\n        loadDataFromUrl('/my_data', null, function() { console.log('finished'); });\n\n    - loadDataFromUrl(parent_node=null, on_finished=null)\n        loadDataFromUrl();\n        loadDataFromUrl(node1);\n        loadDataFromUrl(null, function() { console.log('finished'); });\n        loadDataFromUrl(node1, function() { console.log('finished'); });\n    */\n    public loadDataFromUrl(\n        param1: string | null | Node,\n        param2?: Node | null | HandleFinishedLoading,\n        param3?: HandleFinishedLoading\n    ): JQuery {\n        if (typeof param1 === \"string\") {\n            // first parameter is url\n            this.doLoadDataFromUrl(\n                param1,\n                param2 as Node | null,\n                param3 ?? null\n            );\n        } else {\n            // first parameter is not url\n            this.doLoadDataFromUrl(\n                null,\n                param1,\n                param2 as HandleFinishedLoading | null\n            );\n        }\n\n        return this.element;\n    }\n\n    public reload(onFinished: HandleFinishedLoading | null): JQuery {\n        this.doLoadDataFromUrl(null, null, onFinished);\n        return this.element;\n    }\n\n    public refresh(): JQuery {\n        this._refreshElements(null);\n        return this.element;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.tree.getNodeById(nodeId);\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.tree.getNodeByName(name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        return this.tree.getNodeByNameMustExist(name);\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.tree.getNodesByProperty(key, value);\n    }\n\n    public getNodeByHtmlElement(\n        element: HTMLElement | JQuery<HTMLElement>\n    ): Node | null {\n        return this.getNode(jQuery(element));\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        return this.tree.getNodeByCallback(callback);\n    }\n\n    public openNode(\n        node: Node,\n        param1?: boolean | OnFinishOpenNode,\n        param2?: OnFinishOpenNode\n    ): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const parseParams = (): [boolean, OnFinishOpenNode | null] => {\n            let onFinished: OnFinishOpenNode | null;\n            let slide: boolean | null;\n\n            if (isFunction(param1)) {\n                onFinished = param1 as OnFinishOpenNode | null;\n                slide = null;\n            } else {\n                slide = param1 as boolean;\n                onFinished = param2 as OnFinishOpenNode;\n            }\n\n            if (slide == null) {\n                slide = this.options.slide ?? false;\n            }\n\n            return [slide, onFinished];\n        };\n\n        const [slide, onFinished] = parseParams();\n\n        this._openNode(node, slide, onFinished);\n        return this.element;\n    }\n\n    public closeNode(node: Node, slideParam?: null | boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            new FolderElement(node, this).close(\n                slide,\n                this.options.animationSpeed\n            );\n\n            this.saveState();\n        }\n\n        return this.element;\n    }\n\n    public isDragging(): boolean {\n        return this.dndHandler.isDragging;\n    }\n\n    public refreshHitAreas(): JQuery {\n        this.dndHandler.refresh();\n        return this.element;\n    }\n\n    public addNodeAfter(\n        newNodeInfo: NodeData,\n        existingNode: Node\n    ): Node | null {\n        const newNode = existingNode.addAfter(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addNodeBefore(\n        newNodeInfo: NodeData,\n        existingNode: Node\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addBefore(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addParentNode(\n        newNodeInfo: NodeData,\n        existingNode: Node\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addParent(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(newNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public removeNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!node.parent) {\n            throw Error(\"Node has no parent\");\n        }\n\n        this.selectNodeHandler.removeFromSelection(node, true); // including children\n\n        const parent = node.parent;\n        node.remove();\n        this._refreshElements(parent);\n\n        return this.element;\n    }\n\n    public appendNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam || this.tree;\n\n        const node = parentNode.append(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public prependNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam ?? this.tree;\n\n        const node = parentNode.prepend(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public updateNode(node: Node, data: NodeData): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const idIsChanged =\n            typeof data === \"object\" && data.id && data.id !== node.id;\n\n        if (idIsChanged) {\n            this.tree.removeNodeFromIndex(node);\n        }\n\n        node.setData(data);\n\n        if (idIsChanged) {\n            this.tree.addNodeToIndex(node);\n        }\n\n        if (\n            typeof data === \"object\" &&\n            data[\"children\"] &&\n            data[\"children\"] instanceof Array\n        ) {\n            node.removeChildren();\n\n            if (data.children.length) {\n                node.loadFromData(data.children as Node[]);\n            }\n        }\n\n        this._refreshElements(node);\n\n        return this.element;\n    }\n\n    private isSelectedNodeInSubtree(subtree: Node): boolean {\n        const selectedNode = this.getSelectedNode();\n\n        if (!selectedNode) {\n            return false;\n        } else {\n            return subtree === selectedNode || subtree.isParentOf(selectedNode);\n        }\n    }\n\n    public moveNode(node: Node, targetNode: Node, position: string): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!targetNode) {\n            throw Error(PARAM_IS_EMPTY + \"targetNode\");\n        }\n\n        const positionIndex = getPosition(position);\n\n        if (positionIndex !== undefined) {\n            this.tree.moveNode(node, targetNode, positionIndex);\n            this._refreshElements(null);\n        }\n\n        return this.element;\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        return this.saveStateHandler.getStateFromStorage();\n    }\n\n    public addToSelection(node: Node, mustSetFocus?: boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.addToSelection(node);\n\n        this._getNodeElementForNode(node).select(\n            mustSetFocus === undefined ? true : mustSetFocus\n        );\n\n        this.saveState();\n\n        return this.element;\n    }\n\n    public getSelectedNodes(): Node[] {\n        return this.selectNodeHandler.getSelectedNodes();\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        return this.selectNodeHandler.isNodeSelected(node);\n    }\n\n    public removeFromSelection(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.removeFromSelection(node);\n\n        this._getNodeElementForNode(node).deselect();\n        this.saveState();\n\n        return this.element;\n    }\n\n    public scrollToNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const nodeOffset = jQuery(node.element).offset();\n        const nodeTop = nodeOffset ? nodeOffset.top : 0;\n\n        const treeOffset = this.$el.offset();\n        const treeTop = treeOffset ? treeOffset.top : 0;\n\n        const top = nodeTop - treeTop;\n\n        this.scrollHandler.scrollToY(top);\n\n        return this.element;\n    }\n\n    public getState(): SavedState | null {\n        return this.saveStateHandler.getState();\n    }\n\n    public setState(state: SavedState): JQuery {\n        this.saveStateHandler.setInitialState(state);\n        this._refreshElements(null);\n\n        return this.element;\n    }\n\n    public setOption(option: string, value: unknown): JQuery {\n        (this.options as unknown as Record<string, unknown>)[option] = value;\n        return this.element;\n    }\n\n    public moveDown(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveDown(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public moveUp(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveUp(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public getVersion(): string {\n        return __version__;\n    }\n\n    public _triggerEvent(\n        eventName: string,\n        values?: Record<string, unknown>\n    ): JQuery.Event {\n        const event = jQuery.Event(eventName, values);\n        this.element.trigger(event);\n        return event;\n    }\n\n    public _openNode(\n        node: Node,\n        slide = true,\n        onFinished: OnFinishOpenNode | null\n    ): void {\n        const doOpenNode = (\n            _node: Node,\n            _slide: boolean,\n            _onFinished: OnFinishOpenNode | null\n        ): void => {\n            const folderElement = new FolderElement(_node, this);\n            folderElement.open(\n                _onFinished,\n                _slide,\n                this.options.animationSpeed\n            );\n        };\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            if (node.load_on_demand) {\n                this.loadFolderOnDemand(node, slide, onFinished);\n            } else {\n                let parent = node.parent;\n\n                while (parent) {\n                    // nb: do not open root element\n                    if (parent.parent) {\n                        doOpenNode(parent, false, null);\n                    }\n                    parent = parent.parent;\n                }\n\n                doOpenNode(node, slide, onFinished);\n                this.saveState();\n            }\n        }\n    }\n\n    /*\n    Redraw the tree or part of the tree.\n     from_node: redraw this subtree\n    */\n    public _refreshElements(fromNode: Node | null): void {\n        const mustSetFocus = this.selectNodeHandler.isFocusOnTree();\n        const mustSelect = fromNode\n            ? this.isSelectedNodeInSubtree(fromNode)\n            : false;\n\n        this.renderer.render(fromNode);\n\n        if (mustSelect) {\n            this.selectCurrentNode(mustSetFocus);\n        }\n\n        this._triggerEvent(\"tree.refresh\");\n    }\n\n    public _getNodeElementForNode(node: Node): NodeElement {\n        if (node.isFolder()) {\n            return new FolderElement(node, this);\n        } else {\n            return new NodeElement(node, this);\n        }\n    }\n\n    public _getNodeElement($element: JQuery<HTMLElement>): NodeElement | null {\n        const node = this.getNode($element);\n        if (node) {\n            return this._getNodeElementForNode(node);\n        } else {\n            return null;\n        }\n    }\n\n    public _containsElement(element: HTMLElement): boolean {\n        const node = this.getNode(jQuery(element));\n\n        return node != null && node.tree === this.tree;\n    }\n\n    public _getScrollLeft(): number {\n        return this.scrollHandler.getScrollLeft();\n    }\n\n    public init(): void {\n        super.init();\n\n        this.element = this.$el;\n        this.isInitialized = false;\n\n        this.options.rtl = this.getRtlOption();\n\n        if (this.options.closedIcon == null) {\n            this.options.closedIcon = this.getDefaultClosedIcon();\n        }\n\n        this.renderer = new ElementsRenderer(this);\n        this.dataLoader = new DataLoader(this);\n        this.saveStateHandler = new SaveStateHandler(this);\n        this.selectNodeHandler = new SelectNodeHandler(this);\n        this.dndHandler = new DragAndDropHandler(this);\n        this.scrollHandler = new ScrollHandler(this);\n        this.keyHandler = new KeyHandler(this);\n\n        this.initData();\n\n        this.element.on(\"click\", this.handleClick);\n        this.element.on(\"dblclick\", this.handleDblclick);\n\n        if (this.options.useContextMenu) {\n            this.element.on(\"contextmenu\", this.handleContextmenu);\n        }\n    }\n\n    public deinit(): void {\n        this.element.empty();\n        this.element.off();\n\n        this.keyHandler.deinit();\n\n        this.tree = new Node({}, true);\n\n        super.deinit();\n    }\n\n    protected mouseCapture(positionInfo: PositionInfo): boolean | null {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseCapture(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStart(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStart(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseDrag(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            const result = this.dndHandler.mouseDrag(positionInfo);\n\n            this.scrollHandler.checkScrolling();\n            return result;\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStop(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStop(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected getMouseDelay(): number {\n        return this.options.startDndDelay ?? 0;\n    }\n\n    private initData(): void {\n        if (this.options.data) {\n            this.doLoadData(this.options.data, null);\n        } else {\n            const dataUrl = this.getDataUrlInfo(null);\n\n            if (dataUrl) {\n                this.doLoadDataFromUrl(null, null, null);\n            } else {\n                this.doLoadData([], null);\n            }\n        }\n    }\n\n    private getDataUrlInfo(node: Node | null): JQuery.AjaxSettings | null {\n        const dataUrl =\n            this.options.dataUrl || (this.element.data(\"url\") as string | null);\n\n        const getUrlFromString = (url: string): JQuery.AjaxSettings => {\n            const urlInfo: JQuery.AjaxSettings = { url };\n\n            setUrlInfoData(urlInfo);\n\n            return urlInfo;\n        };\n\n        const setUrlInfoData = (urlInfo: JQuery.AjaxSettings): void => {\n            if (node?.id) {\n                // Load on demand of a subtree; add node parameter\n                const data = { node: node.id };\n                urlInfo[\"data\"] = data;\n            } else {\n                // Add selected_node parameter\n                const selectedNodeId = this.getNodeIdToBeSelected();\n                if (selectedNodeId) {\n                    const data = { selected_node: selectedNodeId };\n                    urlInfo[\"data\"] = data;\n                }\n            }\n        };\n\n        if (typeof dataUrl === \"function\") {\n            return dataUrl(node);\n        } else if (typeof dataUrl === \"string\") {\n            return getUrlFromString(dataUrl);\n        } else if (dataUrl && typeof dataUrl === \"object\") {\n            setUrlInfoData(dataUrl);\n            return dataUrl;\n        } else {\n            return null;\n        }\n    }\n\n    private getNodeIdToBeSelected(): NodeId | null {\n        if (this.options.saveState) {\n            return this.saveStateHandler.getNodeIdToBeSelected();\n        } else {\n            return null;\n        }\n    }\n\n    private initTree(data: NodeData[]): void {\n        const doInit = (): void => {\n            if (!this.isInitialized) {\n                this.isInitialized = true;\n                this._triggerEvent(\"tree.init\");\n            }\n        };\n\n        if (!this.options.nodeClass) {\n            return;\n        }\n\n        this.tree = new this.options.nodeClass(\n            null,\n            true,\n            this.options.nodeClass\n        );\n\n        this.selectNodeHandler.clear();\n\n        this.tree.loadFromData(data);\n\n        const mustLoadOnDemand = this.setInitialState();\n\n        this._refreshElements(null);\n\n        if (!mustLoadOnDemand) {\n            doInit();\n        } else {\n            // Load data on demand and then init the tree\n            this.setInitialStateOnDemand(doInit);\n        }\n    }\n\n    // Set initial state, either by restoring the state or auto-opening nodes\n    // result: must load nodes on demand?\n    private setInitialState(): boolean {\n        const restoreState = (): [boolean, boolean] => {\n            // result: is state restored, must load on demand?\n            if (!this.options.saveState) {\n                return [false, false];\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return [false, false];\n                } else {\n                    const mustLoadOnDemand =\n                        this.saveStateHandler.setInitialState(state);\n\n                    // return true: the state is restored\n                    return [true, mustLoadOnDemand];\n                }\n            }\n        };\n\n        const autoOpenNodes = (): boolean => {\n            // result: must load on demand?\n            if (this.options.autoOpen === false) {\n                return false;\n            }\n\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let mustLoadOnDemand = false;\n\n            this.tree.iterate((node: Node, level: number) => {\n                if (node.load_on_demand) {\n                    mustLoadOnDemand = true;\n                    return false;\n                } else if (!node.hasChildren()) {\n                    return false;\n                } else {\n                    node.is_open = true;\n                    return level !== maxLevel;\n                }\n            });\n\n            return mustLoadOnDemand;\n        };\n\n        let [isRestored, mustLoadOnDemand] = restoreState(); // eslint-disable-line prefer-const\n\n        if (!isRestored) {\n            mustLoadOnDemand = autoOpenNodes();\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    // Set the initial state for nodes that are loaded on demand\n    // Call cb_finished when done\n    private setInitialStateOnDemand(cbFinished: () => void): void {\n        const restoreState = (): boolean => {\n            if (!this.options.saveState) {\n                return false;\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return false;\n                } else {\n                    this.saveStateHandler.setInitialStateOnDemand(\n                        state,\n                        cbFinished\n                    );\n\n                    return true;\n                }\n            }\n        };\n\n        const autoOpenNodes = (): void => {\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let loadingCount = 0;\n\n            const loadAndOpenNode = (node: Node): void => {\n                loadingCount += 1;\n                this._openNode(node, false, () => {\n                    loadingCount -= 1;\n                    openNodes();\n                });\n            };\n\n            const openNodes = (): void => {\n                this.tree.iterate((node: Node, level: number) => {\n                    if (node.load_on_demand) {\n                        if (!node.is_loading) {\n                            loadAndOpenNode(node);\n                        }\n\n                        return false;\n                    } else {\n                        this._openNode(node, false, null);\n\n                        return level !== maxLevel;\n                    }\n                });\n\n                if (loadingCount === 0) {\n                    cbFinished();\n                }\n            };\n\n            openNodes();\n        };\n\n        if (!restoreState()) {\n            autoOpenNodes();\n        }\n    }\n\n    private getAutoOpenMaxLevel(): number {\n        if (this.options.autoOpen === true) {\n            return -1;\n        } else if (typeof this.options.autoOpen === \"number\") {\n            return this.options.autoOpen;\n        } else if (typeof this.options.autoOpen === \"string\") {\n            return parseInt(this.options.autoOpen, 10);\n        } else {\n            return 0;\n        }\n    }\n\n    private handleClick = (\n        e: JQuery.ClickEvent<HTMLElement, any, HTMLElement, HTMLElement>\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget) {\n            if (clickTarget.type === \"button\") {\n                this.toggle(clickTarget.node, this.options.slide);\n\n                e.preventDefault();\n                e.stopPropagation();\n            } else if (clickTarget.type === \"label\") {\n                const node = clickTarget.node;\n                const event = this._triggerEvent(\"tree.click\", {\n                    node,\n                    click_event: e,\n                });\n\n                if (!event.isDefaultPrevented()) {\n                    this.doSelectNode(node);\n                }\n            }\n        }\n    };\n\n    private handleDblclick = (\n        e: JQuery.DoubleClickEvent<HTMLElement, any, HTMLElement, HTMLElement>\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget?.type === \"label\") {\n            this._triggerEvent(\"tree.dblclick\", {\n                node: clickTarget.node,\n                click_event: e,\n            });\n        }\n    };\n\n    private getClickTarget(element: EventTarget): ClickTarget | null {\n        const $target = jQuery(element);\n\n        const $button = $target.closest(\".jqtree-toggler\");\n\n        if ($button.length) {\n            const node = this.getNode($button as JQuery<HTMLElement>);\n\n            if (node) {\n                return {\n                    type: \"button\",\n                    node,\n                };\n            }\n        } else {\n            const $el = $target.closest(\".jqtree-element\");\n            if ($el.length) {\n                const node = this.getNode($el as JQuery<HTMLElement>);\n                if (node) {\n                    return {\n                        type: \"label\",\n                        node,\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    private getNode($element: JQuery<HTMLElement>): null | Node {\n        const $li = $element.closest(\"li.jqtree_common\");\n        if ($li.length === 0) {\n            return null;\n        } else {\n            return $li.data(\"node\") as Node;\n        }\n    }\n\n    private handleContextmenu = (\n        e: JQuery.ContextMenuEvent<HTMLElement, any, HTMLElement, HTMLElement>\n    ) => {\n        const $div = jQuery(e.target).closest(\"ul.jqtree-tree .jqtree-element\");\n        if ($div.length) {\n            const node = this.getNode($div);\n            if (node) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                this._triggerEvent(\"tree.contextmenu\", {\n                    node,\n                    click_event: e,\n                });\n                return false;\n            }\n        }\n\n        return null;\n    };\n\n    private saveState(): void {\n        if (this.options.saveState) {\n            this.saveStateHandler.saveState();\n        }\n    }\n\n    private selectCurrentNode(mustSetFocus: boolean): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            const nodeElement = this._getNodeElementForNode(node);\n            if (nodeElement) {\n                nodeElement.select(mustSetFocus);\n            }\n        }\n    }\n\n    private deselectCurrentNode(): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            this.removeFromSelection(node);\n        }\n    }\n\n    private getDefaultClosedIcon(): string {\n        if (this.options.rtl) {\n            // triangle to the left\n            return \"&#x25c0;\";\n        } else {\n            // triangle to the right\n            return \"&#x25ba;\";\n        }\n    }\n\n    private getRtlOption(): boolean {\n        if (this.options.rtl != null) {\n            return this.options.rtl;\n        } else {\n            const dataRtl = this.element.data(\"rtl\") as unknown;\n\n            if (\n                dataRtl !== null &&\n                dataRtl !== false &&\n                dataRtl !== undefined\n            ) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    private doSelectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions\n    ): void {\n        const saveState = (): void => {\n            if (this.options.saveState) {\n                this.saveStateHandler.saveState();\n            }\n        };\n\n        if (!node) {\n            // Called with empty node -> deselect current node\n            this.deselectCurrentNode();\n            saveState();\n            return;\n        }\n        const defaultOptions = { mustSetFocus: true, mustToggle: true };\n        const selectOptions = { ...defaultOptions, ...(optionsParam || {}) };\n\n        const canSelect = (): boolean => {\n            if (this.options.onCanSelectNode) {\n                return (\n                    this.options.selectable === true &&\n                    this.options.onCanSelectNode(node)\n                );\n            } else {\n                return this.options.selectable === true;\n            }\n        };\n\n        const openParents = (): void => {\n            const parent = node.parent;\n\n            if (parent && parent.parent && !parent.is_open) {\n                this.openNode(parent, false);\n            }\n        };\n\n        if (!canSelect()) {\n            return;\n        }\n\n        if (this.selectNodeHandler.isNodeSelected(node)) {\n            if (selectOptions.mustToggle) {\n                this.deselectCurrentNode();\n                this._triggerEvent(\"tree.select\", {\n                    node: null,\n                    previous_node: node,\n                });\n            }\n        } else {\n            const deselectedNode = this.getSelectedNode() || null;\n            this.deselectCurrentNode();\n            this.addToSelection(node, selectOptions.mustSetFocus);\n\n            this._triggerEvent(\"tree.select\", {\n                node,\n                deselected_node: deselectedNode,\n            });\n            openParents();\n        }\n\n        saveState();\n    }\n\n    private doLoadData(data: NodeData[] | null, parentNode: Node | null): void {\n        if (data) {\n            if (parentNode) {\n                this.deselectNodes(parentNode);\n                this.loadSubtree(data, parentNode);\n            } else {\n                this.initTree(data);\n            }\n\n            if (this.isDragging()) {\n                this.dndHandler.refresh();\n            }\n        }\n\n        this._triggerEvent(\"tree.load_data\", {\n            tree_data: data,\n            parent_node: parentNode,\n        });\n    }\n\n    private deselectNodes(parentNode: Node): void {\n        const selectedNodesUnderParent =\n            this.selectNodeHandler.getSelectedNodesUnder(parentNode);\n        for (const n of selectedNodesUnderParent) {\n            this.selectNodeHandler.removeFromSelection(n);\n        }\n    }\n\n    private loadSubtree(data: NodeData[], parentNode: Node): void {\n        parentNode.loadFromData(data);\n\n        parentNode.load_on_demand = false;\n        parentNode.is_loading = false;\n\n        this._refreshElements(parentNode);\n    }\n\n    private doLoadDataFromUrl(\n        urlInfoParam: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null\n    ): void {\n        const urlInfo = urlInfoParam || this.getDataUrlInfo(parentNode);\n\n        this.dataLoader.loadFromUrl(urlInfo, parentNode, onFinished);\n    }\n\n    private loadFolderOnDemand(\n        node: Node,\n        slide = true,\n        onFinished: OnFinishOpenNode | null\n    ): void {\n        node.is_loading = true;\n\n        this.doLoadDataFromUrl(null, node, () => {\n            this._openNode(node, slide, onFinished);\n        });\n    }\n}\n\nSimpleWidget.register(JqTreeWidget, \"tree\");\n"],"names":["Position","positionNames","before","Before","after","After","inside","Inside","none","None","getPositionName","position","name","Object","prototype","hasOwnProperty","call","isNodeRecordWithChildren","data","_typeof","Array","Node","o","arguments","length","undefined","isRoot","nodeClass","_classCallCheck","_defineProperty","this","isEmptyFolder","load_on_demand","setData","children","parent","idMapping","Map","tree","_createClass","key","value","removeChildren","_step","_iterator","_createForOfIteratorHelper","s","n","done","node","createNode","addChild","loadFromData","err","e","f","push","setParent","index","splice","doRemoveChild","indexOf","hasChildren","callback","_iterate","level","_step2","_iterator2","child","movedNode","targetNode","isParentOf","addChildAtPosition","getChildIndex","getDataFromNodes","nodes","map","tmpNode","k","v","getNodeByCallback","concat","result","iterate","nodeInfo","childIndex","newParent","_step3","originalParent","_iterator3","removeChild","nodeId","get","id","set","_this","_this$tree","removeNodeFromIndex","previousIndex","nextIndex","filter","nextSibling","getNextSibling","getNextNode","is_open","previousSibling","getPreviousSibling","getLastChild","getParent","lastChild","nodeData","_this2","addChildren","childrenData","_step4","_iterator4","initFromData","_this$tree2","addNodeToIndex","_this$tree3","_this$tree4","getNodeClass","DragAndDropHandler","treeWidget","hoveredArea","hitAreas","isDragging","currentItem","positionInfo","$element","jQuery","target","mustCaptureElement","options","onIsMoveHandle","nodeElement","_getNodeElement","onCanMove","_this$treeWidget$opti","pageX","pageY","refresh","offset","left","top","dragElement","DragElement","element","autoEscape","addClass","move","area","findHoveredArea","canMoveToArea","isFolder","stopOpenFolderTimer","mustOpenFolderTimer","startOpenFolderTimer","updateDropHint","removeDropHint","onDragMove","originalEvent","moveItem","clear","removeHover","removeHitAreas","removeClass","onDragStop","generateHitAreas","_getNodeElementForNode","hitAreasGenerator","HitAreasGenerator","getTreeDimensions","bottom","generate","is","onCanMoveTo","positionName","remove","previousGhost","x","y","dimensions","right","low","high","mid","addDropHint","folder","openFolderDelay","openFolderTimer","window","setTimeout","_openNode","slide","clearTimeout","previousParent","doMove","moveNode","empty","_refreshElements","_triggerEvent","move_info","moved_node","target_node","previous_parent","do_move","original_event","isDefaultPrevented","el","width","height","_getScrollLeft","_VisibleNodeIterator","_inherits","_super","_createSuper","currentNode","treeBottom","_this4","_assertThisInitialized","positions","lastTop","previousTop","group","generateHitAreasForGroup","addPosition","getTop","nextNode","positionsInGroup","positionCount","Math","min","areaHeight","round","areaTop","i","VisibleNodeIterator","_this3","isFirstNode","_iterateNode","mustIterateInside","handleFirstNode","handleOpenFolder","handleClosedFolder","handleNode","childrenLength","forEach","_","nextChild","handleAfterOpenFolder","nodeName","offsetX","offsetY","$tree","text","html","css","append","getBoolString","ElementsRenderer","openedIconElement","createButtonElement","openedIcon","closedIconElement","closedIcon","fromNode","renderFromNode","renderFromRoot","createDomElements","$previousLi","li","createLi","getLevel","attachNodeData","isRootNode","ul","createUl","appendChild","classString","role","rtl","dragAndDrop","document","createElement","className","setAttribute","isSelected","Boolean","selectNodeHandler","isNodeSelected","showEmptyFolder","createFolderLi","createNodeLi","onCreateLi","buttonClasses","getButtonClasses","folderClasses","getFolderClasses","iconElement","div","buttonLink","cloneNode","buttonLeft","titleSpan","createTitleSpan","liClasses","join","classes","tabIndex","setTreeItemAriaAttributes","textContent","innerHTML","is_loading","createTextNode","DataLoader","urlInfo","parentNode","onFinished","$el","getDomElement","addLoadingClass","notifyLoading","stopLoading","removeLoadingClass","submitRequest","loadData","parseData","jqXHR","onLoadFailed","isLoading","onLoading","urlInfoInput","handleSuccess","handleError","_ajaxSettings$method","ajaxSettings","_objectSpread","method","cache","dataType","success","error","url","toUpperCase","ajax","dataFilter","parsedData","JSON","parse","KeyHandler","canHandleKeyboard","selectedNode","getSelectedNode","which","DOWN","moveDown","UP","moveUp","RIGHT","moveRight","LEFT","moveLeft","keyboardSupport","on","handleKeyDown","off","selectNode","getNextVisibleNode","getPreviousVisibleNode","openNode","closeNode","scrollHandler","isScrolledIntoView","find","scrollToNode","isFocusOnTree","register","widgetClass","widgetName","getDataKey","getWidgetData","dataKey","widget","SimpleWidget","createWidget","init","fn","argument1","functionName","destroy","removeData","destroyWidget","_len","args","_key","widgetFunction","apply","callFunction","defaults","constructor","deinit","getPositionInfoFromMouseEvent","getPositionInfoFromTouch","touch","MouseWidget","_SimpleWidget","button","handleMouseDown","cancelable","preventDefault","handleMouseMove","handleMouseUp","touches","changedTouches","addEventListener","mouseDown","passive","touchStart","isMouseStarted","mouseDelayTimer","isMouseDelayMet","mouseDownInfo","removeEventListener","removeMouseMoveEventListeners","mouseCapture","handleStartMouse","mouseMove","touchMove","mouseUp","touchEnd","mouseDelay","getMouseDelay","startMouseDelayTimer","mouseDrag","mouseStart","mouseStop","SaveStateHandler","state","stringify","getState","onSetStateFromStorage","supportsLocalStorage","localStorage","setItem","getKeyName","jsonData","loadFromStorage","parseState","selectedNodeIds","openNodes","open_nodes","selected_node","getSelectedNodes","mustLoadOnDemand","openInitialNodes","resetSelection","selectInitialNodes","cbFinished","doSetInitialStateOnDemand","getStateFromStorage","onGetStateFromStorage","getItem","nodeIds","getNodeById","selectCount","addToSelection","removeFromSelection","nodeIdsParam","selectedNodes","loadingCount","newNodesIds","loadAndOpenNode","saveState","_supportsLocalStorage","sessionStorage","removeItem","testSupport","ScrollHandler","isInitialized","ensureInit","checkVerticalScrolling","checkHorizontalScrolling","$scrollParent","scrollTop","treeTop","elementBottom","viewBottom","elementTop","viewTop","elHeight","scrollParentTop","scrollLeft","_$scrollParent$","setDocumentAsScrollParent","cssAttributes","hasOverFlow","_i","_cssAttributes","attr","overflowValue","parents","getParentWithOverflow","tagName","initScrollParent","scrollParent","offsetHeight","refreshHitAreas","dndHandler","handleVerticalScrollingWithScrollParent","handleVerticalScrollingWithDocument","handleHorizontalScrollingWithParent","handleHorizontalScrollingWithDocument","scrollParentOffset","canScrollRight","clientWidth","scrollWidth","canScrollLeft","rightEdge","leftEdge","isNearRightEdge","isNearLeftEdge","max","$document","windowWidth","SelectNodeHandler","Set","selectedSingleNode","has","includeChildren","add","activeElement","_containsElement","NodeElement","mustShowBorderDropHint","BorderDropHint","GhostDropHint","mustSetFocus","getLi","$span","getSpan","trigger","removeAttr","FolderElement","_NodeElement","animationSpeed","$button","getButton","buttonEl","renderer","icon","doOpen","getUl","slideDown","show","doClose","slideUp","hide","$div","elWidth","outerHeight","$hint","$ghost","moveAfter","moveBefore","moveInsideOpenFolder","moveInside","_this$node$children$","childElement","NODE_PARAM_IS_EMPTY","PARAM_IS_EMPTY","JqTreeWidget","_MouseWidget","clickTarget","getClickTarget","type","toggle","stopPropagation","click_event","doSelectNode","closest","getNode","slideParam","Error","optionsParam","getData","doLoadData","param1","param2","param3","doLoadDataFromUrl","getNodeByName","getNodeByNameMustExist","getNodesByProperty","_parseParams","_this2$options$slide","parseParams","_parseParams2","_slicedToArray","close","newNodeInfo","existingNode","newNode","addAfter","addBefore","addParent","parentNodeParam","prepend","idIsChanged","subtree","positionIndex","saveStateHandler","select","deselect","nodeOffset","nodeTop","treeOffset","scrollToY","setInitialState","option","keyHandler","eventName","values","event","Event","doOpenNode","_node","_slide","_onFinished","open","loadFolderOnDemand","mustSelect","isSelectedNodeInSubtree","render","selectCurrentNode","getScrollLeft","_get","_getPrototypeOf","getRtlOption","getDefaultClosedIcon","dataLoader","initData","handleClick","handleDblclick","useContextMenu","handleContextmenu","checkScrolling","_this$options$startDn","startDndDelay","getDataUrlInfo","dataUrl","setUrlInfoData","selectedNodeId","getNodeIdToBeSelected","_this5","doInit","setInitialStateOnDemand","_this6","_restoreState2","restoreState","isRestored","autoOpen","maxLevel","getAutoOpenMaxLevel","autoOpenNodes","_this7","parseInt","$target","$li","dataRtl","_this8","deselectCurrentNode","selectOptions","mustToggle","onCanSelectNode","selectable","previous_node","deselectedNode","deselected_node","deselectNodes","loadSubtree","initTree","tree_data","parent_node","getSelectedNodesUnder","urlInfoParam","loadFromUrl","_this9"],"mappings":"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"}