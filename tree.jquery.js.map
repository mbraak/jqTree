{"version":3,"file":"tree.jquery.js","sources":["src/position.ts","src/dragAndDropHandler/dragElement.ts","src/util.ts","src/dragAndDropHandler/visibleNodeIterator.ts","src/dragAndDropHandler/hitAreasGenerator.ts","src/dragAndDropHandler/index.ts","src/elementsRenderer.ts","src/dataLoader.ts","src/keyHandler.ts","src/simple.widget.ts","src/mouse.widget.ts","src/saveStateHandler.ts","src/scrollHandler/containerScrollParent.ts","src/scrollHandler/documentScrollParent.ts","src/scrollHandler/createScrollParent.ts","src/scrollHandler.ts","src/selectNodeHandler.ts","src/nodeUtils.ts","src/node.ts","src/nodeElement/borderDropHint.ts","src/nodeElement/ghostDropHint.ts","src/nodeElement/index.ts","src/nodeElement/folderElement.ts","src/tree.jquery.ts","src/version.ts"],"sourcesContent":["export enum Position {\n    Before = 1,\n    After,\n    Inside,\n    None,\n}\n\nconst positionNames: Record<string, Position> = {\n    before: Position.Before,\n    after: Position.After,\n    inside: Position.Inside,\n    none: Position.None,\n};\n\nexport const getPositionName = (position: Position): string => {\n    for (const name in positionNames) {\n        if (Object.prototype.hasOwnProperty.call(positionNames, name)) {\n            if (positionNames[name] === position) {\n                return name;\n            }\n        }\n    }\n\n    return \"\";\n};\n\nexport const getPosition = (name: string): Position | undefined =>\n    positionNames[name];\n","interface DragElementParams {\n    autoEscape: boolean;\n    nodeName: string;\n    offsetX: number;\n    offsetY: number;\n    treeElement: HTMLElement;\n}\n\nclass DragElement {\n    private offsetX: number;\n    private offsetY: number;\n    private element: HTMLElement;\n\n    constructor({\n        autoEscape,\n        nodeName,\n        offsetX,\n        offsetY,\n        treeElement,\n    }: DragElementParams) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n\n        this.element = this.createElement(nodeName, autoEscape);\n\n        treeElement.appendChild(this.element);\n    }\n\n    public move(pageX: number, pageY: number): void {\n        this.element.style.left = `${pageX - this.offsetX}px`;\n        this.element.style.top = `${pageY - this.offsetY}px`;\n    }\n\n    public remove(): void {\n        this.element.remove();\n    }\n\n    private createElement(nodeName: string, autoEscape: boolean) {\n        const element = document.createElement(\"span\");\n        element.classList.add(\"jqtree-title\", \"jqtree-dragging\");\n\n        if (autoEscape) {\n            element.textContent = nodeName;\n        } else {\n            element.innerHTML = nodeName;\n        }\n\n        element.style.position = \"absolute\";\n\n        return element;\n    }\n}\n\nexport default DragElement;\n","export const isInt = (n: unknown): boolean =>\n    typeof n === \"number\" && n % 1 === 0;\n\nexport const isFunction = (v: unknown): boolean => typeof v === \"function\";\n\nexport const getBoolString = (value: unknown): string =>\n    value ? \"true\" : \"false\";\n\nexport const getOffsetTop = (element: HTMLElement) =>\n    getElementPosition(element).top;\n\nexport const getElementPosition = (element: HTMLElement) => {\n    const rect = element.getBoundingClientRect();\n\n    return {\n        left: rect.x + window.scrollX,\n        top: rect.y + window.scrollY,\n    };\n};\n","import { Node } from \"../node\";\n\nabstract class VisibleNodeIterator {\n    private tree: Node;\n\n    constructor(tree: Node) {\n        this.tree = tree;\n    }\n\n    protected iterate(): void {\n        let isFirstNode = true;\n\n        const _iterateNode = (node: Node, nextNode: Node | null): void => {\n            let mustIterateInside =\n                (node.is_open || !node.element) && node.hasChildren();\n\n            let element: HTMLElement | null = null;\n\n            // Is the element visible?\n            if (node.element?.offsetParent) {\n                element = node.element;\n\n                if (isFirstNode) {\n                    this.handleFirstNode(node);\n                    isFirstNode = false;\n                }\n\n                if (!node.hasChildren()) {\n                    this.handleNode(node, nextNode, node.element);\n                } else if (node.is_open) {\n                    if (!this.handleOpenFolder(node, node.element)) {\n                        mustIterateInside = false;\n                    }\n                } else {\n                    this.handleClosedFolder(node, nextNode, element);\n                }\n            }\n\n            if (mustIterateInside) {\n                const childrenLength = node.children.length;\n                node.children.forEach((_, i) => {\n                    const child = node.children[i];\n\n                    if (child) {\n                        if (i === childrenLength - 1) {\n                            _iterateNode(child, null);\n                        } else {\n                            const nextChild = node.children[i + 1];\n\n                            if (nextChild) {\n                                _iterateNode(child, nextChild);\n                            }\n                        }\n                    }\n                });\n\n                if (node.is_open && element) {\n                    this.handleAfterOpenFolder(node, nextNode);\n                }\n            }\n        };\n\n        _iterateNode(this.tree, null);\n    }\n\n    protected abstract handleNode(\n        node: Node,\n        nextNode: Node | null,\n        element: HTMLElement,\n    ): void;\n\n    /*\n    override\n    return\n        - true: continue iterating\n        - false: stop iterating\n    */\n    protected abstract handleOpenFolder(\n        node: Node,\n        element: HTMLElement,\n    ): boolean;\n\n    protected abstract handleClosedFolder(\n        node: Node,\n        nextNode: Node | null,\n        element: HTMLElement,\n    ): void;\n\n    protected abstract handleAfterOpenFolder(\n        node: Node,\n        nextNode: Node | null,\n    ): void;\n\n    protected abstract handleFirstNode(node: Node): void;\n}\n\nexport default VisibleNodeIterator;\n","import { HitArea } from \"./types\";\nimport { Node } from \"../node\";\nimport { Position } from \"../position\";\nimport { getOffsetTop } from \"../util\";\nimport VisibleNodeIterator from \"./visibleNodeIterator\";\n\nclass HitAreasGenerator extends VisibleNodeIterator {\n    private currentNode: Node;\n    private treeBottom: number;\n    private positions: HitArea[];\n    private lastTop: number;\n\n    constructor(tree: Node, currentNode: Node, treeBottom: number) {\n        super(tree);\n\n        this.currentNode = currentNode;\n        this.treeBottom = treeBottom;\n    }\n\n    public generate(): HitArea[] {\n        this.positions = [];\n        this.lastTop = 0;\n\n        this.iterate();\n\n        return this.generateHitAreas(this.positions);\n    }\n\n    protected generateHitAreas(positions: HitArea[]): HitArea[] {\n        let previousTop = positions[0]?.top ?? 0;\n        let group = [];\n        const hitAreas: HitArea[] = [];\n\n        for (const position of positions) {\n            if (position.top !== previousTop && group.length) {\n                this.generateHitAreasForGroup(\n                    hitAreas,\n                    group,\n                    previousTop,\n                    position.top,\n                );\n\n                previousTop = position.top;\n                group = [];\n            }\n\n            group.push(position);\n        }\n\n        this.generateHitAreasForGroup(\n            hitAreas,\n            group,\n            previousTop,\n            this.treeBottom,\n        );\n\n        return hitAreas;\n    }\n\n    protected handleOpenFolder(node: Node, element: HTMLElement): boolean {\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            // Stop iterating\n            return false;\n        }\n\n        // Cannot move before current item\n        if (node.children[0] !== this.currentNode) {\n            this.addPosition(node, Position.Inside, getOffsetTop(element));\n        }\n\n        // Continue iterating\n        return true;\n    }\n\n    protected handleClosedFolder(\n        node: Node,\n        nextNode: Node,\n        element: HTMLElement,\n    ): void {\n        const top = getOffsetTop(element);\n\n        if (node === this.currentNode) {\n            // Cannot move after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n\n            // Cannot move before current item\n            if (nextNode !== this.currentNode) {\n                this.addPosition(node, Position.After, top);\n            }\n        }\n    }\n\n    protected handleFirstNode(node: Node): void {\n        if (node !== this.currentNode) {\n            this.addPosition(node, Position.Before, getOffsetTop(node.element));\n        }\n    }\n\n    protected handleAfterOpenFolder(node: Node, nextNode: Node): void {\n        if (node === this.currentNode || nextNode === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, this.lastTop);\n        } else {\n            this.addPosition(node, Position.After, this.lastTop);\n        }\n    }\n\n    protected handleNode(\n        node: Node,\n        nextNode: Node,\n        element: HTMLElement,\n    ): void {\n        const top = getOffsetTop(element);\n\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n        }\n\n        if (nextNode === this.currentNode || node === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.After, top);\n        }\n    }\n\n    private addPosition(node: Node, position: number, top: number): void {\n        const area = {\n            top,\n            bottom: 0,\n            node,\n            position,\n        };\n\n        this.positions.push(area);\n        this.lastTop = top;\n    }\n\n    private generateHitAreasForGroup(\n        hitAreas: HitArea[],\n        positionsInGroup: HitArea[],\n        top: number,\n        bottom: number,\n    ): void {\n        // limit positions in group\n        const positionCount = Math.min(positionsInGroup.length, 4);\n\n        const areaHeight = Math.round((bottom - top) / positionCount);\n        let areaTop = top;\n\n        let i = 0;\n        while (i < positionCount) {\n            const position = positionsInGroup[i];\n\n            if (position) {\n                hitAreas.push({\n                    top: areaTop,\n                    bottom: areaTop + areaHeight,\n                    node: position.node,\n                    position: position.position,\n                });\n            }\n\n            areaTop += areaHeight;\n            i += 1;\n        }\n    }\n}\n\nexport default HitAreasGenerator;\n","import { Node } from \"../node\";\nimport { getPositionName, Position } from \"../position\";\nimport { DropHint, HitArea } from \"./types\";\nimport { PositionInfo } from \"../mouseWidgetTypes\";\nimport NodeElement from \"../nodeElement\";\nimport DragElement from \"./dragElement\";\nimport HitAreasGenerator from \"./hitAreasGenerator\";\nimport { getElementPosition } from \"../util\";\nimport {\n    OnCanMove,\n    OnCanMoveTo,\n    OnIsMoveHandle,\n    DragMethod,\n} from \"../jqtreeOptions\";\nimport {\n    GetTree,\n    OpenNode,\n    RefreshElements,\n    TriggerEvent,\n} from \"../jqtreeMethodTypes\";\n\ninterface Dimensions {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n}\n\ntype GetNodeElement = (element: HTMLElement) => NodeElement | null;\ntype GetNodeElementForNode = (node: Node) => NodeElement;\n\ninterface DragAndDropHandlerParams {\n    autoEscape?: boolean;\n    getNodeElement: GetNodeElement;\n    getNodeElementForNode: GetNodeElementForNode;\n    getTree: GetTree;\n    onCanMove?: OnCanMove;\n    onCanMoveTo?: OnCanMoveTo;\n    onDragMove?: DragMethod;\n    onDragStop?: DragMethod;\n    onIsMoveHandle?: OnIsMoveHandle;\n    openFolderDelay: number | false;\n    openNode: OpenNode;\n    refreshElements: RefreshElements;\n    slide: boolean;\n    treeElement: HTMLElement;\n    triggerEvent: TriggerEvent;\n}\n\nexport class DragAndDropHandler {\n    public hitAreas: HitArea[];\n    public isDragging: boolean;\n    public currentItem: NodeElement | null;\n    public hoveredArea: HitArea | null;\n\n    private autoEscape?: boolean;\n    private dragElement: DragElement | null;\n    private getNodeElement: GetNodeElement;\n    private getNodeElementForNode: GetNodeElementForNode;\n    private getTree: GetTree;\n    private onCanMove?: OnCanMove;\n    private onCanMoveTo?: OnCanMoveTo;\n    private onDragMove?: DragMethod;\n    private onDragStop?: DragMethod;\n    private onIsMoveHandle?: OnIsMoveHandle;\n    private openFolderDelay: number | false;\n    private openFolderTimer: number | null;\n    private openNode: OpenNode;\n    private previousGhost: DropHint | null;\n    private refreshElements: RefreshElements;\n    private slide: boolean;\n    private treeElement: HTMLElement;\n    private triggerEvent: TriggerEvent;\n\n    constructor({\n        autoEscape,\n        getNodeElement,\n        getNodeElementForNode,\n        getTree,\n        onCanMove,\n        onCanMoveTo,\n        onDragMove,\n        onDragStop,\n        onIsMoveHandle,\n        openNode,\n        refreshElements,\n        slide,\n        treeElement,\n        triggerEvent,\n    }: DragAndDropHandlerParams) {\n        this.autoEscape = autoEscape;\n        this.getNodeElement = getNodeElement;\n        this.getNodeElementForNode = getNodeElementForNode;\n        this.getTree = getTree;\n        this.onCanMove = onCanMove;\n        this.onCanMoveTo = onCanMoveTo;\n        this.onDragMove = onDragMove;\n        this.onDragStop = onDragStop;\n        this.onIsMoveHandle = onIsMoveHandle;\n        this.openNode = openNode;\n        this.refreshElements = refreshElements;\n        this.slide = slide;\n        this.treeElement = treeElement;\n        this.triggerEvent = triggerEvent;\n\n        this.hoveredArea = null;\n        this.hitAreas = [];\n        this.isDragging = false;\n        this.currentItem = null;\n    }\n\n    public mouseCapture(positionInfo: PositionInfo): boolean | null {\n        const element = positionInfo.target;\n\n        if (!this.mustCaptureElement(element)) {\n            return null;\n        }\n\n        if (this.onIsMoveHandle && !this.onIsMoveHandle(jQuery(element))) {\n            return null;\n        }\n\n        let nodeElement = this.getNodeElement(element);\n\n        if (nodeElement && this.onCanMove) {\n            if (!this.onCanMove(nodeElement.node)) {\n                nodeElement = null;\n            }\n        }\n\n        this.currentItem = nodeElement;\n        return this.currentItem != null;\n    }\n\n    public mouseStart(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.refresh();\n\n        const { left, top } = getElementPosition(positionInfo.target);\n\n        const node = this.currentItem.node;\n\n        this.dragElement = new DragElement({\n            autoEscape: this.autoEscape ?? true,\n            nodeName: node.name,\n            offsetX: positionInfo.pageX - left,\n            offsetY: positionInfo.pageY - top,\n            treeElement: this.treeElement,\n        });\n\n        this.isDragging = true;\n        this.currentItem.element.classList.add(\"jqtree-moving\");\n\n        return true;\n    }\n\n    public mouseDrag(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            !this.dragElement ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.dragElement.move(positionInfo.pageX, positionInfo.pageY);\n\n        const area = this.findHoveredArea(\n            positionInfo.pageX,\n            positionInfo.pageY,\n        );\n\n        if (area && this.canMoveToArea(area)) {\n            if (!area.node.isFolder()) {\n                this.stopOpenFolderTimer();\n            }\n\n            if (this.hoveredArea !== area) {\n                this.hoveredArea = area;\n\n                // If this is a closed folder, start timer to open it\n                if (this.mustOpenFolderTimer(area)) {\n                    this.startOpenFolderTimer(area.node);\n                } else {\n                    this.stopOpenFolderTimer();\n                }\n\n                this.updateDropHint();\n            }\n        } else {\n            this.removeDropHint();\n            this.stopOpenFolderTimer();\n            this.hoveredArea = area;\n        }\n\n        if (!area) {\n            if (this.onDragMove) {\n                this.onDragMove(\n                    this.currentItem.node,\n                    positionInfo.originalEvent,\n                );\n            }\n        }\n\n        return true;\n    }\n\n    public mouseStop(positionInfo: PositionInfo): boolean {\n        this.moveItem(positionInfo);\n        this.clear();\n        this.removeHover();\n        this.removeDropHint();\n        this.removeHitAreas();\n\n        const currentItem = this.currentItem;\n\n        if (this.currentItem) {\n            this.currentItem.element.classList.remove(\"jqtree-moving\");\n            this.currentItem = null;\n        }\n\n        this.isDragging = false;\n\n        if (!this.hoveredArea && currentItem) {\n            if (this.onDragStop) {\n                this.onDragStop(currentItem.node, positionInfo.originalEvent);\n            }\n        }\n\n        return false;\n    }\n\n    public refresh(): void {\n        this.removeHitAreas();\n\n        if (this.currentItem) {\n            this.generateHitAreas();\n\n            this.currentItem = this.getNodeElementForNode(\n                this.currentItem.node,\n            );\n\n            if (this.isDragging) {\n                this.currentItem.element.classList.add(\"jqtree-moving\");\n            }\n        }\n    }\n\n    private generateHitAreas(): void {\n        const tree = this.getTree();\n\n        if (!this.currentItem || !tree) {\n            this.hitAreas = [];\n        } else {\n            const hitAreasGenerator = new HitAreasGenerator(\n                tree,\n                this.currentItem.node,\n                this.getTreeDimensions().bottom,\n            );\n            this.hitAreas = hitAreasGenerator.generate();\n        }\n    }\n\n    private mustCaptureElement(element: HTMLElement): boolean {\n        const nodeName = element.nodeName;\n\n        return (\n            nodeName !== \"INPUT\" &&\n            nodeName !== \"SELECT\" &&\n            nodeName !== \"TEXTAREA\"\n        );\n    }\n\n    private canMoveToArea(area: HitArea): boolean {\n        if (!this.onCanMoveTo) {\n            return true;\n        }\n\n        if (!this.currentItem) {\n            return false;\n        }\n\n        const positionName = getPositionName(area.position);\n\n        return this.onCanMoveTo(this.currentItem.node, area.node, positionName);\n    }\n\n    private removeHitAreas(): void {\n        this.hitAreas = [];\n    }\n\n    private clear(): void {\n        if (this.dragElement) {\n            this.dragElement.remove();\n            this.dragElement = null;\n        }\n    }\n\n    private removeDropHint(): void {\n        if (this.previousGhost) {\n            this.previousGhost.remove();\n        }\n    }\n\n    private removeHover(): void {\n        this.hoveredArea = null;\n    }\n\n    private findHoveredArea(x: number, y: number): HitArea | null {\n        const dimensions = this.getTreeDimensions();\n\n        if (\n            x < dimensions.left ||\n            y < dimensions.top ||\n            x > dimensions.right ||\n            y > dimensions.bottom\n        ) {\n            return null;\n        }\n\n        let low = 0;\n        let high = this.hitAreas.length;\n        while (low < high) {\n            const mid = (low + high) >> 1;\n            const area = this.hitAreas[mid];\n\n            if (!area) {\n                return null;\n            }\n\n            if (y < area.top) {\n                high = mid;\n            } else if (y > area.bottom) {\n                low = mid + 1;\n            } else {\n                return area;\n            }\n        }\n\n        return null;\n    }\n\n    private mustOpenFolderTimer(area: HitArea): boolean {\n        const node = area.node;\n\n        return (\n            node.isFolder() &&\n            !node.is_open &&\n            area.position === Position.Inside\n        );\n    }\n\n    private updateDropHint(): void {\n        if (!this.hoveredArea) {\n            return;\n        }\n\n        // remove previous drop hint\n        this.removeDropHint();\n\n        // add new drop hint\n        const nodeElement = this.getNodeElementForNode(this.hoveredArea.node);\n        this.previousGhost = nodeElement.addDropHint(this.hoveredArea.position);\n    }\n\n    private startOpenFolderTimer(folder: Node): void {\n        const openFolder = (): void => {\n            this.openNode(folder, this.slide, () => {\n                this.refresh();\n                this.updateDropHint();\n            });\n        };\n\n        this.stopOpenFolderTimer();\n\n        const openFolderDelay = this.openFolderDelay;\n\n        if (openFolderDelay !== false) {\n            this.openFolderTimer = window.setTimeout(\n                openFolder,\n                openFolderDelay,\n            );\n        }\n    }\n\n    private stopOpenFolderTimer(): void {\n        if (this.openFolderTimer) {\n            clearTimeout(this.openFolderTimer);\n            this.openFolderTimer = null;\n        }\n    }\n\n    private moveItem(positionInfo: PositionInfo): void {\n        if (\n            this.currentItem &&\n            this.hoveredArea &&\n            this.hoveredArea.position !== Position.None &&\n            this.canMoveToArea(this.hoveredArea)\n        ) {\n            const movedNode = this.currentItem.node;\n            const targetNode = this.hoveredArea.node;\n            const position = this.hoveredArea.position;\n            const previousParent = movedNode.parent;\n\n            if (position === Position.Inside) {\n                this.hoveredArea.node.is_open = true;\n            }\n\n            const doMove = (): void => {\n                const tree = this.getTree();\n\n                if (tree) {\n                    tree.moveNode(movedNode, targetNode, position);\n\n                    this.treeElement.textContent = \"\";\n                    this.refreshElements(null);\n                }\n            };\n\n            const event = this.triggerEvent(\"tree.move\", {\n                move_info: {\n                    moved_node: movedNode,\n                    target_node: targetNode,\n                    position: getPositionName(position),\n                    previous_parent: previousParent,\n                    do_move: doMove,\n                    original_event: positionInfo.originalEvent,\n                },\n            });\n\n            if (!event.isDefaultPrevented()) {\n                doMove();\n            }\n        }\n    }\n\n    private getTreeDimensions(): Dimensions {\n        // Return the dimensions of the tree. Add a margin to the bottom to allow\n        // to drag-and-drop after the last element.\n        const { left, top } = getElementPosition(this.treeElement);\n\n        return {\n            left,\n            top,\n            right: left + this.treeElement.clientWidth,\n            bottom: top + this.treeElement.clientHeight + 16,\n        };\n    }\n}\n","import { getBoolString } from \"./util\";\nimport { Node } from \"./node\";\nimport { IconElement, OnCreateLi } from \"./jqtreeOptions\";\nimport { GetTree, IsNodeSelected } from \"./jqtreeMethodTypes\";\n\ninterface ElementsRendererParams {\n    autoEscape: boolean;\n    buttonLeft: boolean;\n    closedIcon?: IconElement;\n    dragAndDrop: boolean;\n    $element: JQuery<HTMLElement>;\n    getTree: GetTree;\n    isNodeSelected: IsNodeSelected;\n    onCreateLi?: OnCreateLi;\n    openedIcon?: IconElement;\n    rtl?: boolean;\n    showEmptyFolder: boolean;\n    tabIndex?: number;\n}\n\nexport default class ElementsRenderer {\n    public openedIconElement?: HTMLElement | Text;\n    public closedIconElement?: HTMLElement | Text;\n    private autoEscape: boolean;\n    private buttonLeft: boolean;\n    private dragAndDrop: boolean;\n    private $element: JQuery<HTMLElement>;\n    private getTree: GetTree;\n    private isNodeSelected: IsNodeSelected;\n    private onCreateLi?: OnCreateLi;\n    private rtl?: boolean;\n    private showEmptyFolder: boolean;\n    private tabIndex?: number;\n\n    constructor({\n        autoEscape,\n        buttonLeft,\n        closedIcon,\n        onCreateLi,\n        dragAndDrop,\n        $element,\n        getTree,\n        isNodeSelected,\n        openedIcon,\n        rtl,\n        showEmptyFolder,\n        tabIndex,\n    }: ElementsRendererParams) {\n        this.autoEscape = autoEscape;\n        this.buttonLeft = buttonLeft;\n        this.dragAndDrop = dragAndDrop;\n        this.$element = $element;\n        this.getTree = getTree;\n        this.isNodeSelected = isNodeSelected;\n        this.onCreateLi = onCreateLi;\n        this.rtl = rtl;\n        this.showEmptyFolder = showEmptyFolder;\n        this.tabIndex = tabIndex;\n        this.openedIconElement = this.createButtonElement(openedIcon || \"+\");\n        this.closedIconElement = this.createButtonElement(closedIcon || \"-\");\n    }\n\n    public render(fromNode: Node | null): void {\n        if (fromNode && fromNode.parent) {\n            this.renderFromNode(fromNode);\n        } else {\n            this.renderFromRoot();\n        }\n    }\n\n    public renderFromRoot(): void {\n        this.$element.empty();\n\n        const tree = this.getTree();\n\n        if (this.$element[0] && tree) {\n            this.createDomElements(this.$element[0], tree.children, true, 1);\n        }\n    }\n\n    public renderFromNode(node: Node): void {\n        // remember current li\n        const $previousLi = jQuery(node.element);\n\n        // create element\n        const li = this.createLi(node, node.getLevel());\n        this.attachNodeData(node, li);\n\n        // add element to dom\n        $previousLi.after(li);\n\n        // remove previous li\n        $previousLi.remove();\n\n        // create children\n        if (node.children) {\n            this.createDomElements(\n                li,\n                node.children,\n                false,\n                node.getLevel() + 1,\n            );\n        }\n    }\n\n    private createDomElements(\n        element: Element,\n        children: Node[],\n        isRootNode: boolean,\n        level: number,\n    ): void {\n        const ul = this.createUl(isRootNode);\n        element.appendChild(ul);\n\n        for (const child of children) {\n            const li = this.createLi(child, level);\n            ul.appendChild(li);\n\n            this.attachNodeData(child, li);\n\n            if (child.hasChildren()) {\n                this.createDomElements(li, child.children, false, level + 1);\n            }\n        }\n    }\n\n    private attachNodeData(node: Node, li: HTMLElement): void {\n        node.element = li;\n        jQuery(li).data(\"node\", node);\n    }\n\n    private createUl(isRootNode: boolean): HTMLUListElement {\n        let classString;\n        let role;\n\n        if (!isRootNode) {\n            classString = \"\";\n            role = \"group\";\n        } else {\n            classString = \"jqtree-tree\";\n            role = \"tree\";\n\n            if (this.rtl) {\n                classString += \" jqtree-rtl\";\n            }\n        }\n\n        if (this.dragAndDrop) {\n            classString += \" jqtree-dnd\";\n        }\n\n        const ul = document.createElement(\"ul\");\n        ul.className = `jqtree_common ${classString}`;\n\n        ul.setAttribute(\"role\", role);\n\n        return ul;\n    }\n\n    private createLi(node: Node, level: number): HTMLLIElement {\n        const isSelected = Boolean(this.isNodeSelected(node));\n\n        const mustShowFolder =\n            node.isFolder() || (node.isEmptyFolder && this.showEmptyFolder);\n\n        const li = mustShowFolder\n            ? this.createFolderLi(node, level, isSelected)\n            : this.createNodeLi(node, level, isSelected);\n\n        if (this.onCreateLi) {\n            this.onCreateLi(node, jQuery(li), isSelected);\n        }\n\n        return li;\n    }\n\n    private setTreeItemAriaAttributes(\n        element: HTMLElement,\n        name: string,\n        level: number,\n        isSelected: boolean,\n    ) {\n        element.setAttribute(\"aria-label\", name);\n        element.setAttribute(\"aria-level\", `${level}`);\n        element.setAttribute(\"aria-selected\", getBoolString(isSelected));\n        element.setAttribute(\"role\", \"treeitem\");\n    }\n\n    private createFolderLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const buttonClasses = this.getButtonClasses(node);\n        const folderClasses = this.getFolderClasses(node, isSelected);\n\n        const iconElement = node.is_open\n            ? this.openedIconElement\n            : this.closedIconElement;\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = `jqtree_common ${folderClasses}`;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // button link\n        const buttonLink = document.createElement(\"a\");\n        buttonLink.className = buttonClasses;\n\n        if (iconElement) {\n            buttonLink.appendChild(iconElement.cloneNode(true));\n        }\n\n        if (this.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            true,\n            level,\n        );\n        titleSpan.setAttribute(\"aria-expanded\", getBoolString(node.is_open));\n        div.appendChild(titleSpan);\n\n        if (!this.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        return li;\n    }\n\n    private createNodeLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const liClasses = [\"jqtree_common\"];\n\n        if (isSelected) {\n            liClasses.push(\"jqtree-selected\");\n        }\n\n        const classString = liClasses.join(\" \");\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = classString;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            false,\n            level,\n        );\n        div.appendChild(titleSpan);\n\n        return li;\n    }\n\n    private createTitleSpan(\n        nodeName: string,\n        isSelected: boolean,\n        isFolder: boolean,\n        level: number,\n    ): HTMLSpanElement {\n        const titleSpan = document.createElement(\"span\");\n\n        let classes = \"jqtree-title jqtree_common\";\n\n        if (isFolder) {\n            classes += \" jqtree-title-folder\";\n        }\n\n        classes += ` jqtree-title-button-${this.buttonLeft ? \"left\" : \"right\"}`;\n\n        titleSpan.className = classes;\n\n        if (isSelected) {\n            const tabIndex = this.tabIndex;\n\n            if (tabIndex !== undefined) {\n                titleSpan.setAttribute(\"tabindex\", `${tabIndex}`);\n            }\n        }\n\n        this.setTreeItemAriaAttributes(titleSpan, nodeName, level, isSelected);\n\n        if (this.autoEscape) {\n            titleSpan.textContent = nodeName;\n        } else {\n            titleSpan.innerHTML = nodeName;\n        }\n\n        return titleSpan;\n    }\n\n    private getButtonClasses(node: Node): string {\n        const classes = [\"jqtree-toggler\", \"jqtree_common\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (this.buttonLeft) {\n            classes.push(\"jqtree-toggler-left\");\n        } else {\n            classes.push(\"jqtree-toggler-right\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private getFolderClasses(node: Node, isSelected: boolean): string {\n        const classes = [\"jqtree-folder\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (isSelected) {\n            classes.push(\"jqtree-selected\");\n        }\n\n        if (node.is_loading) {\n            classes.push(\"jqtree-loading\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private createButtonElement(\n        value: IconElement,\n    ): HTMLElement | Text | undefined {\n        if (typeof value === \"string\") {\n            // convert value to html\n            const div = document.createElement(\"div\");\n            div.innerHTML = value;\n\n            return document.createTextNode(div.innerHTML);\n        } else if (value == null) {\n            return undefined;\n        } else if ((value as HTMLElement).nodeType) {\n            return value as HTMLElement;\n        } else {\n            return jQuery(value)[0];\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { DataFilter, OnLoadFailed, OnLoading } from \"./jqtreeOptions\";\nimport { LoadData, TriggerEvent } from \"./jqtreeMethodTypes\";\n\nexport type HandleFinishedLoading = () => void;\n\ninterface DataLoaderParams {\n    dataFilter?: DataFilter;\n    loadData: LoadData;\n    onLoadFailed?: OnLoadFailed;\n    onLoading?: OnLoading;\n    $treeElement: JQuery<HTMLElement>;\n    triggerEvent: TriggerEvent;\n}\n\nexport default class DataLoader {\n    private dataFilter?: DataFilter;\n    private loadData: LoadData;\n    private onLoadFailed?: OnLoadFailed;\n    private onLoading?: OnLoading;\n    private $treeElement: JQuery<HTMLElement>;\n    private triggerEvent: TriggerEvent;\n\n    constructor({\n        dataFilter,\n        loadData,\n        onLoadFailed,\n        onLoading,\n        $treeElement,\n        triggerEvent,\n    }: DataLoaderParams) {\n        this.dataFilter = dataFilter;\n        this.loadData = loadData;\n        this.onLoadFailed = onLoadFailed;\n        this.onLoading = onLoading;\n        this.$treeElement = $treeElement;\n        this.triggerEvent = triggerEvent;\n    }\n\n    public loadFromUrl(\n        urlInfo: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null,\n    ): void {\n        if (!urlInfo) {\n            return;\n        }\n\n        const $el = this.getDomElement(parentNode);\n        this.addLoadingClass($el);\n        this.notifyLoading(true, parentNode, $el);\n\n        const stopLoading = (): void => {\n            this.removeLoadingClass($el);\n            this.notifyLoading(false, parentNode, $el);\n        };\n\n        const handleSuccess = (data: string | NodeData[]): void => {\n            stopLoading();\n            this.loadData(this.parseData(data), parentNode);\n\n            if (onFinished && typeof onFinished === \"function\") {\n                onFinished();\n            }\n        };\n\n        const handleError = (jqXHR: JQuery.jqXHR): void => {\n            stopLoading();\n\n            if (this.onLoadFailed) {\n                this.onLoadFailed(jqXHR);\n            }\n        };\n\n        this.submitRequest(urlInfo, handleSuccess, handleError);\n    }\n\n    private addLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.addClass(\"jqtree-loading\");\n        }\n    }\n\n    private removeLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.removeClass(\"jqtree-loading\");\n        }\n    }\n\n    private getDomElement(parentNode: Node | null): JQuery<HTMLElement> {\n        if (parentNode) {\n            return jQuery(parentNode.element);\n        } else {\n            return this.$treeElement;\n        }\n    }\n\n    private notifyLoading(\n        isLoading: boolean,\n        node: Node | null,\n        $el: JQuery,\n    ): void {\n        if (this.onLoading) {\n            this.onLoading(isLoading, node, $el);\n        }\n\n        this.triggerEvent(\"tree.loading_data\", {\n            isLoading,\n            node,\n            $el,\n        });\n    }\n\n    private submitRequest(\n        urlInfoInput: string | JQuery.AjaxSettings,\n        handleSuccess: JQuery.Ajax.SuccessCallback<any>,\n        handleError: JQuery.Ajax.ErrorCallback<any>,\n    ): void {\n        const urlInfo =\n            typeof urlInfoInput === \"string\"\n                ? { url: urlInfoInput }\n                : urlInfoInput;\n\n        const ajaxSettings: JQuery.AjaxSettings = {\n            method: \"GET\",\n            cache: false,\n            dataType: \"json\",\n            success: handleSuccess,\n            error: handleError,\n            ...urlInfo,\n        };\n\n        ajaxSettings.method = ajaxSettings.method?.toUpperCase() || \"GET\";\n\n        void jQuery.ajax(ajaxSettings);\n    }\n\n    private parseData(data: string | NodeData[]): NodeData[] {\n        const getParsedData = () => {\n            if (typeof data === \"string\") {\n                return JSON.parse(data) as NodeData[];\n            } else {\n                return data;\n            }\n        };\n\n        const parsedData = getParsedData();\n\n        if (this.dataFilter) {\n            return this.dataFilter(parsedData);\n        } else {\n            return parsedData;\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport {\n    CloseNode,\n    GetSelectedNode,\n    IsFocusOnTree,\n    OpenNode,\n    SelectNode,\n} from \"./jqtreeMethodTypes\";\n\ntype KeyboardEventHandler = (event: KeyboardEvent) => boolean;\n\ninterface KeyHandlerParams {\n    closeNode: CloseNode;\n    getSelectedNode: GetSelectedNode;\n    isFocusOnTree: IsFocusOnTree;\n    keyboardSupport: boolean;\n    openNode: OpenNode;\n    selectNode: SelectNode;\n}\n\nexport default class KeyHandler {\n    private closeNode: CloseNode;\n    private getSelectedNode: GetSelectedNode;\n    private handleKeyDownHandler?: KeyboardEventHandler;\n    private isFocusOnTree: IsFocusOnTree;\n    private keyboardSupport: boolean;\n    private openNode: OpenNode;\n    private originalSelectNode: SelectNode;\n\n    constructor({\n        closeNode,\n        getSelectedNode,\n        isFocusOnTree,\n        keyboardSupport,\n        openNode,\n        selectNode,\n    }: KeyHandlerParams) {\n        this.closeNode = closeNode;\n        this.getSelectedNode = getSelectedNode;\n        this.isFocusOnTree = isFocusOnTree;\n        this.keyboardSupport = keyboardSupport;\n        this.openNode = openNode;\n        this.originalSelectNode = selectNode;\n\n        if (keyboardSupport) {\n            this.handleKeyDownHandler = this.handleKeyDown.bind(this);\n\n            document.addEventListener(\"keydown\", this.handleKeyDownHandler);\n        }\n    }\n\n    public deinit(): void {\n        if (this.handleKeyDownHandler) {\n            document.removeEventListener(\"keydown\", this.handleKeyDownHandler);\n        }\n    }\n\n    public moveDown(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getNextVisibleNode());\n    }\n\n    public moveUp(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getPreviousVisibleNode());\n    }\n\n    public moveRight(selectedNode: Node): boolean {\n        if (!selectedNode.isFolder()) {\n            return true;\n        } else {\n            // folder node\n            if (selectedNode.is_open) {\n                // Right moves to the first child of an open node\n                return this.selectNode(selectedNode.getNextVisibleNode());\n            } else {\n                // Right expands a closed node\n                this.openNode(selectedNode);\n                return false;\n            }\n        }\n    }\n\n    public moveLeft(selectedNode: Node): boolean {\n        if (selectedNode.isFolder() && selectedNode.is_open) {\n            // Left on an open node closes the node\n            this.closeNode(selectedNode);\n            return false;\n        } else {\n            // Left on a closed or end node moves focus to the node's parent\n            return this.selectNode(selectedNode.getParent());\n        }\n    }\n\n    public selectNode(node: Node | null): boolean {\n        if (!node) {\n            return true;\n        } else {\n            this.originalSelectNode(node);\n\n            return false;\n        }\n    }\n\n    private handleKeyDown = (e: KeyboardEvent): boolean => {\n        if (!this.canHandleKeyboard()) {\n            return true;\n        }\n\n        const selectedNode = this.getSelectedNode();\n        if (!selectedNode) {\n            return true;\n        }\n\n        switch (e.key) {\n            case \"ArrowDown\":\n                return this.moveDown(selectedNode);\n\n            case \"ArrowUp\":\n                return this.moveUp(selectedNode);\n\n            case \"ArrowRight\":\n                return this.moveRight(selectedNode);\n\n            case \"ArrowLeft\":\n                return this.moveLeft(selectedNode);\n\n            default:\n                return true;\n        }\n    };\n\n    private canHandleKeyboard(): boolean {\n        return this.keyboardSupport && this.isFocusOnTree();\n    }\n}\n","const register = (widgetClass: unknown, widgetName: string): void => {\n    const getDataKey = (): string => `simple_widget_${widgetName}`;\n\n    const getWidgetData = (\n        el: HTMLElement,\n        dataKey: string\n    ): SimpleWidget<unknown> | null => {\n        const widget = jQuery.data(el, dataKey) as unknown;\n\n        if (widget && widget instanceof SimpleWidget) {\n            return widget;\n        } else {\n            return null;\n        }\n    };\n\n    const createWidget = ($el: JQuery, options: unknown): JQuery => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const existingWidget = getWidgetData(el, dataKey);\n\n            if (!existingWidget) {\n                const simpleWidgetClass = widgetClass as typeof SimpleWidget;\n                const widget = new simpleWidgetClass(el, options);\n\n                if (!jQuery.data(el, dataKey)) {\n                    jQuery.data(el, dataKey, widget);\n                }\n\n                // Call init after setting data, so we can call methods\n                widget.init();\n            }\n        }\n\n        return $el;\n    };\n\n    const destroyWidget = ($el: JQuery): void => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const widget = getWidgetData(el, dataKey);\n\n            if (widget) {\n                widget.destroy();\n            }\n\n            jQuery.removeData(el, dataKey);\n        }\n    };\n\n    const callFunction = (\n        $el: JQuery,\n        functionName: string,\n        args: unknown[]\n    ): unknown => {\n        let result = null;\n\n        for (const el of $el.get()) {\n            const widget = jQuery.data(el, getDataKey()) as unknown;\n\n            if (widget && widget instanceof SimpleWidget) {\n                const simpleWidget = widget as SimpleWidget<unknown>;\n                const widgetFunction = simpleWidget[functionName];\n\n                if (widgetFunction && typeof widgetFunction === \"function\") {\n                    result = widgetFunction.apply(widget, args) as unknown;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (jQuery.fn as any)[widgetName] = function (\n        this: JQuery,\n        argument1: unknown,\n        ...args: unknown[]\n    ) {\n        if (!argument1) {\n            return createWidget(this, null);\n        } else if (typeof argument1 === \"object\") {\n            const options = argument1 as unknown;\n            return createWidget(this, options);\n        } else if (typeof argument1 === \"string\" && argument1[0] !== \"_\") {\n            const functionName = argument1;\n\n            if (functionName === \"destroy\") {\n                return destroyWidget(this);\n            } else if (functionName === \"get_widget_class\") {\n                return widgetClass;\n            } else {\n                return callFunction(this, functionName, args);\n            }\n        } else {\n            return undefined;\n        }\n    };\n};\n\nexport default class SimpleWidget<WidgetOptions> {\n    public static register(widgetClass: unknown, widgetName: string): void {\n        register(widgetClass, widgetName);\n    }\n\n    [key: string]: unknown;\n\n    protected static defaults: unknown = {};\n\n    public options: WidgetOptions;\n\n    public $el: JQuery<HTMLElement>;\n\n    constructor(el: HTMLElement, options: WidgetOptions) {\n        this.$el = jQuery(el);\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const defaults = (this.constructor as any)[\"defaults\"] as WidgetOptions;\n        this.options = { ...defaults, ...options };\n    }\n\n    public destroy(): void {\n        this.deinit();\n    }\n\n    public init(): void {\n        //\n    }\n\n    public deinit(): void {\n        //\n    }\n}\n","/*\nThis widget does the same a the mouse widget in jqueryui.\n*/\nimport SimpleWidget from \"./simple.widget\";\nimport { PositionInfo } from \"./mouseWidgetTypes\";\n\nconst getPositionInfoFromMouseEvent = (e: MouseEvent): PositionInfo => ({\n    pageX: e.pageX,\n    pageY: e.pageY,\n    target: e.target as HTMLElement,\n    originalEvent: e,\n});\n\nconst getPositionInfoFromTouch = (\n    touch: Touch,\n    e: TouchEvent,\n): PositionInfo => ({\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    target: touch.target as HTMLElement,\n    originalEvent: e,\n});\n\nabstract class MouseWidget<WidgetOptions> extends SimpleWidget<WidgetOptions> {\n    protected isMouseStarted: boolean;\n    protected mouseDownInfo: PositionInfo | null;\n    private mouseDelayTimer: number | null;\n    private isMouseDelayMet: boolean;\n\n    public init(): void {\n        const element = this.$el.get(0);\n\n        if (element) {\n            element.addEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n            element.addEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.isMouseStarted = false;\n        this.mouseDelayTimer = null;\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n    }\n\n    public deinit(): void {\n        const el = this.$el.get(0);\n\n        if (el) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.removeMouseMoveEventListeners();\n    }\n\n    protected abstract mouseCapture(positionInfo: PositionInfo): boolean | null;\n\n    protected abstract mouseStart(positionInfo: PositionInfo): boolean;\n\n    protected abstract mouseDrag(positionInfo: PositionInfo): void;\n\n    protected abstract mouseStop(positionInfo: PositionInfo): void;\n\n    protected abstract getMouseDelay(): number;\n\n    private mouseDown = (e: MouseEvent): void => {\n        // Left mouse button?\n        if (e.button !== 0) {\n            return;\n        }\n\n        const result = this.handleMouseDown(getPositionInfoFromMouseEvent(e));\n\n        if (result && e.cancelable) {\n            e.preventDefault();\n        }\n    };\n\n    private handleMouseDown(positionInfo: PositionInfo): boolean {\n        // We may have missed mouseup (out of window)\n        if (this.isMouseStarted) {\n            this.handleMouseUp(positionInfo);\n        }\n\n        this.mouseDownInfo = positionInfo;\n\n        if (!this.mouseCapture(positionInfo)) {\n            return false;\n        }\n\n        this.handleStartMouse();\n\n        return true;\n    }\n\n    private handleStartMouse(): void {\n        document.addEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        document.addEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        document.addEventListener(\"mouseup\", this.mouseUp, { passive: false });\n        document.addEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n\n        const mouseDelay = this.getMouseDelay();\n\n        if (mouseDelay) {\n            this.startMouseDelayTimer(mouseDelay);\n        } else {\n            this.isMouseDelayMet = true;\n        }\n    }\n\n    private startMouseDelayTimer(mouseDelay: number): void {\n        if (this.mouseDelayTimer) {\n            clearTimeout(this.mouseDelayTimer);\n        }\n\n        this.mouseDelayTimer = window.setTimeout(() => {\n            if (this.mouseDownInfo) {\n                this.isMouseDelayMet = true;\n            }\n        }, mouseDelay);\n\n        this.isMouseDelayMet = false;\n    }\n\n    private mouseMove = (e: MouseEvent): void => {\n        this.handleMouseMove(e, getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseMove(\n        e: MouseEvent | TouchEvent,\n        positionInfo: PositionInfo,\n    ): void {\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n            return;\n        }\n\n        if (!this.isMouseDelayMet) {\n            return;\n        }\n\n        if (this.mouseDownInfo) {\n            this.isMouseStarted = this.mouseStart(this.mouseDownInfo) !== false;\n        }\n\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n        } else {\n            this.handleMouseUp(positionInfo);\n        }\n    }\n\n    private mouseUp = (e: MouseEvent): void => {\n        this.handleMouseUp(getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseUp(positionInfo: PositionInfo): void {\n        this.removeMouseMoveEventListeners();\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n\n        if (this.isMouseStarted) {\n            this.isMouseStarted = false;\n            this.mouseStop(positionInfo);\n        }\n    }\n\n    private removeMouseMoveEventListeners() {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mouseup\", this.mouseUp, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n    }\n\n    private touchStart = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseDown(getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchMove = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseMove(e, getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchEnd = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseUp(getPositionInfoFromTouch(touch, e));\n    };\n}\n\nexport default MouseWidget;\n","import { isInt } from \"./util\";\nimport { Node } from \"./node\";\nimport { OnGetStateFromStorage, OnSetStateFromStorage } from \"./jqtreeOptions\";\nimport {\n    AddToSelection,\n    GetNodeById,\n    GetSelectedNodes,\n    GetTree,\n    OpenNode,\n    RefreshElements,\n    RemoveFromSelection,\n} from \"./jqtreeMethodTypes\";\n\nexport interface SavedState {\n    open_nodes: NodeId[];\n    selected_node: NodeId[];\n}\n\ninterface SaveStateHandlerParams {\n    addToSelection: AddToSelection;\n    getNodeById: GetNodeById;\n    getSelectedNodes: GetSelectedNodes;\n    getTree: GetTree;\n    onGetStateFromStorage?: OnGetStateFromStorage;\n    onSetStateFromStorage?: OnSetStateFromStorage;\n    openNode: OpenNode;\n    refreshElements: RefreshElements;\n    removeFromSelection: RemoveFromSelection;\n    saveState: boolean | string;\n}\n\nexport default class SaveStateHandler {\n    private addToSelection: AddToSelection;\n    private getNodeById: GetNodeById;\n    private getSelectedNodes: GetSelectedNodes;\n    private getTree: GetTree;\n    private onGetStateFromStorage?: OnGetStateFromStorage;\n    private onSetStateFromStorage?: OnSetStateFromStorage;\n    private openNode: OpenNode;\n    private refreshElements: RefreshElements;\n    private removeFromSelection: RemoveFromSelection;\n    private saveStateOption: boolean | string;\n    private _supportsLocalStorage: boolean | null;\n\n    constructor({\n        addToSelection,\n        getNodeById,\n        getSelectedNodes,\n        getTree,\n        onGetStateFromStorage,\n        onSetStateFromStorage,\n        openNode,\n        refreshElements,\n        removeFromSelection,\n        saveState,\n    }: SaveStateHandlerParams) {\n        this.addToSelection = addToSelection;\n        this.getNodeById = getNodeById;\n        this.getSelectedNodes = getSelectedNodes;\n        this.getTree = getTree;\n        this.onGetStateFromStorage = onGetStateFromStorage;\n        this.onSetStateFromStorage = onSetStateFromStorage;\n        this.openNode = openNode;\n        this.refreshElements = refreshElements;\n        this.removeFromSelection = removeFromSelection;\n        this.saveStateOption = saveState;\n    }\n\n    public saveState(): void {\n        const state = JSON.stringify(this.getState());\n\n        if (this.onSetStateFromStorage) {\n            this.onSetStateFromStorage(state);\n        } else if (this.supportsLocalStorage()) {\n            localStorage.setItem(this.getKeyName(), state);\n        }\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        const jsonData = this.loadFromStorage();\n\n        if (jsonData) {\n            return this.parseState(jsonData) as unknown as SavedState;\n        } else {\n            return null;\n        }\n    }\n\n    public getState(): SavedState {\n        const getOpenNodeIds = (): NodeId[] => {\n            const openNodes: NodeId[] = [];\n\n            this.getTree()?.iterate((node: Node) => {\n                if (node.is_open && node.id && node.hasChildren()) {\n                    openNodes.push(node.id);\n                }\n                return true;\n            });\n\n            return openNodes;\n        };\n\n        const getSelectedNodeIds = (): NodeId[] => {\n            const selectedNodeIds: NodeId[] = [];\n\n            this.getSelectedNodes().forEach((node) => {\n                if (node.id != null) {\n                    selectedNodeIds.push(node.id);\n                }\n            });\n\n            return selectedNodeIds;\n        };\n\n        return {\n            open_nodes: getOpenNodeIds(),\n            selected_node: getSelectedNodeIds(),\n        };\n    }\n\n    /*\n    Set initial state\n    Don't handle nodes that are loaded on demand\n\n    result: must load on demand\n    */\n    public setInitialState(state: SavedState): boolean {\n        if (!state) {\n            return false;\n        } else {\n            let mustLoadOnDemand = false;\n\n            if (state.open_nodes) {\n                mustLoadOnDemand = this.openInitialNodes(state.open_nodes);\n            }\n\n            if (state.selected_node) {\n                this.resetSelection();\n                this.selectInitialNodes(state.selected_node);\n            }\n\n            return mustLoadOnDemand;\n        }\n    }\n\n    public setInitialStateOnDemand(\n        state: SavedState,\n        cbFinished: () => void,\n    ): void {\n        if (state) {\n            this.doSetInitialStateOnDemand(\n                state.open_nodes,\n                state.selected_node,\n                cbFinished,\n            );\n        } else {\n            cbFinished();\n        }\n    }\n\n    public getNodeIdToBeSelected(): NodeId | null {\n        const state = this.getStateFromStorage();\n\n        if (state && state.selected_node) {\n            return state.selected_node[0] || null;\n        } else {\n            return null;\n        }\n    }\n\n    private parseState(jsonData: string): SavedState {\n        const state = JSON.parse(jsonData) as Record<string, unknown>;\n\n        // Check if selected_node is an int (instead of an array)\n        if (state && state.selected_node && isInt(state.selected_node)) {\n            // Convert to array\n            state.selected_node = [state.selected_node];\n        }\n\n        return state as unknown as SavedState;\n    }\n\n    private loadFromStorage(): string | null {\n        if (this.onGetStateFromStorage) {\n            return this.onGetStateFromStorage();\n        } else if (this.supportsLocalStorage()) {\n            return localStorage.getItem(this.getKeyName());\n        } else {\n            return null;\n        }\n    }\n\n    private openInitialNodes(nodeIds: NodeId[]): boolean {\n        let mustLoadOnDemand = false;\n\n        for (const nodeId of nodeIds) {\n            const node = this.getNodeById(nodeId);\n\n            if (node) {\n                if (!node.load_on_demand) {\n                    node.is_open = true;\n                } else {\n                    mustLoadOnDemand = true;\n                }\n            }\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    private selectInitialNodes(nodeIds: NodeId[]): boolean {\n        let selectCount = 0;\n\n        for (const nodeId of nodeIds) {\n            const node = this.getNodeById(nodeId);\n\n            if (node) {\n                selectCount += 1;\n\n                this.addToSelection(node);\n            }\n        }\n\n        return selectCount !== 0;\n    }\n\n    private resetSelection(): void {\n        const selectedNodes = this.getSelectedNodes();\n\n        selectedNodes.forEach((node) => {\n            this.removeFromSelection(node);\n        });\n    }\n\n    private doSetInitialStateOnDemand(\n        nodeIdsParam: NodeId[],\n        selectedNodes: NodeId[],\n        cbFinished: () => void,\n    ): void {\n        let loadingCount = 0;\n        let nodeIds = nodeIdsParam;\n\n        const openNodes = (): void => {\n            const newNodesIds = [];\n\n            for (const nodeId of nodeIds) {\n                const node = this.getNodeById(nodeId);\n\n                if (!node) {\n                    newNodesIds.push(nodeId);\n                } else {\n                    if (!node.is_loading) {\n                        if (node.load_on_demand) {\n                            loadAndOpenNode(node);\n                        } else {\n                            this.openNode(node, false);\n                        }\n                    }\n                }\n            }\n\n            nodeIds = newNodesIds;\n\n            if (this.selectInitialNodes(selectedNodes)) {\n                this.refreshElements(null);\n            }\n\n            if (loadingCount === 0) {\n                cbFinished();\n            }\n        };\n\n        const loadAndOpenNode = (node: Node): void => {\n            loadingCount += 1;\n            this.openNode(node, false, () => {\n                loadingCount -= 1;\n                openNodes();\n            });\n        };\n\n        openNodes();\n    }\n\n    private getKeyName(): string {\n        if (typeof this.saveStateOption === \"string\") {\n            return this.saveStateOption;\n        } else {\n            return \"tree\";\n        }\n    }\n\n    private supportsLocalStorage(): boolean {\n        const testSupport = (): boolean => {\n            // Is local storage supported?\n            if (localStorage == null) {\n                return false;\n            } else {\n                // Check if it's possible to store an item. Safari does not allow this in private browsing mode.\n                try {\n                    const key = \"_storage_test\";\n                    sessionStorage.setItem(key, \"value\");\n                    sessionStorage.removeItem(key);\n                } catch (error) {\n                    return false;\n                }\n\n                return true;\n            }\n        };\n\n        if (this._supportsLocalStorage == null) {\n            this._supportsLocalStorage = testSupport();\n        }\n\n        return this._supportsLocalStorage;\n    }\n}\n","import type { ScrollParent } from \"./types\";\nimport { getElementPosition, getOffsetTop } from '../util'\n\ntype HorizontalScrollDirection = \"left\" | \"right\";\ntype VerticalScrollDirection = \"bottom\" | \"top\";\n\ninterface Params {\n    container: HTMLElement;\n    refreshHitAreas: () => void;\n}\n\nexport default class ContainerScrollParent implements ScrollParent {\n    private container: HTMLElement;\n    private horizontalScrollDirection?: HorizontalScrollDirection;\n    private horizontalScrollTimeout?: number;\n    private refreshHitAreas: () => void;\n    private scrollParentBottom?: number;\n    private scrollParentTop?: number;\n    private verticalScrollTimeout?: number;\n    private verticalScrollDirection?: VerticalScrollDirection;\n\n    constructor({ container, refreshHitAreas }: Params) {\n        this.container = container;\n        this.refreshHitAreas = refreshHitAreas;\n    }\n\n    public checkHorizontalScrolling(pageX: number): void {\n        const newHorizontalScrollDirection =\n            this.getNewHorizontalScrollDirection(pageX);\n\n        if (this.horizontalScrollDirection !== newHorizontalScrollDirection) {\n            this.horizontalScrollDirection = newHorizontalScrollDirection;\n\n            if (this.horizontalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n            }\n\n            if (newHorizontalScrollDirection) {\n                this.horizontalScrollTimeout = window.setTimeout(\n                    this.scrollHorizontally.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public checkVerticalScrolling(pageY: number) {\n        const newVerticalScrollDirection =\n            this.getNewVerticalScrollDirection(pageY);\n\n        if (this.verticalScrollDirection !== newVerticalScrollDirection) {\n            this.verticalScrollDirection = newVerticalScrollDirection;\n\n            if (this.verticalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n                this.verticalScrollTimeout = undefined;\n            }\n\n            if (newVerticalScrollDirection) {\n                this.verticalScrollTimeout = window.setTimeout(\n                    this.scrollVertically.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public getScrollLeft(): number {\n        return this.container.scrollLeft;\n    }\n\n    public scrollToY(top: number): void {\n        this.container.scrollTop = top;\n    }\n\n    public stopScrolling() {\n        this.horizontalScrollDirection = undefined;\n        this.verticalScrollDirection = undefined;\n        this.scrollParentTop = undefined;\n        this.scrollParentBottom = undefined;\n    }\n\n    private getNewHorizontalScrollDirection(\n        pageX: number,\n    ): HorizontalScrollDirection | undefined {\n        const scrollParentOffset = getElementPosition(this.container);\n\n        const rightEdge = scrollParentOffset.left + this.container.clientWidth;\n        const leftEdge = scrollParentOffset.left;\n        const isNearRightEdge = pageX > rightEdge - 20;\n        const isNearLeftEdge = pageX < leftEdge + 20;\n\n        if (isNearRightEdge) {\n            return \"right\";\n        } else if (isNearLeftEdge) {\n            return \"left\";\n        }\n\n        return undefined;\n    }\n\n    private getNewVerticalScrollDirection(\n        pageY: number,\n    ): VerticalScrollDirection | undefined {\n        if (pageY < this.getScrollParentTop()) {\n            return \"top\";\n        }\n\n        if (pageY > this.getScrollParentBottom()) {\n            return \"bottom\";\n        }\n\n        return undefined;\n    }\n\n    private scrollHorizontally() {\n        if (!this.horizontalScrollDirection) {\n            return;\n        }\n\n        const distance = this.horizontalScrollDirection === \"left\" ? -20 : 20;\n\n        this.container.scrollBy({\n            left: distance,\n            top: 0,\n            behavior: \"instant\",\n        });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollHorizontally.bind(this), 40);\n    }\n\n    private scrollVertically() {\n        if (!this.verticalScrollDirection) {\n            return;\n        }\n\n        const distance = this.verticalScrollDirection === \"top\" ? -20 : 20;\n\n        this.container.scrollBy({\n            left: 0,\n            top: distance,\n            behavior: \"instant\",\n        });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollVertically.bind(this), 40);\n    }\n\n    private getScrollParentTop() {\n        if (this.scrollParentTop == null) {\n            this.scrollParentTop = getOffsetTop(this.container)\n        }\n\n        return this.scrollParentTop;\n    }\n\n    private getScrollParentBottom() {\n        if (this.scrollParentBottom == null) {\n            this.scrollParentBottom = this.getScrollParentTop() + this.container.clientHeight;\n        }\n\n        return this.scrollParentBottom;\n    }\n}\n","import type { ScrollParent } from \"./types\";\nimport { getOffsetTop } from '../util'\n\ntype HorizontalScrollDirection = \"left\" | \"right\";\ntype VerticalScrollDirection = \"bottom\" | \"top\";\n\ninterface Params {\n    refreshHitAreas: () => void;\n    treeElement: HTMLElement;\n}\n\nexport default class DocumentScrollParent implements ScrollParent {\n    private documentScrollHeight?: number;\n    private documentScrollWidth?: number;\n    private horizontalScrollDirection?: HorizontalScrollDirection;\n    private horizontalScrollTimeout?: number;\n    private refreshHitAreas: () => void;\n    private treeElement: HTMLElement;\n    private verticalScrollDirection?: VerticalScrollDirection;\n    private verticalScrollTimeout?: number;\n\n    constructor({ refreshHitAreas, treeElement }: Params) {\n        this.refreshHitAreas = refreshHitAreas;\n        this.treeElement = treeElement;\n    }\n\n    public checkHorizontalScrolling(pageX: number): void {\n        const newHorizontalScrollDirection =\n            this.getNewHorizontalScrollDirection(pageX);\n\n        if (this.horizontalScrollDirection !== newHorizontalScrollDirection) {\n            this.horizontalScrollDirection = newHorizontalScrollDirection;\n\n            if (this.horizontalScrollTimeout != null) {\n                window.clearTimeout(this.horizontalScrollTimeout);\n            }\n\n            if (newHorizontalScrollDirection) {\n                this.horizontalScrollTimeout = window.setTimeout(\n                    this.scrollHorizontally.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public checkVerticalScrolling(pageY: number) {\n        const newVerticalScrollDirection =\n            this.getNewVerticalScrollDirection(pageY);\n\n        if (this.verticalScrollDirection !== newVerticalScrollDirection) {\n            this.verticalScrollDirection = newVerticalScrollDirection;\n\n            if (this.verticalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n                this.verticalScrollTimeout = undefined;\n            }\n\n            if (newVerticalScrollDirection) {\n                this.verticalScrollTimeout = window.setTimeout(\n                    this.scrollVertically.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public getScrollLeft(): number {\n        return document.documentElement.scrollLeft;\n    }\n\n    public scrollToY(top: number): void {\n        const treeTop = getOffsetTop(this.treeElement);\n\n        document.documentElement.scrollTop = top + treeTop;\n    }\n\n    public stopScrolling() {\n        this.horizontalScrollDirection = undefined;\n        this.verticalScrollDirection = undefined;\n        this.documentScrollHeight = undefined;\n        this.documentScrollWidth = undefined;\n    }\n\n    private getNewHorizontalScrollDirection(\n        pageX: number,\n    ): HorizontalScrollDirection | undefined {\n        const scrollLeft = document.documentElement.scrollLeft;\n        const windowWidth = window.innerWidth;\n\n        const isNearRightEdge = pageX > windowWidth - 20;\n        const isNearLeftEdge = pageX - scrollLeft < 20;\n\n        if (isNearRightEdge && this.canScrollRight()) {\n            return \"right\";\n        }\n\n        if (isNearLeftEdge) {\n            return \"left\";\n        }\n\n        return undefined;\n    }\n\n    private canScrollRight() {\n        const documentElement = document.documentElement;\n\n        return (\n            documentElement.scrollLeft + documentElement.clientWidth <\n            this.getDocumentScrollWidth()\n        );\n    }\n\n    private canScrollDown() {\n        const documentElement = document.documentElement;\n\n        return (\n            documentElement.scrollTop + documentElement.clientHeight <\n            this.getDocumentScrollHeight()\n        );\n    }\n\n    private getDocumentScrollHeight() {\n        // Store the original scroll height because the scroll height can increase when the drag element is moved beyond the scroll height.\n        if (this.documentScrollHeight == null) {\n            this.documentScrollHeight = document.documentElement.scrollHeight;\n        }\n\n        return this.documentScrollHeight;\n    }\n\n    private getDocumentScrollWidth() {\n        // Store the original scroll width because the scroll width can increase when the drag element is moved beyond the scroll width.\n        if (this.documentScrollWidth == null) {\n            this.documentScrollWidth = document.documentElement.scrollWidth;\n        }\n\n        return this.documentScrollWidth;\n    }\n\n    private getNewVerticalScrollDirection(\n        pageY: number,\n    ): VerticalScrollDirection | undefined {\n        const scrollTop = jQuery(document).scrollTop() || 0;\n        const distanceTop = pageY - scrollTop;\n\n        if (distanceTop < 20) {\n            return \"top\";\n        }\n\n        const windowHeight = window.innerHeight;\n\n        if (windowHeight - (pageY - scrollTop) < 20 && this.canScrollDown()) {\n            return \"bottom\";\n        }\n\n        return undefined;\n    }\n\n    private scrollHorizontally() {\n        if (!this.horizontalScrollDirection) {\n            return;\n        }\n\n        const distance = this.horizontalScrollDirection === \"left\" ? -20 : 20;\n        window.scrollBy({ left: distance, top: 0, behavior: \"instant\" });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollHorizontally.bind(this), 40);\n    }\n\n    private scrollVertically() {\n        if (!this.verticalScrollDirection) {\n            return;\n        }\n\n        const distance = this.verticalScrollDirection === \"top\" ? -20 : 20;\n        window.scrollBy({ left: 0, top: distance, behavior: \"instant\" });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollVertically.bind(this), 40);\n    }\n}\n","import type { ScrollParent } from \"./types\";\nimport ContainerScrollParent from \"./containerScrollParent\";\nimport DocumentScrollParent from \"./documentScrollParent\";\n\nconst isOverflow = (overflowValue: string) =>\n    overflowValue === \"auto\" || overflowValue === \"scroll\";\n\nconst hasOverFlow = (element: HTMLElement): boolean => {\n    const style = getComputedStyle(element);\n\n    return isOverflow(style.overflowX) || isOverflow(style.overflowY);\n};\n\nconst getParentWithOverflow = (\n    treeElement: HTMLElement,\n): HTMLElement | null => {\n    if (hasOverFlow(treeElement)) {\n        return treeElement;\n    }\n\n    let parent = treeElement.parentElement;\n\n    while (parent) {\n        if (hasOverFlow(parent)) {\n            return parent;\n        }\n\n        parent = parent.parentElement;\n    }\n\n    return null;\n};\n\nconst createScrollParent = (\n    treeElement: HTMLElement,\n    refreshHitAreas: () => void,\n): ScrollParent => {\n    const container = getParentWithOverflow(treeElement);\n\n    if (container && container.tagName !== \"HTML\") {\n        return new ContainerScrollParent({\n            container,\n            refreshHitAreas,\n        });\n    } else {\n        return new DocumentScrollParent({ refreshHitAreas, treeElement });\n    }\n};\n\nexport default createScrollParent;\n","import { PositionInfo } from \"./mouseWidgetTypes\";\nimport { ScrollParent } from \"./scrollHandler/types\";\nimport createScrollParent from \"./scrollHandler/createScrollParent\";\n\ninterface ScrollHandlerParams {\n    refreshHitAreas: () => void;\n    treeElement: HTMLElement;\n}\n\nexport default class ScrollHandler {\n    private refreshHitAreas: () => void;\n    private scrollParent?: ScrollParent;\n    private treeElement: HTMLElement;\n\n    constructor({ refreshHitAreas, treeElement }: ScrollHandlerParams) {\n        this.refreshHitAreas = refreshHitAreas;\n        this.scrollParent = undefined;\n        this.treeElement = treeElement;\n    }\n\n    public checkScrolling(positionInfo: PositionInfo): void {\n        this.checkVerticalScrolling(positionInfo);\n        this.checkHorizontalScrolling(positionInfo);\n    }\n\n    public stopScrolling() {\n        this.getScrollParent().stopScrolling();\n    }\n\n    public scrollToY(top: number): void {\n        this.getScrollParent().scrollToY(top);\n    }\n\n    public getScrollLeft(): number {\n        return this.getScrollParent().getScrollLeft();\n    }\n\n    private checkVerticalScrolling(positionInfo: PositionInfo): void {\n        if (positionInfo.pageY == null) {\n            return;\n        }\n\n        this.getScrollParent().checkVerticalScrolling(positionInfo.pageY);\n    }\n\n    private checkHorizontalScrolling(positionInfo: PositionInfo): void {\n        if (positionInfo.pageX == null) {\n            return;\n        }\n\n        this.getScrollParent().checkHorizontalScrolling(positionInfo.pageX);\n    }\n\n    private getScrollParent(): ScrollParent {\n        if (!this.scrollParent) {\n            this.scrollParent = createScrollParent(\n                this.treeElement,\n                this.refreshHitAreas,\n            );\n        }\n\n        return this.scrollParent;\n    }\n}\n","import { Node } from \"./node\";\nimport { GetNodeById } from \"./jqtreeMethodTypes\";\n\ninterface SelectNodeHandlerParameters {\n    getNodeById: GetNodeById;\n}\n\nexport default class SelectNodeHandler {\n    private getNodeById: GetNodeById;\n    private selectedNodes: Set<NodeId>;\n    private selectedSingleNode: Node | null;\n\n    constructor({ getNodeById }: SelectNodeHandlerParameters) {\n        this.getNodeById = getNodeById;\n        this.selectedNodes = new Set<NodeId>();\n        this.clear();\n    }\n\n    public getSelectedNode(): Node | false {\n        const selectedNodes = this.getSelectedNodes();\n\n        if (selectedNodes.length) {\n            return selectedNodes[0] || false;\n        } else {\n            return false;\n        }\n    }\n\n    public getSelectedNodes(): Node[] {\n        if (this.selectedSingleNode) {\n            return [this.selectedSingleNode];\n        } else {\n            const selectedNodes: Node[] = [];\n\n            this.selectedNodes.forEach((id) => {\n                const node = this.getNodeById(id);\n                if (node) {\n                    selectedNodes.push(node);\n                }\n            });\n\n            return selectedNodes;\n        }\n    }\n\n    public getSelectedNodesUnder(parent: Node): Node[] {\n        if (this.selectedSingleNode) {\n            if (parent.isParentOf(this.selectedSingleNode)) {\n                return [this.selectedSingleNode];\n            } else {\n                return [];\n            }\n        } else {\n            const selectedNodes = [];\n\n            for (const id in this.selectedNodes) {\n                if (\n                    Object.prototype.hasOwnProperty.call(this.selectedNodes, id)\n                ) {\n                    const node = this.getNodeById(id);\n                    if (node && parent.isParentOf(node)) {\n                        selectedNodes.push(node);\n                    }\n                }\n            }\n\n            return selectedNodes;\n        }\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (node.id != null) {\n            return this.selectedNodes.has(node.id);\n        } else if (this.selectedSingleNode) {\n            return this.selectedSingleNode.element === node.element;\n        } else {\n            return false;\n        }\n    }\n\n    public clear(): void {\n        this.selectedNodes.clear();\n        this.selectedSingleNode = null;\n    }\n\n    public removeFromSelection(node: Node, includeChildren = false): void {\n        if (node.id == null) {\n            if (\n                this.selectedSingleNode &&\n                node.element === this.selectedSingleNode.element\n            ) {\n                this.selectedSingleNode = null;\n            }\n        } else {\n            this.selectedNodes.delete(node.id);\n\n            if (includeChildren) {\n                node.iterate(() => {\n                    if (node.id != null) {\n                        this.selectedNodes.delete(node.id);\n                    }\n                    return true;\n                });\n            }\n        }\n    }\n\n    public addToSelection(node: Node): void {\n        if (node.id != null) {\n            this.selectedNodes.add(node.id);\n        } else {\n            this.selectedSingleNode = node;\n        }\n    }\n}\n","interface NodeRecordWithChildren extends NodeRecord {\n    children: NodeData[];\n}\n\nexport const isNodeRecordWithChildren = (\n    data: NodeData,\n): data is NodeRecordWithChildren =>\n    typeof data === \"object\" &&\n    \"children\" in data &&\n    data[\"children\"] instanceof Array;\n","import { isNodeRecordWithChildren } from \"./nodeUtils\";\nimport { Position } from \"./position\";\n\ntype IterateCallback = (node: Node, level: number) => boolean;\n\nexport class Node implements INode {\n    public id?: NodeId;\n    public name: string;\n    public children: Node[];\n    public parent: Node | null;\n    public idMapping: Map<NodeId, Node>;\n    public tree?: Node;\n    public nodeClass?: typeof Node;\n    public load_on_demand: boolean;\n    public is_open: boolean;\n    public element: HTMLElement;\n    public is_loading: boolean;\n    public isEmptyFolder: boolean;\n\n    [key: string]: unknown;\n\n    constructor(\n        nodeData: NodeData | null = null,\n        isRoot = false,\n        nodeClass = Node,\n    ) {\n        this.name = \"\";\n        this.load_on_demand = false;\n\n        this.isEmptyFolder =\n            nodeData != null &&\n            isNodeRecordWithChildren(nodeData) &&\n            nodeData.children.length === 0;\n\n        this.setData(nodeData);\n\n        this.children = [];\n        this.parent = null;\n\n        if (isRoot) {\n            this.idMapping = new Map<NodeId, Node>();\n            this.tree = this;\n            this.nodeClass = nodeClass;\n        }\n    }\n\n    /*\n    Set the data of this node.\n\n    setData(string): set the name of the node\n    setData(object): set attributes of the node\n\n    Examples:\n        setData('node1')\n\n        setData({ name: 'node1', id: 1});\n\n        setData({ name: 'node2', id: 2, color: 'green'});\n\n    * This is an internal function; it is not in the docs\n    * Does not remove existing node values\n    */\n    public setData(o: NodeData | null): void {\n        if (!o) {\n            return;\n        } else if (typeof o === \"string\") {\n            this.name = o;\n        } else if (typeof o === \"object\") {\n            for (const key in o) {\n                if (Object.prototype.hasOwnProperty.call(o, key)) {\n                    const value = o[key];\n\n                    if (key === \"label\" || key === \"name\") {\n                        // You can use the 'label' key instead of 'name'; this is a legacy feature\n                        if (typeof value === \"string\") {\n                            this.name = value;\n                        }\n                    } else if (key !== \"children\" && key !== \"parent\") {\n                        // You can't update the children or the parent using this function\n                        this[key] = value;\n                    }\n                }\n            }\n        }\n    }\n\n    /*\n    Create tree from data.\n\n    Structure of data is:\n    [\n        {\n            name: 'node1',\n            children: [\n                { name: 'child1' },\n                { name: 'child2' }\n            ]\n        },\n        {\n            name: 'node2'\n        }\n    ]\n    */\n    public loadFromData(data: NodeData[]): Node {\n        this.removeChildren();\n\n        for (const childData of data) {\n            const node = this.createNode(childData);\n            this.addChild(node);\n\n            if (isNodeRecordWithChildren(childData)) {\n                node.loadFromData(childData.children);\n            }\n        }\n\n        return this;\n    }\n\n    /*\n    Add child.\n\n    tree.addChild(\n        new Node('child1')\n    );\n    */\n    public addChild(node: Node): void {\n        this.children.push(node);\n        node.setParent(this);\n    }\n\n    /*\n    Add child at position. Index starts at 0.\n\n    tree.addChildAtPosition(\n        new Node('abc'),\n        1\n    );\n    */\n    public addChildAtPosition(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        node.setParent(this);\n    }\n\n    /*\n    Remove child. This also removes the children of the node.\n\n    tree.removeChild(tree.children[0]);\n    */\n    public removeChild(node: Node): void {\n        // remove children from the index\n        node.removeChildren();\n\n        this.doRemoveChild(node);\n    }\n\n    /*\n    Get child index.\n\n    var index = getChildIndex(node);\n    */\n    public getChildIndex(node: Node): number {\n        return this.children.indexOf(node);\n    }\n\n    /*\n    Does the tree have children?\n\n    if (tree.hasChildren()) {\n        //\n    }\n    */\n    public hasChildren(): boolean {\n        return this.children.length !== 0;\n    }\n\n    public isFolder(): boolean {\n        return this.hasChildren() || this.load_on_demand;\n    }\n\n    /*\n    Iterate over all the nodes in the tree.\n\n    Calls callback with (node, level).\n\n    The callback must return true to continue the iteration on current node.\n\n    tree.iterate(\n        function(node, level) {\n           console.log(node.name);\n\n           // stop iteration after level 2\n           return (level <= 2);\n        }\n    );\n\n    */\n    public iterate(callback: IterateCallback): void {\n        const _iterate = (node: Node, level: number): void => {\n            if (node.children) {\n                for (const child of node.children) {\n                    const result = callback(child, level);\n\n                    if (result && child.hasChildren()) {\n                        _iterate(child, level + 1);\n                    }\n                }\n            }\n        };\n\n        _iterate(this, 0);\n    }\n\n    /*\n    Move node relative to another node.\n\n    Argument position: Position.BEFORE, Position.AFTER or Position.Inside\n\n    // move node1 after node2\n    tree.moveNode(node1, node2, Position.AFTER);\n    */\n    public moveNode(\n        movedNode: Node,\n        targetNode: Node,\n        position: Position,\n    ): boolean {\n        if (!movedNode.parent || movedNode.isParentOf(targetNode)) {\n            // - Node is parent of target node\n            // - Or, parent is empty\n            return false;\n        } else {\n            movedNode.parent.doRemoveChild(movedNode);\n\n            switch (position) {\n                case Position.After: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode) + 1,\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Before: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode),\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Inside: {\n                    // move inside as first child\n                    targetNode.addChildAtPosition(movedNode, 0);\n                    return true;\n                }\n\n                default:\n                    return false;\n            }\n        }\n    }\n\n    /*\n    Get the tree as data.\n    */\n    public getData(includeParent = false): NodeRecord[] {\n        const getDataFromNodes = (nodes: Node[]): Record<string, unknown>[] => {\n            return nodes.map((node) => {\n                const tmpNode: Record<string, unknown> = {};\n\n                for (const k in node) {\n                    if (\n                        [\n                            \"parent\",\n                            \"children\",\n                            \"element\",\n                            \"idMapping\",\n                            \"load_on_demand\",\n                            \"nodeClass\",\n                            \"tree\",\n                            \"isEmptyFolder\",\n                        ].indexOf(k) === -1 &&\n                        Object.prototype.hasOwnProperty.call(node, k)\n                    ) {\n                        const v = node[k];\n                        tmpNode[k] = v;\n                    }\n                }\n\n                if (node.hasChildren()) {\n                    tmpNode[\"children\"] = getDataFromNodes(node.children);\n                }\n\n                return tmpNode;\n            });\n        };\n\n        if (includeParent) {\n            return getDataFromNodes([this]);\n        } else {\n            return getDataFromNodes(this.children);\n        }\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.getNodeByCallback((node: Node) => node.name === name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        const node = this.getNodeByCallback((n: Node) => n.name === name);\n\n        if (!node) {\n            throw `Node with name ${name} not found`;\n        }\n\n        return node;\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        let result: Node | null = null;\n\n        this.iterate((node: Node) => {\n            if (result) {\n                return false;\n            } else if (callback(node)) {\n                result = node;\n                return false;\n            } else {\n                return true;\n            }\n        });\n\n        return result;\n    }\n\n    public addAfter(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex + 1);\n\n            node.loadChildrenFromData(nodeInfo);\n            return node;\n        }\n    }\n\n    public addBefore(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex);\n\n            node.loadChildrenFromData(nodeInfo);\n            return node;\n        }\n    }\n\n    public addParent(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const newParent = this.createNode(nodeInfo);\n\n            if (this.tree) {\n                newParent.setParent(this.tree);\n            }\n            const originalParent = this.parent;\n\n            for (const child of originalParent.children) {\n                newParent.addChild(child);\n            }\n\n            originalParent.children = [];\n            originalParent.addChild(newParent);\n            return newParent;\n        }\n    }\n\n    public remove(): void {\n        if (this.parent) {\n            this.parent.removeChild(this);\n            this.parent = null;\n        }\n    }\n\n    public append(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChild(node);\n\n        node.loadChildrenFromData(nodeInfo);\n        return node;\n    }\n\n    public prepend(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChildAtPosition(node, 0);\n\n        node.loadChildrenFromData(nodeInfo);\n        return node;\n    }\n\n    public isParentOf(node: Node): boolean {\n        let parent = node.parent;\n\n        while (parent) {\n            if (parent === this) {\n                return true;\n            }\n\n            parent = parent.parent;\n        }\n\n        return false;\n    }\n\n    public getLevel(): number {\n        let level = 0;\n        let node: Node = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n        while (node.parent) {\n            level += 1;\n            node = node.parent;\n        }\n\n        return level;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.idMapping.get(nodeId) || null;\n    }\n\n    public addNodeToIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.set(node.id, node);\n        }\n    }\n\n    public removeNodeFromIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.delete(node.id);\n        }\n    }\n\n    public removeChildren(): void {\n        this.iterate((child: Node) => {\n            this.tree?.removeNodeFromIndex(child);\n            return true;\n        });\n\n        this.children = [];\n    }\n\n    public getPreviousSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousIndex = this.parent.getChildIndex(this) - 1;\n            if (previousIndex >= 0) {\n                return this.parent.children[previousIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNextSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const nextIndex = this.parent.getChildIndex(this) + 1;\n            if (nextIndex < this.parent.children.length) {\n                return this.parent.children[nextIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.filter((node: Node) => node[key] === value);\n    }\n\n    public filter(f: (node: Node) => boolean): Node[] {\n        const result: Node[] = [];\n\n        this.iterate((node: Node) => {\n            if (f(node)) {\n                result.push(node);\n            }\n\n            return true;\n        });\n\n        return result;\n    }\n\n    public getNextNode(includeChildren = true): Node | null {\n        if (includeChildren && this.hasChildren()) {\n            return this.children[0] || null;\n        } else if (!this.parent) {\n            return null;\n        } else {\n            const nextSibling = this.getNextSibling();\n\n            if (nextSibling) {\n                return nextSibling;\n            } else {\n                return this.parent.getNextNode(false);\n            }\n        }\n    }\n\n    public getNextVisibleNode(): Node | null {\n        if (this.hasChildren() && this.is_open) {\n            // First child\n            return this.children[0] || null;\n        } else {\n            if (!this.parent) {\n                return null;\n            } else {\n                const nextSibling = this.getNextSibling();\n                if (nextSibling) {\n                    // Next sibling\n                    return nextSibling;\n                } else {\n                    // Next node of parent\n                    return this.parent.getNextNode(false);\n                }\n            }\n        }\n    }\n\n    public getPreviousNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (previousSibling.hasChildren()) {\n                return previousSibling.getLastChild();\n            } else {\n                return previousSibling;\n            }\n        }\n    }\n\n    public getPreviousVisibleNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (\n                !previousSibling.hasChildren() ||\n                !previousSibling.is_open\n            ) {\n                // Previous sibling\n                return previousSibling;\n            } else {\n                // Last child of previous sibling\n                return previousSibling.getLastChild();\n            }\n        }\n    }\n\n    public getParent(): Node | null {\n        // Return parent except if it is the root node\n        if (!this.parent) {\n            return null;\n        } else if (!this.parent.parent) {\n            // Root node -> null\n            return null;\n        } else {\n            return this.parent;\n        }\n    }\n\n    public getLastChild(): Node | null {\n        if (!this.hasChildren()) {\n            return null;\n        } else {\n            const lastChild = this.children[this.children.length - 1];\n\n            if (!lastChild) {\n                return null;\n            }\n\n            if (!(lastChild.hasChildren() && lastChild.is_open)) {\n                return lastChild;\n            } else {\n                return lastChild?.getLastChild();\n            }\n        }\n    }\n\n    // Init Node from data without making it the root of the tree\n    public initFromData(data: NodeData): void {\n        const addNode = (nodeData: NodeData): void => {\n            this.setData(nodeData);\n\n            if (\n                isNodeRecordWithChildren(nodeData) &&\n                nodeData.children.length\n            ) {\n                addChildren(nodeData.children);\n            }\n        };\n\n        const addChildren = (childrenData: NodeData[]): void => {\n            for (const child of childrenData) {\n                const node = this.createNode();\n                node.initFromData(child);\n                this.addChild(node);\n            }\n        };\n\n        addNode(data);\n    }\n\n    private setParent(parent: Node): void {\n        this.parent = parent;\n        this.tree = parent.tree;\n        this.tree?.addNodeToIndex(this);\n    }\n\n    private doRemoveChild(node: Node): void {\n        this.children.splice(this.getChildIndex(node), 1);\n        this.tree?.removeNodeFromIndex(node);\n    }\n\n    private getNodeClass(): typeof Node {\n        return this.nodeClass || this?.tree?.nodeClass || Node;\n    }\n\n    private createNode(nodeData?: NodeData): Node {\n        const nodeClass = this.getNodeClass();\n        return new nodeClass(nodeData);\n    }\n\n    // Load children data from nodeInfo if it has children\n    private loadChildrenFromData(nodeInfo: NodeData) {\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            this.loadFromData(nodeInfo.children);\n        }\n    }\n}\n","import { DropHint } from \"../dragAndDropHandler/types\";\n\nclass BorderDropHint implements DropHint {\n    private hint?: HTMLElement;\n\n    constructor(element: HTMLElement, scrollLeft: number) {\n        const div = element.querySelector(\":scope > .jqtree-element\");\n\n        if (!div) {\n            this.hint = undefined;\n            return;\n        }\n\n        const width = Math.max(element.offsetWidth + scrollLeft - 4, 0);\n        const height = Math.max(element.clientHeight - 4, 0);\n\n        const hint = document.createElement(\"span\");\n        hint.className = \"jqtree-border\";\n        hint.style.width = `${width}px`;\n        hint.style.height = `${height}px`;\n\n        this.hint = hint;\n\n        div.append(this.hint);\n    }\n\n    public remove(): void {\n        this.hint?.remove();\n    }\n}\n\nexport default BorderDropHint;\n","import { Node } from \"../node\";\nimport { Position } from \"../position\";\nimport { DropHint } from \"../dragAndDropHandler/types\";\n\nclass GhostDropHint implements DropHint {\n    private element: HTMLElement;\n    private node: Node;\n    private ghost: HTMLElement;\n\n    constructor(node: Node, element: HTMLElement, position: Position) {\n        this.element = element;\n        this.node = node;\n        this.ghost = this.createGhostElement();\n\n        if (position === Position.After) {\n            this.moveAfter();\n        } else if (position === Position.Before) {\n            this.moveBefore();\n        } else if (position === Position.Inside) {\n            if (node.isFolder() && node.is_open) {\n                this.moveInsideOpenFolder();\n            } else {\n                this.moveInside();\n            }\n        }\n    }\n\n    public remove(): void {\n        this.ghost.remove();\n    }\n\n    private moveAfter(): void {\n        this.element.after(this.ghost);\n    }\n\n    private moveBefore(): void {\n        this.element.before(this.ghost);\n    }\n\n    private moveInsideOpenFolder(): void {\n        const childElement = this.node.children[0]?.element;\n\n        if (childElement) {\n            childElement.before(this.ghost);\n        }\n    }\n\n    private moveInside(): void {\n        this.element.after(this.ghost);\n        this.ghost.classList.add(\"jqtree-inside\");\n    }\n\n    private createGhostElement() {\n        const ghost = document.createElement(\"li\");\n        ghost.className = \"jqtree_common jqtree-ghost\";\n\n        const circleSpan = document.createElement(\"span\");\n        circleSpan.className = \"jqtree_common jqtree-circle\";\n        ghost.append(circleSpan);\n\n        const lineSpan = document.createElement(\"span\");\n        lineSpan.className = \"jqtree_common jqtree-line\";\n        ghost.append(lineSpan);\n\n        return ghost;\n    }\n}\n\nexport default GhostDropHint;\n","import { Node } from \"../node\";\nimport { Position } from \"../position\";\nimport { DropHint } from \"../dragAndDropHandler/types\";\nimport BorderDropHint from \"./borderDropHint\";\nimport GhostDropHint from \"./ghostDropHint\";\nimport { GetScrollLeft } from \"../jqtreeMethodTypes\";\n\nexport interface NodeElementParams {\n    getScrollLeft: GetScrollLeft;\n    node: Node;\n    tabIndex?: number;\n    $treeElement: JQuery<HTMLElement>;\n}\n\nclass NodeElement {\n    public node: Node;\n    public element: HTMLElement;\n    private getScrollLeft: GetScrollLeft;\n    private tabIndex?: number;\n    private $treeElement: JQuery<HTMLElement>;\n\n    constructor({\n        getScrollLeft,\n        node,\n        tabIndex,\n        $treeElement,\n    }: NodeElementParams) {\n        this.getScrollLeft = getScrollLeft;\n        this.tabIndex = tabIndex;\n        this.$treeElement = $treeElement;\n\n        this.init(node);\n    }\n\n    public init(node: Node): void {\n        this.node = node;\n\n        if (!node.element) {\n            const element = this.$treeElement.get(0);\n\n            if (element) {\n                node.element = element;\n            }\n        }\n\n        if (node.element) {\n            this.element = node.element;\n        }\n    }\n\n    public addDropHint(position: number): DropHint {\n        if (this.mustShowBorderDropHint(position)) {\n            return new BorderDropHint(this.element, this.getScrollLeft());\n        } else {\n            return new GhostDropHint(this.node, this.element, position);\n        }\n    }\n\n    public select(mustSetFocus: boolean): void {\n        this.element.classList.add(\"jqtree-selected\");\n\n        const titleSpan = this.getTitleSpan();\n        const tabIndex = this.tabIndex;\n\n        // Check for null or undefined\n        if (tabIndex != null) {\n            titleSpan.setAttribute(\"tabindex\", tabIndex.toString());\n        }\n\n        titleSpan.setAttribute(\"aria-selected\", \"true\");\n\n        if (mustSetFocus) {\n            titleSpan.focus();\n        }\n    }\n\n    public deselect(): void {\n        this.element.classList.remove(\"jqtree-selected\");\n\n        const titleSpan = this.getTitleSpan();\n        titleSpan.removeAttribute(\"tabindex\");\n        titleSpan.setAttribute(\"aria-selected\", \"false\");\n\n        titleSpan.blur();\n    }\n\n    protected getUl(): HTMLUListElement {\n        return this.element.querySelector(\":scope > ul\") as HTMLUListElement;\n    }\n\n    protected getTitleSpan(): HTMLSpanElement {\n        return this.element.querySelector(\n            \":scope > .jqtree-element > span.jqtree-title\",\n        ) as HTMLSpanElement;\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return position === Position.Inside;\n    }\n}\n\nexport default NodeElement;\n","import { Position } from \"../position\";\nimport NodeElement, { NodeElementParams } from \"./index\";\nimport { OnFinishOpenNode, TriggerEvent } from \"../jqtreeMethodTypes\";\n\ninterface FolderElementParams extends NodeElementParams {\n    closedIconElement?: HTMLElement | Text;\n    openedIconElement?: HTMLElement | Text;\n    triggerEvent: TriggerEvent;\n}\n\nclass FolderElement extends NodeElement {\n    private closedIconElement?: HTMLElement | Text;\n    private openedIconElement?: HTMLElement | Text;\n    private triggerEvent: TriggerEvent;\n\n    constructor({\n        closedIconElement,\n        getScrollLeft,\n        node,\n        openedIconElement,\n        tabIndex,\n        $treeElement,\n        triggerEvent,\n    }: FolderElementParams) {\n        super({\n            getScrollLeft,\n            node,\n            tabIndex,\n            $treeElement,\n        });\n\n        this.closedIconElement = closedIconElement;\n        this.openedIconElement = openedIconElement;\n        this.triggerEvent = triggerEvent;\n    }\n\n    public open(\n        onFinished: OnFinishOpenNode | undefined,\n        slide = true,\n        animationSpeed: JQuery.Duration = \"fast\",\n    ): void {\n        if (this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = true;\n\n        const button = this.getButton();\n        button.classList.remove(\"jqtree-closed\");\n        button.innerHTML = \"\";\n\n        const openedIconElement = this.openedIconElement;\n\n        if (openedIconElement) {\n            const icon = openedIconElement.cloneNode(true);\n            button.appendChild(icon);\n        }\n\n        const doOpen = (): void => {\n            this.element.classList.remove(\"jqtree-closed\");\n\n            const titleSpan = this.getTitleSpan();\n            titleSpan.setAttribute(\"aria-expanded\", \"true\");\n\n            if (onFinished) {\n                onFinished(this.node);\n            }\n\n            this.triggerEvent(\"tree.open\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            jQuery(this.getUl()).slideDown(animationSpeed, doOpen);\n        } else {\n            jQuery(this.getUl()).show();\n            doOpen();\n        }\n    }\n\n    public close(\n        slide = true,\n        animationSpeed: JQuery.Duration | undefined = \"fast\",\n    ): void {\n        if (!this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = false;\n\n        const button = this.getButton();\n        button.classList.add(\"jqtree-closed\");\n        button.innerHTML = \"\";\n\n        const closedIconElement = this.closedIconElement;\n\n        if (closedIconElement) {\n            const icon = closedIconElement.cloneNode(true);\n            button.appendChild(icon);\n        }\n\n        const doClose = (): void => {\n            this.element.classList.add(\"jqtree-closed\");\n\n            const titleSpan = this.getTitleSpan();\n            titleSpan.setAttribute(\"aria-expanded\", \"false\");\n\n            this.triggerEvent(\"tree.close\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            jQuery(this.getUl()).slideUp(animationSpeed, doClose);\n        } else {\n            jQuery(this.getUl()).hide();\n            doClose();\n        }\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return !this.node.is_open && position === Position.Inside;\n    }\n\n    private getButton(): HTMLLinkElement {\n        return this.element.querySelector(\n            \":scope > .jqtree-element > a.jqtree-toggler\",\n        ) as HTMLLinkElement;\n    }\n}\n\nexport default FolderElement;\n","import __version__ from \"./version\";\nimport { DragAndDropHandler } from \"./dragAndDropHandler\";\nimport ElementsRenderer from \"./elementsRenderer\";\nimport DataLoader, { HandleFinishedLoading } from \"./dataLoader\";\nimport KeyHandler from \"./keyHandler\";\nimport MouseWidget from \"./mouse.widget\";\nimport { PositionInfo } from \"./mouseWidgetTypes\";\nimport SaveStateHandler, { SavedState } from \"./saveStateHandler\";\nimport ScrollHandler from \"./scrollHandler\";\nimport SelectNodeHandler from \"./selectNodeHandler\";\nimport SimpleWidget from \"./simple.widget\";\nimport { getOffsetTop, isFunction } from \"./util\";\nimport { Node } from \"./node\";\nimport { getPosition } from \"./position\";\nimport NodeElement from \"./nodeElement\";\nimport FolderElement from \"./nodeElement/folderElement\";\nimport { OnFinishOpenNode } from \"./jqtreeMethodTypes\";\nimport { JQTreeOptions } from \"./jqtreeOptions\";\n\ninterface ClickTarget {\n    node: Node;\n    type: \"button\" | \"label\";\n}\n\ninterface SelectNodeOptions {\n    mustToggle?: boolean;\n    mustSetFocus?: boolean;\n}\n\nconst NODE_PARAM_IS_EMPTY = \"Node parameter is empty\";\nconst PARAM_IS_EMPTY = \"Parameter is empty: \";\n\nexport class JqTreeWidget extends MouseWidget<JQTreeOptions> {\n    protected static defaults: JQTreeOptions = {\n        animationSpeed: \"fast\",\n        autoEscape: true,\n        autoOpen: false, // true / false / int (open n levels starting at 0)\n        buttonLeft: true,\n        // The symbol to use for a closed node - ► BLACK RIGHT-POINTING POINTER\n        // http://www.fileformat.info/info/unicode/char/25ba/index.htm\n        closedIcon: undefined,\n        data: undefined,\n        dataFilter: undefined,\n        dataUrl: undefined,\n        dragAndDrop: false,\n        keyboardSupport: true,\n        nodeClass: Node,\n        onCanMove: undefined, // Can this node be moved?\n        onCanMoveTo: undefined, // Can this node be moved to this position? function(moved_node, target_node, position)\n        onCanSelectNode: undefined,\n        onCreateLi: undefined,\n        onDragMove: undefined,\n        onDragStop: undefined,\n        onGetStateFromStorage: undefined,\n        onIsMoveHandle: undefined,\n        onLoadFailed: undefined,\n        onLoading: undefined,\n        onSetStateFromStorage: undefined,\n        openedIcon: \"&#x25bc;\",\n        openFolderDelay: 500, // The delay for opening a folder during drag and drop; the value is in milliseconds\n        // The symbol to use for an open node - ▼ BLACK DOWN-POINTING TRIANGLE\n        // http://www.fileformat.info/info/unicode/char/25bc/index.htm\n        rtl: undefined, // right-to-left support; true / false (default)\n        saveState: false, // true / false / string (cookie name)\n        selectable: true,\n        showEmptyFolder: false,\n        slide: true, // must display slide animation?\n        startDndDelay: 300, // The delay for starting dnd (in milliseconds)\n        tabIndex: 0,\n        useContextMenu: true,\n    };\n\n    public element: JQuery;\n    public tree: Node;\n    public dndHandler: DragAndDropHandler;\n    public renderer: ElementsRenderer;\n    public dataLoader: DataLoader;\n    public scrollHandler: ScrollHandler;\n    public selectNodeHandler: SelectNodeHandler;\n\n    private isInitialized: boolean;\n    private saveStateHandler: SaveStateHandler;\n    private keyHandler: KeyHandler;\n\n    public toggle(node: Node, slideParam: null | boolean = null): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.is_open) {\n            this.closeNode(node, slide);\n        } else {\n            this.openNode(node, slide);\n        }\n\n        return this.element;\n    }\n\n    public getTree(): Node {\n        return this.tree;\n    }\n\n    public selectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): JQuery {\n        this.doSelectNode(node, optionsParam);\n        return this.element;\n    }\n\n    public getSelectedNode(): Node | false {\n        return this.selectNodeHandler.getSelectedNode();\n    }\n\n    public toJson(): string {\n        return JSON.stringify(this.tree.getData());\n    }\n\n    public loadData(data: NodeData[], parentNode: Node | null): JQuery {\n        this.doLoadData(data, parentNode);\n        return this.element;\n    }\n\n    /*\n    signatures:\n    - loadDataFromUrl(url, parent_node=null, on_finished=null)\n        loadDataFromUrl('/my_data');\n        loadDataFromUrl('/my_data', node1);\n        loadDataFromUrl('/my_data', node1, function() { console.log('finished'); });\n        loadDataFromUrl('/my_data', null, function() { console.log('finished'); });\n\n    - loadDataFromUrl(parent_node=null, on_finished=null)\n        loadDataFromUrl();\n        loadDataFromUrl(node1);\n        loadDataFromUrl(null, function() { console.log('finished'); });\n        loadDataFromUrl(node1, function() { console.log('finished'); });\n    */\n    public loadDataFromUrl(\n        param1: string | null | Node,\n        param2?: Node | null | HandleFinishedLoading,\n        param3?: HandleFinishedLoading,\n    ): JQuery {\n        if (typeof param1 === \"string\") {\n            // first parameter is url\n            this.doLoadDataFromUrl(\n                param1,\n                param2 as Node | null,\n                param3 ?? null,\n            );\n        } else {\n            // first parameter is not url\n            this.doLoadDataFromUrl(\n                null,\n                param1,\n                param2 as HandleFinishedLoading | null,\n            );\n        }\n\n        return this.element;\n    }\n\n    public reload(onFinished: HandleFinishedLoading | null): JQuery {\n        this.doLoadDataFromUrl(null, null, onFinished);\n        return this.element;\n    }\n\n    public refresh(): JQuery {\n        this._refreshElements(null);\n        return this.element;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.tree.getNodeById(nodeId);\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.tree.getNodeByName(name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        return this.tree.getNodeByNameMustExist(name);\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.tree.getNodesByProperty(key, value);\n    }\n\n    public getNodeByHtmlElement(\n        inputElement: HTMLElement | JQuery<HTMLElement>,\n    ): Node | null {\n        const element =\n            inputElement instanceof HTMLElement\n                ? inputElement\n                : inputElement[0];\n\n        if (!element) {\n            return null;\n        }\n\n        return this.getNode(element);\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        return this.tree.getNodeByCallback(callback);\n    }\n\n    public openNode(\n        node: Node,\n        param1?: boolean | OnFinishOpenNode,\n        param2?: OnFinishOpenNode,\n    ): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const parseParams = (): [boolean, OnFinishOpenNode | undefined] => {\n            let onFinished: OnFinishOpenNode | null;\n            let slide: boolean | null;\n\n            if (isFunction(param1)) {\n                onFinished = param1 as OnFinishOpenNode;\n                slide = null;\n            } else {\n                slide = param1 as boolean;\n                onFinished = param2 as OnFinishOpenNode;\n            }\n\n            if (slide == null) {\n                slide = this.options.slide ?? false;\n            }\n\n            return [slide, onFinished];\n        };\n\n        const [slide, onFinished] = parseParams();\n\n        this._openNode(node, slide, onFinished);\n        return this.element;\n    }\n\n    public closeNode(node: Node, slideParam?: null | boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            this.createFolderElement(node).close(\n                slide,\n                this.options.animationSpeed,\n            );\n\n            this.saveState();\n        }\n\n        return this.element;\n    }\n\n    public isDragging(): boolean {\n        return this.dndHandler.isDragging;\n    }\n\n    public refreshHitAreas(): JQuery {\n        this.dndHandler.refresh();\n        return this.element;\n    }\n\n    public addNodeAfter(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        const newNode = existingNode.addAfter(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addNodeBefore(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addBefore(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addParentNode(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addParent(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(newNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public removeNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!node.parent) {\n            throw Error(\"Node has no parent\");\n        }\n\n        this.selectNodeHandler.removeFromSelection(node, true); // including children\n\n        const parent = node.parent;\n        node.remove();\n        this._refreshElements(parent);\n\n        return this.element;\n    }\n\n    public appendNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam || this.tree;\n\n        const node = parentNode.append(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public prependNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam ?? this.tree;\n\n        const node = parentNode.prepend(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public updateNode(node: Node, data: NodeData): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const idIsChanged =\n            typeof data === \"object\" && data.id && data.id !== node.id;\n\n        if (idIsChanged) {\n            this.tree.removeNodeFromIndex(node);\n        }\n\n        node.setData(data);\n\n        if (idIsChanged) {\n            this.tree.addNodeToIndex(node);\n        }\n\n        if (\n            typeof data === \"object\" &&\n            data[\"children\"] &&\n            data[\"children\"] instanceof Array\n        ) {\n            node.removeChildren();\n\n            if (data.children.length) {\n                node.loadFromData(data.children as Node[]);\n            }\n        }\n\n        this._refreshElements(node);\n\n        return this.element;\n    }\n\n    private isSelectedNodeInSubtree(subtree: Node): boolean {\n        const selectedNode = this.getSelectedNode();\n\n        if (!selectedNode) {\n            return false;\n        } else {\n            return subtree === selectedNode || subtree.isParentOf(selectedNode);\n        }\n    }\n\n    public moveNode(node: Node, targetNode: Node, position: string): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!targetNode) {\n            throw Error(PARAM_IS_EMPTY + \"targetNode\");\n        }\n\n        const positionIndex = getPosition(position);\n\n        if (positionIndex !== undefined) {\n            this.tree.moveNode(node, targetNode, positionIndex);\n            this._refreshElements(null);\n        }\n\n        return this.element;\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        return this.saveStateHandler.getStateFromStorage();\n    }\n\n    public addToSelection(node: Node, mustSetFocus?: boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.addToSelection(node);\n        this.openParents(node);\n\n        this._getNodeElementForNode(node).select(\n            mustSetFocus === undefined ? true : mustSetFocus,\n        );\n\n        this.saveState();\n\n        return this.element;\n    }\n\n    public getSelectedNodes(): Node[] {\n        return this.selectNodeHandler.getSelectedNodes();\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        return this.selectNodeHandler.isNodeSelected(node);\n    }\n\n    public removeFromSelection(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.removeFromSelection(node);\n\n        this._getNodeElementForNode(node).deselect();\n        this.saveState();\n\n        return this.element;\n    }\n\n    public scrollToNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const top =\n            getOffsetTop(node.element) -\n            getOffsetTop(this.$el.get(0) as HTMLElement);\n\n        this.scrollHandler.scrollToY(top);\n\n        return this.element;\n    }\n\n    public getState(): SavedState | null {\n        return this.saveStateHandler.getState();\n    }\n\n    public setState(state: SavedState): JQuery {\n        this.saveStateHandler.setInitialState(state);\n        this._refreshElements(null);\n\n        return this.element;\n    }\n\n    public setOption(option: string, value: unknown): JQuery {\n        (this.options as unknown as Record<string, unknown>)[option] = value;\n        return this.element;\n    }\n\n    public moveDown(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveDown(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public moveUp(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveUp(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public getVersion(): string {\n        return __version__;\n    }\n\n    public _triggerEvent(\n        eventName: string,\n        values?: Record<string, unknown>,\n    ): JQuery.Event {\n        const event = jQuery.Event(eventName, values);\n        this.element.trigger(event);\n        return event;\n    }\n\n    public _openNode(\n        node: Node,\n        slide = true,\n        onFinished?: OnFinishOpenNode,\n    ): void {\n        const doOpenNode = (\n            _node: Node,\n            _slide: boolean,\n            _onFinished?: OnFinishOpenNode,\n        ): void => {\n            const folderElement = this.createFolderElement(_node);\n            folderElement.open(\n                _onFinished,\n                _slide,\n                this.options.animationSpeed,\n            );\n        };\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            if (node.load_on_demand) {\n                this.loadFolderOnDemand(node, slide, onFinished);\n            } else {\n                let parent = node.parent;\n\n                while (parent) {\n                    // nb: do not open root element\n                    if (parent.parent) {\n                        doOpenNode(parent, false);\n                    }\n                    parent = parent.parent;\n                }\n\n                doOpenNode(node, slide, onFinished);\n                this.saveState();\n            }\n        }\n    }\n\n    /*\n    Redraw the tree or part of the tree.\n     from_node: redraw this subtree\n    */\n    public _refreshElements(fromNode: Node | null): void {\n        const mustSetFocus = this.isFocusOnTree();\n        const mustSelect = fromNode\n            ? this.isSelectedNodeInSubtree(fromNode)\n            : false;\n\n        this.renderer.render(fromNode);\n\n        if (mustSelect) {\n            this.selectCurrentNode(mustSetFocus);\n        }\n\n        this._triggerEvent(\"tree.refresh\");\n    }\n\n    public _getNodeElementForNode(node: Node): NodeElement {\n        if (node.isFolder()) {\n            return this.createFolderElement(node);\n        } else {\n            return this.createNodeElement(node);\n        }\n    }\n\n    public _getNodeElement(element: HTMLElement): NodeElement | null {\n        const node = this.getNode(element);\n        if (node) {\n            return this._getNodeElementForNode(node);\n        } else {\n            return null;\n        }\n    }\n\n    public _getScrollLeft(): number {\n        return this.scrollHandler.getScrollLeft();\n    }\n\n    public init(): void {\n        super.init();\n\n        this.element = this.$el;\n        this.isInitialized = false;\n\n        this.options.rtl = this.getRtlOption();\n\n        if (this.options.closedIcon == null) {\n            this.options.closedIcon = this.getDefaultClosedIcon();\n        }\n\n        this.connectHandlers();\n\n        this.initData();\n\n        this.element.on(\"click\", this.handleClick);\n        this.element.on(\"dblclick\", this.handleDblclick);\n\n        if (this.options.useContextMenu) {\n            this.element.on(\"contextmenu\", this.handleContextmenu);\n        }\n    }\n\n    public deinit(): void {\n        this.element.empty();\n        this.element.off();\n\n        this.keyHandler.deinit();\n\n        this.tree = new Node({}, true);\n\n        super.deinit();\n    }\n\n    protected mouseCapture(positionInfo: PositionInfo): boolean | null {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseCapture(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStart(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStart(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseDrag(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            const result = this.dndHandler.mouseDrag(positionInfo);\n\n            this.scrollHandler.checkScrolling(positionInfo);\n            return result;\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStop(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            this.scrollHandler.stopScrolling();\n            return this.dndHandler.mouseStop(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected getMouseDelay(): number {\n        return this.options.startDndDelay ?? 0;\n    }\n\n    private initData(): void {\n        if (this.options.data) {\n            this.doLoadData(this.options.data, null);\n        } else {\n            const dataUrl = this.getDataUrlInfo(null);\n\n            if (dataUrl) {\n                this.doLoadDataFromUrl(null, null, null);\n            } else {\n                this.doLoadData([], null);\n            }\n        }\n    }\n\n    private getDataUrlInfo(node: Node | null): JQuery.AjaxSettings | null {\n        const dataUrl =\n            this.options.dataUrl || (this.element.data(\"url\") as string | null);\n\n        const getUrlFromString = (url: string): JQuery.AjaxSettings => {\n            const urlInfo: JQuery.AjaxSettings = { url };\n\n            setUrlInfoData(urlInfo);\n\n            return urlInfo;\n        };\n\n        const setUrlInfoData = (urlInfo: JQuery.AjaxSettings): void => {\n            if (node?.id) {\n                // Load on demand of a subtree; add node parameter\n                const data = { node: node.id };\n                urlInfo[\"data\"] = data;\n            } else {\n                // Add selected_node parameter\n                const selectedNodeId = this.getNodeIdToBeSelected();\n                if (selectedNodeId) {\n                    const data = { selected_node: selectedNodeId };\n                    urlInfo[\"data\"] = data;\n                }\n            }\n        };\n\n        if (typeof dataUrl === \"function\") {\n            return dataUrl(node);\n        } else if (typeof dataUrl === \"string\") {\n            return getUrlFromString(dataUrl);\n        } else if (dataUrl && typeof dataUrl === \"object\") {\n            setUrlInfoData(dataUrl);\n            return dataUrl;\n        } else {\n            return null;\n        }\n    }\n\n    private getNodeIdToBeSelected(): NodeId | null {\n        if (this.options.saveState) {\n            return this.saveStateHandler.getNodeIdToBeSelected();\n        } else {\n            return null;\n        }\n    }\n\n    private initTree(data: NodeData[]): void {\n        const doInit = (): void => {\n            if (!this.isInitialized) {\n                this.isInitialized = true;\n                this._triggerEvent(\"tree.init\");\n            }\n        };\n\n        if (!this.options.nodeClass) {\n            return;\n        }\n\n        this.tree = new this.options.nodeClass(\n            null,\n            true,\n            this.options.nodeClass,\n        );\n\n        this.selectNodeHandler.clear();\n\n        this.tree.loadFromData(data);\n\n        const mustLoadOnDemand = this.setInitialState();\n\n        this._refreshElements(null);\n\n        if (!mustLoadOnDemand) {\n            doInit();\n        } else {\n            // Load data on demand and then init the tree\n            this.setInitialStateOnDemand(doInit);\n        }\n    }\n\n    // Set initial state, either by restoring the state or auto-opening nodes\n    // result: must load nodes on demand?\n    private setInitialState(): boolean {\n        const restoreState = (): [boolean, boolean] => {\n            // result: is state restored, must load on demand?\n            if (!this.options.saveState) {\n                return [false, false];\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return [false, false];\n                } else {\n                    const mustLoadOnDemand =\n                        this.saveStateHandler.setInitialState(state);\n\n                    // return true: the state is restored\n                    return [true, mustLoadOnDemand];\n                }\n            }\n        };\n\n        const autoOpenNodes = (): boolean => {\n            // result: must load on demand?\n            if (this.options.autoOpen === false) {\n                return false;\n            }\n\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let mustLoadOnDemand = false;\n\n            this.tree.iterate((node: Node, level: number) => {\n                if (node.load_on_demand) {\n                    mustLoadOnDemand = true;\n                    return false;\n                } else if (!node.hasChildren()) {\n                    return false;\n                } else {\n                    node.is_open = true;\n                    return level !== maxLevel;\n                }\n            });\n\n            return mustLoadOnDemand;\n        };\n\n        let [isRestored, mustLoadOnDemand] = restoreState(); // eslint-disable-line prefer-const\n\n        if (!isRestored) {\n            mustLoadOnDemand = autoOpenNodes();\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    // Set the initial state for nodes that are loaded on demand\n    // Call cb_finished when done\n    private setInitialStateOnDemand(cbFinished: () => void): void {\n        const restoreState = (): boolean => {\n            if (!this.options.saveState) {\n                return false;\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return false;\n                } else {\n                    this.saveStateHandler.setInitialStateOnDemand(\n                        state,\n                        cbFinished,\n                    );\n\n                    return true;\n                }\n            }\n        };\n\n        const autoOpenNodes = (): void => {\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let loadingCount = 0;\n\n            const loadAndOpenNode = (node: Node): void => {\n                loadingCount += 1;\n                this._openNode(node, false, () => {\n                    loadingCount -= 1;\n                    openNodes();\n                });\n            };\n\n            const openNodes = (): void => {\n                this.tree.iterate((node: Node, level: number) => {\n                    if (node.load_on_demand) {\n                        if (!node.is_loading) {\n                            loadAndOpenNode(node);\n                        }\n\n                        return false;\n                    } else {\n                        this._openNode(node, false);\n\n                        return level !== maxLevel;\n                    }\n                });\n\n                if (loadingCount === 0) {\n                    cbFinished();\n                }\n            };\n\n            openNodes();\n        };\n\n        if (!restoreState()) {\n            autoOpenNodes();\n        }\n    }\n\n    private getAutoOpenMaxLevel(): number {\n        if (this.options.autoOpen === true) {\n            return -1;\n        } else if (typeof this.options.autoOpen === \"number\") {\n            return this.options.autoOpen;\n        } else if (typeof this.options.autoOpen === \"string\") {\n            return parseInt(this.options.autoOpen, 10);\n        } else {\n            return 0;\n        }\n    }\n\n    private handleClick = (\n        e: JQuery.ClickEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget) {\n            if (clickTarget.type === \"button\") {\n                this.toggle(clickTarget.node, this.options.slide);\n\n                e.preventDefault();\n                e.stopPropagation();\n            } else if (clickTarget.type === \"label\") {\n                const node = clickTarget.node;\n                const event = this._triggerEvent(\"tree.click\", {\n                    node,\n                    click_event: e,\n                });\n\n                if (!event.isDefaultPrevented()) {\n                    this.doSelectNode(node);\n                }\n            }\n        }\n    };\n\n    private handleDblclick = (\n        e: JQuery.DoubleClickEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget?.type === \"label\") {\n            this._triggerEvent(\"tree.dblclick\", {\n                node: clickTarget.node,\n                click_event: e,\n            });\n        }\n    };\n\n    private getClickTarget(element: HTMLElement): ClickTarget | null {\n        const button = element.closest(\".jqtree-toggler\");\n\n        if (button) {\n            const node = this.getNode(button as HTMLElement);\n\n            if (node) {\n                return {\n                    type: \"button\",\n                    node,\n                };\n            }\n        } else {\n            const jqTreeElement = element.closest(\".jqtree-element\");\n\n            if (jqTreeElement) {\n                const node = this.getNode(jqTreeElement as HTMLElement);\n                if (node) {\n                    return {\n                        type: \"label\",\n                        node,\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    private getNode(element: HTMLElement): null | Node {\n        const liElement = element.closest(\"li.jqtree_common\");\n\n        if (liElement) {\n            return jQuery(liElement).data(\"node\") as Node;\n        } else {\n            return null;\n        }\n    }\n\n    private handleContextmenu = (\n        e: JQuery.ContextMenuEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ) => {\n        const div = e.target.closest(\"ul.jqtree-tree .jqtree-element\");\n\n        if (div) {\n            const node = this.getNode(div as HTMLElement);\n            if (node) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                this._triggerEvent(\"tree.contextmenu\", {\n                    node,\n                    click_event: e,\n                });\n                return false;\n            }\n        }\n\n        return null;\n    };\n\n    private saveState(): void {\n        if (this.options.saveState) {\n            this.saveStateHandler.saveState();\n        }\n    }\n\n    private selectCurrentNode(mustSetFocus: boolean): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            const nodeElement = this._getNodeElementForNode(node);\n            if (nodeElement) {\n                nodeElement.select(mustSetFocus);\n            }\n        }\n    }\n\n    private deselectCurrentNode(): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            this.removeFromSelection(node);\n        }\n    }\n\n    private getDefaultClosedIcon(): string {\n        if (this.options.rtl) {\n            // triangle to the left\n            return \"&#x25c0;\";\n        } else {\n            // triangle to the right\n            return \"&#x25ba;\";\n        }\n    }\n\n    private getRtlOption(): boolean {\n        if (this.options.rtl != null) {\n            return this.options.rtl;\n        } else {\n            const dataRtl = this.element.data(\"rtl\") as unknown;\n\n            if (\n                dataRtl !== null &&\n                dataRtl !== false &&\n                dataRtl !== undefined\n            ) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    private doSelectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): void {\n        const saveState = (): void => {\n            if (this.options.saveState) {\n                this.saveStateHandler.saveState();\n            }\n        };\n\n        if (!node) {\n            // Called with empty node -> deselect current node\n            this.deselectCurrentNode();\n            saveState();\n            return;\n        }\n        const defaultOptions = { mustSetFocus: true, mustToggle: true };\n        const selectOptions = { ...defaultOptions, ...(optionsParam || {}) };\n\n        const canSelect = (): boolean => {\n            if (this.options.onCanSelectNode) {\n                return (\n                    this.options.selectable === true &&\n                    this.options.onCanSelectNode(node)\n                );\n            } else {\n                return this.options.selectable === true;\n            }\n        };\n\n        if (!canSelect()) {\n            return;\n        }\n\n        if (this.selectNodeHandler.isNodeSelected(node)) {\n            if (selectOptions.mustToggle) {\n                this.deselectCurrentNode();\n                this._triggerEvent(\"tree.select\", {\n                    node: null,\n                    previous_node: node,\n                });\n            }\n        } else {\n            const deselectedNode = this.getSelectedNode() || null;\n            this.deselectCurrentNode();\n            this.addToSelection(node, selectOptions.mustSetFocus);\n\n            this._triggerEvent(\"tree.select\", {\n                node,\n                deselected_node: deselectedNode,\n            });\n            this.openParents(node);\n        }\n\n        saveState();\n    }\n\n    private doLoadData(data: NodeData[] | null, parentNode: Node | null): void {\n        if (data) {\n            if (parentNode) {\n                this.deselectNodes(parentNode);\n                this.loadSubtree(data, parentNode);\n            } else {\n                this.initTree(data);\n            }\n\n            if (this.isDragging()) {\n                this.dndHandler.refresh();\n            }\n        }\n\n        this._triggerEvent(\"tree.load_data\", {\n            tree_data: data,\n            parent_node: parentNode,\n        });\n    }\n\n    private deselectNodes(parentNode: Node): void {\n        const selectedNodesUnderParent =\n            this.selectNodeHandler.getSelectedNodesUnder(parentNode);\n        for (const n of selectedNodesUnderParent) {\n            this.selectNodeHandler.removeFromSelection(n);\n        }\n    }\n\n    private loadSubtree(data: NodeData[], parentNode: Node): void {\n        parentNode.loadFromData(data);\n\n        parentNode.load_on_demand = false;\n        parentNode.is_loading = false;\n\n        this._refreshElements(parentNode);\n    }\n\n    private doLoadDataFromUrl(\n        urlInfoParam: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null,\n    ): void {\n        const urlInfo = urlInfoParam || this.getDataUrlInfo(parentNode);\n\n        this.dataLoader.loadFromUrl(urlInfo, parentNode, onFinished);\n    }\n\n    private loadFolderOnDemand(\n        node: Node,\n        slide = true,\n        onFinished?: OnFinishOpenNode,\n    ): void {\n        node.is_loading = true;\n\n        this.doLoadDataFromUrl(null, node, () => {\n            this._openNode(node, slide, onFinished);\n        });\n    }\n\n    private containsElement(element: HTMLElement): boolean {\n        const node = this.getNode(element);\n\n        return node != null && node.tree === this.tree;\n    }\n\n    private isFocusOnTree(): boolean {\n        const activeElement = document.activeElement;\n\n        return Boolean(\n            activeElement &&\n                activeElement.tagName === \"SPAN\" &&\n                this.containsElement(activeElement as HTMLElement),\n        );\n    }\n\n    private connectHandlers() {\n        const {\n            autoEscape,\n            buttonLeft,\n            closedIcon,\n            dataFilter,\n            dragAndDrop,\n            keyboardSupport,\n            onCanMove,\n            onCreateLi,\n            onDragMove,\n            onDragStop,\n            onGetStateFromStorage,\n            onIsMoveHandle,\n            onLoadFailed,\n            onLoading,\n            onSetStateFromStorage,\n            openedIcon,\n            openFolderDelay,\n            rtl,\n            saveState,\n            showEmptyFolder,\n            slide,\n            tabIndex,\n        } = this.options;\n\n        const closeNode = this.closeNode.bind(this);\n        const getNodeElement = this._getNodeElement.bind(this);\n        const getNodeElementForNode = this._getNodeElementForNode.bind(this);\n        const getNodeById = this.getNodeById.bind(this);\n        const getSelectedNode = this.getSelectedNode.bind(this);\n        const getTree = this.getTree.bind(this);\n        const isFocusOnTree = this.isFocusOnTree.bind(this);\n        const loadData = this.loadData.bind(this);\n        const openNode = this._openNode.bind(this);\n        const refreshElements = this._refreshElements.bind(this);\n        const refreshHitAreas = this.refreshHitAreas.bind(this);\n        const selectNode = this.selectNode.bind(this);\n        const $treeElement = this.element;\n        const treeElement = this.element.get(0) as HTMLElement;\n        const triggerEvent = this._triggerEvent.bind(this);\n\n        const selectNodeHandler = new SelectNodeHandler({\n            getNodeById,\n        });\n\n        const addToSelection =\n            selectNodeHandler.addToSelection.bind(selectNodeHandler);\n        const getSelectedNodes =\n            selectNodeHandler.getSelectedNodes.bind(selectNodeHandler);\n        const isNodeSelected =\n            selectNodeHandler.isNodeSelected.bind(selectNodeHandler);\n        const removeFromSelection =\n            selectNodeHandler.removeFromSelection.bind(selectNodeHandler);\n\n        const dataLoader = new DataLoader({\n            dataFilter,\n            loadData,\n            onLoadFailed,\n            onLoading,\n            $treeElement,\n            triggerEvent,\n        });\n\n        const saveStateHandler = new SaveStateHandler({\n            addToSelection,\n            getNodeById,\n            getSelectedNodes,\n            getTree,\n            onGetStateFromStorage,\n            onSetStateFromStorage,\n            openNode,\n            refreshElements,\n            removeFromSelection,\n            saveState,\n        });\n\n        const dndHandler = new DragAndDropHandler({\n            autoEscape,\n            getNodeElement,\n            getNodeElementForNode,\n            getTree,\n            onCanMove,\n            onDragMove,\n            onDragStop,\n            onIsMoveHandle,\n            openFolderDelay,\n            openNode,\n            refreshElements,\n            slide,\n            treeElement,\n            triggerEvent,\n        });\n\n        const scrollHandler = new ScrollHandler({\n            refreshHitAreas,\n            treeElement,\n        });\n\n        const keyHandler = new KeyHandler({\n            closeNode,\n            getSelectedNode,\n            isFocusOnTree,\n            keyboardSupport,\n            openNode,\n            selectNode,\n        });\n\n        const renderer = new ElementsRenderer({\n            autoEscape,\n            buttonLeft,\n            closedIcon,\n            dragAndDrop,\n            $element: $treeElement,\n            getTree,\n            isNodeSelected,\n            onCreateLi,\n            openedIcon,\n            rtl,\n            showEmptyFolder,\n            tabIndex,\n        });\n\n        this.dataLoader = dataLoader;\n        this.dndHandler = dndHandler;\n        this.keyHandler = keyHandler;\n        this.renderer = renderer;\n        this.saveStateHandler = saveStateHandler;\n        this.scrollHandler = scrollHandler;\n        this.selectNodeHandler = selectNodeHandler;\n    }\n\n    private createFolderElement(node: Node) {\n        const closedIconElement = this.renderer.closedIconElement;\n        const getScrollLeft = this._getScrollLeft.bind(this);\n        const openedIconElement = this.renderer.openedIconElement;\n        const tabIndex = this.options.tabIndex;\n        const $treeElement = this.element;\n        const triggerEvent = this._triggerEvent.bind(this);\n\n        return new FolderElement({\n            closedIconElement,\n            getScrollLeft,\n            node,\n            openedIconElement,\n            tabIndex,\n            $treeElement,\n            triggerEvent,\n        });\n    }\n\n    private createNodeElement(node: Node) {\n        const getScrollLeft = this._getScrollLeft.bind(this);\n        const tabIndex = this.options.tabIndex;\n        const $treeElement = this.element;\n\n        return new NodeElement({\n            getScrollLeft,\n            node,\n            tabIndex,\n            $treeElement,\n        });\n    }\n\n    private openParents(node: Node) {\n        const parent = node.parent;\n\n        if (parent && parent.parent && !parent.is_open) {\n            this.openNode(parent, false);\n        }\n    }\n}\n\nSimpleWidget.register(JqTreeWidget, \"tree\");\n","const version = \"1.8.0\";\n\nexport default version;\n"],"names":["Position","positionNames","before","Before","after","After","inside","Inside","none","None","getPositionName","position","name","Object","prototype","hasOwnProperty","call","DragElement","constructor","_ref","autoEscape","nodeName","offsetX","offsetY","treeElement","this","element","createElement","appendChild","move","pageX","pageY","style","left","top","remove","document","classList","add","textContent","innerHTML","getBoolString","value","getOffsetTop","getElementPosition","rect","getBoundingClientRect","x","window","scrollX","y","scrollY","VisibleNodeIterator","tree","iterate","isFirstNode","_iterateNode","node","nextNode","mustIterateInside","is_open","hasChildren","offsetParent","handleFirstNode","handleOpenFolder","handleClosedFolder","handleNode","childrenLength","children","length","forEach","_","i","child","nextChild","handleAfterOpenFolder","HitAreasGenerator","currentNode","treeBottom","super","generate","positions","lastTop","generateHitAreas","previousTop","group","hitAreas","generateHitAreasForGroup","push","addPosition","area","bottom","positionsInGroup","positionCount","Math","min","areaHeight","round","areaTop","DragAndDropHandler","getNodeElement","getNodeElementForNode","getTree","onCanMove","onCanMoveTo","onDragMove","onDragStop","onIsMoveHandle","openNode","refreshElements","slide","triggerEvent","hoveredArea","isDragging","currentItem","mouseCapture","positionInfo","target","mustCaptureElement","jQuery","nodeElement","mouseStart","undefined","refresh","dragElement","mouseDrag","findHoveredArea","canMoveToArea","isFolder","stopOpenFolderTimer","mustOpenFolderTimer","startOpenFolderTimer","updateDropHint","removeDropHint","originalEvent","mouseStop","moveItem","clear","removeHover","removeHitAreas","hitAreasGenerator","getTreeDimensions","positionName","previousGhost","dimensions","right","low","high","mid","addDropHint","folder","openFolder","openFolderDelay","openFolderTimer","setTimeout","clearTimeout","movedNode","targetNode","previousParent","parent","doMove","moveNode","move_info","moved_node","target_node","previous_parent","do_move","original_event","isDefaultPrevented","clientWidth","clientHeight","ElementsRenderer","buttonLeft","closedIcon","onCreateLi","dragAndDrop","$element","isNodeSelected","openedIcon","rtl","showEmptyFolder","tabIndex","openedIconElement","createButtonElement","closedIconElement","render","fromNode","renderFromNode","renderFromRoot","empty","createDomElements","$previousLi","li","createLi","getLevel","attachNodeData","isRootNode","level","ul","createUl","data","classString","role","className","setAttribute","isSelected","Boolean","isEmptyFolder","createFolderLi","createNodeLi","setTreeItemAriaAttributes","buttonClasses","getButtonClasses","folderClasses","getFolderClasses","iconElement","div","buttonLink","cloneNode","titleSpan","createTitleSpan","liClasses","join","classes","is_loading","createTextNode","nodeType","DataLoader","dataFilter","loadData","onLoadFailed","onLoading","$treeElement","loadFromUrl","urlInfo","parentNode","onFinished","$el","getDomElement","addLoadingClass","notifyLoading","stopLoading","removeLoadingClass","submitRequest","parseData","jqXHR","addClass","removeClass","isLoading","urlInfoInput","handleSuccess","handleError","ajaxSettings","method","cache","dataType","success","error","url","toUpperCase","ajax","parsedData","JSON","parse","KeyHandler","closeNode","getSelectedNode","isFocusOnTree","keyboardSupport","selectNode","originalSelectNode","handleKeyDownHandler","handleKeyDown","bind","addEventListener","deinit","removeEventListener","moveDown","selectedNode","getNextVisibleNode","moveUp","getPreviousVisibleNode","moveRight","moveLeft","getParent","e","canHandleKeyboard","key","register","widgetClass","widgetName","getDataKey","getWidgetData","el","dataKey","widget","SimpleWidget","createWidget","options","get","init","fn","argument1","functionName","destroy","removeData","destroyWidget","_len","arguments","args","Array","_key","callFunction","result","widgetFunction","apply","static","defaults","getPositionInfoFromMouseEvent","getPositionInfoFromTouch","touch","MouseWidget","mouseDown","passive","touchStart","isMouseStarted","mouseDelayTimer","isMouseDelayMet","mouseDownInfo","removeMouseMoveEventListeners","button","handleMouseDown","cancelable","preventDefault","handleMouseUp","handleStartMouse","mouseMove","touchMove","mouseUp","touchEnd","mouseDelay","getMouseDelay","startMouseDelayTimer","handleMouseMove","touches","changedTouches","SaveStateHandler","addToSelection","getNodeById","getSelectedNodes","onGetStateFromStorage","onSetStateFromStorage","removeFromSelection","saveState","saveStateOption","state","stringify","getState","supportsLocalStorage","localStorage","setItem","getKeyName","getStateFromStorage","jsonData","loadFromStorage","parseState","open_nodes","getOpenNodeIds","openNodes","id","selected_node","getSelectedNodeIds","selectedNodeIds","setInitialState","mustLoadOnDemand","openInitialNodes","resetSelection","selectInitialNodes","setInitialStateOnDemand","cbFinished","doSetInitialStateOnDemand","getNodeIdToBeSelected","n","getItem","nodeIds","nodeId","load_on_demand","selectCount","nodeIdsParam","selectedNodes","loadingCount","newNodesIds","loadAndOpenNode","_supportsLocalStorage","testSupport","sessionStorage","removeItem","ContainerScrollParent","container","refreshHitAreas","checkHorizontalScrolling","newHorizontalScrollDirection","getNewHorizontalScrollDirection","horizontalScrollDirection","horizontalScrollTimeout","verticalScrollTimeout","scrollHorizontally","checkVerticalScrolling","newVerticalScrollDirection","getNewVerticalScrollDirection","verticalScrollDirection","scrollVertically","getScrollLeft","scrollLeft","scrollToY","scrollTop","stopScrolling","scrollParentTop","scrollParentBottom","scrollParentOffset","rightEdge","leftEdge","getScrollParentTop","getScrollParentBottom","distance","scrollBy","behavior","DocumentScrollParent","documentElement","treeTop","documentScrollHeight","documentScrollWidth","isNearLeftEdge","innerWidth","canScrollRight","getDocumentScrollWidth","canScrollDown","getDocumentScrollHeight","scrollHeight","scrollWidth","innerHeight","isOverflow","overflowValue","hasOverFlow","getComputedStyle","overflowX","overflowY","createScrollParent","parentElement","getParentWithOverflow","tagName","ScrollHandler","scrollParent","checkScrolling","getScrollParent","SelectNodeHandler","Set","selectedSingleNode","getSelectedNodesUnder","isParentOf","has","includeChildren","delete","isNodeRecordWithChildren","Node","nodeData","isRoot","nodeClass","setData","idMapping","Map","o","loadFromData","removeChildren","childData","createNode","addChild","setParent","addChildAtPosition","index","splice","removeChild","doRemoveChild","getChildIndex","indexOf","callback","_iterate","getData","getDataFromNodes","nodes","map","tmpNode","k","v","getNodeByName","getNodeByCallback","getNodeByNameMustExist","addAfter","nodeInfo","childIndex","loadChildrenFromData","addBefore","addParent","newParent","originalParent","append","prepend","addNodeToIndex","set","removeNodeFromIndex","getPreviousSibling","previousIndex","getNextSibling","nextIndex","getNodesByProperty","filter","f","getNextNode","nextSibling","getPreviousNode","previousSibling","getLastChild","lastChild","initFromData","addChildren","childrenData","addNode","getNodeClass","BorderDropHint","querySelector","hint","width","max","offsetWidth","height","GhostDropHint","ghost","createGhostElement","moveAfter","moveBefore","moveInsideOpenFolder","moveInside","childElement","circleSpan","lineSpan","NodeElement","mustShowBorderDropHint","select","mustSetFocus","getTitleSpan","toString","focus","deselect","removeAttribute","blur","getUl","FolderElement","open","animationSpeed","getButton","icon","doOpen","slideDown","show","close","doClose","slideUp","hide","NODE_PARAM_IS_EMPTY","PARAM_IS_EMPTY","JqTreeWidget","autoOpen","dataUrl","onCanSelectNode","selectable","startDndDelay","useContextMenu","toggle","slideParam","Error","optionsParam","doSelectNode","selectNodeHandler","toJson","doLoadData","loadDataFromUrl","param1","param2","param3","doLoadDataFromUrl","reload","_refreshElements","getNodeByHtmlElement","inputElement","HTMLElement","getNode","parseParams","_openNode","createFolderElement","dndHandler","addNodeAfter","newNodeInfo","existingNode","newNode","addNodeBefore","addParentNode","removeNode","appendNode","parentNodeParam","prependNode","updateNode","idIsChanged","isSelectedNodeInSubtree","subtree","positionIndex","saveStateHandler","openParents","_getNodeElementForNode","scrollToNode","scrollHandler","setState","setOption","option","keyHandler","getVersion","_triggerEvent","eventName","values","event","Event","trigger","doOpenNode","_node","_slide","_onFinished","loadFolderOnDemand","mustSelect","renderer","selectCurrentNode","createNodeElement","_getNodeElement","_getScrollLeft","isInitialized","getRtlOption","getDefaultClosedIcon","connectHandlers","initData","on","handleClick","handleDblclick","handleContextmenu","off","getDataUrlInfo","setUrlInfoData","selectedNodeId","getUrlFromString","initTree","doInit","autoOpenNodes","maxLevel","getAutoOpenMaxLevel","isRestored","restoreState","parseInt","clickTarget","getClickTarget","type","stopPropagation","click_event","closest","jqTreeElement","liElement","deselectCurrentNode","dataRtl","selectOptions","mustToggle","canSelect","previous_node","deselectedNode","deselected_node","deselectNodes","loadSubtree","tree_data","parent_node","selectedNodesUnderParent","urlInfoParam","dataLoader","containsElement","activeElement"],"mappings":";;;;;;;;;;;;;;;;;;;oCAAYA,IAAAA,WAAAA,GAAQ,OAARA,EAAAA,EAAQ,OAAA,GAAA,SAARA,EAAAA,EAAQ,MAAA,GAAA,QAARA,EAAAA,EAAQ,OAAA,GAAA,SAARA,EAAAA,EAAQ,KAAA,GAAA,OAARA,CAAQ,EAAA,CAAA,GAOpB,MAAMC,EAA0C,CAC5CC,OAAQF,EAASG,OACjBC,MAAOJ,EAASK,MAChBC,OAAQN,EAASO,OACjBC,KAAMR,EAASS,MAGNC,EAAmBC,IAC5B,IAAK,MAAMC,KAAQX,EACf,GAAIY,OAAOC,UAAUC,eAAeC,KAAKf,EAAeW,IAChDX,EAAcW,KAAUD,EACxB,OAAOC,EAKnB,MAAO,EAAE,ECfb,MAAMK,EAKFC,WAAAA,CAAWC,GAMW,IANVC,WACRA,EAAUC,SACVA,EAAQC,QACRA,EAAOC,QACPA,EAAOC,YACPA,GACgBL,EAChBM,KAAKH,QAAUA,EACfG,KAAKF,QAAUA,EAEfE,KAAKC,QAAUD,KAAKE,cAAcN,EAAUD,GAE5CI,EAAYI,YAAYH,KAAKC,QACjC,CAEOG,IAAAA,CAAKC,EAAeC,GACvBN,KAAKC,QAAQM,MAAMC,KAAUH,EAAQL,KAAKH,QAAf,KAC3BG,KAAKC,QAAQM,MAAME,IAASH,EAAQN,KAAKF,QAAf,IAC9B,CAEOY,MAAAA,GACHV,KAAKC,QAAQS,QACjB,CAEQR,aAAAA,CAAcN,EAAkBD,GACpC,MAAMM,EAAUU,SAAST,cAAc,QAWvC,OAVAD,EAAQW,UAAUC,IAAI,eAAgB,mBAElClB,EACAM,EAAQa,YAAclB,EAEtBK,EAAQc,UAAYnB,EAGxBK,EAAQM,MAAMrB,SAAW,WAElBe,CACX,EClDG,MAKMe,EAAiBC,GAC1BA,EAAQ,OAAS,QAERC,EAAgBjB,GACzBkB,EAAmBlB,GAASQ,IAEnBU,EAAsBlB,IAC/B,MAAMmB,EAAOnB,EAAQoB,wBAErB,MAAO,CACHb,KAAMY,EAAKE,EAAIC,OAAOC,QACtBf,IAAKW,EAAKK,EAAIF,OAAOG,QACxB,ECfL,MAAeC,EAGXlC,WAAAA,CAAYmC,GACR5B,KAAK4B,KAAOA,CAChB,CAEUC,OAAAA,GACN,IAAIC,GAAc,EAElB,MAAMC,EAAeA,CAACC,EAAYC,KAC9B,IAAIC,GACCF,EAAKG,UAAYH,EAAK/B,UAAY+B,EAAKI,cAExCnC,EAA8B,KAsBlC,GAnBI+B,EAAK/B,SAASoC,eACdpC,EAAU+B,EAAK/B,QAEX6B,IACA9B,KAAKsC,gBAAgBN,GACrBF,GAAc,GAGbE,EAAKI,cAECJ,EAAKG,QACPnC,KAAKuC,iBAAiBP,EAAMA,EAAK/B,WAClCiC,GAAoB,GAGxBlC,KAAKwC,mBAAmBR,EAAMC,EAAUhC,GANxCD,KAAKyC,WAAWT,EAAMC,EAAUD,EAAK/B,UAUzCiC,EAAmB,CACnB,MAAMQ,EAAiBV,EAAKW,SAASC,OACrCZ,EAAKW,SAASE,SAAQ,CAACC,EAAGC,KACtB,MAAMC,EAAQhB,EAAKW,SAASI,GAE5B,GAAIC,EACA,GAAID,IAAML,EAAiB,EACvBX,EAAaiB,EAAO,UACjB,CACH,MAAMC,EAAYjB,EAAKW,SAASI,EAAI,GAEhCE,GACAlB,EAAaiB,EAAOC,EAE5B,CACJ,IAGAjB,EAAKG,SAAWlC,GAChBD,KAAKkD,sBAAsBlB,EAAMC,EAEzC,GAGJF,EAAa/B,KAAK4B,KAAM,KAC5B,ECzDJ,MAAMuB,UAA0BxB,EAM5BlC,WAAAA,CAAYmC,EAAYwB,EAAmBC,GACvCC,MAAM1B,GAEN5B,KAAKoD,YAAcA,EACnBpD,KAAKqD,WAAaA,CACtB,CAEOE,QAAAA,GAMH,OALAvD,KAAKwD,UAAY,GACjBxD,KAAKyD,QAAU,EAEfzD,KAAK6B,UAEE7B,KAAK0D,iBAAiB1D,KAAKwD,UACtC,CAEUE,gBAAAA,CAAiBF,GACvB,IAAIG,EAAcH,EAAU,IAAI/C,KAAO,EACnCmD,EAAQ,GACZ,MAAMC,EAAsB,GAE5B,IAAK,MAAM3E,KAAYsE,EACftE,EAASuB,MAAQkD,GAAeC,EAAMhB,SACtC5C,KAAK8D,yBACDD,EACAD,EACAD,EACAzE,EAASuB,KAGbkD,EAAczE,EAASuB,IACvBmD,EAAQ,IAGZA,EAAMG,KAAK7E,GAUf,OAPAc,KAAK8D,yBACDD,EACAD,EACAD,EACA3D,KAAKqD,YAGFQ,CACX,CAEUtB,gBAAAA,CAAiBP,EAAY/B,GACnC,OAAI+B,IAAShC,KAAKoD,cAOdpB,EAAKW,SAAS,KAAO3C,KAAKoD,aAC1BpD,KAAKgE,YAAYhC,EAAMzD,EAASO,OAAQoC,EAAajB,KAIlD,EACX,CAEUuC,kBAAAA,CACNR,EACAC,EACAhC,GAEA,MAAMQ,EAAMS,EAAajB,GAErB+B,IAAShC,KAAKoD,YAEdpD,KAAKgE,YAAYhC,EAAMzD,EAASS,KAAMyB,IAEtCT,KAAKgE,YAAYhC,EAAMzD,EAASO,OAAQ2B,GAGpCwB,IAAajC,KAAKoD,aAClBpD,KAAKgE,YAAYhC,EAAMzD,EAASK,MAAO6B,GAGnD,CAEU6B,eAAAA,CAAgBN,GAClBA,IAAShC,KAAKoD,aACdpD,KAAKgE,YAAYhC,EAAMzD,EAASG,OAAQwC,EAAac,EAAK/B,SAElE,CAEUiD,qBAAAA,CAAsBlB,EAAYC,GACpCD,IAAShC,KAAKoD,aAAenB,IAAajC,KAAKoD,YAE/CpD,KAAKgE,YAAYhC,EAAMzD,EAASS,KAAMgB,KAAKyD,SAE3CzD,KAAKgE,YAAYhC,EAAMzD,EAASK,MAAOoB,KAAKyD,QAEpD,CAEUhB,UAAAA,CACNT,EACAC,EACAhC,GAEA,MAAMQ,EAAMS,EAAajB,GAErB+B,IAAShC,KAAKoD,YAEdpD,KAAKgE,YAAYhC,EAAMzD,EAASS,KAAMyB,GAEtCT,KAAKgE,YAAYhC,EAAMzD,EAASO,OAAQ2B,GAGxCwB,IAAajC,KAAKoD,aAAepB,IAAShC,KAAKoD,YAE/CpD,KAAKgE,YAAYhC,EAAMzD,EAASS,KAAMyB,GAEtCT,KAAKgE,YAAYhC,EAAMzD,EAASK,MAAO6B,EAE/C,CAEQuD,WAAAA,CAAYhC,EAAY9C,EAAkBuB,GAC9C,MAAMwD,EAAO,CACTxD,MACAyD,OAAQ,EACRlC,OACA9C,YAGJc,KAAKwD,UAAUO,KAAKE,GACpBjE,KAAKyD,QAAUhD,CACnB,CAEQqD,wBAAAA,CACJD,EACAM,EACA1D,EACAyD,GAGA,MAAME,EAAgBC,KAAKC,IAAIH,EAAiBvB,OAAQ,GAElD2B,EAAaF,KAAKG,OAAON,EAASzD,GAAO2D,GAC/C,IAAIK,EAAUhE,EAEVsC,EAAI,EACR,KAAOA,EAAIqB,GAAe,CACtB,MAAMlF,EAAWiF,EAAiBpB,GAE9B7D,GACA2E,EAASE,KAAK,CACVtD,IAAKgE,EACLP,OAAQO,EAAUF,EAClBvC,KAAM9C,EAAS8C,KACf9C,SAAUA,EAASA,WAI3BuF,GAAWF,EACXxB,GAAK,CACT,CACJ,EC3HG,MAAM2B,EAyBTjF,WAAAA,CAAWC,GAekB,IAfjBC,WACRA,EAAUgF,eACVA,EAAcC,sBACdA,EAAqBC,QACrBA,EAAOC,UACPA,EAASC,YACTA,EAAWC,WACXA,EAAUC,WACVA,EAAUC,eACVA,EAAcC,SACdA,EAAQC,gBACRA,EAAeC,MACfA,EAAKtF,YACLA,EAAWuF,aACXA,GACuB5F,EACvBM,KAAKL,WAAaA,EAClBK,KAAK2E,eAAiBA,EACtB3E,KAAK4E,sBAAwBA,EAC7B5E,KAAK6E,QAAUA,EACf7E,KAAK8E,UAAYA,EACjB9E,KAAK+E,YAAcA,EACnB/E,KAAKgF,WAAaA,EAClBhF,KAAKiF,WAAaA,EAClBjF,KAAKkF,eAAiBA,EACtBlF,KAAKmF,SAAWA,EAChBnF,KAAKoF,gBAAkBA,EACvBpF,KAAKqF,MAAQA,EACbrF,KAAKD,YAAcA,EACnBC,KAAKsF,aAAeA,EAEpBtF,KAAKuF,YAAc,KACnBvF,KAAK6D,SAAW,GAChB7D,KAAKwF,YAAa,EAClBxF,KAAKyF,YAAc,IACvB,CAEOC,YAAAA,CAAaC,GAChB,MAAM1F,EAAU0F,EAAaC,OAE7B,IAAK5F,KAAK6F,mBAAmB5F,GACzB,OAAO,KAGX,GAAID,KAAKkF,iBAAmBlF,KAAKkF,eAAeY,OAAO7F,IACnD,OAAO,KAGX,IAAI8F,EAAc/F,KAAK2E,eAAe1E,GAStC,OAPI8F,GAAe/F,KAAK8E,YACf9E,KAAK8E,UAAUiB,EAAY/D,QAC5B+D,EAAc,OAItB/F,KAAKyF,YAAcM,EACQ,MAApB/F,KAAKyF,WAChB,CAEOO,UAAAA,CAAWL,GACd,IACK3F,KAAKyF,kBACiBQ,IAAvBN,EAAatF,YACU4F,IAAvBN,EAAarF,MAEb,OAAO,EAGXN,KAAKkG,UAEL,MAAM1F,KAAEA,EAAIC,IAAEA,GAAQU,EAAmBwE,EAAaC,QAEhD5D,EAAOhC,KAAKyF,YAAYzD,KAa9B,OAXAhC,KAAKmG,YAAc,IAAI3G,EAAY,CAC/BG,WAAYK,KAAKL,aAAc,EAC/BC,SAAUoC,EAAK7C,KACfU,QAAS8F,EAAatF,MAAQG,EAC9BV,QAAS6F,EAAarF,MAAQG,EAC9BV,YAAaC,KAAKD,cAGtBC,KAAKwF,YAAa,EAClBxF,KAAKyF,YAAYxF,QAAQW,UAAUC,IAAI,kBAEhC,CACX,CAEOuF,SAAAA,CAAUT,GACb,IACK3F,KAAKyF,cACLzF,KAAKmG,kBACiBF,IAAvBN,EAAatF,YACU4F,IAAvBN,EAAarF,MAEb,OAAO,EAGXN,KAAKmG,YAAY/F,KAAKuF,EAAatF,MAAOsF,EAAarF,OAEvD,MAAM2D,EAAOjE,KAAKqG,gBACdV,EAAatF,MACbsF,EAAarF,OAmCjB,OAhCI2D,GAAQjE,KAAKsG,cAAcrC,IACtBA,EAAKjC,KAAKuE,YACXvG,KAAKwG,sBAGLxG,KAAKuF,cAAgBtB,IACrBjE,KAAKuF,YAActB,EAGfjE,KAAKyG,oBAAoBxC,GACzBjE,KAAK0G,qBAAqBzC,EAAKjC,MAE/BhC,KAAKwG,sBAGTxG,KAAK2G,oBAGT3G,KAAK4G,iBACL5G,KAAKwG,sBACLxG,KAAKuF,YAActB,GAGlBA,GACGjE,KAAKgF,YACLhF,KAAKgF,WACDhF,KAAKyF,YAAYzD,KACjB2D,EAAakB,gBAKlB,CACX,CAEOC,SAAAA,CAAUnB,GACb3F,KAAK+G,SAASpB,GACd3F,KAAKgH,QACLhH,KAAKiH,cACLjH,KAAK4G,iBACL5G,KAAKkH,iBAEL,MAAMzB,EAAczF,KAAKyF,YAezB,OAbIzF,KAAKyF,cACLzF,KAAKyF,YAAYxF,QAAQW,UAAUF,OAAO,iBAC1CV,KAAKyF,YAAc,MAGvBzF,KAAKwF,YAAa,GAEbxF,KAAKuF,aAAeE,GACjBzF,KAAKiF,YACLjF,KAAKiF,WAAWQ,EAAYzD,KAAM2D,EAAakB,gBAIhD,CACX,CAEOX,OAAAA,GACHlG,KAAKkH,iBAEDlH,KAAKyF,cACLzF,KAAK0D,mBAEL1D,KAAKyF,YAAczF,KAAK4E,sBACpB5E,KAAKyF,YAAYzD,MAGjBhC,KAAKwF,YACLxF,KAAKyF,YAAYxF,QAAQW,UAAUC,IAAI,iBAGnD,CAEQ6C,gBAAAA,GACJ,MAAM9B,EAAO5B,KAAK6E,UAElB,GAAK7E,KAAKyF,aAAgB7D,EAEnB,CACH,MAAMuF,EAAoB,IAAIhE,EAC1BvB,EACA5B,KAAKyF,YAAYzD,KACjBhC,KAAKoH,oBAAoBlD,QAE7BlE,KAAK6D,SAAWsD,EAAkB5D,UACtC,MARIvD,KAAK6D,SAAW,EASxB,CAEQgC,kBAAAA,CAAmB5F,GACvB,MAAML,EAAWK,EAAQL,SAEzB,MACiB,UAAbA,GACa,WAAbA,GACa,aAAbA,CAER,CAEQ0G,aAAAA,CAAcrC,GAClB,IAAKjE,KAAK+E,YACN,OAAO,EAGX,IAAK/E,KAAKyF,YACN,OAAO,EAGX,MAAM4B,EAAepI,EAAgBgF,EAAK/E,UAE1C,OAAOc,KAAK+E,YAAY/E,KAAKyF,YAAYzD,KAAMiC,EAAKjC,KAAMqF,EAC9D,CAEQH,cAAAA,GACJlH,KAAK6D,SAAW,EACpB,CAEQmD,KAAAA,GACAhH,KAAKmG,cACLnG,KAAKmG,YAAYzF,SACjBV,KAAKmG,YAAc,KAE3B,CAEQS,cAAAA,GACA5G,KAAKsH,eACLtH,KAAKsH,cAAc5G,QAE3B,CAEQuG,WAAAA,GACJjH,KAAKuF,YAAc,IACvB,CAEQc,eAAAA,CAAgB/E,EAAWG,GAC/B,MAAM8F,EAAavH,KAAKoH,oBAExB,GACI9F,EAAIiG,EAAW/G,MACfiB,EAAI8F,EAAW9G,KACfa,EAAIiG,EAAWC,OACf/F,EAAI8F,EAAWrD,OAEf,OAAO,KAGX,IAAIuD,EAAM,EACNC,EAAO1H,KAAK6D,SAASjB,OACzB,KAAO6E,EAAMC,GAAM,CACf,MAAMC,EAAOF,EAAMC,GAAS,EACtBzD,EAAOjE,KAAK6D,SAAS8D,GAE3B,IAAK1D,EACD,OAAO,KAGX,GAAIxC,EAAIwC,EAAKxD,IACTiH,EAAOC,MACJ,MAAIlG,EAAIwC,EAAKC,QAGhB,OAAOD,EAFPwD,EAAME,EAAM,CAGhB,CACJ,CAEA,OAAO,IACX,CAEQlB,mBAAAA,CAAoBxC,GACxB,MAAMjC,EAAOiC,EAAKjC,KAElB,OACIA,EAAKuE,aACJvE,EAAKG,SACN8B,EAAK/E,WAAaX,EAASO,MAEnC,CAEQ6H,cAAAA,GACJ,IAAK3G,KAAKuF,YACN,OAIJvF,KAAK4G,iBAGL,MAAMb,EAAc/F,KAAK4E,sBAAsB5E,KAAKuF,YAAYvD,MAChEhC,KAAKsH,cAAgBvB,EAAY6B,YAAY5H,KAAKuF,YAAYrG,SAClE,CAEQwH,oBAAAA,CAAqBmB,GACzB,MAAMC,EAAaA,KACf9H,KAAKmF,SAAS0C,EAAQ7H,KAAKqF,OAAO,KAC9BrF,KAAKkG,UACLlG,KAAK2G,gBAAgB,GACvB,EAGN3G,KAAKwG,sBAEL,MAAMuB,EAAkB/H,KAAK+H,iBAEL,IAApBA,IACA/H,KAAKgI,gBAAkBzG,OAAO0G,WAC1BH,EACAC,GAGZ,CAEQvB,mBAAAA,GACAxG,KAAKgI,kBACLE,aAAalI,KAAKgI,iBAClBhI,KAAKgI,gBAAkB,KAE/B,CAEQjB,QAAAA,CAASpB,GACb,GACI3F,KAAKyF,aACLzF,KAAKuF,aACLvF,KAAKuF,YAAYrG,WAAaX,EAASS,MACvCgB,KAAKsG,cAActG,KAAKuF,aAC1B,CACE,MAAM4C,EAAYnI,KAAKyF,YAAYzD,KAC7BoG,EAAapI,KAAKuF,YAAYvD,KAC9B9C,EAAWc,KAAKuF,YAAYrG,SAC5BmJ,EAAiBF,EAAUG,OAE7BpJ,IAAaX,EAASO,SACtBkB,KAAKuF,YAAYvD,KAAKG,SAAU,GAGpC,MAAMoG,EAASA,KACX,MAAM3G,EAAO5B,KAAK6E,UAEdjD,IACAA,EAAK4G,SAASL,EAAWC,EAAYlJ,GAErCc,KAAKD,YAAYe,YAAc,GAC/Bd,KAAKoF,gBAAgB,MACzB,EAGUpF,KAAKsF,aAAa,YAAa,CACzCmD,UAAW,CACPC,WAAYP,EACZQ,YAAaP,EACblJ,SAAUD,EAAgBC,GAC1B0J,gBAAiBP,EACjBQ,QAASN,EACTO,eAAgBnD,EAAakB,iBAI1BkC,sBACPR,GAER,CACJ,CAEQnB,iBAAAA,GAGJ,MAAM5G,KAAEA,EAAIC,IAAEA,GAAQU,EAAmBnB,KAAKD,aAE9C,MAAO,CACHS,OACAC,MACA+G,MAAOhH,EAAOR,KAAKD,YAAYiJ,YAC/B9E,OAAQzD,EAAMT,KAAKD,YAAYkJ,aAAe,GAEtD,ECnbW,MAAMC,EAcjBzJ,WAAAA,CAAWC,GAagB,IAbfC,WACRA,EAAUwJ,WACVA,EAAUC,WACVA,EAAUC,WACVA,EAAUC,YACVA,EAAWC,SACXA,EAAQ1E,QACRA,EAAO2E,eACPA,EAAcC,WACdA,EAAUC,IACVA,EAAGC,gBACHA,EAAeC,SACfA,GACqBlK,EACrBM,KAAKL,WAAaA,EAClBK,KAAKmJ,WAAaA,EAClBnJ,KAAKsJ,YAAcA,EACnBtJ,KAAKuJ,SAAWA,EAChBvJ,KAAK6E,QAAUA,EACf7E,KAAKwJ,eAAiBA,EACtBxJ,KAAKqJ,WAAaA,EAClBrJ,KAAK0J,IAAMA,EACX1J,KAAK2J,gBAAkBA,EACvB3J,KAAK4J,SAAWA,EAChB5J,KAAK6J,kBAAoB7J,KAAK8J,oBAAoBL,GAAc,KAChEzJ,KAAK+J,kBAAoB/J,KAAK8J,oBAAoBV,GAAc,IACpE,CAEOY,MAAAA,CAAOC,GACNA,GAAYA,EAAS3B,OACrBtI,KAAKkK,eAAeD,GAEpBjK,KAAKmK,gBAEb,CAEOA,cAAAA,GACHnK,KAAKuJ,SAASa,QAEd,MAAMxI,EAAO5B,KAAK6E,UAEd7E,KAAKuJ,SAAS,IAAM3H,GACpB5B,KAAKqK,kBAAkBrK,KAAKuJ,SAAS,GAAI3H,EAAKe,UAAU,EAAM,EAEtE,CAEOuH,cAAAA,CAAelI,GAElB,MAAMsI,EAAcxE,OAAO9D,EAAK/B,SAG1BsK,EAAKvK,KAAKwK,SAASxI,EAAMA,EAAKyI,YACpCzK,KAAK0K,eAAe1I,EAAMuI,GAG1BD,EAAY3L,MAAM4L,GAGlBD,EAAY5J,SAGRsB,EAAKW,UACL3C,KAAKqK,kBACDE,EACAvI,EAAKW,UACL,EACAX,EAAKyI,WAAa,EAG9B,CAEQJ,iBAAAA,CACJpK,EACA0C,EACAgI,EACAC,GAEA,MAAMC,EAAK7K,KAAK8K,SAASH,GACzB1K,EAAQE,YAAY0K,GAEpB,IAAK,MAAM7H,KAASL,EAAU,CAC1B,MAAM4H,EAAKvK,KAAKwK,SAASxH,EAAO4H,GAChCC,EAAG1K,YAAYoK,GAEfvK,KAAK0K,eAAe1H,EAAOuH,GAEvBvH,EAAMZ,eACNpC,KAAKqK,kBAAkBE,EAAIvH,EAAML,UAAU,EAAOiI,EAAQ,EAElE,CACJ,CAEQF,cAAAA,CAAe1I,EAAYuI,GAC/BvI,EAAK/B,QAAUsK,EACfzE,OAAOyE,GAAIQ,KAAK,OAAQ/I,EAC5B,CAEQ8I,QAAAA,CAASH,GACb,IAAIK,EACAC,EAECN,GAIDK,EAAc,cACdC,EAAO,OAEHjL,KAAK0J,MACLsB,GAAe,iBAPnBA,EAAc,GACdC,EAAO,SAUPjL,KAAKsJ,cACL0B,GAAe,eAGnB,MAAMH,EAAKlK,SAAST,cAAc,MAKlC,OAJA2K,EAAGK,UAAa,iBAAgBF,IAEhCH,EAAGM,aAAa,OAAQF,GAEjBJ,CACX,CAEQL,QAAAA,CAASxI,EAAY4I,GACzB,MAAMQ,EAAaC,QAAQrL,KAAKwJ,eAAexH,IAKzCuI,EAFFvI,EAAKuE,YAAevE,EAAKsJ,eAAiBtL,KAAK2J,gBAG7C3J,KAAKuL,eAAevJ,EAAM4I,EAAOQ,GACjCpL,KAAKwL,aAAaxJ,EAAM4I,EAAOQ,GAMrC,OAJIpL,KAAKqJ,YACLrJ,KAAKqJ,WAAWrH,EAAM8D,OAAOyE,GAAKa,GAG/Bb,CACX,CAEQkB,yBAAAA,CACJxL,EACAd,EACAyL,EACAQ,GAEAnL,EAAQkL,aAAa,aAAchM,GACnCc,EAAQkL,aAAa,aAAe,GAAEP,KACtC3K,EAAQkL,aAAa,gBAAiBnK,EAAcoK,IACpDnL,EAAQkL,aAAa,OAAQ,WACjC,CAEQI,cAAAA,CACJvJ,EACA4I,EACAQ,GAEA,MAAMM,EAAgB1L,KAAK2L,iBAAiB3J,GACtC4J,EAAgB5L,KAAK6L,iBAAiB7J,EAAMoJ,GAE5CU,EAAc9J,EAAKG,QACnBnC,KAAK6J,kBACL7J,KAAK+J,kBAGLQ,EAAK5J,SAAST,cAAc,MAClCqK,EAAGW,UAAa,iBAAgBU,IAChCrB,EAAGY,aAAa,OAAQ,QAGxB,MAAMY,EAAMpL,SAAST,cAAc,OACnC6L,EAAIb,UAAY,+BAChBa,EAAIZ,aAAa,OAAQ,QAEzBZ,EAAGpK,YAAY4L,GAGf,MAAMC,EAAarL,SAAST,cAAc,KAC1C8L,EAAWd,UAAYQ,EAEnBI,GACAE,EAAW7L,YAAY2L,EAAYG,WAAU,IAG7CjM,KAAKmJ,YACL4C,EAAI5L,YAAY6L,GAIpB,MAAME,EAAYlM,KAAKmM,gBACnBnK,EAAK7C,KACLiM,GACA,EACAR,GASJ,OAPAsB,EAAUf,aAAa,gBAAiBnK,EAAcgB,EAAKG,UAC3D4J,EAAI5L,YAAY+L,GAEXlM,KAAKmJ,YACN4C,EAAI5L,YAAY6L,GAGbzB,CACX,CAEQiB,YAAAA,CACJxJ,EACA4I,EACAQ,GAEA,MAAMgB,EAAY,CAAC,iBAEfhB,GACAgB,EAAUrI,KAAK,mBAGnB,MAAMiH,EAAcoB,EAAUC,KAAK,KAG7B9B,EAAK5J,SAAST,cAAc,MAClCqK,EAAGW,UAAYF,EACfT,EAAGY,aAAa,OAAQ,QAGxB,MAAMY,EAAMpL,SAAST,cAAc,OACnC6L,EAAIb,UAAY,+BAChBa,EAAIZ,aAAa,OAAQ,QAEzBZ,EAAGpK,YAAY4L,GAGf,MAAMG,EAAYlM,KAAKmM,gBACnBnK,EAAK7C,KACLiM,GACA,EACAR,GAIJ,OAFAmB,EAAI5L,YAAY+L,GAET3B,CACX,CAEQ4B,eAAAA,CACJvM,EACAwL,EACA7E,EACAqE,GAEA,MAAMsB,EAAYvL,SAAST,cAAc,QAEzC,IAAIoM,EAAU,6BAUd,GARI/F,IACA+F,GAAW,wBAGfA,GAAY,yBAAuBtM,KAAKmJ,WAAa,OAAS,SAE9D+C,EAAUhB,UAAYoB,EAElBlB,EAAY,CACZ,MAAMxB,EAAW5J,KAAK4J,cAEL3D,IAAb2D,GACAsC,EAAUf,aAAa,WAAa,GAAEvB,IAE9C,CAUA,OARA5J,KAAKyL,0BAA0BS,EAAWtM,EAAUgL,EAAOQ,GAEvDpL,KAAKL,WACLuM,EAAUpL,YAAclB,EAExBsM,EAAUnL,UAAYnB,EAGnBsM,CACX,CAEQP,gBAAAA,CAAiB3J,GACrB,MAAMsK,EAAU,CAAC,iBAAkB,iBAYnC,OAVKtK,EAAKG,SACNmK,EAAQvI,KAAK,iBAGb/D,KAAKmJ,WACLmD,EAAQvI,KAAK,uBAEbuI,EAAQvI,KAAK,wBAGVuI,EAAQD,KAAK,IACxB,CAEQR,gBAAAA,CAAiB7J,EAAYoJ,GACjC,MAAMkB,EAAU,CAAC,iBAcjB,OAZKtK,EAAKG,SACNmK,EAAQvI,KAAK,iBAGbqH,GACAkB,EAAQvI,KAAK,mBAGb/B,EAAKuK,YACLD,EAAQvI,KAAK,kBAGVuI,EAAQD,KAAK,IACxB,CAEQvC,mBAAAA,CACJ7I,GAEA,GAAqB,iBAAVA,EAAoB,CAE3B,MAAM8K,EAAMpL,SAAST,cAAc,OAGnC,OAFA6L,EAAIhL,UAAYE,EAETN,SAAS6L,eAAeT,EAAIhL,UACvC,CAAO,OAAa,MAATE,OACP,EACQA,EAAsBwL,SACvBxL,EAEA6E,OAAO7E,GAAO,EAE7B,EC9VW,MAAMyL,EAQjBjN,WAAAA,CAAWC,GAOU,IAPTiN,WACRA,EAAUC,SACVA,EAAQC,aACRA,EAAYC,UACZA,EAASC,aACTA,EAAYzH,aACZA,GACe5F,EACfM,KAAK2M,WAAaA,EAClB3M,KAAK4M,SAAWA,EAChB5M,KAAK6M,aAAeA,EACpB7M,KAAK8M,UAAYA,EACjB9M,KAAK+M,aAAeA,EACpB/M,KAAKsF,aAAeA,CACxB,CAEO0H,WAAAA,CACHC,EACAC,EACAC,GAEA,IAAKF,EACD,OAGJ,MAAMG,EAAMpN,KAAKqN,cAAcH,GAC/BlN,KAAKsN,gBAAgBF,GACrBpN,KAAKuN,eAAc,EAAML,EAAYE,GAErC,MAAMI,EAAcA,KAChBxN,KAAKyN,mBAAmBL,GACxBpN,KAAKuN,eAAc,EAAOL,EAAYE,EAAI,EAoB9CpN,KAAK0N,cAAcT,GAjBIlC,IACnByC,IACAxN,KAAK4M,SAAS5M,KAAK2N,UAAU5C,GAAOmC,GAEhCC,GAAoC,mBAAfA,GACrBA,GACJ,IAGiBS,IACjBJ,IAEIxN,KAAK6M,cACL7M,KAAK6M,aAAae,EACtB,GAIR,CAEQN,eAAAA,CAAgBF,GAChBA,GACAA,EAAIS,SAAS,iBAErB,CAEQJ,kBAAAA,CAAmBL,GACnBA,GACAA,EAAIU,YAAY,iBAExB,CAEQT,aAAAA,CAAcH,GAClB,OAAIA,EACOpH,OAAOoH,EAAWjN,SAElBD,KAAK+M,YAEpB,CAEQQ,aAAAA,CACJQ,EACA/L,EACAoL,GAEIpN,KAAK8M,WACL9M,KAAK8M,UAAUiB,EAAW/L,EAAMoL,GAGpCpN,KAAKsF,aAAa,oBAAqB,CACnCyI,YACA/L,OACAoL,OAER,CAEQM,aAAAA,CACJM,EACAC,EACAC,GAEA,MAKMC,EAAoC,CACtCC,OAAQ,MACRC,OAAO,EACPC,SAAU,OACVC,QAASN,EACTO,MAAON,KATiB,iBAAjBF,EACD,CAAES,IAAKT,GACPA,GAWVG,EAAaC,OAASD,EAAaC,QAAQM,eAAiB,MAEvD5I,OAAO6I,KAAKR,EACrB,CAEQR,SAAAA,CAAU5C,GACd,MAQM6D,EAPkB,iBAAT7D,EACA8D,KAAKC,MAAM/D,GAEXA,EAMf,OAAI/K,KAAK2M,WACE3M,KAAK2M,WAAWiC,GAEhBA,CAEf,ECrIW,MAAMG,EASjBtP,WAAAA,CAAWC,GAOU,IAPTsP,UACRA,EAASC,gBACTA,EAAeC,cACfA,EAAaC,gBACbA,EAAehK,SACfA,EAAQiK,WACRA,GACe1P,EACfM,KAAKgP,UAAYA,EACjBhP,KAAKiP,gBAAkBA,EACvBjP,KAAKkP,cAAgBA,EACrBlP,KAAKmP,gBAAkBA,EACvBnP,KAAKmF,SAAWA,EAChBnF,KAAKqP,mBAAqBD,EAEtBD,IACAnP,KAAKsP,qBAAuBtP,KAAKuP,cAAcC,KAAKxP,MAEpDW,SAAS8O,iBAAiB,UAAWzP,KAAKsP,sBAElD,CAEOI,MAAAA,GACC1P,KAAKsP,sBACL3O,SAASgP,oBAAoB,UAAW3P,KAAKsP,qBAErD,CAEOM,QAAAA,CAASC,GACZ,OAAO7P,KAAKoP,WAAWS,EAAaC,qBACxC,CAEOC,MAAAA,CAAOF,GACV,OAAO7P,KAAKoP,WAAWS,EAAaG,yBACxC,CAEOC,SAAAA,CAAUJ,GACb,OAAKA,EAAatJ,aAIVsJ,EAAa1N,QAENnC,KAAKoP,WAAWS,EAAaC,uBAGpC9P,KAAKmF,SAAS0K,IACP,GAGnB,CAEOK,QAAAA,CAASL,GACZ,OAAIA,EAAatJ,YAAcsJ,EAAa1N,SAExCnC,KAAKgP,UAAUa,IACR,GAGA7P,KAAKoP,WAAWS,EAAaM,YAE5C,CAEOf,UAAAA,CAAWpN,GACd,OAAKA,IAGDhC,KAAKqP,mBAAmBrN,IAEjB,EAEf,CAEQuN,cAAiBa,IACrB,IAAKpQ,KAAKqQ,oBACN,OAAO,EAGX,MAAMR,EAAe7P,KAAKiP,kBAC1B,IAAKY,EACD,OAAO,EAGX,OAAQO,EAAEE,KACN,IAAK,YACD,OAAOtQ,KAAK4P,SAASC,GAEzB,IAAK,UACD,OAAO7P,KAAK+P,OAAOF,GAEvB,IAAK,aACD,OAAO7P,KAAKiQ,UAAUJ,GAE1B,IAAK,YACD,OAAO7P,KAAKkQ,SAASL,GAEzB,QACI,OAAO,EACf,EAGIQ,iBAAAA,GACJ,OAAOrQ,KAAKmP,iBAAmBnP,KAAKkP,eACxC,ECpIJ,MAAMqB,EAAWA,CAACC,EAAsBC,KACpC,MAAMC,EAAaA,IAAe,iBAAgBD,IAE5CE,EAAgBA,CAClBC,EACAC,KAEA,MAAMC,EAAShL,OAAOiF,KAAK6F,EAAIC,GAE/B,OAAIC,GAAUA,aAAkBC,EACrBD,EAEA,IACX,EAGEE,EAAeA,CAAC5D,EAAa6D,KAC/B,MAAMJ,EAAUH,IAEhB,IAAK,MAAME,KAAMxD,EAAI8D,MAAO,CAGxB,IAFuBP,EAAcC,EAAIC,GAEpB,CACjB,MACMC,EAAS,IADWN,EACWI,EAAIK,GAEpCnL,OAAOiF,KAAK6F,EAAIC,IACjB/K,OAAOiF,KAAK6F,EAAIC,EAASC,GAI7BA,EAAOK,MACX,CACJ,CAEA,OAAO/D,CAAG,EAyCbtH,OAAOsL,GAAWX,GAAc,SAE7BY,GAGA,IAAKA,EACD,OAAOL,EAAahR,KAAM,MACvB,GAAyB,iBAAdqR,EAAwB,CAEtC,OAAOL,EAAahR,KADJqR,EAEpB,CAAO,GAAyB,iBAAdA,GAA2C,MAAjBA,EAAU,GAAY,CAC9D,MAAMC,EAAeD,EAErB,GAAqB,YAAjBC,EACA,MApDWlE,KACnB,MAAMyD,EAAUH,IAEhB,IAAK,MAAME,KAAMxD,EAAI8D,MAAO,CACxB,MAAMJ,EAASH,EAAcC,EAAIC,GAE7BC,GACAA,EAAOS,UAGXzL,OAAO0L,WAAWZ,EAAIC,EAC1B,GAyCeY,CAAczR,MAClB,GAAqB,qBAAjBsR,EACP,OAAOd,EACJ,IAAAkB,IAAAA,EAAAC,UAAA/O,OAdRgP,MAAIC,MAAAH,EAAAA,EAAAA,OAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAJF,EAAIE,EAAAH,GAAAA,UAAAG,GAeC,MA1CSC,EACjB3E,EACAkE,EACAM,KAEA,IAAII,EAAS,KAEb,IAAK,MAAMpB,KAAMxD,EAAI8D,MAAO,CACxB,MAAMJ,EAAShL,OAAOiF,KAAK6F,EAAIF,KAE/B,GAAII,GAAUA,aAAkBC,EAAc,CAC1C,MACMkB,EADenB,EACeQ,GAEhCW,GAA4C,mBAAnBA,IACzBD,EAASC,EAAeC,MAAMpB,EAAQc,GAE9C,CACJ,CAEA,OAAOI,CAAM,EAsBED,CAAa/R,KAAMsR,EAAcM,EAEhD,EAGH,EAGU,MAAMb,EACjB,eAAcR,CAASC,EAAsBC,GACzCF,EAASC,EAAaC,EAC1B,CAIA0B,gBAAqC,CAAA,EAMrC1S,WAAAA,CAAYmR,EAAiBK,GACzBjR,KAAKoN,IAAMtH,OAAO8K,GAGlB,MAAMwB,EAAYpS,KAAKP,YAA8B,SACrDO,KAAKiR,QAAU,IAAKmB,KAAanB,EACrC,CAEOM,OAAAA,GACHvR,KAAK0P,QACT,CAEOyB,IAAAA,GACH,CAGGzB,MAAAA,GACH,EC9HR,MAAM2C,EAAiCjC,IAAiC,CACpE/P,MAAO+P,EAAE/P,MACTC,MAAO8P,EAAE9P,MACTsF,OAAQwK,EAAExK,OACViB,cAAeuJ,IAGbkC,EAA2BA,CAC7BC,EACAnC,KACgB,CAChB/P,MAAOkS,EAAMlS,MACbC,MAAOiS,EAAMjS,MACbsF,OAAQ2M,EAAM3M,OACdiB,cAAeuJ,IAGnB,MAAeoC,UAAmCzB,EAMvCI,IAAAA,GACH,MAAMlR,EAAUD,KAAKoN,IAAI8D,IAAI,GAEzBjR,IACAA,EAAQwP,iBAAiB,YAAazP,KAAKyS,UAAW,CAClDC,SAAS,IAEbzS,EAAQwP,iBAAiB,aAAczP,KAAK2S,WAAY,CACpDD,SAAS,KAIjB1S,KAAK4S,gBAAiB,EACtB5S,KAAK6S,gBAAkB,KACvB7S,KAAK8S,iBAAkB,EACvB9S,KAAK+S,cAAgB,IACzB,CAEOrD,MAAAA,GACH,MAAMkB,EAAK5Q,KAAKoN,IAAI8D,IAAI,GAEpBN,IAECA,EAAWjB,oBAAoB,YAAa3P,KAAKyS,UAAW,CACzDC,SAAS,IAIZ9B,EAAWjB,oBAAoB,aAAc3P,KAAK2S,WAAY,CAC3DD,SAAS,KAIjB1S,KAAKgT,+BACT,CAYQP,UAAarC,IAEjB,GAAiB,IAAbA,EAAE6C,OACF,OAGWjT,KAAKkT,gBAAgBb,EAA8BjC,KAEpDA,EAAE+C,YACZ/C,EAAEgD,gBACN,EAGIF,eAAAA,CAAgBvN,GAQpB,OANI3F,KAAK4S,gBACL5S,KAAKqT,cAAc1N,GAGvB3F,KAAK+S,cAAgBpN,IAEhB3F,KAAK0F,aAAaC,KAIvB3F,KAAKsT,oBAEE,EACX,CAEQA,gBAAAA,GACJ3S,SAAS8O,iBAAiB,YAAazP,KAAKuT,UAAW,CACnDb,SAAS,IAEb/R,SAAS8O,iBAAiB,YAAazP,KAAKwT,UAAW,CACnDd,SAAS,IAEb/R,SAAS8O,iBAAiB,UAAWzP,KAAKyT,QAAS,CAAEf,SAAS,IAC9D/R,SAAS8O,iBAAiB,WAAYzP,KAAK0T,SAAU,CACjDhB,SAAS,IAGb,MAAMiB,EAAa3T,KAAK4T,gBAEpBD,EACA3T,KAAK6T,qBAAqBF,GAE1B3T,KAAK8S,iBAAkB,CAE/B,CAEQe,oBAAAA,CAAqBF,GACrB3T,KAAK6S,iBACL3K,aAAalI,KAAK6S,iBAGtB7S,KAAK6S,gBAAkBtR,OAAO0G,YAAW,KACjCjI,KAAK+S,gBACL/S,KAAK8S,iBAAkB,EAC3B,GACDa,GAEH3T,KAAK8S,iBAAkB,CAC3B,CAEQS,UAAanD,IACjBpQ,KAAK8T,gBAAgB1D,EAAGiC,EAA8BjC,GAAG,EAGrD0D,eAAAA,CACJ1D,EACAzK,GAEA,GAAI3F,KAAK4S,eAML,OALA5S,KAAKoG,UAAUT,QAEXyK,EAAE+C,YACF/C,EAAEgD,kBAKLpT,KAAK8S,kBAIN9S,KAAK+S,gBACL/S,KAAK4S,gBAAyD,IAAxC5S,KAAKgG,WAAWhG,KAAK+S,gBAG3C/S,KAAK4S,gBACL5S,KAAKoG,UAAUT,GAEXyK,EAAE+C,YACF/C,EAAEgD,kBAGNpT,KAAKqT,cAAc1N,GAE3B,CAEQ8N,QAAWrD,IACfpQ,KAAKqT,cAAchB,EAA8BjC,GAAG,EAGhDiD,aAAAA,CAAc1N,GAClB3F,KAAKgT,gCACLhT,KAAK8S,iBAAkB,EACvB9S,KAAK+S,cAAgB,KAEjB/S,KAAK4S,iBACL5S,KAAK4S,gBAAiB,EACtB5S,KAAK8G,UAAUnB,GAEvB,CAEQqN,6BAAAA,GAEHrS,SAAiBgP,oBAAoB,YAAa3P,KAAKuT,UAAW,CAC/Db,SAAS,IAGZ/R,SAAiBgP,oBAAoB,YAAa3P,KAAKwT,UAAW,CAC/Dd,SAAS,IAGZ/R,SAAiBgP,oBAAoB,UAAW3P,KAAKyT,QAAS,CAC3Df,SAAS,IAGZ/R,SAAiBgP,oBAAoB,WAAY3P,KAAK0T,SAAU,CAC7DhB,SAAS,GAEjB,CAEQC,WAAcvC,IAClB,IAAKA,EACD,OAGJ,GAAIA,EAAE2D,QAAQnR,OAAS,EACnB,OAGJ,MAAM2P,EAAQnC,EAAE4D,eAAe,GAE1BzB,GAILvS,KAAKkT,gBAAgBZ,EAAyBC,EAAOnC,GAAG,EAGpDoD,UAAapD,IACjB,IAAKA,EACD,OAGJ,GAAIA,EAAE2D,QAAQnR,OAAS,EACnB,OAGJ,MAAM2P,EAAQnC,EAAE4D,eAAe,GAE1BzB,GAILvS,KAAK8T,gBAAgB1D,EAAGkC,EAAyBC,EAAOnC,GAAG,EAGvDsD,SAAYtD,IAChB,IAAKA,EACD,OAGJ,GAAIA,EAAE2D,QAAQnR,OAAS,EACnB,OAGJ,MAAM2P,EAAQnC,EAAE4D,eAAe,GAE1BzB,GAILvS,KAAKqT,cAAcf,EAAyBC,EAAOnC,GAAG,ECtO/C,MAAM6D,EAajBxU,WAAAA,CAAWC,GAWgB,IAXfwU,eACRA,EAAcC,YACdA,EAAWC,iBACXA,EAAgBvP,QAChBA,EAAOwP,sBACPA,EAAqBC,sBACrBA,EAAqBnP,SACrBA,EAAQC,gBACRA,EAAemP,oBACfA,EAAmBC,UACnBA,GACqB9U,EACrBM,KAAKkU,eAAiBA,EACtBlU,KAAKmU,YAAcA,EACnBnU,KAAKoU,iBAAmBA,EACxBpU,KAAK6E,QAAUA,EACf7E,KAAKqU,sBAAwBA,EAC7BrU,KAAKsU,sBAAwBA,EAC7BtU,KAAKmF,SAAWA,EAChBnF,KAAKoF,gBAAkBA,EACvBpF,KAAKuU,oBAAsBA,EAC3BvU,KAAKyU,gBAAkBD,CAC3B,CAEOA,SAAAA,GACH,MAAME,EAAQ7F,KAAK8F,UAAU3U,KAAK4U,YAE9B5U,KAAKsU,sBACLtU,KAAKsU,sBAAsBI,GACpB1U,KAAK6U,wBACZC,aAAaC,QAAQ/U,KAAKgV,aAAcN,EAEhD,CAEOO,mBAAAA,GACH,MAAMC,EAAWlV,KAAKmV,kBAEtB,OAAID,EACOlV,KAAKoV,WAAWF,GAEhB,IAEf,CAEON,QAAAA,GA0BH,MAAO,CACHS,WA1BmBC,MACnB,MAAMC,EAAsB,GAS5B,OAPAvV,KAAK6E,WAAWhD,SAASG,IACjBA,EAAKG,SAAWH,EAAKwT,IAAMxT,EAAKI,eAChCmT,EAAUxR,KAAK/B,EAAKwT,KAEjB,KAGJD,CAAS,EAgBJD,GACZG,cAduBC,MACvB,MAAMC,EAA4B,GAQlC,OANA3V,KAAKoU,mBAAmBvR,SAASb,IACd,MAAXA,EAAKwT,IACLG,EAAgB5R,KAAK/B,EAAKwT,GAC9B,IAGGG,CAAe,EAKPD,GAEvB,CAQOE,eAAAA,CAAgBlB,GACnB,GAAKA,EAEE,CACH,IAAImB,GAAmB,EAWvB,OATInB,EAAMW,aACNQ,EAAmB7V,KAAK8V,iBAAiBpB,EAAMW,aAG/CX,EAAMe,gBACNzV,KAAK+V,iBACL/V,KAAKgW,mBAAmBtB,EAAMe,gBAG3BI,CACX,CAdI,OAAO,CAef,CAEOI,uBAAAA,CACHvB,EACAwB,GAEIxB,EACA1U,KAAKmW,0BACDzB,EAAMW,WACNX,EAAMe,cACNS,GAGJA,GAER,CAEOE,qBAAAA,GACH,MAAM1B,EAAQ1U,KAAKiV,sBAEnB,OAAIP,GAASA,EAAMe,eACRf,EAAMe,cAAc,IAEpB,IAEf,CAEQL,UAAAA,CAAWF,GACf,MAAMR,EAAQ7F,KAAKC,MAAMoG,GT3KXmB,MSmLd,OALI3B,GAASA,EAAMe,gBT7KV,iBADKY,ES8K4B3B,EAAMe,gBT7K3BY,EAAI,GAAM,KS+K3B3B,EAAMe,cAAgB,CAACf,EAAMe,gBAG1Bf,CACX,CAEQS,eAAAA,GACJ,OAAInV,KAAKqU,sBACErU,KAAKqU,wBACLrU,KAAK6U,uBACLC,aAAawB,QAAQtW,KAAKgV,cAE1B,IAEf,CAEQc,gBAAAA,CAAiBS,GACrB,IAAIV,GAAmB,EAEvB,IAAK,MAAMW,KAAUD,EAAS,CAC1B,MAAMvU,EAAOhC,KAAKmU,YAAYqC,GAE1BxU,IACKA,EAAKyU,eAGNZ,GAAmB,EAFnB7T,EAAKG,SAAU,EAK3B,CAEA,OAAO0T,CACX,CAEQG,kBAAAA,CAAmBO,GACvB,IAAIG,EAAc,EAElB,IAAK,MAAMF,KAAUD,EAAS,CAC1B,MAAMvU,EAAOhC,KAAKmU,YAAYqC,GAE1BxU,IACA0U,GAAe,EAEf1W,KAAKkU,eAAelS,GAE5B,CAEA,OAAuB,IAAhB0U,CACX,CAEQX,cAAAA,GACkB/V,KAAKoU,mBAEbvR,SAASb,IACnBhC,KAAKuU,oBAAoBvS,EAAK,GAEtC,CAEQmU,yBAAAA,CACJQ,EACAC,EACAV,GAEA,IAAIW,EAAe,EACfN,EAAUI,EAEd,MAAMpB,EAAYA,KACd,MAAMuB,EAAc,GAEpB,IAAK,MAAMN,KAAUD,EAAS,CAC1B,MAAMvU,EAAOhC,KAAKmU,YAAYqC,GAEzBxU,EAGIA,EAAKuK,aACFvK,EAAKyU,eACLM,EAAgB/U,GAEhBhC,KAAKmF,SAASnD,GAAM,IAN5B8U,EAAY/S,KAAKyS,EAUzB,CAEAD,EAAUO,EAEN9W,KAAKgW,mBAAmBY,IACxB5W,KAAKoF,gBAAgB,MAGJ,IAAjByR,GACAX,GACJ,EAGEa,EAAmB/U,IACrB6U,GAAgB,EAChB7W,KAAKmF,SAASnD,GAAM,GAAO,KACvB6U,GAAgB,EAChBtB,GAAW,GACb,EAGNA,GACJ,CAEQP,UAAAA,GACJ,MAAoC,iBAAzBhV,KAAKyU,gBACLzU,KAAKyU,gBAEL,MAEf,CAEQI,oBAAAA,GAuBJ,OAJkC,MAA9B7U,KAAKgX,wBACLhX,KAAKgX,sBAnBWC,MAEhB,GAAoB,MAAhBnC,aACA,OAAO,EAGP,IACI,MAAMxE,EAAM,gBACZ4G,eAAenC,QAAQzE,EAAK,SAC5B4G,eAAeC,WAAW7G,EAC7B,CAAC,MAAO9B,GACL,OAAO,CACX,CAEA,OAAO,CACX,EAI6ByI,IAG1BjX,KAAKgX,qBAChB,EChTW,MAAMI,EAUjB3X,WAAAA,CAAWC,GAAyC,IAAxC2X,UAAEA,EAASC,gBAAEA,GAAyB5X,EAC9CM,KAAKqX,UAAYA,EACjBrX,KAAKsX,gBAAkBA,CAC3B,CAEOC,wBAAAA,CAAyBlX,GAC5B,MAAMmX,EACFxX,KAAKyX,gCAAgCpX,GAErCL,KAAK0X,4BAA8BF,IACnCxX,KAAK0X,0BAA4BF,EAEG,MAAhCxX,KAAK2X,yBACLpW,OAAO2G,aAAalI,KAAK4X,uBAGzBJ,IACAxX,KAAK2X,wBAA0BpW,OAAO0G,WAClCjI,KAAK6X,mBAAmBrI,KAAKxP,MAC7B,KAIhB,CAEO8X,sBAAAA,CAAuBxX,GAC1B,MAAMyX,EACF/X,KAAKgY,8BAA8B1X,GAEnCN,KAAKiY,0BAA4BF,IACjC/X,KAAKiY,wBAA0BF,EAEG,MAA9B/X,KAAK4X,wBACLrW,OAAO2G,aAAalI,KAAK4X,uBACzB5X,KAAK4X,2BAAwB3R,GAG7B8R,IACA/X,KAAK4X,sBAAwBrW,OAAO0G,WAChCjI,KAAKkY,iBAAiB1I,KAAKxP,MAC3B,KAIhB,CAEOmY,aAAAA,GACH,OAAOnY,KAAKqX,UAAUe,UAC1B,CAEOC,SAAAA,CAAU5X,GACbT,KAAKqX,UAAUiB,UAAY7X,CAC/B,CAEO8X,aAAAA,GACHvY,KAAK0X,+BAA4BzR,EACjCjG,KAAKiY,6BAA0BhS,EAC/BjG,KAAKwY,qBAAkBvS,EACvBjG,KAAKyY,wBAAqBxS,CAC9B,CAEQwR,+BAAAA,CACJpX,GAEA,MAAMqY,EAAqBvX,EAAmBnB,KAAKqX,WAE7CsB,EAAYD,EAAmBlY,KAAOR,KAAKqX,UAAUrO,YACrD4P,EAAWF,EAAmBlY,KAIpC,OAHwBH,EAAQsY,EAAY,GAIjC,QAHYtY,EAAQuY,EAAW,GAK/B,YADJ,CAKX,CAEQZ,6BAAAA,CACJ1X,GAEA,OAAIA,EAAQN,KAAK6Y,qBACN,MAGPvY,EAAQN,KAAK8Y,wBACN,cADX,CAKJ,CAEQjB,kBAAAA,GACJ,IAAK7X,KAAK0X,0BACN,OAGJ,MAAMqB,EAA8C,SAAnC/Y,KAAK0X,2BAAwC,GAAK,GAEnE1X,KAAKqX,UAAU2B,SAAS,CACpBxY,KAAMuY,EACNtY,IAAK,EACLwY,SAAU,YAGdjZ,KAAKsX,kBAELrP,WAAWjI,KAAK6X,mBAAmBrI,KAAKxP,MAAO,GACnD,CAEQkY,gBAAAA,GACJ,IAAKlY,KAAKiY,wBACN,OAGJ,MAAMc,EAA4C,QAAjC/Y,KAAKiY,yBAAqC,GAAK,GAEhEjY,KAAKqX,UAAU2B,SAAS,CACpBxY,KAAM,EACNC,IAAKsY,EACLE,SAAU,YAGdjZ,KAAKsX,kBAELrP,WAAWjI,KAAKkY,iBAAiB1I,KAAKxP,MAAO,GACjD,CAEQ6Y,kBAAAA,GAKJ,OAJ4B,MAAxB7Y,KAAKwY,kBACLxY,KAAKwY,gBAAkBtX,EAAalB,KAAKqX,YAGtCrX,KAAKwY,eAChB,CAEQM,qBAAAA,GAKJ,OAJ+B,MAA3B9Y,KAAKyY,qBACLzY,KAAKyY,mBAAqBzY,KAAK6Y,qBAAuB7Y,KAAKqX,UAAUpO,cAGlEjJ,KAAKyY,kBAChB,EC1JW,MAAMS,EAUjBzZ,WAAAA,CAAWC,GAA2C,IAA1C4X,gBAAEA,EAAevX,YAAEA,GAAqBL,EAChDM,KAAKsX,gBAAkBA,EACvBtX,KAAKD,YAAcA,CACvB,CAEOwX,wBAAAA,CAAyBlX,GAC5B,MAAMmX,EACFxX,KAAKyX,gCAAgCpX,GAErCL,KAAK0X,4BAA8BF,IACnCxX,KAAK0X,0BAA4BF,EAEG,MAAhCxX,KAAK2X,yBACLpW,OAAO2G,aAAalI,KAAK2X,yBAGzBH,IACAxX,KAAK2X,wBAA0BpW,OAAO0G,WAClCjI,KAAK6X,mBAAmBrI,KAAKxP,MAC7B,KAIhB,CAEO8X,sBAAAA,CAAuBxX,GAC1B,MAAMyX,EACF/X,KAAKgY,8BAA8B1X,GAEnCN,KAAKiY,0BAA4BF,IACjC/X,KAAKiY,wBAA0BF,EAEG,MAA9B/X,KAAK4X,wBACLrW,OAAO2G,aAAalI,KAAK4X,uBACzB5X,KAAK4X,2BAAwB3R,GAG7B8R,IACA/X,KAAK4X,sBAAwBrW,OAAO0G,WAChCjI,KAAKkY,iBAAiB1I,KAAKxP,MAC3B,KAIhB,CAEOmY,aAAAA,GACH,OAAOxX,SAASwY,gBAAgBf,UACpC,CAEOC,SAAAA,CAAU5X,GACb,MAAM2Y,EAAUlY,EAAalB,KAAKD,aAElCY,SAASwY,gBAAgBb,UAAY7X,EAAM2Y,CAC/C,CAEOb,aAAAA,GACHvY,KAAK0X,+BAA4BzR,EACjCjG,KAAKiY,6BAA0BhS,EAC/BjG,KAAKqZ,0BAAuBpT,EAC5BjG,KAAKsZ,yBAAsBrT,CAC/B,CAEQwR,+BAAAA,CACJpX,GAEA,MAIMkZ,EAAiBlZ,EAJJM,SAASwY,gBAAgBf,WAIA,GAE5C,OAHwB/X,EAFJkB,OAAOiY,WAEmB,IAGvBxZ,KAAKyZ,iBACjB,QAGPF,EACO,YADX,CAKJ,CAEQE,cAAAA,GACJ,MAAMN,EAAkBxY,SAASwY,gBAEjC,OACIA,EAAgBf,WAAae,EAAgBnQ,YAC7ChJ,KAAK0Z,wBAEb,CAEQC,aAAAA,GACJ,MAAMR,EAAkBxY,SAASwY,gBAEjC,OACIA,EAAgBb,UAAYa,EAAgBlQ,aAC5CjJ,KAAK4Z,yBAEb,CAEQA,uBAAAA,GAMJ,OAJiC,MAA7B5Z,KAAKqZ,uBACLrZ,KAAKqZ,qBAAuB1Y,SAASwY,gBAAgBU,cAGlD7Z,KAAKqZ,oBAChB,CAEQK,sBAAAA,GAMJ,OAJgC,MAA5B1Z,KAAKsZ,sBACLtZ,KAAKsZ,oBAAsB3Y,SAASwY,gBAAgBW,aAGjD9Z,KAAKsZ,mBAChB,CAEQtB,6BAAAA,CACJ1X,GAEA,MAAMgY,EAAYxS,OAAOnF,UAAU2X,aAAe,EAGlD,GAFoBhY,EAAQgY,EAEV,GACd,MAAO,MAKX,OAFqB/W,OAAOwY,aAERzZ,EAAQgY,GAAa,IAAMtY,KAAK2Z,gBACzC,cADX,CAKJ,CAEQ9B,kBAAAA,GACJ,IAAK7X,KAAK0X,0BACN,OAGJ,MAAMqB,EAA8C,SAAnC/Y,KAAK0X,2BAAwC,GAAK,GACnEnW,OAAOyX,SAAS,CAAExY,KAAMuY,EAAUtY,IAAK,EAAGwY,SAAU,YAEpDjZ,KAAKsX,kBAELrP,WAAWjI,KAAK6X,mBAAmBrI,KAAKxP,MAAO,GACnD,CAEQkY,gBAAAA,GACJ,IAAKlY,KAAKiY,wBACN,OAGJ,MAAMc,EAA4C,QAAjC/Y,KAAKiY,yBAAqC,GAAK,GAChE1W,OAAOyX,SAAS,CAAExY,KAAM,EAAGC,IAAKsY,EAAUE,SAAU,YAEpDjZ,KAAKsX,kBAELrP,WAAWjI,KAAKkY,iBAAiB1I,KAAKxP,MAAO,GACjD,ECnLJ,MAAMga,EAAcC,GACE,SAAlBA,GAA8C,WAAlBA,EAE1BC,EAAeja,IACjB,MAAMM,EAAQ4Z,iBAAiBla,GAE/B,OAAO+Z,EAAWzZ,EAAM6Z,YAAcJ,EAAWzZ,EAAM8Z,UAAU,EAuB/DC,EAAqBA,CACvBva,EACAuX,KAEA,MAAMD,EAvBNtX,KAEA,GAAIma,EAAYna,GACZ,OAAOA,EAGX,IAAIuI,EAASvI,EAAYwa,cAEzB,KAAOjS,GAAQ,CACX,GAAI4R,EAAY5R,GACZ,OAAOA,EAGXA,EAASA,EAAOiS,aACpB,CAEA,OAAO,IAAI,EAOOC,CAAsBza,GAExC,OAAIsX,GAAmC,SAAtBA,EAAUoD,QAChB,IAAIrD,EAAsB,CAC7BC,YACAC,oBAGG,IAAI4B,EAAqB,CAAE5B,kBAAiBvX,eACvD,ECrCW,MAAM2a,EAKjBjb,WAAAA,CAAWC,GAAwD,IAAvD4X,gBAAEA,EAAevX,YAAEA,GAAkCL,EAC7DM,KAAKsX,gBAAkBA,EACvBtX,KAAK2a,kBAAe1U,EACpBjG,KAAKD,YAAcA,CACvB,CAEO6a,cAAAA,CAAejV,GAClB3F,KAAK8X,uBAAuBnS,GAC5B3F,KAAKuX,yBAAyB5R,EAClC,CAEO4S,aAAAA,GACHvY,KAAK6a,kBAAkBtC,eAC3B,CAEOF,SAAAA,CAAU5X,GACbT,KAAK6a,kBAAkBxC,UAAU5X,EACrC,CAEO0X,aAAAA,GACH,OAAOnY,KAAK6a,kBAAkB1C,eAClC,CAEQL,sBAAAA,CAAuBnS,GACD,MAAtBA,EAAarF,OAIjBN,KAAK6a,kBAAkB/C,uBAAuBnS,EAAarF,MAC/D,CAEQiX,wBAAAA,CAAyB5R,GACH,MAAtBA,EAAatF,OAIjBL,KAAK6a,kBAAkBtD,yBAAyB5R,EAAatF,MACjE,CAEQwa,eAAAA,GAQJ,OAPK7a,KAAK2a,eACN3a,KAAK2a,aAAeL,EAChBta,KAAKD,YACLC,KAAKsX,kBAINtX,KAAK2a,YAChB,ECvDW,MAAMG,EAKjBrb,WAAAA,CAAWC,GAA+C,IAA9CyU,YAAEA,GAA0CzU,EACpDM,KAAKmU,YAAcA,EACnBnU,KAAK4W,cAAgB,IAAImE,IACzB/a,KAAKgH,OACT,CAEOiI,eAAAA,GACH,MAAM2H,EAAgB5W,KAAKoU,mBAE3B,OAAIwC,EAAchU,QACPgU,EAAc,KAEd,CAEf,CAEOxC,gBAAAA,GACH,GAAIpU,KAAKgb,mBACL,MAAO,CAAChb,KAAKgb,oBACV,CACH,MAAMpE,EAAwB,GAS9B,OAPA5W,KAAK4W,cAAc/T,SAAS2S,IACxB,MAAMxT,EAAOhC,KAAKmU,YAAYqB,GAC1BxT,GACA4U,EAAc7S,KAAK/B,EACvB,IAGG4U,CACX,CACJ,CAEOqE,qBAAAA,CAAsB3S,GACzB,GAAItI,KAAKgb,mBACL,OAAI1S,EAAO4S,WAAWlb,KAAKgb,oBAChB,CAAChb,KAAKgb,oBAEN,GAER,CACH,MAAMpE,EAAgB,GAEtB,IAAK,MAAMpB,KAAMxV,KAAK4W,cAClB,GACIxX,OAAOC,UAAUC,eAAeC,KAAKS,KAAK4W,cAAepB,GAC3D,CACE,MAAMxT,EAAOhC,KAAKmU,YAAYqB,GAC1BxT,GAAQsG,EAAO4S,WAAWlZ,IAC1B4U,EAAc7S,KAAK/B,EAE3B,CAGJ,OAAO4U,CACX,CACJ,CAEOpN,cAAAA,CAAexH,GAClB,OAAe,MAAXA,EAAKwT,GACExV,KAAK4W,cAAcuE,IAAInZ,EAAKwT,MAC5BxV,KAAKgb,oBACLhb,KAAKgb,mBAAmB/a,UAAY+B,EAAK/B,OAIxD,CAEO+G,KAAAA,GACHhH,KAAK4W,cAAc5P,QACnBhH,KAAKgb,mBAAqB,IAC9B,CAEOzG,mBAAAA,CAAoBvS,GAA2C,IAA/BoZ,EAAezJ,UAAA/O,OAAA,QAAAqD,IAAA0L,UAAA,IAAAA,UAAA,GACnC,MAAX3P,EAAKwT,GAEDxV,KAAKgb,oBACLhZ,EAAK/B,UAAYD,KAAKgb,mBAAmB/a,UAEzCD,KAAKgb,mBAAqB,OAG9Bhb,KAAK4W,cAAcyE,OAAOrZ,EAAKwT,IAE3B4F,GACApZ,EAAKH,SAAQ,KACM,MAAXG,EAAKwT,IACLxV,KAAK4W,cAAcyE,OAAOrZ,EAAKwT,KAE5B,KAIvB,CAEOtB,cAAAA,CAAelS,GACH,MAAXA,EAAKwT,GACLxV,KAAK4W,cAAc/V,IAAImB,EAAKwT,IAE5BxV,KAAKgb,mBAAqBhZ,CAElC,EC7GG,MAAMsZ,EACTvQ,GAEgB,iBAATA,GACP,aAAcA,GACdA,EAAe,oBAAa8G,MCJzB,MAAM0J,EAgBT9b,WAAAA,GAIE,IAHE+b,EAAyB7J,UAAA/O,OAAA,QAAAqD,IAAA0L,UAAA,GAAAA,UAAA,GAAG,KAC5B8J,EAAM9J,UAAA/O,OAAA,QAAAqD,IAAA0L,UAAA,IAAAA,UAAA,GACN+J,EAAS/J,UAAA/O,OAAA,QAAAqD,IAAA0L,UAAA,GAAAA,UAAA,GAAG4J,EAEZvb,KAAKb,KAAO,GACZa,KAAKyW,gBAAiB,EAEtBzW,KAAKsL,cACW,MAAZkQ,GACAF,EAAyBE,IACI,IAA7BA,EAAS7Y,SAASC,OAEtB5C,KAAK2b,QAAQH,GAEbxb,KAAK2C,SAAW,GAChB3C,KAAKsI,OAAS,KAEVmT,IACAzb,KAAK4b,UAAY,IAAIC,IACrB7b,KAAK4B,KAAO5B,KACZA,KAAK0b,UAAYA,EAEzB,CAkBOC,OAAAA,CAAQG,GACX,GAAKA,EAEE,GAAiB,iBAANA,EACd9b,KAAKb,KAAO2c,OACT,GAAiB,iBAANA,EACd,IAAK,MAAMxL,KAAOwL,EACd,GAAI1c,OAAOC,UAAUC,eAAeC,KAAKuc,EAAGxL,GAAM,CAC9C,MAAMrP,EAAQ6a,EAAExL,GAEJ,UAARA,GAA2B,SAARA,EAEE,iBAAVrP,IACPjB,KAAKb,KAAO8B,GAED,aAARqP,GAA8B,WAARA,IAE7BtQ,KAAKsQ,GAAOrP,EAEpB,CAGZ,CAmBO8a,YAAAA,CAAahR,GAChB/K,KAAKgc,iBAEL,IAAK,MAAMC,KAAalR,EAAM,CAC1B,MAAM/I,EAAOhC,KAAKkc,WAAWD,GAC7Bjc,KAAKmc,SAASna,GAEVsZ,EAAyBW,IACzBja,EAAK+Z,aAAaE,EAAUtZ,SAEpC,CAEA,OAAO3C,IACX,CASOmc,QAAAA,CAASna,GACZhC,KAAK2C,SAASoB,KAAK/B,GACnBA,EAAKoa,UAAUpc,KACnB,CAUOqc,kBAAAA,CAAmBra,EAAYsa,GAClCtc,KAAK2C,SAAS4Z,OAAOD,EAAO,EAAGta,GAC/BA,EAAKoa,UAAUpc,KACnB,CAOOwc,WAAAA,CAAYxa,GAEfA,EAAKga,iBAELhc,KAAKyc,cAAcza,EACvB,CAOO0a,aAAAA,CAAc1a,GACjB,OAAOhC,KAAK2C,SAASga,QAAQ3a,EACjC,CASOI,WAAAA,GACH,OAAgC,IAAzBpC,KAAK2C,SAASC,MACzB,CAEO2D,QAAAA,GACH,OAAOvG,KAAKoC,eAAiBpC,KAAKyW,cACtC,CAmBO5U,OAAAA,CAAQ+a,GACX,MAAMC,EAAWA,CAAC7a,EAAY4I,KAC1B,GAAI5I,EAAKW,SACL,IAAK,MAAMK,KAAShB,EAAKW,SAAU,CAChBia,EAAS5Z,EAAO4H,IAEjB5H,EAAMZ,eAChBya,EAAS7Z,EAAO4H,EAAQ,EAEhC,CACJ,EAGJiS,EAAS7c,KAAM,EACnB,CAUOwI,QAAAA,CACHL,EACAC,EACAlJ,GAEA,IAAKiJ,EAAUG,QAAUH,EAAU+S,WAAW9S,GAG1C,OAAO,EAIP,OAFAD,EAAUG,OAAOmU,cAActU,GAEvBjJ,GACJ,KAAKX,EAASK,MACV,QAAIwJ,EAAWE,SACXF,EAAWE,OAAO+T,mBACdlU,EACAC,EAAWE,OAAOoU,cAActU,GAAc,IAE3C,GAKf,KAAK7J,EAASG,OACV,QAAI0J,EAAWE,SACXF,EAAWE,OAAO+T,mBACdlU,EACAC,EAAWE,OAAOoU,cAActU,KAE7B,GAKf,KAAK7J,EAASO,OAGV,OADAsJ,EAAWiU,mBAAmBlU,EAAW,IAClC,EAGX,QACI,OAAO,EAGvB,CAKO2U,OAAAA,GACH,MAAMC,EAAoBC,GACfA,EAAMC,KAAKjb,IACd,MAAMkb,EAAmC,CAAA,EAEzC,IAAK,MAAMC,KAAKnb,EACZ,IAUsB,IATlB,CACI,SACA,WACA,UACA,YACA,iBACA,YACA,OACA,iBACF2a,QAAQQ,IACV/d,OAAOC,UAAUC,eAAeC,KAAKyC,EAAMmb,GAC7C,CACE,MAAMC,EAAIpb,EAAKmb,GACfD,EAAQC,GAAKC,CACjB,CAOJ,OAJIpb,EAAKI,gBACL8a,EAAkB,SAAIH,EAAiB/a,EAAKW,WAGzCua,CAAO,IAItB,OACWH,EAjCapL,UAAA/O,OAAA,QAAAqD,IAAA0L,UAAA,IAAAA,UAAA,GAiCI,CAAC3R,MAEDA,KAAK2C,SAErC,CAEO0a,aAAAA,CAAcle,GACjB,OAAOa,KAAKsd,mBAAmBtb,GAAeA,EAAK7C,OAASA,GAChE,CAEOoe,sBAAAA,CAAuBpe,GAC1B,MAAM6C,EAAOhC,KAAKsd,mBAAmBjH,GAAYA,EAAElX,OAASA,IAE5D,IAAK6C,EACD,KAAO,kBAAiB7C,cAG5B,OAAO6C,CACX,CAEOsb,iBAAAA,CAAkBV,GACrB,IAAI5K,EAAsB,KAa1B,OAXAhS,KAAK6B,SAASG,IACNgQ,KAEO4K,EAAS5a,KAChBgQ,EAAShQ,GACF,MAMRgQ,CACX,CAEOwL,QAAAA,CAASC,GACZ,GAAKzd,KAAKsI,OAEH,CACH,MAAMtG,EAAOhC,KAAKkc,WAAWuB,GAEvBC,EAAa1d,KAAKsI,OAAOoU,cAAc1c,MAI7C,OAHAA,KAAKsI,OAAO+T,mBAAmBra,EAAM0b,EAAa,GAElD1b,EAAK2b,qBAAqBF,GACnBzb,CACX,CATI,OAAO,IAUf,CAEO4b,SAAAA,CAAUH,GACb,GAAKzd,KAAKsI,OAEH,CACH,MAAMtG,EAAOhC,KAAKkc,WAAWuB,GAEvBC,EAAa1d,KAAKsI,OAAOoU,cAAc1c,MAI7C,OAHAA,KAAKsI,OAAO+T,mBAAmBra,EAAM0b,GAErC1b,EAAK2b,qBAAqBF,GACnBzb,CACX,CATI,OAAO,IAUf,CAEO6b,SAAAA,CAAUJ,GACb,GAAKzd,KAAKsI,OAEH,CACH,MAAMwV,EAAY9d,KAAKkc,WAAWuB,GAE9Bzd,KAAK4B,MACLkc,EAAU1B,UAAUpc,KAAK4B,MAE7B,MAAMmc,EAAiB/d,KAAKsI,OAE5B,IAAK,MAAMtF,KAAS+a,EAAepb,SAC/Bmb,EAAU3B,SAASnZ,GAKvB,OAFA+a,EAAepb,SAAW,GAC1Bob,EAAe5B,SAAS2B,GACjBA,CACX,CAhBI,OAAO,IAiBf,CAEOpd,MAAAA,GACCV,KAAKsI,SACLtI,KAAKsI,OAAOkU,YAAYxc,MACxBA,KAAKsI,OAAS,KAEtB,CAEO0V,MAAAA,CAAOP,GACV,MAAMzb,EAAOhC,KAAKkc,WAAWuB,GAI7B,OAHAzd,KAAKmc,SAASna,GAEdA,EAAK2b,qBAAqBF,GACnBzb,CACX,CAEOic,OAAAA,CAAQR,GACX,MAAMzb,EAAOhC,KAAKkc,WAAWuB,GAI7B,OAHAzd,KAAKqc,mBAAmBra,EAAM,GAE9BA,EAAK2b,qBAAqBF,GACnBzb,CACX,CAEOkZ,UAAAA,CAAWlZ,GACd,IAAIsG,EAAStG,EAAKsG,OAElB,KAAOA,GAAQ,CACX,GAAIA,IAAWtI,KACX,OAAO,EAGXsI,EAASA,EAAOA,MACpB,CAEA,OAAO,CACX,CAEOmC,QAAAA,GACH,IAAIG,EAAQ,EACR5I,EAAahC,KAEjB,KAAOgC,EAAKsG,QACRsC,GAAS,EACT5I,EAAOA,EAAKsG,OAGhB,OAAOsC,CACX,CAEOuJ,WAAAA,CAAYqC,GACf,OAAOxW,KAAK4b,UAAU1K,IAAIsF,IAAW,IACzC,CAEO0H,cAAAA,CAAelc,GACH,MAAXA,EAAKwT,IACLxV,KAAK4b,UAAUuC,IAAInc,EAAKwT,GAAIxT,EAEpC,CAEOoc,mBAAAA,CAAoBpc,GACR,MAAXA,EAAKwT,IACLxV,KAAK4b,UAAUP,OAAOrZ,EAAKwT,GAEnC,CAEOwG,cAAAA,GACHhc,KAAK6B,SAASmB,IACVhD,KAAK4B,MAAMwc,oBAAoBpb,IACxB,KAGXhD,KAAK2C,SAAW,EACpB,CAEO0b,kBAAAA,GACH,GAAKre,KAAKsI,OAEH,CACH,MAAMgW,EAAgBte,KAAKsI,OAAOoU,cAAc1c,MAAQ,EACxD,OAAIse,GAAiB,GACVte,KAAKsI,OAAO3F,SAAS2b,IAErB,IAEf,CARI,OAAO,IASf,CAEOC,cAAAA,GACH,GAAKve,KAAKsI,OAEH,CACH,MAAMkW,EAAYxe,KAAKsI,OAAOoU,cAAc1c,MAAQ,EACpD,OAAIwe,EAAYxe,KAAKsI,OAAO3F,SAASC,QAC1B5C,KAAKsI,OAAO3F,SAAS6b,IAErB,IAEf,CARI,OAAO,IASf,CAEOC,kBAAAA,CAAmBnO,EAAarP,GACnC,OAAOjB,KAAK0e,QAAQ1c,GAAeA,EAAKsO,KAASrP,GACrD,CAEOyd,MAAAA,CAAOC,GACV,MAAM3M,EAAiB,GAUvB,OARAhS,KAAK6B,SAASG,IACN2c,EAAE3c,IACFgQ,EAAOjO,KAAK/B,IAGT,KAGJgQ,CACX,CAEO4M,WAAAA,GACH,MAD8BjN,UAAA/O,OAAA,QAAAqD,IAAA0L,UAAA,KAAAA,UAAA,KACP3R,KAAKoC,cACxB,OAAOpC,KAAK2C,SAAS,IAAM,KACxB,GAAK3C,KAAKsI,OAEV,CACH,MAAMuW,EAAc7e,KAAKue,iBAEzB,OAAIM,GAGO7e,KAAKsI,OAAOsW,aAAY,EAEvC,CATI,OAAO,IAUf,CAEO9O,kBAAAA,GACH,GAAI9P,KAAKoC,eAAiBpC,KAAKmC,QAE3B,OAAOnC,KAAK2C,SAAS,IAAM,KAE3B,GAAK3C,KAAKsI,OAEH,CACH,MAAMuW,EAAc7e,KAAKue,iBACzB,OAAIM,GAKO7e,KAAKsI,OAAOsW,aAAY,EAEvC,CAVI,OAAO,IAYnB,CAEOE,eAAAA,GACH,GAAK9e,KAAKsI,OAEH,CACH,MAAMyW,EAAkB/e,KAAKqe,qBAE7B,OAAKU,EAEMA,EAAgB3c,cAChB2c,EAAgBC,eAEhBD,EAJA/e,KAAKmQ,WAMpB,CAXI,OAAO,IAYf,CAEOH,sBAAAA,GACH,GAAKhQ,KAAKsI,OAEH,CACH,MAAMyW,EAAkB/e,KAAKqe,qBAE7B,OAAKU,EAGAA,EAAgB3c,eAChB2c,EAAgB5c,QAMV4c,EAAgBC,eAHhBD,EANA/e,KAAKmQ,WAWpB,CAhBI,OAAO,IAiBf,CAEOA,SAAAA,GAEH,OAAKnQ,KAAKsI,QAEEtI,KAAKsI,OAAOA,OAIbtI,KAAKsI,OALL,IAOf,CAEO0W,YAAAA,GACH,GAAKhf,KAAKoC,cAEH,CACH,MAAM6c,EAAYjf,KAAK2C,SAAS3C,KAAK2C,SAASC,OAAS,GAEvD,OAAKqc,EAICA,EAAU7c,eAAiB6c,EAAU9c,QAGhC8c,GAAWD,eAFXC,EAJA,IAQf,CAbI,OAAO,IAcf,CAGOC,YAAAA,CAAanU,GAChB,MAWMoU,EAAeC,IACjB,IAAK,MAAMpc,KAASoc,EAAc,CAC9B,MAAMpd,EAAOhC,KAAKkc,aAClBla,EAAKkd,aAAalc,GAClBhD,KAAKmc,SAASna,EAClB,GAhBawZ,KACbxb,KAAK2b,QAAQH,GAGTF,EAAyBE,IACzBA,EAAS7Y,SAASC,QAElBuc,EAAY3D,EAAS7Y,SACzB,EAWJ0c,CAAQtU,EACZ,CAEQqR,SAAAA,CAAU9T,GACdtI,KAAKsI,OAASA,EACdtI,KAAK4B,KAAO0G,EAAO1G,KACnB5B,KAAK4B,MAAMsc,eAAele,KAC9B,CAEQyc,aAAAA,CAAcza,GAClBhC,KAAK2C,SAAS4Z,OAAOvc,KAAK0c,cAAc1a,GAAO,GAC/ChC,KAAK4B,MAAMwc,oBAAoBpc,EACnC,CAEQsd,YAAAA,GACJ,OAAOtf,KAAK0b,WAAa1b,MAAM4B,MAAM8Z,WAAaH,CACtD,CAEQW,UAAAA,CAAWV,GAEf,OAAO,IADWxb,KAAKsf,eAChB,CAAc9D,EACzB,CAGQmC,oBAAAA,CAAqBF,GACrBnC,EAAyBmC,IAAaA,EAAS9a,SAASC,QACxD5C,KAAK+b,aAAa0B,EAAS9a,SAEnC,ECjpBJ,MAAM4c,EAGF9f,WAAAA,CAAYQ,EAAsBmY,GAC9B,MAAMrM,EAAM9L,EAAQuf,cAAc,4BAElC,IAAKzT,EAED,YADA/L,KAAKyf,UAAOxZ,GAIhB,MAAMyZ,EAAQrb,KAAKsb,IAAI1f,EAAQ2f,YAAcxH,EAAa,EAAG,GACvDyH,EAASxb,KAAKsb,IAAI1f,EAAQgJ,aAAe,EAAG,GAE5CwW,EAAO9e,SAAST,cAAc,QACpCuf,EAAKvU,UAAY,gBACjBuU,EAAKlf,MAAMmf,MAAS,GAAEA,MACtBD,EAAKlf,MAAMsf,OAAU,GAAEA,MAEvB7f,KAAKyf,KAAOA,EAEZ1T,EAAIiS,OAAOhe,KAAKyf,KACpB,CAEO/e,MAAAA,GACHV,KAAKyf,MAAM/e,QACf,ECxBJ,MAAMof,EAKFrgB,WAAAA,CAAYuC,EAAY/B,EAAsBf,GAC1Cc,KAAKC,QAAUA,EACfD,KAAKgC,KAAOA,EACZhC,KAAK+f,MAAQ/f,KAAKggB,qBAEd9gB,IAAaX,EAASK,MACtBoB,KAAKigB,YACE/gB,IAAaX,EAASG,OAC7BsB,KAAKkgB,aACEhhB,IAAaX,EAASO,SACzBkD,EAAKuE,YAAcvE,EAAKG,QACxBnC,KAAKmgB,uBAELngB,KAAKogB,aAGjB,CAEO1f,MAAAA,GACHV,KAAK+f,MAAMrf,QACf,CAEQuf,SAAAA,GACJjgB,KAAKC,QAAQtB,MAAMqB,KAAK+f,MAC5B,CAEQG,UAAAA,GACJlgB,KAAKC,QAAQxB,OAAOuB,KAAK+f,MAC7B,CAEQI,oBAAAA,GACJ,MAAME,EAAergB,KAAKgC,KAAKW,SAAS,IAAI1C,QAExCogB,GACAA,EAAa5hB,OAAOuB,KAAK+f,MAEjC,CAEQK,UAAAA,GACJpgB,KAAKC,QAAQtB,MAAMqB,KAAK+f,OACxB/f,KAAK+f,MAAMnf,UAAUC,IAAI,gBAC7B,CAEQmf,kBAAAA,GACJ,MAAMD,EAAQpf,SAAST,cAAc,MACrC6f,EAAM7U,UAAY,6BAElB,MAAMoV,EAAa3f,SAAST,cAAc,QAC1CogB,EAAWpV,UAAY,8BACvB6U,EAAM/B,OAAOsC,GAEb,MAAMC,EAAW5f,SAAST,cAAc,QAIxC,OAHAqgB,EAASrV,UAAY,4BACrB6U,EAAM/B,OAAOuC,GAENR,CACX,ECnDJ,MAAMS,EAOF/gB,WAAAA,CAAWC,GAKW,IALVyY,cACRA,EAAanW,KACbA,EAAI4H,SACJA,EAAQmD,aACRA,GACgBrN,EAChBM,KAAKmY,cAAgBA,EACrBnY,KAAK4J,SAAWA,EAChB5J,KAAK+M,aAAeA,EAEpB/M,KAAKmR,KAAKnP,EACd,CAEOmP,IAAAA,CAAKnP,GAGR,GAFAhC,KAAKgC,KAAOA,GAEPA,EAAK/B,QAAS,CACf,MAAMA,EAAUD,KAAK+M,aAAamE,IAAI,GAElCjR,IACA+B,EAAK/B,QAAUA,EAEvB,CAEI+B,EAAK/B,UACLD,KAAKC,QAAU+B,EAAK/B,QAE5B,CAEO2H,WAAAA,CAAY1I,GACf,OAAIc,KAAKygB,uBAAuBvhB,GACrB,IAAIqgB,EAAevf,KAAKC,QAASD,KAAKmY,iBAEtC,IAAI2H,EAAc9f,KAAKgC,KAAMhC,KAAKC,QAASf,EAE1D,CAEOwhB,MAAAA,CAAOC,GACV3gB,KAAKC,QAAQW,UAAUC,IAAI,mBAE3B,MAAMqL,EAAYlM,KAAK4gB,eACjBhX,EAAW5J,KAAK4J,SAGN,MAAZA,GACAsC,EAAUf,aAAa,WAAYvB,EAASiX,YAGhD3U,EAAUf,aAAa,gBAAiB,QAEpCwV,GACAzU,EAAU4U,OAElB,CAEOC,QAAAA,GACH/gB,KAAKC,QAAQW,UAAUF,OAAO,mBAE9B,MAAMwL,EAAYlM,KAAK4gB,eACvB1U,EAAU8U,gBAAgB,YAC1B9U,EAAUf,aAAa,gBAAiB,SAExCe,EAAU+U,MACd,CAEUC,KAAAA,GACN,OAAOlhB,KAAKC,QAAQuf,cAAc,cACtC,CAEUoB,YAAAA,GACN,OAAO5gB,KAAKC,QAAQuf,cAChB,+CAER,CAEUiB,sBAAAA,CAAuBvhB,GAC7B,OAAOA,IAAaX,EAASO,MACjC,ECxFJ,MAAMqiB,UAAsBX,EAKxB/gB,WAAAA,CAAWC,GAQa,IARZqK,kBACRA,EAAiBoO,cACjBA,EAAanW,KACbA,EAAI6H,kBACJA,EAAiBD,SACjBA,EAAQmD,aACRA,EAAYzH,aACZA,GACkB5F,EAClB4D,MAAM,CACF6U,gBACAnW,OACA4H,WACAmD,iBAGJ/M,KAAK+J,kBAAoBA,EACzB/J,KAAK6J,kBAAoBA,EACzB7J,KAAKsF,aAAeA,CACxB,CAEO8b,IAAAA,CACHjU,GAGI,IAFJ9H,IAAKsM,UAAA/O,OAAA,QAAAqD,IAAA0L,UAAA,KAAAA,UAAA,GACL0P,EAA+B1P,UAAA/O,OAAA,QAAAqD,IAAA0L,UAAA,GAAAA,UAAA,GAAG,OAElC,GAAI3R,KAAKgC,KAAKG,QACV,OAGJnC,KAAKgC,KAAKG,SAAU,EAEpB,MAAM8Q,EAASjT,KAAKshB,YACpBrO,EAAOrS,UAAUF,OAAO,iBACxBuS,EAAOlS,UAAY,GAEnB,MAAM8I,EAAoB7J,KAAK6J,kBAE/B,GAAIA,EAAmB,CACnB,MAAM0X,EAAO1X,EAAkBoC,WAAU,GACzCgH,EAAO9S,YAAYohB,EACvB,CAEA,MAAMC,EAASA,KACXxhB,KAAKC,QAAQW,UAAUF,OAAO,iBAEZV,KAAK4gB,eACbzV,aAAa,gBAAiB,QAEpCgC,GACAA,EAAWnN,KAAKgC,MAGpBhC,KAAKsF,aAAa,YAAa,CAC3BtD,KAAMhC,KAAKgC,MACb,EAGFqD,EACAS,OAAO9F,KAAKkhB,SAASO,UAAUJ,EAAgBG,IAE/C1b,OAAO9F,KAAKkhB,SAASQ,OACrBF,IAER,CAEOG,KAAAA,GAGC,IAFJtc,IAAKsM,UAAA/O,OAAA,QAAAqD,IAAA0L,UAAA,KAAAA,UAAA,GACL0P,EAA2C1P,UAAA/O,OAAA,QAAAqD,IAAA0L,UAAA,GAAAA,UAAA,GAAG,OAE9C,IAAK3R,KAAKgC,KAAKG,QACX,OAGJnC,KAAKgC,KAAKG,SAAU,EAEpB,MAAM8Q,EAASjT,KAAKshB,YACpBrO,EAAOrS,UAAUC,IAAI,iBACrBoS,EAAOlS,UAAY,GAEnB,MAAMgJ,EAAoB/J,KAAK+J,kBAE/B,GAAIA,EAAmB,CACnB,MAAMwX,EAAOxX,EAAkBkC,WAAU,GACzCgH,EAAO9S,YAAYohB,EACvB,CAEA,MAAMK,EAAUA,KACZ5hB,KAAKC,QAAQW,UAAUC,IAAI,iBAETb,KAAK4gB,eACbzV,aAAa,gBAAiB,SAExCnL,KAAKsF,aAAa,aAAc,CAC5BtD,KAAMhC,KAAKgC,MACb,EAGFqD,EACAS,OAAO9F,KAAKkhB,SAASW,QAAQR,EAAgBO,IAE7C9b,OAAO9F,KAAKkhB,SAASY,OACrBF,IAER,CAEUnB,sBAAAA,CAAuBvhB,GAC7B,OAAQc,KAAKgC,KAAKG,SAAWjD,IAAaX,EAASO,MACvD,CAEQwiB,SAAAA,GACJ,OAAOthB,KAAKC,QAAQuf,cAChB,8CAER,ECpGJ,MAAMuC,EAAsB,0BACtBC,EAAiB,uBAEhB,MAAMC,UAAqBzP,EAC9BL,gBAA2C,CACvCkP,eAAgB,OAChB1hB,YAAY,EACZuiB,UAAU,EACV/Y,YAAY,EAGZC,gBAAYnD,EACZ8E,UAAM9E,EACN0G,gBAAY1G,EACZkc,aAASlc,EACTqD,aAAa,EACb6F,iBAAiB,EACjBuM,UAAWH,EACXzW,eAAWmB,EACXlB,iBAAakB,EACbmc,qBAAiBnc,EACjBoD,gBAAYpD,EACZjB,gBAAYiB,EACZhB,gBAAYgB,EACZoO,2BAAuBpO,EACvBf,oBAAgBe,EAChB4G,kBAAc5G,EACd6G,eAAW7G,EACXqO,2BAAuBrO,EACvBwD,WAAY,WACZ1B,gBAAiB,IAGjB2B,SAAKzD,EACLuO,WAAW,EACX6N,YAAY,EACZ1Y,iBAAiB,EACjBtE,OAAO,EACPid,cAAe,IACf1Y,SAAU,EACV2Y,gBAAgB,GAebC,MAAAA,CAAOxgB,GAAuD,IAA3CygB,EAA0B9Q,UAAA/O,OAAA,QAAAqD,IAAA0L,UAAA,GAAAA,UAAA,GAAG,KACnD,IAAK3P,EACD,MAAM0gB,MAAMX,GAGhB,MAAM1c,EAAQod,GAAcziB,KAAKiR,QAAQ5L,MAQzC,OANIrD,EAAKG,QACLnC,KAAKgP,UAAUhN,EAAMqD,GAErBrF,KAAKmF,SAASnD,EAAMqD,GAGjBrF,KAAKC,OAChB,CAEO4E,OAAAA,GACH,OAAO7E,KAAK4B,IAChB,CAEOwN,UAAAA,CACHpN,EACA2gB,GAGA,OADA3iB,KAAK4iB,aAAa5gB,EAAM2gB,GACjB3iB,KAAKC,OAChB,CAEOgP,eAAAA,GACH,OAAOjP,KAAK6iB,kBAAkB5T,iBAClC,CAEO6T,MAAAA,GACH,OAAOjU,KAAK8F,UAAU3U,KAAK4B,KAAKkb,UACpC,CAEOlQ,QAAAA,CAAS7B,EAAkBmC,GAE9B,OADAlN,KAAK+iB,WAAWhY,EAAMmC,GACflN,KAAKC,OAChB,CAgBO+iB,eAAAA,CACHC,EACAC,EACAC,GAkBA,MAhBsB,iBAAXF,EAEPjjB,KAAKojB,kBACDH,EACAC,EACAC,GAAU,MAIdnjB,KAAKojB,kBACD,KACAH,EACAC,GAIDljB,KAAKC,OAChB,CAEOojB,MAAAA,CAAOlW,GAEV,OADAnN,KAAKojB,kBAAkB,KAAM,KAAMjW,GAC5BnN,KAAKC,OAChB,CAEOiG,OAAAA,GAEH,OADAlG,KAAKsjB,iBAAiB,MACftjB,KAAKC,OAChB,CAEOkU,WAAAA,CAAYqC,GACf,OAAOxW,KAAK4B,KAAKuS,YAAYqC,EACjC,CAEO6G,aAAAA,CAAcle,GACjB,OAAOa,KAAK4B,KAAKyb,cAAcle,EACnC,CAEOoe,sBAAAA,CAAuBpe,GAC1B,OAAOa,KAAK4B,KAAK2b,uBAAuBpe,EAC5C,CAEOsf,kBAAAA,CAAmBnO,EAAarP,GACnC,OAAOjB,KAAK4B,KAAK6c,mBAAmBnO,EAAKrP,EAC7C,CAEOsiB,oBAAAA,CACHC,GAEA,MAAMvjB,EACFujB,aAAwBC,YAClBD,EACAA,EAAa,GAEvB,OAAKvjB,EAIED,KAAK0jB,QAAQzjB,GAHT,IAIf,CAEOqd,iBAAAA,CAAkBV,GACrB,OAAO5c,KAAK4B,KAAK0b,kBAAkBV,EACvC,CAEOzX,QAAAA,CACHnD,EACAihB,EACAC,GAEA,IAAKlhB,EACD,MAAM0gB,MAAMX,GAGhB,MAmBO1c,EAAO8H,GAnBMwW,MAChB,IAAIxW,EACA9H,EAcJ,MrBtOoD,mBqB0NrC4d,GACX9V,EAAa8V,EACb5d,EAAQ,OAERA,EAAQ4d,EACR9V,EAAa+V,GAGJ,MAAT7d,IACAA,EAAQrF,KAAKiR,QAAQ5L,QAAS,GAG3B,CAACA,EAAO8H,EAAW,EAGFwW,GAG5B,OADA3jB,KAAK4jB,UAAU5hB,EAAMqD,EAAO8H,GACrBnN,KAAKC,OAChB,CAEO+O,SAAAA,CAAUhN,EAAYygB,GACzB,IAAKzgB,EACD,MAAM0gB,MAAMX,GAGhB,MAAM1c,EAAQod,GAAcziB,KAAKiR,QAAQ5L,MAWzC,OATIrD,EAAKuE,YAAcvE,EAAKsJ,iBACxBtL,KAAK6jB,oBAAoB7hB,GAAM2f,MAC3Btc,EACArF,KAAKiR,QAAQoQ,gBAGjBrhB,KAAKwU,aAGFxU,KAAKC,OAChB,CAEOuF,UAAAA,GACH,OAAOxF,KAAK8jB,WAAWte,UAC3B,CAEO8R,eAAAA,GAEH,OADAtX,KAAK8jB,WAAW5d,UACTlG,KAAKC,OAChB,CAEO8jB,YAAAA,CACHC,EACAC,GAEA,MAAMC,EAAUD,EAAazG,SAASwG,GAMtC,OAJIE,GACAlkB,KAAKsjB,iBAAiBW,EAAa3b,QAGhC4b,CACX,CAEOC,aAAAA,CACHH,EACAC,GAEA,IAAKA,EACD,MAAMvB,MAAMV,EAAiB,gBAGjC,MAAMkC,EAAUD,EAAarG,UAAUoG,GAMvC,OAJIE,GACAlkB,KAAKsjB,iBAAiBW,EAAa3b,QAGhC4b,CACX,CAEOE,aAAAA,CACHJ,EACAC,GAEA,IAAKA,EACD,MAAMvB,MAAMV,EAAiB,gBAGjC,MAAMkC,EAAUD,EAAapG,UAAUmG,GAMvC,OAJIE,GACAlkB,KAAKsjB,iBAAiBY,EAAQ5b,QAG3B4b,CACX,CAEOG,UAAAA,CAAWriB,GACd,IAAKA,EACD,MAAM0gB,MAAMX,GAGhB,IAAK/f,EAAKsG,OACN,MAAMoa,MAAM,sBAGhB1iB,KAAK6iB,kBAAkBtO,oBAAoBvS,GAAM,GAEjD,MAAMsG,EAAStG,EAAKsG,OAIpB,OAHAtG,EAAKtB,SACLV,KAAKsjB,iBAAiBhb,GAEftI,KAAKC,OAChB,CAEOqkB,UAAAA,CAAWN,EAAuBO,GACrC,MAAMrX,EAAaqX,GAAmBvkB,KAAK4B,KAErCI,EAAOkL,EAAW8Q,OAAOgG,GAI/B,OAFAhkB,KAAKsjB,iBAAiBpW,GAEflL,CACX,CAEOwiB,WAAAA,CAAYR,EAAuBO,GACtC,MAAMrX,EAAaqX,GAAmBvkB,KAAK4B,KAErCI,EAAOkL,EAAW+Q,QAAQ+F,GAIhC,OAFAhkB,KAAKsjB,iBAAiBpW,GAEflL,CACX,CAEOyiB,UAAAA,CAAWziB,EAAY+I,GAC1B,IAAK/I,EACD,MAAM0gB,MAAMX,GAGhB,MAAM2C,EACc,iBAAT3Z,GAAqBA,EAAKyK,IAAMzK,EAAKyK,KAAOxT,EAAKwT,GA0B5D,OAxBIkP,GACA1kB,KAAK4B,KAAKwc,oBAAoBpc,GAGlCA,EAAK2Z,QAAQ5Q,GAET2Z,GACA1kB,KAAK4B,KAAKsc,eAAelc,GAIT,iBAAT+I,GACPA,EAAe,UACfA,EAAe,oBAAa8G,QAE5B7P,EAAKga,iBAEDjR,EAAKpI,SAASC,QACdZ,EAAK+Z,aAAahR,EAAKpI,WAI/B3C,KAAKsjB,iBAAiBthB,GAEfhC,KAAKC,OAChB,CAEQ0kB,uBAAAA,CAAwBC,GAC5B,MAAM/U,EAAe7P,KAAKiP,kBAE1B,QAAKY,IAGM+U,IAAY/U,GAAgB+U,EAAQ1J,WAAWrL,GAE9D,CAEOrH,QAAAA,CAASxG,EAAYoG,EAAkBlJ,GAC1C,IAAK8C,EACD,MAAM0gB,MAAMX,GAGhB,IAAK3Z,EACD,MAAMsa,MAAMV,EAAiB,cAGjC,MAAM6C,EvB9XVrmB,EuB8XsCU,GAOlC,YALsB+G,IAAlB4e,IACA7kB,KAAK4B,KAAK4G,SAASxG,EAAMoG,EAAYyc,GACrC7kB,KAAKsjB,iBAAiB,OAGnBtjB,KAAKC,OAChB,CAEOgV,mBAAAA,GACH,OAAOjV,KAAK8kB,iBAAiB7P,qBACjC,CAEOf,cAAAA,CAAelS,EAAY2e,GAC9B,IAAK3e,EACD,MAAM0gB,MAAMX,GAYhB,OATA/hB,KAAK6iB,kBAAkB3O,eAAelS,GACtChC,KAAK+kB,YAAY/iB,GAEjBhC,KAAKglB,uBAAuBhjB,GAAM0e,YACbza,IAAjB0a,GAAoCA,GAGxC3gB,KAAKwU,YAEExU,KAAKC,OAChB,CAEOmU,gBAAAA,GACH,OAAOpU,KAAK6iB,kBAAkBzO,kBAClC,CAEO5K,cAAAA,CAAexH,GAClB,IAAKA,EACD,MAAM0gB,MAAMX,GAGhB,OAAO/hB,KAAK6iB,kBAAkBrZ,eAAexH,EACjD,CAEOuS,mBAAAA,CAAoBvS,GACvB,IAAKA,EACD,MAAM0gB,MAAMX,GAQhB,OALA/hB,KAAK6iB,kBAAkBtO,oBAAoBvS,GAE3ChC,KAAKglB,uBAAuBhjB,GAAM+e,WAClC/gB,KAAKwU,YAEExU,KAAKC,OAChB,CAEOglB,YAAAA,CAAajjB,GAChB,IAAKA,EACD,MAAM0gB,MAAMX,GAGhB,MAAMthB,EACFS,EAAac,EAAK/B,SAClBiB,EAAalB,KAAKoN,IAAI8D,IAAI,IAI9B,OAFAlR,KAAKklB,cAAc7M,UAAU5X,GAEtBT,KAAKC,OAChB,CAEO2U,QAAAA,GACH,OAAO5U,KAAK8kB,iBAAiBlQ,UACjC,CAEOuQ,QAAAA,CAASzQ,GAIZ,OAHA1U,KAAK8kB,iBAAiBlP,gBAAgBlB,GACtC1U,KAAKsjB,iBAAiB,MAEftjB,KAAKC,OAChB,CAEOmlB,SAAAA,CAAUC,EAAgBpkB,GAE7B,OADCjB,KAAKiR,QAA+CoU,GAAUpkB,EACxDjB,KAAKC,OAChB,CAEO2P,QAAAA,GACH,MAAMC,EAAe7P,KAAKiP,kBAK1B,OAJIY,GACA7P,KAAKslB,WAAW1V,SAASC,GAGtB7P,KAAKC,OAChB,CAEO8P,MAAAA,GACH,MAAMF,EAAe7P,KAAKiP,kBAK1B,OAJIY,GACA7P,KAAKslB,WAAWvV,OAAOF,GAGpB7P,KAAKC,OAChB,CAEOslB,UAAAA,GACH,MClgBQ,ODmgBZ,CAEOC,aAAAA,CACHC,EACAC,GAEA,MAAMC,EAAQ7f,OAAO8f,MAAMH,EAAWC,GAEtC,OADA1lB,KAAKC,QAAQ4lB,QAAQF,GACdA,CACX,CAEO/B,SAAAA,CACH5hB,GAGI,IAFJqD,IAAKsM,UAAA/O,OAAA,QAAAqD,IAAA0L,UAAA,KAAAA,UAAA,GACLxE,EAA6BwE,UAAA/O,OAAA+O,EAAAA,kBAAA1L,EAE7B,MAAM6f,EAAaA,CACfC,EACAC,EACAC,KAEsBjmB,KAAK6jB,oBAAoBkC,GACjC3E,KACV6E,EACAD,EACAhmB,KAAKiR,QAAQoQ,eAChB,EAGL,GAAIrf,EAAKuE,YAAcvE,EAAKsJ,cACxB,GAAItJ,EAAKyU,eACLzW,KAAKkmB,mBAAmBlkB,EAAMqD,EAAO8H,OAClC,CACH,IAAI7E,EAAStG,EAAKsG,OAElB,KAAOA,GAECA,EAAOA,QACPwd,EAAWxd,GAAQ,GAEvBA,EAASA,EAAOA,OAGpBwd,EAAW9jB,EAAMqD,EAAO8H,GACxBnN,KAAKwU,WACT,CAER,CAMO8O,gBAAAA,CAAiBrZ,GACpB,MAAM0W,EAAe3gB,KAAKkP,gBACpBiX,IAAalc,GACbjK,KAAK2kB,wBAAwB1a,GAGnCjK,KAAKomB,SAASpc,OAAOC,GAEjBkc,GACAnmB,KAAKqmB,kBAAkB1F,GAG3B3gB,KAAKwlB,cAAc,eACvB,CAEOR,sBAAAA,CAAuBhjB,GAC1B,OAAIA,EAAKuE,WACEvG,KAAK6jB,oBAAoB7hB,GAEzBhC,KAAKsmB,kBAAkBtkB,EAEtC,CAEOukB,eAAAA,CAAgBtmB,GACnB,MAAM+B,EAAOhC,KAAK0jB,QAAQzjB,GAC1B,OAAI+B,EACOhC,KAAKglB,uBAAuBhjB,GAE5B,IAEf,CAEOwkB,cAAAA,GACH,OAAOxmB,KAAKklB,cAAc/M,eAC9B,CAEOhH,IAAAA,GACH7N,MAAM6N,OAENnR,KAAKC,QAAUD,KAAKoN,IACpBpN,KAAKymB,eAAgB,EAErBzmB,KAAKiR,QAAQvH,IAAM1J,KAAK0mB,eAEO,MAA3B1mB,KAAKiR,QAAQ7H,aACbpJ,KAAKiR,QAAQ7H,WAAapJ,KAAK2mB,wBAGnC3mB,KAAK4mB,kBAEL5mB,KAAK6mB,WAEL7mB,KAAKC,QAAQ6mB,GAAG,QAAS9mB,KAAK+mB,aAC9B/mB,KAAKC,QAAQ6mB,GAAG,WAAY9mB,KAAKgnB,gBAE7BhnB,KAAKiR,QAAQsR,gBACbviB,KAAKC,QAAQ6mB,GAAG,cAAe9mB,KAAKinB,kBAE5C,CAEOvX,MAAAA,GACH1P,KAAKC,QAAQmK,QACbpK,KAAKC,QAAQinB,MAEblnB,KAAKslB,WAAW5V,SAEhB1P,KAAK4B,KAAO,IAAI2Z,EAAK,CAAE,GAAE,GAEzBjY,MAAMoM,QACV,CAEUhK,YAAAA,CAAaC,GACnB,QAAI3F,KAAKiR,QAAQ3H,aACNtJ,KAAK8jB,WAAWpe,aAAaC,EAI5C,CAEUK,UAAAA,CAAWL,GACjB,QAAI3F,KAAKiR,QAAQ3H,aACNtJ,KAAK8jB,WAAW9d,WAAWL,EAI1C,CAEUS,SAAAA,CAAUT,GAChB,GAAI3F,KAAKiR,QAAQ3H,YAAa,CAC1B,MAAM0I,EAAShS,KAAK8jB,WAAW1d,UAAUT,GAGzC,OADA3F,KAAKklB,cAActK,eAAejV,GAC3BqM,CACX,CACI,OAAO,CAEf,CAEUlL,SAAAA,CAAUnB,GAChB,QAAI3F,KAAKiR,QAAQ3H,cACbtJ,KAAKklB,cAAc3M,gBACZvY,KAAK8jB,WAAWhd,UAAUnB,GAIzC,CAEUiO,aAAAA,GACN,OAAO5T,KAAKiR,QAAQqR,eAAiB,CACzC,CAEQuE,QAAAA,GACJ,GAAI7mB,KAAKiR,QAAQlG,KACb/K,KAAK+iB,WAAW/iB,KAAKiR,QAAQlG,KAAM,UAChC,CACa/K,KAAKmnB,eAAe,MAGhCnnB,KAAKojB,kBAAkB,KAAM,KAAM,MAEnCpjB,KAAK+iB,WAAW,GAAI,KAE5B,CACJ,CAEQoE,cAAAA,CAAenlB,GACnB,MAAMmgB,EACFniB,KAAKiR,QAAQkR,SAAYniB,KAAKC,QAAQ8K,KAAK,OAUzCqc,EAAkBna,IACpB,GAAIjL,GAAMwT,GAAI,CAEV,MAAMzK,EAAO,CAAE/I,KAAMA,EAAKwT,IAC1BvI,EAAc,KAAIlC,CACtB,KAAO,CAEH,MAAMsc,EAAiBrnB,KAAKoW,wBAC5B,GAAIiR,EAAgB,CAChB,MAAMtc,EAAO,CAAE0K,cAAe4R,GAC9Bpa,EAAc,KAAIlC,CACtB,CACJ,GAGJ,MAAuB,mBAAZoX,EACAA,EAAQngB,GACW,iBAAZmgB,EAzBQ1T,KACtB,MAAMxB,EAA+B,CAAEwB,OAIvC,OAFA2Y,EAAena,GAERA,CAAO,EAqBPqa,CAAiBnF,GACjBA,GAA8B,iBAAZA,GACzBiF,EAAejF,GACRA,GAEA,IAEf,CAEQ/L,qBAAAA,GACJ,OAAIpW,KAAKiR,QAAQuD,UACNxU,KAAK8kB,iBAAiB1O,wBAEtB,IAEf,CAEQmR,QAAAA,CAASxc,GACb,MAAMyc,EAASA,KACNxnB,KAAKymB,gBACNzmB,KAAKymB,eAAgB,EACrBzmB,KAAKwlB,cAAc,aACvB,EAGJ,IAAKxlB,KAAKiR,QAAQyK,UACd,OAGJ1b,KAAK4B,KAAO,IAAI5B,KAAKiR,QAAQyK,UACzB,MACA,EACA1b,KAAKiR,QAAQyK,WAGjB1b,KAAK6iB,kBAAkB7b,QAEvBhH,KAAK4B,KAAKma,aAAahR,GAEvB,MAAM8K,EAAmB7V,KAAK4V,kBAE9B5V,KAAKsjB,iBAAiB,MAEjBzN,EAID7V,KAAKiW,wBAAwBuR,GAH7BA,GAKR,CAIQ5R,eAAAA,GACJ,MAmBM6R,EAAgBA,KAElB,IAA8B,IAA1BznB,KAAKiR,QAAQiR,SACb,OAAO,EAGX,MAAMwF,EAAW1nB,KAAK2nB,sBACtB,IAAI9R,GAAmB,EAcvB,OAZA7V,KAAK4B,KAAKC,SAAQ,CAACG,EAAY4I,IACvB5I,EAAKyU,gBACLZ,GAAmB,GACZ,KACC7T,EAAKI,gBAGbJ,EAAKG,SAAU,EACRyI,IAAU8c,KAIlB7R,CAAgB,EAG3B,IAAK+R,EAAY/R,GA3CIgS,MAEjB,GAAK7nB,KAAKiR,QAAQuD,UAEX,CACH,MAAME,EAAQ1U,KAAK8kB,iBAAiB7P,sBAEpC,GAAKP,EAEE,CAKH,MAAO,EAAC,EAHJ1U,KAAK8kB,iBAAiBlP,gBAAgBlB,GAI9C,CAPI,MAAO,EAAC,GAAO,EAQvB,CAbI,MAAO,EAAC,GAAO,EAanB,EA2BiCmT,GAMrC,OAJKD,IACD/R,EAAmB4R,KAGhB5R,CACX,CAIQI,uBAAAA,CAAwBC,GAC5B,MAmBMuR,EAAgBA,KAClB,MAAMC,EAAW1nB,KAAK2nB,sBACtB,IAAI9Q,EAAe,EAEnB,MAAME,EAAmB/U,IACrB6U,GAAgB,EAChB7W,KAAK4jB,UAAU5hB,GAAM,GAAO,KACxB6U,GAAgB,EAChBtB,GAAW,GACb,EAGAA,EAAYA,KACdvV,KAAK4B,KAAKC,SAAQ,CAACG,EAAY4I,IACvB5I,EAAKyU,gBACAzU,EAAKuK,YACNwK,EAAgB/U,IAGb,IAEPhC,KAAK4jB,UAAU5hB,GAAM,GAEd4I,IAAU8c,KAIJ,IAAjB7Q,GACAX,GACJ,EAGJX,GAAW,EAnDMsS,MACjB,GAAK7nB,KAAKiR,QAAQuD,UAEX,CACH,MAAME,EAAQ1U,KAAK8kB,iBAAiB7P,sBAEpC,QAAKP,IAGD1U,KAAK8kB,iBAAiB7O,wBAClBvB,EACAwB,IAGG,EAEf,CAdI,OAAO,CAcX,EAsCC2R,IACDJ,GAER,CAEQE,mBAAAA,GACJ,OAA8B,IAA1B3nB,KAAKiR,QAAQiR,UACL,EACgC,iBAA1BliB,KAAKiR,QAAQiR,SACpBliB,KAAKiR,QAAQiR,SACoB,iBAA1BliB,KAAKiR,QAAQiR,SACpB4F,SAAS9nB,KAAKiR,QAAQiR,SAAU,IAEhC,CAEf,CAEQ6E,YACJ3W,IAEA,MAAM2X,EAAc/nB,KAAKgoB,eAAe5X,EAAExK,QAE1C,GAAImiB,EACA,GAAyB,WAArBA,EAAYE,KACZjoB,KAAKwiB,OAAOuF,EAAY/lB,KAAMhC,KAAKiR,QAAQ5L,OAE3C+K,EAAEgD,iBACFhD,EAAE8X,uBACC,GAAyB,UAArBH,EAAYE,KAAkB,CACrC,MAAMjmB,EAAO+lB,EAAY/lB,KACXhC,KAAKwlB,cAAc,aAAc,CAC3CxjB,OACAmmB,YAAa/X,IAGNrH,sBACP/I,KAAK4iB,aAAa5gB,EAE1B,CACJ,EAGIglB,eACJ5W,IAEA,MAAM2X,EAAc/nB,KAAKgoB,eAAe5X,EAAExK,QAEhB,UAAtBmiB,GAAaE,MACbjoB,KAAKwlB,cAAc,gBAAiB,CAChCxjB,KAAM+lB,EAAY/lB,KAClBmmB,YAAa/X,GAErB,EAGI4X,cAAAA,CAAe/nB,GACnB,MAAMgT,EAAShT,EAAQmoB,QAAQ,mBAE/B,GAAInV,EAAQ,CACR,MAAMjR,EAAOhC,KAAK0jB,QAAQzQ,GAE1B,GAAIjR,EACA,MAAO,CACHimB,KAAM,SACNjmB,OAGZ,KAAO,CACH,MAAMqmB,EAAgBpoB,EAAQmoB,QAAQ,mBAEtC,GAAIC,EAAe,CACf,MAAMrmB,EAAOhC,KAAK0jB,QAAQ2E,GAC1B,GAAIrmB,EACA,MAAO,CACHimB,KAAM,QACNjmB,OAGZ,CACJ,CAEA,OAAO,IACX,CAEQ0hB,OAAAA,CAAQzjB,GACZ,MAAMqoB,EAAYroB,EAAQmoB,QAAQ,oBAElC,OAAIE,EACOxiB,OAAOwiB,GAAWvd,KAAK,QAEvB,IAEf,CAEQkc,kBACJ7W,IAEA,MAAMrE,EAAMqE,EAAExK,OAAOwiB,QAAQ,kCAE7B,GAAIrc,EAAK,CACL,MAAM/J,EAAOhC,KAAK0jB,QAAQ3X,GAC1B,GAAI/J,EAQA,OAPAoO,EAAEgD,iBACFhD,EAAE8X,kBAEFloB,KAAKwlB,cAAc,mBAAoB,CACnCxjB,OACAmmB,YAAa/X,KAEV,CAEf,CAEA,OAAO,IAAI,EAGPoE,SAAAA,GACAxU,KAAKiR,QAAQuD,WACbxU,KAAK8kB,iBAAiBtQ,WAE9B,CAEQ6R,iBAAAA,CAAkB1F,GACtB,MAAM3e,EAAOhC,KAAKiP,kBAClB,GAAIjN,EAAM,CACN,MAAM+D,EAAc/F,KAAKglB,uBAAuBhjB,GAC5C+D,GACAA,EAAY2a,OAAOC,EAE3B,CACJ,CAEQ4H,mBAAAA,GACJ,MAAMvmB,EAAOhC,KAAKiP,kBACdjN,GACAhC,KAAKuU,oBAAoBvS,EAEjC,CAEQ2kB,oBAAAA,GACJ,OAAI3mB,KAAKiR,QAAQvH,IAEN,WAGA,UAEf,CAEQgd,YAAAA,GACJ,GAAwB,MAApB1mB,KAAKiR,QAAQvH,IACb,OAAO1J,KAAKiR,QAAQvH,IACjB,CACH,MAAM8e,EAAUxoB,KAAKC,QAAQ8K,KAAK,OAElC,OACgB,OAAZyd,IACY,IAAZA,QACYviB,IAAZuiB,CAMR,CACJ,CAEQ5F,YAAAA,CACJ5gB,EACA2gB,GAEA,MAAMnO,EAAYA,KACVxU,KAAKiR,QAAQuD,WACbxU,KAAK8kB,iBAAiBtQ,WAC1B,EAGJ,IAAKxS,EAID,OAFAhC,KAAKuoB,2BACL/T,IAGJ,MACMiU,EAAgB,CADG9H,cAAc,EAAM+H,YAAY,KACV/F,GAAgB,CAAE,GAajE,GAXkBgG,KACV3oB,KAAKiR,QAAQmR,iBAEmB,IAA5BpiB,KAAKiR,QAAQoR,YACbriB,KAAKiR,QAAQmR,gBAAgBpgB,IAGE,IAA5BhC,KAAKiR,QAAQoR,WAIvBsG,GAAL,CAIA,GAAI3oB,KAAK6iB,kBAAkBrZ,eAAexH,GAClCymB,EAAcC,aACd1oB,KAAKuoB,sBACLvoB,KAAKwlB,cAAc,cAAe,CAC9BxjB,KAAM,KACN4mB,cAAe5mB,SAGpB,CACH,MAAM6mB,EAAiB7oB,KAAKiP,mBAAqB,KACjDjP,KAAKuoB,sBACLvoB,KAAKkU,eAAelS,EAAMymB,EAAc9H,cAExC3gB,KAAKwlB,cAAc,cAAe,CAC9BxjB,OACA8mB,gBAAiBD,IAErB7oB,KAAK+kB,YAAY/iB,EACrB,CAEAwS,GAtBA,CAuBJ,CAEQuO,UAAAA,CAAWhY,EAAyBmC,GACpCnC,IACImC,GACAlN,KAAK+oB,cAAc7b,GACnBlN,KAAKgpB,YAAYje,EAAMmC,IAEvBlN,KAAKunB,SAASxc,GAGd/K,KAAKwF,cACLxF,KAAK8jB,WAAW5d,WAIxBlG,KAAKwlB,cAAc,iBAAkB,CACjCyD,UAAWle,EACXme,YAAahc,GAErB,CAEQ6b,aAAAA,CAAc7b,GAClB,MAAMic,EACFnpB,KAAK6iB,kBAAkB5H,sBAAsB/N,GACjD,IAAK,MAAMmJ,KAAK8S,EACZnpB,KAAK6iB,kBAAkBtO,oBAAoB8B,EAEnD,CAEQ2S,WAAAA,CAAYje,EAAkBmC,GAClCA,EAAW6O,aAAahR,GAExBmC,EAAWuJ,gBAAiB,EAC5BvJ,EAAWX,YAAa,EAExBvM,KAAKsjB,iBAAiBpW,EAC1B,CAEQkW,iBAAAA,CACJgG,EACAlc,EACAC,GAEA,MAAMF,EAAUmc,GAAgBppB,KAAKmnB,eAAeja,GAEpDlN,KAAKqpB,WAAWrc,YAAYC,EAASC,EAAYC,EACrD,CAEQ+Y,kBAAAA,CACJlkB,GAGI,IAFJqD,IAAKsM,UAAA/O,OAAA,QAAAqD,IAAA0L,UAAA,KAAAA,UAAA,GACLxE,EAA6BwE,UAAA/O,OAAA+O,EAAAA,kBAAA1L,EAE7BjE,EAAKuK,YAAa,EAElBvM,KAAKojB,kBAAkB,KAAMphB,GAAM,KAC/BhC,KAAK4jB,UAAU5hB,EAAMqD,EAAO8H,EAAW,GAE/C,CAEQmc,eAAAA,CAAgBrpB,GACpB,MAAM+B,EAAOhC,KAAK0jB,QAAQzjB,GAE1B,OAAe,MAAR+B,GAAgBA,EAAKJ,OAAS5B,KAAK4B,IAC9C,CAEQsN,aAAAA,GACJ,MAAMqa,EAAgB5oB,SAAS4oB,cAE/B,OAAOle,QACHke,GAC8B,SAA1BA,EAAc9O,SACdza,KAAKspB,gBAAgBC,GAEjC,CAEQ3C,eAAAA,GACJ,MAAMjnB,WACFA,EAAUwJ,WACVA,EAAUC,WACVA,EAAUuD,WACVA,EAAUrD,YACVA,EAAW6F,gBACXA,EAAerK,UACfA,EAASuE,WACTA,EAAUrE,WACVA,EAAUC,WACVA,EAAUoP,sBACVA,EAAqBnP,eACrBA,EAAc2H,aACdA,EAAYC,UACZA,EAASwH,sBACTA,EAAqB7K,WACrBA,EAAU1B,gBACVA,EAAe2B,IACfA,EAAG8K,UACHA,EAAS7K,gBACTA,EAAetE,MACfA,EAAKuE,SACLA,GACA5J,KAAKiR,QAEHjC,EAAYhP,KAAKgP,UAAUQ,KAAKxP,MAChC2E,EAAiB3E,KAAKumB,gBAAgB/W,KAAKxP,MAC3C4E,EAAwB5E,KAAKglB,uBAAuBxV,KAAKxP,MACzDmU,EAAcnU,KAAKmU,YAAY3E,KAAKxP,MACpCiP,EAAkBjP,KAAKiP,gBAAgBO,KAAKxP,MAC5C6E,EAAU7E,KAAK6E,QAAQ2K,KAAKxP,MAC5BkP,EAAgBlP,KAAKkP,cAAcM,KAAKxP,MACxC4M,EAAW5M,KAAK4M,SAAS4C,KAAKxP,MAC9BmF,EAAWnF,KAAK4jB,UAAUpU,KAAKxP,MAC/BoF,EAAkBpF,KAAKsjB,iBAAiB9T,KAAKxP,MAC7CsX,EAAkBtX,KAAKsX,gBAAgB9H,KAAKxP,MAC5CoP,EAAapP,KAAKoP,WAAWI,KAAKxP,MAClC+M,EAAe/M,KAAKC,QACpBF,EAAcC,KAAKC,QAAQiR,IAAI,GAC/B5L,EAAetF,KAAKwlB,cAAchW,KAAKxP,MAEvC6iB,EAAoB,IAAI/H,EAAkB,CAC5C3G,gBAGED,EACF2O,EAAkB3O,eAAe1E,KAAKqT,GACpCzO,EACFyO,EAAkBzO,iBAAiB5E,KAAKqT,GACtCrZ,EACFqZ,EAAkBrZ,eAAegG,KAAKqT,GACpCtO,EACFsO,EAAkBtO,oBAAoB/E,KAAKqT,GAEzCwG,EAAa,IAAI3c,EAAW,CAC9BC,aACAC,WACAC,eACAC,YACAC,eACAzH,iBAGEwf,EAAmB,IAAI7Q,EAAiB,CAC1CC,iBACAC,cACAC,mBACAvP,UACAwP,wBACAC,wBACAnP,WACAC,kBACAmP,sBACAC,cAGEsP,EAAa,IAAIpf,EAAmB,CACtC/E,aACAgF,iBACAC,wBACAC,UACAC,YACAE,aACAC,aACAC,iBACA6C,kBACA5C,WACAC,kBACAC,QACAtF,cACAuF,iBAGE4f,EAAgB,IAAIxK,EAAc,CACpCpD,kBACAvX,gBAGEulB,EAAa,IAAIvW,EAAW,CAC9BC,YACAC,kBACAC,gBACAC,kBACAhK,WACAiK,eAGEgX,GAAW,IAAIld,EAAiB,CAClCvJ,aACAwJ,aACAC,aACAE,cACAC,SAAUwD,EACVlI,UACA2E,iBACAH,aACAI,aACAC,MACAC,kBACAC,aAGJ5J,KAAKqpB,WAAaA,EAClBrpB,KAAK8jB,WAAaA,EAClB9jB,KAAKslB,WAAaA,EAClBtlB,KAAKomB,SAAWA,GAChBpmB,KAAK8kB,iBAAmBA,EACxB9kB,KAAKklB,cAAgBA,EACrBllB,KAAK6iB,kBAAoBA,CAC7B,CAEQgB,mBAAAA,CAAoB7hB,GACxB,MAAM+H,EAAoB/J,KAAKomB,SAASrc,kBAClCoO,EAAgBnY,KAAKwmB,eAAehX,KAAKxP,MACzC6J,EAAoB7J,KAAKomB,SAASvc,kBAClCD,EAAW5J,KAAKiR,QAAQrH,SACxBmD,EAAe/M,KAAKC,QACpBqF,EAAetF,KAAKwlB,cAAchW,KAAKxP,MAE7C,OAAO,IAAImhB,EAAc,CACrBpX,oBACAoO,gBACAnW,OACA6H,oBACAD,WACAmD,eACAzH,gBAER,CAEQghB,iBAAAA,CAAkBtkB,GACtB,MAAMmW,EAAgBnY,KAAKwmB,eAAehX,KAAKxP,MACzC4J,EAAW5J,KAAKiR,QAAQrH,SACxBmD,EAAe/M,KAAKC,QAE1B,OAAO,IAAIugB,EAAY,CACnBrI,gBACAnW,OACA4H,WACAmD,gBAER,CAEQgY,WAAAA,CAAY/iB,GAChB,MAAMsG,EAAStG,EAAKsG,OAEhBA,GAAUA,EAAOA,SAAWA,EAAOnG,SACnCnC,KAAKmF,SAASmD,GAAQ,EAE9B,SAGJyI,EAAaR,SAAS0R,EAAc"}