{"version":3,"file":"tree.jquery.js","sources":["src/dataLoader.ts","src/position.ts","src/util.ts","src/dragAndDropHandler/dragElement.ts","src/dragAndDropHandler/iterateVisibleNodes.ts","src/dragAndDropHandler/generateHitAreas.ts","src/dragAndDropHandler/index.ts","src/elementsRenderer.ts","src/keyHandler.ts","src/mouseUtils.ts","src/mouseHandler.ts","src/nodeUtils.ts","src/node.ts","src/nodeElement/borderDropHint.ts","src/nodeElement/ghostDropHint.ts","src/nodeElement/index.ts","src/nodeElement/folderElement.ts","src/saveStateHandler.ts","src/scrollHandler/containerScrollParent.ts","src/scrollHandler/documentScrollParent.ts","src/scrollHandler/createScrollParent.ts","src/scrollHandler.ts","src/selectNodeHandler.ts","src/simple.widget.ts","src/version.ts","src/tree.jquery.ts"],"sourcesContent":["import { LoadData, TriggerEvent } from \"./jqtreeMethodTypes\";\nimport { DataFilter, OnLoadFailed, OnLoading } from \"./jqtreeOptions\";\nimport { Node } from \"./node\";\n\nexport type HandleFinishedLoading = () => void;\n\ninterface DataLoaderParams {\n    dataFilter?: DataFilter;\n    loadData: LoadData;\n    onLoadFailed?: OnLoadFailed;\n    onLoading?: OnLoading;\n    treeElement: HTMLElement;\n    triggerEvent: TriggerEvent;\n}\n\nexport default class DataLoader {\n    private dataFilter?: DataFilter;\n    private loadData: LoadData;\n    private onLoadFailed?: OnLoadFailed;\n    private onLoading?: OnLoading;\n    private treeElement: HTMLElement;\n    private triggerEvent: TriggerEvent;\n\n    constructor({\n        dataFilter,\n        loadData,\n        onLoadFailed,\n        onLoading,\n        treeElement,\n        triggerEvent,\n    }: DataLoaderParams) {\n        this.dataFilter = dataFilter;\n        this.loadData = loadData;\n        this.onLoadFailed = onLoadFailed;\n        this.onLoading = onLoading;\n        this.treeElement = treeElement;\n        this.triggerEvent = triggerEvent;\n    }\n\n    private addLoadingClass(element: HTMLElement): void {\n        element.classList.add(\"jqtree-loading\");\n    }\n\n    private getDomElement(parentNode: Node | null): HTMLElement {\n        if (parentNode?.element) {\n            return parentNode.element;\n        } else {\n            return this.treeElement;\n        }\n    }\n\n    private notifyLoading(\n        isLoading: boolean,\n        node: Node | null,\n        element: HTMLElement,\n    ): void {\n        const $el = jQuery(element);\n\n        if (this.onLoading) {\n            this.onLoading(isLoading, node, $el);\n        }\n\n        this.triggerEvent(\"tree.loading_data\", {\n            $el,\n            isLoading,\n            node,\n        });\n    }\n\n    private parseData(data: NodeData[] | string): NodeData[] {\n        const getParsedData = () => {\n            if (typeof data === \"string\") {\n                return JSON.parse(data) as NodeData[];\n            } else {\n                return data;\n            }\n        };\n\n        const parsedData = getParsedData();\n\n        if (this.dataFilter) {\n            return this.dataFilter(parsedData);\n        } else {\n            return parsedData;\n        }\n    }\n\n    private removeLoadingClass(element: HTMLElement): void {\n        element.classList.remove(\"jqtree-loading\");\n    }\n\n    private submitRequest(\n        urlInfoInput: JQuery.AjaxSettings | string,\n        handleSuccess: JQuery.Ajax.SuccessCallback<any>,\n        handleError: JQuery.Ajax.ErrorCallback<any>,\n    ): void {\n        const urlInfo =\n            typeof urlInfoInput === \"string\"\n                ? { url: urlInfoInput }\n                : urlInfoInput;\n\n        const ajaxSettings: JQuery.AjaxSettings = {\n            cache: false,\n            dataType: \"json\",\n            error: handleError,\n            method: \"GET\",\n            success: handleSuccess,\n            ...urlInfo,\n        };\n\n        ajaxSettings.method = ajaxSettings.method?.toUpperCase() ?? \"GET\";\n\n        void jQuery.ajax(ajaxSettings);\n    }\n\n    public loadFromUrl(\n        urlInfo: JQuery.AjaxSettings | null | string,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null,\n    ): void {\n        if (!urlInfo) {\n            return;\n        }\n\n        const element = this.getDomElement(parentNode);\n        this.addLoadingClass(element);\n        this.notifyLoading(true, parentNode, element);\n\n        const stopLoading = (): void => {\n            this.removeLoadingClass(element);\n            this.notifyLoading(false, parentNode, element);\n        };\n\n        const handleSuccess = (data: NodeData[] | string): void => {\n            stopLoading();\n            this.loadData(this.parseData(data), parentNode);\n\n            if (onFinished && typeof onFinished === \"function\") {\n                onFinished();\n            }\n        };\n\n        const handleError = (jqXHR: JQuery.jqXHR): void => {\n            stopLoading();\n\n            if (this.onLoadFailed) {\n                this.onLoadFailed(jqXHR);\n            }\n        };\n\n        this.submitRequest(urlInfo, handleSuccess, handleError);\n    }\n}\n","export enum Position {\n    Before = 1,\n    After,\n    Inside,\n    None,\n}\n\nconst positionNames: Record<string, Position> = {\n    after: Position.After,\n    before: Position.Before,\n    inside: Position.Inside,\n    none: Position.None,\n};\n\nexport const getPositionName = (position: Position): string => {\n    for (const name in positionNames) {\n        if (Object.prototype.hasOwnProperty.call(positionNames, name)) {\n            if (positionNames[name] === position) {\n                return name;\n            }\n        }\n    }\n\n    return \"\";\n};\n\nexport const getPosition = (name: string): Position | undefined =>\n    positionNames[name];\n","export const isInt = (n: unknown): boolean =>\n    typeof n === \"number\" && n % 1 === 0;\n\nexport const isFunction = (v: unknown): boolean => typeof v === \"function\";\n\nexport const getBoolString = (value: unknown): string =>\n    value ? \"true\" : \"false\";\n\nexport const getOffsetTop = (element: HTMLElement) =>\n    getElementPosition(element).top;\n\nexport const getElementPosition = (element: HTMLElement) => {\n    const rect = element.getBoundingClientRect();\n\n    return {\n        left: rect.x + window.scrollX,\n        top: rect.y + window.scrollY,\n    };\n};\n","interface DragElementParams {\n    autoEscape: boolean;\n    nodeName: string;\n    offsetX: number;\n    offsetY: number;\n    treeElement: HTMLElement;\n}\n\nclass DragElement {\n    private element: HTMLElement;\n    private offsetX: number;\n    private offsetY: number;\n\n    constructor({\n        autoEscape,\n        nodeName,\n        offsetX,\n        offsetY,\n        treeElement,\n    }: DragElementParams) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n\n        this.element = this.createElement(nodeName, autoEscape);\n\n        treeElement.appendChild(this.element);\n    }\n\n    private createElement(nodeName: string, autoEscape: boolean) {\n        const element = document.createElement(\"span\");\n        element.classList.add(\"jqtree-title\", \"jqtree-dragging\");\n\n        if (autoEscape) {\n            element.textContent = nodeName;\n        } else {\n            element.innerHTML = nodeName;\n        }\n\n        element.style.position = \"absolute\";\n\n        return element;\n    }\n\n    public move(pageX: number, pageY: number): void {\n        this.element.style.left = `${pageX - this.offsetX}px`;\n        this.element.style.top = `${pageY - this.offsetY}px`;\n    }\n\n    public remove(): void {\n        this.element.remove();\n    }\n}\n\nexport default DragElement;\n","import { Node } from \"../node\";\n\ninterface Options {\n    handleAfterOpenFolder: (node: Node, nextNode: Node | null) => void;\n    handleClosedFolder: (\n        node: Node,\n        nextNode: Node | null,\n        element: HTMLElement,\n    ) => void;\n    handleFirstNode: (node: Node) => void;\n    handleNode: (\n        node: Node,\n        nextNode: Node | null,\n        element: HTMLElement,\n    ) => void;\n\n    /*\n    override\n    return\n        - true: continue iterating\n        - false: stop iterating\n    */\n    handleOpenFolder: (node: Node, element: HTMLElement) => boolean;\n}\n\nconst iterateVisibleNodes = (\n    tree: Node,\n    {\n        handleAfterOpenFolder,\n        handleClosedFolder,\n        handleFirstNode,\n        handleNode,\n        handleOpenFolder,\n    }: Options,\n) => {\n    let isFirstNode = true;\n\n    const iterate = (node: Node, nextNode: Node | null): void => {\n        let mustIterateInside =\n            (node.is_open || !node.element) && node.hasChildren();\n\n        let element: HTMLElement | null = null;\n\n        // Is the element visible?\n        if (node.element?.offsetParent) {\n            element = node.element;\n\n            if (isFirstNode) {\n                handleFirstNode(node);\n                isFirstNode = false;\n            }\n\n            if (!node.hasChildren()) {\n                handleNode(node, nextNode, node.element);\n            } else if (node.is_open) {\n                if (!handleOpenFolder(node, node.element)) {\n                    mustIterateInside = false;\n                }\n            } else {\n                handleClosedFolder(node, nextNode, element);\n            }\n        }\n\n        if (mustIterateInside) {\n            const childrenLength = node.children.length;\n            node.children.forEach((_, i) => {\n                const child = node.children[i];\n\n                if (child) {\n                    if (i === childrenLength - 1) {\n                        iterate(child, null);\n                    } else {\n                        const nextChild = node.children[i + 1];\n\n                        if (nextChild) {\n                            iterate(child, nextChild);\n                        }\n                    }\n                }\n            });\n\n            if (node.is_open && element) {\n                handleAfterOpenFolder(node, nextNode);\n            }\n        }\n    };\n\n    iterate(tree, null);\n};\n\nexport default iterateVisibleNodes;\n","import { Node } from \"../node\";\nimport { Position } from \"../position\";\nimport { getOffsetTop } from \"../util\";\nimport iterateVisibleNodes from \"./iterateVisibleNodes\";\nimport { HitArea } from \"./types\";\n\ninterface HitPosition {\n    node: Node;\n    position: Position;\n    top: number;\n}\n\nexport const generateHitPositions = (\n    tree: Node,\n    currentNode: Node,\n): HitPosition[] => {\n    const hitPositions: HitPosition[] = [];\n    let lastTop = 0;\n\n    const addHitPosition = (node: Node, position: number, top: number) => {\n        hitPositions.push({\n            node,\n            position,\n            top,\n        });\n        lastTop = top;\n    };\n\n    const handleAfterOpenFolder = (node: Node, nextNode: Node | null) => {\n        if (node === currentNode || nextNode === currentNode) {\n            // Cannot move before or after current item\n            addHitPosition(node, Position.None, lastTop);\n        } else {\n            addHitPosition(node, Position.After, lastTop);\n        }\n    };\n\n    const handleClosedFolder = (\n        node: Node,\n        nextNode: Node | null,\n        element: HTMLElement,\n    ) => {\n        const top = getOffsetTop(element);\n\n        if (node === currentNode) {\n            // Cannot move after current item\n            addHitPosition(node, Position.None, top);\n        } else {\n            addHitPosition(node, Position.Inside, top);\n\n            // Cannot move before current item\n            if (nextNode !== currentNode) {\n                addHitPosition(node, Position.After, top);\n            }\n        }\n    };\n\n    const handleFirstNode = (node: Node) => {\n        if (node !== currentNode && node.element) {\n            addHitPosition(node, Position.Before, getOffsetTop(node.element));\n        }\n    };\n\n    const handleNode = (\n        node: Node,\n        nextNode: Node | null,\n        element: HTMLElement,\n    ) => {\n        const top = getOffsetTop(element);\n\n        if (node === currentNode) {\n            // Cannot move inside current item\n            addHitPosition(node, Position.None, top);\n        } else {\n            addHitPosition(node, Position.Inside, top);\n        }\n\n        if (nextNode === currentNode || node === currentNode) {\n            // Cannot move before or after current item\n            addHitPosition(node, Position.None, top);\n        } else {\n            addHitPosition(node, Position.After, top);\n        }\n    };\n\n    const handleOpenFolder = (node: Node, element: HTMLElement) => {\n        if (node === currentNode) {\n            // Cannot move inside current item\n\n            // Dnd over the current element is not possible: add a position with type None for the top and the bottom.\n            const top = getOffsetTop(element);\n            const height = element.clientHeight;\n            addHitPosition(node, Position.None, top);\n\n            if (height > 5) {\n                // Subtract 5 pixels to allow more space for the next element.\n                addHitPosition(node, Position.None, top + height - 5);\n            }\n\n            // Stop iterating\n            return false;\n        }\n\n        // Cannot move before current item\n        if (node.children[0] !== currentNode) {\n            addHitPosition(node, Position.Inside, getOffsetTop(element));\n        }\n\n        // Continue iterating\n        return true;\n    };\n\n    iterateVisibleNodes(tree, {\n        handleAfterOpenFolder,\n        handleClosedFolder,\n        handleFirstNode,\n        handleNode,\n        handleOpenFolder,\n    });\n\n    return hitPositions;\n};\n\nexport const generateHitAreasForGroup = (\n    hitAreas: HitArea[],\n    positionsInGroup: HitPosition[],\n    top: number,\n    bottom: number,\n) => {\n    // limit positions in group\n    const positionCount = Math.min(positionsInGroup.length, 4);\n\n    const areaHeight = Math.round((bottom - top) / positionCount);\n    let areaTop = top;\n\n    for (let i = 0; i < positionCount; i++) {\n        const position = positionsInGroup[i] as HitPosition;\n\n        if (position.position !== Position.None) {\n            hitAreas.push({\n                bottom: areaTop + areaHeight,\n                node: position.node,\n                position: position.position,\n                top: areaTop,\n            });\n        }\n\n        areaTop += areaHeight;\n    }\n};\n\nexport const generateHitAreasFromPositions = (\n    hitPositions: HitPosition[],\n    treeBottom: number,\n): HitArea[] => {\n    if (!hitPositions.length) {\n        return [];\n    }\n\n    let previousTop = (hitPositions[0] as HitPosition).top;\n    let group: HitPosition[] = [];\n    const hitAreas: HitArea[] = [];\n\n    for (const position of hitPositions) {\n        if (position.top !== previousTop && group.length) {\n            generateHitAreasForGroup(\n                hitAreas,\n                group,\n                previousTop,\n                position.top,\n            );\n\n            previousTop = position.top;\n            group = [];\n        }\n\n        group.push(position);\n    }\n\n    generateHitAreasForGroup(hitAreas, group, previousTop, treeBottom);\n\n    return hitAreas;\n};\n\nconst generateHitAreas = (tree: Node, currentNode: Node, treeBottom: number) =>\n    generateHitAreasFromPositions(\n        generateHitPositions(tree, currentNode),\n        treeBottom,\n    );\n\nexport default generateHitAreas;\n","import {\n    GetScrollLeft,\n    GetTree,\n    OpenNode,\n    RefreshElements,\n    TriggerEvent,\n} from \"../jqtreeMethodTypes\";\nimport {\n    DragMethod,\n    OnCanMove,\n    OnCanMoveTo,\n    OnIsMoveHandle,\n} from \"../jqtreeOptions\";\nimport { PositionInfo } from \"../mouseUtils\";\nimport { Node } from \"../node\";\nimport NodeElement from \"../nodeElement\";\nimport { getPositionName, Position } from \"../position\";\nimport { getElementPosition } from \"../util\";\nimport DragElement from \"./dragElement\";\nimport generateHitAreas from \"./generateHitAreas\";\nimport { DropHint, HitArea } from \"./types\";\n\ninterface Dimensions {\n    bottom: number;\n    left: number;\n    right: number;\n    top: number;\n}\n\ntype GetNodeElement = (element: HTMLElement) => NodeElement | null;\ntype GetNodeElementForNode = (node: Node) => NodeElement;\n\ninterface DragAndDropHandlerParams {\n    autoEscape?: boolean;\n    getNodeElement: GetNodeElement;\n    getNodeElementForNode: GetNodeElementForNode;\n    getScrollLeft: GetScrollLeft;\n    getTree: GetTree;\n    onCanMove?: OnCanMove;\n    onCanMoveTo?: OnCanMoveTo;\n    onDragMove?: DragMethod;\n    onDragStop?: DragMethod;\n    onIsMoveHandle?: OnIsMoveHandle;\n    openFolderDelay: false | number;\n    openNode: OpenNode;\n    refreshElements: RefreshElements;\n    slide: boolean;\n    treeElement: HTMLElement;\n    triggerEvent: TriggerEvent;\n}\n\nexport class DragAndDropHandler {\n    private autoEscape?: boolean;\n    private dragElement: DragElement | null;\n    private getNodeElement: GetNodeElement;\n    private getNodeElementForNode: GetNodeElementForNode;\n\n    private getScrollLeft: GetScrollLeft;\n    private getTree: GetTree;\n    private onCanMove?: OnCanMove;\n    private onCanMoveTo?: OnCanMoveTo;\n    private onDragMove?: DragMethod;\n    private onDragStop?: DragMethod;\n    private onIsMoveHandle?: OnIsMoveHandle;\n    private openFolderDelay: false | number;\n    private openFolderTimer: null | number;\n    private openNode: OpenNode;\n    private previousGhost: DropHint | null;\n    private refreshElements: RefreshElements;\n    private slide: boolean;\n    private treeElement: HTMLElement;\n    private triggerEvent: TriggerEvent;\n    public currentItem: NodeElement | null;\n    public hitAreas: HitArea[];\n    public hoveredArea: HitArea | null;\n    public isDragging: boolean;\n\n    constructor({\n        autoEscape,\n        getNodeElement,\n        getNodeElementForNode,\n        getScrollLeft,\n        getTree,\n        onCanMove,\n        onCanMoveTo,\n        onDragMove,\n        onDragStop,\n        onIsMoveHandle,\n        openNode,\n        refreshElements,\n        slide,\n        treeElement,\n        triggerEvent,\n    }: DragAndDropHandlerParams) {\n        this.autoEscape = autoEscape;\n        this.getNodeElement = getNodeElement;\n        this.getNodeElementForNode = getNodeElementForNode;\n        this.getScrollLeft = getScrollLeft;\n        this.getTree = getTree;\n        this.onCanMove = onCanMove;\n        this.onCanMoveTo = onCanMoveTo;\n        this.onDragMove = onDragMove;\n        this.onDragStop = onDragStop;\n        this.onIsMoveHandle = onIsMoveHandle;\n        this.openNode = openNode;\n        this.refreshElements = refreshElements;\n        this.slide = slide;\n        this.treeElement = treeElement;\n        this.triggerEvent = triggerEvent;\n\n        this.hoveredArea = null;\n        this.hitAreas = [];\n        this.isDragging = false;\n        this.currentItem = null;\n    }\n\n    private canMoveToArea(area: HitArea): boolean {\n        if (!this.onCanMoveTo) {\n            return true;\n        }\n\n        if (!this.currentItem) {\n            return false;\n        }\n\n        const positionName = getPositionName(area.position);\n\n        return this.onCanMoveTo(this.currentItem.node, area.node, positionName);\n    }\n\n    private clear(): void {\n        if (this.dragElement) {\n            this.dragElement.remove();\n            this.dragElement = null;\n        }\n    }\n\n    private findHoveredArea(x: number, y: number): HitArea | null {\n        const dimensions = this.getTreeDimensions();\n\n        if (\n            x < dimensions.left ||\n            y < dimensions.top ||\n            x > dimensions.right ||\n            y > dimensions.bottom\n        ) {\n            return null;\n        }\n\n        let low = 0;\n        let high = this.hitAreas.length;\n        while (low < high) {\n            const mid = (low + high) >> 1;\n            const area = this.hitAreas[mid];\n\n            if (!area) {\n                return null;\n            }\n\n            if (y < area.top) {\n                high = mid;\n            } else if (y > area.bottom) {\n                low = mid + 1;\n            } else {\n                return area;\n            }\n        }\n\n        return null;\n    }\n\n    private generateHitAreas(): void {\n        const tree = this.getTree();\n\n        if (!this.currentItem || !tree) {\n            this.hitAreas = [];\n        } else {\n            this.hitAreas = generateHitAreas(\n                tree,\n                this.currentItem.node,\n                this.getTreeDimensions().bottom,\n            );\n        }\n    }\n\n    private getTreeDimensions(): Dimensions {\n        // Return the dimensions of the tree. Add a margin to the bottom to allow\n        // to drag-and-drop after the last element.\n        const treePosition = getElementPosition(this.treeElement);\n        const left = treePosition.left + this.getScrollLeft();\n        const top = treePosition.top;\n\n        return {\n            bottom: top + this.treeElement.clientHeight + 16,\n            left,\n            right: left + this.treeElement.clientWidth,\n            top,\n        };\n    }\n\n    private moveItem(positionInfo: PositionInfo): void {\n        if (\n            this.currentItem &&\n            this.hoveredArea &&\n            this.hoveredArea.position !== Position.None &&\n            this.canMoveToArea(this.hoveredArea)\n        ) {\n            const movedNode = this.currentItem.node;\n            const targetNode = this.hoveredArea.node;\n            const position = this.hoveredArea.position;\n            const previousParent = movedNode.parent;\n\n            if (position === Position.Inside) {\n                this.hoveredArea.node.is_open = true;\n            }\n\n            const doMove = (): void => {\n                const tree = this.getTree();\n\n                if (tree) {\n                    tree.moveNode(movedNode, targetNode, position);\n\n                    this.treeElement.textContent = \"\";\n                    this.refreshElements(null);\n                }\n            };\n\n            const event = this.triggerEvent(\"tree.move\", {\n                move_info: {\n                    do_move: doMove,\n                    moved_node: movedNode,\n                    original_event: positionInfo.originalEvent,\n                    position: getPositionName(position),\n                    previous_parent: previousParent,\n                    target_node: targetNode,\n                },\n            });\n\n            if (!event.isDefaultPrevented()) {\n                doMove();\n            }\n        }\n    }\n\n    private mustCaptureElement(element: HTMLElement): boolean {\n        const nodeName = element.nodeName;\n\n        return (\n            nodeName !== \"INPUT\" &&\n            nodeName !== \"SELECT\" &&\n            nodeName !== \"TEXTAREA\"\n        );\n    }\n\n    private mustOpenFolderTimer(area: HitArea): boolean {\n        const node = area.node;\n\n        return (\n            node.isFolder() &&\n            !node.is_open &&\n            area.position === Position.Inside\n        );\n    }\n\n    private removeDropHint(): void {\n        if (this.previousGhost) {\n            this.previousGhost.remove();\n        }\n    }\n\n    private removeHitAreas(): void {\n        this.hitAreas = [];\n    }\n\n    private removeHover(): void {\n        this.hoveredArea = null;\n    }\n\n    private startOpenFolderTimer(folder: Node): void {\n        const openFolder = (): void => {\n            this.openNode(folder, this.slide, () => {\n                this.refresh();\n                this.updateDropHint();\n            });\n        };\n\n        this.stopOpenFolderTimer();\n\n        const openFolderDelay = this.openFolderDelay;\n\n        if (openFolderDelay !== false) {\n            this.openFolderTimer = window.setTimeout(\n                openFolder,\n                openFolderDelay,\n            );\n        }\n    }\n\n    private stopOpenFolderTimer(): void {\n        if (this.openFolderTimer) {\n            clearTimeout(this.openFolderTimer);\n            this.openFolderTimer = null;\n        }\n    }\n\n    private updateDropHint(): void {\n        if (!this.hoveredArea) {\n            return;\n        }\n\n        // remove previous drop hint\n        this.removeDropHint();\n\n        // add new drop hint\n        const nodeElement = this.getNodeElementForNode(this.hoveredArea.node);\n        this.previousGhost = nodeElement.addDropHint(this.hoveredArea.position);\n    }\n\n    public mouseCapture(positionInfo: PositionInfo): boolean | null {\n        const element = positionInfo.target;\n\n        if (!this.mustCaptureElement(element)) {\n            return null;\n        }\n\n        if (this.onIsMoveHandle && !this.onIsMoveHandle(jQuery(element))) {\n            return null;\n        }\n\n        let nodeElement = this.getNodeElement(element);\n\n        if (nodeElement && this.onCanMove) {\n            if (!this.onCanMove(nodeElement.node)) {\n                nodeElement = null;\n            }\n        }\n\n        this.currentItem = nodeElement;\n        return this.currentItem != null;\n    }\n\n    public mouseDrag(positionInfo: PositionInfo): boolean {\n        if (!this.currentItem || !this.dragElement) {\n            return false;\n        }\n\n        this.dragElement.move(positionInfo.pageX, positionInfo.pageY);\n\n        const area = this.findHoveredArea(\n            positionInfo.pageX,\n            positionInfo.pageY,\n        );\n\n        if (area && this.canMoveToArea(area)) {\n            if (!area.node.isFolder()) {\n                this.stopOpenFolderTimer();\n            }\n\n            if (this.hoveredArea !== area) {\n                this.hoveredArea = area;\n\n                // If this is a closed folder, start timer to open it\n                if (this.mustOpenFolderTimer(area)) {\n                    this.startOpenFolderTimer(area.node);\n                } else {\n                    this.stopOpenFolderTimer();\n                }\n\n                this.updateDropHint();\n            }\n        } else {\n            this.removeDropHint();\n            this.stopOpenFolderTimer();\n            this.hoveredArea = area;\n        }\n\n        if (!area) {\n            if (this.onDragMove) {\n                this.onDragMove(\n                    this.currentItem.node,\n                    positionInfo.originalEvent,\n                );\n            }\n        }\n\n        return true;\n    }\n\n    public mouseStart(positionInfo: PositionInfo): boolean {\n        if (!this.currentItem) {\n            return false;\n        }\n\n        this.refresh();\n\n        const { left, top } = getElementPosition(positionInfo.target);\n\n        const node = this.currentItem.node;\n\n        this.dragElement = new DragElement({\n            autoEscape: this.autoEscape ?? true,\n            nodeName: node.name,\n            offsetX: positionInfo.pageX - left,\n            offsetY: positionInfo.pageY - top,\n            treeElement: this.treeElement,\n        });\n\n        this.isDragging = true;\n        this.currentItem.element.classList.add(\"jqtree-moving\");\n\n        return true;\n    }\n\n    public mouseStop(positionInfo: PositionInfo): boolean {\n        this.moveItem(positionInfo);\n        this.clear();\n        this.removeHover();\n        this.removeDropHint();\n        this.removeHitAreas();\n\n        const currentItem = this.currentItem;\n\n        if (this.currentItem) {\n            this.currentItem.element.classList.remove(\"jqtree-moving\");\n            this.currentItem = null;\n        }\n\n        this.isDragging = false;\n\n        if (!this.hoveredArea && currentItem) {\n            if (this.onDragStop) {\n                this.onDragStop(currentItem.node, positionInfo.originalEvent);\n            }\n        }\n\n        return false;\n    }\n\n    public refresh(): void {\n        this.removeHitAreas();\n\n        if (this.currentItem) {\n            this.generateHitAreas();\n\n            this.currentItem = this.getNodeElementForNode(\n                this.currentItem.node,\n            );\n\n            if (this.isDragging) {\n                this.currentItem.element.classList.add(\"jqtree-moving\");\n            }\n        }\n    }\n}\n","import { GetTree, IsNodeSelected } from \"./jqtreeMethodTypes\";\nimport { IconElement, OnCreateLi } from \"./jqtreeOptions\";\nimport { Node } from \"./node\";\nimport { getBoolString } from \"./util\";\n\ninterface ElementsRendererParams {\n    $element: JQuery;\n    autoEscape: boolean;\n    buttonLeft: boolean;\n    closedIcon?: IconElement;\n    dragAndDrop: boolean;\n    getTree: GetTree;\n    isNodeSelected: IsNodeSelected;\n    onCreateLi?: OnCreateLi;\n    openedIcon?: IconElement;\n    rtl?: boolean;\n    showEmptyFolder: boolean;\n    tabIndex?: number;\n}\n\nexport default class ElementsRenderer {\n    private $element: JQuery;\n    private autoEscape: boolean;\n    private buttonLeft: boolean;\n    private dragAndDrop: boolean;\n    private getTree: GetTree;\n    private isNodeSelected: IsNodeSelected;\n    private onCreateLi?: OnCreateLi;\n    private rtl?: boolean;\n    private showEmptyFolder: boolean;\n    private tabIndex?: number;\n\n    public closedIconElement?: HTMLElement | Text;\n    public openedIconElement?: HTMLElement | Text;\n\n    constructor({\n        $element,\n        autoEscape,\n        buttonLeft,\n        closedIcon,\n        dragAndDrop,\n        getTree,\n        isNodeSelected,\n        onCreateLi,\n        openedIcon,\n        rtl,\n        showEmptyFolder,\n        tabIndex,\n    }: ElementsRendererParams) {\n        this.autoEscape = autoEscape;\n        this.buttonLeft = buttonLeft;\n        this.dragAndDrop = dragAndDrop;\n        this.$element = $element;\n        this.getTree = getTree;\n        this.isNodeSelected = isNodeSelected;\n        this.onCreateLi = onCreateLi;\n        this.rtl = rtl;\n        this.showEmptyFolder = showEmptyFolder;\n        this.tabIndex = tabIndex;\n        this.openedIconElement = this.createButtonElement(openedIcon ?? \"+\");\n        this.closedIconElement = this.createButtonElement(closedIcon ?? \"-\");\n    }\n\n    private attachNodeData(node: Node, li: HTMLElement): void {\n        node.element = li;\n        jQuery(li).data(\"node\", node);\n    }\n\n    private createButtonElement(\n        value: IconElement,\n    ): HTMLElement | Text | undefined {\n        if (typeof value === \"string\") {\n            // convert value to html\n            const div = document.createElement(\"div\");\n            div.innerHTML = value;\n\n            return document.createTextNode(div.innerHTML);\n        } else if ((value as HTMLElement).nodeType) {\n            return value as HTMLElement;\n        } else {\n            return jQuery(value)[0];\n        }\n    }\n\n    private createDomElements(\n        element: Element,\n        children: Node[],\n        isRootNode: boolean,\n        level: number,\n    ): void {\n        const ul = this.createUl(isRootNode);\n        element.appendChild(ul);\n\n        for (const child of children) {\n            const li = this.createLi(child, level);\n            ul.appendChild(li);\n\n            if (child.hasChildren()) {\n                this.createDomElements(li, child.children, false, level + 1);\n            }\n        }\n    }\n\n    private createFolderLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const buttonClasses = this.getButtonClasses(node);\n        const folderClasses = this.getFolderClasses(node, isSelected);\n\n        const iconElement = node.is_open\n            ? this.openedIconElement\n            : this.closedIconElement;\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = `jqtree_common ${folderClasses}`;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // button link\n        const buttonLink = document.createElement(\"a\");\n        buttonLink.className = buttonClasses;\n\n        if (iconElement) {\n            buttonLink.appendChild(iconElement.cloneNode(true));\n        }\n\n        if (this.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            true,\n            level,\n        );\n        titleSpan.setAttribute(\"aria-expanded\", getBoolString(node.is_open));\n        div.appendChild(titleSpan);\n\n        if (!this.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        return li;\n    }\n\n    /* Create the <li> element\n     * Attach it to node.element.\n     * Call onCreateLi\n     */\n    private createLi(node: Node, level: number): HTMLLIElement {\n        const isSelected = Boolean(this.isNodeSelected(node));\n\n        const mustShowFolder =\n            node.isFolder() || (node.isEmptyFolder && this.showEmptyFolder);\n\n        const li = mustShowFolder\n            ? this.createFolderLi(node, level, isSelected)\n            : this.createNodeLi(node, level, isSelected);\n\n        this.attachNodeData(node, li);\n\n        if (this.onCreateLi) {\n            this.onCreateLi(node, jQuery(li), isSelected);\n        }\n\n        return li;\n    }\n\n    private createNodeLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const liClasses = [\"jqtree_common\"];\n\n        if (isSelected) {\n            liClasses.push(\"jqtree-selected\");\n        }\n\n        const classString = liClasses.join(\" \");\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = classString;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            false,\n            level,\n        );\n        div.appendChild(titleSpan);\n\n        return li;\n    }\n\n    private createTitleSpan(\n        nodeName: string,\n        isSelected: boolean,\n        isFolder: boolean,\n        level: number,\n    ): HTMLSpanElement {\n        const titleSpan = document.createElement(\"span\");\n\n        let classes = \"jqtree-title jqtree_common\";\n\n        if (isFolder) {\n            classes += \" jqtree-title-folder\";\n        }\n\n        classes += ` jqtree-title-button-${this.buttonLeft ? \"left\" : \"right\"}`;\n\n        titleSpan.className = classes;\n\n        if (isSelected) {\n            const tabIndex = this.tabIndex;\n\n            if (tabIndex !== undefined) {\n                titleSpan.setAttribute(\"tabindex\", `${tabIndex}`);\n            }\n        }\n\n        this.setTreeItemAriaAttributes(titleSpan, nodeName, level, isSelected);\n\n        if (this.autoEscape) {\n            titleSpan.textContent = nodeName;\n        } else {\n            titleSpan.innerHTML = nodeName;\n        }\n\n        return titleSpan;\n    }\n\n    private createUl(isRootNode: boolean): HTMLUListElement {\n        let classString;\n        let role;\n\n        if (!isRootNode) {\n            classString = \"\";\n            role = \"group\";\n        } else {\n            classString = \"jqtree-tree\";\n            role = \"tree\";\n\n            if (this.rtl) {\n                classString += \" jqtree-rtl\";\n            }\n        }\n\n        if (this.dragAndDrop) {\n            classString += \" jqtree-dnd\";\n        }\n\n        const ul = document.createElement(\"ul\");\n        ul.className = `jqtree_common ${classString}`;\n\n        ul.setAttribute(\"role\", role);\n\n        return ul;\n    }\n\n    private getButtonClasses(node: Node): string {\n        const classes = [\"jqtree-toggler\", \"jqtree_common\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (this.buttonLeft) {\n            classes.push(\"jqtree-toggler-left\");\n        } else {\n            classes.push(\"jqtree-toggler-right\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private getFolderClasses(node: Node, isSelected: boolean): string {\n        const classes = [\"jqtree-folder\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (isSelected) {\n            classes.push(\"jqtree-selected\");\n        }\n\n        if (node.is_loading) {\n            classes.push(\"jqtree-loading\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private setTreeItemAriaAttributes(\n        element: HTMLElement,\n        name: string,\n        level: number,\n        isSelected: boolean,\n    ) {\n        element.setAttribute(\"aria-label\", name);\n        element.setAttribute(\"aria-level\", `${level}`);\n        element.setAttribute(\"aria-selected\", getBoolString(isSelected));\n        element.setAttribute(\"role\", \"treeitem\");\n    }\n\n    public render(fromNode: Node | null): void {\n        if (fromNode?.parent) {\n            this.renderFromNode(fromNode);\n        } else {\n            this.renderFromRoot();\n        }\n    }\n\n    public renderFromNode(node: Node): void {\n        if (!node.element) {\n            return;\n        }\n\n        // remember current li\n        const $previousLi = jQuery(node.element);\n\n        // create element\n        const li = this.createLi(node, node.getLevel());\n\n        // add element to dom\n        $previousLi.after(li);\n\n        // remove previous li\n        $previousLi.remove();\n\n        // create children\n        this.createDomElements(li, node.children, false, node.getLevel() + 1);\n    }\n\n    public renderFromRoot(): void {\n        this.$element.empty();\n\n        const tree = this.getTree();\n\n        if (this.$element[0] && tree) {\n            this.createDomElements(this.$element[0], tree.children, true, 1);\n        }\n    }\n}\n","import {\n    CloseNode,\n    GetSelectedNode,\n    IsFocusOnTree,\n    OpenNode,\n    SelectNode,\n} from \"./jqtreeMethodTypes\";\nimport { Node } from \"./node\";\n\ntype KeyboardEventHandler = (event: KeyboardEvent) => boolean;\n\ninterface KeyHandlerParams {\n    closeNode: CloseNode;\n    getSelectedNode: GetSelectedNode;\n    isFocusOnTree: IsFocusOnTree;\n    keyboardSupport: boolean;\n    openNode: OpenNode;\n    selectNode: SelectNode;\n}\n\nexport default class KeyHandler {\n    private closeNode: CloseNode;\n    private getSelectedNode: GetSelectedNode;\n\n    private handleKeyDown = (e: KeyboardEvent): void => {\n        if (!this.canHandleKeyboard()) {\n            return;\n        }\n\n        let isKeyHandled = false;\n\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            switch (e.key) {\n                case \"ArrowDown\":\n                    isKeyHandled = this.moveDown(selectedNode);\n                    break;\n\n                case \"ArrowUp\":\n                    isKeyHandled = this.moveUp(selectedNode);\n                    break;\n\n                case \"ArrowRight\":\n                    isKeyHandled = this.moveRight(selectedNode);\n                    break;\n\n                case \"ArrowLeft\":\n                    isKeyHandled = this.moveLeft(selectedNode);\n                    break;\n            }\n        }\n\n        if (isKeyHandled) {\n            e.preventDefault();\n        }\n    };\n\n    private handleKeyDownHandler?: KeyboardEventHandler;\n    private isFocusOnTree: IsFocusOnTree;\n    private keyboardSupport: boolean;\n    private openNode: OpenNode;\n    private originalSelectNode: SelectNode;\n\n    constructor({\n        closeNode,\n        getSelectedNode,\n        isFocusOnTree,\n        keyboardSupport,\n        openNode,\n        selectNode,\n    }: KeyHandlerParams) {\n        this.closeNode = closeNode;\n        this.getSelectedNode = getSelectedNode;\n        this.isFocusOnTree = isFocusOnTree;\n        this.keyboardSupport = keyboardSupport;\n        this.openNode = openNode;\n        this.originalSelectNode = selectNode;\n\n        if (keyboardSupport) {\n            document.addEventListener(\"keydown\", this.handleKeyDown);\n        }\n    }\n\n    private canHandleKeyboard(): boolean {\n        return this.keyboardSupport && this.isFocusOnTree();\n    }\n\n    private moveLeft(selectedNode: Node): boolean {\n        if (selectedNode.isFolder() && selectedNode.is_open) {\n            // Left on an open node closes the node\n            this.closeNode(selectedNode);\n            return true;\n        } else {\n            // Left on a closed or end node moves focus to the node's parent\n            return this.selectNode(selectedNode.getParent());\n        }\n    }\n\n    private moveRight(selectedNode: Node): boolean {\n        if (!selectedNode.isFolder()) {\n            return false;\n        } else {\n            // folder node\n            if (selectedNode.is_open) {\n                // Right moves to the first child of an open node\n                return this.selectNode(selectedNode.getNextVisibleNode());\n            } else {\n                // Right expands a closed node\n                this.openNode(selectedNode);\n                return true;\n            }\n        }\n    }\n\n    /* Select the node.\n     * Don't do anything if the node is null.\n     * Result: a different node was selected.\n     */\n    private selectNode(node: Node | null): boolean {\n        if (!node) {\n            return false;\n        } else {\n            this.originalSelectNode(node);\n\n            return true;\n        }\n    }\n\n    public deinit(): void {\n        if (this.handleKeyDownHandler) {\n            document.removeEventListener(\"keydown\", this.handleKeyDownHandler);\n        }\n    }\n\n    public moveDown(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getNextVisibleNode());\n    }\n\n    public moveUp(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getPreviousVisibleNode());\n    }\n}\n","export interface PositionInfo {\n    originalEvent: Event;\n    pageX: number;\n    pageY: number;\n    target: HTMLElement;\n}\n\nexport const getPositionInfoFromMouseEvent = (e: MouseEvent): PositionInfo => ({\n    originalEvent: e,\n    pageX: e.pageX,\n    pageY: e.pageY,\n    target: e.target as HTMLElement,\n});\n\nexport const getPositionInfoFromTouch = (\n    touch: Touch,\n    e: TouchEvent,\n): PositionInfo => ({\n    originalEvent: e,\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    target: touch.target as HTMLElement,\n});\n","import { TriggerEvent } from \"./jqtreeMethodTypes\";\nimport {\n    getPositionInfoFromMouseEvent,\n    getPositionInfoFromTouch,\n    PositionInfo,\n} from \"./mouseUtils\";\nimport { Node } from \"./node\";\n\ninterface ClickTarget {\n    node: Node;\n    type: \"button\" | \"label\";\n}\n\ntype GetNode = (element: HTMLElement) => Node | null;\n\ninterface MouseHandlerParams {\n    element: HTMLElement;\n    getMouseDelay: () => number;\n    getNode: GetNode;\n    onClickButton: (node: Node) => void;\n    onClickTitle: (node: Node) => void;\n    onMouseCapture: (positionInfo: PositionInfo) => boolean | null;\n    onMouseDrag: (positionInfo: PositionInfo) => void;\n    onMouseStart: (positionInfo: PositionInfo) => boolean;\n    onMouseStop: (positionInfo: PositionInfo) => void;\n    triggerEvent: TriggerEvent;\n    useContextMenu: boolean;\n}\n\nclass MouseHandler {\n    private element: HTMLElement;\n    private getMouseDelay: () => number;\n    private getNode: GetNode;\n\n    private handleClick = (e: MouseEvent): void => {\n        if (!e.target) {\n            return;\n        }\n\n        const clickTarget = this.getClickTarget(e.target as HTMLElement);\n\n        if (!clickTarget) {\n            return;\n        }\n\n        switch (clickTarget.type) {\n            case \"button\":\n                this.onClickButton(clickTarget.node);\n\n                e.preventDefault();\n                e.stopPropagation();\n                break;\n\n            case \"label\": {\n                const event = this.triggerEvent(\"tree.click\", {\n                    click_event: e,\n                    node: clickTarget.node,\n                });\n\n                if (!event.isDefaultPrevented()) {\n                    this.onClickTitle(clickTarget.node);\n                }\n                break;\n            }\n        }\n    };\n\n    private handleContextmenu = (e: MouseEvent) => {\n        if (!e.target) {\n            return;\n        }\n\n        const div = (e.target as HTMLElement).closest<HTMLElement>(\n            \"ul.jqtree-tree .jqtree-element\",\n        );\n\n        if (div) {\n            const node = this.getNode(div);\n            if (node) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                this.triggerEvent(\"tree.contextmenu\", {\n                    click_event: e,\n                    node,\n                });\n                return false;\n            }\n        }\n\n        return null;\n    };\n\n    private handleDblclick = (e: MouseEvent): void => {\n        if (!e.target) {\n            return;\n        }\n\n        const clickTarget = this.getClickTarget(e.target as HTMLElement);\n\n        if (clickTarget?.type === \"label\") {\n            this.triggerEvent(\"tree.dblclick\", {\n                click_event: e,\n                node: clickTarget.node,\n            });\n        }\n    };\n\n    private isMouseDelayMet: boolean;\n    private isMouseStarted: boolean;\n    private mouseDelayTimer: null | number;\n\n    private mouseDown = (e: MouseEvent): void => {\n        // Left mouse button?\n        if (e.button !== 0) {\n            return;\n        }\n\n        const result = this.handleMouseDown(getPositionInfoFromMouseEvent(e));\n\n        if (result && e.cancelable) {\n            e.preventDefault();\n        }\n    };\n\n    private mouseDownInfo: null | PositionInfo;\n\n    private mouseMove = (e: MouseEvent): void => {\n        this.handleMouseMove(e, getPositionInfoFromMouseEvent(e));\n    };\n\n    private mouseUp = (e: MouseEvent): void => {\n        this.handleMouseUp(getPositionInfoFromMouseEvent(e));\n    };\n\n    private onClickButton: (node: Node) => void;\n    private onClickTitle: (node: Node) => void;\n    private onMouseCapture: (positionInfo: PositionInfo) => boolean | null;\n    private onMouseDrag: (positionInfo: PositionInfo) => void;\n    private onMouseStart: (positionInfo: PositionInfo) => boolean;\n    private onMouseStop: (positionInfo: PositionInfo) => void;\n\n    private touchEnd = (e: TouchEvent): void => {\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.touches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseUp(getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchMove = (e: TouchEvent): void => {\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.touches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseMove(e, getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchStart = (e: TouchEvent): void => {\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.touches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseDown(getPositionInfoFromTouch(touch, e));\n    };\n\n    private triggerEvent: TriggerEvent;\n    private useContextMenu: boolean;\n\n    constructor({\n        element,\n        getMouseDelay,\n        getNode,\n        onClickButton,\n        onClickTitle,\n        onMouseCapture,\n        onMouseDrag,\n        onMouseStart,\n        onMouseStop,\n        triggerEvent,\n        useContextMenu,\n    }: MouseHandlerParams) {\n        this.element = element;\n        this.getMouseDelay = getMouseDelay;\n        this.getNode = getNode;\n        this.onClickButton = onClickButton;\n        this.onClickTitle = onClickTitle;\n        this.onMouseCapture = onMouseCapture;\n        this.onMouseDrag = onMouseDrag;\n        this.onMouseStart = onMouseStart;\n        this.onMouseStop = onMouseStop;\n        this.triggerEvent = triggerEvent;\n        this.useContextMenu = useContextMenu;\n\n        element.addEventListener(\"click\", this.handleClick);\n        element.addEventListener(\"dblclick\", this.handleDblclick);\n        element.addEventListener(\"mousedown\", this.mouseDown, {\n            passive: false,\n        });\n        element.addEventListener(\"touchstart\", this.touchStart, {\n            passive: false,\n        });\n\n        if (useContextMenu) {\n            element.addEventListener(\"contextmenu\", this.handleContextmenu);\n        }\n\n        this.isMouseStarted = false;\n        this.mouseDelayTimer = null;\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n    }\n\n    private getClickTarget(element: HTMLElement): ClickTarget | null {\n        const button = element.closest<HTMLElement>(\".jqtree-toggler\");\n\n        if (button) {\n            const node = this.getNode(button);\n\n            if (node) {\n                return {\n                    node,\n                    type: \"button\",\n                };\n            }\n        } else {\n            const jqTreeElement =\n                element.closest<HTMLElement>(\".jqtree-element\");\n\n            if (jqTreeElement) {\n                const node = this.getNode(jqTreeElement);\n                if (node) {\n                    return {\n                        node,\n                        type: \"label\",\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    private handleMouseDown(positionInfo: PositionInfo): boolean {\n        // We may have missed mouseup (out of window)\n        if (this.isMouseStarted) {\n            this.handleMouseUp(positionInfo);\n        }\n\n        this.mouseDownInfo = positionInfo;\n\n        if (!this.onMouseCapture(positionInfo)) {\n            return false;\n        }\n\n        this.handleStartMouse();\n\n        return true;\n    }\n\n    private handleMouseMove(\n        e: MouseEvent | TouchEvent,\n        positionInfo: PositionInfo,\n    ): void {\n        if (this.isMouseStarted) {\n            this.onMouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n            return;\n        }\n\n        if (!this.isMouseDelayMet) {\n            return;\n        }\n\n        if (this.mouseDownInfo) {\n            this.isMouseStarted = this.onMouseStart(this.mouseDownInfo);\n        }\n\n        if (this.isMouseStarted) {\n            this.onMouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n        } else {\n            this.handleMouseUp(positionInfo);\n        }\n    }\n\n    private handleMouseUp(positionInfo: PositionInfo): void {\n        this.removeMouseMoveEventListeners();\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n\n        if (this.isMouseStarted) {\n            this.isMouseStarted = false;\n            this.onMouseStop(positionInfo);\n        }\n    }\n\n    private handleStartMouse(): void {\n        document.addEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        document.addEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        document.addEventListener(\"mouseup\", this.mouseUp, { passive: false });\n        document.addEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n\n        const mouseDelay = this.getMouseDelay();\n\n        if (mouseDelay) {\n            this.startMouseDelayTimer(mouseDelay);\n        } else {\n            this.isMouseDelayMet = true;\n        }\n    }\n\n    private removeMouseMoveEventListeners() {\n        document.removeEventListener(\"mousemove\", this.mouseMove);\n        document.removeEventListener(\"touchmove\", this.touchMove);\n        document.removeEventListener(\"mouseup\", this.mouseUp);\n        document.removeEventListener(\"touchend\", this.touchEnd);\n    }\n\n    private startMouseDelayTimer(mouseDelay: number): void {\n        if (this.mouseDelayTimer) {\n            clearTimeout(this.mouseDelayTimer);\n        }\n\n        this.mouseDelayTimer = window.setTimeout(() => {\n            if (this.mouseDownInfo) {\n                this.isMouseDelayMet = true;\n            }\n        }, mouseDelay);\n\n        this.isMouseDelayMet = false;\n    }\n\n    public deinit(): void {\n        this.element.removeEventListener(\"click\", this.handleClick);\n        this.element.removeEventListener(\"dblclick\", this.handleDblclick);\n\n        if (this.useContextMenu) {\n            this.element.removeEventListener(\n                \"contextmenu\",\n                this.handleContextmenu,\n            );\n        }\n\n        this.element.removeEventListener(\"mousedown\", this.mouseDown);\n        this.element.removeEventListener(\"touchstart\", this.touchStart);\n        this.removeMouseMoveEventListeners();\n    }\n}\n\nexport default MouseHandler;\n","interface NodeRecordWithChildren extends NodeRecord {\n    children: NodeData[];\n}\n\nexport const isNodeRecordWithChildren = (\n    data: NodeData,\n): data is NodeRecordWithChildren =>\n    typeof data === \"object\" &&\n    \"children\" in data &&\n    data.children instanceof Array;\n","import { isNodeRecordWithChildren } from \"./nodeUtils\";\nimport { Position } from \"./position\";\n\ntype IterateCallback = (node: Node, level: number) => boolean;\n\nexport class Node implements INode {\n    [key: string]: unknown;\n\n    public children: Node[];\n    public element?: HTMLElement;\n    public id?: NodeId;\n    public idMapping: Map<NodeId, Node>;\n    public is_loading: boolean;\n    public is_open: boolean;\n    public isEmptyFolder: boolean;\n    public load_on_demand: boolean;\n    public name: string;\n    public nodeClass?: typeof Node;\n    public parent: Node | null;\n    public tree?: Node;\n\n    constructor(\n        nodeData: NodeData | null = null,\n        isRoot = false,\n        nodeClass = Node,\n    ) {\n        this.name = \"\";\n        this.load_on_demand = false;\n\n        this.isEmptyFolder =\n            nodeData != null &&\n            isNodeRecordWithChildren(nodeData) &&\n            nodeData.children.length === 0;\n\n        this.setData(nodeData);\n\n        this.children = [];\n        this.parent = null;\n\n        if (isRoot) {\n            this.idMapping = new Map<NodeId, Node>();\n            this.tree = this;\n            this.nodeClass = nodeClass;\n        }\n    }\n\n    private createNode(nodeData?: NodeData): Node {\n        const nodeClass = this.getNodeClass();\n        return new nodeClass(nodeData);\n    }\n\n    private doRemoveChild(node: Node): void {\n        this.children.splice(this.getChildIndex(node), 1);\n        this.tree?.removeNodeFromIndex(node);\n    }\n\n    private getNodeClass(): typeof Node {\n        return this.nodeClass ?? this.tree?.nodeClass ?? Node;\n    }\n\n    // Load children data from nodeInfo if it has children\n    private loadChildrenFromData(nodeInfo: NodeData) {\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            this.loadFromData(nodeInfo.children);\n        }\n    }\n\n    private setParent(parent: Node): void {\n        this.parent = parent;\n        this.tree = parent.tree;\n        this.tree?.addNodeToIndex(this);\n    }\n\n    public addAfter(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex + 1);\n\n            node.loadChildrenFromData(nodeInfo);\n            return node;\n        }\n    }\n\n    public addBefore(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex);\n\n            node.loadChildrenFromData(nodeInfo);\n            return node;\n        }\n    }\n\n    /*\n    Add child.\n\n    tree.addChild(\n        new Node('child1')\n    );\n    */\n    public addChild(node: Node): void {\n        this.children.push(node);\n        node.setParent(this);\n    }\n\n    /*\n    Add child at position. Index starts at 0.\n\n    tree.addChildAtPosition(\n        new Node('abc'),\n        1\n    );\n    */\n    public addChildAtPosition(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        node.setParent(this);\n    }\n\n    public addNodeToIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.set(node.id, node);\n        }\n    }\n\n    public addParent(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const newParent = this.createNode(nodeInfo);\n\n            if (this.tree) {\n                newParent.setParent(this.tree);\n            }\n            const originalParent = this.parent;\n\n            for (const child of originalParent.children) {\n                newParent.addChild(child);\n            }\n\n            originalParent.children = [];\n            originalParent.addChild(newParent);\n            return newParent;\n        }\n    }\n\n    public append(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChild(node);\n\n        node.loadChildrenFromData(nodeInfo);\n        return node;\n    }\n\n    public filter(f: (node: Node) => boolean): Node[] {\n        const result: Node[] = [];\n\n        this.iterate((node: Node) => {\n            if (f(node)) {\n                result.push(node);\n            }\n\n            return true;\n        });\n\n        return result;\n    }\n\n    /*\n    Get child index.\n\n    var index = getChildIndex(node);\n    */\n    public getChildIndex(node: Node): number {\n        return this.children.indexOf(node);\n    }\n\n    /*\n    Get the tree as data.\n    */\n    public getData(includeParent = false): NodeRecord[] {\n        const getDataFromNodes = (nodes: Node[]): Record<string, unknown>[] => {\n            return nodes.map((node) => {\n                const tmpNode: Record<string, unknown> = {};\n\n                for (const k in node) {\n                    if (\n                        [\n                            \"parent\",\n                            \"children\",\n                            \"element\",\n                            \"idMapping\",\n                            \"load_on_demand\",\n                            \"nodeClass\",\n                            \"tree\",\n                            \"isEmptyFolder\",\n                        ].indexOf(k) === -1 &&\n                        Object.prototype.hasOwnProperty.call(node, k)\n                    ) {\n                        const v = node[k];\n                        tmpNode[k] = v;\n                    }\n                }\n\n                if (node.hasChildren()) {\n                    tmpNode.children = getDataFromNodes(node.children);\n                }\n\n                return tmpNode;\n            });\n        };\n\n        if (includeParent) {\n            return getDataFromNodes([this]);\n        } else {\n            return getDataFromNodes(this.children);\n        }\n    }\n\n    public getLastChild(): Node | null {\n        if (!this.hasChildren()) {\n            return null;\n        } else {\n            const lastChild = this.children[this.children.length - 1];\n\n            if (!lastChild) {\n                return null;\n            }\n\n            if (!(lastChild.hasChildren() && lastChild.is_open)) {\n                return lastChild;\n            } else {\n                return lastChild.getLastChild();\n            }\n        }\n    }\n\n    public getLevel(): number {\n        let level = 0;\n        let node: Node = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n        while (node.parent) {\n            level += 1;\n            node = node.parent;\n        }\n\n        return level;\n    }\n\n    public getNextNode(includeChildren = true): Node | null {\n        if (includeChildren && this.hasChildren()) {\n            return this.children[0] ?? null;\n        } else if (!this.parent) {\n            return null;\n        } else {\n            const nextSibling = this.getNextSibling();\n\n            if (nextSibling) {\n                return nextSibling;\n            } else {\n                return this.parent.getNextNode(false);\n            }\n        }\n    }\n\n    public getNextSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const nextIndex = this.parent.getChildIndex(this) + 1;\n            if (nextIndex < this.parent.children.length) {\n                return this.parent.children[nextIndex] ?? null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNextVisibleNode(): Node | null {\n        if (this.hasChildren() && this.is_open) {\n            // First child\n            return this.children[0] ?? null;\n        } else {\n            if (!this.parent) {\n                return null;\n            } else {\n                const nextSibling = this.getNextSibling();\n                if (nextSibling) {\n                    // Next sibling\n                    return nextSibling;\n                } else {\n                    // Next node of parent\n                    return this.parent.getNextNode(false);\n                }\n            }\n        }\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        let result: Node | null = null;\n\n        this.iterate((node: Node) => {\n            if (result) {\n                return false;\n            } else if (callback(node)) {\n                result = node;\n                return false;\n            } else {\n                return true;\n            }\n        });\n\n        return result;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.idMapping.get(nodeId) ?? null;\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.getNodeByCallback((node: Node) => node.name === name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        const node = this.getNodeByCallback((n: Node) => n.name === name);\n\n        if (!node) {\n            throw new Error(`Node with name ${name} not found`);\n        }\n\n        return node;\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.filter((node: Node) => node[key] === value);\n    }\n\n    public getParent(): Node | null {\n        // Return parent except if it is the root node\n        if (!this.parent) {\n            return null;\n        } else if (!this.parent.parent) {\n            // Root node -> null\n            return null;\n        } else {\n            return this.parent;\n        }\n    }\n\n    public getPreviousNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (previousSibling.hasChildren()) {\n                return previousSibling.getLastChild();\n            } else {\n                return previousSibling;\n            }\n        }\n    }\n\n    public getPreviousSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousIndex = this.parent.getChildIndex(this) - 1;\n            if (previousIndex >= 0) {\n                return this.parent.children[previousIndex] ?? null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getPreviousVisibleNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (\n                !previousSibling.hasChildren() ||\n                !previousSibling.is_open\n            ) {\n                // Previous sibling\n                return previousSibling;\n            } else {\n                // Last child of previous sibling\n                return previousSibling.getLastChild();\n            }\n        }\n    }\n\n    /*\n    Does the tree have children?\n\n    if (tree.hasChildren()) {\n        //\n    }\n    */\n    public hasChildren(): boolean {\n        return this.children.length !== 0;\n    }\n\n    // Init Node from data without making it the root of the tree\n    public initFromData(data: NodeData): void {\n        const addNode = (nodeData: NodeData): void => {\n            this.setData(nodeData);\n\n            if (\n                isNodeRecordWithChildren(nodeData) &&\n                nodeData.children.length\n            ) {\n                addChildren(nodeData.children);\n            }\n        };\n\n        const addChildren = (childrenData: NodeData[]): void => {\n            for (const child of childrenData) {\n                const node = this.createNode();\n                node.initFromData(child);\n                this.addChild(node);\n            }\n        };\n\n        addNode(data);\n    }\n\n    public isFolder(): boolean {\n        return this.hasChildren() || this.load_on_demand;\n    }\n\n    public isParentOf(node: Node): boolean {\n        let parent = node.parent;\n\n        while (parent) {\n            if (parent === this) {\n                return true;\n            }\n\n            parent = parent.parent;\n        }\n\n        return false;\n    }\n\n    /*\n    Iterate over all the nodes in the tree.\n\n    Calls callback with (node, level).\n\n    The callback must return true to continue the iteration on current node.\n\n    tree.iterate(\n        function(node, level) {\n           console.log(node.name);\n\n           // stop iteration after level 2\n           return (level <= 2);\n        }\n    );\n\n    */\n    public iterate(callback: IterateCallback): void {\n        const _iterate = (node: Node, level: number): void => {\n            for (const child of node.children) {\n                const result = callback(child, level);\n\n                if (result && child.hasChildren()) {\n                    _iterate(child, level + 1);\n                }\n            }\n        };\n\n        _iterate(this, 0);\n    }\n\n    /*\n    Create tree from data.\n\n    Structure of data is:\n    [\n        {\n            name: 'node1',\n            children: [\n                { name: 'child1' },\n                { name: 'child2' }\n            ]\n        },\n        {\n            name: 'node2'\n        }\n    ]\n    */\n    public loadFromData(data: NodeData[]): this {\n        this.removeChildren();\n\n        for (const childData of data) {\n            const node = this.createNode(childData);\n            this.addChild(node);\n\n            if (isNodeRecordWithChildren(childData)) {\n                node.loadFromData(childData.children);\n            }\n        }\n\n        return this;\n    }\n\n    /*\n    Move node relative to another node.\n\n    Argument position: Position.BEFORE, Position.AFTER or Position.Inside\n\n    // move node1 after node2\n    tree.moveNode(node1, node2, Position.AFTER);\n    */\n    public moveNode(\n        movedNode: Node,\n        targetNode: Node,\n        position: Position,\n    ): boolean {\n        if (!movedNode.parent || movedNode.isParentOf(targetNode)) {\n            // - Node is parent of target node\n            // - Or, parent is empty\n            return false;\n        } else {\n            movedNode.parent.doRemoveChild(movedNode);\n\n            switch (position) {\n                case Position.After: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode) + 1,\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Before: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode),\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Inside: {\n                    // move inside as first child\n                    targetNode.addChildAtPosition(movedNode, 0);\n                    return true;\n                }\n\n                default:\n                    return false;\n            }\n        }\n    }\n\n    public prepend(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChildAtPosition(node, 0);\n\n        node.loadChildrenFromData(nodeInfo);\n        return node;\n    }\n\n    public remove(): void {\n        if (this.parent) {\n            this.parent.removeChild(this);\n            this.parent = null;\n        }\n    }\n\n    /*\n    Remove child. This also removes the children of the node.\n\n    tree.removeChild(tree.children[0]);\n    */\n    public removeChild(node: Node): void {\n        // remove children from the index\n        node.removeChildren();\n\n        this.doRemoveChild(node);\n    }\n\n    public removeChildren(): void {\n        this.iterate((child: Node) => {\n            this.tree?.removeNodeFromIndex(child);\n            return true;\n        });\n\n        this.children = [];\n    }\n\n    public removeNodeFromIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.delete(node.id);\n        }\n    }\n\n    /*\n    Set the data of this node.\n\n    setData(string): set the name of the node\n    setData(object): set attributes of the node\n\n    Examples:\n        setData('node1')\n\n        setData({ name: 'node1', id: 1});\n\n        setData({ name: 'node2', id: 2, color: 'green'});\n\n    * This is an internal function; it is not in the docs\n    * Does not remove existing node values\n    */\n    public setData(o: NodeData | null): void {\n        if (!o) {\n            return;\n        } else if (typeof o === \"string\") {\n            this.name = o;\n        } else if (typeof o === \"object\") {\n            for (const key in o) {\n                if (Object.prototype.hasOwnProperty.call(o, key)) {\n                    const value = o[key];\n\n                    if (key === \"label\" || key === \"name\") {\n                        // You can use the 'label' key instead of 'name'; this is a legacy feature\n                        if (typeof value === \"string\") {\n                            this.name = value;\n                        }\n                    } else if (key !== \"children\" && key !== \"parent\") {\n                        // You can't update the children or the parent using this function\n                        this[key] = value;\n                    }\n                }\n            }\n        }\n    }\n}\n","import { DropHint } from \"../dragAndDropHandler/types\";\n\nclass BorderDropHint implements DropHint {\n    private hint?: HTMLElement;\n\n    constructor(element: HTMLElement, scrollLeft: number) {\n        const div = element.querySelector(\":scope > .jqtree-element\");\n\n        if (!div) {\n            this.hint = undefined;\n            return;\n        }\n\n        const width = Math.max(element.offsetWidth + scrollLeft - 4, 0);\n        const height = Math.max(element.clientHeight - 4, 0);\n\n        const hint = document.createElement(\"span\");\n        hint.className = \"jqtree-border\";\n        hint.style.width = `${width}px`;\n        hint.style.height = `${height}px`;\n\n        this.hint = hint;\n\n        div.append(this.hint);\n    }\n\n    public remove(): void {\n        this.hint?.remove();\n    }\n}\n\nexport default BorderDropHint;\n","import { DropHint } from \"../dragAndDropHandler/types\";\n\nclass GhostDropHint implements DropHint {\n    private element: HTMLElement;\n    private ghost: HTMLElement;\n\n    constructor(element: HTMLElement) {\n        this.element = element;\n        this.ghost = this.createGhostElement();\n\n        this.element.after(this.ghost);\n        this.ghost.classList.add(\"jqtree-inside\");\n    }\n\n    private createGhostElement() {\n        const ghost = document.createElement(\"li\");\n        ghost.className = \"jqtree_common jqtree-ghost\";\n\n        const circleSpan = document.createElement(\"span\");\n        circleSpan.className = \"jqtree_common jqtree-circle\";\n        ghost.append(circleSpan);\n\n        const lineSpan = document.createElement(\"span\");\n        lineSpan.className = \"jqtree_common jqtree-line\";\n        ghost.append(lineSpan);\n\n        return ghost;\n    }\n\n    public remove(): void {\n        this.ghost.remove();\n    }\n}\n\nexport default GhostDropHint;\n","import { DropHint } from \"../dragAndDropHandler/types\";\nimport { GetScrollLeft } from \"../jqtreeMethodTypes\";\nimport { Node } from \"../node\";\nimport { Position } from \"../position\";\nimport BorderDropHint from \"./borderDropHint\";\nimport GhostDropHint from \"./ghostDropHint\";\n\nexport interface NodeElementParams {\n    $treeElement: JQuery;\n    getScrollLeft: GetScrollLeft;\n    node: Node;\n    tabIndex?: number;\n}\n\nclass NodeElement {\n    private $treeElement: JQuery;\n    private getScrollLeft: GetScrollLeft;\n    private tabIndex?: number;\n    public element: HTMLElement;\n    public node: Node;\n\n    constructor({\n        $treeElement,\n        getScrollLeft,\n        node,\n        tabIndex,\n    }: NodeElementParams) {\n        this.getScrollLeft = getScrollLeft;\n        this.tabIndex = tabIndex;\n        this.$treeElement = $treeElement;\n\n        this.init(node);\n    }\n\n    protected getTitleSpan(): HTMLSpanElement {\n        return this.element.querySelector(\n            \":scope > .jqtree-element > span.jqtree-title\",\n        ) as HTMLSpanElement;\n    }\n\n    protected getUl(): HTMLUListElement {\n        return this.element.querySelector(\":scope > ul\") as HTMLUListElement;\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return position === Position.Inside;\n    }\n\n    public addDropHint(position: number): DropHint {\n        if (this.mustShowBorderDropHint(position)) {\n            return new BorderDropHint(this.element, this.getScrollLeft());\n        } else {\n            return new GhostDropHint(this.element);\n        }\n    }\n\n    public deselect(): void {\n        this.element.classList.remove(\"jqtree-selected\");\n\n        const titleSpan = this.getTitleSpan();\n        titleSpan.removeAttribute(\"tabindex\");\n        titleSpan.setAttribute(\"aria-selected\", \"false\");\n\n        titleSpan.blur();\n    }\n\n    public init(node: Node): void {\n        this.node = node;\n\n        if (!node.element) {\n            const element = this.$treeElement.get(0);\n\n            if (element) {\n                node.element = element;\n            }\n        }\n\n        if (node.element) {\n            this.element = node.element;\n        }\n    }\n\n    public select(mustSetFocus: boolean): void {\n        this.element.classList.add(\"jqtree-selected\");\n\n        const titleSpan = this.getTitleSpan();\n        const tabIndex = this.tabIndex;\n\n        // Check for null or undefined\n        if (tabIndex != null) {\n            titleSpan.setAttribute(\"tabindex\", tabIndex.toString());\n        }\n\n        titleSpan.setAttribute(\"aria-selected\", \"true\");\n\n        if (mustSetFocus) {\n            titleSpan.focus();\n        }\n    }\n}\n\nexport default NodeElement;\n","import { OnFinishOpenNode, TriggerEvent } from \"../jqtreeMethodTypes\";\nimport { Position } from \"../position\";\nimport NodeElement, { NodeElementParams } from \"./index\";\n\ninterface FolderElementParams extends NodeElementParams {\n    closedIconElement?: HTMLElement | Text;\n    openedIconElement?: HTMLElement | Text;\n    triggerEvent: TriggerEvent;\n}\n\nclass FolderElement extends NodeElement {\n    private closedIconElement?: HTMLElement | Text;\n    private openedIconElement?: HTMLElement | Text;\n    private triggerEvent: TriggerEvent;\n\n    constructor({\n        $treeElement,\n        closedIconElement,\n        getScrollLeft,\n        node,\n        openedIconElement,\n        tabIndex,\n        triggerEvent,\n    }: FolderElementParams) {\n        super({\n            $treeElement,\n            getScrollLeft,\n            node,\n            tabIndex,\n        });\n\n        this.closedIconElement = closedIconElement;\n        this.openedIconElement = openedIconElement;\n        this.triggerEvent = triggerEvent;\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return !this.node.is_open && position === Position.Inside;\n    }\n\n    private getButton(): HTMLLinkElement {\n        return this.element.querySelector(\n            \":scope > .jqtree-element > a.jqtree-toggler\",\n        ) as HTMLLinkElement;\n    }\n\n    public close(\n        slide = true,\n        animationSpeed: JQuery.Duration | undefined = \"fast\",\n    ): void {\n        if (!this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = false;\n\n        const button = this.getButton();\n        button.classList.add(\"jqtree-closed\");\n        button.innerHTML = \"\";\n\n        const closedIconElement = this.closedIconElement;\n\n        if (closedIconElement) {\n            const icon = closedIconElement.cloneNode(true);\n            button.appendChild(icon);\n        }\n\n        const doClose = (): void => {\n            this.element.classList.add(\"jqtree-closed\");\n\n            const titleSpan = this.getTitleSpan();\n            titleSpan.setAttribute(\"aria-expanded\", \"false\");\n\n            this.triggerEvent(\"tree.close\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            jQuery(this.getUl()).slideUp(animationSpeed, doClose);\n        } else {\n            jQuery(this.getUl()).hide();\n            doClose();\n        }\n    }\n\n    public open(\n        onFinished: OnFinishOpenNode | undefined,\n        slide = true,\n        animationSpeed: JQuery.Duration = \"fast\",\n    ): void {\n        if (this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = true;\n\n        const button = this.getButton();\n        button.classList.remove(\"jqtree-closed\");\n        button.innerHTML = \"\";\n\n        const openedIconElement = this.openedIconElement;\n\n        if (openedIconElement) {\n            const icon = openedIconElement.cloneNode(true);\n            button.appendChild(icon);\n        }\n\n        const doOpen = (): void => {\n            this.element.classList.remove(\"jqtree-closed\");\n\n            const titleSpan = this.getTitleSpan();\n            titleSpan.setAttribute(\"aria-expanded\", \"true\");\n\n            if (onFinished) {\n                onFinished(this.node);\n            }\n\n            this.triggerEvent(\"tree.open\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            jQuery(this.getUl()).slideDown(animationSpeed, doOpen);\n        } else {\n            jQuery(this.getUl()).show();\n            doOpen();\n        }\n    }\n}\n\nexport default FolderElement;\n","import {\n    AddToSelection,\n    GetNodeById,\n    GetSelectedNodes,\n    GetTree,\n    OpenNode,\n    RefreshElements,\n    RemoveFromSelection,\n} from \"./jqtreeMethodTypes\";\nimport { OnGetStateFromStorage, OnSetStateFromStorage } from \"./jqtreeOptions\";\nimport { Node } from \"./node\";\nimport { isInt } from \"./util\";\n\nexport interface SavedState {\n    open_nodes?: NodeId[];\n    selected_node?: NodeId[];\n}\n\ninterface SaveStateHandlerParams {\n    addToSelection: AddToSelection;\n    getNodeById: GetNodeById;\n    getSelectedNodes: GetSelectedNodes;\n    getTree: GetTree;\n    onGetStateFromStorage?: OnGetStateFromStorage;\n    onSetStateFromStorage?: OnSetStateFromStorage;\n    openNode: OpenNode;\n    refreshElements: RefreshElements;\n    removeFromSelection: RemoveFromSelection;\n    saveState: boolean | string;\n}\n\nexport default class SaveStateHandler {\n    private _supportsLocalStorage: boolean | null;\n    private addToSelection: AddToSelection;\n    private getNodeById: GetNodeById;\n    private getSelectedNodes: GetSelectedNodes;\n    private getTree: GetTree;\n    private onGetStateFromStorage?: OnGetStateFromStorage;\n    private onSetStateFromStorage?: OnSetStateFromStorage;\n    private openNode: OpenNode;\n    private refreshElements: RefreshElements;\n    private removeFromSelection: RemoveFromSelection;\n    private saveStateOption: boolean | string;\n\n    constructor({\n        addToSelection,\n        getNodeById,\n        getSelectedNodes,\n        getTree,\n        onGetStateFromStorage,\n        onSetStateFromStorage,\n        openNode,\n        refreshElements,\n        removeFromSelection,\n        saveState,\n    }: SaveStateHandlerParams) {\n        this.addToSelection = addToSelection;\n        this.getNodeById = getNodeById;\n        this.getSelectedNodes = getSelectedNodes;\n        this.getTree = getTree;\n        this.onGetStateFromStorage = onGetStateFromStorage;\n        this.onSetStateFromStorage = onSetStateFromStorage;\n        this.openNode = openNode;\n        this.refreshElements = refreshElements;\n        this.removeFromSelection = removeFromSelection;\n        this.saveStateOption = saveState;\n    }\n\n    private getKeyName(): string {\n        if (typeof this.saveStateOption === \"string\") {\n            return this.saveStateOption;\n        } else {\n            return \"tree\";\n        }\n    }\n\n    private loadFromStorage(): null | string {\n        if (this.onGetStateFromStorage) {\n            return this.onGetStateFromStorage();\n        } else if (this.supportsLocalStorage()) {\n            return localStorage.getItem(this.getKeyName());\n        } else {\n            return null;\n        }\n    }\n\n    private openInitialNodes(nodeIds: NodeId[]): boolean {\n        let mustLoadOnDemand = false;\n\n        for (const nodeId of nodeIds) {\n            const node = this.getNodeById(nodeId);\n\n            if (node) {\n                if (!node.load_on_demand) {\n                    node.is_open = true;\n                } else {\n                    mustLoadOnDemand = true;\n                }\n            }\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    private parseState(jsonData: string): SavedState {\n        const state = JSON.parse(jsonData) as Record<string, unknown>;\n\n        // Check if selected_node is an int (instead of an array)\n        if (state.selected_node && isInt(state.selected_node)) {\n            // Convert to array\n            state.selected_node = [state.selected_node];\n        }\n\n        return state as unknown as SavedState;\n    }\n\n    private resetSelection(): void {\n        const selectedNodes = this.getSelectedNodes();\n\n        selectedNodes.forEach((node) => {\n            this.removeFromSelection(node);\n        });\n    }\n\n    private selectInitialNodes(nodeIds: NodeId[]): boolean {\n        let selectCount = 0;\n\n        for (const nodeId of nodeIds) {\n            const node = this.getNodeById(nodeId);\n\n            if (node) {\n                selectCount += 1;\n\n                this.addToSelection(node);\n            }\n        }\n\n        return selectCount !== 0;\n    }\n\n    private supportsLocalStorage(): boolean {\n        const testSupport = (): boolean => {\n            // Check if it's possible to store an item. Safari does not allow this in private browsing mode.\n            try {\n                const key = \"_storage_test\";\n                sessionStorage.setItem(key, \"value\");\n                sessionStorage.removeItem(key);\n            } catch {\n                return false;\n            }\n\n            return true;\n        };\n\n        if (this._supportsLocalStorage == null) {\n            this._supportsLocalStorage = testSupport();\n        }\n\n        return this._supportsLocalStorage;\n    }\n\n    public getNodeIdToBeSelected(): NodeId | null {\n        const state = this.getStateFromStorage();\n\n        if (state?.selected_node) {\n            return state.selected_node[0] ?? null;\n        } else {\n            return null;\n        }\n    }\n\n    public getState(): SavedState {\n        const getOpenNodeIds = (): NodeId[] => {\n            const openNodes: NodeId[] = [];\n\n            this.getTree()?.iterate((node: Node) => {\n                if (node.is_open && node.id && node.hasChildren()) {\n                    openNodes.push(node.id);\n                }\n                return true;\n            });\n\n            return openNodes;\n        };\n\n        const getSelectedNodeIds = (): NodeId[] => {\n            const selectedNodeIds: NodeId[] = [];\n\n            this.getSelectedNodes().forEach((node) => {\n                if (node.id != null) {\n                    selectedNodeIds.push(node.id);\n                }\n            });\n\n            return selectedNodeIds;\n        };\n\n        return {\n            open_nodes: getOpenNodeIds(),\n            selected_node: getSelectedNodeIds(),\n        };\n    }\n\n    public getStateFromStorage(): null | SavedState {\n        const jsonData = this.loadFromStorage();\n\n        if (jsonData) {\n            return this.parseState(jsonData) as unknown as SavedState;\n        } else {\n            return null;\n        }\n    }\n\n    public saveState(): void {\n        const state = JSON.stringify(this.getState());\n\n        if (this.onSetStateFromStorage) {\n            this.onSetStateFromStorage(state);\n        } else if (this.supportsLocalStorage()) {\n            localStorage.setItem(this.getKeyName(), state);\n        }\n    }\n\n    /*\n    Set initial state\n    Don't handle nodes that are loaded on demand\n\n    result: must load on demand\n    */\n    public setInitialState(state: SavedState): boolean {\n        let mustLoadOnDemand = false;\n\n        if (state.open_nodes) {\n            mustLoadOnDemand = this.openInitialNodes(state.open_nodes);\n        }\n\n        this.resetSelection();\n\n        if (state.selected_node) {\n            this.selectInitialNodes(state.selected_node);\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    public setInitialStateOnDemand(\n        state: SavedState,\n        cbFinished: () => void,\n    ): void {\n        let loadingCount = 0;\n        let nodeIds = state.open_nodes;\n\n        const openNodes = (): void => {\n            if (!nodeIds) {\n                return;\n            }\n\n            const newNodesIds = [];\n\n            for (const nodeId of nodeIds) {\n                const node = this.getNodeById(nodeId);\n\n                if (!node) {\n                    newNodesIds.push(nodeId);\n                } else {\n                    if (!node.is_loading) {\n                        if (node.load_on_demand) {\n                            loadAndOpenNode(node);\n                        } else {\n                            this.openNode(node, false);\n                        }\n                    }\n                }\n            }\n\n            nodeIds = newNodesIds;\n\n            if (state.selected_node) {\n                if (this.selectInitialNodes(state.selected_node)) {\n                    this.refreshElements(null);\n                }\n            }\n\n            if (loadingCount === 0) {\n                cbFinished();\n            }\n        };\n\n        const loadAndOpenNode = (node: Node): void => {\n            loadingCount += 1;\n            this.openNode(node, false, () => {\n                loadingCount -= 1;\n                openNodes();\n            });\n        };\n\n        openNodes();\n    }\n}\n","import type { ScrollParent } from \"./types\";\n\nimport { getElementPosition, getOffsetTop } from '../util'\n\ntype HorizontalScrollDirection = \"left\" | \"right\";\ntype VerticalScrollDirection = \"bottom\" | \"top\";\n\ninterface Params {\n    container: HTMLElement;\n    refreshHitAreas: () => void;\n}\n\nexport default class ContainerScrollParent implements ScrollParent {\n    private container: HTMLElement;\n    private horizontalScrollDirection?: HorizontalScrollDirection;\n    private horizontalScrollTimeout?: number;\n    private refreshHitAreas: () => void;\n    private scrollParentBottom?: number;\n    private scrollParentTop?: number;\n    private verticalScrollDirection?: VerticalScrollDirection;\n    private verticalScrollTimeout?: number;\n\n    constructor({ container, refreshHitAreas }: Params) {\n        this.container = container;\n        this.refreshHitAreas = refreshHitAreas;\n    }\n\n    private getNewHorizontalScrollDirection(\n        pageX: number,\n    ): HorizontalScrollDirection | undefined {\n        const scrollParentOffset = getElementPosition(this.container);\n\n        const rightEdge = scrollParentOffset.left + this.container.clientWidth;\n        const leftEdge = scrollParentOffset.left;\n        const isNearRightEdge = pageX > rightEdge - 20;\n        const isNearLeftEdge = pageX < leftEdge + 20;\n\n        if (isNearRightEdge) {\n            return \"right\";\n        } else if (isNearLeftEdge) {\n            return \"left\";\n        }\n\n        return undefined;\n    }\n\n    private getNewVerticalScrollDirection(\n        pageY: number,\n    ): undefined | VerticalScrollDirection {\n        if (pageY < this.getScrollParentTop()) {\n            return \"top\";\n        }\n\n        if (pageY > this.getScrollParentBottom()) {\n            return \"bottom\";\n        }\n\n        return undefined;\n    }\n\n    private getScrollParentBottom() {\n        if (this.scrollParentBottom == null) {\n            this.scrollParentBottom = this.getScrollParentTop() + this.container.clientHeight;\n        }\n\n        return this.scrollParentBottom;\n    }\n\n    private getScrollParentTop() {\n        if (this.scrollParentTop == null) {\n            this.scrollParentTop = getOffsetTop(this.container)\n        }\n\n        return this.scrollParentTop;\n    }\n\n    private scrollHorizontally() {\n        if (!this.horizontalScrollDirection) {\n            return;\n        }\n\n        const distance = this.horizontalScrollDirection === \"left\" ? -20 : 20;\n\n        this.container.scrollBy({\n            behavior: \"instant\",\n            left: distance,\n            top: 0,\n        });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollHorizontally.bind(this), 40);\n    }\n\n    private scrollVertically() {\n        if (!this.verticalScrollDirection) {\n            return;\n        }\n\n        const distance = this.verticalScrollDirection === \"top\" ? -20 : 20;\n\n        this.container.scrollBy({\n            behavior: \"instant\",\n            left: 0,\n            top: distance,\n        });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollVertically.bind(this), 40);\n    }\n\n    public checkHorizontalScrolling(pageX: number): void {\n        const newHorizontalScrollDirection =\n            this.getNewHorizontalScrollDirection(pageX);\n\n        if (this.horizontalScrollDirection !== newHorizontalScrollDirection) {\n            this.horizontalScrollDirection = newHorizontalScrollDirection;\n\n            if (this.horizontalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n            }\n\n            if (newHorizontalScrollDirection) {\n                this.horizontalScrollTimeout = window.setTimeout(\n                    this.scrollHorizontally.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public checkVerticalScrolling(pageY: number) {\n        const newVerticalScrollDirection =\n            this.getNewVerticalScrollDirection(pageY);\n\n        if (this.verticalScrollDirection !== newVerticalScrollDirection) {\n            this.verticalScrollDirection = newVerticalScrollDirection;\n\n            if (this.verticalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n                this.verticalScrollTimeout = undefined;\n            }\n\n            if (newVerticalScrollDirection) {\n                this.verticalScrollTimeout = window.setTimeout(\n                    this.scrollVertically.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public getScrollLeft(): number {\n        return this.container.scrollLeft;\n    }\n\n    public scrollToY(top: number): void {\n        this.container.scrollTop = top;\n    }\n\n    public stopScrolling() {\n        this.horizontalScrollDirection = undefined;\n        this.verticalScrollDirection = undefined;\n        this.scrollParentTop = undefined;\n        this.scrollParentBottom = undefined;\n    }\n}\n","import type { ScrollParent } from \"./types\";\n\nimport { getOffsetTop } from \"../util\";\n\ntype HorizontalScrollDirection = \"left\" | \"right\";\ntype VerticalScrollDirection = \"bottom\" | \"top\";\n\ninterface Params {\n    refreshHitAreas: () => void;\n    treeElement: HTMLElement;\n}\n\nexport default class DocumentScrollParent implements ScrollParent {\n    private documentScrollHeight?: number;\n    private documentScrollWidth?: number;\n    private horizontalScrollDirection?: HorizontalScrollDirection;\n    private horizontalScrollTimeout?: number;\n    private refreshHitAreas: () => void;\n    private treeElement: HTMLElement;\n    private verticalScrollDirection?: VerticalScrollDirection;\n    private verticalScrollTimeout?: number;\n\n    constructor({ refreshHitAreas, treeElement }: Params) {\n        this.refreshHitAreas = refreshHitAreas;\n        this.treeElement = treeElement;\n    }\n\n    private canScrollDown() {\n        const documentElement = document.documentElement;\n\n        return (\n            documentElement.scrollTop + documentElement.clientHeight <\n            this.getDocumentScrollHeight()\n        );\n    }\n\n    private canScrollRight() {\n        const documentElement = document.documentElement;\n\n        return (\n            documentElement.scrollLeft + documentElement.clientWidth <\n            this.getDocumentScrollWidth()\n        );\n    }\n\n    private getDocumentScrollHeight() {\n        // Store the original scroll height because the scroll height can increase when the drag element is moved beyond the scroll height.\n        if (this.documentScrollHeight == null) {\n            this.documentScrollHeight = document.documentElement.scrollHeight;\n        }\n\n        return this.documentScrollHeight;\n    }\n\n    private getDocumentScrollWidth() {\n        // Store the original scroll width because the scroll width can increase when the drag element is moved beyond the scroll width.\n        if (this.documentScrollWidth == null) {\n            this.documentScrollWidth = document.documentElement.scrollWidth;\n        }\n\n        return this.documentScrollWidth;\n    }\n\n    private getNewHorizontalScrollDirection(\n        pageX: number,\n    ): HorizontalScrollDirection | undefined {\n        const scrollLeft = document.documentElement.scrollLeft;\n        const windowWidth = window.innerWidth;\n\n        const isNearRightEdge = pageX > windowWidth - 20;\n        const isNearLeftEdge = pageX - scrollLeft < 20;\n\n        if (isNearRightEdge && this.canScrollRight()) {\n            return \"right\";\n        }\n\n        if (isNearLeftEdge) {\n            return \"left\";\n        }\n\n        return undefined;\n    }\n\n    private getNewVerticalScrollDirection(\n        pageY: number,\n    ): undefined | VerticalScrollDirection {\n        const scrollTop = jQuery(document).scrollTop() ?? 0;\n        const distanceTop = pageY - scrollTop;\n\n        if (distanceTop < 20) {\n            return \"top\";\n        }\n\n        const windowHeight = window.innerHeight;\n\n        if (windowHeight - (pageY - scrollTop) < 20 && this.canScrollDown()) {\n            return \"bottom\";\n        }\n\n        return undefined;\n    }\n\n    private scrollHorizontally() {\n        if (!this.horizontalScrollDirection) {\n            return;\n        }\n\n        const distance = this.horizontalScrollDirection === \"left\" ? -20 : 20;\n        window.scrollBy({ behavior: \"instant\", left: distance, top: 0 });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollHorizontally.bind(this), 40);\n    }\n\n    private scrollVertically() {\n        if (!this.verticalScrollDirection) {\n            return;\n        }\n\n        const distance = this.verticalScrollDirection === \"top\" ? -20 : 20;\n        window.scrollBy({ behavior: \"instant\", left: 0, top: distance });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollVertically.bind(this), 40);\n    }\n\n    public checkHorizontalScrolling(pageX: number): void {\n        const newHorizontalScrollDirection =\n            this.getNewHorizontalScrollDirection(pageX);\n\n        if (this.horizontalScrollDirection !== newHorizontalScrollDirection) {\n            this.horizontalScrollDirection = newHorizontalScrollDirection;\n\n            if (this.horizontalScrollTimeout != null) {\n                window.clearTimeout(this.horizontalScrollTimeout);\n            }\n\n            if (newHorizontalScrollDirection) {\n                this.horizontalScrollTimeout = window.setTimeout(\n                    this.scrollHorizontally.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public checkVerticalScrolling(pageY: number) {\n        const newVerticalScrollDirection =\n            this.getNewVerticalScrollDirection(pageY);\n\n        if (this.verticalScrollDirection !== newVerticalScrollDirection) {\n            this.verticalScrollDirection = newVerticalScrollDirection;\n\n            if (this.verticalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n                this.verticalScrollTimeout = undefined;\n            }\n\n            if (newVerticalScrollDirection) {\n                this.verticalScrollTimeout = window.setTimeout(\n                    this.scrollVertically.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public getScrollLeft(): number {\n        return document.documentElement.scrollLeft;\n    }\n\n    public scrollToY(top: number): void {\n        const treeTop = getOffsetTop(this.treeElement);\n\n        document.documentElement.scrollTop = top + treeTop;\n    }\n\n    public stopScrolling() {\n        this.horizontalScrollDirection = undefined;\n        this.verticalScrollDirection = undefined;\n        this.documentScrollHeight = undefined;\n        this.documentScrollWidth = undefined;\n    }\n}\n","import type { ScrollParent } from \"./types\";\n\nimport ContainerScrollParent from \"./containerScrollParent\";\nimport DocumentScrollParent from \"./documentScrollParent\";\n\nconst isOverflow = (overflowValue: string) =>\n    overflowValue === \"auto\" || overflowValue === \"scroll\";\n\nconst hasOverFlow = (element: HTMLElement): boolean => {\n    const style = getComputedStyle(element);\n\n    return isOverflow(style.overflowX) || isOverflow(style.overflowY);\n};\n\nconst getParentWithOverflow = (\n    treeElement: HTMLElement,\n): HTMLElement | null => {\n    if (hasOverFlow(treeElement)) {\n        return treeElement;\n    }\n\n    let parent = treeElement.parentElement;\n\n    while (parent) {\n        if (hasOverFlow(parent)) {\n            return parent;\n        }\n\n        parent = parent.parentElement;\n    }\n\n    return null;\n};\n\nconst createScrollParent = (\n    treeElement: HTMLElement,\n    refreshHitAreas: () => void,\n): ScrollParent => {\n    const container = getParentWithOverflow(treeElement);\n\n    if (container && container.tagName !== \"HTML\") {\n        return new ContainerScrollParent({\n            container,\n            refreshHitAreas,\n        });\n    } else {\n        return new DocumentScrollParent({ refreshHitAreas, treeElement });\n    }\n};\n\nexport default createScrollParent;\n","import { PositionInfo } from \"./mouseUtils\";\nimport createScrollParent from \"./scrollHandler/createScrollParent\";\nimport { ScrollParent } from \"./scrollHandler/types\";\n\ninterface ScrollHandlerParams {\n    refreshHitAreas: () => void;\n    treeElement: HTMLElement;\n}\n\nexport default class ScrollHandler {\n    private refreshHitAreas: () => void;\n    private scrollParent?: ScrollParent;\n    private treeElement: HTMLElement;\n\n    constructor({ refreshHitAreas, treeElement }: ScrollHandlerParams) {\n        this.refreshHitAreas = refreshHitAreas;\n        this.scrollParent = undefined;\n        this.treeElement = treeElement;\n    }\n\n    private checkHorizontalScrolling(positionInfo: PositionInfo): void {\n        this.getScrollParent().checkHorizontalScrolling(positionInfo.pageX);\n    }\n\n    private checkVerticalScrolling(positionInfo: PositionInfo): void {\n        this.getScrollParent().checkVerticalScrolling(positionInfo.pageY);\n    }\n\n    private getScrollParent(): ScrollParent {\n        if (!this.scrollParent) {\n            this.scrollParent = createScrollParent(\n                this.treeElement,\n                this.refreshHitAreas,\n            );\n        }\n\n        return this.scrollParent;\n    }\n\n    public checkScrolling(positionInfo: PositionInfo): void {\n        this.checkVerticalScrolling(positionInfo);\n        this.checkHorizontalScrolling(positionInfo);\n    }\n\n    public getScrollLeft(): number {\n        return this.getScrollParent().getScrollLeft();\n    }\n\n    public scrollToY(top: number): void {\n        this.getScrollParent().scrollToY(top);\n    }\n\n    public stopScrolling() {\n        this.getScrollParent().stopScrolling();\n    }\n}\n","import { GetNodeById } from \"./jqtreeMethodTypes\";\nimport { Node } from \"./node\";\n\ninterface SelectNodeHandlerParameters {\n    getNodeById: GetNodeById;\n}\n\nexport default class SelectNodeHandler {\n    private getNodeById: GetNodeById;\n    private selectedNodes: Set<NodeId>;\n    private selectedSingleNode: Node | null;\n\n    constructor({ getNodeById }: SelectNodeHandlerParameters) {\n        this.getNodeById = getNodeById;\n        this.selectedNodes = new Set<NodeId>();\n        this.clear();\n    }\n\n    public addToSelection(node: Node): void {\n        if (node.id != null) {\n            this.selectedNodes.add(node.id);\n        } else {\n            this.selectedSingleNode = node;\n        }\n    }\n\n    public clear(): void {\n        this.selectedNodes.clear();\n        this.selectedSingleNode = null;\n    }\n\n    public getSelectedNode(): false | Node {\n        const selectedNodes = this.getSelectedNodes();\n\n        if (selectedNodes.length) {\n            return selectedNodes[0] ?? false;\n        } else {\n            return false;\n        }\n    }\n\n    public getSelectedNodes(): Node[] {\n        if (this.selectedSingleNode) {\n            return [this.selectedSingleNode];\n        } else {\n            const selectedNodes: Node[] = [];\n\n            this.selectedNodes.forEach((id) => {\n                const node = this.getNodeById(id);\n                if (node) {\n                    selectedNodes.push(node);\n                }\n            });\n\n            return selectedNodes;\n        }\n    }\n\n    public getSelectedNodesUnder(parent: Node): Node[] {\n        if (this.selectedSingleNode) {\n            if (parent.isParentOf(this.selectedSingleNode)) {\n                return [this.selectedSingleNode];\n            } else {\n                return [];\n            }\n        } else {\n            const selectedNodes = [];\n\n            for (const id in this.selectedNodes) {\n                if (\n                    Object.prototype.hasOwnProperty.call(this.selectedNodes, id)\n                ) {\n                    const node = this.getNodeById(id);\n                    if (node && parent.isParentOf(node)) {\n                        selectedNodes.push(node);\n                    }\n                }\n            }\n\n            return selectedNodes;\n        }\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (node.id != null) {\n            return this.selectedNodes.has(node.id);\n        } else if (this.selectedSingleNode) {\n            return this.selectedSingleNode.element === node.element;\n        } else {\n            return false;\n        }\n    }\n\n    public removeFromSelection(node: Node, includeChildren = false): void {\n        if (node.id == null) {\n            if (\n                this.selectedSingleNode &&\n                node.element === this.selectedSingleNode.element\n            ) {\n                this.selectedSingleNode = null;\n            }\n        } else {\n            this.selectedNodes.delete(node.id);\n\n            if (includeChildren) {\n                node.iterate(() => {\n                    if (node.id != null) {\n                        this.selectedNodes.delete(node.id);\n                    }\n                    return true;\n                });\n            }\n        }\n    }\n}\n","const register = (widgetClass: unknown, widgetName: string): void => {\n    const getDataKey = (): string => `simple_widget_${widgetName}`;\n\n    const getWidgetData = (\n        el: HTMLElement,\n        dataKey: string,\n    ): null | SimpleWidget<unknown> => {\n        const widget = jQuery.data(el, dataKey) as unknown;\n\n        if (widget && widget instanceof SimpleWidget) {\n            return widget;\n        } else {\n            return null;\n        }\n    };\n\n    const createWidget = ($el: JQuery, options: unknown): JQuery => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const existingWidget = getWidgetData(el, dataKey);\n\n            if (!existingWidget) {\n                const simpleWidgetClass = widgetClass as typeof SimpleWidget;\n                const widget = new simpleWidgetClass(el, options);\n\n                if (!jQuery.data(el, dataKey)) {\n                    jQuery.data(el, dataKey, widget);\n                }\n\n                // Call init after setting data, so we can call methods\n                widget.init();\n            }\n        }\n\n        return $el;\n    };\n\n    const destroyWidget = ($el: JQuery): void => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const widget = getWidgetData(el, dataKey);\n\n            if (widget) {\n                widget.destroy();\n            }\n\n            jQuery.removeData(el, dataKey);\n        }\n    };\n\n    const callFunction = (\n        $el: JQuery,\n        functionName: string,\n        args: unknown[],\n    ): unknown => {\n        let result = null;\n\n        for (const el of $el.get()) {\n            const widget = jQuery.data(el, getDataKey()) as unknown;\n\n            if (widget && widget instanceof SimpleWidget) {\n                const simpleWidget = widget as SimpleWidget<unknown>;\n                const widgetFunction = simpleWidget[functionName];\n\n                if (widgetFunction && typeof widgetFunction === \"function\") {\n                    result = widgetFunction.apply(widget, args) as unknown;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (jQuery.fn as any)[widgetName] = function (\n        this: JQuery,\n        argument1: unknown,\n        ...args: unknown[]\n    ) {\n        if (!argument1) {\n            return createWidget(this, null);\n        } else if (typeof argument1 === \"object\") {\n            const options = argument1 as unknown;\n            return createWidget(this, options);\n        } else if (typeof argument1 === \"string\" && argument1[0] !== \"_\") {\n            const functionName = argument1;\n\n            if (functionName === \"destroy\") {\n                destroyWidget(this);\n                return undefined;\n            } else if (functionName === \"get_widget_class\") {\n                return widgetClass;\n            } else {\n                return callFunction(this, functionName, args);\n            }\n        } else {\n            return undefined;\n        }\n    };\n};\n\nexport default class SimpleWidget<WidgetOptions> {\n    [key: string]: unknown;\n\n    protected static defaults: unknown = {};\n\n    public $el: JQuery;\n\n    public options: WidgetOptions;\n\n    constructor(el: HTMLElement, options: WidgetOptions) {\n        this.$el = jQuery(el);\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const defaults = (this.constructor as any).defaults as WidgetOptions;\n        this.options = { ...defaults, ...options };\n    }\n\n    public static register(widgetClass: unknown, widgetName: string): void {\n        register(widgetClass, widgetName);\n    }\n\n    public deinit(): void {\n        //\n    }\n\n    public destroy(): void {\n        this.deinit();\n    }\n\n    public init(): void {\n        //\n    }\n}\n","const version = \"1.8.5\";\n\nexport default version;\n","import DataLoader, { HandleFinishedLoading } from \"./dataLoader\";\nimport { DragAndDropHandler } from \"./dragAndDropHandler\";\nimport ElementsRenderer from \"./elementsRenderer\";\nimport { OnFinishOpenNode } from \"./jqtreeMethodTypes\";\nimport { JQTreeOptions } from \"./jqtreeOptions\";\nimport KeyHandler from \"./keyHandler\";\nimport MouseHandler from \"./mouseHandler\";\nimport { PositionInfo } from \"./mouseUtils\";\nimport { Node } from \"./node\";\nimport NodeElement from \"./nodeElement\";\nimport FolderElement from \"./nodeElement/folderElement\";\nimport { getPosition } from \"./position\";\nimport SaveStateHandler, { SavedState } from \"./saveStateHandler\";\nimport ScrollHandler from \"./scrollHandler\";\nimport SelectNodeHandler from \"./selectNodeHandler\";\nimport SimpleWidget from \"./simple.widget\";\nimport { getOffsetTop, isFunction } from \"./util\";\nimport __version__ from \"./version\";\n\ninterface SelectNodeOptions {\n    mustSetFocus?: boolean;\n    mustToggle?: boolean;\n}\n\nconst NODE_PARAM_IS_EMPTY = \"Node parameter is empty\";\nconst PARAM_IS_EMPTY = \"Parameter is empty: \";\n\nexport class JqTreeWidget extends SimpleWidget<JQTreeOptions> {\n    protected static defaults: JQTreeOptions = {\n        animationSpeed: \"fast\",\n        autoEscape: true,\n        autoOpen: false, // true / false / int (open n levels starting at 0)\n        buttonLeft: true,\n        // The symbol to use for a closed node - ► BLACK RIGHT-POINTING POINTER\n        // http://www.fileformat.info/info/unicode/char/25ba/index.htm\n        closedIcon: undefined,\n        data: undefined,\n        dataFilter: undefined,\n        dataUrl: undefined,\n        dragAndDrop: false,\n        keyboardSupport: true,\n        nodeClass: Node,\n        onCanMove: undefined, // Can this node be moved?\n        onCanMoveTo: undefined, // Can this node be moved to this position? function(moved_node, target_node, position)\n        onCanSelectNode: undefined,\n        onCreateLi: undefined,\n        onDragMove: undefined,\n        onDragStop: undefined,\n        onGetStateFromStorage: undefined,\n        onIsMoveHandle: undefined,\n        onLoadFailed: undefined,\n        onLoading: undefined,\n        onSetStateFromStorage: undefined,\n        openedIcon: \"&#x25bc;\",\n        openFolderDelay: 500, // The delay for opening a folder during drag and drop; the value is in milliseconds\n        // The symbol to use for an open node - ▼ BLACK DOWN-POINTING TRIANGLE\n        // http://www.fileformat.info/info/unicode/char/25bc/index.htm\n        rtl: undefined, // right-to-left support; true / false (default)\n        saveState: false, // true / false / string (cookie name)\n        selectable: true,\n        showEmptyFolder: false,\n        slide: true, // must display slide animation?\n        startDndDelay: 300, // The delay for starting dnd (in milliseconds)\n        tabIndex: 0,\n        useContextMenu: true,\n    };\n\n    private dataLoader: DataLoader;\n    private dndHandler: DragAndDropHandler;\n    private element: JQuery;\n\n    private isInitialized: boolean;\n    private keyHandler: KeyHandler;\n    private mouseHandler: MouseHandler;\n    private renderer: ElementsRenderer;\n    private saveStateHandler: SaveStateHandler;\n    private scrollHandler: ScrollHandler;\n    private selectNodeHandler: SelectNodeHandler;\n    private tree: Node;\n\n    private connectHandlers() {\n        const {\n            autoEscape,\n            buttonLeft,\n            closedIcon,\n            dataFilter,\n            dragAndDrop,\n            keyboardSupport,\n            onCanMove,\n            onCanMoveTo,\n            onCreateLi,\n            onDragMove,\n            onDragStop,\n            onGetStateFromStorage,\n            onIsMoveHandle,\n            onLoadFailed,\n            onLoading,\n            onSetStateFromStorage,\n            openedIcon,\n            openFolderDelay,\n            rtl,\n            saveState,\n            showEmptyFolder,\n            slide,\n            tabIndex,\n        } = this.options;\n\n        const closeNode = this.closeNode.bind(this);\n        const getNodeElement = this.getNodeElement.bind(this);\n        const getNodeElementForNode = this.getNodeElementForNode.bind(this);\n        const getNodeById = this.getNodeById.bind(this);\n        const getSelectedNode = this.getSelectedNode.bind(this);\n        const getTree = this.getTree.bind(this);\n        const isFocusOnTree = this.isFocusOnTree.bind(this);\n        const loadData = this.loadData.bind(this);\n        const openNode = this.openNodeInternal.bind(this);\n        const refreshElements = this.refreshElements.bind(this);\n        const refreshHitAreas = this.refreshHitAreas.bind(this);\n        const selectNode = this.selectNode.bind(this);\n        const $treeElement = this.element;\n        const treeElement = this.element.get(0) as HTMLElement;\n        const triggerEvent = this.triggerEvent.bind(this);\n\n        const selectNodeHandler = new SelectNodeHandler({\n            getNodeById,\n        });\n\n        const addToSelection =\n            selectNodeHandler.addToSelection.bind(selectNodeHandler);\n        const getSelectedNodes =\n            selectNodeHandler.getSelectedNodes.bind(selectNodeHandler);\n        const isNodeSelected =\n            selectNodeHandler.isNodeSelected.bind(selectNodeHandler);\n        const removeFromSelection =\n            selectNodeHandler.removeFromSelection.bind(selectNodeHandler);\n        const getMouseDelay = () => this.options.startDndDelay ?? 0;\n\n        const dataLoader = new DataLoader({\n            dataFilter,\n            loadData,\n            onLoadFailed,\n            onLoading,\n            treeElement,\n            triggerEvent,\n        });\n\n        const saveStateHandler = new SaveStateHandler({\n            addToSelection,\n            getNodeById,\n            getSelectedNodes,\n            getTree,\n            onGetStateFromStorage,\n            onSetStateFromStorage,\n            openNode,\n            refreshElements,\n            removeFromSelection,\n            saveState,\n        });\n\n        const scrollHandler = new ScrollHandler({\n            refreshHitAreas,\n            treeElement,\n        });\n\n        const getScrollLeft = scrollHandler.getScrollLeft.bind(scrollHandler);\n\n        const dndHandler = new DragAndDropHandler({\n            autoEscape,\n            getNodeElement,\n            getNodeElementForNode,\n            getScrollLeft,\n            getTree,\n            onCanMove,\n            onCanMoveTo,\n            onDragMove,\n            onDragStop,\n            onIsMoveHandle,\n            openFolderDelay,\n            openNode,\n            refreshElements,\n            slide,\n            treeElement,\n            triggerEvent,\n        });\n\n        const keyHandler = new KeyHandler({\n            closeNode,\n            getSelectedNode,\n            isFocusOnTree,\n            keyboardSupport,\n            openNode,\n            selectNode,\n        });\n\n        const renderer = new ElementsRenderer({\n            $element: $treeElement,\n            autoEscape,\n            buttonLeft,\n            closedIcon,\n            dragAndDrop,\n            getTree,\n            isNodeSelected,\n            onCreateLi,\n            openedIcon,\n            rtl,\n            showEmptyFolder,\n            tabIndex,\n        });\n\n        const getNode = this.getNode.bind(this);\n        const onMouseCapture = this.mouseCapture.bind(this);\n        const onMouseDrag = this.mouseDrag.bind(this);\n        const onMouseStart = this.mouseStart.bind(this);\n        const onMouseStop = this.mouseStop.bind(this);\n\n        const mouseHandler = new MouseHandler({\n            element: treeElement,\n            getMouseDelay,\n            getNode,\n            onClickButton: this.toggle.bind(this),\n            onClickTitle: this.doSelectNode.bind(this),\n            onMouseCapture,\n            onMouseDrag,\n            onMouseStart,\n            onMouseStop,\n            triggerEvent,\n            useContextMenu: this.options.useContextMenu,\n        });\n\n        this.dataLoader = dataLoader;\n        this.dndHandler = dndHandler;\n        this.keyHandler = keyHandler;\n        this.mouseHandler = mouseHandler;\n        this.renderer = renderer;\n        this.saveStateHandler = saveStateHandler;\n        this.scrollHandler = scrollHandler;\n        this.selectNodeHandler = selectNodeHandler;\n    }\n\n    private containsElement(element: HTMLElement): boolean {\n        const node = this.getNode(element);\n\n        return node != null && node.tree === this.tree;\n    }\n\n    private createFolderElement(node: Node) {\n        const closedIconElement = this.renderer.closedIconElement;\n        const getScrollLeft = this.scrollHandler.getScrollLeft.bind(\n            this.scrollHandler,\n        );\n        const openedIconElement = this.renderer.openedIconElement;\n        const tabIndex = this.options.tabIndex;\n        const $treeElement = this.element;\n        const triggerEvent = this.triggerEvent.bind(this);\n\n        return new FolderElement({\n            $treeElement,\n            closedIconElement,\n            getScrollLeft,\n            node,\n            openedIconElement,\n            tabIndex,\n            triggerEvent,\n        });\n    }\n\n    private createNodeElement(node: Node) {\n        const getScrollLeft = this.scrollHandler.getScrollLeft.bind(\n            this.scrollHandler,\n        );\n        const tabIndex = this.options.tabIndex;\n        const $treeElement = this.element;\n\n        return new NodeElement({\n            $treeElement,\n            getScrollLeft,\n            node,\n            tabIndex,\n        });\n    }\n\n    private deselectCurrentNode(): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            this.removeFromSelection(node);\n        }\n    }\n\n    private deselectNodes(parentNode: Node): void {\n        const selectedNodesUnderParent =\n            this.selectNodeHandler.getSelectedNodesUnder(parentNode);\n        for (const n of selectedNodesUnderParent) {\n            this.selectNodeHandler.removeFromSelection(n);\n        }\n    }\n\n    private doLoadData(data: NodeData[] | null, parentNode: Node | null): void {\n        if (data) {\n            if (parentNode) {\n                this.deselectNodes(parentNode);\n                this.loadSubtree(data, parentNode);\n            } else {\n                this.initTree(data);\n            }\n\n            if (this.isDragging()) {\n                this.dndHandler.refresh();\n            }\n        }\n\n        this.triggerEvent(\"tree.load_data\", {\n            parent_node: parentNode,\n            tree_data: data,\n        });\n    }\n\n    private doLoadDataFromUrl(\n        urlInfoParam: JQuery.AjaxSettings | null | string,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null,\n    ): void {\n        const urlInfo = urlInfoParam ?? this.getDataUrlInfo(parentNode);\n\n        this.dataLoader.loadFromUrl(urlInfo, parentNode, onFinished);\n    }\n\n    private doSelectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): void {\n        const saveState = (): void => {\n            if (this.options.saveState) {\n                this.saveStateHandler.saveState();\n            }\n        };\n\n        if (!node) {\n            // Called with empty node -> deselect current node\n            this.deselectCurrentNode();\n            saveState();\n            return;\n        }\n        const defaultOptions = { mustSetFocus: true, mustToggle: true };\n        const selectOptions = { ...defaultOptions, ...(optionsParam ?? {}) };\n\n        const canSelect = (): boolean => {\n            if (this.options.onCanSelectNode) {\n                return (\n                    this.options.selectable &&\n                    this.options.onCanSelectNode(node)\n                );\n            } else {\n                return this.options.selectable;\n            }\n        };\n\n        if (!canSelect()) {\n            return;\n        }\n\n        if (this.selectNodeHandler.isNodeSelected(node)) {\n            if (selectOptions.mustToggle) {\n                this.deselectCurrentNode();\n                this.triggerEvent(\"tree.select\", {\n                    node: null,\n                    previous_node: node,\n                });\n            }\n        } else {\n            const deselectedNode = this.getSelectedNode() || null;\n            this.deselectCurrentNode();\n            this.addToSelection(node, selectOptions.mustSetFocus);\n\n            this.triggerEvent(\"tree.select\", {\n                deselected_node: deselectedNode,\n                node,\n            });\n            this.openParents(node);\n        }\n\n        saveState();\n    }\n\n    private getAutoOpenMaxLevel(): number {\n        if (this.options.autoOpen === true) {\n            return -1;\n        } else if (typeof this.options.autoOpen === \"number\") {\n            return this.options.autoOpen;\n        } else if (typeof this.options.autoOpen === \"string\") {\n            return parseInt(this.options.autoOpen, 10);\n        } else {\n            return 0;\n        }\n    }\n\n    private getDataUrlInfo(node: Node | null): JQuery.AjaxSettings | null {\n        const dataUrl =\n            this.options.dataUrl ?? (this.element.data(\"url\") as null | string);\n\n        const getUrlFromString = (url: string): JQuery.AjaxSettings => {\n            const urlInfo: JQuery.AjaxSettings = { url };\n\n            setUrlInfoData(urlInfo);\n\n            return urlInfo;\n        };\n\n        const setUrlInfoData = (urlInfo: JQuery.AjaxSettings): void => {\n            if (node?.id) {\n                // Load on demand of a subtree; add node parameter\n                const data = { node: node.id };\n                urlInfo.data = data;\n            } else {\n                // Add selected_node parameter\n                const selectedNodeId = this.getNodeIdToBeSelected();\n                if (selectedNodeId) {\n                    const data = { selected_node: selectedNodeId };\n                    urlInfo.data = data;\n                }\n            }\n        };\n\n        if (typeof dataUrl === \"function\") {\n            return dataUrl(node);\n        } else if (typeof dataUrl === \"string\") {\n            return getUrlFromString(dataUrl);\n        } else if (dataUrl && typeof dataUrl === \"object\") {\n            setUrlInfoData(dataUrl);\n            return dataUrl;\n        } else {\n            return null;\n        }\n    }\n\n    private getDefaultClosedIcon(): string {\n        if (this.options.rtl) {\n            // triangle to the left\n            return \"&#x25c0;\";\n        } else {\n            // triangle to the right\n            return \"&#x25ba;\";\n        }\n    }\n\n    private getNode(element: HTMLElement): Node | null {\n        const liElement = element.closest(\"li.jqtree_common\");\n\n        if (liElement) {\n            return jQuery(liElement).data(\"node\") as Node;\n        } else {\n            return null;\n        }\n    }\n\n    private getNodeElement(element: HTMLElement): NodeElement | null {\n        const node = this.getNode(element);\n        if (node) {\n            return this.getNodeElementForNode(node);\n        } else {\n            return null;\n        }\n    }\n\n    private getNodeElementForNode(node: Node): NodeElement {\n        if (node.isFolder()) {\n            return this.createFolderElement(node);\n        } else {\n            return this.createNodeElement(node);\n        }\n    }\n\n    private getNodeIdToBeSelected(): NodeId | null {\n        if (this.options.saveState) {\n            return this.saveStateHandler.getNodeIdToBeSelected();\n        } else {\n            return null;\n        }\n    }\n\n    private getRtlOption(): boolean {\n        if (this.options.rtl != null) {\n            return this.options.rtl;\n        } else {\n            const dataRtl = this.element.data(\"rtl\") as unknown;\n\n            if (\n                dataRtl !== null &&\n                dataRtl !== false &&\n                dataRtl !== undefined\n            ) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    private initData(): void {\n        if (this.options.data) {\n            this.doLoadData(this.options.data, null);\n        } else {\n            const dataUrl = this.getDataUrlInfo(null);\n\n            if (dataUrl) {\n                this.doLoadDataFromUrl(null, null, null);\n            } else {\n                this.doLoadData([], null);\n            }\n        }\n    }\n\n    private initTree(data: NodeData[]): void {\n        const doInit = (): void => {\n            if (!this.isInitialized) {\n                this.isInitialized = true;\n                this.triggerEvent(\"tree.init\");\n            }\n        };\n\n        this.tree = new this.options.nodeClass(\n            null,\n            true,\n            this.options.nodeClass,\n        );\n\n        this.selectNodeHandler.clear();\n\n        this.tree.loadFromData(data);\n\n        const mustLoadOnDemand = this.setInitialState();\n\n        this.refreshElements(null);\n\n        if (!mustLoadOnDemand) {\n            doInit();\n        } else {\n            // Load data on demand and then init the tree\n            this.setInitialStateOnDemand(doInit);\n        }\n    }\n\n    private isFocusOnTree(): boolean {\n        const activeElement = document.activeElement;\n\n        return Boolean(\n            activeElement &&\n                activeElement.tagName === \"SPAN\" &&\n                this.containsElement(activeElement as HTMLElement),\n        );\n    }\n\n    private isSelectedNodeInSubtree(subtree: Node): boolean {\n        const selectedNode = this.getSelectedNode();\n\n        if (!selectedNode) {\n            return false;\n        } else {\n            return subtree === selectedNode || subtree.isParentOf(selectedNode);\n        }\n    }\n\n    private loadFolderOnDemand(\n        node: Node,\n        slide = true,\n        onFinished?: OnFinishOpenNode,\n    ): void {\n        node.is_loading = true;\n\n        this.doLoadDataFromUrl(null, node, () => {\n            this.openNodeInternal(node, slide, onFinished);\n        });\n    }\n\n    private loadSubtree(data: NodeData[], parentNode: Node): void {\n        parentNode.loadFromData(data);\n\n        parentNode.load_on_demand = false;\n        parentNode.is_loading = false;\n\n        this.refreshElements(parentNode);\n    }\n\n    private mouseCapture(positionInfo: PositionInfo): boolean | null {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseCapture(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    private mouseDrag(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            const result = this.dndHandler.mouseDrag(positionInfo);\n\n            this.scrollHandler.checkScrolling(positionInfo);\n            return result;\n        } else {\n            return false;\n        }\n    }\n\n    private mouseStart(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStart(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    private mouseStop(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            this.scrollHandler.stopScrolling();\n            return this.dndHandler.mouseStop(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    private openNodeInternal(\n        node: Node,\n        slide = true,\n        onFinished?: OnFinishOpenNode,\n    ): void {\n        const doOpenNode = (\n            _node: Node,\n            _slide: boolean,\n            _onFinished?: OnFinishOpenNode,\n        ): void => {\n            const folderElement = this.createFolderElement(_node);\n            folderElement.open(\n                _onFinished,\n                _slide,\n                this.options.animationSpeed,\n            );\n        };\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            if (node.load_on_demand) {\n                this.loadFolderOnDemand(node, slide, onFinished);\n            } else {\n                let parent = node.parent;\n\n                while (parent) {\n                    // nb: do not open root element\n                    if (parent.parent) {\n                        doOpenNode(parent, false);\n                    }\n                    parent = parent.parent;\n                }\n\n                doOpenNode(node, slide, onFinished);\n                this.saveState();\n            }\n        }\n    }\n\n    private openParents(node: Node) {\n        const parent = node.parent;\n\n        if (parent?.parent && !parent.is_open) {\n            this.openNode(parent, false);\n        }\n    }\n\n    /*\n    Redraw the tree or part of the tree.\n     from_node: redraw this subtree\n    */\n    private refreshElements(fromNode: Node | null): void {\n        const mustSetFocus = this.isFocusOnTree();\n        const mustSelect = fromNode\n            ? this.isSelectedNodeInSubtree(fromNode)\n            : false;\n\n        this.renderer.render(fromNode);\n\n        if (mustSelect) {\n            this.selectCurrentNode(mustSetFocus);\n        }\n\n        this.triggerEvent(\"tree.refresh\");\n    }\n\n    private saveState(): void {\n        if (this.options.saveState) {\n            this.saveStateHandler.saveState();\n        }\n    }\n\n    private selectCurrentNode(mustSetFocus: boolean): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            const nodeElement = this.getNodeElementForNode(node);\n            nodeElement.select(mustSetFocus);\n        }\n    }\n\n    // Set initial state, either by restoring the state or auto-opening nodes\n    // result: must load nodes on demand?\n    private setInitialState(): boolean {\n        const restoreState = (): [boolean, boolean] => {\n            // result: is state restored, must load on demand?\n            if (!this.options.saveState) {\n                return [false, false];\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return [false, false];\n                } else {\n                    const mustLoadOnDemand =\n                        this.saveStateHandler.setInitialState(state);\n\n                    // return true: the state is restored\n                    return [true, mustLoadOnDemand];\n                }\n            }\n        };\n\n        const autoOpenNodes = (): boolean => {\n            // result: must load on demand?\n            if (this.options.autoOpen === false) {\n                return false;\n            }\n\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let mustLoadOnDemand = false;\n\n            this.tree.iterate((node: Node, level: number) => {\n                if (node.load_on_demand) {\n                    mustLoadOnDemand = true;\n                    return false;\n                } else if (!node.hasChildren()) {\n                    return false;\n                } else {\n                    node.is_open = true;\n                    return level !== maxLevel;\n                }\n            });\n\n            return mustLoadOnDemand;\n        };\n\n        let [isRestored, mustLoadOnDemand] = restoreState(); // eslint-disable-line prefer-const\n\n        if (!isRestored) {\n            mustLoadOnDemand = autoOpenNodes();\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    // Set the initial state for nodes that are loaded on demand\n    // Call cb_finished when done\n    private setInitialStateOnDemand(cbFinished: () => void): void {\n        const restoreState = (): boolean => {\n            if (!this.options.saveState) {\n                return false;\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return false;\n                } else {\n                    this.saveStateHandler.setInitialStateOnDemand(\n                        state,\n                        cbFinished,\n                    );\n\n                    return true;\n                }\n            }\n        };\n\n        const autoOpenNodes = (): void => {\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let loadingCount = 0;\n\n            const loadAndOpenNode = (node: Node): void => {\n                loadingCount += 1;\n                this.openNodeInternal(node, false, () => {\n                    loadingCount -= 1;\n                    openNodes();\n                });\n            };\n\n            const openNodes = (): void => {\n                this.tree.iterate((node: Node, level: number) => {\n                    if (node.load_on_demand) {\n                        if (!node.is_loading) {\n                            loadAndOpenNode(node);\n                        }\n\n                        return false;\n                    } else {\n                        this.openNodeInternal(node, false);\n\n                        return level !== maxLevel;\n                    }\n                });\n\n                if (loadingCount === 0) {\n                    cbFinished();\n                }\n            };\n\n            openNodes();\n        };\n\n        if (!restoreState()) {\n            autoOpenNodes();\n        }\n    }\n\n    private triggerEvent(\n        eventName: string,\n        values?: Record<string, unknown>,\n    ): JQuery.Event {\n        const event = jQuery.Event(eventName, values);\n        this.element.trigger(event);\n        return event;\n    }\n\n    public addNodeAfter(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        const newNode = existingNode.addAfter(newNodeInfo);\n\n        if (newNode) {\n            this.refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addNodeBefore(\n        newNodeInfo: NodeData,\n        existingNode?: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addBefore(newNodeInfo);\n\n        if (newNode) {\n            this.refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addParentNode(\n        newNodeInfo: NodeData,\n        existingNode?: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addParent(newNodeInfo);\n\n        if (newNode) {\n            this.refreshElements(newNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addToSelection(node?: Node, mustSetFocus?: boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.addToSelection(node);\n        this.openParents(node);\n\n        this.getNodeElementForNode(node).select(mustSetFocus ?? true);\n\n        this.saveState();\n\n        return this.element;\n    }\n\n    public appendNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam ?? this.tree;\n\n        const node = parentNode.append(newNodeInfo);\n\n        this.refreshElements(parentNode);\n\n        return node;\n    }\n\n    public closeNode(node?: Node, slideParam?: boolean | null): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            this.createFolderElement(node).close(\n                slide,\n                this.options.animationSpeed,\n            );\n\n            this.saveState();\n        }\n\n        return this.element;\n    }\n\n    public deinit(): void {\n        this.element.empty();\n        this.element.off();\n\n        this.keyHandler.deinit();\n        this.mouseHandler.deinit();\n\n        this.tree = new Node({}, true);\n\n        super.deinit();\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        return this.tree.getNodeByCallback(callback);\n    }\n\n    public getNodeByHtmlElement(\n        inputElement: HTMLElement | JQuery,\n    ): Node | null {\n        const element =\n            inputElement instanceof HTMLElement\n                ? inputElement\n                : inputElement[0];\n\n        if (!element) {\n            return null;\n        }\n\n        return this.getNode(element);\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.tree.getNodeById(nodeId);\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.tree.getNodeByName(name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        return this.tree.getNodeByNameMustExist(name);\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.tree.getNodesByProperty(key, value);\n    }\n\n    public getSelectedNode(): false | Node {\n        return this.selectNodeHandler.getSelectedNode();\n    }\n\n    public getSelectedNodes(): Node[] {\n        return this.selectNodeHandler.getSelectedNodes();\n    }\n\n    public getState(): null | SavedState {\n        return this.saveStateHandler.getState();\n    }\n\n    public getStateFromStorage(): null | SavedState {\n        return this.saveStateHandler.getStateFromStorage();\n    }\n\n    public getTree(): Node {\n        return this.tree;\n    }\n\n    public getVersion(): string {\n        return __version__;\n    }\n\n    public init(): void {\n        super.init();\n\n        this.element = this.$el;\n        this.isInitialized = false;\n\n        this.options.rtl = this.getRtlOption();\n\n        if (this.options.closedIcon == null) {\n            this.options.closedIcon = this.getDefaultClosedIcon();\n        }\n\n        this.connectHandlers();\n\n        this.initData();\n    }\n\n    public isDragging(): boolean {\n        return this.dndHandler.isDragging;\n    }\n\n    public isNodeSelected(node?: Node): boolean {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        return this.selectNodeHandler.isNodeSelected(node);\n    }\n\n    public loadData(data: NodeData[], parentNode: Node | null): JQuery {\n        this.doLoadData(data, parentNode);\n        return this.element;\n    }\n\n    /*\n    signatures:\n    - loadDataFromUrl(url, parent_node=null, on_finished=null)\n        loadDataFromUrl('/my_data');\n        loadDataFromUrl('/my_data', node1);\n        loadDataFromUrl('/my_data', node1, function() { console.log('finished'); });\n        loadDataFromUrl('/my_data', null, function() { console.log('finished'); });\n\n    - loadDataFromUrl(parent_node=null, on_finished=null)\n        loadDataFromUrl();\n        loadDataFromUrl(node1);\n        loadDataFromUrl(null, function() { console.log('finished'); });\n        loadDataFromUrl(node1, function() { console.log('finished'); });\n    */\n    public loadDataFromUrl(\n        param1: Node | null | string,\n        param2?: HandleFinishedLoading | Node | null,\n        param3?: HandleFinishedLoading,\n    ): JQuery {\n        if (typeof param1 === \"string\") {\n            // first parameter is url\n            this.doLoadDataFromUrl(\n                param1,\n                param2 as Node | null,\n                param3 ?? null,\n            );\n        } else {\n            // first parameter is not url\n            this.doLoadDataFromUrl(\n                null,\n                param1,\n                param2 as HandleFinishedLoading | null,\n            );\n        }\n\n        return this.element;\n    }\n\n    public moveDown(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveDown(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public moveNode(node?: Node, targetNode?: Node, position?: string): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!targetNode) {\n            throw Error(PARAM_IS_EMPTY + \"targetNode\");\n        }\n\n        if (!position) {\n            throw Error(PARAM_IS_EMPTY + \"position\");\n        }\n\n        const positionIndex = getPosition(position);\n\n        if (positionIndex !== undefined) {\n            this.tree.moveNode(node, targetNode, positionIndex);\n            this.refreshElements(null);\n        }\n\n        return this.element;\n    }\n\n    public moveUp(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveUp(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public openNode(\n        node?: Node,\n        param1?: boolean | OnFinishOpenNode,\n        param2?: OnFinishOpenNode,\n    ): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const parseParams = (): [boolean, OnFinishOpenNode | undefined] => {\n            let onFinished: null | OnFinishOpenNode;\n            let slide: boolean | null;\n\n            if (isFunction(param1)) {\n                onFinished = param1 as OnFinishOpenNode;\n                slide = null;\n            } else {\n                slide = param1 as boolean;\n                onFinished = param2 as OnFinishOpenNode;\n            }\n\n            if (slide == null) {\n                slide = this.options.slide;\n            }\n\n            return [slide, onFinished];\n        };\n\n        const [slide, onFinished] = parseParams();\n\n        this.openNodeInternal(node, slide, onFinished);\n        return this.element;\n    }\n\n    public prependNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam ?? this.tree;\n\n        const node = parentNode.prepend(newNodeInfo);\n\n        this.refreshElements(parentNode);\n\n        return node;\n    }\n\n    public refresh(): JQuery {\n        this.refreshElements(null);\n        return this.element;\n    }\n\n    public refreshHitAreas(): JQuery {\n        this.dndHandler.refresh();\n        return this.element;\n    }\n\n    public reload(onFinished: HandleFinishedLoading | null): JQuery {\n        this.doLoadDataFromUrl(null, null, onFinished);\n        return this.element;\n    }\n\n    public removeFromSelection(node?: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.removeFromSelection(node);\n\n        this.getNodeElementForNode(node).deselect();\n        this.saveState();\n\n        return this.element;\n    }\n\n    public removeNode(node?: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!node.parent) {\n            throw Error(\"Node has no parent\");\n        }\n\n        this.selectNodeHandler.removeFromSelection(node, true); // including children\n\n        const parent = node.parent;\n        node.remove();\n        this.refreshElements(parent);\n\n        return this.element;\n    }\n\n    public scrollToNode(node?: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!node.element) {\n            return this.element;\n        }\n\n        const top =\n            getOffsetTop(node.element) -\n            getOffsetTop(this.$el.get(0) as HTMLElement);\n\n        this.scrollHandler.scrollToY(top);\n\n        return this.element;\n    }\n\n    public selectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): JQuery {\n        this.doSelectNode(node, optionsParam);\n        return this.element;\n    }\n\n    public setOption(option: string, value: unknown): JQuery {\n        (this.options as unknown as Record<string, unknown>)[option] = value;\n        return this.element;\n    }\n\n    public setState(state?: SavedState): JQuery {\n        if (state) {\n            this.saveStateHandler.setInitialState(state);\n            this.refreshElements(null);\n        }\n\n        return this.element;\n    }\n\n    public toggle(node?: Node, slideParam: boolean | null = null): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.is_open) {\n            this.closeNode(node, slide);\n        } else {\n            this.openNode(node, slide);\n        }\n\n        return this.element;\n    }\n\n    public toJson(): string {\n        return JSON.stringify(this.tree.getData());\n    }\n\n    public updateNode(node?: Node, data?: NodeData): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!data) {\n            return this.element;\n        }\n\n        const idIsChanged =\n            typeof data === \"object\" && data.id && data.id !== node.id;\n\n        if (idIsChanged) {\n            this.tree.removeNodeFromIndex(node);\n        }\n\n        node.setData(data);\n\n        if (idIsChanged) {\n            this.tree.addNodeToIndex(node);\n        }\n\n        if (\n            typeof data === \"object\" &&\n            data.children &&\n            data.children instanceof Array\n        ) {\n            node.removeChildren();\n\n            if (data.children.length) {\n                node.loadFromData(data.children as Node[]);\n            }\n        }\n\n        this.refreshElements(node);\n\n        return this.element;\n    }\n}\n\nSimpleWidget.register(JqTreeWidget, \"tree\");\n"],"names":["DataLoader","constructor","_ref","dataFilter","loadData","onLoadFailed","onLoading","treeElement","triggerEvent","this","addLoadingClass","element","classList","add","getDomElement","parentNode","notifyLoading","isLoading","node","$el","jQuery","parseData","data","parsedData","JSON","parse","removeLoadingClass","remove","submitRequest","urlInfoInput","handleSuccess","handleError","ajaxSettings","cache","dataType","error","method","success","url","toUpperCase","ajax","loadFromUrl","urlInfo","onFinished","stopLoading","jqXHR","Position","positionNames","after","After","before","Before","inside","Inside","none","None","getPositionName","position","name","Object","prototype","hasOwnProperty","call","getBoolString","value","getOffsetTop","getElementPosition","top","rect","getBoundingClientRect","left","x","window","scrollX","y","scrollY","DragElement","autoEscape","nodeName","offsetX","offsetY","createElement","appendChild","document","textContent","innerHTML","style","move","pageX","pageY","generateHitAreasForGroup","hitAreas","positionsInGroup","bottom","positionCount","Math","min","length","areaHeight","round","areaTop","i","push","generateHitAreas","tree","currentNode","treeBottom","generateHitAreasFromPositions","hitPositions","previousTop","group","generateHitPositions","lastTop","addHitPosition","iterateVisibleNodes","handleAfterOpenFolder","handleClosedFolder","handleFirstNode","handleNode","handleOpenFolder","isFirstNode","iterate","nextNode","mustIterateInside","is_open","hasChildren","offsetParent","childrenLength","children","forEach","_","child","nextChild","height","clientHeight","DragAndDropHandler","getNodeElement","getNodeElementForNode","getScrollLeft","getTree","onCanMove","onCanMoveTo","onDragMove","onDragStop","onIsMoveHandle","openNode","refreshElements","slide","hoveredArea","isDragging","currentItem","canMoveToArea","area","positionName","clear","dragElement","findHoveredArea","dimensions","getTreeDimensions","right","low","high","mid","treePosition","clientWidth","moveItem","positionInfo","movedNode","targetNode","previousParent","parent","doMove","moveNode","move_info","do_move","moved_node","original_event","originalEvent","previous_parent","target_node","isDefaultPrevented","mustCaptureElement","mustOpenFolderTimer","isFolder","removeDropHint","previousGhost","removeHitAreas","removeHover","startOpenFolderTimer","folder","openFolder","refresh","updateDropHint","stopOpenFolderTimer","openFolderDelay","openFolderTimer","setTimeout","clearTimeout","nodeElement","addDropHint","mouseCapture","target","mouseDrag","mouseStart","mouseStop","ElementsRenderer","$element","buttonLeft","closedIcon","dragAndDrop","isNodeSelected","onCreateLi","openedIcon","rtl","showEmptyFolder","tabIndex","openedIconElement","createButtonElement","closedIconElement","attachNodeData","li","div","createTextNode","nodeType","createDomElements","isRootNode","level","ul","createUl","createLi","createFolderLi","isSelected","buttonClasses","getButtonClasses","folderClasses","getFolderClasses","iconElement","className","setAttribute","buttonLink","cloneNode","titleSpan","createTitleSpan","Boolean","isEmptyFolder","createNodeLi","liClasses","classString","join","classes","undefined","setTreeItemAriaAttributes","role","is_loading","render","fromNode","renderFromNode","renderFromRoot","$previousLi","getLevel","empty","KeyHandler","handleKeyDown","e","canHandleKeyboard","isKeyHandled","selectedNode","getSelectedNode","key","moveDown","moveUp","moveRight","moveLeft","preventDefault","closeNode","isFocusOnTree","keyboardSupport","selectNode","originalSelectNode","addEventListener","getParent","getNextVisibleNode","deinit","handleKeyDownHandler","removeEventListener","getPreviousVisibleNode","getPositionInfoFromMouseEvent","getPositionInfoFromTouch","touch","MouseHandler","handleClick","clickTarget","getClickTarget","type","onClickButton","stopPropagation","click_event","onClickTitle","handleContextmenu","closest","getNode","handleDblclick","mouseDown","button","handleMouseDown","cancelable","mouseMove","handleMouseMove","mouseUp","handleMouseUp","touchEnd","touches","touchMove","touchStart","getMouseDelay","onMouseCapture","onMouseDrag","onMouseStart","onMouseStop","useContextMenu","passive","isMouseStarted","mouseDelayTimer","isMouseDelayMet","mouseDownInfo","jqTreeElement","handleStartMouse","removeMouseMoveEventListeners","mouseDelay","startMouseDelayTimer","isNodeRecordWithChildren","Array","Node","nodeData","arguments","isRoot","nodeClass","load_on_demand","setData","idMapping","Map","createNode","getNodeClass","doRemoveChild","splice","getChildIndex","removeNodeFromIndex","loadChildrenFromData","nodeInfo","loadFromData","setParent","addNodeToIndex","addAfter","childIndex","addChildAtPosition","addBefore","addChild","index","id","set","addParent","newParent","originalParent","append","filter","f","result","indexOf","getData","getDataFromNodes","nodes","map","tmpNode","k","v","getLastChild","lastChild","getNextNode","nextSibling","getNextSibling","nextIndex","getNodeByCallback","callback","getNodeById","nodeId","get","getNodeByName","getNodeByNameMustExist","n","Error","getNodesByProperty","getPreviousNode","previousSibling","getPreviousSibling","previousIndex","initFromData","addChildren","childrenData","addNode","isParentOf","_iterate","removeChildren","childData","prepend","removeChild","delete","o","BorderDropHint","scrollLeft","querySelector","hint","width","max","offsetWidth","GhostDropHint","ghost","createGhostElement","circleSpan","lineSpan","NodeElement","$treeElement","init","getTitleSpan","getUl","mustShowBorderDropHint","deselect","removeAttribute","blur","select","mustSetFocus","toString","focus","FolderElement","super","getButton","close","animationSpeed","icon","doClose","slideUp","hide","open","doOpen","slideDown","show","SaveStateHandler","addToSelection","getSelectedNodes","onGetStateFromStorage","onSetStateFromStorage","removeFromSelection","saveState","saveStateOption","getKeyName","loadFromStorage","supportsLocalStorage","localStorage","getItem","openInitialNodes","nodeIds","mustLoadOnDemand","parseState","jsonData","state","selected_node","resetSelection","selectInitialNodes","selectCount","_supportsLocalStorage","testSupport","sessionStorage","setItem","removeItem","getNodeIdToBeSelected","getStateFromStorage","getState","open_nodes","getOpenNodeIds","openNodes","getSelectedNodeIds","selectedNodeIds","stringify","setInitialState","setInitialStateOnDemand","cbFinished","loadingCount","newNodesIds","loadAndOpenNode","ContainerScrollParent","container","refreshHitAreas","getNewHorizontalScrollDirection","scrollParentOffset","rightEdge","leftEdge","getNewVerticalScrollDirection","getScrollParentTop","getScrollParentBottom","scrollParentBottom","scrollParentTop","scrollHorizontally","horizontalScrollDirection","distance","scrollBy","behavior","bind","scrollVertically","verticalScrollDirection","checkHorizontalScrolling","newHorizontalScrollDirection","horizontalScrollTimeout","verticalScrollTimeout","checkVerticalScrolling","newVerticalScrollDirection","scrollToY","scrollTop","stopScrolling","DocumentScrollParent","canScrollDown","documentElement","getDocumentScrollHeight","canScrollRight","getDocumentScrollWidth","documentScrollHeight","scrollHeight","documentScrollWidth","scrollWidth","isNearLeftEdge","innerWidth","innerHeight","treeTop","isOverflow","overflowValue","hasOverFlow","getComputedStyle","overflowX","overflowY","createScrollParent","parentElement","getParentWithOverflow","tagName","ScrollHandler","scrollParent","getScrollParent","checkScrolling","SelectNodeHandler","selectedNodes","Set","selectedSingleNode","getSelectedNodesUnder","has","includeChildren","register","widgetClass","widgetName","getDataKey","getWidgetData","el","dataKey","widget","SimpleWidget","createWidget","options","fn","argument1","functionName","destroy","removeData","destroyWidget","_len","args","_key","callFunction","widgetFunction","apply","static","defaults","NODE_PARAM_IS_EMPTY","PARAM_IS_EMPTY","JqTreeWidget","autoOpen","dataUrl","onCanSelectNode","selectable","startDndDelay","connectHandlers","openNodeInternal","selectNodeHandler","dataLoader","saveStateHandler","scrollHandler","dndHandler","keyHandler","renderer","mouseHandler","toggle","doSelectNode","containsElement","createFolderElement","createNodeElement","deselectCurrentNode","deselectNodes","selectedNodesUnderParent","doLoadData","loadSubtree","initTree","parent_node","tree_data","doLoadDataFromUrl","urlInfoParam","getDataUrlInfo","optionsParam","selectOptions","mustToggle","canSelect","previous_node","deselectedNode","deselected_node","openParents","getAutoOpenMaxLevel","parseInt","setUrlInfoData","selectedNodeId","getUrlFromString","getDefaultClosedIcon","liElement","getRtlOption","dataRtl","initData","doInit","isInitialized","activeElement","isSelectedNodeInSubtree","subtree","loadFolderOnDemand","doOpenNode","_node","_slide","_onFinished","mustSelect","selectCurrentNode","autoOpenNodes","maxLevel","isRestored","restoreState","eventName","values","event","Event","trigger","addNodeAfter","newNodeInfo","existingNode","newNode","addNodeBefore","addParentNode","appendNode","parentNodeParam","slideParam","off","getNodeByHtmlElement","inputElement","HTMLElement","getVersion","loadDataFromUrl","param1","param2","param3","positionIndex","parseParams","prependNode","reload","removeNode","scrollToNode","setOption","option","setState","toJson","updateNode","idIsChanged"],"mappings":"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"}