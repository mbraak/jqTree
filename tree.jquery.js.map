{"version":3,"file":"tree.jquery.js","sources":["src/version.ts","src/node.ts","src/dragAndDropHandler/dragElement.ts","src/util.ts","src/dragAndDropHandler/hitAreasGenerator.ts","src/dragAndDropHandler/visibleNodeIterator.ts","src/dragAndDropHandler/index.ts","src/elementsRenderer.ts","src/dataLoader.ts","src/keyHandler.ts","src/simple.widget.ts","src/mouse.widget.ts","src/saveStateHandler.ts","src/scrollHandler/containerScrollParent.ts","src/scrollHandler/documentScrollParent.ts","src/scrollHandler/createScrollParent.ts","src/scrollHandler.ts","src/selectNodeHandler.ts","src/nodeElement/borderDropHint.ts","src/nodeElement/ghostDropHint.ts","src/nodeElement/index.ts","src/nodeElement/folderElement.ts","src/tree.jquery.ts"],"sourcesContent":["const version = \"1.7.4\";\n\nexport default version;\n","interface NodeRecordWithChildren extends NodeRecord {\n    children: NodeData[];\n}\n\nexport enum Position {\n    Before = 1,\n    After,\n    Inside,\n    None,\n}\n\nconst positionNames: Record<string, Position> = {\n    before: Position.Before,\n    after: Position.After,\n    inside: Position.Inside,\n    none: Position.None,\n};\n\ntype IterateCallback = (node: Node, level: number) => boolean;\n\nexport const getPositionName = (position: Position): string => {\n    for (const name in positionNames) {\n        if (Object.prototype.hasOwnProperty.call(positionNames, name)) {\n            if (positionNames[name] === position) {\n                return name;\n            }\n        }\n    }\n\n    return \"\";\n};\n\nexport const getPosition = (name: string): Position | undefined =>\n    positionNames[name];\n\nconst isNodeRecordWithChildren = (\n    data: NodeData\n): data is NodeRecordWithChildren =>\n    typeof data === \"object\" &&\n    \"children\" in data &&\n    data[\"children\"] instanceof Array;\n\nexport class Node implements INode {\n    public id?: NodeId;\n    public name: string;\n    public children: Node[];\n    public parent: Node | null;\n    public idMapping: Map<NodeId, Node>;\n    public tree?: Node;\n    public nodeClass?: typeof Node;\n    public load_on_demand: boolean;\n    public is_open: boolean;\n    public element: HTMLElement;\n    public is_loading: boolean;\n    public isEmptyFolder: boolean;\n\n    [key: string]: unknown;\n\n    constructor(o: NodeData | null = null, isRoot = false, nodeClass = Node) {\n        this.name = \"\";\n        this.isEmptyFolder = false;\n        this.load_on_demand = false;\n\n        this.setData(o);\n\n        this.children = [];\n        this.parent = null;\n\n        if (isRoot) {\n            this.idMapping = new Map<NodeId, Node>();\n            this.tree = this;\n            this.nodeClass = nodeClass;\n        }\n    }\n\n    /*\n    Set the data of this node.\n\n    setData(string): set the name of the node\n    setdata(object): set attributes of the node\n\n    Examples:\n        setdata('node1')\n\n        setData({ name: 'node1', id: 1});\n\n        setData({ name: 'node2', id: 2, color: 'green'});\n\n    * This is an internal function; it is not in the docs\n    * Does not remove existing node values\n    */\n    public setData(o: NodeData | null): void {\n        if (!o) {\n            return;\n        } else if (typeof o === \"string\") {\n            this.name = o;\n        } else if (typeof o === \"object\") {\n            for (const key in o) {\n                if (Object.prototype.hasOwnProperty.call(o, key)) {\n                    const value = o[key];\n\n                    if (key === \"label\" || key === \"name\") {\n                        // You can use the 'label' key instead of 'name'; this is a legacy feature\n                        if (typeof value === \"string\") {\n                            this.name = value;\n                        }\n                    } else if (key !== \"children\" && key !== \"parent\") {\n                        // You can't update the children or the parent using this function\n                        this[key] = value;\n                    }\n                }\n            }\n        }\n    }\n\n    /*\n    Create tree from data.\n\n    Structure of data is:\n    [\n        {\n            name: 'node1',\n            children: [\n                { name: 'child1' },\n                { name: 'child2' }\n            ]\n        },\n        {\n            name: 'node2'\n        }\n    ]\n    */\n    public loadFromData(data: NodeData[]): Node {\n        this.removeChildren();\n\n        for (const o of data) {\n            const node = this.createNode(o);\n            this.addChild(node);\n\n            if (isNodeRecordWithChildren(o)) {\n                if (o.children.length === 0) {\n                    node.isEmptyFolder = true;\n                } else {\n                    node.loadFromData(o.children);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /*\n    Add child.\n\n    tree.addChild(\n        new Node('child1')\n    );\n    */\n    public addChild(node: Node): void {\n        this.children.push(node);\n        node.setParent(this);\n    }\n\n    /*\n    Add child at position. Index starts at 0.\n\n    tree.addChildAtPosition(\n        new Node('abc'),\n        1\n    );\n    */\n    public addChildAtPosition(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        node.setParent(this);\n    }\n\n    /*\n    Remove child. This also removes the children of the node.\n\n    tree.removeChild(tree.children[0]);\n    */\n    public removeChild(node: Node): void {\n        // remove children from the index\n        node.removeChildren();\n\n        this.doRemoveChild(node);\n    }\n\n    /*\n    Get child index.\n\n    var index = getChildIndex(node);\n    */\n    public getChildIndex(node: Node): number {\n        return this.children.indexOf(node);\n    }\n\n    /*\n    Does the tree have children?\n\n    if (tree.hasChildren()) {\n        //\n    }\n    */\n    public hasChildren(): boolean {\n        return this.children.length !== 0;\n    }\n\n    public isFolder(): boolean {\n        return this.hasChildren() || this.load_on_demand;\n    }\n\n    /*\n    Iterate over all the nodes in the tree.\n\n    Calls callback with (node, level).\n\n    The callback must return true to continue the iteration on current node.\n\n    tree.iterate(\n        function(node, level) {\n           console.log(node.name);\n\n           // stop iteration after level 2\n           return (level <= 2);\n        }\n    );\n\n    */\n    public iterate(callback: IterateCallback): void {\n        const _iterate = (node: Node, level: number): void => {\n            if (node.children) {\n                for (const child of node.children) {\n                    const result = callback(child, level);\n\n                    if (result && child.hasChildren()) {\n                        _iterate(child, level + 1);\n                    }\n                }\n            }\n        };\n\n        _iterate(this, 0);\n    }\n\n    /*\n    Move node relative to another node.\n\n    Argument position: Position.BEFORE, Position.AFTER or Position.Inside\n\n    // move node1 after node2\n    tree.moveNode(node1, node2, Position.AFTER);\n    */\n    public moveNode(\n        movedNode: Node,\n        targetNode: Node,\n        position: Position\n    ): boolean {\n        if (!movedNode.parent || movedNode.isParentOf(targetNode)) {\n            // - Node is parent of target node\n            // - Or, parent is empty\n            return false;\n        } else {\n            movedNode.parent.doRemoveChild(movedNode);\n\n            switch (position) {\n                case Position.After: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode) + 1\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Before: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode)\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Inside: {\n                    // move inside as first child\n                    targetNode.addChildAtPosition(movedNode, 0);\n                    return true;\n                }\n\n                default:\n                    return false;\n            }\n        }\n    }\n\n    /*\n    Get the tree as data.\n    */\n    public getData(includeParent = false): NodeRecord[] {\n        const getDataFromNodes = (nodes: Node[]): Record<string, unknown>[] => {\n            return nodes.map((node) => {\n                const tmpNode: Record<string, unknown> = {};\n\n                for (const k in node) {\n                    if (\n                        [\n                            \"parent\",\n                            \"children\",\n                            \"element\",\n                            \"idMapping\",\n                            \"load_on_demand\",\n                            \"nodeClass\",\n                            \"tree\",\n                            \"isEmptyFolder\",\n                        ].indexOf(k) === -1 &&\n                        Object.prototype.hasOwnProperty.call(node, k)\n                    ) {\n                        const v = node[k];\n                        tmpNode[k] = v;\n                    }\n                }\n\n                if (node.hasChildren()) {\n                    tmpNode[\"children\"] = getDataFromNodes(node.children);\n                }\n\n                return tmpNode;\n            });\n        };\n\n        if (includeParent) {\n            return getDataFromNodes([this]);\n        } else {\n            return getDataFromNodes(this.children);\n        }\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.getNodeByCallback((node: Node) => node.name === name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        const node = this.getNodeByCallback((n: Node) => n.name === name);\n\n        if (!node) {\n            throw `Node with name ${name} not found`;\n        }\n\n        return node;\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        let result: Node | null = null;\n\n        this.iterate((node: Node) => {\n            if (result) {\n                return false;\n            } else if (callback(node)) {\n                result = node;\n                return false;\n            } else {\n                return true;\n            }\n        });\n\n        return result;\n    }\n\n    public addAfter(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex + 1);\n\n            if (\n                isNodeRecordWithChildren(nodeInfo) &&\n                nodeInfo.children.length\n            ) {\n                node.loadFromData(nodeInfo.children);\n            }\n\n            return node;\n        }\n    }\n\n    public addBefore(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex);\n\n            if (\n                isNodeRecordWithChildren(nodeInfo) &&\n                nodeInfo.children.length\n            ) {\n                node.loadFromData(nodeInfo.children);\n            }\n\n            return node;\n        }\n    }\n\n    public addParent(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const newParent = this.createNode(nodeInfo);\n\n            if (this.tree) {\n                newParent.setParent(this.tree);\n            }\n            const originalParent = this.parent;\n\n            for (const child of originalParent.children) {\n                newParent.addChild(child);\n            }\n\n            originalParent.children = [];\n            originalParent.addChild(newParent);\n            return newParent;\n        }\n    }\n\n    public remove(): void {\n        if (this.parent) {\n            this.parent.removeChild(this);\n            this.parent = null;\n        }\n    }\n\n    public append(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChild(node);\n\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            node.loadFromData(nodeInfo.children);\n        }\n\n        return node;\n    }\n\n    public prepend(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChildAtPosition(node, 0);\n\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            node.loadFromData(nodeInfo.children);\n        }\n\n        return node;\n    }\n\n    public isParentOf(node: Node): boolean {\n        let parent = node.parent;\n\n        while (parent) {\n            if (parent === this) {\n                return true;\n            }\n\n            parent = parent.parent;\n        }\n\n        return false;\n    }\n\n    public getLevel(): number {\n        let level = 0;\n        let node: Node = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n        while (node.parent) {\n            level += 1;\n            node = node.parent;\n        }\n\n        return level;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.idMapping.get(nodeId) || null;\n    }\n\n    public addNodeToIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.set(node.id, node);\n        }\n    }\n\n    public removeNodeFromIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.delete(node.id);\n        }\n    }\n\n    public removeChildren(): void {\n        this.iterate((child: Node) => {\n            this.tree?.removeNodeFromIndex(child);\n            return true;\n        });\n\n        this.children = [];\n    }\n\n    public getPreviousSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousIndex = this.parent.getChildIndex(this) - 1;\n            if (previousIndex >= 0) {\n                return this.parent.children[previousIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNextSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const nextIndex = this.parent.getChildIndex(this) + 1;\n            if (nextIndex < this.parent.children.length) {\n                return this.parent.children[nextIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.filter((node: Node) => node[key] === value);\n    }\n\n    public filter(f: (node: Node) => boolean): Node[] {\n        const result: Node[] = [];\n\n        this.iterate((node: Node) => {\n            if (f(node)) {\n                result.push(node);\n            }\n\n            return true;\n        });\n\n        return result;\n    }\n\n    public getNextNode(includeChildren = true): Node | null {\n        if (includeChildren && this.hasChildren()) {\n            return this.children[0] || null;\n        } else if (!this.parent) {\n            return null;\n        } else {\n            const nextSibling = this.getNextSibling();\n\n            if (nextSibling) {\n                return nextSibling;\n            } else {\n                return this.parent.getNextNode(false);\n            }\n        }\n    }\n\n    public getNextVisibleNode(): Node | null {\n        if (this.hasChildren() && this.is_open) {\n            // First child\n            return this.children[0] || null;\n        } else {\n            if (!this.parent) {\n                return null;\n            } else {\n                const nextSibling = this.getNextSibling();\n                if (nextSibling) {\n                    // Next sibling\n                    return nextSibling;\n                } else {\n                    // Next node of parent\n                    return this.parent.getNextNode(false);\n                }\n            }\n        }\n    }\n\n    public getPreviousNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (previousSibling.hasChildren()) {\n                return previousSibling.getLastChild();\n            } else {\n                return previousSibling;\n            }\n        }\n    }\n\n    public getPreviousVisibleNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (\n                !previousSibling.hasChildren() ||\n                !previousSibling.is_open\n            ) {\n                // Previous sibling\n                return previousSibling;\n            } else {\n                // Last child of previous sibling\n                return previousSibling.getLastChild();\n            }\n        }\n    }\n\n    public getParent(): Node | null {\n        // Return parent except if it is the root node\n        if (!this.parent) {\n            return null;\n        } else if (!this.parent.parent) {\n            // Root node -> null\n            return null;\n        } else {\n            return this.parent;\n        }\n    }\n\n    public getLastChild(): Node | null {\n        if (!this.hasChildren()) {\n            return null;\n        } else {\n            const lastChild = this.children[this.children.length - 1];\n\n            if (!lastChild) {\n                return null;\n            }\n\n            if (!(lastChild.hasChildren() && lastChild.is_open)) {\n                return lastChild;\n            } else {\n                return lastChild?.getLastChild();\n            }\n        }\n    }\n\n    // Init Node from data without making it the root of the tree\n    public initFromData(data: NodeData): void {\n        const addNode = (nodeData: NodeData): void => {\n            this.setData(nodeData);\n\n            if (\n                isNodeRecordWithChildren(nodeData) &&\n                nodeData.children.length\n            ) {\n                addChildren(nodeData.children);\n            }\n        };\n\n        const addChildren = (childrenData: NodeData[]): void => {\n            for (const child of childrenData) {\n                const node = this.createNode();\n                node.initFromData(child);\n                this.addChild(node);\n            }\n        };\n\n        addNode(data);\n    }\n\n    private setParent(parent: Node): void {\n        this.parent = parent;\n        this.tree = parent.tree;\n        this.tree?.addNodeToIndex(this);\n    }\n\n    private doRemoveChild(node: Node): void {\n        this.children.splice(this.getChildIndex(node), 1);\n        this.tree?.removeNodeFromIndex(node);\n    }\n\n    private getNodeClass(): typeof Node {\n        return this.nodeClass || this?.tree?.nodeClass || Node;\n    }\n\n    private createNode(nodeData?: NodeData): Node {\n        const nodeClass = this.getNodeClass();\n        return new nodeClass(nodeData);\n    }\n}\n","class DragElement {\n    private offsetX: number;\n    private offsetY: number;\n    private $element: JQuery;\n\n    constructor(\n        nodeName: string,\n        offsetX: number,\n        offsetY: number,\n        $tree: JQuery,\n        autoEscape: boolean,\n    ) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n\n        this.$element = jQuery(\"<span>\").addClass(\n            \"jqtree-title jqtree-dragging\",\n        );\n\n        if (autoEscape) {\n            this.$element.text(nodeName);\n        } else {\n            this.$element.html(nodeName);\n        }\n\n        this.$element.css(\"position\", \"absolute\");\n        $tree.append(this.$element);\n    }\n\n    public move(pageX: number, pageY: number): void {\n        this.$element.offset({\n            left: pageX - this.offsetX,\n            top: pageY - this.offsetY,\n        });\n    }\n\n    public remove(): void {\n        this.$element.remove();\n    }\n}\n\nexport default DragElement;\n","export const isInt = (n: unknown): boolean =>\n    typeof n === \"number\" && n % 1 === 0;\n\nexport const isFunction = (v: unknown): boolean => typeof v === \"function\";\n\nexport const getBoolString = (value: unknown): string =>\n    value ? \"true\" : \"false\";\n\nexport const getOffsetTop = (element: HTMLElement) =>\n    element.getBoundingClientRect().y + window.scrollY;\n","import { HitArea } from \"../types\";\nimport { Node, Position } from \"../node\";\nimport { getOffsetTop } from \"../util\";\nimport VisibleNodeIterator from \"./visibleNodeIterator\";\n\nclass HitAreasGenerator extends VisibleNodeIterator {\n    private currentNode: Node;\n    private treeBottom: number;\n    private positions: HitArea[];\n    private lastTop: number;\n\n    constructor(tree: Node, currentNode: Node, treeBottom: number) {\n        super(tree);\n\n        this.currentNode = currentNode;\n        this.treeBottom = treeBottom;\n    }\n\n    public generate(): HitArea[] {\n        this.positions = [];\n        this.lastTop = 0;\n\n        this.iterate();\n\n        return this.generateHitAreas(this.positions);\n    }\n\n    protected generateHitAreas(positions: HitArea[]): HitArea[] {\n        let previousTop = positions[0]?.top ?? 0;\n        let group = [];\n        const hitAreas: HitArea[] = [];\n\n        for (const position of positions) {\n            if (position.top !== previousTop && group.length) {\n                this.generateHitAreasForGroup(\n                    hitAreas,\n                    group,\n                    previousTop,\n                    position.top,\n                );\n\n                previousTop = position.top;\n                group = [];\n            }\n\n            group.push(position);\n        }\n\n        this.generateHitAreasForGroup(\n            hitAreas,\n            group,\n            previousTop,\n            this.treeBottom,\n        );\n\n        return hitAreas;\n    }\n\n    protected handleOpenFolder(node: Node, element: HTMLElement): boolean {\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            // Stop iterating\n            return false;\n        }\n\n        // Cannot move before current item\n        if (node.children[0] !== this.currentNode) {\n            this.addPosition(node, Position.Inside, getOffsetTop(element));\n        }\n\n        // Continue iterating\n        return true;\n    }\n\n    protected handleClosedFolder(\n        node: Node,\n        nextNode: Node,\n        element: HTMLElement,\n    ): void {\n        const top = getOffsetTop(element);\n\n        if (node === this.currentNode) {\n            // Cannot move after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n\n            // Cannot move before current item\n            if (nextNode !== this.currentNode) {\n                this.addPosition(node, Position.After, top);\n            }\n        }\n    }\n\n    protected handleFirstNode(node: Node): void {\n        if (node !== this.currentNode) {\n            this.addPosition(node, Position.Before, getOffsetTop(node.element));\n        }\n    }\n\n    protected handleAfterOpenFolder(node: Node, nextNode: Node): void {\n        if (node === this.currentNode || nextNode === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, this.lastTop);\n        } else {\n            this.addPosition(node, Position.After, this.lastTop);\n        }\n    }\n\n    protected handleNode(\n        node: Node,\n        nextNode: Node,\n        element: HTMLElement,\n    ): void {\n        const top = getOffsetTop(element);\n\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n        }\n\n        if (nextNode === this.currentNode || node === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.After, top);\n        }\n    }\n\n    private addPosition(node: Node, position: number, top: number): void {\n        const area = {\n            top,\n            bottom: 0,\n            node,\n            position,\n        };\n\n        this.positions.push(area);\n        this.lastTop = top;\n    }\n\n    private generateHitAreasForGroup(\n        hitAreas: HitArea[],\n        positionsInGroup: HitArea[],\n        top: number,\n        bottom: number,\n    ): void {\n        // limit positions in group\n        const positionCount = Math.min(positionsInGroup.length, 4);\n\n        const areaHeight = Math.round((bottom - top) / positionCount);\n        let areaTop = top;\n\n        let i = 0;\n        while (i < positionCount) {\n            const position = positionsInGroup[i];\n\n            if (position) {\n                hitAreas.push({\n                    top: areaTop,\n                    bottom: areaTop + areaHeight,\n                    node: position.node,\n                    position: position.position,\n                });\n            }\n\n            areaTop += areaHeight;\n            i += 1;\n        }\n    }\n}\n\nexport default HitAreasGenerator;\n","import { Node } from \"../node\";\n\nabstract class VisibleNodeIterator {\n    private tree: Node;\n\n    constructor(tree: Node) {\n        this.tree = tree;\n    }\n\n    protected iterate(): void {\n        let isFirstNode = true;\n\n        const _iterateNode = (node: Node, nextNode: Node | null): void => {\n            let mustIterateInside =\n                (node.is_open || !node.element) && node.hasChildren();\n\n            let element: HTMLElement | null = null;\n\n            // Is the element visible?\n            if (node.element?.offsetParent) {\n                element = node.element;\n\n                if (isFirstNode) {\n                    this.handleFirstNode(node);\n                    isFirstNode = false;\n                }\n\n                if (!node.hasChildren()) {\n                    this.handleNode(node, nextNode, node.element);\n                } else if (node.is_open) {\n                    if (!this.handleOpenFolder(node, node.element)) {\n                        mustIterateInside = false;\n                    }\n                } else {\n                    this.handleClosedFolder(node, nextNode, element);\n                }\n            }\n\n            if (mustIterateInside) {\n                const childrenLength = node.children.length;\n                node.children.forEach((_, i) => {\n                    const child = node.children[i];\n\n                    if (child) {\n                        if (i === childrenLength - 1) {\n                            _iterateNode(child, null);\n                        } else {\n                            const nextChild = node.children[i + 1];\n\n                            if (nextChild) {\n                                _iterateNode(child, nextChild);\n                            }\n                        }\n                    }\n                });\n\n                if (node.is_open && element) {\n                    this.handleAfterOpenFolder(node, nextNode);\n                }\n            }\n        };\n\n        _iterateNode(this.tree, null);\n    }\n\n    protected abstract handleNode(\n        node: Node,\n        nextNode: Node | null,\n        element: HTMLElement,\n    ): void;\n\n    /*\n    override\n    return\n        - true: continue iterating\n        - false: stop iterating\n    */\n    protected abstract handleOpenFolder(\n        node: Node,\n        element: HTMLElement,\n    ): boolean;\n\n    protected abstract handleClosedFolder(\n        node: Node,\n        nextNode: Node | null,\n        element: HTMLElement,\n    ): void;\n\n    protected abstract handleAfterOpenFolder(\n        node: Node,\n        nextNode: Node | null,\n    ): void;\n\n    protected abstract handleFirstNode(node: Node): void;\n}\n\nexport default VisibleNodeIterator;\n","import { getPositionName, Node, Position } from \"../node\";\nimport { DropHint, HitArea, PositionInfo } from \"../types\";\nimport NodeElement from \"../nodeElement\";\nimport { JqTreeWidget } from \"../tree.jquery\";\nimport DragElement from \"./dragElement\";\nimport HitAreasGenerator from \"./hitAreasGenerator\";\n\ninterface Dimensions {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n}\n\nexport class DragAndDropHandler {\n    public hitAreas: HitArea[];\n    public isDragging: boolean;\n    public currentItem: NodeElement | null;\n    public hoveredArea: HitArea | null;\n\n    private treeWidget: JqTreeWidget;\n    private dragElement: DragElement | null;\n    private previousGhost: DropHint | null;\n    private openFolderTimer: number | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        this.hoveredArea = null;\n        this.hitAreas = [];\n        this.isDragging = false;\n        this.currentItem = null;\n    }\n\n    public mouseCapture(positionInfo: PositionInfo): boolean | null {\n        const $element = jQuery(positionInfo.target);\n\n        if (!this.mustCaptureElement($element)) {\n            return null;\n        }\n\n        if (\n            this.treeWidget.options.onIsMoveHandle &&\n            !this.treeWidget.options.onIsMoveHandle($element)\n        ) {\n            return null;\n        }\n\n        let nodeElement = this.treeWidget._getNodeElement($element);\n\n        if (nodeElement && this.treeWidget.options.onCanMove) {\n            if (!this.treeWidget.options.onCanMove(nodeElement.node)) {\n                nodeElement = null;\n            }\n        }\n\n        this.currentItem = nodeElement;\n        return this.currentItem != null;\n    }\n\n    public mouseStart(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.refresh();\n\n        const offset = jQuery(positionInfo.target).offset();\n        const left = offset ? offset.left : 0;\n        const top = offset ? offset.top : 0;\n\n        const node = this.currentItem.node;\n\n        this.dragElement = new DragElement(\n            node.name,\n            positionInfo.pageX - left,\n            positionInfo.pageY - top,\n            this.treeWidget.element,\n            this.treeWidget.options.autoEscape ?? true,\n        );\n\n        this.isDragging = true;\n        this.currentItem.element.classList.add(\"jqtree-moving\");\n\n        return true;\n    }\n\n    public mouseDrag(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            !this.dragElement ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.dragElement.move(positionInfo.pageX, positionInfo.pageY);\n\n        const area = this.findHoveredArea(\n            positionInfo.pageX,\n            positionInfo.pageY,\n        );\n\n        if (area && this.canMoveToArea(area)) {\n            if (!area.node.isFolder()) {\n                this.stopOpenFolderTimer();\n            }\n\n            if (this.hoveredArea !== area) {\n                this.hoveredArea = area;\n\n                // If this is a closed folder, start timer to open it\n                if (this.mustOpenFolderTimer(area)) {\n                    this.startOpenFolderTimer(area.node);\n                } else {\n                    this.stopOpenFolderTimer();\n                }\n\n                this.updateDropHint();\n            }\n        } else {\n            this.removeDropHint();\n            this.stopOpenFolderTimer();\n            this.hoveredArea = area;\n        }\n\n        if (!area) {\n            if (this.treeWidget.options.onDragMove) {\n                this.treeWidget.options.onDragMove(\n                    this.currentItem.node,\n                    positionInfo.originalEvent,\n                );\n            }\n        }\n\n        return true;\n    }\n\n    public mouseStop(positionInfo: PositionInfo): boolean {\n        this.moveItem(positionInfo);\n        this.clear();\n        this.removeHover();\n        this.removeDropHint();\n        this.removeHitAreas();\n\n        const currentItem = this.currentItem;\n\n        if (this.currentItem) {\n            this.currentItem.element.classList.remove(\"jqtree-moving\");\n            this.currentItem = null;\n        }\n\n        this.isDragging = false;\n\n        if (!this.hoveredArea && currentItem) {\n            if (this.treeWidget.options.onDragStop) {\n                this.treeWidget.options.onDragStop(\n                    currentItem.node,\n                    positionInfo.originalEvent,\n                );\n            }\n        }\n\n        return false;\n    }\n\n    public refresh(): void {\n        this.removeHitAreas();\n\n        if (this.currentItem) {\n            this.generateHitAreas();\n\n            this.currentItem = this.treeWidget._getNodeElementForNode(\n                this.currentItem.node,\n            );\n\n            if (this.isDragging) {\n                this.currentItem.element.classList.add(\"jqtree-moving\");\n            }\n        }\n    }\n\n    private generateHitAreas(): void {\n        if (!this.currentItem) {\n            this.hitAreas = [];\n        } else {\n            const hitAreasGenerator = new HitAreasGenerator(\n                this.treeWidget.tree,\n                this.currentItem.node,\n                this.getTreeDimensions().bottom,\n            );\n            this.hitAreas = hitAreasGenerator.generate();\n        }\n    }\n\n    private mustCaptureElement($element: JQuery<HTMLElement>): boolean {\n        return !$element.is(\"input,select,textarea\");\n    }\n\n    private canMoveToArea(area: HitArea): boolean {\n        if (!this.treeWidget.options.onCanMoveTo) {\n            return true;\n        }\n\n        if (!this.currentItem) {\n            return false;\n        }\n\n        const positionName = getPositionName(area.position);\n\n        return this.treeWidget.options.onCanMoveTo(\n            this.currentItem.node,\n            area.node,\n            positionName,\n        );\n    }\n\n    private removeHitAreas(): void {\n        this.hitAreas = [];\n    }\n\n    private clear(): void {\n        if (this.dragElement) {\n            this.dragElement.remove();\n            this.dragElement = null;\n        }\n    }\n\n    private removeDropHint(): void {\n        if (this.previousGhost) {\n            this.previousGhost.remove();\n        }\n    }\n\n    private removeHover(): void {\n        this.hoveredArea = null;\n    }\n\n    private findHoveredArea(x: number, y: number): HitArea | null {\n        const dimensions = this.getTreeDimensions();\n\n        if (\n            x < dimensions.left ||\n            y < dimensions.top ||\n            x > dimensions.right ||\n            y > dimensions.bottom\n        ) {\n            return null;\n        }\n\n        let low = 0;\n        let high = this.hitAreas.length;\n        while (low < high) {\n            const mid = (low + high) >> 1;\n            const area = this.hitAreas[mid];\n\n            if (!area) {\n                return null;\n            }\n\n            if (y < area.top) {\n                high = mid;\n            } else if (y > area.bottom) {\n                low = mid + 1;\n            } else {\n                return area;\n            }\n        }\n\n        return null;\n    }\n\n    private mustOpenFolderTimer(area: HitArea): boolean {\n        const node = area.node;\n\n        return (\n            node.isFolder() &&\n            !node.is_open &&\n            area.position === Position.Inside\n        );\n    }\n\n    private updateDropHint(): void {\n        if (!this.hoveredArea) {\n            return;\n        }\n\n        // remove previous drop hint\n        this.removeDropHint();\n\n        // add new drop hint\n        const nodeElement = this.treeWidget._getNodeElementForNode(\n            this.hoveredArea.node,\n        );\n        this.previousGhost = nodeElement.addDropHint(this.hoveredArea.position);\n    }\n\n    private startOpenFolderTimer(folder: Node): void {\n        const openFolder = (): void => {\n            this.treeWidget._openNode(\n                folder,\n                this.treeWidget.options.slide,\n                () => {\n                    this.refresh();\n                    this.updateDropHint();\n                },\n            );\n        };\n\n        this.stopOpenFolderTimer();\n\n        const openFolderDelay = this.treeWidget.options.openFolderDelay;\n\n        if (openFolderDelay !== false) {\n            this.openFolderTimer = window.setTimeout(\n                openFolder,\n                openFolderDelay,\n            );\n        }\n    }\n\n    private stopOpenFolderTimer(): void {\n        if (this.openFolderTimer) {\n            clearTimeout(this.openFolderTimer);\n            this.openFolderTimer = null;\n        }\n    }\n\n    private moveItem(positionInfo: PositionInfo): void {\n        if (\n            this.currentItem &&\n            this.hoveredArea &&\n            this.hoveredArea.position !== Position.None &&\n            this.canMoveToArea(this.hoveredArea)\n        ) {\n            const movedNode = this.currentItem.node;\n            const targetNode = this.hoveredArea.node;\n            const position = this.hoveredArea.position;\n            const previousParent = movedNode.parent;\n\n            if (position === Position.Inside) {\n                this.hoveredArea.node.is_open = true;\n            }\n\n            const doMove = (): void => {\n                this.treeWidget.tree.moveNode(movedNode, targetNode, position);\n                this.treeWidget.element.empty();\n                this.treeWidget._refreshElements(null);\n            };\n\n            const event = this.treeWidget._triggerEvent(\"tree.move\", {\n                move_info: {\n                    moved_node: movedNode,\n                    target_node: targetNode,\n                    position: getPositionName(position),\n                    previous_parent: previousParent,\n                    do_move: doMove,\n                    original_event: positionInfo.originalEvent,\n                },\n            });\n\n            if (!event.isDefaultPrevented()) {\n                doMove();\n            }\n        }\n    }\n\n    private getTreeDimensions(): Dimensions {\n        // Return the dimensions of the tree. Add a margin to the bottom to allow\n        // to drag-and-drop after the last element.\n        const offset = this.treeWidget.element.offset();\n\n        if (!offset) {\n            return { left: 0, top: 0, right: 0, bottom: 0 };\n        } else {\n            const el = this.treeWidget.element;\n            const width = el.width() || 0;\n            const height = el.height() || 0;\n            const left = offset.left + this.treeWidget._getScrollLeft();\n\n            return {\n                left,\n                top: offset.top,\n                right: left + width,\n                bottom: offset.top + height + 16,\n            };\n        }\n    }\n}\n","import { getBoolString } from \"./util\";\nimport { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\ntype IconElement = string | HTMLElement | JQuery<HTMLElement>;\n\nexport default class ElementsRenderer {\n    public openedIconElement?: HTMLElement | Text;\n    public closedIconElement?: HTMLElement | Text;\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        this.openedIconElement = this.createButtonElement(\n            treeWidget.options.openedIcon || \"+\",\n        );\n        this.closedIconElement = this.createButtonElement(\n            treeWidget.options.closedIcon || \"-\",\n        );\n    }\n\n    public render(fromNode: Node | null): void {\n        if (fromNode && fromNode.parent) {\n            this.renderFromNode(fromNode);\n        } else {\n            this.renderFromRoot();\n        }\n    }\n\n    public renderFromRoot(): void {\n        const $element = this.treeWidget.element;\n        $element.empty();\n\n        if ($element[0]) {\n            this.createDomElements(\n                $element[0],\n                this.treeWidget.tree.children,\n                true,\n                1,\n            );\n        }\n    }\n\n    public renderFromNode(node: Node): void {\n        // remember current li\n        const $previousLi = jQuery(node.element);\n\n        // create element\n        const li = this.createLi(node, node.getLevel());\n        this.attachNodeData(node, li);\n\n        // add element to dom\n        $previousLi.after(li);\n\n        // remove previous li\n        $previousLi.remove();\n\n        // create children\n        if (node.children) {\n            this.createDomElements(\n                li,\n                node.children,\n                false,\n                node.getLevel() + 1,\n            );\n        }\n    }\n\n    private createDomElements(\n        element: Element,\n        children: Node[],\n        isRootNode: boolean,\n        level: number,\n    ): void {\n        const ul = this.createUl(isRootNode);\n        element.appendChild(ul);\n\n        for (const child of children) {\n            const li = this.createLi(child, level);\n            ul.appendChild(li);\n\n            this.attachNodeData(child, li);\n\n            if (child.hasChildren()) {\n                this.createDomElements(li, child.children, false, level + 1);\n            }\n        }\n    }\n\n    private attachNodeData(node: Node, li: HTMLElement): void {\n        node.element = li;\n        jQuery(li).data(\"node\", node);\n    }\n\n    private createUl(isRootNode: boolean): HTMLUListElement {\n        let classString;\n        let role;\n\n        if (!isRootNode) {\n            classString = \"\";\n            role = \"group\";\n        } else {\n            classString = \"jqtree-tree\";\n            role = \"tree\";\n\n            if (this.treeWidget.options.rtl) {\n                classString += \" jqtree-rtl\";\n            }\n        }\n\n        if (this.treeWidget.options.dragAndDrop) {\n            classString += \" jqtree-dnd\";\n        }\n\n        const ul = document.createElement(\"ul\");\n        ul.className = `jqtree_common ${classString}`;\n\n        ul.setAttribute(\"role\", role);\n\n        return ul;\n    }\n\n    private createLi(node: Node, level: number): HTMLLIElement {\n        const isSelected = Boolean(\n            this.treeWidget.selectNodeHandler.isNodeSelected(node),\n        );\n\n        const mustShowFolder =\n            node.isFolder() ||\n            (node.isEmptyFolder && this.treeWidget.options.showEmptyFolder);\n\n        const li = mustShowFolder\n            ? this.createFolderLi(node, level, isSelected)\n            : this.createNodeLi(node, level, isSelected);\n\n        if (this.treeWidget.options.onCreateLi) {\n            this.treeWidget.options.onCreateLi(node, jQuery(li), isSelected);\n        }\n\n        return li;\n    }\n\n    private setTreeItemAriaAttributes(\n        element: HTMLElement,\n        name: string,\n        level: number,\n        isSelected: boolean,\n    ) {\n        element.setAttribute(\"aria-label\", name);\n        element.setAttribute(\"aria-level\", `${level}`);\n        element.setAttribute(\"aria-selected\", getBoolString(isSelected));\n        element.setAttribute(\"role\", \"treeitem\");\n    }\n\n    private createFolderLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const buttonClasses = this.getButtonClasses(node);\n        const folderClasses = this.getFolderClasses(node, isSelected);\n\n        const iconElement = node.is_open\n            ? this.openedIconElement\n            : this.closedIconElement;\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = `jqtree_common ${folderClasses}`;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // button link\n        const buttonLink = document.createElement(\"a\");\n        buttonLink.className = buttonClasses;\n\n        if (iconElement) {\n            buttonLink.appendChild(iconElement.cloneNode(true));\n        }\n\n        if (this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            true,\n            level,\n        );\n        titleSpan.setAttribute(\"aria-expanded\", getBoolString(node.is_open));\n        div.appendChild(titleSpan);\n\n        if (!this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        return li;\n    }\n\n    private createNodeLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const liClasses = [\"jqtree_common\"];\n\n        if (isSelected) {\n            liClasses.push(\"jqtree-selected\");\n        }\n\n        const classString = liClasses.join(\" \");\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = classString;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            false,\n            level,\n        );\n        div.appendChild(titleSpan);\n\n        return li;\n    }\n\n    private createTitleSpan(\n        nodeName: string,\n        isSelected: boolean,\n        isFolder: boolean,\n        level: number,\n    ): HTMLSpanElement {\n        const titleSpan = document.createElement(\"span\");\n\n        let classes = \"jqtree-title jqtree_common\";\n\n        if (isFolder) {\n            classes += \" jqtree-title-folder\";\n        }\n\n        classes += ` jqtree-title-button-${\n            this.treeWidget.options.buttonLeft ? \"left\" : \"right\"\n        }`;\n\n        titleSpan.className = classes;\n\n        if (isSelected) {\n            const tabIndex = this.treeWidget.options.tabIndex;\n\n            if (tabIndex !== undefined) {\n                titleSpan.setAttribute(\"tabindex\", `${tabIndex}`);\n            }\n        }\n\n        this.setTreeItemAriaAttributes(titleSpan, nodeName, level, isSelected);\n\n        if (this.treeWidget.options.autoEscape) {\n            titleSpan.textContent = nodeName;\n        } else {\n            titleSpan.innerHTML = nodeName;\n        }\n\n        return titleSpan;\n    }\n\n    private getButtonClasses(node: Node): string {\n        const classes = [\"jqtree-toggler\", \"jqtree_common\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (this.treeWidget.options.buttonLeft) {\n            classes.push(\"jqtree-toggler-left\");\n        } else {\n            classes.push(\"jqtree-toggler-right\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private getFolderClasses(node: Node, isSelected: boolean): string {\n        const classes = [\"jqtree-folder\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (isSelected) {\n            classes.push(\"jqtree-selected\");\n        }\n\n        if (node.is_loading) {\n            classes.push(\"jqtree-loading\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private createButtonElement(\n        value: IconElement,\n    ): HTMLElement | Text | undefined {\n        if (typeof value === \"string\") {\n            // convert value to html\n            const div = document.createElement(\"div\");\n            div.innerHTML = value;\n\n            return document.createTextNode(div.innerHTML);\n        } else if (value == null) {\n            return undefined;\n        } else if ((value as HTMLElement).nodeType) {\n            return value as HTMLElement;\n        } else {\n            return jQuery(value)[0];\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport type HandleFinishedLoading = () => void;\n\nexport default class DataLoader {\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n    }\n\n    public loadFromUrl(\n        urlInfo: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null\n    ): void {\n        if (!urlInfo) {\n            return;\n        }\n\n        const $el = this.getDomElement(parentNode);\n        this.addLoadingClass($el);\n        this.notifyLoading(true, parentNode, $el);\n\n        const stopLoading = (): void => {\n            this.removeLoadingClass($el);\n            this.notifyLoading(false, parentNode, $el);\n        };\n\n        const handleSuccess = (data: string | NodeData[]): void => {\n            stopLoading();\n            this.treeWidget.loadData(this.parseData(data), parentNode);\n\n            if (onFinished && typeof onFinished === \"function\") {\n                onFinished();\n            }\n        };\n\n        const handleError = (jqXHR: JQuery.jqXHR): void => {\n            stopLoading();\n\n            if (this.treeWidget.options.onLoadFailed) {\n                this.treeWidget.options.onLoadFailed(jqXHR);\n            }\n        };\n\n        this.submitRequest(urlInfo, handleSuccess, handleError);\n    }\n\n    private addLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.addClass(\"jqtree-loading\");\n        }\n    }\n\n    private removeLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.removeClass(\"jqtree-loading\");\n        }\n    }\n\n    private getDomElement(parentNode: Node | null): JQuery<HTMLElement> {\n        if (parentNode) {\n            return jQuery(parentNode.element);\n        } else {\n            return this.treeWidget.element;\n        }\n    }\n\n    private notifyLoading(\n        isLoading: boolean,\n        node: Node | null,\n        $el: JQuery\n    ): void {\n        if (this.treeWidget.options.onLoading) {\n            this.treeWidget.options.onLoading(isLoading, node, $el);\n        }\n\n        this.treeWidget._triggerEvent(\"tree.loading_data\", {\n            isLoading,\n            node,\n            $el,\n        });\n    }\n\n    private submitRequest(\n        urlInfoInput: string | JQuery.AjaxSettings,\n        handleSuccess: JQuery.Ajax.SuccessCallback<any>,\n        handleError: JQuery.Ajax.ErrorCallback<any>\n    ): void {\n        const urlInfo =\n            typeof urlInfoInput === \"string\"\n                ? { url: urlInfoInput }\n                : urlInfoInput;\n\n        const ajaxSettings: JQuery.AjaxSettings = {\n            method: \"GET\",\n            cache: false,\n            dataType: \"json\",\n            success: handleSuccess,\n            error: handleError,\n            ...urlInfo,\n        };\n\n        ajaxSettings.method = ajaxSettings.method?.toUpperCase() || \"GET\";\n\n        void jQuery.ajax(ajaxSettings);\n    }\n\n    private parseData(data: string | NodeData[]): NodeData[] {\n        const { dataFilter } = this.treeWidget.options;\n\n        const getParsedData = () => {\n            if (typeof data === \"string\") {\n                return JSON.parse(data) as NodeData[];\n            } else {\n                return data;\n            }\n        };\n\n        const parsedData = getParsedData();\n\n        if (dataFilter) {\n            return dataFilter(parsedData);\n        } else {\n            return parsedData;\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport default class KeyHandler {\n    private static LEFT = 37;\n    private static UP = 38;\n    private static RIGHT = 39;\n    private static DOWN = 40;\n\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        if (treeWidget.options.keyboardSupport) {\n            jQuery(document).on(\"keydown.jqtree\", this.handleKeyDown);\n        }\n    }\n\n    public deinit(): void {\n        jQuery(document).off(\"keydown.jqtree\");\n    }\n\n    public moveDown(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getNextVisibleNode());\n    }\n\n    public moveUp(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getPreviousVisibleNode());\n    }\n\n    public moveRight(selectedNode: Node): boolean {\n        if (!selectedNode.isFolder()) {\n            return true;\n        } else {\n            // folder node\n            if (selectedNode.is_open) {\n                // Right moves to the first child of an open node\n                return this.selectNode(selectedNode.getNextVisibleNode());\n            } else {\n                // Right expands a closed node\n                this.treeWidget.openNode(selectedNode);\n                return false;\n            }\n        }\n    }\n\n    public moveLeft(selectedNode: Node): boolean {\n        if (selectedNode.isFolder() && selectedNode.is_open) {\n            // Left on an open node closes the node\n            this.treeWidget.closeNode(selectedNode);\n            return false;\n        } else {\n            // Left on a closed or end node moves focus to the node's parent\n            return this.selectNode(selectedNode.getParent());\n        }\n    }\n\n    public selectNode(node: Node | null): boolean {\n        if (!node) {\n            return true;\n        } else {\n            this.treeWidget.selectNode(node);\n\n            return false;\n        }\n    }\n\n    private handleKeyDown = (e: JQuery.Event): boolean => {\n        if (!this.canHandleKeyboard()) {\n            return true;\n        }\n\n        const selectedNode = this.treeWidget.getSelectedNode();\n        if (!selectedNode) {\n            return true;\n        }\n\n        const key = e.which;\n\n        switch (key) {\n            case KeyHandler.DOWN:\n                return this.moveDown(selectedNode);\n\n            case KeyHandler.UP:\n                return this.moveUp(selectedNode);\n\n            case KeyHandler.RIGHT:\n                return this.moveRight(selectedNode);\n\n            case KeyHandler.LEFT:\n                return this.moveLeft(selectedNode);\n\n            default:\n                return true;\n        }\n    };\n\n    private canHandleKeyboard(): boolean {\n        return (\n            (this.treeWidget.options.keyboardSupport || false) &&\n            this.treeWidget.selectNodeHandler.isFocusOnTree()\n        );\n    }\n}\n","const register = (widgetClass: unknown, widgetName: string): void => {\n    const getDataKey = (): string => `simple_widget_${widgetName}`;\n\n    const getWidgetData = (\n        el: HTMLElement,\n        dataKey: string\n    ): SimpleWidget<unknown> | null => {\n        const widget = jQuery.data(el, dataKey) as unknown;\n\n        if (widget && widget instanceof SimpleWidget) {\n            return widget;\n        } else {\n            return null;\n        }\n    };\n\n    const createWidget = ($el: JQuery, options: unknown): JQuery => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const existingWidget = getWidgetData(el, dataKey);\n\n            if (!existingWidget) {\n                const simpleWidgetClass = widgetClass as typeof SimpleWidget;\n                const widget = new simpleWidgetClass(el, options);\n\n                if (!jQuery.data(el, dataKey)) {\n                    jQuery.data(el, dataKey, widget);\n                }\n\n                // Call init after setting data, so we can call methods\n                widget.init();\n            }\n        }\n\n        return $el;\n    };\n\n    const destroyWidget = ($el: JQuery): void => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const widget = getWidgetData(el, dataKey);\n\n            if (widget) {\n                widget.destroy();\n            }\n\n            jQuery.removeData(el, dataKey);\n        }\n    };\n\n    const callFunction = (\n        $el: JQuery,\n        functionName: string,\n        args: unknown[]\n    ): unknown => {\n        let result = null;\n\n        for (const el of $el.get()) {\n            const widget = jQuery.data(el, getDataKey()) as unknown;\n\n            if (widget && widget instanceof SimpleWidget) {\n                const simpleWidget = widget as SimpleWidget<unknown>;\n                const widgetFunction = simpleWidget[functionName];\n\n                if (widgetFunction && typeof widgetFunction === \"function\") {\n                    result = widgetFunction.apply(widget, args) as unknown;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (jQuery.fn as any)[widgetName] = function (\n        this: JQuery,\n        argument1: unknown,\n        ...args: unknown[]\n    ) {\n        if (!argument1) {\n            return createWidget(this, null);\n        } else if (typeof argument1 === \"object\") {\n            const options = argument1 as unknown;\n            return createWidget(this, options);\n        } else if (typeof argument1 === \"string\" && argument1[0] !== \"_\") {\n            const functionName = argument1;\n\n            if (functionName === \"destroy\") {\n                return destroyWidget(this);\n            } else if (functionName === \"get_widget_class\") {\n                return widgetClass;\n            } else {\n                return callFunction(this, functionName, args);\n            }\n        } else {\n            return undefined;\n        }\n    };\n};\n\nexport default class SimpleWidget<WidgetOptions> {\n    public static register(widgetClass: unknown, widgetName: string): void {\n        register(widgetClass, widgetName);\n    }\n\n    [key: string]: unknown;\n\n    protected static defaults: unknown = {};\n\n    public options: WidgetOptions;\n\n    public $el: JQuery<HTMLElement>;\n\n    constructor(el: HTMLElement, options: WidgetOptions) {\n        this.$el = jQuery(el);\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const defaults = (this.constructor as any)[\"defaults\"] as WidgetOptions;\n        this.options = { ...defaults, ...options };\n    }\n\n    public destroy(): void {\n        this.deinit();\n    }\n\n    public init(): void {\n        //\n    }\n\n    public deinit(): void {\n        //\n    }\n}\n","/*\nThis widget does the same a the mouse widget in jqueryui.\n*/\nimport SimpleWidget from \"./simple.widget\";\nimport { PositionInfo } from \"./types\";\n\nconst getPositionInfoFromMouseEvent = (e: MouseEvent): PositionInfo => ({\n    pageX: e.pageX,\n    pageY: e.pageY,\n    target: e.target as HTMLElement,\n    originalEvent: e,\n});\n\nconst getPositionInfoFromTouch = (\n    touch: Touch,\n    e: TouchEvent\n): PositionInfo => ({\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    target: touch.target as HTMLElement,\n    originalEvent: e,\n});\n\nabstract class MouseWidget<WidgetOptions> extends SimpleWidget<WidgetOptions> {\n    protected isMouseStarted: boolean;\n    protected mouseDownInfo: PositionInfo | null;\n    private mouseDelayTimer: number | null;\n    private isMouseDelayMet: boolean;\n\n    public init(): void {\n        const element = this.$el.get(0);\n\n        if (element) {\n            element.addEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n            element.addEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.isMouseStarted = false;\n        this.mouseDelayTimer = null;\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n    }\n\n    public deinit(): void {\n        const el = this.$el.get(0);\n\n        if (el) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.removeMouseMoveEventListeners();\n    }\n\n    protected abstract mouseCapture(positionInfo: PositionInfo): boolean | null;\n\n    protected abstract mouseStart(positionInfo: PositionInfo): boolean;\n\n    protected abstract mouseDrag(positionInfo: PositionInfo): void;\n\n    protected abstract mouseStop(positionInfo: PositionInfo): void;\n\n    protected abstract getMouseDelay(): number;\n\n    private mouseDown = (e: MouseEvent): void => {\n        // Left mouse button?\n        if (e.button !== 0) {\n            return;\n        }\n\n        const result = this.handleMouseDown(getPositionInfoFromMouseEvent(e));\n\n        if (result && e.cancelable) {\n            e.preventDefault();\n        }\n    };\n\n    private handleMouseDown(positionInfo: PositionInfo): boolean {\n        // We may have missed mouseup (out of window)\n        if (this.isMouseStarted) {\n            this.handleMouseUp(positionInfo);\n        }\n\n        this.mouseDownInfo = positionInfo;\n\n        if (!this.mouseCapture(positionInfo)) {\n            return false;\n        }\n\n        this.handleStartMouse();\n\n        return true;\n    }\n\n    private handleStartMouse(): void {\n        document.addEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        document.addEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        document.addEventListener(\"mouseup\", this.mouseUp, { passive: false });\n        document.addEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n\n        const mouseDelay = this.getMouseDelay();\n\n        if (mouseDelay) {\n            this.startMouseDelayTimer(mouseDelay);\n        } else {\n            this.isMouseDelayMet = true;\n        }\n    }\n\n    private startMouseDelayTimer(mouseDelay: number): void {\n        if (this.mouseDelayTimer) {\n            clearTimeout(this.mouseDelayTimer);\n        }\n\n        this.mouseDelayTimer = window.setTimeout(() => {\n            if (this.mouseDownInfo) {\n                this.isMouseDelayMet = true;\n            }\n        }, mouseDelay);\n\n        this.isMouseDelayMet = false;\n    }\n\n    private mouseMove = (e: MouseEvent): void => {\n        this.handleMouseMove(e, getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseMove(\n        e: MouseEvent | TouchEvent,\n        positionInfo: PositionInfo\n    ): void {\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n            return;\n        }\n\n        if (!this.isMouseDelayMet) {\n            return;\n        }\n\n        if (this.mouseDownInfo) {\n            this.isMouseStarted = this.mouseStart(this.mouseDownInfo) !== false;\n        }\n\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n        } else {\n            this.handleMouseUp(positionInfo);\n        }\n    }\n\n    private mouseUp = (e: MouseEvent): void => {\n        this.handleMouseUp(getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseUp(positionInfo: PositionInfo): void {\n        this.removeMouseMoveEventListeners();\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n\n        if (this.isMouseStarted) {\n            this.isMouseStarted = false;\n            this.mouseStop(positionInfo);\n        }\n    }\n\n    private removeMouseMoveEventListeners() {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mouseup\", this.mouseUp, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n    }\n\n    private touchStart = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseDown(getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchMove = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseMove(e, getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchEnd = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseUp(getPositionInfoFromTouch(touch, e));\n    };\n}\n\nexport default MouseWidget;\n","import { isInt } from \"./util\";\nimport { JqTreeWidget } from \"./tree.jquery\";\nimport { Node } from \"./node\";\n\nexport interface SavedState {\n    open_nodes: NodeId[];\n    selected_node: NodeId[];\n}\n\nexport default class SaveStateHandler {\n    private treeWidget: JqTreeWidget;\n    private _supportsLocalStorage: boolean | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n    }\n\n    public saveState(): void {\n        const state = JSON.stringify(this.getState());\n\n        if (this.treeWidget.options.onSetStateFromStorage) {\n            this.treeWidget.options.onSetStateFromStorage(state);\n        } else if (this.supportsLocalStorage()) {\n            localStorage.setItem(this.getKeyName(), state);\n        }\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        const jsonData = this.loadFromStorage();\n\n        if (jsonData) {\n            return this.parseState(jsonData) as unknown as SavedState;\n        } else {\n            return null;\n        }\n    }\n\n    public getState(): SavedState {\n        const getOpenNodeIds = (): NodeId[] => {\n            const openNodes: NodeId[] = [];\n\n            this.treeWidget.tree.iterate((node: Node) => {\n                if (node.is_open && node.id && node.hasChildren()) {\n                    openNodes.push(node.id);\n                }\n                return true;\n            });\n\n            return openNodes;\n        };\n\n        const getSelectedNodeIds = (): NodeId[] => {\n            const selectedNodeIds: NodeId[] = [];\n\n            this.treeWidget.getSelectedNodes().forEach((node) => {\n                if (node.id != null) {\n                    selectedNodeIds.push(node.id);\n                }\n            });\n\n            return selectedNodeIds;\n        };\n\n        return {\n            open_nodes: getOpenNodeIds(),\n            selected_node: getSelectedNodeIds(),\n        };\n    }\n\n    /*\n    Set initial state\n    Don't handle nodes that are loaded on demand\n\n    result: must load on demand\n    */\n    public setInitialState(state: SavedState): boolean {\n        if (!state) {\n            return false;\n        } else {\n            let mustLoadOnDemand = false;\n\n            if (state.open_nodes) {\n                mustLoadOnDemand = this.openInitialNodes(state.open_nodes);\n            }\n\n            if (state.selected_node) {\n                this.resetSelection();\n                this.selectInitialNodes(state.selected_node);\n            }\n\n            return mustLoadOnDemand;\n        }\n    }\n\n    public setInitialStateOnDemand(\n        state: SavedState,\n        cbFinished: () => void\n    ): void {\n        if (state) {\n            this.doSetInitialStateOnDemand(\n                state.open_nodes,\n                state.selected_node,\n                cbFinished\n            );\n        } else {\n            cbFinished();\n        }\n    }\n\n    public getNodeIdToBeSelected(): NodeId | null {\n        const state = this.getStateFromStorage();\n\n        if (state && state.selected_node) {\n            return state.selected_node[0] || null;\n        } else {\n            return null;\n        }\n    }\n\n    private parseState(jsonData: string): SavedState {\n        const state = JSON.parse(jsonData) as Record<string, unknown>;\n\n        // Check if selected_node is an int (instead of an array)\n        if (state && state.selected_node && isInt(state.selected_node)) {\n            // Convert to array\n            state.selected_node = [state.selected_node];\n        }\n\n        return state as unknown as SavedState;\n    }\n\n    private loadFromStorage(): string | null {\n        if (this.treeWidget.options.onGetStateFromStorage) {\n            return this.treeWidget.options.onGetStateFromStorage();\n        } else if (this.supportsLocalStorage()) {\n            return localStorage.getItem(this.getKeyName());\n        } else {\n            return null;\n        }\n    }\n\n    private openInitialNodes(nodeIds: NodeId[]): boolean {\n        let mustLoadOnDemand = false;\n\n        for (const nodeId of nodeIds) {\n            const node = this.treeWidget.getNodeById(nodeId);\n\n            if (node) {\n                if (!node.load_on_demand) {\n                    node.is_open = true;\n                } else {\n                    mustLoadOnDemand = true;\n                }\n            }\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    private selectInitialNodes(nodeIds: NodeId[]): boolean {\n        let selectCount = 0;\n\n        for (const nodeId of nodeIds) {\n            const node = this.treeWidget.getNodeById(nodeId);\n\n            if (node) {\n                selectCount += 1;\n\n                this.treeWidget.selectNodeHandler.addToSelection(node);\n            }\n        }\n\n        return selectCount !== 0;\n    }\n\n    private resetSelection(): void {\n        const selectNodeHandler = this.treeWidget.selectNodeHandler;\n\n        const selectedNodes = selectNodeHandler.getSelectedNodes();\n\n        selectedNodes.forEach((node) => {\n            selectNodeHandler.removeFromSelection(node);\n        });\n    }\n\n    private doSetInitialStateOnDemand(\n        nodeIdsParam: NodeId[],\n        selectedNodes: NodeId[],\n        cbFinished: () => void\n    ): void {\n        let loadingCount = 0;\n        let nodeIds = nodeIdsParam;\n\n        const openNodes = (): void => {\n            const newNodesIds = [];\n\n            for (const nodeId of nodeIds) {\n                const node = this.treeWidget.getNodeById(nodeId);\n\n                if (!node) {\n                    newNodesIds.push(nodeId);\n                } else {\n                    if (!node.is_loading) {\n                        if (node.load_on_demand) {\n                            loadAndOpenNode(node);\n                        } else {\n                            this.treeWidget._openNode(node, false, null);\n                        }\n                    }\n                }\n            }\n\n            nodeIds = newNodesIds;\n\n            if (this.selectInitialNodes(selectedNodes)) {\n                this.treeWidget._refreshElements(null);\n            }\n\n            if (loadingCount === 0) {\n                cbFinished();\n            }\n        };\n\n        const loadAndOpenNode = (node: Node): void => {\n            loadingCount += 1;\n            this.treeWidget._openNode(node, false, () => {\n                loadingCount -= 1;\n                openNodes();\n            });\n        };\n\n        openNodes();\n    }\n\n    private getKeyName(): string {\n        if (typeof this.treeWidget.options.saveState === \"string\") {\n            return this.treeWidget.options.saveState;\n        } else {\n            return \"tree\";\n        }\n    }\n\n    private supportsLocalStorage(): boolean {\n        const testSupport = (): boolean => {\n            // Is local storage supported?\n            if (localStorage == null) {\n                return false;\n            } else {\n                // Check if it's possible to store an item. Safari does not allow this in private browsing mode.\n                try {\n                    const key = \"_storage_test\";\n                    sessionStorage.setItem(key, \"value\");\n                    sessionStorage.removeItem(key);\n                } catch (error) {\n                    return false;\n                }\n\n                return true;\n            }\n        };\n\n        if (this._supportsLocalStorage == null) {\n            this._supportsLocalStorage = testSupport();\n        }\n\n        return this._supportsLocalStorage;\n    }\n}\n","import type { ScrollParent } from \"./types\";\n\ntype HorizontalScrollDirection = \"left\" | \"right\";\ntype VerticalScrollDirection = \"bottom\" | \"top\";\n\ninterface Params {\n    $container: JQuery<HTMLElement>;\n    refreshHitAreas: () => void;\n    $treeElement: JQuery<HTMLElement>;\n}\n\nexport default class ContainerScrollParent implements ScrollParent {\n    private $container: JQuery<HTMLElement>;\n    private horizontalScrollDirection?: HorizontalScrollDirection;\n    private horizontalScrollTimeout?: number;\n    private refreshHitAreas: () => void;\n    private scrollParentBottom?: number;\n    private scrollParentTop?: number;\n    private verticalScrollTimeout?: number;\n    private verticalScrollDirection?: VerticalScrollDirection;\n\n    constructor({ $container, refreshHitAreas }: Params) {\n        this.$container = $container;\n        this.refreshHitAreas = refreshHitAreas;\n    }\n\n    public checkHorizontalScrolling(pageX: number): void {\n        const newHorizontalScrollDirection =\n            this.getNewHorizontalScrollDirection(pageX);\n\n        if (this.horizontalScrollDirection !== newHorizontalScrollDirection) {\n            this.horizontalScrollDirection = newHorizontalScrollDirection;\n\n            if (this.horizontalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n            }\n\n            if (newHorizontalScrollDirection) {\n                this.horizontalScrollTimeout = window.setTimeout(\n                    this.scrollHorizontally.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public checkVerticalScrolling(pageY: number) {\n        const newVerticalScrollDirection =\n            this.getNewVerticalScrollDirection(pageY);\n\n        if (this.verticalScrollDirection !== newVerticalScrollDirection) {\n            this.verticalScrollDirection = newVerticalScrollDirection;\n\n            if (this.verticalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n                this.verticalScrollTimeout = undefined;\n            }\n\n            if (newVerticalScrollDirection) {\n                this.verticalScrollTimeout = window.setTimeout(\n                    this.scrollVertically.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public getScrollLeft(): number {\n        return this.$container.scrollLeft() || 0;\n    }\n\n    public scrollToY(top: number): void {\n        const container = this.$container.get(0) as HTMLElement;\n        container.scrollTop = top;\n    }\n\n    public stopScrolling() {\n        this.horizontalScrollDirection = undefined;\n        this.verticalScrollDirection = undefined;\n        this.scrollParentTop = undefined;\n        this.scrollParentBottom = undefined;\n    }\n\n    private getNewHorizontalScrollDirection(\n        pageX: number,\n    ): HorizontalScrollDirection | undefined {\n        const scrollParentOffset = this.$container.offset();\n        if (!scrollParentOffset) {\n            return undefined;\n        }\n\n        const container = this.$container.get(0) as HTMLElement;\n\n        const rightEdge = scrollParentOffset.left + container.clientWidth;\n        const leftEdge = scrollParentOffset.left;\n        const isNearRightEdge = pageX > rightEdge - 20;\n        const isNearLeftEdge = pageX < leftEdge + 20;\n\n        if (isNearRightEdge) {\n            return \"right\";\n        } else if (isNearLeftEdge) {\n            return \"left\";\n        }\n\n        return undefined;\n    }\n\n    private getNewVerticalScrollDirection(\n        pageY: number,\n    ): VerticalScrollDirection | undefined {\n        if (pageY < this.getScrollParentTop()) {\n            return \"top\";\n        }\n\n        if (pageY > this.getScrollParentBottom()) {\n            return \"bottom\";\n        }\n\n        return undefined;\n    }\n\n    private scrollHorizontally() {\n        if (!this.horizontalScrollDirection) {\n            return;\n        }\n\n        const distance = this.horizontalScrollDirection === \"left\" ? -20 : 20;\n        const container = this.$container.get(0) as HTMLElement;\n\n        container.scrollBy({\n            left: distance,\n            top: 0,\n            behavior: \"instant\",\n        });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollHorizontally.bind(this), 40);\n    }\n\n    private scrollVertically() {\n        if (!this.verticalScrollDirection) {\n            return;\n        }\n\n        const distance = this.verticalScrollDirection === \"top\" ? -20 : 20;\n        const container = this.$container.get(0) as HTMLElement;\n\n        container.scrollBy({\n            left: 0,\n            top: distance,\n            behavior: \"instant\",\n        });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollVertically.bind(this), 40);\n    }\n\n    private getScrollParentTop() {\n        if (this.scrollParentTop == null) {\n            this.scrollParentTop = this.$container.offset()?.top || 0;\n        }\n\n        return this.scrollParentTop;\n    }\n\n    private getScrollParentBottom() {\n        if (this.scrollParentBottom == null) {\n            this.scrollParentBottom =\n                this.getScrollParentTop() +\n                (this.$container.innerHeight() ?? 0);\n        }\n\n        return this.scrollParentBottom;\n    }\n}\n","import type { ScrollParent } from \"./types\";\n\ntype HorizontalScrollDirection = \"left\" | \"right\";\ntype VerticalScrollDirection = \"bottom\" | \"top\";\n\nexport default class DocumentScrollParent implements ScrollParent {\n    private $element: JQuery<HTMLElement>;\n    private horizontalScrollDirection?: HorizontalScrollDirection;\n    private horizontalScrollTimeout?: number;\n    private refreshHitAreas: () => void;\n    private verticalScrollDirection?: VerticalScrollDirection;\n    private verticalScrollTimeout?: number;\n    private documentScrollHeight?: number;\n    private documentScrollWidth?: number;\n\n    constructor($element: JQuery<HTMLElement>, refreshHitAreas: () => void) {\n        this.$element = $element;\n        this.refreshHitAreas = refreshHitAreas;\n    }\n\n    public checkHorizontalScrolling(pageX: number): void {\n        const newHorizontalScrollDirection =\n            this.getNewHorizontalScrollDirection(pageX);\n\n        if (this.horizontalScrollDirection !== newHorizontalScrollDirection) {\n            this.horizontalScrollDirection = newHorizontalScrollDirection;\n\n            if (this.horizontalScrollTimeout != null) {\n                window.clearTimeout(this.horizontalScrollTimeout);\n            }\n\n            if (newHorizontalScrollDirection) {\n                this.horizontalScrollTimeout = window.setTimeout(\n                    this.scrollHorizontally.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public checkVerticalScrolling(pageY: number) {\n        const newVerticalScrollDirection =\n            this.getNewVerticalScrollDirection(pageY);\n\n        if (this.verticalScrollDirection !== newVerticalScrollDirection) {\n            this.verticalScrollDirection = newVerticalScrollDirection;\n\n            if (this.verticalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n                this.verticalScrollTimeout = undefined;\n            }\n\n            if (newVerticalScrollDirection) {\n                this.verticalScrollTimeout = window.setTimeout(\n                    this.scrollVertically.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public getScrollLeft(): number {\n        return document.documentElement.scrollLeft;\n    }\n\n    public scrollToY(top: number): void {\n        const offset = this.$element.offset();\n        const treeTop = offset ? offset.top : 0;\n\n        jQuery(document).scrollTop(top + treeTop);\n    }\n\n    public stopScrolling() {\n        this.horizontalScrollDirection = undefined;\n        this.verticalScrollDirection = undefined;\n        this.documentScrollHeight = undefined;\n        this.documentScrollWidth = undefined;\n    }\n\n    private getNewHorizontalScrollDirection(\n        pageX: number,\n    ): HorizontalScrollDirection | undefined {\n        const $document = jQuery(document);\n\n        const scrollLeft = $document.scrollLeft() || 0;\n        const windowWidth = jQuery(window).width() || 0;\n\n        const isNearRightEdge = pageX > windowWidth - 20;\n        const isNearLeftEdge = pageX - scrollLeft < 20;\n\n        if (isNearRightEdge && this.canScrollRight()) {\n            return \"right\";\n        }\n\n        if (isNearLeftEdge) {\n            return \"left\";\n        }\n\n        return undefined;\n    }\n\n    private canScrollRight() {\n        const documentElement = document.documentElement;\n\n        return (\n            documentElement.scrollLeft + documentElement.clientWidth <\n            this.getDocumentScrollWidth()\n        );\n    }\n\n    private canScrollDown() {\n        const documentElement = document.documentElement;\n\n        return (\n            documentElement.scrollTop + documentElement.clientHeight <\n            this.getDocumentScrollHeight()\n        );\n    }\n\n    private getDocumentScrollHeight() {\n        // Store the original scroll height because the scroll height can increase when the drag element is moved beyond the scroll height.\n        if (this.documentScrollHeight == null) {\n            this.documentScrollHeight = document.documentElement.scrollHeight;\n        }\n\n        return this.documentScrollHeight;\n    }\n\n    private getDocumentScrollWidth() {\n        // Store the original scroll width because the scroll width can increase when the drag element is moved beyond the scroll width.\n        if (this.documentScrollWidth == null) {\n            this.documentScrollWidth = document.documentElement.scrollWidth;\n        }\n\n        return this.documentScrollWidth;\n    }\n\n    private getNewVerticalScrollDirection(\n        pageY: number,\n    ): VerticalScrollDirection | undefined {\n        const scrollTop = jQuery(document).scrollTop() || 0;\n        const distanceTop = pageY - scrollTop;\n\n        if (distanceTop < 20) {\n            return \"top\";\n        }\n\n        const windowHeight = jQuery(window).height() || 0;\n\n        if (windowHeight - (pageY - scrollTop) < 20 && this.canScrollDown()) {\n            return \"bottom\";\n        }\n\n        return undefined;\n    }\n\n    private scrollHorizontally() {\n        if (!this.horizontalScrollDirection) {\n            return;\n        }\n\n        const distance = this.horizontalScrollDirection === \"left\" ? -20 : 20;\n        window.scrollBy({ left: distance, top: 0, behavior: \"instant\" });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollHorizontally.bind(this), 40);\n    }\n\n    private scrollVertically() {\n        if (!this.verticalScrollDirection) {\n            return;\n        }\n\n        const distance = this.verticalScrollDirection === \"top\" ? -20 : 20;\n        window.scrollBy({ left: 0, top: distance, behavior: \"instant\" });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollVertically.bind(this), 40);\n    }\n}\n","import type { ScrollParent } from \"./types\";\nimport ContainerScrollParent from \"./containerScrollParent\";\nimport DocumentScrollParent from \"./documentScrollParent\";\n\nconst hasOverFlow = ($element: JQuery<HTMLElement>): boolean => {\n    for (const attr of [\"overflow\", \"overflow-y\"]) {\n        const overflowValue = $element.css(attr);\n        if (overflowValue === \"auto\" || overflowValue === \"scroll\") {\n            return true;\n        }\n    }\n\n    return false;\n};\n\nconst getParentWithOverflow = (\n    $treeElement: JQuery<HTMLElement>,\n): JQuery<HTMLElement> | null => {\n    if (hasOverFlow($treeElement)) {\n        return $treeElement;\n    }\n\n    for (const element of $treeElement.parents().get()) {\n        const $element = jQuery(element);\n        if (hasOverFlow($element)) {\n            return $element;\n        }\n    }\n\n    return null;\n};\n\nconst createScrollParent = (\n    $treeElement: JQuery<HTMLElement>,\n    refreshHitAreas: () => void,\n): ScrollParent => {\n    const $container = getParentWithOverflow($treeElement);\n\n    if ($container?.length && $container[0]?.tagName !== \"HTML\") {\n        return new ContainerScrollParent({\n            $container,\n            refreshHitAreas,\n            $treeElement,\n        });\n    } else {\n        return new DocumentScrollParent($treeElement, refreshHitAreas);\n    }\n};\n\nexport default createScrollParent;\n","import { JqTreeWidget } from \"./tree.jquery\";\nimport { PositionInfo } from \"./types\";\nimport { ScrollParent } from \"./scrollHandler/types\";\nimport createScrollParent from \"./scrollHandler/createScrollParent\";\n\nexport default class ScrollHandler {\n    private treeWidget: JqTreeWidget;\n    private scrollParent?: ScrollParent;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n        this.scrollParent = undefined;\n    }\n\n    public checkScrolling(positionInfo: PositionInfo): void {\n        this.checkVerticalScrolling(positionInfo);\n        this.checkHorizontalScrolling(positionInfo);\n    }\n\n    public stopScrolling() {\n        this.getScrollParent().stopScrolling();\n    }\n\n    public scrollToY(top: number): void {\n        this.getScrollParent().scrollToY(top);\n    }\n\n    public getScrollLeft(): number {\n        return this.getScrollParent().getScrollLeft();\n    }\n\n    private checkVerticalScrolling(positionInfo: PositionInfo): void {\n        if (positionInfo.pageY == null) {\n            return;\n        }\n\n        this.getScrollParent().checkVerticalScrolling(positionInfo.pageY);\n    }\n\n    private checkHorizontalScrolling(positionInfo: PositionInfo): void {\n        if (positionInfo.pageX == null) {\n            return;\n        }\n\n        this.getScrollParent().checkHorizontalScrolling(positionInfo.pageX);\n    }\n\n    private getScrollParent(): ScrollParent {\n        if (!this.scrollParent) {\n            this.scrollParent = createScrollParent(\n                this.treeWidget.$el,\n                this.treeWidget.refreshHitAreas.bind(this.treeWidget),\n            );\n        }\n\n        return this.scrollParent;\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport default class SelectNodeHandler {\n    private treeWidget: JqTreeWidget;\n    private selectedNodes: Set<NodeId>;\n    private selectedSingleNode: Node | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n        this.selectedNodes = new Set<NodeId>();\n        this.clear();\n    }\n\n    public getSelectedNode(): Node | false {\n        const selectedNodes = this.getSelectedNodes();\n\n        if (selectedNodes.length) {\n            return selectedNodes[0] || false;\n        } else {\n            return false;\n        }\n    }\n\n    public getSelectedNodes(): Node[] {\n        if (this.selectedSingleNode) {\n            return [this.selectedSingleNode];\n        } else {\n            const selectedNodes: Node[] = [];\n\n            this.selectedNodes.forEach((id) => {\n                const node = this.treeWidget.getNodeById(id);\n                if (node) {\n                    selectedNodes.push(node);\n                }\n            });\n\n            return selectedNodes;\n        }\n    }\n\n    public getSelectedNodesUnder(parent: Node): Node[] {\n        if (this.selectedSingleNode) {\n            if (parent.isParentOf(this.selectedSingleNode)) {\n                return [this.selectedSingleNode];\n            } else {\n                return [];\n            }\n        } else {\n            const selectedNodes = [];\n\n            for (const id in this.selectedNodes) {\n                if (\n                    Object.prototype.hasOwnProperty.call(this.selectedNodes, id)\n                ) {\n                    const node = this.treeWidget.getNodeById(id);\n                    if (node && parent.isParentOf(node)) {\n                        selectedNodes.push(node);\n                    }\n                }\n            }\n\n            return selectedNodes;\n        }\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (node.id != null) {\n            return this.selectedNodes.has(node.id);\n        } else if (this.selectedSingleNode) {\n            return this.selectedSingleNode.element === node.element;\n        } else {\n            return false;\n        }\n    }\n\n    public clear(): void {\n        this.selectedNodes.clear();\n        this.selectedSingleNode = null;\n    }\n\n    public removeFromSelection(node: Node, includeChildren = false): void {\n        if (node.id == null) {\n            if (\n                this.selectedSingleNode &&\n                node.element === this.selectedSingleNode.element\n            ) {\n                this.selectedSingleNode = null;\n            }\n        } else {\n            this.selectedNodes.delete(node.id);\n\n            if (includeChildren) {\n                node.iterate(() => {\n                    if (node.id != null) {\n                        this.selectedNodes.delete(node.id);\n                    }\n                    return true;\n                });\n            }\n        }\n    }\n\n    public addToSelection(node: Node): void {\n        if (node.id != null) {\n            this.selectedNodes.add(node.id);\n        } else {\n            this.selectedSingleNode = node;\n        }\n    }\n\n    public isFocusOnTree(): boolean {\n        const activeElement = document.activeElement;\n\n        return Boolean(\n            activeElement &&\n                activeElement.tagName === \"SPAN\" &&\n                this.treeWidget._containsElement(activeElement as HTMLElement)\n        );\n    }\n}\n","import { DropHint } from \"..//types\";\n\nclass BorderDropHint implements DropHint {\n    private hint?: HTMLElement;\n\n    constructor(element: HTMLElement, scrollLeft: number) {\n        const div = element.querySelector(\":scope > .jqtree-element\");\n\n        if (!div) {\n            this.hint = undefined;\n            return;\n        }\n\n        const width = Math.max(element.offsetWidth + scrollLeft - 4, 0);\n        const height = Math.max(element.clientHeight - 4, 0);\n\n        const hint = document.createElement(\"span\");\n        hint.className = \"jqtree-border\";\n        hint.style.width = `${width}px`;\n        hint.style.height = `${height}px`;\n\n        this.hint = hint;\n\n        div.append(this.hint);\n    }\n\n    public remove(): void {\n        this.hint?.remove();\n    }\n}\n\nexport default BorderDropHint;\n","import { Position, Node } from \"../node\";\nimport { DropHint } from \"../types\";\n\nclass GhostDropHint implements DropHint {\n    private element: HTMLElement;\n    private node: Node;\n    private ghost: HTMLElement;\n\n    constructor(node: Node, element: HTMLElement, position: Position) {\n        this.element = element;\n        this.node = node;\n        this.ghost = this.createGhostElement();\n\n        if (position === Position.After) {\n            this.moveAfter();\n        } else if (position === Position.Before) {\n            this.moveBefore();\n        } else if (position === Position.Inside) {\n            if (node.isFolder() && node.is_open) {\n                this.moveInsideOpenFolder();\n            } else {\n                this.moveInside();\n            }\n        }\n    }\n\n    public remove(): void {\n        this.ghost.remove();\n    }\n\n    private moveAfter(): void {\n        this.element.after(this.ghost);\n    }\n\n    private moveBefore(): void {\n        this.element.before(this.ghost);\n    }\n\n    private moveInsideOpenFolder(): void {\n        const childElement = this.node.children[0]?.element;\n\n        if (childElement) {\n            childElement.before(this.ghost);\n        }\n    }\n\n    private moveInside(): void {\n        this.element.after(this.ghost);\n        this.ghost.classList.add(\"jqtree-inside\");\n    }\n\n    private createGhostElement() {\n        const ghost = document.createElement(\"li\");\n        ghost.className = \"jqtree_common jqtree-ghost\";\n\n        const circleSpan = document.createElement(\"span\");\n        circleSpan.className = \"jqtree_common jqtree-circle\";\n        ghost.append(circleSpan);\n\n        const lineSpan = document.createElement(\"span\");\n        lineSpan.className = \"jqtree_common jqtree-line\";\n        ghost.append(lineSpan);\n\n        return ghost;\n    }\n}\n\nexport default GhostDropHint;\n","import { Position, Node } from \"../node\";\nimport { JqTreeWidget } from \"../tree.jquery\";\nimport { DropHint } from \"../types\";\nimport BorderDropHint from \"./borderDropHint\";\nimport GhostDropHint from \"./ghostDropHint\";\n\nclass NodeElement {\n    public node: Node;\n    public element: HTMLElement;\n    protected treeWidget: JqTreeWidget;\n\n    constructor(node: Node, treeWidget: JqTreeWidget) {\n        this.init(node, treeWidget);\n    }\n\n    public init(node: Node, treeWidget: JqTreeWidget): void {\n        this.node = node;\n        this.treeWidget = treeWidget;\n\n        if (!node.element) {\n            const element = this.treeWidget.element.get(0);\n\n            if (element) {\n                node.element = element;\n            }\n        }\n\n        if (node.element) {\n            this.element = node.element;\n        }\n    }\n\n    public addDropHint(position: number): DropHint {\n        if (this.mustShowBorderDropHint(position)) {\n            return new BorderDropHint(\n                this.element,\n                this.treeWidget._getScrollLeft(),\n            );\n        } else {\n            return new GhostDropHint(this.node, this.element, position);\n        }\n    }\n\n    public select(mustSetFocus: boolean): void {\n        this.element.classList.add(\"jqtree-selected\");\n\n        const titleSpan = this.getTitleSpan();\n        const tabIndex = this.treeWidget.options.tabIndex;\n\n        // Check for null or undefined\n        if (tabIndex != null) {\n            titleSpan.setAttribute(\"tabindex\", tabIndex.toString());\n        }\n\n        titleSpan.setAttribute(\"aria-selected\", \"true\");\n\n        if (mustSetFocus) {\n            titleSpan.focus();\n        }\n    }\n\n    public deselect(): void {\n        this.element.classList.remove(\"jqtree-selected\");\n\n        const titleSpan = this.getTitleSpan();\n        titleSpan.removeAttribute(\"tabindex\");\n        titleSpan.setAttribute(\"aria-selected\", \"false\");\n\n        titleSpan.blur();\n    }\n\n    protected getUl(): HTMLUListElement {\n        return this.element.querySelector(\":scope > ul\") as HTMLUListElement;\n    }\n\n    protected getTitleSpan(): HTMLSpanElement {\n        return this.element.querySelector(\n            \":scope > .jqtree-element > span.jqtree-title\",\n        ) as HTMLSpanElement;\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return position === Position.Inside;\n    }\n}\n\nexport default NodeElement;\n","import { Position, Node } from \"../node\";\nimport NodeElement from \"./index\";\n\nexport type OnFinishOpenNode = (node: Node) => void;\n\nclass FolderElement extends NodeElement {\n    public open(\n        onFinished: OnFinishOpenNode | null,\n        slide = true,\n        animationSpeed: JQuery.Duration = \"fast\",\n    ): void {\n        if (this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = true;\n\n        const button = this.getButton();\n        button.classList.remove(\"jqtree-closed\");\n        button.innerHTML = \"\";\n\n        const openedIconElement = this.treeWidget.renderer.openedIconElement;\n\n        if (openedIconElement) {\n            const icon = openedIconElement.cloneNode(true);\n            button.appendChild(icon);\n        }\n\n        const doOpen = (): void => {\n            this.element.classList.remove(\"jqtree-closed\");\n\n            const titleSpan = this.getTitleSpan();\n            titleSpan.setAttribute(\"aria-expanded\", \"true\");\n\n            if (onFinished) {\n                onFinished(this.node);\n            }\n\n            this.treeWidget._triggerEvent(\"tree.open\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            jQuery(this.getUl()).slideDown(animationSpeed, doOpen);\n        } else {\n            jQuery(this.getUl()).show();\n            doOpen();\n        }\n    }\n\n    public close(\n        slide = true,\n        animationSpeed: JQuery.Duration | undefined = \"fast\",\n    ): void {\n        if (!this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = false;\n\n        const button = this.getButton();\n        button.classList.add(\"jqtree-closed\");\n        button.innerHTML = \"\";\n\n        const closedIconElement = this.treeWidget.renderer.closedIconElement;\n\n        if (closedIconElement) {\n            const icon = closedIconElement.cloneNode(true);\n            button.appendChild(icon);\n        }\n\n        const doClose = (): void => {\n            this.element.classList.add(\"jqtree-closed\");\n\n            const titleSpan = this.getTitleSpan();\n            titleSpan.setAttribute(\"aria-expanded\", \"false\");\n\n            this.treeWidget._triggerEvent(\"tree.close\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            jQuery(this.getUl()).slideUp(animationSpeed, doClose);\n        } else {\n            jQuery(this.getUl()).hide();\n            doClose();\n        }\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return !this.node.is_open && position === Position.Inside;\n    }\n\n    private getButton(): HTMLLinkElement {\n        return this.element.querySelector(\n            \":scope > .jqtree-element > a.jqtree-toggler\",\n        ) as HTMLLinkElement;\n    }\n}\n\nexport default FolderElement;\n","import __version__ from \"./version\";\nimport { DragAndDropHandler } from \"./dragAndDropHandler\";\nimport ElementsRenderer from \"./elementsRenderer\";\nimport DataLoader, { HandleFinishedLoading } from \"./dataLoader\";\nimport KeyHandler from \"./keyHandler\";\nimport MouseWidget from \"./mouse.widget\";\nimport { PositionInfo } from \"./types\";\nimport SaveStateHandler, { SavedState } from \"./saveStateHandler\";\nimport ScrollHandler from \"./scrollHandler\";\nimport SelectNodeHandler from \"./selectNodeHandler\";\nimport SimpleWidget from \"./simple.widget\";\nimport { Node, getPosition } from \"./node\";\nimport { isFunction } from \"./util\";\nimport NodeElement from \"./nodeElement\";\nimport FolderElement, { OnFinishOpenNode } from \"./nodeElement/folderElement\";\n\nimport { JQTreeOptions } from \"./jqtreeOptions\";\n\ninterface ClickTarget {\n    node: Node;\n    type: \"button\" | \"label\";\n}\n\ninterface SelectNodeOptions {\n    mustToggle?: boolean;\n    mustSetFocus?: boolean;\n}\n\nconst NODE_PARAM_IS_EMPTY = \"Node parameter is empty\";\nconst PARAM_IS_EMPTY = \"Parameter is empty: \";\n\nexport class JqTreeWidget extends MouseWidget<JQTreeOptions> {\n    protected static defaults: JQTreeOptions = {\n        animationSpeed: \"fast\",\n        autoEscape: true,\n        autoOpen: false, // true / false / int (open n levels starting at 0)\n        buttonLeft: true,\n        // The symbol to use for a closed node - ► BLACK RIGHT-POINTING POINTER\n        // http://www.fileformat.info/info/unicode/char/25ba/index.htm\n        closedIcon: undefined,\n        data: undefined,\n        dataFilter: undefined,\n        dataUrl: undefined,\n        dragAndDrop: false,\n        keyboardSupport: true,\n        nodeClass: Node,\n        onCanMove: undefined, // Can this node be moved?\n        onCanMoveTo: undefined, // Can this node be moved to this position? function(moved_node, target_node, position)\n        onCanSelectNode: undefined,\n        onCreateLi: undefined,\n        onDragMove: undefined,\n        onDragStop: undefined,\n        onGetStateFromStorage: undefined,\n        onIsMoveHandle: undefined,\n        onLoadFailed: undefined,\n        onLoading: undefined,\n        onSetStateFromStorage: undefined,\n        openedIcon: \"&#x25bc;\",\n        openFolderDelay: 500, // The delay for opening a folder during drag and drop; the value is in milliseconds\n        // The symbol to use for an open node - ▼ BLACK DOWN-POINTING TRIANGLE\n        // http://www.fileformat.info/info/unicode/char/25bc/index.htm\n        rtl: undefined, // right-to-left support; true / false (default)\n        saveState: false, // true / false / string (cookie name)\n        selectable: true,\n        showEmptyFolder: false,\n        slide: true, // must display slide animation?\n        startDndDelay: 300, // The delay for starting dnd (in milliseconds)\n        tabIndex: 0,\n        useContextMenu: true,\n    };\n\n    public element: JQuery;\n    public tree: Node;\n    public dndHandler: DragAndDropHandler;\n    public renderer: ElementsRenderer;\n    public dataLoader: DataLoader;\n    public scrollHandler: ScrollHandler;\n    public selectNodeHandler: SelectNodeHandler;\n\n    private isInitialized: boolean;\n    private saveStateHandler: SaveStateHandler;\n    private keyHandler: KeyHandler;\n\n    public toggle(node: Node, slideParam: null | boolean = null): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.is_open) {\n            this.closeNode(node, slide);\n        } else {\n            this.openNode(node, slide);\n        }\n\n        return this.element;\n    }\n\n    public getTree(): Node {\n        return this.tree;\n    }\n\n    public selectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): JQuery {\n        this.doSelectNode(node, optionsParam);\n        return this.element;\n    }\n\n    public getSelectedNode(): Node | false {\n        return this.selectNodeHandler.getSelectedNode();\n    }\n\n    public toJson(): string {\n        return JSON.stringify(this.tree.getData());\n    }\n\n    public loadData(data: NodeData[], parentNode: Node | null): JQuery {\n        this.doLoadData(data, parentNode);\n        return this.element;\n    }\n\n    /*\n    signatures:\n    - loadDataFromUrl(url, parent_node=null, on_finished=null)\n        loadDataFromUrl('/my_data');\n        loadDataFromUrl('/my_data', node1);\n        loadDataFromUrl('/my_data', node1, function() { console.log('finished'); });\n        loadDataFromUrl('/my_data', null, function() { console.log('finished'); });\n\n    - loadDataFromUrl(parent_node=null, on_finished=null)\n        loadDataFromUrl();\n        loadDataFromUrl(node1);\n        loadDataFromUrl(null, function() { console.log('finished'); });\n        loadDataFromUrl(node1, function() { console.log('finished'); });\n    */\n    public loadDataFromUrl(\n        param1: string | null | Node,\n        param2?: Node | null | HandleFinishedLoading,\n        param3?: HandleFinishedLoading,\n    ): JQuery {\n        if (typeof param1 === \"string\") {\n            // first parameter is url\n            this.doLoadDataFromUrl(\n                param1,\n                param2 as Node | null,\n                param3 ?? null,\n            );\n        } else {\n            // first parameter is not url\n            this.doLoadDataFromUrl(\n                null,\n                param1,\n                param2 as HandleFinishedLoading | null,\n            );\n        }\n\n        return this.element;\n    }\n\n    public reload(onFinished: HandleFinishedLoading | null): JQuery {\n        this.doLoadDataFromUrl(null, null, onFinished);\n        return this.element;\n    }\n\n    public refresh(): JQuery {\n        this._refreshElements(null);\n        return this.element;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.tree.getNodeById(nodeId);\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.tree.getNodeByName(name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        return this.tree.getNodeByNameMustExist(name);\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.tree.getNodesByProperty(key, value);\n    }\n\n    public getNodeByHtmlElement(\n        element: HTMLElement | JQuery<HTMLElement>,\n    ): Node | null {\n        return this.getNode(jQuery(element));\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        return this.tree.getNodeByCallback(callback);\n    }\n\n    public openNode(\n        node: Node,\n        param1?: boolean | OnFinishOpenNode,\n        param2?: OnFinishOpenNode,\n    ): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const parseParams = (): [boolean, OnFinishOpenNode | null] => {\n            let onFinished: OnFinishOpenNode | null;\n            let slide: boolean | null;\n\n            if (isFunction(param1)) {\n                onFinished = param1 as OnFinishOpenNode | null;\n                slide = null;\n            } else {\n                slide = param1 as boolean;\n                onFinished = param2 as OnFinishOpenNode;\n            }\n\n            if (slide == null) {\n                slide = this.options.slide ?? false;\n            }\n\n            return [slide, onFinished];\n        };\n\n        const [slide, onFinished] = parseParams();\n\n        this._openNode(node, slide, onFinished);\n        return this.element;\n    }\n\n    public closeNode(node: Node, slideParam?: null | boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            new FolderElement(node, this).close(\n                slide,\n                this.options.animationSpeed,\n            );\n\n            this.saveState();\n        }\n\n        return this.element;\n    }\n\n    public isDragging(): boolean {\n        return this.dndHandler.isDragging;\n    }\n\n    public refreshHitAreas(): JQuery {\n        this.dndHandler.refresh();\n        return this.element;\n    }\n\n    public addNodeAfter(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        const newNode = existingNode.addAfter(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addNodeBefore(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addBefore(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addParentNode(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addParent(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(newNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public removeNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!node.parent) {\n            throw Error(\"Node has no parent\");\n        }\n\n        this.selectNodeHandler.removeFromSelection(node, true); // including children\n\n        const parent = node.parent;\n        node.remove();\n        this._refreshElements(parent);\n\n        return this.element;\n    }\n\n    public appendNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam || this.tree;\n\n        const node = parentNode.append(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public prependNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam ?? this.tree;\n\n        const node = parentNode.prepend(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public updateNode(node: Node, data: NodeData): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const idIsChanged =\n            typeof data === \"object\" && data.id && data.id !== node.id;\n\n        if (idIsChanged) {\n            this.tree.removeNodeFromIndex(node);\n        }\n\n        node.setData(data);\n\n        if (idIsChanged) {\n            this.tree.addNodeToIndex(node);\n        }\n\n        if (\n            typeof data === \"object\" &&\n            data[\"children\"] &&\n            data[\"children\"] instanceof Array\n        ) {\n            node.removeChildren();\n\n            if (data.children.length) {\n                node.loadFromData(data.children as Node[]);\n            }\n        }\n\n        this._refreshElements(node);\n\n        return this.element;\n    }\n\n    private isSelectedNodeInSubtree(subtree: Node): boolean {\n        const selectedNode = this.getSelectedNode();\n\n        if (!selectedNode) {\n            return false;\n        } else {\n            return subtree === selectedNode || subtree.isParentOf(selectedNode);\n        }\n    }\n\n    public moveNode(node: Node, targetNode: Node, position: string): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!targetNode) {\n            throw Error(PARAM_IS_EMPTY + \"targetNode\");\n        }\n\n        const positionIndex = getPosition(position);\n\n        if (positionIndex !== undefined) {\n            this.tree.moveNode(node, targetNode, positionIndex);\n            this._refreshElements(null);\n        }\n\n        return this.element;\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        return this.saveStateHandler.getStateFromStorage();\n    }\n\n    public addToSelection(node: Node, mustSetFocus?: boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.addToSelection(node);\n\n        this._getNodeElementForNode(node).select(\n            mustSetFocus === undefined ? true : mustSetFocus,\n        );\n\n        this.saveState();\n\n        return this.element;\n    }\n\n    public getSelectedNodes(): Node[] {\n        return this.selectNodeHandler.getSelectedNodes();\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        return this.selectNodeHandler.isNodeSelected(node);\n    }\n\n    public removeFromSelection(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.removeFromSelection(node);\n\n        this._getNodeElementForNode(node).deselect();\n        this.saveState();\n\n        return this.element;\n    }\n\n    public scrollToNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const nodeTop = jQuery(node.element).offset()?.top ?? 0;\n        const treeTop = this.$el.offset()?.top ?? 0;\n        const top = nodeTop - treeTop;\n\n        this.scrollHandler.scrollToY(top);\n\n        return this.element;\n    }\n\n    public getState(): SavedState | null {\n        return this.saveStateHandler.getState();\n    }\n\n    public setState(state: SavedState): JQuery {\n        this.saveStateHandler.setInitialState(state);\n        this._refreshElements(null);\n\n        return this.element;\n    }\n\n    public setOption(option: string, value: unknown): JQuery {\n        (this.options as unknown as Record<string, unknown>)[option] = value;\n        return this.element;\n    }\n\n    public moveDown(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveDown(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public moveUp(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveUp(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public getVersion(): string {\n        return __version__;\n    }\n\n    public _triggerEvent(\n        eventName: string,\n        values?: Record<string, unknown>,\n    ): JQuery.Event {\n        const event = jQuery.Event(eventName, values);\n        this.element.trigger(event);\n        return event;\n    }\n\n    public _openNode(\n        node: Node,\n        slide = true,\n        onFinished: OnFinishOpenNode | null,\n    ): void {\n        const doOpenNode = (\n            _node: Node,\n            _slide: boolean,\n            _onFinished: OnFinishOpenNode | null,\n        ): void => {\n            const folderElement = new FolderElement(_node, this);\n            folderElement.open(\n                _onFinished,\n                _slide,\n                this.options.animationSpeed,\n            );\n        };\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            if (node.load_on_demand) {\n                this.loadFolderOnDemand(node, slide, onFinished);\n            } else {\n                let parent = node.parent;\n\n                while (parent) {\n                    // nb: do not open root element\n                    if (parent.parent) {\n                        doOpenNode(parent, false, null);\n                    }\n                    parent = parent.parent;\n                }\n\n                doOpenNode(node, slide, onFinished);\n                this.saveState();\n            }\n        }\n    }\n\n    /*\n    Redraw the tree or part of the tree.\n     from_node: redraw this subtree\n    */\n    public _refreshElements(fromNode: Node | null): void {\n        const mustSetFocus = this.selectNodeHandler.isFocusOnTree();\n        const mustSelect = fromNode\n            ? this.isSelectedNodeInSubtree(fromNode)\n            : false;\n\n        this.renderer.render(fromNode);\n\n        if (mustSelect) {\n            this.selectCurrentNode(mustSetFocus);\n        }\n\n        this._triggerEvent(\"tree.refresh\");\n    }\n\n    public _getNodeElementForNode(node: Node): NodeElement {\n        if (node.isFolder()) {\n            return new FolderElement(node, this);\n        } else {\n            return new NodeElement(node, this);\n        }\n    }\n\n    public _getNodeElement($element: JQuery<HTMLElement>): NodeElement | null {\n        const node = this.getNode($element);\n        if (node) {\n            return this._getNodeElementForNode(node);\n        } else {\n            return null;\n        }\n    }\n\n    public _containsElement(element: HTMLElement): boolean {\n        const node = this.getNode(jQuery(element));\n\n        return node != null && node.tree === this.tree;\n    }\n\n    public _getScrollLeft(): number {\n        return this.scrollHandler.getScrollLeft();\n    }\n\n    public init(): void {\n        super.init();\n\n        this.element = this.$el;\n        this.isInitialized = false;\n\n        this.options.rtl = this.getRtlOption();\n\n        if (this.options.closedIcon == null) {\n            this.options.closedIcon = this.getDefaultClosedIcon();\n        }\n\n        this.renderer = new ElementsRenderer(this);\n        this.dataLoader = new DataLoader(this);\n        this.saveStateHandler = new SaveStateHandler(this);\n        this.selectNodeHandler = new SelectNodeHandler(this);\n        this.dndHandler = new DragAndDropHandler(this);\n        this.scrollHandler = new ScrollHandler(this);\n        this.keyHandler = new KeyHandler(this);\n\n        this.initData();\n\n        this.element.on(\"click\", this.handleClick);\n        this.element.on(\"dblclick\", this.handleDblclick);\n\n        if (this.options.useContextMenu) {\n            this.element.on(\"contextmenu\", this.handleContextmenu);\n        }\n    }\n\n    public deinit(): void {\n        this.element.empty();\n        this.element.off();\n\n        this.keyHandler.deinit();\n\n        this.tree = new Node({}, true);\n\n        super.deinit();\n    }\n\n    protected mouseCapture(positionInfo: PositionInfo): boolean | null {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseCapture(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStart(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStart(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseDrag(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            const result = this.dndHandler.mouseDrag(positionInfo);\n\n            this.scrollHandler.checkScrolling(positionInfo);\n            return result;\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStop(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            this.scrollHandler.stopScrolling();\n            return this.dndHandler.mouseStop(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected getMouseDelay(): number {\n        return this.options.startDndDelay ?? 0;\n    }\n\n    private initData(): void {\n        if (this.options.data) {\n            this.doLoadData(this.options.data, null);\n        } else {\n            const dataUrl = this.getDataUrlInfo(null);\n\n            if (dataUrl) {\n                this.doLoadDataFromUrl(null, null, null);\n            } else {\n                this.doLoadData([], null);\n            }\n        }\n    }\n\n    private getDataUrlInfo(node: Node | null): JQuery.AjaxSettings | null {\n        const dataUrl =\n            this.options.dataUrl || (this.element.data(\"url\") as string | null);\n\n        const getUrlFromString = (url: string): JQuery.AjaxSettings => {\n            const urlInfo: JQuery.AjaxSettings = { url };\n\n            setUrlInfoData(urlInfo);\n\n            return urlInfo;\n        };\n\n        const setUrlInfoData = (urlInfo: JQuery.AjaxSettings): void => {\n            if (node?.id) {\n                // Load on demand of a subtree; add node parameter\n                const data = { node: node.id };\n                urlInfo[\"data\"] = data;\n            } else {\n                // Add selected_node parameter\n                const selectedNodeId = this.getNodeIdToBeSelected();\n                if (selectedNodeId) {\n                    const data = { selected_node: selectedNodeId };\n                    urlInfo[\"data\"] = data;\n                }\n            }\n        };\n\n        if (typeof dataUrl === \"function\") {\n            return dataUrl(node);\n        } else if (typeof dataUrl === \"string\") {\n            return getUrlFromString(dataUrl);\n        } else if (dataUrl && typeof dataUrl === \"object\") {\n            setUrlInfoData(dataUrl);\n            return dataUrl;\n        } else {\n            return null;\n        }\n    }\n\n    private getNodeIdToBeSelected(): NodeId | null {\n        if (this.options.saveState) {\n            return this.saveStateHandler.getNodeIdToBeSelected();\n        } else {\n            return null;\n        }\n    }\n\n    private initTree(data: NodeData[]): void {\n        const doInit = (): void => {\n            if (!this.isInitialized) {\n                this.isInitialized = true;\n                this._triggerEvent(\"tree.init\");\n            }\n        };\n\n        if (!this.options.nodeClass) {\n            return;\n        }\n\n        this.tree = new this.options.nodeClass(\n            null,\n            true,\n            this.options.nodeClass,\n        );\n\n        this.selectNodeHandler.clear();\n\n        this.tree.loadFromData(data);\n\n        const mustLoadOnDemand = this.setInitialState();\n\n        this._refreshElements(null);\n\n        if (!mustLoadOnDemand) {\n            doInit();\n        } else {\n            // Load data on demand and then init the tree\n            this.setInitialStateOnDemand(doInit);\n        }\n    }\n\n    // Set initial state, either by restoring the state or auto-opening nodes\n    // result: must load nodes on demand?\n    private setInitialState(): boolean {\n        const restoreState = (): [boolean, boolean] => {\n            // result: is state restored, must load on demand?\n            if (!this.options.saveState) {\n                return [false, false];\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return [false, false];\n                } else {\n                    const mustLoadOnDemand =\n                        this.saveStateHandler.setInitialState(state);\n\n                    // return true: the state is restored\n                    return [true, mustLoadOnDemand];\n                }\n            }\n        };\n\n        const autoOpenNodes = (): boolean => {\n            // result: must load on demand?\n            if (this.options.autoOpen === false) {\n                return false;\n            }\n\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let mustLoadOnDemand = false;\n\n            this.tree.iterate((node: Node, level: number) => {\n                if (node.load_on_demand) {\n                    mustLoadOnDemand = true;\n                    return false;\n                } else if (!node.hasChildren()) {\n                    return false;\n                } else {\n                    node.is_open = true;\n                    return level !== maxLevel;\n                }\n            });\n\n            return mustLoadOnDemand;\n        };\n\n        let [isRestored, mustLoadOnDemand] = restoreState(); // eslint-disable-line prefer-const\n\n        if (!isRestored) {\n            mustLoadOnDemand = autoOpenNodes();\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    // Set the initial state for nodes that are loaded on demand\n    // Call cb_finished when done\n    private setInitialStateOnDemand(cbFinished: () => void): void {\n        const restoreState = (): boolean => {\n            if (!this.options.saveState) {\n                return false;\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return false;\n                } else {\n                    this.saveStateHandler.setInitialStateOnDemand(\n                        state,\n                        cbFinished,\n                    );\n\n                    return true;\n                }\n            }\n        };\n\n        const autoOpenNodes = (): void => {\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let loadingCount = 0;\n\n            const loadAndOpenNode = (node: Node): void => {\n                loadingCount += 1;\n                this._openNode(node, false, () => {\n                    loadingCount -= 1;\n                    openNodes();\n                });\n            };\n\n            const openNodes = (): void => {\n                this.tree.iterate((node: Node, level: number) => {\n                    if (node.load_on_demand) {\n                        if (!node.is_loading) {\n                            loadAndOpenNode(node);\n                        }\n\n                        return false;\n                    } else {\n                        this._openNode(node, false, null);\n\n                        return level !== maxLevel;\n                    }\n                });\n\n                if (loadingCount === 0) {\n                    cbFinished();\n                }\n            };\n\n            openNodes();\n        };\n\n        if (!restoreState()) {\n            autoOpenNodes();\n        }\n    }\n\n    private getAutoOpenMaxLevel(): number {\n        if (this.options.autoOpen === true) {\n            return -1;\n        } else if (typeof this.options.autoOpen === \"number\") {\n            return this.options.autoOpen;\n        } else if (typeof this.options.autoOpen === \"string\") {\n            return parseInt(this.options.autoOpen, 10);\n        } else {\n            return 0;\n        }\n    }\n\n    private handleClick = (\n        e: JQuery.ClickEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget) {\n            if (clickTarget.type === \"button\") {\n                this.toggle(clickTarget.node, this.options.slide);\n\n                e.preventDefault();\n                e.stopPropagation();\n            } else if (clickTarget.type === \"label\") {\n                const node = clickTarget.node;\n                const event = this._triggerEvent(\"tree.click\", {\n                    node,\n                    click_event: e,\n                });\n\n                if (!event.isDefaultPrevented()) {\n                    this.doSelectNode(node);\n                }\n            }\n        }\n    };\n\n    private handleDblclick = (\n        e: JQuery.DoubleClickEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget?.type === \"label\") {\n            this._triggerEvent(\"tree.dblclick\", {\n                node: clickTarget.node,\n                click_event: e,\n            });\n        }\n    };\n\n    private getClickTarget(element: EventTarget): ClickTarget | null {\n        const $target = jQuery(element);\n\n        const $button = $target.closest(\".jqtree-toggler\");\n\n        if ($button.length) {\n            const node = this.getNode($button as JQuery<HTMLElement>);\n\n            if (node) {\n                return {\n                    type: \"button\",\n                    node,\n                };\n            }\n        } else {\n            const $el = $target.closest(\".jqtree-element\");\n            if ($el.length) {\n                const node = this.getNode($el as JQuery<HTMLElement>);\n                if (node) {\n                    return {\n                        type: \"label\",\n                        node,\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    private getNode($element: JQuery<HTMLElement>): null | Node {\n        const $li = $element.closest(\"li.jqtree_common\");\n        if ($li.length === 0) {\n            return null;\n        } else {\n            return $li.data(\"node\") as Node;\n        }\n    }\n\n    private handleContextmenu = (\n        e: JQuery.ContextMenuEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ) => {\n        const $div = jQuery(e.target).closest(\"ul.jqtree-tree .jqtree-element\");\n        if ($div.length) {\n            const node = this.getNode($div);\n            if (node) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                this._triggerEvent(\"tree.contextmenu\", {\n                    node,\n                    click_event: e,\n                });\n                return false;\n            }\n        }\n\n        return null;\n    };\n\n    private saveState(): void {\n        if (this.options.saveState) {\n            this.saveStateHandler.saveState();\n        }\n    }\n\n    private selectCurrentNode(mustSetFocus: boolean): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            const nodeElement = this._getNodeElementForNode(node);\n            if (nodeElement) {\n                nodeElement.select(mustSetFocus);\n            }\n        }\n    }\n\n    private deselectCurrentNode(): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            this.removeFromSelection(node);\n        }\n    }\n\n    private getDefaultClosedIcon(): string {\n        if (this.options.rtl) {\n            // triangle to the left\n            return \"&#x25c0;\";\n        } else {\n            // triangle to the right\n            return \"&#x25ba;\";\n        }\n    }\n\n    private getRtlOption(): boolean {\n        if (this.options.rtl != null) {\n            return this.options.rtl;\n        } else {\n            const dataRtl = this.element.data(\"rtl\") as unknown;\n\n            if (\n                dataRtl !== null &&\n                dataRtl !== false &&\n                dataRtl !== undefined\n            ) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    private doSelectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): void {\n        const saveState = (): void => {\n            if (this.options.saveState) {\n                this.saveStateHandler.saveState();\n            }\n        };\n\n        if (!node) {\n            // Called with empty node -> deselect current node\n            this.deselectCurrentNode();\n            saveState();\n            return;\n        }\n        const defaultOptions = { mustSetFocus: true, mustToggle: true };\n        const selectOptions = { ...defaultOptions, ...(optionsParam || {}) };\n\n        const canSelect = (): boolean => {\n            if (this.options.onCanSelectNode) {\n                return (\n                    this.options.selectable === true &&\n                    this.options.onCanSelectNode(node)\n                );\n            } else {\n                return this.options.selectable === true;\n            }\n        };\n\n        const openParents = (): void => {\n            const parent = node.parent;\n\n            if (parent && parent.parent && !parent.is_open) {\n                this.openNode(parent, false);\n            }\n        };\n\n        if (!canSelect()) {\n            return;\n        }\n\n        if (this.selectNodeHandler.isNodeSelected(node)) {\n            if (selectOptions.mustToggle) {\n                this.deselectCurrentNode();\n                this._triggerEvent(\"tree.select\", {\n                    node: null,\n                    previous_node: node,\n                });\n            }\n        } else {\n            const deselectedNode = this.getSelectedNode() || null;\n            this.deselectCurrentNode();\n            this.addToSelection(node, selectOptions.mustSetFocus);\n\n            this._triggerEvent(\"tree.select\", {\n                node,\n                deselected_node: deselectedNode,\n            });\n            openParents();\n        }\n\n        saveState();\n    }\n\n    private doLoadData(data: NodeData[] | null, parentNode: Node | null): void {\n        if (data) {\n            if (parentNode) {\n                this.deselectNodes(parentNode);\n                this.loadSubtree(data, parentNode);\n            } else {\n                this.initTree(data);\n            }\n\n            if (this.isDragging()) {\n                this.dndHandler.refresh();\n            }\n        }\n\n        this._triggerEvent(\"tree.load_data\", {\n            tree_data: data,\n            parent_node: parentNode,\n        });\n    }\n\n    private deselectNodes(parentNode: Node): void {\n        const selectedNodesUnderParent =\n            this.selectNodeHandler.getSelectedNodesUnder(parentNode);\n        for (const n of selectedNodesUnderParent) {\n            this.selectNodeHandler.removeFromSelection(n);\n        }\n    }\n\n    private loadSubtree(data: NodeData[], parentNode: Node): void {\n        parentNode.loadFromData(data);\n\n        parentNode.load_on_demand = false;\n        parentNode.is_loading = false;\n\n        this._refreshElements(parentNode);\n    }\n\n    private doLoadDataFromUrl(\n        urlInfoParam: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null,\n    ): void {\n        const urlInfo = urlInfoParam || this.getDataUrlInfo(parentNode);\n\n        this.dataLoader.loadFromUrl(urlInfo, parentNode, onFinished);\n    }\n\n    private loadFolderOnDemand(\n        node: Node,\n        slide = true,\n        onFinished: OnFinishOpenNode | null,\n    ): void {\n        node.is_loading = true;\n\n        this.doLoadDataFromUrl(null, node, () => {\n            this._openNode(node, slide, onFinished);\n        });\n    }\n}\n\nSimpleWidget.register(JqTreeWidget, \"tree\");\n"],"names":["Position","positionNames","before","Before","after","After","inside","Inside","none","None","getPositionName","position","name","Object","prototype","hasOwnProperty","call","isNodeRecordWithChildren","data","_typeof","Array","Node","o","arguments","length","undefined","isRoot","nodeClass","_classCallCheck","_defineProperty","this","isEmptyFolder","load_on_demand","setData","children","parent","idMapping","Map","tree","_createClass","key","value","removeChildren","_step","_iterator","_createForOfIteratorHelper","s","n","done","node","createNode","addChild","loadFromData","err","e","f","push","setParent","index","splice","doRemoveChild","indexOf","hasChildren","callback","_iterate","level","_step2","_iterator2","child","movedNode","targetNode","isParentOf","addChildAtPosition","getChildIndex","getDataFromNodes","nodes","map","tmpNode","k","v","getNodeByCallback","concat","result","iterate","nodeInfo","childIndex","newParent","_step3","originalParent","_iterator3","removeChild","nodeId","get","id","set","_this","_this$tree","removeNodeFromIndex","previousIndex","nextIndex","filter","nextSibling","getNextSibling","getNextNode","is_open","previousSibling","getPreviousSibling","getLastChild","getParent","lastChild","nodeData","_this2","addChildren","childrenData","_step4","_iterator4","initFromData","_this$tree2","addNodeToIndex","_this$tree3","_this$tree4","getNodeClass","DragElement","nodeName","offsetX","offsetY","$tree","autoEscape","$element","jQuery","addClass","text","html","css","append","pageX","pageY","offset","left","top","remove","getBoolString","getOffsetTop","element","getBoundingClientRect","y","window","scrollY","HitAreasGenerator","_VisibleNodeIterator","_inherits","_super","_createSuper","currentNode","treeBottom","_assertThisInitialized","positions","lastTop","generateHitAreas","_positions$0$top","_positions$","previousTop","group","hitAreas","generateHitAreasForGroup","addPosition","nextNode","area","bottom","positionsInGroup","positionCount","Math","min","areaHeight","round","areaTop","i","VisibleNodeIterator","isFirstNode","_iterateNode","_node$element","mustIterateInside","offsetParent","handleFirstNode","handleOpenFolder","handleClosedFolder","handleNode","childrenLength","forEach","_","nextChild","handleAfterOpenFolder","DragAndDropHandler","treeWidget","hoveredArea","isDragging","currentItem","positionInfo","target","mustCaptureElement","options","onIsMoveHandle","nodeElement","_getNodeElement","onCanMove","_this$treeWidget$opti","refresh","dragElement","classList","add","move","findHoveredArea","canMoveToArea","isFolder","stopOpenFolderTimer","mustOpenFolderTimer","startOpenFolderTimer","updateDropHint","removeDropHint","onDragMove","originalEvent","moveItem","clear","removeHover","removeHitAreas","onDragStop","_getNodeElementForNode","hitAreasGenerator","getTreeDimensions","generate","is","onCanMoveTo","positionName","previousGhost","x","dimensions","right","low","high","mid","addDropHint","folder","openFolderDelay","openFolderTimer","setTimeout","_openNode","slide","clearTimeout","previousParent","doMove","moveNode","empty","_refreshElements","_triggerEvent","move_info","moved_node","target_node","previous_parent","do_move","original_event","isDefaultPrevented","el","width","height","_getScrollLeft","ElementsRenderer","openedIconElement","createButtonElement","openedIcon","closedIconElement","closedIcon","fromNode","renderFromNode","renderFromRoot","createDomElements","$previousLi","li","createLi","getLevel","attachNodeData","isRootNode","ul","createUl","appendChild","classString","role","rtl","dragAndDrop","document","createElement","className","setAttribute","isSelected","Boolean","selectNodeHandler","isNodeSelected","showEmptyFolder","createFolderLi","createNodeLi","onCreateLi","buttonClasses","getButtonClasses","folderClasses","getFolderClasses","iconElement","div","buttonLink","cloneNode","buttonLeft","titleSpan","createTitleSpan","liClasses","join","classes","tabIndex","setTreeItemAriaAttributes","textContent","innerHTML","is_loading","createTextNode","nodeType","DataLoader","urlInfo","parentNode","onFinished","$el","getDomElement","addLoadingClass","notifyLoading","stopLoading","removeLoadingClass","submitRequest","loadData","parseData","jqXHR","onLoadFailed","removeClass","isLoading","onLoading","urlInfoInput","handleSuccess","handleError","_ajaxSettings$method","ajaxSettings","_objectSpread","method","cache","dataType","success","error","url","toUpperCase","ajax","dataFilter","parsedData","JSON","parse","KeyHandler","canHandleKeyboard","selectedNode","getSelectedNode","which","DOWN","moveDown","UP","moveUp","RIGHT","moveRight","LEFT","moveLeft","keyboardSupport","on","handleKeyDown","off","selectNode","getNextVisibleNode","getPreviousVisibleNode","openNode","closeNode","isFocusOnTree","register","widgetClass","widgetName","getDataKey","getWidgetData","dataKey","widget","SimpleWidget","createWidget","init","fn","argument1","functionName","destroy","removeData","destroyWidget","_len","args","_key","widgetFunction","apply","callFunction","defaults","constructor","deinit","getPositionInfoFromMouseEvent","getPositionInfoFromTouch","touch","MouseWidget","_SimpleWidget","button","handleMouseDown","cancelable","preventDefault","handleMouseMove","handleMouseUp","touches","changedTouches","addEventListener","mouseDown","passive","touchStart","isMouseStarted","mouseDelayTimer","isMouseDelayMet","mouseDownInfo","removeEventListener","removeMouseMoveEventListeners","mouseCapture","handleStartMouse","mouseMove","touchMove","mouseUp","touchEnd","mouseDelay","getMouseDelay","startMouseDelayTimer","mouseDrag","mouseStart","mouseStop","SaveStateHandler","state","stringify","getState","onSetStateFromStorage","supportsLocalStorage","localStorage","setItem","getKeyName","jsonData","loadFromStorage","parseState","selectedNodeIds","openNodes","open_nodes","selected_node","getSelectedNodes","mustLoadOnDemand","openInitialNodes","resetSelection","selectInitialNodes","cbFinished","doSetInitialStateOnDemand","getStateFromStorage","onGetStateFromStorage","getItem","nodeIds","getNodeById","selectCount","addToSelection","removeFromSelection","nodeIdsParam","selectedNodes","loadingCount","newNodesIds","loadAndOpenNode","saveState","_supportsLocalStorage","sessionStorage","removeItem","testSupport","ContainerScrollParent","_ref","$container","refreshHitAreas","newHorizontalScrollDirection","getNewHorizontalScrollDirection","horizontalScrollDirection","horizontalScrollTimeout","verticalScrollTimeout","scrollHorizontally","bind","newVerticalScrollDirection","getNewVerticalScrollDirection","verticalScrollDirection","scrollVertically","scrollLeft","scrollTop","scrollParentTop","scrollParentBottom","scrollParentOffset","container","rightEdge","clientWidth","leftEdge","getScrollParentTop","getScrollParentBottom","distance","scrollBy","behavior","_this$$container$offs","_this$$container$inne","innerHeight","DocumentScrollParent","documentElement","treeTop","documentScrollHeight","documentScrollWidth","isNearLeftEdge","canScrollRight","getDocumentScrollWidth","clientHeight","getDocumentScrollHeight","scrollHeight","scrollWidth","canScrollDown","hasOverFlow","_i","_arr","attr","overflowValue","createScrollParent","$treeElement","_$container$","parents","getParentWithOverflow","tagName","ScrollHandler","scrollParent","checkVerticalScrolling","checkHorizontalScrolling","getScrollParent","stopScrolling","scrollToY","getScrollLeft","SelectNodeHandler","Set","selectedSingleNode","has","includeChildren","activeElement","_containsElement","BorderDropHint","querySelector","max","offsetWidth","hint","style","_this$hint","GhostDropHint","ghost","createGhostElement","moveAfter","moveBefore","moveInsideOpenFolder","moveInside","_this$node$children$","childElement","circleSpan","lineSpan","NodeElement","mustShowBorderDropHint","mustSetFocus","getTitleSpan","toString","focus","removeAttribute","blur","FolderElement","_NodeElement","animationSpeed","getButton","renderer","icon","doOpen","getUl","slideDown","show","doClose","slideUp","hide","NODE_PARAM_IS_EMPTY","PARAM_IS_EMPTY","JqTreeWidget","_MouseWidget","clickTarget","getClickTarget","type","toggle","stopPropagation","click_event","doSelectNode","$div","closest","getNode","slideParam","Error","optionsParam","getData","doLoadData","param1","param2","param3","doLoadDataFromUrl","getNodeByName","getNodeByNameMustExist","getNodesByProperty","_parseParams","_this2$options$slide","parseParams","_parseParams2","_slicedToArray","close","dndHandler","newNodeInfo","existingNode","newNode","addAfter","addBefore","addParent","parentNodeParam","prepend","idIsChanged","subtree","positionIndex","saveStateHandler","select","deselect","_jQuery$offset$top","_jQuery$offset","_this$$el$offset$top","_this$$el$offset","scrollHandler","setInitialState","option","keyHandler","eventName","values","event","Event","trigger","_this3","doOpenNode","_node","_slide","_onFinished","open","loadFolderOnDemand","mustSelect","isSelectedNodeInSubtree","render","selectCurrentNode","_get","_getPrototypeOf","isInitialized","getRtlOption","getDefaultClosedIcon","dataLoader","initData","handleClick","handleDblclick","useContextMenu","handleContextmenu","checkScrolling","_this$options$startDn","startDndDelay","getDataUrlInfo","_this4","dataUrl","setUrlInfoData","selectedNodeId","getNodeIdToBeSelected","_this5","doInit","setInitialStateOnDemand","_this6","_restoreState2","restoreState","isRestored","autoOpen","maxLevel","getAutoOpenMaxLevel","autoOpenNodes","_this7","parseInt","$target","$button","$li","dataRtl","_this8","deselectCurrentNode","selectOptions","mustToggle","onCanSelectNode","selectable","previous_node","deselectedNode","deselected_node","deselectNodes","loadSubtree","initTree","tree_data","parent_node","getSelectedNodesUnder","urlInfoParam","loadFromUrl","_this9"],"mappings":"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"}