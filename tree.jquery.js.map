{"version":3,"file":"tree.jquery.js","sources":["src/version.ts","src/node.ts","src/dragAndDropHandler.ts","src/util.ts","src/elementsRenderer.ts","src/dataLoader.ts","src/keyHandler.ts","src/simple.widget.ts","src/mouse.widget.ts","src/saveStateHandler.ts","src/scrollHandler.ts","src/selectNodeHandler.ts","src/nodeElement.ts","src/tree.jquery.ts"],"sourcesContent":["const version = \"1.7.1\";\n\nexport default version;\n","interface NodeRecordWithChildren extends NodeRecord {\n    children: NodeData[];\n}\n\nexport enum Position {\n    Before = 1,\n    After,\n    Inside,\n    None,\n}\n\nconst positionNames: Record<string, Position> = {\n    before: Position.Before,\n    after: Position.After,\n    inside: Position.Inside,\n    none: Position.None,\n};\n\ntype IterateCallback = (node: Node, level: number) => boolean;\n\nexport const getPositionName = (position: Position): string => {\n    for (const name in positionNames) {\n        if (Object.prototype.hasOwnProperty.call(positionNames, name)) {\n            if (positionNames[name] === position) {\n                return name;\n            }\n        }\n    }\n\n    return \"\";\n};\n\nexport const getPosition = (name: string): Position | undefined =>\n    positionNames[name];\n\nconst isNodeRecordWithChildren = (\n    data: NodeData\n): data is NodeRecordWithChildren =>\n    typeof data === \"object\" &&\n    \"children\" in data &&\n    data[\"children\"] instanceof Array;\n\nexport class Node implements INode {\n    public id?: NodeId;\n    public name: string;\n    public children: Node[];\n    public parent: Node | null;\n    public idMapping: Map<NodeId, Node>;\n    public tree?: Node;\n    public nodeClass?: typeof Node;\n    public load_on_demand: boolean;\n    public is_open: boolean;\n    public element: HTMLElement;\n    public is_loading: boolean;\n    public isEmptyFolder: boolean;\n\n    [key: string]: unknown;\n\n    constructor(o: NodeData | null = null, isRoot = false, nodeClass = Node) {\n        this.name = \"\";\n        this.isEmptyFolder = false;\n        this.load_on_demand = false;\n\n        this.setData(o);\n\n        this.children = [];\n        this.parent = null;\n\n        if (isRoot) {\n            this.idMapping = new Map<NodeId, Node>();\n            this.tree = this;\n            this.nodeClass = nodeClass;\n        }\n    }\n\n    /*\n    Set the data of this node.\n\n    setData(string): set the name of the node\n    setdata(object): set attributes of the node\n\n    Examples:\n        setdata('node1')\n\n        setData({ name: 'node1', id: 1});\n\n        setData({ name: 'node2', id: 2, color: 'green'});\n\n    * This is an internal function; it is not in the docs\n    * Does not remove existing node values\n    */\n    public setData(o: NodeData | null): void {\n        if (!o) {\n            return;\n        } else if (typeof o === \"string\") {\n            this.name = o;\n        } else if (typeof o === \"object\") {\n            for (const key in o) {\n                if (Object.prototype.hasOwnProperty.call(o, key)) {\n                    const value = o[key];\n\n                    if (key === \"label\" || key === \"name\") {\n                        // You can use the 'label' key instead of 'name'; this is a legacy feature\n                        if (typeof value === \"string\") {\n                            this.name = value;\n                        }\n                    } else if (key !== \"children\" && key !== \"parent\") {\n                        // You can't update the children or the parent using this function\n                        this[key] = value;\n                    }\n                }\n            }\n        }\n    }\n\n    /*\n    Create tree from data.\n\n    Structure of data is:\n    [\n        {\n            name: 'node1',\n            children: [\n                { name: 'child1' },\n                { name: 'child2' }\n            ]\n        },\n        {\n            name: 'node2'\n        }\n    ]\n    */\n    public loadFromData(data: NodeData[]): Node {\n        this.removeChildren();\n\n        for (const o of data) {\n            const node = this.createNode(o);\n            this.addChild(node);\n\n            if (isNodeRecordWithChildren(o)) {\n                if (o.children.length === 0) {\n                    node.isEmptyFolder = true;\n                } else {\n                    node.loadFromData(o.children);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /*\n    Add child.\n\n    tree.addChild(\n        new Node('child1')\n    );\n    */\n    public addChild(node: Node): void {\n        this.children.push(node);\n        node.setParent(this);\n    }\n\n    /*\n    Add child at position. Index starts at 0.\n\n    tree.addChildAtPosition(\n        new Node('abc'),\n        1\n    );\n    */\n    public addChildAtPosition(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        node.setParent(this);\n    }\n\n    /*\n    Remove child. This also removes the children of the node.\n\n    tree.removeChild(tree.children[0]);\n    */\n    public removeChild(node: Node): void {\n        // remove children from the index\n        node.removeChildren();\n\n        this.doRemoveChild(node);\n    }\n\n    /*\n    Get child index.\n\n    var index = getChildIndex(node);\n    */\n    public getChildIndex(node: Node): number {\n        return this.children.indexOf(node);\n    }\n\n    /*\n    Does the tree have children?\n\n    if (tree.hasChildren()) {\n        //\n    }\n    */\n    public hasChildren(): boolean {\n        return this.children.length !== 0;\n    }\n\n    public isFolder(): boolean {\n        return this.hasChildren() || this.load_on_demand;\n    }\n\n    /*\n    Iterate over all the nodes in the tree.\n\n    Calls callback with (node, level).\n\n    The callback must return true to continue the iteration on current node.\n\n    tree.iterate(\n        function(node, level) {\n           console.log(node.name);\n\n           // stop iteration after level 2\n           return (level <= 2);\n        }\n    );\n\n    */\n    public iterate(callback: IterateCallback): void {\n        const _iterate = (node: Node, level: number): void => {\n            if (node.children) {\n                for (const child of node.children) {\n                    const result = callback(child, level);\n\n                    if (result && child.hasChildren()) {\n                        _iterate(child, level + 1);\n                    }\n                }\n            }\n        };\n\n        _iterate(this, 0);\n    }\n\n    /*\n    Move node relative to another node.\n\n    Argument position: Position.BEFORE, Position.AFTER or Position.Inside\n\n    // move node1 after node2\n    tree.moveNode(node1, node2, Position.AFTER);\n    */\n    public moveNode(\n        movedNode: Node,\n        targetNode: Node,\n        position: Position\n    ): boolean {\n        if (!movedNode.parent || movedNode.isParentOf(targetNode)) {\n            // - Node is parent of target node\n            // - Or, parent is empty\n            return false;\n        } else {\n            movedNode.parent.doRemoveChild(movedNode);\n\n            switch (position) {\n                case Position.After: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode) + 1\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Before: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode)\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Inside: {\n                    // move inside as first child\n                    targetNode.addChildAtPosition(movedNode, 0);\n                    return true;\n                }\n\n                default:\n                    return false;\n            }\n        }\n    }\n\n    /*\n    Get the tree as data.\n    */\n    public getData(includeParent = false): NodeRecord[] {\n        const getDataFromNodes = (nodes: Node[]): Record<string, unknown>[] => {\n            return nodes.map((node) => {\n                const tmpNode: Record<string, unknown> = {};\n\n                for (const k in node) {\n                    if (\n                        [\n                            \"parent\",\n                            \"children\",\n                            \"element\",\n                            \"idMapping\",\n                            \"load_on_demand\",\n                            \"nodeClass\",\n                            \"tree\",\n                            \"isEmptyFolder\",\n                        ].indexOf(k) === -1 &&\n                        Object.prototype.hasOwnProperty.call(node, k)\n                    ) {\n                        const v = node[k];\n                        tmpNode[k] = v;\n                    }\n                }\n\n                if (node.hasChildren()) {\n                    tmpNode[\"children\"] = getDataFromNodes(node.children);\n                }\n\n                return tmpNode;\n            });\n        };\n\n        if (includeParent) {\n            return getDataFromNodes([this]);\n        } else {\n            return getDataFromNodes(this.children);\n        }\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.getNodeByCallback((node: Node) => node.name === name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        const node = this.getNodeByCallback((n: Node) => n.name === name);\n\n        if (!node) {\n            throw `Node with name ${name} not found`;\n        }\n\n        return node;\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        let result: Node | null = null;\n\n        this.iterate((node: Node) => {\n            if (result) {\n                return false;\n            } else if (callback(node)) {\n                result = node;\n                return false;\n            } else {\n                return true;\n            }\n        });\n\n        return result;\n    }\n\n    public addAfter(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex + 1);\n\n            if (\n                isNodeRecordWithChildren(nodeInfo) &&\n                nodeInfo.children.length\n            ) {\n                node.loadFromData(nodeInfo.children);\n            }\n\n            return node;\n        }\n    }\n\n    public addBefore(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex);\n\n            if (\n                isNodeRecordWithChildren(nodeInfo) &&\n                nodeInfo.children.length\n            ) {\n                node.loadFromData(nodeInfo.children);\n            }\n\n            return node;\n        }\n    }\n\n    public addParent(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const newParent = this.createNode(nodeInfo);\n\n            if (this.tree) {\n                newParent.setParent(this.tree);\n            }\n            const originalParent = this.parent;\n\n            for (const child of originalParent.children) {\n                newParent.addChild(child);\n            }\n\n            originalParent.children = [];\n            originalParent.addChild(newParent);\n            return newParent;\n        }\n    }\n\n    public remove(): void {\n        if (this.parent) {\n            this.parent.removeChild(this);\n            this.parent = null;\n        }\n    }\n\n    public append(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChild(node);\n\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            node.loadFromData(nodeInfo.children);\n        }\n\n        return node;\n    }\n\n    public prepend(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChildAtPosition(node, 0);\n\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            node.loadFromData(nodeInfo.children);\n        }\n\n        return node;\n    }\n\n    public isParentOf(node: Node): boolean {\n        let parent = node.parent;\n\n        while (parent) {\n            if (parent === this) {\n                return true;\n            }\n\n            parent = parent.parent;\n        }\n\n        return false;\n    }\n\n    public getLevel(): number {\n        let level = 0;\n        let node: Node = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n        while (node.parent) {\n            level += 1;\n            node = node.parent;\n        }\n\n        return level;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.idMapping.get(nodeId) || null;\n    }\n\n    public addNodeToIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.set(node.id, node);\n        }\n    }\n\n    public removeNodeFromIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.delete(node.id);\n        }\n    }\n\n    public removeChildren(): void {\n        this.iterate((child: Node) => {\n            this.tree?.removeNodeFromIndex(child);\n            return true;\n        });\n\n        this.children = [];\n    }\n\n    public getPreviousSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousIndex = this.parent.getChildIndex(this) - 1;\n            if (previousIndex >= 0) {\n                return this.parent.children[previousIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNextSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const nextIndex = this.parent.getChildIndex(this) + 1;\n            if (nextIndex < this.parent.children.length) {\n                return this.parent.children[nextIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.filter((node: Node) => node[key] === value);\n    }\n\n    public filter(f: (node: Node) => boolean): Node[] {\n        const result: Node[] = [];\n\n        this.iterate((node: Node) => {\n            if (f(node)) {\n                result.push(node);\n            }\n\n            return true;\n        });\n\n        return result;\n    }\n\n    public getNextNode(includeChildren = true): Node | null {\n        if (includeChildren && this.hasChildren()) {\n            return this.children[0] || null;\n        } else if (!this.parent) {\n            return null;\n        } else {\n            const nextSibling = this.getNextSibling();\n\n            if (nextSibling) {\n                return nextSibling;\n            } else {\n                return this.parent.getNextNode(false);\n            }\n        }\n    }\n\n    public getNextVisibleNode(): Node | null {\n        if (this.hasChildren() && this.is_open) {\n            // First child\n            return this.children[0] || null;\n        } else {\n            if (!this.parent) {\n                return null;\n            } else {\n                const nextSibling = this.getNextSibling();\n                if (nextSibling) {\n                    // Next sibling\n                    return nextSibling;\n                } else {\n                    // Next node of parent\n                    return this.parent.getNextNode(false);\n                }\n            }\n        }\n    }\n\n    public getPreviousNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (previousSibling.hasChildren()) {\n                return previousSibling.getLastChild();\n            } else {\n                return previousSibling;\n            }\n        }\n    }\n\n    public getPreviousVisibleNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (\n                !previousSibling.hasChildren() ||\n                !previousSibling.is_open\n            ) {\n                // Previous sibling\n                return previousSibling;\n            } else {\n                // Last child of previous sibling\n                return previousSibling.getLastChild();\n            }\n        }\n    }\n\n    public getParent(): Node | null {\n        // Return parent except if it is the root node\n        if (!this.parent) {\n            return null;\n        } else if (!this.parent.parent) {\n            // Root node -> null\n            return null;\n        } else {\n            return this.parent;\n        }\n    }\n\n    public getLastChild(): Node | null {\n        if (!this.hasChildren()) {\n            return null;\n        } else {\n            const lastChild = this.children[this.children.length - 1];\n\n            if (!lastChild) {\n                return null;\n            }\n\n            if (!(lastChild.hasChildren() && lastChild.is_open)) {\n                return lastChild;\n            } else {\n                return lastChild?.getLastChild();\n            }\n        }\n    }\n\n    // Init Node from data without making it the root of the tree\n    public initFromData(data: NodeData): void {\n        const addNode = (nodeData: NodeData): void => {\n            this.setData(nodeData);\n\n            if (\n                isNodeRecordWithChildren(nodeData) &&\n                nodeData.children.length\n            ) {\n                addChildren(nodeData.children);\n            }\n        };\n\n        const addChildren = (childrenData: NodeData[]): void => {\n            for (const child of childrenData) {\n                const node = this.createNode();\n                node.initFromData(child);\n                this.addChild(node);\n            }\n        };\n\n        addNode(data);\n    }\n\n    private setParent(parent: Node): void {\n        this.parent = parent;\n        this.tree = parent.tree;\n        this.tree?.addNodeToIndex(this);\n    }\n\n    private doRemoveChild(node: Node): void {\n        this.children.splice(this.getChildIndex(node), 1);\n        this.tree?.removeNodeFromIndex(node);\n    }\n\n    private getNodeClass(): typeof Node {\n        return this.nodeClass || this?.tree?.nodeClass || Node;\n    }\n\n    private createNode(nodeData?: NodeData): Node {\n        const nodeClass = this.getNodeClass();\n        return new nodeClass(nodeData);\n    }\n}\n","import { getPositionName, Node, Position } from \"./node\";\nimport { DropHint, HitArea, PositionInfo } from \"./types\";\nimport { NodeElement } from \"./nodeElement\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\ninterface Dimensions {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n}\n\nexport class DragAndDropHandler {\n    public hitAreas: HitArea[];\n    public isDragging: boolean;\n    public currentItem: NodeElement | null;\n    public hoveredArea: HitArea | null;\n    public positionInfo: PositionInfo | null;\n\n    private treeWidget: JqTreeWidget;\n    private dragElement: DragElement | null;\n    private previousGhost: DropHint | null;\n    private openFolderTimer: number | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        this.hoveredArea = null;\n        this.hitAreas = [];\n        this.isDragging = false;\n        this.currentItem = null;\n        this.positionInfo = null;\n    }\n\n    public mouseCapture(positionInfo: PositionInfo): boolean | null {\n        const $element = jQuery(positionInfo.target);\n\n        if (!this.mustCaptureElement($element)) {\n            return null;\n        }\n\n        if (\n            this.treeWidget.options.onIsMoveHandle &&\n            !this.treeWidget.options.onIsMoveHandle($element)\n        ) {\n            return null;\n        }\n\n        let nodeElement = this.treeWidget._getNodeElement($element);\n\n        if (nodeElement && this.treeWidget.options.onCanMove) {\n            if (!this.treeWidget.options.onCanMove(nodeElement.node)) {\n                nodeElement = null;\n            }\n        }\n\n        this.currentItem = nodeElement;\n        return this.currentItem != null;\n    }\n\n    public mouseStart(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.refresh();\n\n        const offset = jQuery(positionInfo.target).offset();\n        const left = offset ? offset.left : 0;\n        const top = offset ? offset.top : 0;\n\n        const node = this.currentItem.node;\n\n        this.dragElement = new DragElement(\n            node.name,\n            positionInfo.pageX - left,\n            positionInfo.pageY - top,\n            this.treeWidget.element,\n            this.treeWidget.options.autoEscape ?? true,\n        );\n\n        this.isDragging = true;\n        this.positionInfo = positionInfo;\n        this.currentItem.element.classList.add(\"jqtree-moving\");\n        return true;\n    }\n\n    public mouseDrag(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            !this.dragElement ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.dragElement.move(positionInfo.pageX, positionInfo.pageY);\n        this.positionInfo = positionInfo;\n\n        const area = this.findHoveredArea(\n            positionInfo.pageX,\n            positionInfo.pageY,\n        );\n\n        if (area && this.canMoveToArea(area)) {\n            if (!area.node.isFolder()) {\n                this.stopOpenFolderTimer();\n            }\n\n            if (this.hoveredArea !== area) {\n                this.hoveredArea = area;\n\n                // If this is a closed folder, start timer to open it\n                if (this.mustOpenFolderTimer(area)) {\n                    this.startOpenFolderTimer(area.node);\n                } else {\n                    this.stopOpenFolderTimer();\n                }\n\n                this.updateDropHint();\n            }\n        } else {\n            this.removeDropHint();\n            this.stopOpenFolderTimer();\n            this.hoveredArea = area;\n        }\n\n        if (!area) {\n            if (this.treeWidget.options.onDragMove) {\n                this.treeWidget.options.onDragMove(\n                    this.currentItem.node,\n                    positionInfo.originalEvent,\n                );\n            }\n        }\n\n        return true;\n    }\n\n    public mouseStop(positionInfo: PositionInfo): boolean {\n        this.moveItem(positionInfo);\n        this.clear();\n        this.removeHover();\n        this.removeDropHint();\n        this.removeHitAreas();\n\n        const currentItem = this.currentItem;\n\n        if (this.currentItem) {\n            this.currentItem.element.classList.remove(\"jqtree-moving\");\n            this.currentItem = null;\n        }\n\n        this.isDragging = false;\n        this.positionInfo = null;\n\n        if (!this.hoveredArea && currentItem) {\n            if (this.treeWidget.options.onDragStop) {\n                this.treeWidget.options.onDragStop(\n                    currentItem.node,\n                    positionInfo.originalEvent,\n                );\n            }\n        }\n\n        return false;\n    }\n\n    public refresh(): void {\n        this.removeHitAreas();\n\n        if (this.currentItem) {\n            this.generateHitAreas();\n\n            this.currentItem = this.treeWidget._getNodeElementForNode(\n                this.currentItem.node,\n            );\n\n            if (this.isDragging) {\n                this.currentItem.element.classList.add(\"jqtree-moving\");\n            }\n        }\n    }\n\n    private generateHitAreas(): void {\n        if (!this.currentItem) {\n            this.hitAreas = [];\n        } else {\n            const hitAreasGenerator = new HitAreasGenerator(\n                this.treeWidget.tree,\n                this.currentItem.node,\n                this.getTreeDimensions().bottom,\n            );\n            this.hitAreas = hitAreasGenerator.generate();\n        }\n    }\n\n    private mustCaptureElement($element: JQuery<HTMLElement>): boolean {\n        return !$element.is(\"input,select,textarea\");\n    }\n\n    private canMoveToArea(area: HitArea): boolean {\n        if (!this.treeWidget.options.onCanMoveTo) {\n            return true;\n        }\n\n        if (!this.currentItem) {\n            return false;\n        }\n\n        const positionName = getPositionName(area.position);\n\n        return this.treeWidget.options.onCanMoveTo(\n            this.currentItem.node,\n            area.node,\n            positionName,\n        );\n    }\n\n    private removeHitAreas(): void {\n        this.hitAreas = [];\n    }\n\n    private clear(): void {\n        if (this.dragElement) {\n            this.dragElement.remove();\n            this.dragElement = null;\n        }\n    }\n\n    private removeDropHint(): void {\n        if (this.previousGhost) {\n            this.previousGhost.remove();\n        }\n    }\n\n    private removeHover(): void {\n        this.hoveredArea = null;\n    }\n\n    private findHoveredArea(x: number, y: number): HitArea | null {\n        const dimensions = this.getTreeDimensions();\n\n        if (\n            x < dimensions.left ||\n            y < dimensions.top ||\n            x > dimensions.right ||\n            y > dimensions.bottom\n        ) {\n            return null;\n        }\n\n        let low = 0;\n        let high = this.hitAreas.length;\n        while (low < high) {\n            const mid = (low + high) >> 1;\n            const area = this.hitAreas[mid];\n\n            if (!area) {\n                return null;\n            }\n\n            if (y < area.top) {\n                high = mid;\n            } else if (y > area.bottom) {\n                low = mid + 1;\n            } else {\n                return area;\n            }\n        }\n\n        return null;\n    }\n\n    private mustOpenFolderTimer(area: HitArea): boolean {\n        const node = area.node;\n\n        return (\n            node.isFolder() &&\n            !node.is_open &&\n            area.position === Position.Inside\n        );\n    }\n\n    private updateDropHint(): void {\n        if (!this.hoveredArea) {\n            return;\n        }\n\n        // remove previous drop hint\n        this.removeDropHint();\n\n        // add new drop hint\n        const nodeElement = this.treeWidget._getNodeElementForNode(\n            this.hoveredArea.node,\n        );\n        this.previousGhost = nodeElement.addDropHint(this.hoveredArea.position);\n    }\n\n    private startOpenFolderTimer(folder: Node): void {\n        const openFolder = (): void => {\n            this.treeWidget._openNode(\n                folder,\n                this.treeWidget.options.slide,\n                () => {\n                    this.refresh();\n                    this.updateDropHint();\n                },\n            );\n        };\n\n        this.stopOpenFolderTimer();\n\n        const openFolderDelay = this.treeWidget.options.openFolderDelay;\n\n        if (openFolderDelay !== false) {\n            this.openFolderTimer = window.setTimeout(\n                openFolder,\n                openFolderDelay,\n            );\n        }\n    }\n\n    private stopOpenFolderTimer(): void {\n        if (this.openFolderTimer) {\n            clearTimeout(this.openFolderTimer);\n            this.openFolderTimer = null;\n        }\n    }\n\n    private moveItem(positionInfo: PositionInfo): void {\n        if (\n            this.currentItem &&\n            this.hoveredArea &&\n            this.hoveredArea.position !== Position.None &&\n            this.canMoveToArea(this.hoveredArea)\n        ) {\n            const movedNode = this.currentItem.node;\n            const targetNode = this.hoveredArea.node;\n            const position = this.hoveredArea.position;\n            const previousParent = movedNode.parent;\n\n            if (position === Position.Inside) {\n                this.hoveredArea.node.is_open = true;\n            }\n\n            const doMove = (): void => {\n                this.treeWidget.tree.moveNode(movedNode, targetNode, position);\n                this.treeWidget.element.empty();\n                this.treeWidget._refreshElements(null);\n            };\n\n            const event = this.treeWidget._triggerEvent(\"tree.move\", {\n                move_info: {\n                    moved_node: movedNode,\n                    target_node: targetNode,\n                    position: getPositionName(position),\n                    previous_parent: previousParent,\n                    do_move: doMove,\n                    original_event: positionInfo.originalEvent,\n                },\n            });\n\n            if (!event.isDefaultPrevented()) {\n                doMove();\n            }\n        }\n    }\n\n    private getTreeDimensions(): Dimensions {\n        // Return the dimensions of the tree. Add a margin to the bottom to allow\n        // to drag-and-drop after the last element.\n        const offset = this.treeWidget.element.offset();\n\n        if (!offset) {\n            return { left: 0, top: 0, right: 0, bottom: 0 };\n        } else {\n            const el = this.treeWidget.element;\n            const width = el.width() || 0;\n            const height = el.height() || 0;\n            const left = offset.left + this.treeWidget._getScrollLeft();\n\n            return {\n                left,\n                top: offset.top,\n                right: left + width,\n                bottom: offset.top + height + 16,\n            };\n        }\n    }\n}\n\nabstract class VisibleNodeIterator {\n    private tree: Node;\n\n    constructor(tree: Node) {\n        this.tree = tree;\n    }\n\n    protected iterate(): void {\n        let isFirstNode = true;\n\n        const _iterateNode = (node: Node, nextNode: Node | null): void => {\n            let mustIterateInside =\n                (node.is_open || !node.element) && node.hasChildren();\n\n            let $element: JQuery<HTMLElement> | null = null;\n\n            if (node.element) {\n                $element = jQuery(node.element);\n\n                if (!$element.is(\":visible\")) {\n                    return;\n                }\n\n                if (isFirstNode) {\n                    this.handleFirstNode(node);\n                    isFirstNode = false;\n                }\n\n                if (!node.hasChildren()) {\n                    this.handleNode(node, nextNode, $element);\n                } else if (node.is_open) {\n                    if (!this.handleOpenFolder(node, $element)) {\n                        mustIterateInside = false;\n                    }\n                } else {\n                    this.handleClosedFolder(node, nextNode, $element);\n                }\n            }\n\n            if (mustIterateInside) {\n                const childrenLength = node.children.length;\n                node.children.forEach((_, i) => {\n                    const child = node.children[i];\n\n                    if (child) {\n                        if (i === childrenLength - 1) {\n                            _iterateNode(child, null);\n                        } else {\n                            const nextChild = node.children[i + 1];\n\n                            if (nextChild) {\n                                _iterateNode(child, nextChild);\n                            }\n                        }\n                    }\n                });\n\n                if (node.is_open && $element) {\n                    this.handleAfterOpenFolder(node, nextNode);\n                }\n            }\n        };\n\n        _iterateNode(this.tree, null);\n    }\n\n    protected abstract handleNode(\n        node: Node,\n        nextNode: Node | null,\n        $element: JQuery,\n    ): void;\n\n    /*\n    override\n    return\n        - true: continue iterating\n        - false: stop iterating\n    */\n    protected abstract handleOpenFolder(node: Node, $element: JQuery): boolean;\n\n    protected abstract handleClosedFolder(\n        node: Node,\n        nextNode: Node | null,\n        $element: JQuery,\n    ): void;\n\n    protected abstract handleAfterOpenFolder(\n        node: Node,\n        nextNode: Node | null,\n    ): void;\n\n    protected abstract handleFirstNode(node: Node): void;\n}\n\nexport class HitAreasGenerator extends VisibleNodeIterator {\n    private currentNode: Node;\n    private treeBottom: number;\n    private positions: HitArea[];\n    private lastTop: number;\n\n    constructor(tree: Node, currentNode: Node, treeBottom: number) {\n        super(tree);\n\n        this.currentNode = currentNode;\n        this.treeBottom = treeBottom;\n    }\n\n    public generate(): HitArea[] {\n        this.positions = [];\n        this.lastTop = 0;\n\n        this.iterate();\n\n        return this.generateHitAreas(this.positions);\n    }\n\n    protected generateHitAreas(positions: HitArea[]): HitArea[] {\n        let previousTop = -1;\n        let group = [];\n        const hitAreas: HitArea[] = [];\n\n        for (const position of positions) {\n            if (position.top !== previousTop && group.length) {\n                if (group.length) {\n                    this.generateHitAreasForGroup(\n                        hitAreas,\n                        group,\n                        previousTop,\n                        position.top,\n                    );\n                }\n\n                previousTop = position.top;\n                group = [];\n            }\n\n            group.push(position);\n        }\n\n        this.generateHitAreasForGroup(\n            hitAreas,\n            group,\n            previousTop,\n            this.treeBottom,\n        );\n\n        return hitAreas;\n    }\n\n    protected handleOpenFolder(node: Node, $element: JQuery): boolean {\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            // Stop iterating\n            return false;\n        }\n\n        // Cannot move before current item\n        if (node.children[0] !== this.currentNode) {\n            this.addPosition(node, Position.Inside, this.getTop($element));\n        }\n\n        // Continue iterating\n        return true;\n    }\n\n    protected handleClosedFolder(\n        node: Node,\n        nextNode: Node,\n        $element: JQuery,\n    ): void {\n        const top = this.getTop($element);\n\n        if (node === this.currentNode) {\n            // Cannot move after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n\n            // Cannot move before current item\n            if (nextNode !== this.currentNode) {\n                this.addPosition(node, Position.After, top);\n            }\n        }\n    }\n\n    protected handleFirstNode(node: Node): void {\n        if (node !== this.currentNode) {\n            this.addPosition(\n                node,\n                Position.Before,\n                this.getTop(jQuery(node.element)),\n            );\n        }\n    }\n\n    protected handleAfterOpenFolder(node: Node, nextNode: Node): void {\n        if (node === this.currentNode || nextNode === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, this.lastTop);\n        } else {\n            this.addPosition(node, Position.After, this.lastTop);\n        }\n    }\n\n    protected handleNode(node: Node, nextNode: Node, $element: JQuery): void {\n        const top = this.getTop($element);\n\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n        }\n\n        if (nextNode === this.currentNode || node === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.After, top);\n        }\n    }\n\n    private getTop($element: JQuery<HTMLElement>): number {\n        const offset = $element.offset();\n\n        return offset ? offset.top : 0;\n    }\n\n    private addPosition(node: Node, position: number, top: number): void {\n        const area = {\n            top,\n            bottom: 0,\n            node,\n            position,\n        };\n\n        this.positions.push(area);\n        this.lastTop = top;\n    }\n\n    private generateHitAreasForGroup(\n        hitAreas: HitArea[],\n        positionsInGroup: HitArea[],\n        top: number,\n        bottom: number,\n    ): void {\n        // limit positions in group\n        const positionCount = Math.min(positionsInGroup.length, 4);\n\n        const areaHeight = Math.round((bottom - top) / positionCount);\n        let areaTop = top;\n\n        let i = 0;\n        while (i < positionCount) {\n            const position = positionsInGroup[i];\n\n            if (position) {\n                hitAreas.push({\n                    top: areaTop,\n                    bottom: areaTop + areaHeight,\n                    node: position.node,\n                    position: position.position,\n                });\n            }\n\n            areaTop += areaHeight;\n            i += 1;\n        }\n    }\n}\n\nclass DragElement {\n    private offsetX: number;\n    private offsetY: number;\n    private $element: JQuery;\n\n    constructor(\n        nodeName: string,\n        offsetX: number,\n        offsetY: number,\n        $tree: JQuery,\n        autoEscape: boolean,\n    ) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n\n        this.$element = jQuery(\"<span>\").addClass(\n            \"jqtree-title jqtree-dragging\",\n        );\n\n        if (autoEscape) {\n            this.$element.text(nodeName);\n        } else {\n            this.$element.html(nodeName);\n        }\n\n        this.$element.css(\"position\", \"absolute\");\n        $tree.append(this.$element);\n    }\n\n    public move(pageX: number, pageY: number): void {\n        this.$element.offset({\n            left: pageX - this.offsetX,\n            top: pageY - this.offsetY,\n        });\n    }\n\n    public remove(): void {\n        this.$element.remove();\n    }\n}\n","export const isInt = (n: unknown): boolean =>\n    typeof n === \"number\" && n % 1 === 0;\n\nexport const isFunction = (v: unknown): boolean => typeof v === \"function\";\n\nexport const getBoolString = (value: unknown): string =>\n    value ? \"true\" : \"false\";\n","import { getBoolString } from \"./util\";\nimport { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\ntype IconElement = string | HTMLElement | JQuery<HTMLElement>;\n\nexport default class ElementsRenderer {\n    public openedIconElement?: HTMLElement | Text;\n    public closedIconElement?: HTMLElement | Text;\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        this.openedIconElement = this.createButtonElement(\n            treeWidget.options.openedIcon || \"+\",\n        );\n        this.closedIconElement = this.createButtonElement(\n            treeWidget.options.closedIcon || \"-\",\n        );\n    }\n\n    public render(fromNode: Node | null): void {\n        if (fromNode && fromNode.parent) {\n            this.renderFromNode(fromNode);\n        } else {\n            this.renderFromRoot();\n        }\n    }\n\n    public renderFromRoot(): void {\n        const $element = this.treeWidget.element;\n        $element.empty();\n\n        if ($element[0]) {\n            this.createDomElements(\n                $element[0],\n                this.treeWidget.tree.children,\n                true,\n                1,\n            );\n        }\n    }\n\n    public renderFromNode(node: Node): void {\n        // remember current li\n        const $previousLi = jQuery(node.element);\n\n        // create element\n        const li = this.createLi(node, node.getLevel());\n        this.attachNodeData(node, li);\n\n        // add element to dom\n        $previousLi.after(li);\n\n        // remove previous li\n        $previousLi.remove();\n\n        // create children\n        if (node.children) {\n            this.createDomElements(\n                li,\n                node.children,\n                false,\n                node.getLevel() + 1,\n            );\n        }\n    }\n\n    private createDomElements(\n        element: Element,\n        children: Node[],\n        isRootNode: boolean,\n        level: number,\n    ): void {\n        const ul = this.createUl(isRootNode);\n        element.appendChild(ul);\n\n        for (const child of children) {\n            const li = this.createLi(child, level);\n            ul.appendChild(li);\n\n            this.attachNodeData(child, li);\n\n            if (child.hasChildren()) {\n                this.createDomElements(li, child.children, false, level + 1);\n            }\n        }\n    }\n\n    private attachNodeData(node: Node, li: HTMLElement): void {\n        node.element = li;\n        jQuery(li).data(\"node\", node);\n    }\n\n    private createUl(isRootNode: boolean): HTMLUListElement {\n        let classString;\n        let role;\n\n        if (!isRootNode) {\n            classString = \"\";\n            role = \"group\";\n        } else {\n            classString = \"jqtree-tree\";\n            role = \"tree\";\n\n            if (this.treeWidget.options.rtl) {\n                classString += \" jqtree-rtl\";\n            }\n        }\n\n        if (this.treeWidget.options.dragAndDrop) {\n            classString += \" jqtree-dnd\";\n        }\n\n        const ul = document.createElement(\"ul\");\n        ul.className = `jqtree_common ${classString}`;\n\n        ul.setAttribute(\"role\", role);\n\n        return ul;\n    }\n\n    private createLi(node: Node, level: number): HTMLLIElement {\n        const isSelected = Boolean(\n            this.treeWidget.selectNodeHandler.isNodeSelected(node),\n        );\n\n        const mustShowFolder =\n            node.isFolder() ||\n            (node.isEmptyFolder && this.treeWidget.options.showEmptyFolder);\n\n        const li = mustShowFolder\n            ? this.createFolderLi(node, level, isSelected)\n            : this.createNodeLi(node, level, isSelected);\n\n        if (this.treeWidget.options.onCreateLi) {\n            this.treeWidget.options.onCreateLi(node, jQuery(li), isSelected);\n        }\n\n        return li;\n    }\n\n    private setTreeItemAriaAttributes(\n        element: HTMLElement,\n        name: string,\n        level: number,\n        isSelected: boolean,\n    ) {\n        element.setAttribute(\"aria-label\", name);\n        element.setAttribute(\"aria-level\", `${level}`);\n        element.setAttribute(\"aria-selected\", getBoolString(isSelected));\n        element.setAttribute(\"role\", \"treeitem\");\n    }\n\n    private createFolderLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const buttonClasses = this.getButtonClasses(node);\n        const folderClasses = this.getFolderClasses(node, isSelected);\n\n        const iconElement = node.is_open\n            ? this.openedIconElement\n            : this.closedIconElement;\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = `jqtree_common ${folderClasses}`;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // button link\n        const buttonLink = document.createElement(\"a\");\n        buttonLink.className = buttonClasses;\n\n        if (iconElement) {\n            buttonLink.appendChild(iconElement.cloneNode(true));\n        }\n\n        if (this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            true,\n            level,\n        );\n        titleSpan.setAttribute(\"aria-expanded\", getBoolString(node.is_open));\n        div.appendChild(titleSpan);\n\n        if (!this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        return li;\n    }\n\n    private createNodeLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const liClasses = [\"jqtree_common\"];\n\n        if (isSelected) {\n            liClasses.push(\"jqtree-selected\");\n        }\n\n        const classString = liClasses.join(\" \");\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = classString;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            false,\n            level,\n        );\n        div.appendChild(titleSpan);\n\n        return li;\n    }\n\n    private createTitleSpan(\n        nodeName: string,\n        isSelected: boolean,\n        isFolder: boolean,\n        level: number,\n    ): HTMLSpanElement {\n        const titleSpan = document.createElement(\"span\");\n\n        let classes = \"jqtree-title jqtree_common\";\n\n        if (isFolder) {\n            classes += \" jqtree-title-folder\";\n        }\n\n        classes += ` jqtree-title-button-${\n            this.treeWidget.options.buttonLeft ? \"left\" : \"right\"\n        }`;\n\n        titleSpan.className = classes;\n\n        if (isSelected) {\n            const tabIndex = this.treeWidget.options.tabIndex;\n\n            if (tabIndex !== undefined) {\n                titleSpan.setAttribute(\"tabindex\", `${tabIndex}`);\n            }\n        }\n\n        this.setTreeItemAriaAttributes(titleSpan, nodeName, level, isSelected);\n\n        if (this.treeWidget.options.autoEscape) {\n            titleSpan.textContent = nodeName;\n        } else {\n            titleSpan.innerHTML = nodeName;\n        }\n\n        return titleSpan;\n    }\n\n    private getButtonClasses(node: Node): string {\n        const classes = [\"jqtree-toggler\", \"jqtree_common\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (this.treeWidget.options.buttonLeft) {\n            classes.push(\"jqtree-toggler-left\");\n        } else {\n            classes.push(\"jqtree-toggler-right\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private getFolderClasses(node: Node, isSelected: boolean): string {\n        const classes = [\"jqtree-folder\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (isSelected) {\n            classes.push(\"jqtree-selected\");\n        }\n\n        if (node.is_loading) {\n            classes.push(\"jqtree-loading\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private createButtonElement(\n        value: IconElement,\n    ): HTMLElement | Text | undefined {\n        if (typeof value === \"string\") {\n            // convert value to html\n            const div = document.createElement(\"div\");\n            div.innerHTML = value;\n\n            return document.createTextNode(div.innerHTML);\n        } else if (value == null) {\n            return undefined;\n        } else if ((value as HTMLElement).nodeType) {\n            return value as HTMLElement;\n        } else {\n            return jQuery(value)[0];\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport type HandleFinishedLoading = () => void;\n\nexport default class DataLoader {\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n    }\n\n    public loadFromUrl(\n        urlInfo: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null\n    ): void {\n        if (!urlInfo) {\n            return;\n        }\n\n        const $el = this.getDomElement(parentNode);\n        this.addLoadingClass($el);\n        this.notifyLoading(true, parentNode, $el);\n\n        const stopLoading = (): void => {\n            this.removeLoadingClass($el);\n            this.notifyLoading(false, parentNode, $el);\n        };\n\n        const handleSuccess = (data: string | NodeData[]): void => {\n            stopLoading();\n            this.treeWidget.loadData(this.parseData(data), parentNode);\n\n            if (onFinished && typeof onFinished === \"function\") {\n                onFinished();\n            }\n        };\n\n        const handleError = (jqXHR: JQuery.jqXHR): void => {\n            stopLoading();\n\n            if (this.treeWidget.options.onLoadFailed) {\n                this.treeWidget.options.onLoadFailed(jqXHR);\n            }\n        };\n\n        this.submitRequest(urlInfo, handleSuccess, handleError);\n    }\n\n    private addLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.addClass(\"jqtree-loading\");\n        }\n    }\n\n    private removeLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.removeClass(\"jqtree-loading\");\n        }\n    }\n\n    private getDomElement(parentNode: Node | null): JQuery<HTMLElement> {\n        if (parentNode) {\n            return jQuery(parentNode.element);\n        } else {\n            return this.treeWidget.element;\n        }\n    }\n\n    private notifyLoading(\n        isLoading: boolean,\n        node: Node | null,\n        $el: JQuery\n    ): void {\n        if (this.treeWidget.options.onLoading) {\n            this.treeWidget.options.onLoading(isLoading, node, $el);\n        }\n\n        this.treeWidget._triggerEvent(\"tree.loading_data\", {\n            isLoading,\n            node,\n            $el,\n        });\n    }\n\n    private submitRequest(\n        urlInfoInput: string | JQuery.AjaxSettings,\n        handleSuccess: JQuery.Ajax.SuccessCallback<any>,\n        handleError: JQuery.Ajax.ErrorCallback<any>\n    ): void {\n        const urlInfo =\n            typeof urlInfoInput === \"string\"\n                ? { url: urlInfoInput }\n                : urlInfoInput;\n\n        const ajaxSettings: JQuery.AjaxSettings = {\n            method: \"GET\",\n            cache: false,\n            dataType: \"json\",\n            success: handleSuccess,\n            error: handleError,\n            ...urlInfo,\n        };\n\n        ajaxSettings.method = ajaxSettings.method?.toUpperCase() || \"GET\";\n\n        void jQuery.ajax(ajaxSettings);\n    }\n\n    private parseData(data: string | NodeData[]): NodeData[] {\n        const { dataFilter } = this.treeWidget.options;\n\n        const getParsedData = () => {\n            if (typeof data === \"string\") {\n                return JSON.parse(data) as NodeData[];\n            } else {\n                return data;\n            }\n        };\n\n        const parsedData = getParsedData();\n\n        if (dataFilter) {\n            return dataFilter(parsedData);\n        } else {\n            return parsedData;\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport default class KeyHandler {\n    private static LEFT = 37;\n    private static UP = 38;\n    private static RIGHT = 39;\n    private static DOWN = 40;\n\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        if (treeWidget.options.keyboardSupport) {\n            jQuery(document).on(\"keydown.jqtree\", this.handleKeyDown);\n        }\n    }\n\n    public deinit(): void {\n        jQuery(document).off(\"keydown.jqtree\");\n    }\n\n    public moveDown(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getNextVisibleNode());\n    }\n\n    public moveUp(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getPreviousVisibleNode());\n    }\n\n    public moveRight(selectedNode: Node): boolean {\n        if (!selectedNode.isFolder()) {\n            return true;\n        } else {\n            // folder node\n            if (selectedNode.is_open) {\n                // Right moves to the first child of an open node\n                return this.selectNode(selectedNode.getNextVisibleNode());\n            } else {\n                // Right expands a closed node\n                this.treeWidget.openNode(selectedNode);\n                return false;\n            }\n        }\n    }\n\n    public moveLeft(selectedNode: Node): boolean {\n        if (selectedNode.isFolder() && selectedNode.is_open) {\n            // Left on an open node closes the node\n            this.treeWidget.closeNode(selectedNode);\n            return false;\n        } else {\n            // Left on a closed or end node moves focus to the node's parent\n            return this.selectNode(selectedNode.getParent());\n        }\n    }\n\n    public selectNode(node: Node | null): boolean {\n        if (!node) {\n            return true;\n        } else {\n            this.treeWidget.selectNode(node);\n\n            if (\n                !this.treeWidget.scrollHandler.isScrolledIntoView(\n                    jQuery(node.element).find(\".jqtree-element\")\n                )\n            ) {\n                this.treeWidget.scrollToNode(node);\n            }\n\n            return false;\n        }\n    }\n\n    private handleKeyDown = (e: JQuery.Event): boolean => {\n        if (!this.canHandleKeyboard()) {\n            return true;\n        }\n\n        const selectedNode = this.treeWidget.getSelectedNode();\n        if (!selectedNode) {\n            return true;\n        }\n\n        const key = e.which;\n\n        switch (key) {\n            case KeyHandler.DOWN:\n                return this.moveDown(selectedNode);\n\n            case KeyHandler.UP:\n                return this.moveUp(selectedNode);\n\n            case KeyHandler.RIGHT:\n                return this.moveRight(selectedNode);\n\n            case KeyHandler.LEFT:\n                return this.moveLeft(selectedNode);\n\n            default:\n                return true;\n        }\n    };\n\n    private canHandleKeyboard(): boolean {\n        return (\n            (this.treeWidget.options.keyboardSupport || false) &&\n            this.treeWidget.selectNodeHandler.isFocusOnTree()\n        );\n    }\n}\n","const register = (widgetClass: unknown, widgetName: string): void => {\n    const getDataKey = (): string => `simple_widget_${widgetName}`;\n\n    const getWidgetData = (\n        el: HTMLElement,\n        dataKey: string\n    ): SimpleWidget<unknown> | null => {\n        const widget = jQuery.data(el, dataKey) as unknown;\n\n        if (widget && widget instanceof SimpleWidget) {\n            return widget;\n        } else {\n            return null;\n        }\n    };\n\n    const createWidget = ($el: JQuery, options: unknown): JQuery => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const existingWidget = getWidgetData(el, dataKey);\n\n            if (!existingWidget) {\n                const simpleWidgetClass = widgetClass as typeof SimpleWidget;\n                const widget = new simpleWidgetClass(el, options);\n\n                if (!jQuery.data(el, dataKey)) {\n                    jQuery.data(el, dataKey, widget);\n                }\n\n                // Call init after setting data, so we can call methods\n                widget.init();\n            }\n        }\n\n        return $el;\n    };\n\n    const destroyWidget = ($el: JQuery): void => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const widget = getWidgetData(el, dataKey);\n\n            if (widget) {\n                widget.destroy();\n            }\n\n            jQuery.removeData(el, dataKey);\n        }\n    };\n\n    const callFunction = (\n        $el: JQuery,\n        functionName: string,\n        args: unknown[]\n    ): unknown => {\n        let result = null;\n\n        for (const el of $el.get()) {\n            const widget = jQuery.data(el, getDataKey()) as unknown;\n\n            if (widget && widget instanceof SimpleWidget) {\n                const simpleWidget = widget as SimpleWidget<unknown>;\n                const widgetFunction = simpleWidget[functionName];\n\n                if (widgetFunction && typeof widgetFunction === \"function\") {\n                    result = widgetFunction.apply(widget, args) as unknown;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (jQuery.fn as any)[widgetName] = function (\n        this: JQuery,\n        argument1: unknown,\n        ...args: unknown[]\n    ) {\n        if (!argument1) {\n            return createWidget(this, null);\n        } else if (typeof argument1 === \"object\") {\n            const options = argument1 as unknown;\n            return createWidget(this, options);\n        } else if (typeof argument1 === \"string\" && argument1[0] !== \"_\") {\n            const functionName = argument1;\n\n            if (functionName === \"destroy\") {\n                return destroyWidget(this);\n            } else if (functionName === \"get_widget_class\") {\n                return widgetClass;\n            } else {\n                return callFunction(this, functionName, args);\n            }\n        } else {\n            return undefined;\n        }\n    };\n};\n\nexport default class SimpleWidget<WidgetOptions> {\n    public static register(widgetClass: unknown, widgetName: string): void {\n        register(widgetClass, widgetName);\n    }\n\n    [key: string]: unknown;\n\n    protected static defaults: unknown = {};\n\n    public options: WidgetOptions;\n\n    public $el: JQuery<HTMLElement>;\n\n    constructor(el: HTMLElement, options: WidgetOptions) {\n        this.$el = jQuery(el);\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const defaults = (this.constructor as any)[\"defaults\"] as WidgetOptions;\n        this.options = { ...defaults, ...options };\n    }\n\n    public destroy(): void {\n        this.deinit();\n    }\n\n    public init(): void {\n        //\n    }\n\n    public deinit(): void {\n        //\n    }\n}\n","/*\nThis widget does the same a the mouse widget in jqueryui.\n*/\nimport SimpleWidget from \"./simple.widget\";\nimport { PositionInfo } from \"./types\";\n\nconst getPositionInfoFromMouseEvent = (e: MouseEvent): PositionInfo => ({\n    pageX: e.pageX,\n    pageY: e.pageY,\n    target: e.target as HTMLElement,\n    originalEvent: e,\n});\n\nconst getPositionInfoFromTouch = (\n    touch: Touch,\n    e: TouchEvent\n): PositionInfo => ({\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    target: touch.target as HTMLElement,\n    originalEvent: e,\n});\n\nabstract class MouseWidget<WidgetOptions> extends SimpleWidget<WidgetOptions> {\n    protected isMouseStarted: boolean;\n    protected mouseDownInfo: PositionInfo | null;\n    private mouseDelayTimer: number | null;\n    private isMouseDelayMet: boolean;\n\n    public init(): void {\n        const element = this.$el.get(0);\n\n        if (element) {\n            element.addEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n            element.addEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.isMouseStarted = false;\n        this.mouseDelayTimer = null;\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n    }\n\n    public deinit(): void {\n        const el = this.$el.get(0);\n\n        if (el) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.removeMouseMoveEventListeners();\n    }\n\n    protected abstract mouseCapture(positionInfo: PositionInfo): boolean | null;\n\n    protected abstract mouseStart(positionInfo: PositionInfo): boolean;\n\n    protected abstract mouseDrag(positionInfo: PositionInfo): void;\n\n    protected abstract mouseStop(positionInfo: PositionInfo): void;\n\n    protected abstract getMouseDelay(): number;\n\n    private mouseDown = (e: MouseEvent): void => {\n        // Left mouse button?\n        if (e.button !== 0) {\n            return;\n        }\n\n        const result = this.handleMouseDown(getPositionInfoFromMouseEvent(e));\n\n        if (result && e.cancelable) {\n            e.preventDefault();\n        }\n    };\n\n    private handleMouseDown(positionInfo: PositionInfo): boolean {\n        // We may have missed mouseup (out of window)\n        if (this.isMouseStarted) {\n            this.handleMouseUp(positionInfo);\n        }\n\n        this.mouseDownInfo = positionInfo;\n\n        if (!this.mouseCapture(positionInfo)) {\n            return false;\n        }\n\n        this.handleStartMouse();\n\n        return true;\n    }\n\n    private handleStartMouse(): void {\n        document.addEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        document.addEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        document.addEventListener(\"mouseup\", this.mouseUp, { passive: false });\n        document.addEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n\n        const mouseDelay = this.getMouseDelay();\n\n        if (mouseDelay) {\n            this.startMouseDelayTimer(mouseDelay);\n        } else {\n            this.isMouseDelayMet = true;\n        }\n    }\n\n    private startMouseDelayTimer(mouseDelay: number): void {\n        if (this.mouseDelayTimer) {\n            clearTimeout(this.mouseDelayTimer);\n        }\n\n        this.mouseDelayTimer = window.setTimeout(() => {\n            if (this.mouseDownInfo) {\n                this.isMouseDelayMet = true;\n            }\n        }, mouseDelay);\n\n        this.isMouseDelayMet = false;\n    }\n\n    private mouseMove = (e: MouseEvent): void => {\n        this.handleMouseMove(e, getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseMove(\n        e: MouseEvent | TouchEvent,\n        positionInfo: PositionInfo\n    ): void {\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n            return;\n        }\n\n        if (!this.isMouseDelayMet) {\n            return;\n        }\n\n        if (this.mouseDownInfo) {\n            this.isMouseStarted = this.mouseStart(this.mouseDownInfo) !== false;\n        }\n\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n        } else {\n            this.handleMouseUp(positionInfo);\n        }\n    }\n\n    private mouseUp = (e: MouseEvent): void => {\n        this.handleMouseUp(getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseUp(positionInfo: PositionInfo): void {\n        this.removeMouseMoveEventListeners();\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n\n        if (this.isMouseStarted) {\n            this.isMouseStarted = false;\n            this.mouseStop(positionInfo);\n        }\n    }\n\n    private removeMouseMoveEventListeners() {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mouseup\", this.mouseUp, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n    }\n\n    private touchStart = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseDown(getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchMove = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseMove(e, getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchEnd = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseUp(getPositionInfoFromTouch(touch, e));\n    };\n}\n\nexport default MouseWidget;\n","import { isInt } from \"./util\";\nimport { JqTreeWidget } from \"./tree.jquery\";\nimport { Node } from \"./node\";\n\nexport interface SavedState {\n    open_nodes: NodeId[];\n    selected_node: NodeId[];\n}\n\nexport default class SaveStateHandler {\n    private treeWidget: JqTreeWidget;\n    private _supportsLocalStorage: boolean | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n    }\n\n    public saveState(): void {\n        const state = JSON.stringify(this.getState());\n\n        if (this.treeWidget.options.onSetStateFromStorage) {\n            this.treeWidget.options.onSetStateFromStorage(state);\n        } else if (this.supportsLocalStorage()) {\n            localStorage.setItem(this.getKeyName(), state);\n        }\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        const jsonData = this.loadFromStorage();\n\n        if (jsonData) {\n            return this.parseState(jsonData) as unknown as SavedState;\n        } else {\n            return null;\n        }\n    }\n\n    public getState(): SavedState {\n        const getOpenNodeIds = (): NodeId[] => {\n            const openNodes: NodeId[] = [];\n\n            this.treeWidget.tree.iterate((node: Node) => {\n                if (node.is_open && node.id && node.hasChildren()) {\n                    openNodes.push(node.id);\n                }\n                return true;\n            });\n\n            return openNodes;\n        };\n\n        const getSelectedNodeIds = (): NodeId[] => {\n            const selectedNodeIds: NodeId[] = [];\n\n            this.treeWidget.getSelectedNodes().forEach((node) => {\n                if (node.id != null) {\n                    selectedNodeIds.push(node.id);\n                }\n            });\n\n            return selectedNodeIds;\n        };\n\n        return {\n            open_nodes: getOpenNodeIds(),\n            selected_node: getSelectedNodeIds(),\n        };\n    }\n\n    /*\n    Set initial state\n    Don't handle nodes that are loaded on demand\n\n    result: must load on demand\n    */\n    public setInitialState(state: SavedState): boolean {\n        if (!state) {\n            return false;\n        } else {\n            let mustLoadOnDemand = false;\n\n            if (state.open_nodes) {\n                mustLoadOnDemand = this.openInitialNodes(state.open_nodes);\n            }\n\n            if (state.selected_node) {\n                this.resetSelection();\n                this.selectInitialNodes(state.selected_node);\n            }\n\n            return mustLoadOnDemand;\n        }\n    }\n\n    public setInitialStateOnDemand(\n        state: SavedState,\n        cbFinished: () => void\n    ): void {\n        if (state) {\n            this.doSetInitialStateOnDemand(\n                state.open_nodes,\n                state.selected_node,\n                cbFinished\n            );\n        } else {\n            cbFinished();\n        }\n    }\n\n    public getNodeIdToBeSelected(): NodeId | null {\n        const state = this.getStateFromStorage();\n\n        if (state && state.selected_node) {\n            return state.selected_node[0] || null;\n        } else {\n            return null;\n        }\n    }\n\n    private parseState(jsonData: string): SavedState {\n        const state = JSON.parse(jsonData) as Record<string, unknown>;\n\n        // Check if selected_node is an int (instead of an array)\n        if (state && state.selected_node && isInt(state.selected_node)) {\n            // Convert to array\n            state.selected_node = [state.selected_node];\n        }\n\n        return state as unknown as SavedState;\n    }\n\n    private loadFromStorage(): string | null {\n        if (this.treeWidget.options.onGetStateFromStorage) {\n            return this.treeWidget.options.onGetStateFromStorage();\n        } else if (this.supportsLocalStorage()) {\n            return localStorage.getItem(this.getKeyName());\n        } else {\n            return null;\n        }\n    }\n\n    private openInitialNodes(nodeIds: NodeId[]): boolean {\n        let mustLoadOnDemand = false;\n\n        for (const nodeId of nodeIds) {\n            const node = this.treeWidget.getNodeById(nodeId);\n\n            if (node) {\n                if (!node.load_on_demand) {\n                    node.is_open = true;\n                } else {\n                    mustLoadOnDemand = true;\n                }\n            }\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    private selectInitialNodes(nodeIds: NodeId[]): boolean {\n        let selectCount = 0;\n\n        for (const nodeId of nodeIds) {\n            const node = this.treeWidget.getNodeById(nodeId);\n\n            if (node) {\n                selectCount += 1;\n\n                this.treeWidget.selectNodeHandler.addToSelection(node);\n            }\n        }\n\n        return selectCount !== 0;\n    }\n\n    private resetSelection(): void {\n        const selectNodeHandler = this.treeWidget.selectNodeHandler;\n\n        const selectedNodes = selectNodeHandler.getSelectedNodes();\n\n        selectedNodes.forEach((node) => {\n            selectNodeHandler.removeFromSelection(node);\n        });\n    }\n\n    private doSetInitialStateOnDemand(\n        nodeIdsParam: NodeId[],\n        selectedNodes: NodeId[],\n        cbFinished: () => void\n    ): void {\n        let loadingCount = 0;\n        let nodeIds = nodeIdsParam;\n\n        const openNodes = (): void => {\n            const newNodesIds = [];\n\n            for (const nodeId of nodeIds) {\n                const node = this.treeWidget.getNodeById(nodeId);\n\n                if (!node) {\n                    newNodesIds.push(nodeId);\n                } else {\n                    if (!node.is_loading) {\n                        if (node.load_on_demand) {\n                            loadAndOpenNode(node);\n                        } else {\n                            this.treeWidget._openNode(node, false, null);\n                        }\n                    }\n                }\n            }\n\n            nodeIds = newNodesIds;\n\n            if (this.selectInitialNodes(selectedNodes)) {\n                this.treeWidget._refreshElements(null);\n            }\n\n            if (loadingCount === 0) {\n                cbFinished();\n            }\n        };\n\n        const loadAndOpenNode = (node: Node): void => {\n            loadingCount += 1;\n            this.treeWidget._openNode(node, false, () => {\n                loadingCount -= 1;\n                openNodes();\n            });\n        };\n\n        openNodes();\n    }\n\n    private getKeyName(): string {\n        if (typeof this.treeWidget.options.saveState === \"string\") {\n            return this.treeWidget.options.saveState;\n        } else {\n            return \"tree\";\n        }\n    }\n\n    private supportsLocalStorage(): boolean {\n        const testSupport = (): boolean => {\n            // Is local storage supported?\n            if (localStorage == null) {\n                return false;\n            } else {\n                // Check if it's possible to store an item. Safari does not allow this in private browsing mode.\n                try {\n                    const key = \"_storage_test\";\n                    sessionStorage.setItem(key, \"value\");\n                    sessionStorage.removeItem(key);\n                } catch (error) {\n                    return false;\n                }\n\n                return true;\n            }\n        };\n\n        if (this._supportsLocalStorage == null) {\n            this._supportsLocalStorage = testSupport();\n        }\n\n        return this._supportsLocalStorage;\n    }\n}\n","import { JqTreeWidget } from \"./tree.jquery\";\nimport { HitArea, PositionInfo } from \"./types\";\n\nexport default class ScrollHandler {\n    private treeWidget: JqTreeWidget;\n    private previousTop: number;\n    private isInitialized: boolean;\n    private $scrollParent: JQuery | null;\n    private scrollParentTop: number;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n        this.previousTop = -1;\n        this.isInitialized = false;\n    }\n\n    public checkScrolling(): void {\n        this.ensureInit();\n        this.checkVerticalScrolling();\n        this.checkHorizontalScrolling();\n    }\n\n    public scrollToY(top: number): void {\n        this.ensureInit();\n\n        if (this.$scrollParent && this.$scrollParent[0]) {\n            this.$scrollParent[0].scrollTop = top;\n        } else {\n            const offset = this.treeWidget.$el.offset();\n            const treeTop = offset ? offset.top : 0;\n\n            jQuery(document).scrollTop(top + treeTop);\n        }\n    }\n\n    public isScrolledIntoView($element: JQuery): boolean {\n        this.ensureInit();\n\n        let elementBottom: number;\n        let viewBottom: number;\n        let elementTop: number;\n        let viewTop: number;\n\n        const elHeight = $element.height() || 0;\n\n        if (this.$scrollParent) {\n            viewTop = 0;\n            viewBottom = this.$scrollParent.height() || 0;\n\n            const offset = $element.offset();\n            const originalTop = offset ? offset.top : 0;\n\n            elementTop = originalTop - this.scrollParentTop;\n            elementBottom = elementTop + elHeight;\n        } else {\n            viewTop = jQuery(window).scrollTop() || 0;\n\n            const windowHeight = jQuery(window).height() || 0;\n            viewBottom = viewTop + windowHeight;\n\n            const offset = $element.offset();\n\n            elementTop = offset ? offset.top : 0;\n            elementBottom = elementTop + elHeight;\n        }\n\n        return elementBottom <= viewBottom && elementTop >= viewTop;\n    }\n\n    public getScrollLeft(): number {\n        if (!this.$scrollParent) {\n            return 0;\n        } else {\n            return this.$scrollParent.scrollLeft() || 0;\n        }\n    }\n\n    private initScrollParent(): void {\n        const getParentWithOverflow = (): JQuery | null => {\n            const cssAttributes = [\"overflow\", \"overflow-y\"];\n\n            const hasOverFlow = ($el: JQuery): boolean => {\n                for (const attr of cssAttributes) {\n                    const overflowValue = $el.css(attr);\n                    if (\n                        overflowValue === \"auto\" ||\n                        overflowValue === \"scroll\"\n                    ) {\n                        return true;\n                    }\n                }\n\n                return false;\n            };\n\n            if (hasOverFlow(this.treeWidget.$el)) {\n                return this.treeWidget.$el;\n            }\n\n            for (const el of this.treeWidget.$el.parents().get()) {\n                const $el = jQuery(el);\n                if (hasOverFlow($el)) {\n                    return $el;\n                }\n            }\n\n            return null;\n        };\n\n        const setDocumentAsScrollParent = (): void => {\n            this.scrollParentTop = 0;\n            this.$scrollParent = null;\n        };\n\n        if (this.treeWidget.$el.css(\"position\") === \"fixed\") {\n            setDocumentAsScrollParent();\n        }\n\n        const $scrollParent = getParentWithOverflow();\n\n        if (\n            $scrollParent &&\n            $scrollParent.length &&\n            $scrollParent[0]?.tagName !== \"HTML\"\n        ) {\n            this.$scrollParent = $scrollParent;\n\n            const offset = this.$scrollParent.offset();\n            this.scrollParentTop = offset ? offset.top : 0;\n        } else {\n            setDocumentAsScrollParent();\n        }\n\n        this.isInitialized = true;\n    }\n\n    private ensureInit(): void {\n        if (!this.isInitialized) {\n            this.initScrollParent();\n        }\n    }\n\n    private handleVerticalScrollingWithScrollParent(area: HitArea): void {\n        const scrollParent = this.$scrollParent && this.$scrollParent[0];\n\n        if (!scrollParent) {\n            return;\n        }\n\n        const distanceBottom =\n            this.scrollParentTop + scrollParent.offsetHeight - area.bottom;\n\n        if (distanceBottom < 20) {\n            scrollParent.scrollTop += 20;\n            this.treeWidget.refreshHitAreas();\n            this.previousTop = -1;\n        } else if (area.top - this.scrollParentTop < 20) {\n            scrollParent.scrollTop -= 20;\n            this.treeWidget.refreshHitAreas();\n            this.previousTop = -1;\n        }\n    }\n\n    private handleVerticalScrollingWithDocument(area: HitArea): void {\n        const scrollTop = jQuery(document).scrollTop() || 0;\n        const distanceTop = area.top - scrollTop;\n\n        if (distanceTop < 20) {\n            jQuery(document).scrollTop(scrollTop - 20);\n        } else {\n            const windowHeight = jQuery(window).height() || 0;\n\n            if (windowHeight - (area.bottom - scrollTop) < 20) {\n                jQuery(document).scrollTop(scrollTop + 20);\n            }\n        }\n    }\n\n    private checkVerticalScrolling(): void {\n        const hoveredArea = this.treeWidget.dndHandler.hoveredArea;\n\n        if (hoveredArea && hoveredArea.top !== this.previousTop) {\n            this.previousTop = hoveredArea.top;\n\n            if (this.$scrollParent) {\n                this.handleVerticalScrollingWithScrollParent(hoveredArea);\n            } else {\n                this.handleVerticalScrollingWithDocument(hoveredArea);\n            }\n        }\n    }\n\n    private checkHorizontalScrolling(): void {\n        const positionInfo = this.treeWidget.dndHandler.positionInfo;\n\n        if (!positionInfo) {\n            return;\n        }\n\n        if (this.$scrollParent) {\n            this.handleHorizontalScrollingWithParent(positionInfo);\n        } else {\n            this.handleHorizontalScrollingWithDocument(positionInfo);\n        }\n    }\n\n    private handleHorizontalScrollingWithParent(\n        positionInfo: PositionInfo\n    ): void {\n        if (\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return;\n        }\n\n        const $scrollParent = this.$scrollParent;\n        const scrollParentOffset = $scrollParent && $scrollParent.offset();\n\n        if (!($scrollParent && scrollParentOffset)) {\n            return;\n        }\n\n        const scrollParent = $scrollParent[0];\n\n        if (!scrollParent) {\n            return;\n        }\n\n        const canScrollRight =\n            scrollParent.scrollLeft + scrollParent.clientWidth <\n            scrollParent.scrollWidth;\n        const canScrollLeft = scrollParent.scrollLeft > 0;\n\n        const rightEdge = scrollParentOffset.left + scrollParent.clientWidth;\n        const leftEdge = scrollParentOffset.left;\n        const isNearRightEdge = positionInfo.pageX > rightEdge - 20;\n        const isNearLeftEdge = positionInfo.pageX < leftEdge + 20;\n\n        if (isNearRightEdge && canScrollRight) {\n            scrollParent.scrollLeft = Math.min(\n                scrollParent.scrollLeft + 20,\n                scrollParent.scrollWidth\n            );\n        } else if (isNearLeftEdge && canScrollLeft) {\n            scrollParent.scrollLeft = Math.max(scrollParent.scrollLeft - 20, 0);\n        }\n    }\n\n    private handleHorizontalScrollingWithDocument(\n        positionInfo: PositionInfo\n    ): void {\n        if (\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return;\n        }\n\n        const $document = jQuery(document);\n\n        const scrollLeft = $document.scrollLeft() || 0;\n        const windowWidth = jQuery(window).width() || 0;\n\n        const canScrollLeft = scrollLeft > 0;\n\n        const isNearRightEdge = positionInfo.pageX > windowWidth - 20;\n        const isNearLeftEdge = positionInfo.pageX - scrollLeft < 20;\n\n        if (isNearRightEdge) {\n            $document.scrollLeft(scrollLeft + 20);\n        } else if (isNearLeftEdge && canScrollLeft) {\n            $document.scrollLeft(Math.max(scrollLeft - 20, 0));\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport default class SelectNodeHandler {\n    private treeWidget: JqTreeWidget;\n    private selectedNodes: Set<NodeId>;\n    private selectedSingleNode: Node | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n        this.selectedNodes = new Set<NodeId>();\n        this.clear();\n    }\n\n    public getSelectedNode(): Node | false {\n        const selectedNodes = this.getSelectedNodes();\n\n        if (selectedNodes.length) {\n            return selectedNodes[0] || false;\n        } else {\n            return false;\n        }\n    }\n\n    public getSelectedNodes(): Node[] {\n        if (this.selectedSingleNode) {\n            return [this.selectedSingleNode];\n        } else {\n            const selectedNodes: Node[] = [];\n\n            this.selectedNodes.forEach((id) => {\n                const node = this.treeWidget.getNodeById(id);\n                if (node) {\n                    selectedNodes.push(node);\n                }\n            });\n\n            return selectedNodes;\n        }\n    }\n\n    public getSelectedNodesUnder(parent: Node): Node[] {\n        if (this.selectedSingleNode) {\n            if (parent.isParentOf(this.selectedSingleNode)) {\n                return [this.selectedSingleNode];\n            } else {\n                return [];\n            }\n        } else {\n            const selectedNodes = [];\n\n            for (const id in this.selectedNodes) {\n                if (\n                    Object.prototype.hasOwnProperty.call(this.selectedNodes, id)\n                ) {\n                    const node = this.treeWidget.getNodeById(id);\n                    if (node && parent.isParentOf(node)) {\n                        selectedNodes.push(node);\n                    }\n                }\n            }\n\n            return selectedNodes;\n        }\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (node.id != null) {\n            return this.selectedNodes.has(node.id);\n        } else if (this.selectedSingleNode) {\n            return this.selectedSingleNode.element === node.element;\n        } else {\n            return false;\n        }\n    }\n\n    public clear(): void {\n        this.selectedNodes.clear();\n        this.selectedSingleNode = null;\n    }\n\n    public removeFromSelection(node: Node, includeChildren = false): void {\n        if (node.id == null) {\n            if (\n                this.selectedSingleNode &&\n                node.element === this.selectedSingleNode.element\n            ) {\n                this.selectedSingleNode = null;\n            }\n        } else {\n            this.selectedNodes.delete(node.id);\n\n            if (includeChildren) {\n                node.iterate(() => {\n                    if (node.id != null) {\n                        this.selectedNodes.delete(node.id);\n                    }\n                    return true;\n                });\n            }\n        }\n    }\n\n    public addToSelection(node: Node): void {\n        if (node.id != null) {\n            this.selectedNodes.add(node.id);\n        } else {\n            this.selectedSingleNode = node;\n        }\n    }\n\n    public isFocusOnTree(): boolean {\n        const activeElement = document.activeElement;\n\n        return Boolean(\n            activeElement &&\n                activeElement.tagName === \"SPAN\" &&\n                this.treeWidget._containsElement(activeElement as HTMLElement)\n        );\n    }\n}\n","import { Position, Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\nimport { DropHint } from \"./types\";\n\nexport type OnFinishOpenNode = (node: Node) => void;\n\nexport class NodeElement {\n    public node: Node;\n    public element: HTMLElement;\n    protected treeWidget: JqTreeWidget;\n\n    constructor(node: Node, treeWidget: JqTreeWidget) {\n        this.init(node, treeWidget);\n    }\n\n    public init(node: Node, treeWidget: JqTreeWidget): void {\n        this.node = node;\n        this.treeWidget = treeWidget;\n\n        if (!node.element) {\n            const element = this.treeWidget.element.get(0);\n\n            if (element) {\n                node.element = element;\n            }\n        }\n\n        if (node.element) {\n            this.element = node.element;\n        }\n    }\n\n    public addDropHint(position: number): DropHint {\n        if (this.mustShowBorderDropHint(position)) {\n            return new BorderDropHint(\n                jQuery(this.element),\n                this.treeWidget._getScrollLeft(),\n            );\n        } else {\n            return new GhostDropHint(this.node, jQuery(this.element), position);\n        }\n    }\n\n    public select(mustSetFocus: boolean): void {\n        this.element.classList.add(\"jqtree-selected\");\n\n        const titleSpan = this.getTitleSpan();\n        const tabIndex = this.treeWidget.options.tabIndex;\n\n        // Check for null or undefined\n        if (tabIndex != null) {\n            titleSpan.setAttribute(\"tabindex\", tabIndex.toString());\n        }\n\n        titleSpan.setAttribute(\"aria-selected\", \"true\");\n\n        if (mustSetFocus) {\n            titleSpan.focus();\n        }\n    }\n\n    public deselect(): void {\n        this.element.classList.remove(\"jqtree-selected\");\n\n        const titleSpan = this.getTitleSpan();\n        titleSpan.removeAttribute(\"tabindex\");\n        titleSpan.setAttribute(\"aria-selected\", \"false\");\n\n        titleSpan.blur();\n    }\n\n    protected getUl(): HTMLUListElement {\n        return this.element.querySelector(\":scope > ul\") as HTMLUListElement;\n    }\n\n    protected getTitleSpan(): HTMLSpanElement {\n        return this.element.querySelector(\n            \":scope > .jqtree-element > span.jqtree-title\",\n        ) as HTMLSpanElement;\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return position === Position.Inside;\n    }\n}\n\nexport class FolderElement extends NodeElement {\n    public open(\n        onFinished: OnFinishOpenNode | null,\n        slide = true,\n        animationSpeed: JQuery.Duration = \"fast\",\n    ): void {\n        if (this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = true;\n\n        const button = this.getButton();\n        button.classList.remove(\"jqtree-closed\");\n        button.innerHTML = \"\";\n\n        const openedIconElement = this.treeWidget.renderer.openedIconElement;\n\n        if (openedIconElement) {\n            const icon = openedIconElement.cloneNode(true);\n            button.appendChild(icon);\n        }\n\n        const doOpen = (): void => {\n            this.element.classList.remove(\"jqtree-closed\");\n\n            const titleSpan = this.getTitleSpan();\n            titleSpan.setAttribute(\"aria-expanded\", \"true\");\n\n            if (onFinished) {\n                onFinished(this.node);\n            }\n\n            this.treeWidget._triggerEvent(\"tree.open\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            jQuery(this.getUl()).slideDown(animationSpeed, doOpen);\n        } else {\n            jQuery(this.getUl()).show();\n            doOpen();\n        }\n    }\n\n    public close(\n        slide = true,\n        animationSpeed: JQuery.Duration | undefined = \"fast\",\n    ): void {\n        if (!this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = false;\n\n        const button = this.getButton();\n        button.classList.add(\"jqtree-closed\");\n        button.innerHTML = \"\";\n\n        const closedIconElement = this.treeWidget.renderer.closedIconElement;\n\n        if (closedIconElement) {\n            const icon = closedIconElement.cloneNode(true);\n            button.appendChild(icon);\n        }\n\n        const doClose = (): void => {\n            this.element.classList.add(\"jqtree-closed\");\n\n            const titleSpan = this.getTitleSpan();\n            titleSpan.setAttribute(\"aria-expanded\", \"false\");\n\n            this.treeWidget._triggerEvent(\"tree.close\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            jQuery(this.getUl()).slideUp(animationSpeed, doClose);\n        } else {\n            jQuery(this.getUl()).hide();\n            doClose();\n        }\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return !this.node.is_open && position === Position.Inside;\n    }\n\n    private getButton(): HTMLLinkElement {\n        return this.element.querySelector(\n            \":scope > .jqtree-element > a.jqtree-toggler\",\n        ) as HTMLLinkElement;\n    }\n}\n\nexport class BorderDropHint implements DropHint {\n    private $hint: JQuery<Element>;\n\n    constructor($element: JQuery<Element>, scrollLeft: number) {\n        const $div = $element.children(\".jqtree-element\");\n\n        const elWidth = $element.width() || 0;\n        const width = Math.max(elWidth + scrollLeft - 4, 0);\n\n        const elHeight = $div.outerHeight() || 0;\n        const height = Math.max(elHeight - 4, 0);\n\n        this.$hint = jQuery('<span class=\"jqtree-border\"></span>');\n        $div.append(this.$hint);\n\n        this.$hint.css({ width, height });\n    }\n\n    public remove(): void {\n        this.$hint.remove();\n    }\n}\n\nclass GhostDropHint implements DropHint {\n    private $element: JQuery<Element>;\n    private node: Node;\n    private $ghost: JQuery;\n\n    constructor(node: Node, $element: JQuery<Element>, position: Position) {\n        this.$element = $element;\n\n        this.node = node;\n        this.$ghost = jQuery(\n            `<li class=\"jqtree_common jqtree-ghost\"><span class=\"jqtree_common jqtree-circle\"></span>\n            <span class=\"jqtree_common jqtree-line\"></span></li>`,\n        );\n\n        if (position === Position.After) {\n            this.moveAfter();\n        } else if (position === Position.Before) {\n            this.moveBefore();\n        } else if (position === Position.Inside) {\n            if (node.isFolder() && node.is_open) {\n                this.moveInsideOpenFolder();\n            } else {\n                this.moveInside();\n            }\n        }\n    }\n\n    public remove(): void {\n        this.$ghost.remove();\n    }\n\n    public moveAfter(): void {\n        this.$element.after(this.$ghost);\n    }\n\n    public moveBefore(): void {\n        this.$element.before(this.$ghost);\n    }\n\n    public moveInsideOpenFolder(): void {\n        const childElement = this.node.children[0]?.element;\n\n        if (childElement) {\n            jQuery(childElement).before(this.$ghost);\n        }\n    }\n\n    public moveInside(): void {\n        this.$element.after(this.$ghost);\n        this.$ghost.addClass(\"jqtree-inside\");\n    }\n}\n","import __version__ from \"./version\";\nimport { DragAndDropHandler } from \"./dragAndDropHandler\";\nimport ElementsRenderer from \"./elementsRenderer\";\nimport DataLoader, { HandleFinishedLoading } from \"./dataLoader\";\nimport KeyHandler from \"./keyHandler\";\nimport MouseWidget from \"./mouse.widget\";\nimport { PositionInfo } from \"./types\";\nimport SaveStateHandler, { SavedState } from \"./saveStateHandler\";\nimport ScrollHandler from \"./scrollHandler\";\nimport SelectNodeHandler from \"./selectNodeHandler\";\nimport SimpleWidget from \"./simple.widget\";\nimport { Node, getPosition } from \"./node\";\nimport { isFunction } from \"./util\";\nimport { FolderElement, NodeElement, OnFinishOpenNode } from \"./nodeElement\";\nimport { JQTreeOptions } from \"./jqtreeOptions\";\n\ninterface ClickTarget {\n    node: Node;\n    type: \"button\" | \"label\";\n}\n\ninterface SelectNodeOptions {\n    mustToggle?: boolean;\n    mustSetFocus?: boolean;\n}\n\nconst NODE_PARAM_IS_EMPTY = \"Node parameter is empty\";\nconst PARAM_IS_EMPTY = \"Parameter is empty: \";\n\nexport class JqTreeWidget extends MouseWidget<JQTreeOptions> {\n    protected static defaults: JQTreeOptions = {\n        animationSpeed: \"fast\",\n        autoEscape: true,\n        autoOpen: false, // true / false / int (open n levels starting at 0)\n        buttonLeft: true,\n        // The symbol to use for a closed node - ► BLACK RIGHT-POINTING POINTER\n        // http://www.fileformat.info/info/unicode/char/25ba/index.htm\n        closedIcon: undefined,\n        data: undefined,\n        dataFilter: undefined,\n        dataUrl: undefined,\n        dragAndDrop: false,\n        keyboardSupport: true,\n        nodeClass: Node,\n        onCanMove: undefined, // Can this node be moved?\n        onCanMoveTo: undefined, // Can this node be moved to this position? function(moved_node, target_node, position)\n        onCanSelectNode: undefined,\n        onCreateLi: undefined,\n        onDragMove: undefined,\n        onDragStop: undefined,\n        onGetStateFromStorage: undefined,\n        onIsMoveHandle: undefined,\n        onLoadFailed: undefined,\n        onLoading: undefined,\n        onSetStateFromStorage: undefined,\n        openedIcon: \"&#x25bc;\",\n        openFolderDelay: 500, // The delay for opening a folder during drag and drop; the value is in milliseconds\n        // The symbol to use for an open node - ▼ BLACK DOWN-POINTING TRIANGLE\n        // http://www.fileformat.info/info/unicode/char/25bc/index.htm\n        rtl: undefined, // right-to-left support; true / false (default)\n        saveState: false, // true / false / string (cookie name)\n        selectable: true,\n        showEmptyFolder: false,\n        slide: true, // must display slide animation?\n        startDndDelay: 300, // The delay for starting dnd (in milliseconds)\n        tabIndex: 0,\n        useContextMenu: true,\n    };\n\n    public element: JQuery;\n    public tree: Node;\n    public dndHandler: DragAndDropHandler;\n    public renderer: ElementsRenderer;\n    public dataLoader: DataLoader;\n    public scrollHandler: ScrollHandler;\n    public selectNodeHandler: SelectNodeHandler;\n\n    private isInitialized: boolean;\n    private saveStateHandler: SaveStateHandler;\n    private keyHandler: KeyHandler;\n\n    public toggle(node: Node, slideParam: null | boolean = null): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.is_open) {\n            this.closeNode(node, slide);\n        } else {\n            this.openNode(node, slide);\n        }\n\n        return this.element;\n    }\n\n    public getTree(): Node {\n        return this.tree;\n    }\n\n    public selectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions\n    ): JQuery {\n        this.doSelectNode(node, optionsParam);\n        return this.element;\n    }\n\n    public getSelectedNode(): Node | false {\n        return this.selectNodeHandler.getSelectedNode();\n    }\n\n    public toJson(): string {\n        return JSON.stringify(this.tree.getData());\n    }\n\n    public loadData(data: NodeData[], parentNode: Node | null): JQuery {\n        this.doLoadData(data, parentNode);\n        return this.element;\n    }\n\n    /*\n    signatures:\n    - loadDataFromUrl(url, parent_node=null, on_finished=null)\n        loadDataFromUrl('/my_data');\n        loadDataFromUrl('/my_data', node1);\n        loadDataFromUrl('/my_data', node1, function() { console.log('finished'); });\n        loadDataFromUrl('/my_data', null, function() { console.log('finished'); });\n\n    - loadDataFromUrl(parent_node=null, on_finished=null)\n        loadDataFromUrl();\n        loadDataFromUrl(node1);\n        loadDataFromUrl(null, function() { console.log('finished'); });\n        loadDataFromUrl(node1, function() { console.log('finished'); });\n    */\n    public loadDataFromUrl(\n        param1: string | null | Node,\n        param2?: Node | null | HandleFinishedLoading,\n        param3?: HandleFinishedLoading\n    ): JQuery {\n        if (typeof param1 === \"string\") {\n            // first parameter is url\n            this.doLoadDataFromUrl(\n                param1,\n                param2 as Node | null,\n                param3 ?? null\n            );\n        } else {\n            // first parameter is not url\n            this.doLoadDataFromUrl(\n                null,\n                param1,\n                param2 as HandleFinishedLoading | null\n            );\n        }\n\n        return this.element;\n    }\n\n    public reload(onFinished: HandleFinishedLoading | null): JQuery {\n        this.doLoadDataFromUrl(null, null, onFinished);\n        return this.element;\n    }\n\n    public refresh(): JQuery {\n        this._refreshElements(null);\n        return this.element;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.tree.getNodeById(nodeId);\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.tree.getNodeByName(name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        return this.tree.getNodeByNameMustExist(name);\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.tree.getNodesByProperty(key, value);\n    }\n\n    public getNodeByHtmlElement(\n        element: HTMLElement | JQuery<HTMLElement>\n    ): Node | null {\n        return this.getNode(jQuery(element));\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        return this.tree.getNodeByCallback(callback);\n    }\n\n    public openNode(\n        node: Node,\n        param1?: boolean | OnFinishOpenNode,\n        param2?: OnFinishOpenNode\n    ): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const parseParams = (): [boolean, OnFinishOpenNode | null] => {\n            let onFinished: OnFinishOpenNode | null;\n            let slide: boolean | null;\n\n            if (isFunction(param1)) {\n                onFinished = param1 as OnFinishOpenNode | null;\n                slide = null;\n            } else {\n                slide = param1 as boolean;\n                onFinished = param2 as OnFinishOpenNode;\n            }\n\n            if (slide == null) {\n                slide = this.options.slide ?? false;\n            }\n\n            return [slide, onFinished];\n        };\n\n        const [slide, onFinished] = parseParams();\n\n        this._openNode(node, slide, onFinished);\n        return this.element;\n    }\n\n    public closeNode(node: Node, slideParam?: null | boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            new FolderElement(node, this).close(\n                slide,\n                this.options.animationSpeed\n            );\n\n            this.saveState();\n        }\n\n        return this.element;\n    }\n\n    public isDragging(): boolean {\n        return this.dndHandler.isDragging;\n    }\n\n    public refreshHitAreas(): JQuery {\n        this.dndHandler.refresh();\n        return this.element;\n    }\n\n    public addNodeAfter(\n        newNodeInfo: NodeData,\n        existingNode: Node\n    ): Node | null {\n        const newNode = existingNode.addAfter(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addNodeBefore(\n        newNodeInfo: NodeData,\n        existingNode: Node\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addBefore(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addParentNode(\n        newNodeInfo: NodeData,\n        existingNode: Node\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addParent(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(newNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public removeNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!node.parent) {\n            throw Error(\"Node has no parent\");\n        }\n\n        this.selectNodeHandler.removeFromSelection(node, true); // including children\n\n        const parent = node.parent;\n        node.remove();\n        this._refreshElements(parent);\n\n        return this.element;\n    }\n\n    public appendNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam || this.tree;\n\n        const node = parentNode.append(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public prependNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam ?? this.tree;\n\n        const node = parentNode.prepend(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public updateNode(node: Node, data: NodeData): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const idIsChanged =\n            typeof data === \"object\" && data.id && data.id !== node.id;\n\n        if (idIsChanged) {\n            this.tree.removeNodeFromIndex(node);\n        }\n\n        node.setData(data);\n\n        if (idIsChanged) {\n            this.tree.addNodeToIndex(node);\n        }\n\n        if (\n            typeof data === \"object\" &&\n            data[\"children\"] &&\n            data[\"children\"] instanceof Array\n        ) {\n            node.removeChildren();\n\n            if (data.children.length) {\n                node.loadFromData(data.children as Node[]);\n            }\n        }\n\n        this._refreshElements(node);\n\n        return this.element;\n    }\n\n    private isSelectedNodeInSubtree(subtree: Node): boolean {\n        const selectedNode = this.getSelectedNode();\n\n        if (!selectedNode) {\n            return false;\n        } else {\n            return subtree === selectedNode || subtree.isParentOf(selectedNode);\n        }\n    }\n\n    public moveNode(node: Node, targetNode: Node, position: string): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!targetNode) {\n            throw Error(PARAM_IS_EMPTY + \"targetNode\");\n        }\n\n        const positionIndex = getPosition(position);\n\n        if (positionIndex !== undefined) {\n            this.tree.moveNode(node, targetNode, positionIndex);\n            this._refreshElements(null);\n        }\n\n        return this.element;\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        return this.saveStateHandler.getStateFromStorage();\n    }\n\n    public addToSelection(node: Node, mustSetFocus?: boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.addToSelection(node);\n\n        this._getNodeElementForNode(node).select(\n            mustSetFocus === undefined ? true : mustSetFocus\n        );\n\n        this.saveState();\n\n        return this.element;\n    }\n\n    public getSelectedNodes(): Node[] {\n        return this.selectNodeHandler.getSelectedNodes();\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        return this.selectNodeHandler.isNodeSelected(node);\n    }\n\n    public removeFromSelection(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.removeFromSelection(node);\n\n        this._getNodeElementForNode(node).deselect();\n        this.saveState();\n\n        return this.element;\n    }\n\n    public scrollToNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const nodeOffset = jQuery(node.element).offset();\n        const nodeTop = nodeOffset ? nodeOffset.top : 0;\n\n        const treeOffset = this.$el.offset();\n        const treeTop = treeOffset ? treeOffset.top : 0;\n\n        const top = nodeTop - treeTop;\n\n        this.scrollHandler.scrollToY(top);\n\n        return this.element;\n    }\n\n    public getState(): SavedState | null {\n        return this.saveStateHandler.getState();\n    }\n\n    public setState(state: SavedState): JQuery {\n        this.saveStateHandler.setInitialState(state);\n        this._refreshElements(null);\n\n        return this.element;\n    }\n\n    public setOption(option: string, value: unknown): JQuery {\n        (this.options as unknown as Record<string, unknown>)[option] = value;\n        return this.element;\n    }\n\n    public moveDown(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveDown(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public moveUp(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveUp(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public getVersion(): string {\n        return __version__;\n    }\n\n    public _triggerEvent(\n        eventName: string,\n        values?: Record<string, unknown>\n    ): JQuery.Event {\n        const event = jQuery.Event(eventName, values);\n        this.element.trigger(event);\n        return event;\n    }\n\n    public _openNode(\n        node: Node,\n        slide = true,\n        onFinished: OnFinishOpenNode | null\n    ): void {\n        const doOpenNode = (\n            _node: Node,\n            _slide: boolean,\n            _onFinished: OnFinishOpenNode | null\n        ): void => {\n            const folderElement = new FolderElement(_node, this);\n            folderElement.open(\n                _onFinished,\n                _slide,\n                this.options.animationSpeed\n            );\n        };\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            if (node.load_on_demand) {\n                this.loadFolderOnDemand(node, slide, onFinished);\n            } else {\n                let parent = node.parent;\n\n                while (parent) {\n                    // nb: do not open root element\n                    if (parent.parent) {\n                        doOpenNode(parent, false, null);\n                    }\n                    parent = parent.parent;\n                }\n\n                doOpenNode(node, slide, onFinished);\n                this.saveState();\n            }\n        }\n    }\n\n    /*\n    Redraw the tree or part of the tree.\n     from_node: redraw this subtree\n    */\n    public _refreshElements(fromNode: Node | null): void {\n        const mustSetFocus = this.selectNodeHandler.isFocusOnTree();\n        const mustSelect = fromNode\n            ? this.isSelectedNodeInSubtree(fromNode)\n            : false;\n\n        this.renderer.render(fromNode);\n\n        if (mustSelect) {\n            this.selectCurrentNode(mustSetFocus);\n        }\n\n        this._triggerEvent(\"tree.refresh\");\n    }\n\n    public _getNodeElementForNode(node: Node): NodeElement {\n        if (node.isFolder()) {\n            return new FolderElement(node, this);\n        } else {\n            return new NodeElement(node, this);\n        }\n    }\n\n    public _getNodeElement($element: JQuery<HTMLElement>): NodeElement | null {\n        const node = this.getNode($element);\n        if (node) {\n            return this._getNodeElementForNode(node);\n        } else {\n            return null;\n        }\n    }\n\n    public _containsElement(element: HTMLElement): boolean {\n        const node = this.getNode(jQuery(element));\n\n        return node != null && node.tree === this.tree;\n    }\n\n    public _getScrollLeft(): number {\n        return this.scrollHandler.getScrollLeft();\n    }\n\n    public init(): void {\n        super.init();\n\n        this.element = this.$el;\n        this.isInitialized = false;\n\n        this.options.rtl = this.getRtlOption();\n\n        if (this.options.closedIcon == null) {\n            this.options.closedIcon = this.getDefaultClosedIcon();\n        }\n\n        this.renderer = new ElementsRenderer(this);\n        this.dataLoader = new DataLoader(this);\n        this.saveStateHandler = new SaveStateHandler(this);\n        this.selectNodeHandler = new SelectNodeHandler(this);\n        this.dndHandler = new DragAndDropHandler(this);\n        this.scrollHandler = new ScrollHandler(this);\n        this.keyHandler = new KeyHandler(this);\n\n        this.initData();\n\n        this.element.on(\"click\", this.handleClick);\n        this.element.on(\"dblclick\", this.handleDblclick);\n\n        if (this.options.useContextMenu) {\n            this.element.on(\"contextmenu\", this.handleContextmenu);\n        }\n    }\n\n    public deinit(): void {\n        this.element.empty();\n        this.element.off();\n\n        this.keyHandler.deinit();\n\n        this.tree = new Node({}, true);\n\n        super.deinit();\n    }\n\n    protected mouseCapture(positionInfo: PositionInfo): boolean | null {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseCapture(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStart(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStart(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseDrag(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            const result = this.dndHandler.mouseDrag(positionInfo);\n\n            this.scrollHandler.checkScrolling();\n            return result;\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStop(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStop(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected getMouseDelay(): number {\n        return this.options.startDndDelay ?? 0;\n    }\n\n    private initData(): void {\n        if (this.options.data) {\n            this.doLoadData(this.options.data, null);\n        } else {\n            const dataUrl = this.getDataUrlInfo(null);\n\n            if (dataUrl) {\n                this.doLoadDataFromUrl(null, null, null);\n            } else {\n                this.doLoadData([], null);\n            }\n        }\n    }\n\n    private getDataUrlInfo(node: Node | null): JQuery.AjaxSettings | null {\n        const dataUrl =\n            this.options.dataUrl || (this.element.data(\"url\") as string | null);\n\n        const getUrlFromString = (url: string): JQuery.AjaxSettings => {\n            const urlInfo: JQuery.AjaxSettings = { url };\n\n            setUrlInfoData(urlInfo);\n\n            return urlInfo;\n        };\n\n        const setUrlInfoData = (urlInfo: JQuery.AjaxSettings): void => {\n            if (node?.id) {\n                // Load on demand of a subtree; add node parameter\n                const data = { node: node.id };\n                urlInfo[\"data\"] = data;\n            } else {\n                // Add selected_node parameter\n                const selectedNodeId = this.getNodeIdToBeSelected();\n                if (selectedNodeId) {\n                    const data = { selected_node: selectedNodeId };\n                    urlInfo[\"data\"] = data;\n                }\n            }\n        };\n\n        if (typeof dataUrl === \"function\") {\n            return dataUrl(node);\n        } else if (typeof dataUrl === \"string\") {\n            return getUrlFromString(dataUrl);\n        } else if (dataUrl && typeof dataUrl === \"object\") {\n            setUrlInfoData(dataUrl);\n            return dataUrl;\n        } else {\n            return null;\n        }\n    }\n\n    private getNodeIdToBeSelected(): NodeId | null {\n        if (this.options.saveState) {\n            return this.saveStateHandler.getNodeIdToBeSelected();\n        } else {\n            return null;\n        }\n    }\n\n    private initTree(data: NodeData[]): void {\n        const doInit = (): void => {\n            if (!this.isInitialized) {\n                this.isInitialized = true;\n                this._triggerEvent(\"tree.init\");\n            }\n        };\n\n        if (!this.options.nodeClass) {\n            return;\n        }\n\n        this.tree = new this.options.nodeClass(\n            null,\n            true,\n            this.options.nodeClass\n        );\n\n        this.selectNodeHandler.clear();\n\n        this.tree.loadFromData(data);\n\n        const mustLoadOnDemand = this.setInitialState();\n\n        this._refreshElements(null);\n\n        if (!mustLoadOnDemand) {\n            doInit();\n        } else {\n            // Load data on demand and then init the tree\n            this.setInitialStateOnDemand(doInit);\n        }\n    }\n\n    // Set initial state, either by restoring the state or auto-opening nodes\n    // result: must load nodes on demand?\n    private setInitialState(): boolean {\n        const restoreState = (): [boolean, boolean] => {\n            // result: is state restored, must load on demand?\n            if (!this.options.saveState) {\n                return [false, false];\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return [false, false];\n                } else {\n                    const mustLoadOnDemand =\n                        this.saveStateHandler.setInitialState(state);\n\n                    // return true: the state is restored\n                    return [true, mustLoadOnDemand];\n                }\n            }\n        };\n\n        const autoOpenNodes = (): boolean => {\n            // result: must load on demand?\n            if (this.options.autoOpen === false) {\n                return false;\n            }\n\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let mustLoadOnDemand = false;\n\n            this.tree.iterate((node: Node, level: number) => {\n                if (node.load_on_demand) {\n                    mustLoadOnDemand = true;\n                    return false;\n                } else if (!node.hasChildren()) {\n                    return false;\n                } else {\n                    node.is_open = true;\n                    return level !== maxLevel;\n                }\n            });\n\n            return mustLoadOnDemand;\n        };\n\n        let [isRestored, mustLoadOnDemand] = restoreState(); // eslint-disable-line prefer-const\n\n        if (!isRestored) {\n            mustLoadOnDemand = autoOpenNodes();\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    // Set the initial state for nodes that are loaded on demand\n    // Call cb_finished when done\n    private setInitialStateOnDemand(cbFinished: () => void): void {\n        const restoreState = (): boolean => {\n            if (!this.options.saveState) {\n                return false;\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return false;\n                } else {\n                    this.saveStateHandler.setInitialStateOnDemand(\n                        state,\n                        cbFinished\n                    );\n\n                    return true;\n                }\n            }\n        };\n\n        const autoOpenNodes = (): void => {\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let loadingCount = 0;\n\n            const loadAndOpenNode = (node: Node): void => {\n                loadingCount += 1;\n                this._openNode(node, false, () => {\n                    loadingCount -= 1;\n                    openNodes();\n                });\n            };\n\n            const openNodes = (): void => {\n                this.tree.iterate((node: Node, level: number) => {\n                    if (node.load_on_demand) {\n                        if (!node.is_loading) {\n                            loadAndOpenNode(node);\n                        }\n\n                        return false;\n                    } else {\n                        this._openNode(node, false, null);\n\n                        return level !== maxLevel;\n                    }\n                });\n\n                if (loadingCount === 0) {\n                    cbFinished();\n                }\n            };\n\n            openNodes();\n        };\n\n        if (!restoreState()) {\n            autoOpenNodes();\n        }\n    }\n\n    private getAutoOpenMaxLevel(): number {\n        if (this.options.autoOpen === true) {\n            return -1;\n        } else if (typeof this.options.autoOpen === \"number\") {\n            return this.options.autoOpen;\n        } else if (typeof this.options.autoOpen === \"string\") {\n            return parseInt(this.options.autoOpen, 10);\n        } else {\n            return 0;\n        }\n    }\n\n    private handleClick = (\n        e: JQuery.ClickEvent<HTMLElement, any, HTMLElement, HTMLElement>\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget) {\n            if (clickTarget.type === \"button\") {\n                this.toggle(clickTarget.node, this.options.slide);\n\n                e.preventDefault();\n                e.stopPropagation();\n            } else if (clickTarget.type === \"label\") {\n                const node = clickTarget.node;\n                const event = this._triggerEvent(\"tree.click\", {\n                    node,\n                    click_event: e,\n                });\n\n                if (!event.isDefaultPrevented()) {\n                    this.doSelectNode(node);\n                }\n            }\n        }\n    };\n\n    private handleDblclick = (\n        e: JQuery.DoubleClickEvent<HTMLElement, any, HTMLElement, HTMLElement>\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget?.type === \"label\") {\n            this._triggerEvent(\"tree.dblclick\", {\n                node: clickTarget.node,\n                click_event: e,\n            });\n        }\n    };\n\n    private getClickTarget(element: EventTarget): ClickTarget | null {\n        const $target = jQuery(element);\n\n        const $button = $target.closest(\".jqtree-toggler\");\n\n        if ($button.length) {\n            const node = this.getNode($button as JQuery<HTMLElement>);\n\n            if (node) {\n                return {\n                    type: \"button\",\n                    node,\n                };\n            }\n        } else {\n            const $el = $target.closest(\".jqtree-element\");\n            if ($el.length) {\n                const node = this.getNode($el as JQuery<HTMLElement>);\n                if (node) {\n                    return {\n                        type: \"label\",\n                        node,\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    private getNode($element: JQuery<HTMLElement>): null | Node {\n        const $li = $element.closest(\"li.jqtree_common\");\n        if ($li.length === 0) {\n            return null;\n        } else {\n            return $li.data(\"node\") as Node;\n        }\n    }\n\n    private handleContextmenu = (\n        e: JQuery.ContextMenuEvent<HTMLElement, any, HTMLElement, HTMLElement>\n    ) => {\n        const $div = jQuery(e.target).closest(\"ul.jqtree-tree .jqtree-element\");\n        if ($div.length) {\n            const node = this.getNode($div);\n            if (node) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                this._triggerEvent(\"tree.contextmenu\", {\n                    node,\n                    click_event: e,\n                });\n                return false;\n            }\n        }\n\n        return null;\n    };\n\n    private saveState(): void {\n        if (this.options.saveState) {\n            this.saveStateHandler.saveState();\n        }\n    }\n\n    private selectCurrentNode(mustSetFocus: boolean): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            const nodeElement = this._getNodeElementForNode(node);\n            if (nodeElement) {\n                nodeElement.select(mustSetFocus);\n            }\n        }\n    }\n\n    private deselectCurrentNode(): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            this.removeFromSelection(node);\n        }\n    }\n\n    private getDefaultClosedIcon(): string {\n        if (this.options.rtl) {\n            // triangle to the left\n            return \"&#x25c0;\";\n        } else {\n            // triangle to the right\n            return \"&#x25ba;\";\n        }\n    }\n\n    private getRtlOption(): boolean {\n        if (this.options.rtl != null) {\n            return this.options.rtl;\n        } else {\n            const dataRtl = this.element.data(\"rtl\") as unknown;\n\n            if (\n                dataRtl !== null &&\n                dataRtl !== false &&\n                dataRtl !== undefined\n            ) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    private doSelectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions\n    ): void {\n        const saveState = (): void => {\n            if (this.options.saveState) {\n                this.saveStateHandler.saveState();\n            }\n        };\n\n        if (!node) {\n            // Called with empty node -> deselect current node\n            this.deselectCurrentNode();\n            saveState();\n            return;\n        }\n        const defaultOptions = { mustSetFocus: true, mustToggle: true };\n        const selectOptions = { ...defaultOptions, ...(optionsParam || {}) };\n\n        const canSelect = (): boolean => {\n            if (this.options.onCanSelectNode) {\n                return (\n                    this.options.selectable === true &&\n                    this.options.onCanSelectNode(node)\n                );\n            } else {\n                return this.options.selectable === true;\n            }\n        };\n\n        const openParents = (): void => {\n            const parent = node.parent;\n\n            if (parent && parent.parent && !parent.is_open) {\n                this.openNode(parent, false);\n            }\n        };\n\n        if (!canSelect()) {\n            return;\n        }\n\n        if (this.selectNodeHandler.isNodeSelected(node)) {\n            if (selectOptions.mustToggle) {\n                this.deselectCurrentNode();\n                this._triggerEvent(\"tree.select\", {\n                    node: null,\n                    previous_node: node,\n                });\n            }\n        } else {\n            const deselectedNode = this.getSelectedNode() || null;\n            this.deselectCurrentNode();\n            this.addToSelection(node, selectOptions.mustSetFocus);\n\n            this._triggerEvent(\"tree.select\", {\n                node,\n                deselected_node: deselectedNode,\n            });\n            openParents();\n        }\n\n        saveState();\n    }\n\n    private doLoadData(data: NodeData[] | null, parentNode: Node | null): void {\n        if (data) {\n            if (parentNode) {\n                this.deselectNodes(parentNode);\n                this.loadSubtree(data, parentNode);\n            } else {\n                this.initTree(data);\n            }\n\n            if (this.isDragging()) {\n                this.dndHandler.refresh();\n            }\n        }\n\n        this._triggerEvent(\"tree.load_data\", {\n            tree_data: data,\n            parent_node: parentNode,\n        });\n    }\n\n    private deselectNodes(parentNode: Node): void {\n        const selectedNodesUnderParent =\n            this.selectNodeHandler.getSelectedNodesUnder(parentNode);\n        for (const n of selectedNodesUnderParent) {\n            this.selectNodeHandler.removeFromSelection(n);\n        }\n    }\n\n    private loadSubtree(data: NodeData[], parentNode: Node): void {\n        parentNode.loadFromData(data);\n\n        parentNode.load_on_demand = false;\n        parentNode.is_loading = false;\n\n        this._refreshElements(parentNode);\n    }\n\n    private doLoadDataFromUrl(\n        urlInfoParam: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null\n    ): void {\n        const urlInfo = urlInfoParam || this.getDataUrlInfo(parentNode);\n\n        this.dataLoader.loadFromUrl(urlInfo, parentNode, onFinished);\n    }\n\n    private loadFolderOnDemand(\n        node: Node,\n        slide = true,\n        onFinished: OnFinishOpenNode | null\n    ): void {\n        node.is_loading = true;\n\n        this.doLoadDataFromUrl(null, node, () => {\n            this._openNode(node, slide, onFinished);\n        });\n    }\n}\n\nSimpleWidget.register(JqTreeWidget, \"tree\");\n"],"names":["Position","positionNames","before","Before","after","After","inside","Inside","none","None","getPositionName","position","name","Object","prototype","hasOwnProperty","call","isNodeRecordWithChildren","data","_typeof","Array","Node","o","arguments","length","undefined","isRoot","nodeClass","_classCallCheck","_defineProperty","this","isEmptyFolder","load_on_demand","setData","children","parent","idMapping","Map","tree","_createClass","key","value","removeChildren","_step","_iterator","_createForOfIteratorHelper","s","n","done","node","createNode","addChild","loadFromData","err","e","f","push","setParent","index","splice","doRemoveChild","indexOf","hasChildren","callback","_iterate","level","_step2","_iterator2","child","movedNode","targetNode","isParentOf","addChildAtPosition","getChildIndex","getDataFromNodes","nodes","map","tmpNode","k","v","getNodeByCallback","concat","result","iterate","nodeInfo","childIndex","newParent","_step3","originalParent","_iterator3","removeChild","nodeId","get","id","set","_this","_this$tree","removeNodeFromIndex","previousIndex","nextIndex","filter","nextSibling","getNextSibling","getNextNode","is_open","previousSibling","getPreviousSibling","getLastChild","getParent","lastChild","nodeData","_this2","addChildren","childrenData","_step4","_iterator4","initFromData","_this$tree2","addNodeToIndex","_this$tree3","_this$tree4","getNodeClass","DragAndDropHandler","treeWidget","hoveredArea","hitAreas","isDragging","currentItem","positionInfo","$element","jQuery","target","mustCaptureElement","options","onIsMoveHandle","nodeElement","_getNodeElement","onCanMove","_this$treeWidget$opti","pageX","pageY","refresh","offset","left","top","dragElement","DragElement","element","autoEscape","classList","add","move","area","findHoveredArea","canMoveToArea","isFolder","stopOpenFolderTimer","mustOpenFolderTimer","startOpenFolderTimer","updateDropHint","removeDropHint","onDragMove","originalEvent","moveItem","clear","removeHover","removeHitAreas","remove","onDragStop","generateHitAreas","_getNodeElementForNode","hitAreasGenerator","HitAreasGenerator","getTreeDimensions","bottom","generate","is","onCanMoveTo","positionName","previousGhost","x","y","dimensions","right","low","high","mid","addDropHint","folder","openFolderDelay","openFolderTimer","window","setTimeout","_openNode","slide","clearTimeout","previousParent","doMove","moveNode","empty","_refreshElements","_triggerEvent","move_info","moved_node","target_node","previous_parent","do_move","original_event","isDefaultPrevented","el","width","height","_getScrollLeft","_VisibleNodeIterator","_inherits","_super","_createSuper","currentNode","treeBottom","_this4","_assertThisInitialized","positions","lastTop","previousTop","group","generateHitAreasForGroup","addPosition","getTop","nextNode","positionsInGroup","positionCount","Math","min","areaHeight","round","areaTop","i","VisibleNodeIterator","_this3","isFirstNode","_iterateNode","mustIterateInside","handleFirstNode","handleOpenFolder","handleClosedFolder","handleNode","childrenLength","forEach","_","nextChild","handleAfterOpenFolder","nodeName","offsetX","offsetY","$tree","addClass","text","html","css","append","getBoolString","ElementsRenderer","openedIconElement","createButtonElement","openedIcon","closedIconElement","closedIcon","fromNode","renderFromNode","renderFromRoot","createDomElements","$previousLi","li","createLi","getLevel","attachNodeData","isRootNode","ul","createUl","appendChild","classString","role","rtl","dragAndDrop","document","createElement","className","setAttribute","isSelected","Boolean","selectNodeHandler","isNodeSelected","showEmptyFolder","createFolderLi","createNodeLi","onCreateLi","buttonClasses","getButtonClasses","folderClasses","getFolderClasses","iconElement","div","buttonLink","cloneNode","buttonLeft","titleSpan","createTitleSpan","liClasses","join","classes","tabIndex","setTreeItemAriaAttributes","textContent","innerHTML","is_loading","createTextNode","nodeType","DataLoader","urlInfo","parentNode","onFinished","$el","getDomElement","addLoadingClass","notifyLoading","stopLoading","removeLoadingClass","submitRequest","loadData","parseData","jqXHR","onLoadFailed","removeClass","isLoading","onLoading","urlInfoInput","handleSuccess","handleError","_ajaxSettings$method","ajaxSettings","_objectSpread","method","cache","dataType","success","error","url","toUpperCase","ajax","dataFilter","parsedData","JSON","parse","KeyHandler","canHandleKeyboard","selectedNode","getSelectedNode","which","DOWN","moveDown","UP","moveUp","RIGHT","moveRight","LEFT","moveLeft","keyboardSupport","on","handleKeyDown","off","selectNode","getNextVisibleNode","getPreviousVisibleNode","openNode","closeNode","scrollHandler","isScrolledIntoView","find","scrollToNode","isFocusOnTree","register","widgetClass","widgetName","getDataKey","getWidgetData","dataKey","widget","SimpleWidget","createWidget","init","fn","argument1","functionName","destroy","removeData","destroyWidget","_len","args","_key","widgetFunction","apply","callFunction","defaults","constructor","deinit","getPositionInfoFromMouseEvent","getPositionInfoFromTouch","touch","MouseWidget","_SimpleWidget","button","handleMouseDown","cancelable","preventDefault","handleMouseMove","handleMouseUp","touches","changedTouches","addEventListener","mouseDown","passive","touchStart","isMouseStarted","mouseDelayTimer","isMouseDelayMet","mouseDownInfo","removeEventListener","removeMouseMoveEventListeners","mouseCapture","handleStartMouse","mouseMove","touchMove","mouseUp","touchEnd","mouseDelay","getMouseDelay","startMouseDelayTimer","mouseDrag","mouseStart","mouseStop","SaveStateHandler","state","stringify","getState","onSetStateFromStorage","supportsLocalStorage","localStorage","setItem","getKeyName","jsonData","loadFromStorage","parseState","selectedNodeIds","openNodes","open_nodes","selected_node","getSelectedNodes","mustLoadOnDemand","openInitialNodes","resetSelection","selectInitialNodes","cbFinished","doSetInitialStateOnDemand","getStateFromStorage","onGetStateFromStorage","getItem","nodeIds","getNodeById","selectCount","addToSelection","removeFromSelection","nodeIdsParam","selectedNodes","loadingCount","newNodesIds","loadAndOpenNode","saveState","_supportsLocalStorage","sessionStorage","removeItem","testSupport","ScrollHandler","isInitialized","ensureInit","checkVerticalScrolling","checkHorizontalScrolling","$scrollParent","scrollTop","treeTop","elementBottom","viewBottom","elementTop","viewTop","elHeight","scrollParentTop","scrollLeft","_$scrollParent$","setDocumentAsScrollParent","cssAttributes","hasOverFlow","_i","_cssAttributes","attr","overflowValue","parents","getParentWithOverflow","tagName","initScrollParent","scrollParent","offsetHeight","refreshHitAreas","dndHandler","handleVerticalScrollingWithScrollParent","handleVerticalScrollingWithDocument","handleHorizontalScrollingWithParent","handleHorizontalScrollingWithDocument","scrollParentOffset","canScrollRight","clientWidth","scrollWidth","canScrollLeft","rightEdge","leftEdge","isNearRightEdge","isNearLeftEdge","max","$document","windowWidth","SelectNodeHandler","Set","selectedSingleNode","has","includeChildren","activeElement","_containsElement","NodeElement","mustShowBorderDropHint","BorderDropHint","GhostDropHint","mustSetFocus","getTitleSpan","toString","focus","removeAttribute","blur","querySelector","FolderElement","_NodeElement","animationSpeed","getButton","renderer","icon","doOpen","getUl","slideDown","show","doClose","slideUp","hide","$div","elWidth","outerHeight","$hint","$ghost","moveAfter","moveBefore","moveInsideOpenFolder","moveInside","_this$node$children$","childElement","NODE_PARAM_IS_EMPTY","PARAM_IS_EMPTY","JqTreeWidget","_MouseWidget","clickTarget","getClickTarget","type","toggle","stopPropagation","click_event","doSelectNode","closest","getNode","slideParam","Error","optionsParam","getData","doLoadData","param1","param2","param3","doLoadDataFromUrl","getNodeByName","getNodeByNameMustExist","getNodesByProperty","_parseParams","_this2$options$slide","parseParams","_parseParams2","_slicedToArray","close","newNodeInfo","existingNode","newNode","addAfter","addBefore","addParent","parentNodeParam","prepend","idIsChanged","subtree","positionIndex","saveStateHandler","select","deselect","nodeOffset","nodeTop","treeOffset","scrollToY","setInitialState","option","keyHandler","eventName","values","event","Event","trigger","doOpenNode","_node","_slide","_onFinished","open","loadFolderOnDemand","mustSelect","isSelectedNodeInSubtree","render","selectCurrentNode","getScrollLeft","_get","_getPrototypeOf","getRtlOption","getDefaultClosedIcon","dataLoader","initData","handleClick","handleDblclick","useContextMenu","handleContextmenu","checkScrolling","_this$options$startDn","startDndDelay","getDataUrlInfo","dataUrl","setUrlInfoData","selectedNodeId","getNodeIdToBeSelected","_this5","doInit","setInitialStateOnDemand","_this6","_restoreState2","restoreState","isRestored","autoOpen","maxLevel","getAutoOpenMaxLevel","autoOpenNodes","_this7","parseInt","$target","$button","$li","dataRtl","_this8","deselectCurrentNode","selectOptions","mustToggle","onCanSelectNode","selectable","previous_node","deselectedNode","deselected_node","deselectNodes","loadSubtree","initTree","tree_data","parent_node","getSelectedNodesUnder","urlInfoParam","loadFromUrl","_this9"],"mappings":"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"}