{"version":3,"file":"tree.jquery.js","sources":["src/version.ts","src/nodeUtils.ts","src/node.ts","src/dragAndDropHandler.ts","src/util.ts","src/elementsRenderer.ts","src/dataLoader.ts","src/keyHandler.ts","src/simple.widget.ts","src/mouse.widget.ts","src/saveStateHandler.ts","src/scrollHandler/containerScrollParent.ts","src/scrollHandler/documentScrollParent.ts","src/scrollHandler/createScrollParent.ts","src/scrollHandler.ts","src/selectNodeHandler.ts","src/nodeElement.ts","src/tree.jquery.ts"],"sourcesContent":["const version = \"1.7.4\";\n\nexport default version;\n","interface NodeRecordWithChildren extends NodeRecord {\n    children: NodeData[];\n}\n\nexport const isNodeRecordWithChildren = (\n    data: NodeData,\n): data is NodeRecordWithChildren =>\n    typeof data === \"object\" &&\n    \"children\" in data &&\n    data[\"children\"] instanceof Array;\n","import { isNodeRecordWithChildren } from \"./nodeUtils\";\n\nexport enum Position {\n    Before = 1,\n    After,\n    Inside,\n    None,\n}\n\nconst positionNames: Record<string, Position> = {\n    before: Position.Before,\n    after: Position.After,\n    inside: Position.Inside,\n    none: Position.None,\n};\n\ntype IterateCallback = (node: Node, level: number) => boolean;\n\nexport const getPositionName = (position: Position): string => {\n    for (const name in positionNames) {\n        if (Object.prototype.hasOwnProperty.call(positionNames, name)) {\n            if (positionNames[name] === position) {\n                return name;\n            }\n        }\n    }\n\n    return \"\";\n};\n\nexport const getPosition = (name: string): Position | undefined =>\n    positionNames[name];\n\nexport class Node implements INode {\n    public id?: NodeId;\n    public name: string;\n    public children: Node[];\n    public parent: Node | null;\n    public idMapping: Map<NodeId, Node>;\n    public tree?: Node;\n    public nodeClass?: typeof Node;\n    public load_on_demand: boolean;\n    public is_open: boolean;\n    public element: HTMLElement;\n    public is_loading: boolean;\n    public isEmptyFolder: boolean;\n\n    [key: string]: unknown;\n\n    constructor(\n        nodeData: NodeData | null = null,\n        isRoot = false,\n        nodeClass = Node,\n    ) {\n        this.name = \"\";\n        this.load_on_demand = false;\n\n        this.isEmptyFolder =\n            nodeData != null &&\n            isNodeRecordWithChildren(nodeData) &&\n            nodeData.children.length === 0;\n\n        this.setData(nodeData);\n\n        this.children = [];\n        this.parent = null;\n\n        if (isRoot) {\n            this.idMapping = new Map<NodeId, Node>();\n            this.tree = this;\n            this.nodeClass = nodeClass;\n        }\n    }\n\n    /*\n    Set the data of this node.\n\n    setData(string): set the name of the node\n    setData(object): set attributes of the node\n\n    Examples:\n        setData('node1')\n\n        setData({ name: 'node1', id: 1});\n\n        setData({ name: 'node2', id: 2, color: 'green'});\n\n    * This is an internal function; it is not in the docs\n    * Does not remove existing node values\n    */\n    public setData(o: NodeData | null): void {\n        if (!o) {\n            return;\n        } else if (typeof o === \"string\") {\n            this.name = o;\n        } else if (typeof o === \"object\") {\n            for (const key in o) {\n                if (Object.prototype.hasOwnProperty.call(o, key)) {\n                    const value = o[key];\n\n                    if (key === \"label\" || key === \"name\") {\n                        // You can use the 'label' key instead of 'name'; this is a legacy feature\n                        if (typeof value === \"string\") {\n                            this.name = value;\n                        }\n                    } else if (key !== \"children\" && key !== \"parent\") {\n                        // You can't update the children or the parent using this function\n                        this[key] = value;\n                    }\n                }\n            }\n        }\n    }\n\n    /*\n    Create tree from data.\n\n    Structure of data is:\n    [\n        {\n            name: 'node1',\n            children: [\n                { name: 'child1' },\n                { name: 'child2' }\n            ]\n        },\n        {\n            name: 'node2'\n        }\n    ]\n    */\n    public loadFromData(data: NodeData[]): Node {\n        this.removeChildren();\n\n        for (const childData of data) {\n            const node = this.createNode(childData);\n            this.addChild(node);\n\n            if (isNodeRecordWithChildren(childData)) {\n                node.loadFromData(childData.children);\n            }\n        }\n\n        return this;\n    }\n\n    /*\n    Add child.\n\n    tree.addChild(\n        new Node('child1')\n    );\n    */\n    public addChild(node: Node): void {\n        this.children.push(node);\n        node.setParent(this);\n    }\n\n    /*\n    Add child at position. Index starts at 0.\n\n    tree.addChildAtPosition(\n        new Node('abc'),\n        1\n    );\n    */\n    public addChildAtPosition(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        node.setParent(this);\n    }\n\n    /*\n    Remove child. This also removes the children of the node.\n\n    tree.removeChild(tree.children[0]);\n    */\n    public removeChild(node: Node): void {\n        // remove children from the index\n        node.removeChildren();\n\n        this.doRemoveChild(node);\n    }\n\n    /*\n    Get child index.\n\n    var index = getChildIndex(node);\n    */\n    public getChildIndex(node: Node): number {\n        return this.children.indexOf(node);\n    }\n\n    /*\n    Does the tree have children?\n\n    if (tree.hasChildren()) {\n        //\n    }\n    */\n    public hasChildren(): boolean {\n        return this.children.length !== 0;\n    }\n\n    public isFolder(): boolean {\n        return this.hasChildren() || this.load_on_demand;\n    }\n\n    /*\n    Iterate over all the nodes in the tree.\n\n    Calls callback with (node, level).\n\n    The callback must return true to continue the iteration on current node.\n\n    tree.iterate(\n        function(node, level) {\n           console.log(node.name);\n\n           // stop iteration after level 2\n           return (level <= 2);\n        }\n    );\n\n    */\n    public iterate(callback: IterateCallback): void {\n        const _iterate = (node: Node, level: number): void => {\n            if (node.children) {\n                for (const child of node.children) {\n                    const result = callback(child, level);\n\n                    if (result && child.hasChildren()) {\n                        _iterate(child, level + 1);\n                    }\n                }\n            }\n        };\n\n        _iterate(this, 0);\n    }\n\n    /*\n    Move node relative to another node.\n\n    Argument position: Position.BEFORE, Position.AFTER or Position.Inside\n\n    // move node1 after node2\n    tree.moveNode(node1, node2, Position.AFTER);\n    */\n    public moveNode(\n        movedNode: Node,\n        targetNode: Node,\n        position: Position,\n    ): boolean {\n        if (!movedNode.parent || movedNode.isParentOf(targetNode)) {\n            // - Node is parent of target node\n            // - Or, parent is empty\n            return false;\n        } else {\n            movedNode.parent.doRemoveChild(movedNode);\n\n            switch (position) {\n                case Position.After: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode) + 1,\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Before: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode),\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Inside: {\n                    // move inside as first child\n                    targetNode.addChildAtPosition(movedNode, 0);\n                    return true;\n                }\n\n                default:\n                    return false;\n            }\n        }\n    }\n\n    /*\n    Get the tree as data.\n    */\n    public getData(includeParent = false): NodeRecord[] {\n        const getDataFromNodes = (nodes: Node[]): Record<string, unknown>[] => {\n            return nodes.map((node) => {\n                const tmpNode: Record<string, unknown> = {};\n\n                for (const k in node) {\n                    if (\n                        [\n                            \"parent\",\n                            \"children\",\n                            \"element\",\n                            \"idMapping\",\n                            \"load_on_demand\",\n                            \"nodeClass\",\n                            \"tree\",\n                            \"isEmptyFolder\",\n                        ].indexOf(k) === -1 &&\n                        Object.prototype.hasOwnProperty.call(node, k)\n                    ) {\n                        const v = node[k];\n                        tmpNode[k] = v;\n                    }\n                }\n\n                if (node.hasChildren()) {\n                    tmpNode[\"children\"] = getDataFromNodes(node.children);\n                }\n\n                return tmpNode;\n            });\n        };\n\n        if (includeParent) {\n            return getDataFromNodes([this]);\n        } else {\n            return getDataFromNodes(this.children);\n        }\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.getNodeByCallback((node: Node) => node.name === name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        const node = this.getNodeByCallback((n: Node) => n.name === name);\n\n        if (!node) {\n            throw `Node with name ${name} not found`;\n        }\n\n        return node;\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        let result: Node | null = null;\n\n        this.iterate((node: Node) => {\n            if (result) {\n                return false;\n            } else if (callback(node)) {\n                result = node;\n                return false;\n            } else {\n                return true;\n            }\n        });\n\n        return result;\n    }\n\n    public addAfter(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex + 1);\n\n            node.loadChildrenFromData(nodeInfo);\n            return node;\n        }\n    }\n\n    public addBefore(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex);\n\n            node.loadChildrenFromData(nodeInfo);\n            return node;\n        }\n    }\n\n    public addParent(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const newParent = this.createNode(nodeInfo);\n\n            if (this.tree) {\n                newParent.setParent(this.tree);\n            }\n            const originalParent = this.parent;\n\n            for (const child of originalParent.children) {\n                newParent.addChild(child);\n            }\n\n            originalParent.children = [];\n            originalParent.addChild(newParent);\n            return newParent;\n        }\n    }\n\n    public remove(): void {\n        if (this.parent) {\n            this.parent.removeChild(this);\n            this.parent = null;\n        }\n    }\n\n    public append(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChild(node);\n\n        node.loadChildrenFromData(nodeInfo);\n        return node;\n    }\n\n    public prepend(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChildAtPosition(node, 0);\n\n        node.loadChildrenFromData(nodeInfo);\n        return node;\n    }\n\n    public isParentOf(node: Node): boolean {\n        let parent = node.parent;\n\n        while (parent) {\n            if (parent === this) {\n                return true;\n            }\n\n            parent = parent.parent;\n        }\n\n        return false;\n    }\n\n    public getLevel(): number {\n        let level = 0;\n        let node: Node = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n        while (node.parent) {\n            level += 1;\n            node = node.parent;\n        }\n\n        return level;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.idMapping.get(nodeId) || null;\n    }\n\n    public addNodeToIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.set(node.id, node);\n        }\n    }\n\n    public removeNodeFromIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.delete(node.id);\n        }\n    }\n\n    public removeChildren(): void {\n        this.iterate((child: Node) => {\n            this.tree?.removeNodeFromIndex(child);\n            return true;\n        });\n\n        this.children = [];\n    }\n\n    public getPreviousSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousIndex = this.parent.getChildIndex(this) - 1;\n            if (previousIndex >= 0) {\n                return this.parent.children[previousIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNextSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const nextIndex = this.parent.getChildIndex(this) + 1;\n            if (nextIndex < this.parent.children.length) {\n                return this.parent.children[nextIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.filter((node: Node) => node[key] === value);\n    }\n\n    public filter(f: (node: Node) => boolean): Node[] {\n        const result: Node[] = [];\n\n        this.iterate((node: Node) => {\n            if (f(node)) {\n                result.push(node);\n            }\n\n            return true;\n        });\n\n        return result;\n    }\n\n    public getNextNode(includeChildren = true): Node | null {\n        if (includeChildren && this.hasChildren()) {\n            return this.children[0] || null;\n        } else if (!this.parent) {\n            return null;\n        } else {\n            const nextSibling = this.getNextSibling();\n\n            if (nextSibling) {\n                return nextSibling;\n            } else {\n                return this.parent.getNextNode(false);\n            }\n        }\n    }\n\n    public getNextVisibleNode(): Node | null {\n        if (this.hasChildren() && this.is_open) {\n            // First child\n            return this.children[0] || null;\n        } else {\n            if (!this.parent) {\n                return null;\n            } else {\n                const nextSibling = this.getNextSibling();\n                if (nextSibling) {\n                    // Next sibling\n                    return nextSibling;\n                } else {\n                    // Next node of parent\n                    return this.parent.getNextNode(false);\n                }\n            }\n        }\n    }\n\n    public getPreviousNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (previousSibling.hasChildren()) {\n                return previousSibling.getLastChild();\n            } else {\n                return previousSibling;\n            }\n        }\n    }\n\n    public getPreviousVisibleNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (\n                !previousSibling.hasChildren() ||\n                !previousSibling.is_open\n            ) {\n                // Previous sibling\n                return previousSibling;\n            } else {\n                // Last child of previous sibling\n                return previousSibling.getLastChild();\n            }\n        }\n    }\n\n    public getParent(): Node | null {\n        // Return parent except if it is the root node\n        if (!this.parent) {\n            return null;\n        } else if (!this.parent.parent) {\n            // Root node -> null\n            return null;\n        } else {\n            return this.parent;\n        }\n    }\n\n    public getLastChild(): Node | null {\n        if (!this.hasChildren()) {\n            return null;\n        } else {\n            const lastChild = this.children[this.children.length - 1];\n\n            if (!lastChild) {\n                return null;\n            }\n\n            if (!(lastChild.hasChildren() && lastChild.is_open)) {\n                return lastChild;\n            } else {\n                return lastChild?.getLastChild();\n            }\n        }\n    }\n\n    // Init Node from data without making it the root of the tree\n    public initFromData(data: NodeData): void {\n        const addNode = (nodeData: NodeData): void => {\n            this.setData(nodeData);\n\n            if (\n                isNodeRecordWithChildren(nodeData) &&\n                nodeData.children.length\n            ) {\n                addChildren(nodeData.children);\n            }\n        };\n\n        const addChildren = (childrenData: NodeData[]): void => {\n            for (const child of childrenData) {\n                const node = this.createNode();\n                node.initFromData(child);\n                this.addChild(node);\n            }\n        };\n\n        addNode(data);\n    }\n\n    private setParent(parent: Node): void {\n        this.parent = parent;\n        this.tree = parent.tree;\n        this.tree?.addNodeToIndex(this);\n    }\n\n    private doRemoveChild(node: Node): void {\n        this.children.splice(this.getChildIndex(node), 1);\n        this.tree?.removeNodeFromIndex(node);\n    }\n\n    private getNodeClass(): typeof Node {\n        return this.nodeClass || this?.tree?.nodeClass || Node;\n    }\n\n    private createNode(nodeData?: NodeData): Node {\n        const nodeClass = this.getNodeClass();\n        return new nodeClass(nodeData);\n    }\n\n    // Load children data from nodeInfo if it has children\n    private loadChildrenFromData(nodeInfo: NodeData) {\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            this.loadFromData(nodeInfo.children);\n        }\n    }\n}\n","import { getPositionName, Node, Position } from \"./node\";\nimport { DropHint, HitArea, PositionInfo } from \"./types\";\nimport { NodeElement } from \"./nodeElement\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\ninterface Dimensions {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n}\n\nexport class DragAndDropHandler {\n    public hitAreas: HitArea[];\n    public isDragging: boolean;\n    public currentItem: NodeElement | null;\n    public hoveredArea: HitArea | null;\n\n    private treeWidget: JqTreeWidget;\n    private dragElement: DragElement | null;\n    private previousGhost: DropHint | null;\n    private openFolderTimer: number | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        this.hoveredArea = null;\n        this.hitAreas = [];\n        this.isDragging = false;\n        this.currentItem = null;\n    }\n\n    public mouseCapture(positionInfo: PositionInfo): boolean | null {\n        const $element = jQuery(positionInfo.target);\n\n        if (!this.mustCaptureElement($element)) {\n            return null;\n        }\n\n        if (\n            this.treeWidget.options.onIsMoveHandle &&\n            !this.treeWidget.options.onIsMoveHandle($element)\n        ) {\n            return null;\n        }\n\n        let nodeElement = this.treeWidget._getNodeElement($element);\n\n        if (nodeElement && this.treeWidget.options.onCanMove) {\n            if (!this.treeWidget.options.onCanMove(nodeElement.node)) {\n                nodeElement = null;\n            }\n        }\n\n        this.currentItem = nodeElement;\n        return this.currentItem != null;\n    }\n\n    public mouseStart(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.refresh();\n\n        const offset = jQuery(positionInfo.target).offset();\n        const left = offset ? offset.left : 0;\n        const top = offset ? offset.top : 0;\n\n        const node = this.currentItem.node;\n\n        this.dragElement = new DragElement(\n            node.name,\n            positionInfo.pageX - left,\n            positionInfo.pageY - top,\n            this.treeWidget.element,\n            this.treeWidget.options.autoEscape ?? true,\n        );\n\n        this.isDragging = true;\n        this.currentItem.$element.addClass(\"jqtree-moving\");\n\n        return true;\n    }\n\n    public mouseDrag(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            !this.dragElement ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.dragElement.move(positionInfo.pageX, positionInfo.pageY);\n\n        const area = this.findHoveredArea(\n            positionInfo.pageX,\n            positionInfo.pageY,\n        );\n\n        if (area && this.canMoveToArea(area)) {\n            if (!area.node.isFolder()) {\n                this.stopOpenFolderTimer();\n            }\n\n            if (this.hoveredArea !== area) {\n                this.hoveredArea = area;\n\n                // If this is a closed folder, start timer to open it\n                if (this.mustOpenFolderTimer(area)) {\n                    this.startOpenFolderTimer(area.node);\n                } else {\n                    this.stopOpenFolderTimer();\n                }\n\n                this.updateDropHint();\n            }\n        } else {\n            this.removeDropHint();\n            this.stopOpenFolderTimer();\n            this.hoveredArea = area;\n        }\n\n        if (!area) {\n            if (this.treeWidget.options.onDragMove) {\n                this.treeWidget.options.onDragMove(\n                    this.currentItem.node,\n                    positionInfo.originalEvent,\n                );\n            }\n        }\n\n        return true;\n    }\n\n    public mouseStop(positionInfo: PositionInfo): boolean {\n        this.moveItem(positionInfo);\n        this.clear();\n        this.removeHover();\n        this.removeDropHint();\n        this.removeHitAreas();\n\n        const currentItem = this.currentItem;\n\n        if (this.currentItem) {\n            this.currentItem.$element.removeClass(\"jqtree-moving\");\n            this.currentItem = null;\n        }\n\n        this.isDragging = false;\n\n        if (!this.hoveredArea && currentItem) {\n            if (this.treeWidget.options.onDragStop) {\n                this.treeWidget.options.onDragStop(\n                    currentItem.node,\n                    positionInfo.originalEvent,\n                );\n            }\n        }\n\n        return false;\n    }\n\n    public refresh(): void {\n        this.removeHitAreas();\n\n        if (this.currentItem) {\n            this.generateHitAreas();\n\n            this.currentItem = this.treeWidget._getNodeElementForNode(\n                this.currentItem.node,\n            );\n\n            if (this.isDragging) {\n                this.currentItem.$element.addClass(\"jqtree-moving\");\n            }\n        }\n    }\n\n    private generateHitAreas(): void {\n        if (!this.currentItem) {\n            this.hitAreas = [];\n        } else {\n            const hitAreasGenerator = new HitAreasGenerator(\n                this.treeWidget.tree,\n                this.currentItem.node,\n                this.getTreeDimensions().bottom,\n            );\n            this.hitAreas = hitAreasGenerator.generate();\n        }\n    }\n\n    private mustCaptureElement($element: JQuery<HTMLElement>): boolean {\n        return !$element.is(\"input,select,textarea\");\n    }\n\n    private canMoveToArea(area: HitArea): boolean {\n        if (!this.treeWidget.options.onCanMoveTo) {\n            return true;\n        }\n\n        if (!this.currentItem) {\n            return false;\n        }\n\n        const positionName = getPositionName(area.position);\n\n        return this.treeWidget.options.onCanMoveTo(\n            this.currentItem.node,\n            area.node,\n            positionName,\n        );\n    }\n\n    private removeHitAreas(): void {\n        this.hitAreas = [];\n    }\n\n    private clear(): void {\n        if (this.dragElement) {\n            this.dragElement.remove();\n            this.dragElement = null;\n        }\n    }\n\n    private removeDropHint(): void {\n        if (this.previousGhost) {\n            this.previousGhost.remove();\n        }\n    }\n\n    private removeHover(): void {\n        this.hoveredArea = null;\n    }\n\n    private findHoveredArea(x: number, y: number): HitArea | null {\n        const dimensions = this.getTreeDimensions();\n\n        if (\n            x < dimensions.left ||\n            y < dimensions.top ||\n            x > dimensions.right ||\n            y > dimensions.bottom\n        ) {\n            return null;\n        }\n\n        let low = 0;\n        let high = this.hitAreas.length;\n        while (low < high) {\n            const mid = (low + high) >> 1;\n            const area = this.hitAreas[mid];\n\n            if (!area) {\n                return null;\n            }\n\n            if (y < area.top) {\n                high = mid;\n            } else if (y > area.bottom) {\n                low = mid + 1;\n            } else {\n                return area;\n            }\n        }\n\n        return null;\n    }\n\n    private mustOpenFolderTimer(area: HitArea): boolean {\n        const node = area.node;\n\n        return (\n            node.isFolder() &&\n            !node.is_open &&\n            area.position === Position.Inside\n        );\n    }\n\n    private updateDropHint(): void {\n        if (!this.hoveredArea) {\n            return;\n        }\n\n        // remove previous drop hint\n        this.removeDropHint();\n\n        // add new drop hint\n        const nodeElement = this.treeWidget._getNodeElementForNode(\n            this.hoveredArea.node,\n        );\n        this.previousGhost = nodeElement.addDropHint(this.hoveredArea.position);\n    }\n\n    private startOpenFolderTimer(folder: Node): void {\n        const openFolder = (): void => {\n            this.treeWidget._openNode(\n                folder,\n                this.treeWidget.options.slide,\n                () => {\n                    this.refresh();\n                    this.updateDropHint();\n                },\n            );\n        };\n\n        this.stopOpenFolderTimer();\n\n        const openFolderDelay = this.treeWidget.options.openFolderDelay;\n\n        if (openFolderDelay !== false) {\n            this.openFolderTimer = window.setTimeout(\n                openFolder,\n                openFolderDelay,\n            );\n        }\n    }\n\n    private stopOpenFolderTimer(): void {\n        if (this.openFolderTimer) {\n            clearTimeout(this.openFolderTimer);\n            this.openFolderTimer = null;\n        }\n    }\n\n    private moveItem(positionInfo: PositionInfo): void {\n        if (\n            this.currentItem &&\n            this.hoveredArea &&\n            this.hoveredArea.position !== Position.None &&\n            this.canMoveToArea(this.hoveredArea)\n        ) {\n            const movedNode = this.currentItem.node;\n            const targetNode = this.hoveredArea.node;\n            const position = this.hoveredArea.position;\n            const previousParent = movedNode.parent;\n\n            if (position === Position.Inside) {\n                this.hoveredArea.node.is_open = true;\n            }\n\n            const doMove = (): void => {\n                this.treeWidget.tree.moveNode(movedNode, targetNode, position);\n                this.treeWidget.element.empty();\n                this.treeWidget._refreshElements(null);\n            };\n\n            const event = this.treeWidget._triggerEvent(\"tree.move\", {\n                move_info: {\n                    moved_node: movedNode,\n                    target_node: targetNode,\n                    position: getPositionName(position),\n                    previous_parent: previousParent,\n                    do_move: doMove,\n                    original_event: positionInfo.originalEvent,\n                },\n            });\n\n            if (!event.isDefaultPrevented()) {\n                doMove();\n            }\n        }\n    }\n\n    private getTreeDimensions(): Dimensions {\n        // Return the dimensions of the tree. Add a margin to the bottom to allow\n        // to drag-and-drop after the last element.\n        const offset = this.treeWidget.element.offset();\n\n        if (!offset) {\n            return { left: 0, top: 0, right: 0, bottom: 0 };\n        } else {\n            const el = this.treeWidget.element;\n            const width = el.width() || 0;\n            const height = el.height() || 0;\n            const left = offset.left + this.treeWidget._getScrollLeft();\n\n            return {\n                left,\n                top: offset.top,\n                right: left + width,\n                bottom: offset.top + height + 16,\n            };\n        }\n    }\n}\n\nabstract class VisibleNodeIterator {\n    private tree: Node;\n\n    constructor(tree: Node) {\n        this.tree = tree;\n    }\n\n    protected iterate(): void {\n        let isFirstNode = true;\n\n        const _iterateNode = (node: Node, nextNode: Node | null): void => {\n            let mustIterateInside =\n                (node.is_open || !node.element) && node.hasChildren();\n\n            let $element: JQuery<HTMLElement> | null = null;\n\n            if (node.element) {\n                $element = jQuery(node.element);\n\n                if (!$element.is(\":visible\")) {\n                    return;\n                }\n\n                if (isFirstNode) {\n                    this.handleFirstNode(node);\n                    isFirstNode = false;\n                }\n\n                if (!node.hasChildren()) {\n                    this.handleNode(node, nextNode, $element);\n                } else if (node.is_open) {\n                    if (!this.handleOpenFolder(node, $element)) {\n                        mustIterateInside = false;\n                    }\n                } else {\n                    this.handleClosedFolder(node, nextNode, $element);\n                }\n            }\n\n            if (mustIterateInside) {\n                const childrenLength = node.children.length;\n                node.children.forEach((_, i) => {\n                    const child = node.children[i];\n\n                    if (child) {\n                        if (i === childrenLength - 1) {\n                            _iterateNode(child, null);\n                        } else {\n                            const nextChild = node.children[i + 1];\n\n                            if (nextChild) {\n                                _iterateNode(child, nextChild);\n                            }\n                        }\n                    }\n                });\n\n                if (node.is_open && $element) {\n                    this.handleAfterOpenFolder(node, nextNode);\n                }\n            }\n        };\n\n        _iterateNode(this.tree, null);\n    }\n\n    protected abstract handleNode(\n        node: Node,\n        nextNode: Node | null,\n        $element: JQuery,\n    ): void;\n\n    /*\n    override\n    return\n        - true: continue iterating\n        - false: stop iterating\n    */\n    protected abstract handleOpenFolder(node: Node, $element: JQuery): boolean;\n\n    protected abstract handleClosedFolder(\n        node: Node,\n        nextNode: Node | null,\n        $element: JQuery,\n    ): void;\n\n    protected abstract handleAfterOpenFolder(\n        node: Node,\n        nextNode: Node | null,\n    ): void;\n\n    protected abstract handleFirstNode(node: Node): void;\n}\n\nexport class HitAreasGenerator extends VisibleNodeIterator {\n    private currentNode: Node;\n    private treeBottom: number;\n    private positions: HitArea[];\n    private lastTop: number;\n\n    constructor(tree: Node, currentNode: Node, treeBottom: number) {\n        super(tree);\n\n        this.currentNode = currentNode;\n        this.treeBottom = treeBottom;\n    }\n\n    public generate(): HitArea[] {\n        this.positions = [];\n        this.lastTop = 0;\n\n        this.iterate();\n\n        return this.generateHitAreas(this.positions);\n    }\n\n    protected generateHitAreas(positions: HitArea[]): HitArea[] {\n        let previousTop = positions[0]?.top ?? 0;\n        let group = [];\n        const hitAreas: HitArea[] = [];\n\n        for (const position of positions) {\n            if (position.top !== previousTop && group.length) {\n                this.generateHitAreasForGroup(\n                    hitAreas,\n                    group,\n                    previousTop,\n                    position.top,\n                );\n\n                previousTop = position.top;\n                group = [];\n            }\n\n            group.push(position);\n        }\n\n        this.generateHitAreasForGroup(\n            hitAreas,\n            group,\n            previousTop,\n            this.treeBottom,\n        );\n\n        return hitAreas;\n    }\n\n    protected handleOpenFolder(node: Node, $element: JQuery): boolean {\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n\n            // Dnd over the current element is not possible: add a position with type None for the top and the bottom.\n            const top = this.getTop($element);\n            const height = $element.height() || 0;\n            this.addPosition(node, Position.None, top);\n\n            if (height > 5) {\n                // Subtract 5 pixels to allow more space for the next element.\n                this.addPosition(node, Position.None, top + height - 5);\n            }\n\n            // Stop iterating\n            return false;\n        }\n\n        // Cannot move before current item\n        if (node.children[0] !== this.currentNode) {\n            this.addPosition(node, Position.Inside, this.getTop($element));\n        }\n\n        // Continue iterating\n        return true;\n    }\n\n    protected handleClosedFolder(\n        node: Node,\n        nextNode: Node,\n        $element: JQuery,\n    ): void {\n        const top = this.getTop($element);\n\n        if (node === this.currentNode) {\n            // Cannot move after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n\n            // Cannot move before current item\n            if (nextNode !== this.currentNode) {\n                this.addPosition(node, Position.After, top);\n            }\n        }\n    }\n\n    protected handleFirstNode(node: Node): void {\n        if (node !== this.currentNode) {\n            this.addPosition(\n                node,\n                Position.Before,\n                this.getTop(jQuery(node.element)),\n            );\n        }\n    }\n\n    protected handleAfterOpenFolder(node: Node, nextNode: Node): void {\n        if (node === this.currentNode || nextNode === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, this.lastTop);\n        } else {\n            this.addPosition(node, Position.After, this.lastTop);\n        }\n    }\n\n    protected handleNode(node: Node, nextNode: Node, $element: JQuery): void {\n        const top = this.getTop($element);\n\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n        }\n\n        if (nextNode === this.currentNode || node === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.After, top);\n        }\n    }\n\n    private getTop($element: JQuery<HTMLElement>): number {\n        const offset = $element.offset();\n\n        return offset ? offset.top : 0;\n    }\n\n    private addPosition(node: Node, position: number, top: number): void {\n        const area = {\n            top,\n            bottom: 0,\n            node,\n            position,\n        };\n\n        this.positions.push(area);\n        this.lastTop = top;\n    }\n\n    private generateHitAreasForGroup(\n        hitAreas: HitArea[],\n        positionsInGroup: HitArea[],\n        top: number,\n        bottom: number,\n    ): void {\n        // limit positions in group\n        const positionCount = Math.min(positionsInGroup.length, 4);\n\n        const areaHeight = Math.round((bottom - top) / positionCount);\n        let areaTop = top;\n\n        let i = 0;\n        while (i < positionCount) {\n            const position = positionsInGroup[i];\n\n            if (position && position.position !== Position.None) {\n                hitAreas.push({\n                    top: areaTop,\n                    bottom: areaTop + areaHeight,\n                    node: position.node,\n                    position: position.position,\n                });\n            }\n\n            areaTop += areaHeight;\n            i += 1;\n        }\n    }\n}\n\nclass DragElement {\n    private offsetX: number;\n    private offsetY: number;\n    private $element: JQuery;\n\n    constructor(\n        nodeName: string,\n        offsetX: number,\n        offsetY: number,\n        $tree: JQuery,\n        autoEscape: boolean,\n    ) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n\n        this.$element = jQuery(\"<span>\").addClass(\n            \"jqtree-title jqtree-dragging\",\n        );\n\n        if (autoEscape) {\n            this.$element.text(nodeName);\n        } else {\n            this.$element.html(nodeName);\n        }\n\n        this.$element.css(\"position\", \"absolute\");\n        $tree.append(this.$element);\n    }\n\n    public move(pageX: number, pageY: number): void {\n        this.$element.offset({\n            left: pageX - this.offsetX,\n            top: pageY - this.offsetY,\n        });\n    }\n\n    public remove(): void {\n        this.$element.remove();\n    }\n}\n","export const isInt = (n: unknown): boolean =>\n    typeof n === \"number\" && n % 1 === 0;\n\nexport const isFunction = (v: unknown): boolean => typeof v === \"function\";\n\nexport const getBoolString = (value: unknown): string =>\n    value ? \"true\" : \"false\";\n","import { getBoolString } from \"./util\";\nimport { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\ntype IconElement = string | HTMLElement | JQuery<HTMLElement>;\n\nexport default class ElementsRenderer {\n    public openedIconElement?: HTMLElement | Text;\n    public closedIconElement?: HTMLElement | Text;\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        this.openedIconElement = this.createButtonElement(\n            treeWidget.options.openedIcon || \"+\",\n        );\n        this.closedIconElement = this.createButtonElement(\n            treeWidget.options.closedIcon || \"-\",\n        );\n    }\n\n    public render(fromNode: Node | null): void {\n        if (fromNode && fromNode.parent) {\n            this.renderFromNode(fromNode);\n        } else {\n            this.renderFromRoot();\n        }\n    }\n\n    public renderFromRoot(): void {\n        const $element = this.treeWidget.element;\n        $element.empty();\n\n        if ($element[0]) {\n            this.createDomElements(\n                $element[0],\n                this.treeWidget.tree.children,\n                true,\n                1,\n            );\n        }\n    }\n\n    public renderFromNode(node: Node): void {\n        // remember current li\n        const $previousLi = jQuery(node.element);\n\n        // create element\n        const li = this.createLi(node, node.getLevel());\n        this.attachNodeData(node, li);\n\n        // add element to dom\n        $previousLi.after(li);\n\n        // remove previous li\n        $previousLi.remove();\n\n        // create children\n        if (node.children) {\n            this.createDomElements(\n                li,\n                node.children,\n                false,\n                node.getLevel() + 1,\n            );\n        }\n    }\n\n    private createDomElements(\n        element: Element,\n        children: Node[],\n        isRootNode: boolean,\n        level: number,\n    ): void {\n        const ul = this.createUl(isRootNode);\n        element.appendChild(ul);\n\n        for (const child of children) {\n            const li = this.createLi(child, level);\n            ul.appendChild(li);\n\n            this.attachNodeData(child, li);\n\n            if (child.hasChildren()) {\n                this.createDomElements(li, child.children, false, level + 1);\n            }\n        }\n    }\n\n    private attachNodeData(node: Node, li: HTMLElement): void {\n        node.element = li;\n        jQuery(li).data(\"node\", node);\n    }\n\n    private createUl(isRootNode: boolean): HTMLUListElement {\n        let classString;\n        let role;\n\n        if (!isRootNode) {\n            classString = \"\";\n            role = \"group\";\n        } else {\n            classString = \"jqtree-tree\";\n            role = \"tree\";\n\n            if (this.treeWidget.options.rtl) {\n                classString += \" jqtree-rtl\";\n            }\n        }\n\n        if (this.treeWidget.options.dragAndDrop) {\n            classString += \" jqtree-dnd\";\n        }\n\n        const ul = document.createElement(\"ul\");\n        ul.className = `jqtree_common ${classString}`;\n\n        ul.setAttribute(\"role\", role);\n\n        return ul;\n    }\n\n    private createLi(node: Node, level: number): HTMLLIElement {\n        const isSelected = Boolean(\n            this.treeWidget.selectNodeHandler.isNodeSelected(node),\n        );\n\n        const mustShowFolder =\n            node.isFolder() ||\n            (node.isEmptyFolder && this.treeWidget.options.showEmptyFolder);\n\n        const li = mustShowFolder\n            ? this.createFolderLi(node, level, isSelected)\n            : this.createNodeLi(node, level, isSelected);\n\n        if (this.treeWidget.options.onCreateLi) {\n            this.treeWidget.options.onCreateLi(node, jQuery(li), isSelected);\n        }\n\n        return li;\n    }\n\n    private setTreeItemAriaAttributes(\n        element: HTMLElement,\n        name: string,\n        level: number,\n        isSelected: boolean,\n    ) {\n        element.setAttribute(\"aria-label\", name);\n        element.setAttribute(\"aria-level\", `${level}`);\n        element.setAttribute(\"aria-selected\", getBoolString(isSelected));\n        element.setAttribute(\"role\", \"treeitem\");\n    }\n\n    private createFolderLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const buttonClasses = this.getButtonClasses(node);\n        const folderClasses = this.getFolderClasses(node, isSelected);\n\n        const iconElement = node.is_open\n            ? this.openedIconElement\n            : this.closedIconElement;\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = `jqtree_common ${folderClasses}`;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // button link\n        const buttonLink = document.createElement(\"a\");\n        buttonLink.className = buttonClasses;\n\n        if (iconElement) {\n            buttonLink.appendChild(iconElement.cloneNode(true));\n        }\n\n        if (this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            true,\n            level,\n        );\n        titleSpan.setAttribute(\"aria-expanded\", getBoolString(node.is_open));\n        div.appendChild(titleSpan);\n\n        if (!this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        return li;\n    }\n\n    private createNodeLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const liClasses = [\"jqtree_common\"];\n\n        if (isSelected) {\n            liClasses.push(\"jqtree-selected\");\n        }\n\n        const classString = liClasses.join(\" \");\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = classString;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            false,\n            level,\n        );\n        div.appendChild(titleSpan);\n\n        return li;\n    }\n\n    private createTitleSpan(\n        nodeName: string,\n        isSelected: boolean,\n        isFolder: boolean,\n        level: number,\n    ): HTMLSpanElement {\n        const titleSpan = document.createElement(\"span\");\n\n        let classes = \"jqtree-title jqtree_common\";\n\n        if (isFolder) {\n            classes += \" jqtree-title-folder\";\n        }\n\n        classes += ` jqtree-title-button-${\n            this.treeWidget.options.buttonLeft ? \"left\" : \"right\"\n        }`;\n\n        titleSpan.className = classes;\n\n        if (isSelected) {\n            const tabIndex = this.treeWidget.options.tabIndex;\n\n            if (tabIndex !== undefined) {\n                titleSpan.setAttribute(\"tabindex\", `${tabIndex}`);\n            }\n        }\n\n        this.setTreeItemAriaAttributes(titleSpan, nodeName, level, isSelected);\n\n        if (this.treeWidget.options.autoEscape) {\n            titleSpan.textContent = nodeName;\n        } else {\n            titleSpan.innerHTML = nodeName;\n        }\n\n        return titleSpan;\n    }\n\n    private getButtonClasses(node: Node): string {\n        const classes = [\"jqtree-toggler\", \"jqtree_common\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (this.treeWidget.options.buttonLeft) {\n            classes.push(\"jqtree-toggler-left\");\n        } else {\n            classes.push(\"jqtree-toggler-right\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private getFolderClasses(node: Node, isSelected: boolean): string {\n        const classes = [\"jqtree-folder\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (isSelected) {\n            classes.push(\"jqtree-selected\");\n        }\n\n        if (node.is_loading) {\n            classes.push(\"jqtree-loading\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private createButtonElement(\n        value: IconElement,\n    ): HTMLElement | Text | undefined {\n        if (typeof value === \"string\") {\n            // convert value to html\n            const div = document.createElement(\"div\");\n            div.innerHTML = value;\n\n            return document.createTextNode(div.innerHTML);\n        } else {\n            return jQuery(value)[0];\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport type HandleFinishedLoading = () => void;\n\nexport default class DataLoader {\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n    }\n\n    public loadFromUrl(\n        urlInfo: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null\n    ): void {\n        if (!urlInfo) {\n            return;\n        }\n\n        const $el = this.getDomElement(parentNode);\n        this.addLoadingClass($el);\n        this.notifyLoading(true, parentNode, $el);\n\n        const stopLoading = (): void => {\n            this.removeLoadingClass($el);\n            this.notifyLoading(false, parentNode, $el);\n        };\n\n        const handleSuccess = (data: string | NodeData[]): void => {\n            stopLoading();\n            this.treeWidget.loadData(this.parseData(data), parentNode);\n\n            if (onFinished && typeof onFinished === \"function\") {\n                onFinished();\n            }\n        };\n\n        const handleError = (jqXHR: JQuery.jqXHR): void => {\n            stopLoading();\n\n            if (this.treeWidget.options.onLoadFailed) {\n                this.treeWidget.options.onLoadFailed(jqXHR);\n            }\n        };\n\n        this.submitRequest(urlInfo, handleSuccess, handleError);\n    }\n\n    private addLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.addClass(\"jqtree-loading\");\n        }\n    }\n\n    private removeLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.removeClass(\"jqtree-loading\");\n        }\n    }\n\n    private getDomElement(parentNode: Node | null): JQuery<HTMLElement> {\n        if (parentNode) {\n            return jQuery(parentNode.element);\n        } else {\n            return this.treeWidget.element;\n        }\n    }\n\n    private notifyLoading(\n        isLoading: boolean,\n        node: Node | null,\n        $el: JQuery\n    ): void {\n        if (this.treeWidget.options.onLoading) {\n            this.treeWidget.options.onLoading(isLoading, node, $el);\n        }\n\n        this.treeWidget._triggerEvent(\"tree.loading_data\", {\n            isLoading,\n            node,\n            $el,\n        });\n    }\n\n    private submitRequest(\n        urlInfoInput: string | JQuery.AjaxSettings,\n        handleSuccess: JQuery.Ajax.SuccessCallback<any>,\n        handleError: JQuery.Ajax.ErrorCallback<any>\n    ): void {\n        const urlInfo =\n            typeof urlInfoInput === \"string\"\n                ? { url: urlInfoInput }\n                : urlInfoInput;\n\n        const ajaxSettings: JQuery.AjaxSettings = {\n            method: \"GET\",\n            cache: false,\n            dataType: \"json\",\n            success: handleSuccess,\n            error: handleError,\n            ...urlInfo,\n        };\n\n        ajaxSettings.method = ajaxSettings.method?.toUpperCase() || \"GET\";\n\n        void jQuery.ajax(ajaxSettings);\n    }\n\n    private parseData(data: string | NodeData[]): NodeData[] {\n        const { dataFilter } = this.treeWidget.options;\n\n        const getParsedData = () => {\n            if (typeof data === \"string\") {\n                return JSON.parse(data) as NodeData[];\n            } else {\n                return data;\n            }\n        };\n\n        const parsedData = getParsedData();\n\n        if (dataFilter) {\n            return dataFilter(parsedData);\n        } else {\n            return parsedData;\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport default class KeyHandler {\n    private static LEFT = 37;\n    private static UP = 38;\n    private static RIGHT = 39;\n    private static DOWN = 40;\n\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        if (treeWidget.options.keyboardSupport) {\n            jQuery(document).on(\"keydown.jqtree\", this.handleKeyDown);\n        }\n    }\n\n    public deinit(): void {\n        jQuery(document).off(\"keydown.jqtree\");\n    }\n\n    public moveDown(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getNextVisibleNode());\n    }\n\n    public moveUp(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getPreviousVisibleNode());\n    }\n\n    public moveRight(selectedNode: Node): boolean {\n        if (!selectedNode.isFolder()) {\n            return true;\n        } else {\n            // folder node\n            if (selectedNode.is_open) {\n                // Right moves to the first child of an open node\n                return this.selectNode(selectedNode.getNextVisibleNode());\n            } else {\n                // Right expands a closed node\n                this.treeWidget.openNode(selectedNode);\n                return false;\n            }\n        }\n    }\n\n    public moveLeft(selectedNode: Node): boolean {\n        if (selectedNode.isFolder() && selectedNode.is_open) {\n            // Left on an open node closes the node\n            this.treeWidget.closeNode(selectedNode);\n            return false;\n        } else {\n            // Left on a closed or end node moves focus to the node's parent\n            return this.selectNode(selectedNode.getParent());\n        }\n    }\n\n    public selectNode(node: Node | null): boolean {\n        if (!node) {\n            return true;\n        } else {\n            this.treeWidget.selectNode(node);\n\n            return false;\n        }\n    }\n\n    private handleKeyDown = (e: JQuery.Event): boolean => {\n        if (!this.canHandleKeyboard()) {\n            return true;\n        }\n\n        const selectedNode = this.treeWidget.getSelectedNode();\n        if (!selectedNode) {\n            return true;\n        }\n\n        const key = e.which;\n\n        switch (key) {\n            case KeyHandler.DOWN:\n                return this.moveDown(selectedNode);\n\n            case KeyHandler.UP:\n                return this.moveUp(selectedNode);\n\n            case KeyHandler.RIGHT:\n                return this.moveRight(selectedNode);\n\n            case KeyHandler.LEFT:\n                return this.moveLeft(selectedNode);\n\n            default:\n                return true;\n        }\n    };\n\n    private canHandleKeyboard(): boolean {\n        return (\n            (this.treeWidget.options.keyboardSupport || false) &&\n            this.treeWidget.selectNodeHandler.isFocusOnTree()\n        );\n    }\n}\n","const register = (widgetClass: unknown, widgetName: string): void => {\n    const getDataKey = (): string => `simple_widget_${widgetName}`;\n\n    const getWidgetData = (\n        el: HTMLElement,\n        dataKey: string\n    ): SimpleWidget<unknown> | null => {\n        const widget = jQuery.data(el, dataKey) as unknown;\n\n        if (widget && widget instanceof SimpleWidget) {\n            return widget;\n        } else {\n            return null;\n        }\n    };\n\n    const createWidget = ($el: JQuery, options: unknown): JQuery => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const existingWidget = getWidgetData(el, dataKey);\n\n            if (!existingWidget) {\n                const simpleWidgetClass = widgetClass as typeof SimpleWidget;\n                const widget = new simpleWidgetClass(el, options);\n\n                if (!jQuery.data(el, dataKey)) {\n                    jQuery.data(el, dataKey, widget);\n                }\n\n                // Call init after setting data, so we can call methods\n                widget.init();\n            }\n        }\n\n        return $el;\n    };\n\n    const destroyWidget = ($el: JQuery): void => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const widget = getWidgetData(el, dataKey);\n\n            if (widget) {\n                widget.destroy();\n            }\n\n            jQuery.removeData(el, dataKey);\n        }\n    };\n\n    const callFunction = (\n        $el: JQuery,\n        functionName: string,\n        args: unknown[]\n    ): unknown => {\n        let result = null;\n\n        for (const el of $el.get()) {\n            const widget = jQuery.data(el, getDataKey()) as unknown;\n\n            if (widget && widget instanceof SimpleWidget) {\n                const simpleWidget = widget as SimpleWidget<unknown>;\n                const widgetFunction = simpleWidget[functionName];\n\n                if (widgetFunction && typeof widgetFunction === \"function\") {\n                    result = widgetFunction.apply(widget, args) as unknown;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (jQuery.fn as any)[widgetName] = function (\n        this: JQuery,\n        argument1: unknown,\n        ...args: unknown[]\n    ) {\n        if (!argument1) {\n            return createWidget(this, null);\n        } else if (typeof argument1 === \"object\") {\n            const options = argument1 as unknown;\n            return createWidget(this, options);\n        } else if (typeof argument1 === \"string\" && argument1[0] !== \"_\") {\n            const functionName = argument1;\n\n            if (functionName === \"destroy\") {\n                return destroyWidget(this);\n            } else if (functionName === \"get_widget_class\") {\n                return widgetClass;\n            } else {\n                return callFunction(this, functionName, args);\n            }\n        } else {\n            return undefined;\n        }\n    };\n};\n\nexport default class SimpleWidget<WidgetOptions> {\n    public static register(widgetClass: unknown, widgetName: string): void {\n        register(widgetClass, widgetName);\n    }\n\n    [key: string]: unknown;\n\n    protected static defaults: unknown = {};\n\n    public options: WidgetOptions;\n\n    public $el: JQuery<HTMLElement>;\n\n    constructor(el: HTMLElement, options: WidgetOptions) {\n        this.$el = jQuery(el);\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const defaults = (this.constructor as any)[\"defaults\"] as WidgetOptions;\n        this.options = { ...defaults, ...options };\n    }\n\n    public destroy(): void {\n        this.deinit();\n    }\n\n    public init(): void {\n        //\n    }\n\n    public deinit(): void {\n        //\n    }\n}\n","/*\nThis widget does the same a the mouse widget in jqueryui.\n*/\nimport SimpleWidget from \"./simple.widget\";\nimport { PositionInfo } from \"./types\";\n\nconst getPositionInfoFromMouseEvent = (e: MouseEvent): PositionInfo => ({\n    pageX: e.pageX,\n    pageY: e.pageY,\n    target: e.target as HTMLElement,\n    originalEvent: e,\n});\n\nconst getPositionInfoFromTouch = (\n    touch: Touch,\n    e: TouchEvent\n): PositionInfo => ({\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    target: touch.target as HTMLElement,\n    originalEvent: e,\n});\n\nabstract class MouseWidget<WidgetOptions> extends SimpleWidget<WidgetOptions> {\n    protected isMouseStarted: boolean;\n    protected mouseDownInfo: PositionInfo | null;\n    private mouseDelayTimer: number | null;\n    private isMouseDelayMet: boolean;\n\n    public init(): void {\n        const element = this.$el.get(0);\n\n        if (element) {\n            element.addEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n            element.addEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.isMouseStarted = false;\n        this.mouseDelayTimer = null;\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n    }\n\n    public deinit(): void {\n        const el = this.$el.get(0);\n\n        if (el) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.removeMouseMoveEventListeners();\n    }\n\n    protected abstract mouseCapture(positionInfo: PositionInfo): boolean | null;\n\n    protected abstract mouseStart(positionInfo: PositionInfo): boolean;\n\n    protected abstract mouseDrag(positionInfo: PositionInfo): void;\n\n    protected abstract mouseStop(positionInfo: PositionInfo): void;\n\n    protected abstract getMouseDelay(): number;\n\n    private mouseDown = (e: MouseEvent): void => {\n        // Left mouse button?\n        if (e.button !== 0) {\n            return;\n        }\n\n        const result = this.handleMouseDown(getPositionInfoFromMouseEvent(e));\n\n        if (result && e.cancelable) {\n            e.preventDefault();\n        }\n    };\n\n    private handleMouseDown(positionInfo: PositionInfo): boolean {\n        // We may have missed mouseup (out of window)\n        if (this.isMouseStarted) {\n            this.handleMouseUp(positionInfo);\n        }\n\n        this.mouseDownInfo = positionInfo;\n\n        if (!this.mouseCapture(positionInfo)) {\n            return false;\n        }\n\n        this.handleStartMouse();\n\n        return true;\n    }\n\n    private handleStartMouse(): void {\n        document.addEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        document.addEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        document.addEventListener(\"mouseup\", this.mouseUp, { passive: false });\n        document.addEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n\n        const mouseDelay = this.getMouseDelay();\n\n        if (mouseDelay) {\n            this.startMouseDelayTimer(mouseDelay);\n        } else {\n            this.isMouseDelayMet = true;\n        }\n    }\n\n    private startMouseDelayTimer(mouseDelay: number): void {\n        if (this.mouseDelayTimer) {\n            clearTimeout(this.mouseDelayTimer);\n        }\n\n        this.mouseDelayTimer = window.setTimeout(() => {\n            if (this.mouseDownInfo) {\n                this.isMouseDelayMet = true;\n            }\n        }, mouseDelay);\n\n        this.isMouseDelayMet = false;\n    }\n\n    private mouseMove = (e: MouseEvent): void => {\n        this.handleMouseMove(e, getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseMove(\n        e: MouseEvent | TouchEvent,\n        positionInfo: PositionInfo\n    ): void {\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n            return;\n        }\n\n        if (!this.isMouseDelayMet) {\n            return;\n        }\n\n        if (this.mouseDownInfo) {\n            this.isMouseStarted = this.mouseStart(this.mouseDownInfo) !== false;\n        }\n\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n        } else {\n            this.handleMouseUp(positionInfo);\n        }\n    }\n\n    private mouseUp = (e: MouseEvent): void => {\n        this.handleMouseUp(getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseUp(positionInfo: PositionInfo): void {\n        this.removeMouseMoveEventListeners();\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n\n        if (this.isMouseStarted) {\n            this.isMouseStarted = false;\n            this.mouseStop(positionInfo);\n        }\n    }\n\n    private removeMouseMoveEventListeners() {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mouseup\", this.mouseUp, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n    }\n\n    private touchStart = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseDown(getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchMove = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseMove(e, getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchEnd = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseUp(getPositionInfoFromTouch(touch, e));\n    };\n}\n\nexport default MouseWidget;\n","import { isInt } from \"./util\";\nimport { JqTreeWidget } from \"./tree.jquery\";\nimport { Node } from \"./node\";\n\nexport interface SavedState {\n    open_nodes: NodeId[];\n    selected_node: NodeId[];\n}\n\nexport default class SaveStateHandler {\n    private treeWidget: JqTreeWidget;\n    private _supportsLocalStorage: boolean | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n    }\n\n    public saveState(): void {\n        const state = JSON.stringify(this.getState());\n\n        if (this.treeWidget.options.onSetStateFromStorage) {\n            this.treeWidget.options.onSetStateFromStorage(state);\n        } else if (this.supportsLocalStorage()) {\n            localStorage.setItem(this.getKeyName(), state);\n        }\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        const jsonData = this.loadFromStorage();\n\n        if (jsonData) {\n            return this.parseState(jsonData) as unknown as SavedState;\n        } else {\n            return null;\n        }\n    }\n\n    public getState(): SavedState {\n        const getOpenNodeIds = (): NodeId[] => {\n            const openNodes: NodeId[] = [];\n\n            this.treeWidget.tree.iterate((node: Node) => {\n                if (node.is_open && node.id && node.hasChildren()) {\n                    openNodes.push(node.id);\n                }\n                return true;\n            });\n\n            return openNodes;\n        };\n\n        const getSelectedNodeIds = (): NodeId[] => {\n            const selectedNodeIds: NodeId[] = [];\n\n            this.treeWidget.getSelectedNodes().forEach((node) => {\n                if (node.id != null) {\n                    selectedNodeIds.push(node.id);\n                }\n            });\n\n            return selectedNodeIds;\n        };\n\n        return {\n            open_nodes: getOpenNodeIds(),\n            selected_node: getSelectedNodeIds(),\n        };\n    }\n\n    /*\n    Set initial state\n    Don't handle nodes that are loaded on demand\n\n    result: must load on demand\n    */\n    public setInitialState(state: SavedState): boolean {\n        if (!state) {\n            return false;\n        } else {\n            let mustLoadOnDemand = false;\n\n            if (state.open_nodes) {\n                mustLoadOnDemand = this.openInitialNodes(state.open_nodes);\n            }\n\n            if (state.selected_node) {\n                this.resetSelection();\n                this.selectInitialNodes(state.selected_node);\n            }\n\n            return mustLoadOnDemand;\n        }\n    }\n\n    public setInitialStateOnDemand(\n        state: SavedState,\n        cbFinished: () => void\n    ): void {\n        if (state) {\n            this.doSetInitialStateOnDemand(\n                state.open_nodes,\n                state.selected_node,\n                cbFinished\n            );\n        } else {\n            cbFinished();\n        }\n    }\n\n    public getNodeIdToBeSelected(): NodeId | null {\n        const state = this.getStateFromStorage();\n\n        if (state && state.selected_node) {\n            return state.selected_node[0] || null;\n        } else {\n            return null;\n        }\n    }\n\n    private parseState(jsonData: string): SavedState {\n        const state = JSON.parse(jsonData) as Record<string, unknown>;\n\n        // Check if selected_node is an int (instead of an array)\n        if (state && state.selected_node && isInt(state.selected_node)) {\n            // Convert to array\n            state.selected_node = [state.selected_node];\n        }\n\n        return state as unknown as SavedState;\n    }\n\n    private loadFromStorage(): string | null {\n        if (this.treeWidget.options.onGetStateFromStorage) {\n            return this.treeWidget.options.onGetStateFromStorage();\n        } else if (this.supportsLocalStorage()) {\n            return localStorage.getItem(this.getKeyName());\n        } else {\n            return null;\n        }\n    }\n\n    private openInitialNodes(nodeIds: NodeId[]): boolean {\n        let mustLoadOnDemand = false;\n\n        for (const nodeId of nodeIds) {\n            const node = this.treeWidget.getNodeById(nodeId);\n\n            if (node) {\n                if (!node.load_on_demand) {\n                    node.is_open = true;\n                } else {\n                    mustLoadOnDemand = true;\n                }\n            }\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    private selectInitialNodes(nodeIds: NodeId[]): boolean {\n        let selectCount = 0;\n\n        for (const nodeId of nodeIds) {\n            const node = this.treeWidget.getNodeById(nodeId);\n\n            if (node) {\n                selectCount += 1;\n\n                this.treeWidget.selectNodeHandler.addToSelection(node);\n            }\n        }\n\n        return selectCount !== 0;\n    }\n\n    private resetSelection(): void {\n        const selectNodeHandler = this.treeWidget.selectNodeHandler;\n\n        const selectedNodes = selectNodeHandler.getSelectedNodes();\n\n        selectedNodes.forEach((node) => {\n            selectNodeHandler.removeFromSelection(node);\n        });\n    }\n\n    private doSetInitialStateOnDemand(\n        nodeIdsParam: NodeId[],\n        selectedNodes: NodeId[],\n        cbFinished: () => void\n    ): void {\n        let loadingCount = 0;\n        let nodeIds = nodeIdsParam;\n\n        const openNodes = (): void => {\n            const newNodesIds = [];\n\n            for (const nodeId of nodeIds) {\n                const node = this.treeWidget.getNodeById(nodeId);\n\n                if (!node) {\n                    newNodesIds.push(nodeId);\n                } else {\n                    if (!node.is_loading) {\n                        if (node.load_on_demand) {\n                            loadAndOpenNode(node);\n                        } else {\n                            this.treeWidget._openNode(node, false, null);\n                        }\n                    }\n                }\n            }\n\n            nodeIds = newNodesIds;\n\n            if (this.selectInitialNodes(selectedNodes)) {\n                this.treeWidget._refreshElements(null);\n            }\n\n            if (loadingCount === 0) {\n                cbFinished();\n            }\n        };\n\n        const loadAndOpenNode = (node: Node): void => {\n            loadingCount += 1;\n            this.treeWidget._openNode(node, false, () => {\n                loadingCount -= 1;\n                openNodes();\n            });\n        };\n\n        openNodes();\n    }\n\n    private getKeyName(): string {\n        if (typeof this.treeWidget.options.saveState === \"string\") {\n            return this.treeWidget.options.saveState;\n        } else {\n            return \"tree\";\n        }\n    }\n\n    private supportsLocalStorage(): boolean {\n        const testSupport = (): boolean => {\n            // Is local storage supported?\n            if (localStorage == null) {\n                return false;\n            } else {\n                // Check if it's possible to store an item. Safari does not allow this in private browsing mode.\n                try {\n                    const key = \"_storage_test\";\n                    sessionStorage.setItem(key, \"value\");\n                    sessionStorage.removeItem(key);\n                } catch (error) {\n                    return false;\n                }\n\n                return true;\n            }\n        };\n\n        if (this._supportsLocalStorage == null) {\n            this._supportsLocalStorage = testSupport();\n        }\n\n        return this._supportsLocalStorage;\n    }\n}\n","import type { ScrollParent } from \"./types\";\n\ntype HorizontalScrollDirection = \"left\" | \"right\";\ntype VerticalScrollDirection = \"bottom\" | \"top\";\n\ninterface Params {\n    $container: JQuery<HTMLElement>;\n    refreshHitAreas: () => void;\n    $treeElement: JQuery<HTMLElement>;\n}\n\nexport default class ContainerScrollParent implements ScrollParent {\n    private $container: JQuery<HTMLElement>;\n    private horizontalScrollDirection?: HorizontalScrollDirection;\n    private horizontalScrollTimeout?: number;\n    private refreshHitAreas: () => void;\n    private scrollParentBottom?: number;\n    private scrollParentTop?: number;\n    private verticalScrollTimeout?: number;\n    private verticalScrollDirection?: VerticalScrollDirection;\n\n    constructor({ $container, refreshHitAreas }: Params) {\n        this.$container = $container;\n        this.refreshHitAreas = refreshHitAreas;\n    }\n\n    public checkHorizontalScrolling(pageX: number): void {\n        const newHorizontalScrollDirection =\n            this.getNewHorizontalScrollDirection(pageX);\n\n        if (this.horizontalScrollDirection !== newHorizontalScrollDirection) {\n            this.horizontalScrollDirection = newHorizontalScrollDirection;\n\n            if (this.horizontalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n            }\n\n            if (newHorizontalScrollDirection) {\n                this.horizontalScrollTimeout = window.setTimeout(\n                    this.scrollHorizontally.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public checkVerticalScrolling(pageY: number) {\n        const newVerticalScrollDirection =\n            this.getNewVerticalScrollDirection(pageY);\n\n        if (this.verticalScrollDirection !== newVerticalScrollDirection) {\n            this.verticalScrollDirection = newVerticalScrollDirection;\n\n            if (this.verticalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n                this.verticalScrollTimeout = undefined;\n            }\n\n            if (newVerticalScrollDirection) {\n                this.verticalScrollTimeout = window.setTimeout(\n                    this.scrollVertically.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public getScrollLeft(): number {\n        return this.$container.scrollLeft() || 0;\n    }\n\n    public scrollToY(top: number): void {\n        const container = this.$container.get(0) as HTMLElement;\n        container.scrollTop = top;\n    }\n\n    public stopScrolling() {\n        this.horizontalScrollDirection = undefined;\n        this.verticalScrollDirection = undefined;\n        this.scrollParentTop = undefined;\n        this.scrollParentBottom = undefined;\n    }\n\n    private getNewHorizontalScrollDirection(\n        pageX: number,\n    ): HorizontalScrollDirection | undefined {\n        const scrollParentOffset = this.$container.offset();\n        if (!scrollParentOffset) {\n            return undefined;\n        }\n\n        const container = this.$container.get(0) as HTMLElement;\n\n        const rightEdge = scrollParentOffset.left + container.clientWidth;\n        const leftEdge = scrollParentOffset.left;\n        const isNearRightEdge = pageX > rightEdge - 20;\n        const isNearLeftEdge = pageX < leftEdge + 20;\n\n        if (isNearRightEdge) {\n            return \"right\";\n        } else if (isNearLeftEdge) {\n            return \"left\";\n        }\n\n        return undefined;\n    }\n\n    private getNewVerticalScrollDirection(\n        pageY: number,\n    ): VerticalScrollDirection | undefined {\n        if (pageY < this.getScrollParentTop()) {\n            return \"top\";\n        }\n\n        if (pageY > this.getScrollParentBottom()) {\n            return \"bottom\";\n        }\n\n        return undefined;\n    }\n\n    private scrollHorizontally() {\n        if (!this.horizontalScrollDirection) {\n            return;\n        }\n\n        const distance = this.horizontalScrollDirection === \"left\" ? -20 : 20;\n        const container = this.$container.get(0) as HTMLElement;\n\n        container.scrollBy({\n            left: distance,\n            top: 0,\n            behavior: \"instant\",\n        });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollHorizontally.bind(this), 40);\n    }\n\n    private scrollVertically() {\n        if (!this.verticalScrollDirection) {\n            return;\n        }\n\n        const distance = this.verticalScrollDirection === \"top\" ? -20 : 20;\n        const container = this.$container.get(0) as HTMLElement;\n\n        container.scrollBy({\n            left: 0,\n            top: distance,\n            behavior: \"instant\",\n        });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollVertically.bind(this), 40);\n    }\n\n    private getScrollParentTop() {\n        if (this.scrollParentTop == null) {\n            this.scrollParentTop = this.$container.offset()?.top || 0;\n        }\n\n        return this.scrollParentTop;\n    }\n\n    private getScrollParentBottom() {\n        if (this.scrollParentBottom == null) {\n            this.scrollParentBottom =\n                this.getScrollParentTop() +\n                (this.$container.innerHeight() ?? 0);\n        }\n\n        return this.scrollParentBottom;\n    }\n}\n","import type { ScrollParent } from \"./types\";\n\ntype HorizontalScrollDirection = \"left\" | \"right\";\ntype VerticalScrollDirection = \"bottom\" | \"top\";\n\nexport default class DocumentScrollParent implements ScrollParent {\n    private $element: JQuery<HTMLElement>;\n    private horizontalScrollDirection?: HorizontalScrollDirection;\n    private horizontalScrollTimeout?: number;\n    private refreshHitAreas: () => void;\n    private verticalScrollDirection?: VerticalScrollDirection;\n    private verticalScrollTimeout?: number;\n    private documentScrollHeight?: number;\n    private documentScrollWidth?: number;\n\n    constructor($element: JQuery<HTMLElement>, refreshHitAreas: () => void) {\n        this.$element = $element;\n        this.refreshHitAreas = refreshHitAreas;\n    }\n\n    public checkHorizontalScrolling(pageX: number): void {\n        const newHorizontalScrollDirection =\n            this.getNewHorizontalScrollDirection(pageX);\n\n        if (this.horizontalScrollDirection !== newHorizontalScrollDirection) {\n            this.horizontalScrollDirection = newHorizontalScrollDirection;\n\n            if (this.horizontalScrollTimeout != null) {\n                window.clearTimeout(this.horizontalScrollTimeout);\n            }\n\n            if (newHorizontalScrollDirection) {\n                this.horizontalScrollTimeout = window.setTimeout(\n                    this.scrollHorizontally.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public checkVerticalScrolling(pageY: number) {\n        const newVerticalScrollDirection =\n            this.getNewVerticalScrollDirection(pageY);\n\n        if (this.verticalScrollDirection !== newVerticalScrollDirection) {\n            this.verticalScrollDirection = newVerticalScrollDirection;\n\n            if (this.verticalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n                this.verticalScrollTimeout = undefined;\n            }\n\n            if (newVerticalScrollDirection) {\n                this.verticalScrollTimeout = window.setTimeout(\n                    this.scrollVertically.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public getScrollLeft(): number {\n        return document.documentElement.scrollLeft;\n    }\n\n    public scrollToY(top: number): void {\n        const offset = this.$element.offset();\n        const treeTop = offset ? offset.top : 0;\n\n        jQuery(document).scrollTop(top + treeTop);\n    }\n\n    public stopScrolling() {\n        this.horizontalScrollDirection = undefined;\n        this.verticalScrollDirection = undefined;\n        this.documentScrollHeight = undefined;\n        this.documentScrollWidth = undefined;\n    }\n\n    private getNewHorizontalScrollDirection(\n        pageX: number,\n    ): HorizontalScrollDirection | undefined {\n        const $document = jQuery(document);\n\n        const scrollLeft = $document.scrollLeft() || 0;\n        const windowWidth = jQuery(window).width() || 0;\n\n        const isNearRightEdge = pageX > windowWidth - 20;\n        const isNearLeftEdge = pageX - scrollLeft < 20;\n\n        if (isNearRightEdge && this.canScrollRight()) {\n            return \"right\";\n        }\n\n        if (isNearLeftEdge) {\n            return \"left\";\n        }\n\n        return undefined;\n    }\n\n    private canScrollRight() {\n        const documentElement = document.documentElement;\n\n        return (\n            documentElement.scrollLeft + documentElement.clientWidth <\n            this.getDocumentScrollWidth()\n        );\n    }\n\n    private canScrollDown() {\n        const documentElement = document.documentElement;\n\n        return (\n            documentElement.scrollTop + documentElement.clientHeight <\n            this.getDocumentScrollHeight()\n        );\n    }\n\n    private getDocumentScrollHeight() {\n        // Store the original scroll height because the scroll height can increase when the drag element is moved beyond the scroll height.\n        if (this.documentScrollHeight == null) {\n            this.documentScrollHeight = document.documentElement.scrollHeight;\n        }\n\n        return this.documentScrollHeight;\n    }\n\n    private getDocumentScrollWidth() {\n        // Store the original scroll width because the scroll width can increase when the drag element is moved beyond the scroll width.\n        if (this.documentScrollWidth == null) {\n            this.documentScrollWidth = document.documentElement.scrollWidth;\n        }\n\n        return this.documentScrollWidth;\n    }\n\n    private getNewVerticalScrollDirection(\n        pageY: number,\n    ): VerticalScrollDirection | undefined {\n        const scrollTop = jQuery(document).scrollTop() || 0;\n        const distanceTop = pageY - scrollTop;\n\n        if (distanceTop < 20) {\n            return \"top\";\n        }\n\n        const windowHeight = jQuery(window).height() || 0;\n\n        if (windowHeight - (pageY - scrollTop) < 20 && this.canScrollDown()) {\n            return \"bottom\";\n        }\n\n        return undefined;\n    }\n\n    private scrollHorizontally() {\n        if (!this.horizontalScrollDirection) {\n            return;\n        }\n\n        const distance = this.horizontalScrollDirection === \"left\" ? -20 : 20;\n        window.scrollBy({ left: distance, top: 0, behavior: \"instant\" });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollHorizontally.bind(this), 40);\n    }\n\n    private scrollVertically() {\n        if (!this.verticalScrollDirection) {\n            return;\n        }\n\n        const distance = this.verticalScrollDirection === \"top\" ? -20 : 20;\n        window.scrollBy({ left: 0, top: distance, behavior: \"instant\" });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollVertically.bind(this), 40);\n    }\n}\n","import type { ScrollParent } from \"./types\";\nimport ContainerScrollParent from \"./containerScrollParent\";\nimport DocumentScrollParent from \"./documentScrollParent\";\n\nconst hasOverFlow = ($element: JQuery<HTMLElement>): boolean => {\n    for (const attr of [\"overflow\", \"overflow-y\"]) {\n        const overflowValue = $element.css(attr);\n        if (overflowValue === \"auto\" || overflowValue === \"scroll\") {\n            return true;\n        }\n    }\n\n    return false;\n};\n\nconst getParentWithOverflow = (\n    $treeElement: JQuery<HTMLElement>,\n): JQuery<HTMLElement> | null => {\n    if (hasOverFlow($treeElement)) {\n        return $treeElement;\n    }\n\n    for (const element of $treeElement.parents().get()) {\n        const $element = jQuery(element);\n        if (hasOverFlow($element)) {\n            return $element;\n        }\n    }\n\n    return null;\n};\n\nconst createScrollParent = (\n    $treeElement: JQuery<HTMLElement>,\n    refreshHitAreas: () => void,\n): ScrollParent => {\n    const $container = getParentWithOverflow($treeElement);\n\n    if ($container?.length && $container[0]?.tagName !== \"HTML\") {\n        return new ContainerScrollParent({\n            $container,\n            refreshHitAreas,\n            $treeElement,\n        });\n    } else {\n        return new DocumentScrollParent($treeElement, refreshHitAreas);\n    }\n};\n\nexport default createScrollParent;\n","import { JqTreeWidget } from \"./tree.jquery\";\nimport { PositionInfo } from \"./types\";\nimport { ScrollParent } from \"./scrollHandler/types\";\nimport createScrollParent from \"./scrollHandler/createScrollParent\";\n\nexport default class ScrollHandler {\n    private treeWidget: JqTreeWidget;\n    private scrollParent?: ScrollParent;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n        this.scrollParent = undefined;\n    }\n\n    public checkScrolling(positionInfo: PositionInfo): void {\n        this.checkVerticalScrolling(positionInfo);\n        this.checkHorizontalScrolling(positionInfo);\n    }\n\n    public stopScrolling() {\n        this.getScrollParent().stopScrolling();\n    }\n\n    public scrollToY(top: number): void {\n        this.getScrollParent().scrollToY(top);\n    }\n\n    public getScrollLeft(): number {\n        return this.getScrollParent().getScrollLeft();\n    }\n\n    private checkVerticalScrolling(positionInfo: PositionInfo): void {\n        if (positionInfo.pageY == null) {\n            return;\n        }\n\n        this.getScrollParent().checkVerticalScrolling(positionInfo.pageY);\n    }\n\n    private checkHorizontalScrolling(positionInfo: PositionInfo): void {\n        if (positionInfo.pageX == null) {\n            return;\n        }\n\n        this.getScrollParent().checkHorizontalScrolling(positionInfo.pageX);\n    }\n\n    private getScrollParent(): ScrollParent {\n        if (!this.scrollParent) {\n            this.scrollParent = createScrollParent(\n                this.treeWidget.$el,\n                this.treeWidget.refreshHitAreas.bind(this.treeWidget),\n            );\n        }\n\n        return this.scrollParent;\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport default class SelectNodeHandler {\n    private treeWidget: JqTreeWidget;\n    private selectedNodes: Set<NodeId>;\n    private selectedSingleNode: Node | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n        this.selectedNodes = new Set<NodeId>();\n        this.clear();\n    }\n\n    public getSelectedNode(): Node | false {\n        const selectedNodes = this.getSelectedNodes();\n\n        if (selectedNodes.length) {\n            return selectedNodes[0] || false;\n        } else {\n            return false;\n        }\n    }\n\n    public getSelectedNodes(): Node[] {\n        if (this.selectedSingleNode) {\n            return [this.selectedSingleNode];\n        } else {\n            const selectedNodes: Node[] = [];\n\n            this.selectedNodes.forEach((id) => {\n                const node = this.treeWidget.getNodeById(id);\n                if (node) {\n                    selectedNodes.push(node);\n                }\n            });\n\n            return selectedNodes;\n        }\n    }\n\n    public getSelectedNodesUnder(parent: Node): Node[] {\n        if (this.selectedSingleNode) {\n            if (parent.isParentOf(this.selectedSingleNode)) {\n                return [this.selectedSingleNode];\n            } else {\n                return [];\n            }\n        } else {\n            const selectedNodes = [];\n\n            for (const id in this.selectedNodes) {\n                if (\n                    Object.prototype.hasOwnProperty.call(this.selectedNodes, id)\n                ) {\n                    const node = this.treeWidget.getNodeById(id);\n                    if (node && parent.isParentOf(node)) {\n                        selectedNodes.push(node);\n                    }\n                }\n            }\n\n            return selectedNodes;\n        }\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (node.id != null) {\n            return this.selectedNodes.has(node.id);\n        } else if (this.selectedSingleNode) {\n            return this.selectedSingleNode.element === node.element;\n        } else {\n            return false;\n        }\n    }\n\n    public clear(): void {\n        this.selectedNodes.clear();\n        this.selectedSingleNode = null;\n    }\n\n    public removeFromSelection(node: Node, includeChildren = false): void {\n        if (node.id == null) {\n            if (\n                this.selectedSingleNode &&\n                node.element === this.selectedSingleNode.element\n            ) {\n                this.selectedSingleNode = null;\n            }\n        } else {\n            this.selectedNodes.delete(node.id);\n\n            if (includeChildren) {\n                node.iterate(() => {\n                    if (node.id != null) {\n                        this.selectedNodes.delete(node.id);\n                    }\n                    return true;\n                });\n            }\n        }\n    }\n\n    public addToSelection(node: Node): void {\n        if (node.id != null) {\n            this.selectedNodes.add(node.id);\n        } else {\n            this.selectedSingleNode = node;\n        }\n    }\n\n    public isFocusOnTree(): boolean {\n        const activeElement = document.activeElement;\n\n        return Boolean(\n            activeElement &&\n                activeElement.tagName === \"SPAN\" &&\n                this.treeWidget._containsElement(activeElement as HTMLElement)\n        );\n    }\n}\n","import { Position, Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\nimport { DropHint } from \"./types\";\n\nexport type OnFinishOpenNode = (node: Node) => void;\n\nexport class NodeElement {\n    public node: Node;\n    public $element: JQuery<HTMLElement>;\n    protected treeWidget: JqTreeWidget;\n\n    constructor(node: Node, treeWidget: JqTreeWidget) {\n        this.init(node, treeWidget);\n    }\n\n    public init(node: Node, treeWidget: JqTreeWidget): void {\n        this.node = node;\n        this.treeWidget = treeWidget;\n\n        if (!node.element) {\n            const element = this.treeWidget.element.get(0);\n\n            if (element) {\n                node.element = element;\n            }\n        }\n\n        if (node.element) {\n            this.$element = jQuery(node.element);\n        }\n    }\n\n    public addDropHint(position: number): DropHint {\n        if (this.mustShowBorderDropHint(position)) {\n            return new BorderDropHint(\n                this.$element,\n                this.treeWidget._getScrollLeft(),\n            );\n        } else {\n            return new GhostDropHint(this.node, this.$element, position);\n        }\n    }\n\n    public select(mustSetFocus: boolean): void {\n        const $li = this.getLi();\n\n        $li.addClass(\"jqtree-selected\");\n\n        const $span = this.getSpan();\n        $span.attr(\"tabindex\", this.treeWidget.options.tabIndex ?? null);\n        $span.attr(\"aria-selected\", \"true\");\n\n        if (mustSetFocus) {\n            $span.trigger(\"focus\");\n        }\n    }\n\n    public deselect(): void {\n        const $li = this.getLi();\n\n        $li.removeClass(\"jqtree-selected\");\n\n        const $span = this.getSpan();\n        $span.removeAttr(\"tabindex\");\n        $span.attr(\"aria-selected\", \"false\");\n\n        $span.trigger(\"blur\");\n    }\n\n    protected getUl(): JQuery<HTMLElement> {\n        return this.$element.children(\"ul:first\");\n    }\n\n    protected getSpan(): JQuery<HTMLElement> {\n        return this.$element\n            .children(\".jqtree-element\")\n            .find(\"span.jqtree-title\");\n    }\n\n    protected getLi(): JQuery<HTMLElement> {\n        return this.$element;\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return position === Position.Inside;\n    }\n}\n\nexport class FolderElement extends NodeElement {\n    public open(\n        onFinished: OnFinishOpenNode | null,\n        slide = true,\n        animationSpeed: JQuery.Duration = \"fast\",\n    ): void {\n        if (this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = true;\n\n        const $button = this.getButton();\n        $button.removeClass(\"jqtree-closed\");\n        $button.html(\"\");\n\n        const buttonEl = $button.get(0);\n\n        if (buttonEl) {\n            const openedIconElement =\n                this.treeWidget.renderer.openedIconElement;\n\n            if (openedIconElement) {\n                const icon = openedIconElement.cloneNode(true);\n                buttonEl.appendChild(icon);\n            }\n        }\n\n        const doOpen = (): void => {\n            const $li = this.getLi();\n            $li.removeClass(\"jqtree-closed\");\n\n            const $titleSpan = this.getSpan();\n            $titleSpan.attr(\"aria-expanded\", \"true\");\n\n            if (onFinished) {\n                onFinished(this.node);\n            }\n\n            this.treeWidget._triggerEvent(\"tree.open\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            this.getUl().slideDown(animationSpeed, doOpen);\n        } else {\n            this.getUl().show();\n            doOpen();\n        }\n    }\n\n    public close(\n        slide = true,\n        animationSpeed: JQuery.Duration | undefined = \"fast\",\n    ): void {\n        if (!this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = false;\n\n        const $button = this.getButton();\n        $button.addClass(\"jqtree-closed\");\n        $button.html(\"\");\n\n        const buttonEl = $button.get(0);\n\n        if (buttonEl) {\n            const closedIconElement =\n                this.treeWidget.renderer.closedIconElement;\n\n            if (closedIconElement) {\n                const icon = closedIconElement.cloneNode(true);\n                buttonEl.appendChild(icon);\n            }\n        }\n\n        const doClose = (): void => {\n            const $li = this.getLi();\n            $li.addClass(\"jqtree-closed\");\n\n            const $titleSpan = this.getSpan();\n            $titleSpan.attr(\"aria-expanded\", \"false\");\n\n            this.treeWidget._triggerEvent(\"tree.close\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            this.getUl().slideUp(animationSpeed, doClose);\n        } else {\n            this.getUl().hide();\n            doClose();\n        }\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return !this.node.is_open && position === Position.Inside;\n    }\n\n    private getButton(): JQuery {\n        return this.$element\n            .children(\".jqtree-element\")\n            .find(\"a.jqtree-toggler\");\n    }\n}\n\nexport class BorderDropHint implements DropHint {\n    private $hint: JQuery<Element>;\n\n    constructor($element: JQuery<Element>, scrollLeft: number) {\n        const $div = $element.children(\".jqtree-element\");\n\n        const elWidth = $element.width() || 0;\n        const width = Math.max(elWidth + scrollLeft - 4, 0);\n\n        const elHeight = $div.outerHeight() || 0;\n        const height = Math.max(elHeight - 4, 0);\n\n        this.$hint = jQuery('<span class=\"jqtree-border\"></span>');\n        $div.append(this.$hint);\n\n        this.$hint.css({ width, height });\n    }\n\n    public remove(): void {\n        this.$hint.remove();\n    }\n}\n\nclass GhostDropHint implements DropHint {\n    private $element: JQuery<Element>;\n    private node: Node;\n    private $ghost: JQuery;\n\n    constructor(node: Node, $element: JQuery<Element>, position: Position) {\n        this.$element = $element;\n\n        this.node = node;\n        this.$ghost = jQuery(\n            `<li class=\"jqtree_common jqtree-ghost\"><span class=\"jqtree_common jqtree-circle\"></span>\n            <span class=\"jqtree_common jqtree-line\"></span></li>`,\n        );\n\n        if (position === Position.After) {\n            this.moveAfter();\n        } else if (position === Position.Before) {\n            this.moveBefore();\n        } else if (position === Position.Inside) {\n            if (node.isFolder() && node.is_open) {\n                this.moveInsideOpenFolder();\n            } else {\n                this.moveInside();\n            }\n        }\n    }\n\n    public remove(): void {\n        this.$ghost.remove();\n    }\n\n    public moveAfter(): void {\n        this.$element.after(this.$ghost);\n    }\n\n    public moveBefore(): void {\n        this.$element.before(this.$ghost);\n    }\n\n    public moveInsideOpenFolder(): void {\n        const childElement = this.node.children[0]?.element;\n\n        if (childElement) {\n            jQuery(childElement).before(this.$ghost);\n        }\n    }\n\n    public moveInside(): void {\n        this.$element.after(this.$ghost);\n        this.$ghost.addClass(\"jqtree-inside\");\n    }\n}\n","import __version__ from \"./version\";\nimport { DragAndDropHandler } from \"./dragAndDropHandler\";\nimport ElementsRenderer from \"./elementsRenderer\";\nimport DataLoader, { HandleFinishedLoading } from \"./dataLoader\";\nimport KeyHandler from \"./keyHandler\";\nimport MouseWidget from \"./mouse.widget\";\nimport { PositionInfo } from \"./types\";\nimport SaveStateHandler, { SavedState } from \"./saveStateHandler\";\nimport ScrollHandler from \"./scrollHandler\";\nimport SelectNodeHandler from \"./selectNodeHandler\";\nimport SimpleWidget from \"./simple.widget\";\nimport { Node, getPosition } from \"./node\";\nimport { isFunction } from \"./util\";\nimport { FolderElement, NodeElement, OnFinishOpenNode } from \"./nodeElement\";\nimport { JQTreeOptions } from \"./jqtreeOptions\";\n\ninterface ClickTarget {\n    node: Node;\n    type: \"button\" | \"label\";\n}\n\ninterface SelectNodeOptions {\n    mustToggle?: boolean;\n    mustSetFocus?: boolean;\n}\n\nconst NODE_PARAM_IS_EMPTY = \"Node parameter is empty\";\nconst PARAM_IS_EMPTY = \"Parameter is empty: \";\n\nexport class JqTreeWidget extends MouseWidget<JQTreeOptions> {\n    protected static defaults: JQTreeOptions = {\n        animationSpeed: \"fast\",\n        autoEscape: true,\n        autoOpen: false, // true / false / int (open n levels starting at 0)\n        buttonLeft: true,\n        // The symbol to use for a closed node - ► BLACK RIGHT-POINTING POINTER\n        // http://www.fileformat.info/info/unicode/char/25ba/index.htm\n        closedIcon: undefined,\n        data: undefined,\n        dataFilter: undefined,\n        dataUrl: undefined,\n        dragAndDrop: false,\n        keyboardSupport: true,\n        nodeClass: Node,\n        onCanMove: undefined, // Can this node be moved?\n        onCanMoveTo: undefined, // Can this node be moved to this position? function(moved_node, target_node, position)\n        onCanSelectNode: undefined,\n        onCreateLi: undefined,\n        onDragMove: undefined,\n        onDragStop: undefined,\n        onGetStateFromStorage: undefined,\n        onIsMoveHandle: undefined,\n        onLoadFailed: undefined,\n        onLoading: undefined,\n        onSetStateFromStorage: undefined,\n        openedIcon: \"&#x25bc;\",\n        openFolderDelay: 500, // The delay for opening a folder during drag and drop; the value is in milliseconds\n        // The symbol to use for an open node - ▼ BLACK DOWN-POINTING TRIANGLE\n        // http://www.fileformat.info/info/unicode/char/25bc/index.htm\n        rtl: undefined, // right-to-left support; true / false (default)\n        saveState: false, // true / false / string (cookie name)\n        selectable: true,\n        showEmptyFolder: false,\n        slide: true, // must display slide animation?\n        startDndDelay: 300, // The delay for starting dnd (in milliseconds)\n        tabIndex: 0,\n        useContextMenu: true,\n    };\n\n    public element: JQuery;\n    public tree: Node;\n    public dndHandler: DragAndDropHandler;\n    public renderer: ElementsRenderer;\n    public dataLoader: DataLoader;\n    public scrollHandler: ScrollHandler;\n    public selectNodeHandler: SelectNodeHandler;\n\n    private isInitialized: boolean;\n    private saveStateHandler: SaveStateHandler;\n    private keyHandler: KeyHandler;\n\n    public toggle(node: Node, slideParam: null | boolean = null): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.is_open) {\n            this.closeNode(node, slide);\n        } else {\n            this.openNode(node, slide);\n        }\n\n        return this.element;\n    }\n\n    public getTree(): Node {\n        return this.tree;\n    }\n\n    public selectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): JQuery {\n        this.doSelectNode(node, optionsParam);\n        return this.element;\n    }\n\n    public getSelectedNode(): Node | false {\n        return this.selectNodeHandler.getSelectedNode();\n    }\n\n    public toJson(): string {\n        return JSON.stringify(this.tree.getData());\n    }\n\n    public loadData(data: NodeData[], parentNode: Node | null): JQuery {\n        this.doLoadData(data, parentNode);\n        return this.element;\n    }\n\n    /*\n    signatures:\n    - loadDataFromUrl(url, parent_node=null, on_finished=null)\n        loadDataFromUrl('/my_data');\n        loadDataFromUrl('/my_data', node1);\n        loadDataFromUrl('/my_data', node1, function() { console.log('finished'); });\n        loadDataFromUrl('/my_data', null, function() { console.log('finished'); });\n\n    - loadDataFromUrl(parent_node=null, on_finished=null)\n        loadDataFromUrl();\n        loadDataFromUrl(node1);\n        loadDataFromUrl(null, function() { console.log('finished'); });\n        loadDataFromUrl(node1, function() { console.log('finished'); });\n    */\n    public loadDataFromUrl(\n        param1: string | null | Node,\n        param2?: Node | null | HandleFinishedLoading,\n        param3?: HandleFinishedLoading,\n    ): JQuery {\n        if (typeof param1 === \"string\") {\n            // first parameter is url\n            this.doLoadDataFromUrl(\n                param1,\n                param2 as Node | null,\n                param3 ?? null,\n            );\n        } else {\n            // first parameter is not url\n            this.doLoadDataFromUrl(\n                null,\n                param1,\n                param2 as HandleFinishedLoading | null,\n            );\n        }\n\n        return this.element;\n    }\n\n    public reload(onFinished: HandleFinishedLoading | null): JQuery {\n        this.doLoadDataFromUrl(null, null, onFinished);\n        return this.element;\n    }\n\n    public refresh(): JQuery {\n        this._refreshElements(null);\n        return this.element;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.tree.getNodeById(nodeId);\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.tree.getNodeByName(name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        return this.tree.getNodeByNameMustExist(name);\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.tree.getNodesByProperty(key, value);\n    }\n\n    public getNodeByHtmlElement(\n        element: HTMLElement | JQuery<HTMLElement>,\n    ): Node | null {\n        return this.getNode(jQuery(element));\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        return this.tree.getNodeByCallback(callback);\n    }\n\n    public openNode(\n        node: Node,\n        param1?: boolean | OnFinishOpenNode,\n        param2?: OnFinishOpenNode,\n    ): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const parseParams = (): [boolean, OnFinishOpenNode | null] => {\n            let onFinished: OnFinishOpenNode | null;\n            let slide: boolean | null;\n\n            if (isFunction(param1)) {\n                onFinished = param1 as OnFinishOpenNode | null;\n                slide = null;\n            } else {\n                slide = param1 as boolean;\n                onFinished = param2 as OnFinishOpenNode;\n            }\n\n            if (slide == null) {\n                slide = this.options.slide ?? false;\n            }\n\n            return [slide, onFinished];\n        };\n\n        const [slide, onFinished] = parseParams();\n\n        this._openNode(node, slide, onFinished);\n        return this.element;\n    }\n\n    public closeNode(node: Node, slideParam?: null | boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            new FolderElement(node, this).close(\n                slide,\n                this.options.animationSpeed,\n            );\n\n            this.saveState();\n        }\n\n        return this.element;\n    }\n\n    public isDragging(): boolean {\n        return this.dndHandler.isDragging;\n    }\n\n    public refreshHitAreas(): JQuery {\n        this.dndHandler.refresh();\n        return this.element;\n    }\n\n    public addNodeAfter(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        const newNode = existingNode.addAfter(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addNodeBefore(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addBefore(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addParentNode(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addParent(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(newNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public removeNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!node.parent) {\n            throw Error(\"Node has no parent\");\n        }\n\n        this.selectNodeHandler.removeFromSelection(node, true); // including children\n\n        const parent = node.parent;\n        node.remove();\n        this._refreshElements(parent);\n\n        return this.element;\n    }\n\n    public appendNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam || this.tree;\n\n        const node = parentNode.append(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public prependNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam ?? this.tree;\n\n        const node = parentNode.prepend(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public updateNode(node: Node, data: NodeData): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const idIsChanged =\n            typeof data === \"object\" && data.id && data.id !== node.id;\n\n        if (idIsChanged) {\n            this.tree.removeNodeFromIndex(node);\n        }\n\n        node.setData(data);\n\n        if (idIsChanged) {\n            this.tree.addNodeToIndex(node);\n        }\n\n        if (\n            typeof data === \"object\" &&\n            data[\"children\"] &&\n            data[\"children\"] instanceof Array\n        ) {\n            node.removeChildren();\n\n            if (data.children.length) {\n                node.loadFromData(data.children as Node[]);\n            }\n        }\n\n        this._refreshElements(node);\n\n        return this.element;\n    }\n\n    private isSelectedNodeInSubtree(subtree: Node): boolean {\n        const selectedNode = this.getSelectedNode();\n\n        if (!selectedNode) {\n            return false;\n        } else {\n            return subtree === selectedNode || subtree.isParentOf(selectedNode);\n        }\n    }\n\n    public moveNode(node: Node, targetNode: Node, position: string): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!targetNode) {\n            throw Error(PARAM_IS_EMPTY + \"targetNode\");\n        }\n\n        const positionIndex = getPosition(position);\n\n        if (positionIndex !== undefined) {\n            this.tree.moveNode(node, targetNode, positionIndex);\n            this._refreshElements(null);\n        }\n\n        return this.element;\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        return this.saveStateHandler.getStateFromStorage();\n    }\n\n    public addToSelection(node: Node, mustSetFocus?: boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.addToSelection(node);\n\n        this._getNodeElementForNode(node).select(\n            mustSetFocus === undefined ? true : mustSetFocus,\n        );\n\n        this.saveState();\n\n        return this.element;\n    }\n\n    public getSelectedNodes(): Node[] {\n        return this.selectNodeHandler.getSelectedNodes();\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        return this.selectNodeHandler.isNodeSelected(node);\n    }\n\n    public removeFromSelection(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.removeFromSelection(node);\n\n        this._getNodeElementForNode(node).deselect();\n        this.saveState();\n\n        return this.element;\n    }\n\n    public scrollToNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const nodeTop = jQuery(node.element).offset()?.top ?? 0;\n        const treeTop = this.$el.offset()?.top ?? 0;\n        const top = nodeTop - treeTop;\n\n        this.scrollHandler.scrollToY(top);\n\n        return this.element;\n    }\n\n    public getState(): SavedState | null {\n        return this.saveStateHandler.getState();\n    }\n\n    public setState(state: SavedState): JQuery {\n        this.saveStateHandler.setInitialState(state);\n        this._refreshElements(null);\n\n        return this.element;\n    }\n\n    public setOption(option: string, value: unknown): JQuery {\n        (this.options as unknown as Record<string, unknown>)[option] = value;\n        return this.element;\n    }\n\n    public moveDown(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveDown(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public moveUp(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveUp(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public getVersion(): string {\n        return __version__;\n    }\n\n    public _triggerEvent(\n        eventName: string,\n        values?: Record<string, unknown>,\n    ): JQuery.Event {\n        const event = jQuery.Event(eventName, values);\n        this.element.trigger(event);\n        return event;\n    }\n\n    public _openNode(\n        node: Node,\n        slide = true,\n        onFinished: OnFinishOpenNode | null,\n    ): void {\n        const doOpenNode = (\n            _node: Node,\n            _slide: boolean,\n            _onFinished: OnFinishOpenNode | null,\n        ): void => {\n            const folderElement = new FolderElement(_node, this);\n            folderElement.open(\n                _onFinished,\n                _slide,\n                this.options.animationSpeed,\n            );\n        };\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            if (node.load_on_demand) {\n                this.loadFolderOnDemand(node, slide, onFinished);\n            } else {\n                let parent = node.parent;\n\n                while (parent) {\n                    // nb: do not open root element\n                    if (parent.parent) {\n                        doOpenNode(parent, false, null);\n                    }\n                    parent = parent.parent;\n                }\n\n                doOpenNode(node, slide, onFinished);\n                this.saveState();\n            }\n        }\n    }\n\n    /*\n    Redraw the tree or part of the tree.\n     from_node: redraw this subtree\n    */\n    public _refreshElements(fromNode: Node | null): void {\n        const mustSetFocus = this.selectNodeHandler.isFocusOnTree();\n        const mustSelect = fromNode\n            ? this.isSelectedNodeInSubtree(fromNode)\n            : false;\n\n        this.renderer.render(fromNode);\n\n        if (mustSelect) {\n            this.selectCurrentNode(mustSetFocus);\n        }\n\n        this._triggerEvent(\"tree.refresh\");\n    }\n\n    public _getNodeElementForNode(node: Node): NodeElement {\n        if (node.isFolder()) {\n            return new FolderElement(node, this);\n        } else {\n            return new NodeElement(node, this);\n        }\n    }\n\n    public _getNodeElement($element: JQuery<HTMLElement>): NodeElement | null {\n        const node = this.getNode($element);\n        if (node) {\n            return this._getNodeElementForNode(node);\n        } else {\n            return null;\n        }\n    }\n\n    public _containsElement(element: HTMLElement): boolean {\n        const node = this.getNode(jQuery(element));\n\n        return node != null && node.tree === this.tree;\n    }\n\n    public _getScrollLeft(): number {\n        return this.scrollHandler.getScrollLeft();\n    }\n\n    public init(): void {\n        super.init();\n\n        this.element = this.$el;\n        this.isInitialized = false;\n\n        this.options.rtl = this.getRtlOption();\n\n        if (this.options.closedIcon == null) {\n            this.options.closedIcon = this.getDefaultClosedIcon();\n        }\n\n        this.renderer = new ElementsRenderer(this);\n        this.dataLoader = new DataLoader(this);\n        this.saveStateHandler = new SaveStateHandler(this);\n        this.selectNodeHandler = new SelectNodeHandler(this);\n        this.dndHandler = new DragAndDropHandler(this);\n        this.scrollHandler = new ScrollHandler(this);\n        this.keyHandler = new KeyHandler(this);\n\n        this.initData();\n\n        this.element.on(\"click\", this.handleClick);\n        this.element.on(\"dblclick\", this.handleDblclick);\n\n        if (this.options.useContextMenu) {\n            this.element.on(\"contextmenu\", this.handleContextmenu);\n        }\n    }\n\n    public deinit(): void {\n        this.element.empty();\n        this.element.off();\n\n        this.keyHandler.deinit();\n\n        this.tree = new Node({}, true);\n\n        super.deinit();\n    }\n\n    protected mouseCapture(positionInfo: PositionInfo): boolean | null {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseCapture(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStart(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStart(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseDrag(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            const result = this.dndHandler.mouseDrag(positionInfo);\n\n            this.scrollHandler.checkScrolling(positionInfo);\n            return result;\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStop(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            this.scrollHandler.stopScrolling();\n            return this.dndHandler.mouseStop(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected getMouseDelay(): number {\n        return this.options.startDndDelay ?? 0;\n    }\n\n    private initData(): void {\n        if (this.options.data) {\n            this.doLoadData(this.options.data, null);\n        } else {\n            const dataUrl = this.getDataUrlInfo(null);\n\n            if (dataUrl) {\n                this.doLoadDataFromUrl(null, null, null);\n            } else {\n                this.doLoadData([], null);\n            }\n        }\n    }\n\n    private getDataUrlInfo(node: Node | null): JQuery.AjaxSettings | null {\n        const dataUrl =\n            this.options.dataUrl || (this.element.data(\"url\") as string | null);\n\n        const getUrlFromString = (url: string): JQuery.AjaxSettings => {\n            const urlInfo: JQuery.AjaxSettings = { url };\n\n            setUrlInfoData(urlInfo);\n\n            return urlInfo;\n        };\n\n        const setUrlInfoData = (urlInfo: JQuery.AjaxSettings): void => {\n            if (node?.id) {\n                // Load on demand of a subtree; add node parameter\n                const data = { node: node.id };\n                urlInfo[\"data\"] = data;\n            } else {\n                // Add selected_node parameter\n                const selectedNodeId = this.getNodeIdToBeSelected();\n                if (selectedNodeId) {\n                    const data = { selected_node: selectedNodeId };\n                    urlInfo[\"data\"] = data;\n                }\n            }\n        };\n\n        if (typeof dataUrl === \"function\") {\n            return dataUrl(node);\n        } else if (typeof dataUrl === \"string\") {\n            return getUrlFromString(dataUrl);\n        } else if (dataUrl && typeof dataUrl === \"object\") {\n            setUrlInfoData(dataUrl);\n            return dataUrl;\n        } else {\n            return null;\n        }\n    }\n\n    private getNodeIdToBeSelected(): NodeId | null {\n        if (this.options.saveState) {\n            return this.saveStateHandler.getNodeIdToBeSelected();\n        } else {\n            return null;\n        }\n    }\n\n    private initTree(data: NodeData[]): void {\n        const doInit = (): void => {\n            if (!this.isInitialized) {\n                this.isInitialized = true;\n                this._triggerEvent(\"tree.init\");\n            }\n        };\n\n        if (!this.options.nodeClass) {\n            return;\n        }\n\n        this.tree = new this.options.nodeClass(\n            null,\n            true,\n            this.options.nodeClass,\n        );\n\n        this.selectNodeHandler.clear();\n\n        this.tree.loadFromData(data);\n\n        const mustLoadOnDemand = this.setInitialState();\n\n        this._refreshElements(null);\n\n        if (!mustLoadOnDemand) {\n            doInit();\n        } else {\n            // Load data on demand and then init the tree\n            this.setInitialStateOnDemand(doInit);\n        }\n    }\n\n    // Set initial state, either by restoring the state or auto-opening nodes\n    // result: must load nodes on demand?\n    private setInitialState(): boolean {\n        const restoreState = (): [boolean, boolean] => {\n            // result: is state restored, must load on demand?\n            if (!this.options.saveState) {\n                return [false, false];\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return [false, false];\n                } else {\n                    const mustLoadOnDemand =\n                        this.saveStateHandler.setInitialState(state);\n\n                    // return true: the state is restored\n                    return [true, mustLoadOnDemand];\n                }\n            }\n        };\n\n        const autoOpenNodes = (): boolean => {\n            // result: must load on demand?\n            if (this.options.autoOpen === false) {\n                return false;\n            }\n\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let mustLoadOnDemand = false;\n\n            this.tree.iterate((node: Node, level: number) => {\n                if (node.load_on_demand) {\n                    mustLoadOnDemand = true;\n                    return false;\n                } else if (!node.hasChildren()) {\n                    return false;\n                } else {\n                    node.is_open = true;\n                    return level !== maxLevel;\n                }\n            });\n\n            return mustLoadOnDemand;\n        };\n\n        let [isRestored, mustLoadOnDemand] = restoreState(); // eslint-disable-line prefer-const\n\n        if (!isRestored) {\n            mustLoadOnDemand = autoOpenNodes();\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    // Set the initial state for nodes that are loaded on demand\n    // Call cb_finished when done\n    private setInitialStateOnDemand(cbFinished: () => void): void {\n        const restoreState = (): boolean => {\n            if (!this.options.saveState) {\n                return false;\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return false;\n                } else {\n                    this.saveStateHandler.setInitialStateOnDemand(\n                        state,\n                        cbFinished,\n                    );\n\n                    return true;\n                }\n            }\n        };\n\n        const autoOpenNodes = (): void => {\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let loadingCount = 0;\n\n            const loadAndOpenNode = (node: Node): void => {\n                loadingCount += 1;\n                this._openNode(node, false, () => {\n                    loadingCount -= 1;\n                    openNodes();\n                });\n            };\n\n            const openNodes = (): void => {\n                this.tree.iterate((node: Node, level: number) => {\n                    if (node.load_on_demand) {\n                        if (!node.is_loading) {\n                            loadAndOpenNode(node);\n                        }\n\n                        return false;\n                    } else {\n                        this._openNode(node, false, null);\n\n                        return level !== maxLevel;\n                    }\n                });\n\n                if (loadingCount === 0) {\n                    cbFinished();\n                }\n            };\n\n            openNodes();\n        };\n\n        if (!restoreState()) {\n            autoOpenNodes();\n        }\n    }\n\n    private getAutoOpenMaxLevel(): number {\n        if (this.options.autoOpen === true) {\n            return -1;\n        } else if (typeof this.options.autoOpen === \"number\") {\n            return this.options.autoOpen;\n        } else if (typeof this.options.autoOpen === \"string\") {\n            return parseInt(this.options.autoOpen, 10);\n        } else {\n            return 0;\n        }\n    }\n\n    private handleClick = (\n        e: JQuery.ClickEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget) {\n            if (clickTarget.type === \"button\") {\n                this.toggle(clickTarget.node, this.options.slide);\n\n                e.preventDefault();\n                e.stopPropagation();\n            } else if (clickTarget.type === \"label\") {\n                const node = clickTarget.node;\n                const event = this._triggerEvent(\"tree.click\", {\n                    node,\n                    click_event: e,\n                });\n\n                if (!event.isDefaultPrevented()) {\n                    this.doSelectNode(node);\n                }\n            }\n        }\n    };\n\n    private handleDblclick = (\n        e: JQuery.DoubleClickEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget?.type === \"label\") {\n            this._triggerEvent(\"tree.dblclick\", {\n                node: clickTarget.node,\n                click_event: e,\n            });\n        }\n    };\n\n    private getClickTarget(element: EventTarget): ClickTarget | null {\n        const $target = jQuery(element);\n\n        const $button = $target.closest(\".jqtree-toggler\");\n\n        if ($button.length) {\n            const node = this.getNode($button as JQuery<HTMLElement>);\n\n            if (node) {\n                return {\n                    type: \"button\",\n                    node,\n                };\n            }\n        } else {\n            const $el = $target.closest(\".jqtree-element\");\n            if ($el.length) {\n                const node = this.getNode($el as JQuery<HTMLElement>);\n                if (node) {\n                    return {\n                        type: \"label\",\n                        node,\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    private getNode($element: JQuery<HTMLElement>): null | Node {\n        const $li = $element.closest(\"li.jqtree_common\");\n        if ($li.length === 0) {\n            return null;\n        } else {\n            return $li.data(\"node\") as Node;\n        }\n    }\n\n    private handleContextmenu = (\n        e: JQuery.ContextMenuEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ) => {\n        const $div = jQuery(e.target).closest(\"ul.jqtree-tree .jqtree-element\");\n        if ($div.length) {\n            const node = this.getNode($div);\n            if (node) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                this._triggerEvent(\"tree.contextmenu\", {\n                    node,\n                    click_event: e,\n                });\n                return false;\n            }\n        }\n\n        return null;\n    };\n\n    private saveState(): void {\n        if (this.options.saveState) {\n            this.saveStateHandler.saveState();\n        }\n    }\n\n    private selectCurrentNode(mustSetFocus: boolean): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            const nodeElement = this._getNodeElementForNode(node);\n            if (nodeElement) {\n                nodeElement.select(mustSetFocus);\n            }\n        }\n    }\n\n    private deselectCurrentNode(): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            this.removeFromSelection(node);\n        }\n    }\n\n    private getDefaultClosedIcon(): string {\n        if (this.options.rtl) {\n            // triangle to the left\n            return \"&#x25c0;\";\n        } else {\n            // triangle to the right\n            return \"&#x25ba;\";\n        }\n    }\n\n    private getRtlOption(): boolean {\n        if (this.options.rtl != null) {\n            return this.options.rtl;\n        } else {\n            const dataRtl = this.element.data(\"rtl\") as unknown;\n\n            if (\n                dataRtl !== null &&\n                dataRtl !== false &&\n                dataRtl !== undefined\n            ) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    private doSelectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): void {\n        const saveState = (): void => {\n            if (this.options.saveState) {\n                this.saveStateHandler.saveState();\n            }\n        };\n\n        if (!node) {\n            // Called with empty node -> deselect current node\n            this.deselectCurrentNode();\n            saveState();\n            return;\n        }\n        const defaultOptions = { mustSetFocus: true, mustToggle: true };\n        const selectOptions = { ...defaultOptions, ...(optionsParam || {}) };\n\n        const canSelect = (): boolean => {\n            if (this.options.onCanSelectNode) {\n                return (\n                    this.options.selectable === true &&\n                    this.options.onCanSelectNode(node)\n                );\n            } else {\n                return this.options.selectable === true;\n            }\n        };\n\n        const openParents = (): void => {\n            const parent = node.parent;\n\n            if (parent && parent.parent && !parent.is_open) {\n                this.openNode(parent, false);\n            }\n        };\n\n        if (!canSelect()) {\n            return;\n        }\n\n        if (this.selectNodeHandler.isNodeSelected(node)) {\n            if (selectOptions.mustToggle) {\n                this.deselectCurrentNode();\n                this._triggerEvent(\"tree.select\", {\n                    node: null,\n                    previous_node: node,\n                });\n            }\n        } else {\n            const deselectedNode = this.getSelectedNode() || null;\n            this.deselectCurrentNode();\n            this.addToSelection(node, selectOptions.mustSetFocus);\n\n            this._triggerEvent(\"tree.select\", {\n                node,\n                deselected_node: deselectedNode,\n            });\n            openParents();\n        }\n\n        saveState();\n    }\n\n    private doLoadData(data: NodeData[] | null, parentNode: Node | null): void {\n        if (data) {\n            if (parentNode) {\n                this.deselectNodes(parentNode);\n                this.loadSubtree(data, parentNode);\n            } else {\n                this.initTree(data);\n            }\n\n            if (this.isDragging()) {\n                this.dndHandler.refresh();\n            }\n        }\n\n        this._triggerEvent(\"tree.load_data\", {\n            tree_data: data,\n            parent_node: parentNode,\n        });\n    }\n\n    private deselectNodes(parentNode: Node): void {\n        const selectedNodesUnderParent =\n            this.selectNodeHandler.getSelectedNodesUnder(parentNode);\n        for (const n of selectedNodesUnderParent) {\n            this.selectNodeHandler.removeFromSelection(n);\n        }\n    }\n\n    private loadSubtree(data: NodeData[], parentNode: Node): void {\n        parentNode.loadFromData(data);\n\n        parentNode.load_on_demand = false;\n        parentNode.is_loading = false;\n\n        this._refreshElements(parentNode);\n    }\n\n    private doLoadDataFromUrl(\n        urlInfoParam: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null,\n    ): void {\n        const urlInfo = urlInfoParam || this.getDataUrlInfo(parentNode);\n\n        this.dataLoader.loadFromUrl(urlInfo, parentNode, onFinished);\n    }\n\n    private loadFolderOnDemand(\n        node: Node,\n        slide = true,\n        onFinished: OnFinishOpenNode | null,\n    ): void {\n        node.is_loading = true;\n\n        this.doLoadDataFromUrl(null, node, () => {\n            this._openNode(node, slide, onFinished);\n        });\n    }\n}\n\nSimpleWidget.register(JqTreeWidget, \"tree\");\n"],"names":["isNodeRecordWithChildren","data","_typeof","Array","Position","positionNames","before","Before","after","After","inside","Inside","none","None","getPositionName","position","name","Object","prototype","hasOwnProperty","call","Node","nodeData","arguments","length","undefined","isRoot","nodeClass","_classCallCheck","_defineProperty","this","load_on_demand","isEmptyFolder","children","setData","parent","idMapping","Map","tree","_createClass","key","value","o","removeChildren","_step","_iterator","_createForOfIteratorHelper","s","n","done","childData","node","createNode","addChild","loadFromData","err","e","f","push","setParent","index","splice","doRemoveChild","indexOf","hasChildren","callback","_iterate","level","_step2","_iterator2","child","movedNode","targetNode","isParentOf","addChildAtPosition","getChildIndex","getDataFromNodes","nodes","map","tmpNode","k","v","getNodeByCallback","concat","result","iterate","nodeInfo","childIndex","loadChildrenFromData","newParent","_step3","originalParent","_iterator3","removeChild","nodeId","get","id","set","_this","_this$tree","removeNodeFromIndex","previousIndex","nextIndex","filter","nextSibling","getNextSibling","getNextNode","is_open","previousSibling","getPreviousSibling","getLastChild","getParent","lastChild","_this2","addChildren","childrenData","_step4","_iterator4","initFromData","_this$tree2","addNodeToIndex","_this$tree3","_this$tree4","getNodeClass","DragAndDropHandler","treeWidget","hoveredArea","hitAreas","isDragging","currentItem","positionInfo","$element","jQuery","target","mustCaptureElement","options","onIsMoveHandle","nodeElement","_getNodeElement","onCanMove","_this$treeWidget$opti","pageX","pageY","refresh","offset","left","top","dragElement","DragElement","element","autoEscape","addClass","move","area","findHoveredArea","canMoveToArea","isFolder","stopOpenFolderTimer","mustOpenFolderTimer","startOpenFolderTimer","updateDropHint","removeDropHint","onDragMove","originalEvent","moveItem","clear","removeHover","removeHitAreas","removeClass","onDragStop","generateHitAreas","_getNodeElementForNode","hitAreasGenerator","HitAreasGenerator","getTreeDimensions","bottom","generate","is","onCanMoveTo","positionName","remove","previousGhost","x","y","dimensions","right","low","high","mid","addDropHint","folder","openFolderDelay","openFolderTimer","window","setTimeout","_openNode","slide","clearTimeout","previousParent","doMove","moveNode","empty","_refreshElements","_triggerEvent","move_info","moved_node","target_node","previous_parent","do_move","original_event","isDefaultPrevented","el","width","height","_getScrollLeft","_VisibleNodeIterator","_inherits","_super","_createSuper","currentNode","treeBottom","_this4","_assertThisInitialized","positions","lastTop","_positions$0$top","_positions$","previousTop","group","generateHitAreasForGroup","getTop","addPosition","nextNode","positionsInGroup","positionCount","Math","min","areaHeight","round","areaTop","i","VisibleNodeIterator","_this3","isFirstNode","_iterateNode","mustIterateInside","handleFirstNode","handleOpenFolder","handleClosedFolder","handleNode","childrenLength","forEach","_","nextChild","handleAfterOpenFolder","nodeName","offsetX","offsetY","$tree","text","html","css","append","getBoolString","ElementsRenderer","openedIconElement","createButtonElement","openedIcon","closedIconElement","closedIcon","fromNode","renderFromNode","renderFromRoot","createDomElements","$previousLi","li","createLi","getLevel","attachNodeData","isRootNode","ul","createUl","appendChild","classString","role","rtl","dragAndDrop","document","createElement","className","setAttribute","isSelected","Boolean","selectNodeHandler","isNodeSelected","showEmptyFolder","createFolderLi","createNodeLi","onCreateLi","buttonClasses","getButtonClasses","folderClasses","getFolderClasses","iconElement","div","buttonLink","cloneNode","buttonLeft","titleSpan","createTitleSpan","liClasses","join","classes","tabIndex","setTreeItemAriaAttributes","textContent","innerHTML","is_loading","createTextNode","DataLoader","urlInfo","parentNode","onFinished","$el","getDomElement","addLoadingClass","notifyLoading","stopLoading","removeLoadingClass","submitRequest","loadData","parseData","jqXHR","onLoadFailed","isLoading","onLoading","urlInfoInput","handleSuccess","handleError","_ajaxSettings$method","ajaxSettings","_objectSpread","method","cache","dataType","success","error","url","toUpperCase","ajax","dataFilter","parsedData","JSON","parse","KeyHandler","canHandleKeyboard","selectedNode","getSelectedNode","which","DOWN","moveDown","UP","moveUp","RIGHT","moveRight","LEFT","moveLeft","keyboardSupport","on","handleKeyDown","off","selectNode","getNextVisibleNode","getPreviousVisibleNode","openNode","closeNode","isFocusOnTree","register","widgetClass","widgetName","getDataKey","getWidgetData","dataKey","widget","SimpleWidget","createWidget","init","fn","argument1","functionName","destroy","removeData","destroyWidget","_len","args","_key","widgetFunction","apply","callFunction","defaults","constructor","deinit","getPositionInfoFromMouseEvent","getPositionInfoFromTouch","touch","MouseWidget","_SimpleWidget","button","handleMouseDown","cancelable","preventDefault","handleMouseMove","handleMouseUp","touches","changedTouches","addEventListener","mouseDown","passive","touchStart","isMouseStarted","mouseDelayTimer","isMouseDelayMet","mouseDownInfo","removeEventListener","removeMouseMoveEventListeners","mouseCapture","handleStartMouse","mouseMove","touchMove","mouseUp","touchEnd","mouseDelay","getMouseDelay","startMouseDelayTimer","mouseDrag","mouseStart","mouseStop","SaveStateHandler","state","stringify","getState","onSetStateFromStorage","supportsLocalStorage","localStorage","setItem","getKeyName","jsonData","loadFromStorage","parseState","selectedNodeIds","openNodes","open_nodes","selected_node","getSelectedNodes","mustLoadOnDemand","openInitialNodes","resetSelection","selectInitialNodes","cbFinished","doSetInitialStateOnDemand","getStateFromStorage","onGetStateFromStorage","getItem","nodeIds","getNodeById","selectCount","addToSelection","removeFromSelection","nodeIdsParam","selectedNodes","loadingCount","newNodesIds","loadAndOpenNode","saveState","_supportsLocalStorage","sessionStorage","removeItem","testSupport","ContainerScrollParent","_ref","$container","refreshHitAreas","newHorizontalScrollDirection","getNewHorizontalScrollDirection","horizontalScrollDirection","horizontalScrollTimeout","verticalScrollTimeout","scrollHorizontally","bind","newVerticalScrollDirection","getNewVerticalScrollDirection","verticalScrollDirection","scrollVertically","scrollLeft","scrollTop","scrollParentTop","scrollParentBottom","scrollParentOffset","container","rightEdge","clientWidth","leftEdge","getScrollParentTop","getScrollParentBottom","distance","scrollBy","behavior","_this$$container$offs","_this$$container$inne","innerHeight","DocumentScrollParent","documentElement","treeTop","documentScrollHeight","documentScrollWidth","isNearLeftEdge","canScrollRight","getDocumentScrollWidth","clientHeight","getDocumentScrollHeight","scrollHeight","scrollWidth","canScrollDown","hasOverFlow","_i","_arr","attr","overflowValue","createScrollParent","$treeElement","_$container$","parents","getParentWithOverflow","tagName","ScrollHandler","scrollParent","checkVerticalScrolling","checkHorizontalScrolling","getScrollParent","stopScrolling","scrollToY","getScrollLeft","SelectNodeHandler","Set","selectedSingleNode","has","includeChildren","add","activeElement","_containsElement","NodeElement","mustShowBorderDropHint","BorderDropHint","GhostDropHint","mustSetFocus","getLi","$span","getSpan","trigger","removeAttr","find","FolderElement","_NodeElement","animationSpeed","$button","getButton","buttonEl","renderer","icon","doOpen","getUl","slideDown","show","doClose","slideUp","hide","$div","elWidth","max","elHeight","outerHeight","$hint","$ghost","moveAfter","moveBefore","moveInsideOpenFolder","moveInside","_this$node$children$","childElement","NODE_PARAM_IS_EMPTY","PARAM_IS_EMPTY","JqTreeWidget","_MouseWidget","clickTarget","getClickTarget","type","toggle","stopPropagation","click_event","doSelectNode","closest","getNode","slideParam","Error","optionsParam","getData","doLoadData","param1","param2","param3","doLoadDataFromUrl","getNodeByName","getNodeByNameMustExist","getNodesByProperty","_parseParams","_this2$options$slide","parseParams","_parseParams2","_slicedToArray","close","dndHandler","newNodeInfo","existingNode","newNode","addAfter","addBefore","addParent","parentNodeParam","prepend","idIsChanged","subtree","positionIndex","saveStateHandler","select","deselect","_jQuery$offset$top","_jQuery$offset","_this$$el$offset$top","_this$$el$offset","scrollHandler","setInitialState","option","keyHandler","eventName","values","event","Event","doOpenNode","_node","_slide","_onFinished","open","loadFolderOnDemand","mustSelect","isSelectedNodeInSubtree","render","selectCurrentNode","_get","_getPrototypeOf","isInitialized","getRtlOption","getDefaultClosedIcon","dataLoader","initData","handleClick","handleDblclick","useContextMenu","handleContextmenu","checkScrolling","_this$options$startDn","startDndDelay","getDataUrlInfo","dataUrl","setUrlInfoData","selectedNodeId","getNodeIdToBeSelected","_this5","doInit","setInitialStateOnDemand","_this6","_restoreState2","restoreState","isRestored","autoOpen","maxLevel","getAutoOpenMaxLevel","autoOpenNodes","_this7","parseInt","$target","$li","dataRtl","_this8","deselectCurrentNode","selectOptions","mustToggle","onCanSelectNode","selectable","previous_node","deselectedNode","deselected_node","deselectNodes","loadSubtree","initTree","tree_data","parent_node","getSelectedNodesUnder","urlInfoParam","loadFromUrl","_this9"],"mappings":"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"}