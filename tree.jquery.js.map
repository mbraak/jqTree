{"version":3,"file":"tree.jquery.js","sources":["src/node.ts","src/dragAndDropHandler.ts","src/util.ts","src/elementsRenderer.ts","src/dataLoader.ts","src/keyHandler.ts","src/simple.widget.ts","src/mouse.widget.ts","src/saveStateHandler.ts","src/scrollHandler.ts","src/selectNodeHandler.ts","src/nodeElement.ts","src/tree.jquery.ts","src/version.ts"],"sourcesContent":["interface NodeRecordWithChildren extends NodeRecord {\n    children: NodeData[];\n}\n\nexport enum Position {\n    Before = 1,\n    After,\n    Inside,\n    None,\n}\n\nconst positionNames: Record<string, Position> = {\n    before: Position.Before,\n    after: Position.After,\n    inside: Position.Inside,\n    none: Position.None,\n};\n\ntype IterateCallback = (node: Node, level: number) => boolean;\n\nexport const getPositionName = (position: Position): string => {\n    for (const name in positionNames) {\n        if (Object.prototype.hasOwnProperty.call(positionNames, name)) {\n            if (positionNames[name] === position) {\n                return name;\n            }\n        }\n    }\n\n    return \"\";\n};\n\nexport const getPosition = (name: string): Position | undefined =>\n    positionNames[name];\n\nconst isNodeRecordWithChildren = (\n    data: NodeData\n): data is NodeRecordWithChildren =>\n    typeof data === \"object\" &&\n    \"children\" in data &&\n    data[\"children\"] instanceof Array;\n\nexport class Node implements INode {\n    public id?: NodeId;\n    public name: string;\n    public children: Node[];\n    public parent: Node | null;\n    public idMapping: Map<NodeId, Node>;\n    public tree?: Node;\n    public nodeClass?: typeof Node;\n    public load_on_demand: boolean;\n    public is_open: boolean;\n    public element: HTMLElement;\n    public is_loading: boolean;\n    public isEmptyFolder: boolean;\n\n    [key: string]: unknown;\n\n    constructor(o: NodeData | null = null, isRoot = false, nodeClass = Node) {\n        this.name = \"\";\n        this.isEmptyFolder = false;\n        this.load_on_demand = false;\n\n        this.setData(o);\n\n        this.children = [];\n        this.parent = null;\n\n        if (isRoot) {\n            this.idMapping = new Map<NodeId, Node>();\n            this.tree = this;\n            this.nodeClass = nodeClass;\n        }\n    }\n\n    /*\n    Set the data of this node.\n\n    setData(string): set the name of the node\n    setdata(object): set attributes of the node\n\n    Examples:\n        setdata('node1')\n\n        setData({ name: 'node1', id: 1});\n\n        setData({ name: 'node2', id: 2, color: 'green'});\n\n    * This is an internal function; it is not in the docs\n    * Does not remove existing node values\n    */\n    public setData(o: NodeData | null): void {\n        if (!o) {\n            return;\n        } else if (typeof o === \"string\") {\n            this.name = o;\n        } else if (typeof o === \"object\") {\n            for (const key in o) {\n                if (Object.prototype.hasOwnProperty.call(o, key)) {\n                    const value = o[key];\n\n                    if (key === \"label\" || key === \"name\") {\n                        // You can use the 'label' key instead of 'name'; this is a legacy feature\n                        if (typeof value === \"string\") {\n                            this.name = value;\n                        }\n                    } else if (key !== \"children\" && key !== \"parent\") {\n                        // You can't update the children or the parent using this function\n                        this[key] = value;\n                    }\n                }\n            }\n        }\n    }\n\n    /*\n    Create tree from data.\n\n    Structure of data is:\n    [\n        {\n            name: 'node1',\n            children: [\n                { name: 'child1' },\n                { name: 'child2' }\n            ]\n        },\n        {\n            name: 'node2'\n        }\n    ]\n    */\n    public loadFromData(data: NodeData[]): Node {\n        this.removeChildren();\n\n        for (const o of data) {\n            const node = this.createNode(o);\n            this.addChild(node);\n\n            if (isNodeRecordWithChildren(o)) {\n                if (o.children.length === 0) {\n                    node.isEmptyFolder = true;\n                } else {\n                    node.loadFromData(o.children);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /*\n    Add child.\n\n    tree.addChild(\n        new Node('child1')\n    );\n    */\n    public addChild(node: Node): void {\n        this.children.push(node);\n        node.setParent(this);\n    }\n\n    /*\n    Add child at position. Index starts at 0.\n\n    tree.addChildAtPosition(\n        new Node('abc'),\n        1\n    );\n    */\n    public addChildAtPosition(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        node.setParent(this);\n    }\n\n    /*\n    Remove child. This also removes the children of the node.\n\n    tree.removeChild(tree.children[0]);\n    */\n    public removeChild(node: Node): void {\n        // remove children from the index\n        node.removeChildren();\n\n        this.doRemoveChild(node);\n    }\n\n    /*\n    Get child index.\n\n    var index = getChildIndex(node);\n    */\n    public getChildIndex(node: Node): number {\n        return this.children.indexOf(node);\n    }\n\n    /*\n    Does the tree have children?\n\n    if (tree.hasChildren()) {\n        //\n    }\n    */\n    public hasChildren(): boolean {\n        return this.children.length !== 0;\n    }\n\n    public isFolder(): boolean {\n        return this.hasChildren() || this.load_on_demand;\n    }\n\n    /*\n    Iterate over all the nodes in the tree.\n\n    Calls callback with (node, level).\n\n    The callback must return true to continue the iteration on current node.\n\n    tree.iterate(\n        function(node, level) {\n           console.log(node.name);\n\n           // stop iteration after level 2\n           return (level <= 2);\n        }\n    );\n\n    */\n    public iterate(callback: IterateCallback): void {\n        const _iterate = (node: Node, level: number): void => {\n            if (node.children) {\n                for (const child of node.children) {\n                    const result = callback(child, level);\n\n                    if (result && child.hasChildren()) {\n                        _iterate(child, level + 1);\n                    }\n                }\n            }\n        };\n\n        _iterate(this, 0);\n    }\n\n    /*\n    Move node relative to another node.\n\n    Argument position: Position.BEFORE, Position.AFTER or Position.Inside\n\n    // move node1 after node2\n    tree.moveNode(node1, node2, Position.AFTER);\n    */\n    public moveNode(\n        movedNode: Node,\n        targetNode: Node,\n        position: Position\n    ): boolean {\n        if (!movedNode.parent || movedNode.isParentOf(targetNode)) {\n            // - Node is parent of target node\n            // - Or, parent is empty\n            return false;\n        } else {\n            movedNode.parent.doRemoveChild(movedNode);\n\n            switch (position) {\n                case Position.After: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode) + 1\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Before: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode)\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Inside: {\n                    // move inside as first child\n                    targetNode.addChildAtPosition(movedNode, 0);\n                    return true;\n                }\n\n                default:\n                    return false;\n            }\n        }\n    }\n\n    /*\n    Get the tree as data.\n    */\n    public getData(includeParent = false): NodeRecord[] {\n        const getDataFromNodes = (nodes: Node[]): Record<string, unknown>[] => {\n            return nodes.map((node) => {\n                const tmpNode: Record<string, unknown> = {};\n\n                for (const k in node) {\n                    if (\n                        [\n                            \"parent\",\n                            \"children\",\n                            \"element\",\n                            \"idMapping\",\n                            \"load_on_demand\",\n                            \"nodeClass\",\n                            \"tree\",\n                            \"isEmptyFolder\",\n                        ].indexOf(k) === -1 &&\n                        Object.prototype.hasOwnProperty.call(node, k)\n                    ) {\n                        const v = node[k];\n                        tmpNode[k] = v;\n                    }\n                }\n\n                if (node.hasChildren()) {\n                    tmpNode[\"children\"] = getDataFromNodes(node.children);\n                }\n\n                return tmpNode;\n            });\n        };\n\n        if (includeParent) {\n            return getDataFromNodes([this]);\n        } else {\n            return getDataFromNodes(this.children);\n        }\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.getNodeByCallback((node: Node) => node.name === name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        const node = this.getNodeByCallback((n: Node) => n.name === name);\n\n        if (!node) {\n            throw `Node with name ${name} not found`;\n        }\n\n        return node;\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        let result: Node | null = null;\n\n        this.iterate((node: Node) => {\n            if (result) {\n                return false;\n            } else if (callback(node)) {\n                result = node;\n                return false;\n            } else {\n                return true;\n            }\n        });\n\n        return result;\n    }\n\n    public addAfter(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex + 1);\n\n            if (\n                isNodeRecordWithChildren(nodeInfo) &&\n                nodeInfo.children.length\n            ) {\n                node.loadFromData(nodeInfo.children);\n            }\n\n            return node;\n        }\n    }\n\n    public addBefore(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex);\n\n            if (\n                isNodeRecordWithChildren(nodeInfo) &&\n                nodeInfo.children.length\n            ) {\n                node.loadFromData(nodeInfo.children);\n            }\n\n            return node;\n        }\n    }\n\n    public addParent(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const newParent = this.createNode(nodeInfo);\n\n            if (this.tree) {\n                newParent.setParent(this.tree);\n            }\n            const originalParent = this.parent;\n\n            for (const child of originalParent.children) {\n                newParent.addChild(child);\n            }\n\n            originalParent.children = [];\n            originalParent.addChild(newParent);\n            return newParent;\n        }\n    }\n\n    public remove(): void {\n        if (this.parent) {\n            this.parent.removeChild(this);\n            this.parent = null;\n        }\n    }\n\n    public append(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChild(node);\n\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            node.loadFromData(nodeInfo.children);\n        }\n\n        return node;\n    }\n\n    public prepend(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChildAtPosition(node, 0);\n\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            node.loadFromData(nodeInfo.children);\n        }\n\n        return node;\n    }\n\n    public isParentOf(node: Node): boolean {\n        let parent = node.parent;\n\n        while (parent) {\n            if (parent === this) {\n                return true;\n            }\n\n            parent = parent.parent;\n        }\n\n        return false;\n    }\n\n    public getLevel(): number {\n        let level = 0;\n        let node: Node = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n        while (node.parent) {\n            level += 1;\n            node = node.parent;\n        }\n\n        return level;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.idMapping.get(nodeId) || null;\n    }\n\n    public addNodeToIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.set(node.id, node);\n        }\n    }\n\n    public removeNodeFromIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.delete(node.id);\n        }\n    }\n\n    public removeChildren(): void {\n        this.iterate((child: Node) => {\n            this.tree?.removeNodeFromIndex(child);\n            return true;\n        });\n\n        this.children = [];\n    }\n\n    public getPreviousSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousIndex = this.parent.getChildIndex(this) - 1;\n            if (previousIndex >= 0) {\n                return this.parent.children[previousIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNextSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const nextIndex = this.parent.getChildIndex(this) + 1;\n            if (nextIndex < this.parent.children.length) {\n                return this.parent.children[nextIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.filter((node: Node) => node[key] === value);\n    }\n\n    public filter(f: (node: Node) => boolean): Node[] {\n        const result: Node[] = [];\n\n        this.iterate((node: Node) => {\n            if (f(node)) {\n                result.push(node);\n            }\n\n            return true;\n        });\n\n        return result;\n    }\n\n    public getNextNode(includeChildren = true): Node | null {\n        if (includeChildren && this.hasChildren()) {\n            return this.children[0] || null;\n        } else if (!this.parent) {\n            return null;\n        } else {\n            const nextSibling = this.getNextSibling();\n\n            if (nextSibling) {\n                return nextSibling;\n            } else {\n                return this.parent.getNextNode(false);\n            }\n        }\n    }\n\n    public getNextVisibleNode(): Node | null {\n        if (this.hasChildren() && this.is_open) {\n            // First child\n            return this.children[0] || null;\n        } else {\n            if (!this.parent) {\n                return null;\n            } else {\n                const nextSibling = this.getNextSibling();\n                if (nextSibling) {\n                    // Next sibling\n                    return nextSibling;\n                } else {\n                    // Next node of parent\n                    return this.parent.getNextNode(false);\n                }\n            }\n        }\n    }\n\n    public getPreviousNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (previousSibling.hasChildren()) {\n                return previousSibling.getLastChild();\n            } else {\n                return previousSibling;\n            }\n        }\n    }\n\n    public getPreviousVisibleNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (\n                !previousSibling.hasChildren() ||\n                !previousSibling.is_open\n            ) {\n                // Previous sibling\n                return previousSibling;\n            } else {\n                // Last child of previous sibling\n                return previousSibling.getLastChild();\n            }\n        }\n    }\n\n    public getParent(): Node | null {\n        // Return parent except if it is the root node\n        if (!this.parent) {\n            return null;\n        } else if (!this.parent.parent) {\n            // Root node -> null\n            return null;\n        } else {\n            return this.parent;\n        }\n    }\n\n    public getLastChild(): Node | null {\n        if (!this.hasChildren()) {\n            return null;\n        } else {\n            const lastChild = this.children[this.children.length - 1];\n\n            if (!lastChild) {\n                return null;\n            }\n\n            if (!(lastChild.hasChildren() && lastChild.is_open)) {\n                return lastChild;\n            } else {\n                return lastChild?.getLastChild();\n            }\n        }\n    }\n\n    // Init Node from data without making it the root of the tree\n    public initFromData(data: NodeData): void {\n        const addNode = (nodeData: NodeData): void => {\n            this.setData(nodeData);\n\n            if (\n                isNodeRecordWithChildren(nodeData) &&\n                nodeData.children.length\n            ) {\n                addChildren(nodeData.children);\n            }\n        };\n\n        const addChildren = (childrenData: NodeData[]): void => {\n            for (const child of childrenData) {\n                const node = this.createNode();\n                node.initFromData(child);\n                this.addChild(node);\n            }\n        };\n\n        addNode(data);\n    }\n\n    private setParent(parent: Node): void {\n        this.parent = parent;\n        this.tree = parent.tree;\n        this.tree?.addNodeToIndex(this);\n    }\n\n    private doRemoveChild(node: Node): void {\n        this.children.splice(this.getChildIndex(node), 1);\n        this.tree?.removeNodeFromIndex(node);\n    }\n\n    private getNodeClass(): typeof Node {\n        return this.nodeClass || this?.tree?.nodeClass || Node;\n    }\n\n    private createNode(nodeData?: NodeData): Node {\n        const nodeClass = this.getNodeClass();\n        return new nodeClass(nodeData);\n    }\n}\n","import { getPositionName, Node, Position } from \"./node\";\nimport { DropHint, HitArea, PositionInfo } from \"./types\";\nimport { NodeElement } from \"./nodeElement\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\ninterface Dimensions {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n}\n\nexport class DragAndDropHandler {\n    public hitAreas: HitArea[];\n    public isDragging: boolean;\n    public currentItem: NodeElement | null;\n    public hoveredArea: HitArea | null;\n    public positionInfo: PositionInfo | null;\n\n    private treeWidget: JqTreeWidget;\n    private dragElement: DragElement | null;\n    private previousGhost: DropHint | null;\n    private openFolderTimer: number | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        this.hoveredArea = null;\n        this.hitAreas = [];\n        this.isDragging = false;\n        this.currentItem = null;\n        this.positionInfo = null;\n    }\n\n    public mouseCapture(positionInfo: PositionInfo): boolean | null {\n        const $element = jQuery(positionInfo.target);\n\n        if (!this.mustCaptureElement($element)) {\n            return null;\n        }\n\n        if (\n            this.treeWidget.options.onIsMoveHandle &&\n            !this.treeWidget.options.onIsMoveHandle($element)\n        ) {\n            return null;\n        }\n\n        let nodeElement = this.treeWidget._getNodeElement($element);\n\n        if (nodeElement && this.treeWidget.options.onCanMove) {\n            if (!this.treeWidget.options.onCanMove(nodeElement.node)) {\n                nodeElement = null;\n            }\n        }\n\n        this.currentItem = nodeElement;\n        return this.currentItem != null;\n    }\n\n    public mouseStart(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.refresh();\n\n        const offset = jQuery(positionInfo.target).offset();\n        const left = offset ? offset.left : 0;\n        const top = offset ? offset.top : 0;\n\n        const node = this.currentItem.node;\n\n        this.dragElement = new DragElement(\n            node.name,\n            positionInfo.pageX - left,\n            positionInfo.pageY - top,\n            this.treeWidget.element,\n            this.treeWidget.options.autoEscape ?? true\n        );\n\n        this.isDragging = true;\n        this.positionInfo = positionInfo;\n        this.currentItem.$element.addClass(\"jqtree-moving\");\n        return true;\n    }\n\n    public mouseDrag(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            !this.dragElement ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.dragElement.move(positionInfo.pageX, positionInfo.pageY);\n        this.positionInfo = positionInfo;\n\n        const area = this.findHoveredArea(\n            positionInfo.pageX,\n            positionInfo.pageY\n        );\n\n        if (area && this.canMoveToArea(area)) {\n            if (!area.node.isFolder()) {\n                this.stopOpenFolderTimer();\n            }\n\n            if (this.hoveredArea !== area) {\n                this.hoveredArea = area;\n\n                // If this is a closed folder, start timer to open it\n                if (this.mustOpenFolderTimer(area)) {\n                    this.startOpenFolderTimer(area.node);\n                } else {\n                    this.stopOpenFolderTimer();\n                }\n\n                this.updateDropHint();\n            }\n        } else {\n            this.removeDropHint();\n            this.stopOpenFolderTimer();\n            this.hoveredArea = area;\n        }\n\n        if (!area) {\n            if (this.treeWidget.options.onDragMove) {\n                this.treeWidget.options.onDragMove(\n                    this.currentItem.node,\n                    positionInfo.originalEvent\n                );\n            }\n        }\n\n        return true;\n    }\n\n    public mouseStop(positionInfo: PositionInfo): boolean {\n        this.moveItem(positionInfo);\n        this.clear();\n        this.removeHover();\n        this.removeDropHint();\n        this.removeHitAreas();\n\n        const currentItem = this.currentItem;\n\n        if (this.currentItem) {\n            this.currentItem.$element.removeClass(\"jqtree-moving\");\n            this.currentItem = null;\n        }\n\n        this.isDragging = false;\n        this.positionInfo = null;\n\n        if (!this.hoveredArea && currentItem) {\n            if (this.treeWidget.options.onDragStop) {\n                this.treeWidget.options.onDragStop(\n                    currentItem.node,\n                    positionInfo.originalEvent\n                );\n            }\n        }\n\n        return false;\n    }\n\n    public refresh(): void {\n        this.removeHitAreas();\n\n        if (this.currentItem) {\n            this.generateHitAreas();\n\n            this.currentItem = this.treeWidget._getNodeElementForNode(\n                this.currentItem.node\n            );\n\n            if (this.isDragging) {\n                this.currentItem.$element.addClass(\"jqtree-moving\");\n            }\n        }\n    }\n\n    private generateHitAreas(): void {\n        if (!this.currentItem) {\n            this.hitAreas = [];\n        } else {\n            const hitAreasGenerator = new HitAreasGenerator(\n                this.treeWidget.tree,\n                this.currentItem.node,\n                this.getTreeDimensions().bottom\n            );\n            this.hitAreas = hitAreasGenerator.generate();\n        }\n    }\n\n    private mustCaptureElement($element: JQuery<HTMLElement>): boolean {\n        return !$element.is(\"input,select,textarea\");\n    }\n\n    private canMoveToArea(area: HitArea): boolean {\n        if (!this.treeWidget.options.onCanMoveTo) {\n            return true;\n        }\n\n        if (!this.currentItem) {\n            return false;\n        }\n\n        const positionName = getPositionName(area.position);\n\n        return this.treeWidget.options.onCanMoveTo(\n            this.currentItem.node,\n            area.node,\n            positionName\n        );\n    }\n\n    private removeHitAreas(): void {\n        this.hitAreas = [];\n    }\n\n    private clear(): void {\n        if (this.dragElement) {\n            this.dragElement.remove();\n            this.dragElement = null;\n        }\n    }\n\n    private removeDropHint(): void {\n        if (this.previousGhost) {\n            this.previousGhost.remove();\n        }\n    }\n\n    private removeHover(): void {\n        this.hoveredArea = null;\n    }\n\n    private findHoveredArea(x: number, y: number): HitArea | null {\n        const dimensions = this.getTreeDimensions();\n\n        if (\n            x < dimensions.left ||\n            y < dimensions.top ||\n            x > dimensions.right ||\n            y > dimensions.bottom\n        ) {\n            return null;\n        }\n\n        let low = 0;\n        let high = this.hitAreas.length;\n        while (low < high) {\n            const mid = (low + high) >> 1;\n            const area = this.hitAreas[mid];\n\n            if (!area) {\n                return null;\n            }\n\n            if (y < area.top) {\n                high = mid;\n            } else if (y > area.bottom) {\n                low = mid + 1;\n            } else {\n                return area;\n            }\n        }\n\n        return null;\n    }\n\n    private mustOpenFolderTimer(area: HitArea): boolean {\n        const node = area.node;\n\n        return (\n            node.isFolder() &&\n            !node.is_open &&\n            area.position === Position.Inside\n        );\n    }\n\n    private updateDropHint(): void {\n        if (!this.hoveredArea) {\n            return;\n        }\n\n        // remove previous drop hint\n        this.removeDropHint();\n\n        // add new drop hint\n        const nodeElement = this.treeWidget._getNodeElementForNode(\n            this.hoveredArea.node\n        );\n        this.previousGhost = nodeElement.addDropHint(this.hoveredArea.position);\n    }\n\n    private startOpenFolderTimer(folder: Node): void {\n        const openFolder = (): void => {\n            this.treeWidget._openNode(\n                folder,\n                this.treeWidget.options.slide,\n                () => {\n                    this.refresh();\n                    this.updateDropHint();\n                }\n            );\n        };\n\n        this.stopOpenFolderTimer();\n\n        const openFolderDelay = this.treeWidget.options.openFolderDelay;\n\n        if (openFolderDelay !== false) {\n            this.openFolderTimer = window.setTimeout(\n                openFolder,\n                openFolderDelay\n            );\n        }\n    }\n\n    private stopOpenFolderTimer(): void {\n        if (this.openFolderTimer) {\n            clearTimeout(this.openFolderTimer);\n            this.openFolderTimer = null;\n        }\n    }\n\n    private moveItem(positionInfo: PositionInfo): void {\n        if (\n            this.currentItem &&\n            this.hoveredArea &&\n            this.hoveredArea.position !== Position.None &&\n            this.canMoveToArea(this.hoveredArea)\n        ) {\n            const movedNode = this.currentItem.node;\n            const targetNode = this.hoveredArea.node;\n            const position = this.hoveredArea.position;\n            const previousParent = movedNode.parent;\n\n            if (position === Position.Inside) {\n                this.hoveredArea.node.is_open = true;\n            }\n\n            const doMove = (): void => {\n                this.treeWidget.tree.moveNode(movedNode, targetNode, position);\n                this.treeWidget.element.empty();\n                this.treeWidget._refreshElements(null);\n            };\n\n            const event = this.treeWidget._triggerEvent(\"tree.move\", {\n                move_info: {\n                    moved_node: movedNode,\n                    target_node: targetNode,\n                    position: getPositionName(position),\n                    previous_parent: previousParent,\n                    do_move: doMove,\n                    original_event: positionInfo.originalEvent,\n                },\n            });\n\n            if (!event.isDefaultPrevented()) {\n                doMove();\n            }\n        }\n    }\n\n    private getTreeDimensions(): Dimensions {\n        // Return the dimensions of the tree. Add a margin to the bottom to allow\n        // to drag-and-drop after the last element.\n        const offset = this.treeWidget.element.offset();\n\n        if (!offset) {\n            return { left: 0, top: 0, right: 0, bottom: 0 };\n        } else {\n            const el = this.treeWidget.element;\n            const width = el.width() || 0;\n            const height = el.height() || 0;\n            const left = offset.left + this.treeWidget._getScrollLeft();\n\n            return {\n                left,\n                top: offset.top,\n                right: left + width,\n                bottom: offset.top + height + 16,\n            };\n        }\n    }\n}\n\nabstract class VisibleNodeIterator {\n    private tree: Node;\n\n    constructor(tree: Node) {\n        this.tree = tree;\n    }\n\n    protected iterate(): void {\n        let isFirstNode = true;\n\n        const _iterateNode = (node: Node, nextNode: Node | null): void => {\n            let mustIterateInside =\n                (node.is_open || !node.element) && node.hasChildren();\n\n            let $element: JQuery<HTMLElement> | null = null;\n\n            if (node.element) {\n                $element = jQuery(node.element);\n\n                if (!$element.is(\":visible\")) {\n                    return;\n                }\n\n                if (isFirstNode) {\n                    this.handleFirstNode(node);\n                    isFirstNode = false;\n                }\n\n                if (!node.hasChildren()) {\n                    this.handleNode(node, nextNode, $element);\n                } else if (node.is_open) {\n                    if (!this.handleOpenFolder(node, $element)) {\n                        mustIterateInside = false;\n                    }\n                } else {\n                    this.handleClosedFolder(node, nextNode, $element);\n                }\n            }\n\n            if (mustIterateInside) {\n                const childrenLength = node.children.length;\n                node.children.forEach((_, i) => {\n                    const child = node.children[i];\n\n                    if (child) {\n                        if (i === childrenLength - 1) {\n                            _iterateNode(child, null);\n                        } else {\n                            const nextChild = node.children[i + 1];\n\n                            if (nextChild) {\n                                _iterateNode(child, nextChild);\n                            }\n                        }\n                    }\n                });\n\n                if (node.is_open && $element) {\n                    this.handleAfterOpenFolder(node, nextNode);\n                }\n            }\n        };\n\n        _iterateNode(this.tree, null);\n    }\n\n    protected abstract handleNode(\n        node: Node,\n        nextNode: Node | null,\n        $element: JQuery\n    ): void;\n\n    /*\n    override\n    return\n        - true: continue iterating\n        - false: stop iterating\n    */\n    protected abstract handleOpenFolder(node: Node, $element: JQuery): boolean;\n\n    protected abstract handleClosedFolder(\n        node: Node,\n        nextNode: Node | null,\n        $element: JQuery\n    ): void;\n\n    protected abstract handleAfterOpenFolder(\n        node: Node,\n        nextNode: Node | null\n    ): void;\n\n    protected abstract handleFirstNode(node: Node): void;\n}\n\nexport class HitAreasGenerator extends VisibleNodeIterator {\n    private currentNode: Node;\n    private treeBottom: number;\n    private positions: HitArea[];\n    private lastTop: number;\n\n    constructor(tree: Node, currentNode: Node, treeBottom: number) {\n        super(tree);\n\n        this.currentNode = currentNode;\n        this.treeBottom = treeBottom;\n    }\n\n    public generate(): HitArea[] {\n        this.positions = [];\n        this.lastTop = 0;\n\n        this.iterate();\n\n        return this.generateHitAreas(this.positions);\n    }\n\n    protected generateHitAreas(positions: HitArea[]): HitArea[] {\n        let previousTop = -1;\n        let group = [];\n        const hitAreas: HitArea[] = [];\n\n        for (const position of positions) {\n            if (position.top !== previousTop && group.length) {\n                if (group.length) {\n                    this.generateHitAreasForGroup(\n                        hitAreas,\n                        group,\n                        previousTop,\n                        position.top\n                    );\n                }\n\n                previousTop = position.top;\n                group = [];\n            }\n\n            group.push(position);\n        }\n\n        this.generateHitAreasForGroup(\n            hitAreas,\n            group,\n            previousTop,\n            this.treeBottom\n        );\n\n        return hitAreas;\n    }\n\n    protected handleOpenFolder(node: Node, $element: JQuery): boolean {\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n\n            // Dnd over the current element is not possible: add a position with type None for the top and the bottom.\n            const top = this.getTop($element);\n            const height = $element.height() || 0;\n            this.addPosition(node, Position.None, top);\n\n            if (height > 5) {\n                // Subtract 5 pixels to allow more space for the next element.\n                this.addPosition(node, Position.None, top + height - 5);\n            }\n\n            // Stop iterating\n            return false;\n        }\n\n        // Cannot move before current item\n        if (node.children[0] !== this.currentNode) {\n            this.addPosition(node, Position.Inside, this.getTop($element));\n        }\n\n        // Continue iterating\n        return true;\n    }\n\n    protected handleClosedFolder(\n        node: Node,\n        nextNode: Node,\n        $element: JQuery\n    ): void {\n        const top = this.getTop($element);\n\n        if (node === this.currentNode) {\n            // Cannot move after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n\n            // Cannot move before current item\n            if (nextNode !== this.currentNode) {\n                this.addPosition(node, Position.After, top);\n            }\n        }\n    }\n\n    protected handleFirstNode(node: Node): void {\n        if (node !== this.currentNode) {\n            this.addPosition(\n                node,\n                Position.Before,\n                this.getTop(jQuery(node.element))\n            );\n        }\n    }\n\n    protected handleAfterOpenFolder(node: Node, nextNode: Node): void {\n        if (node === this.currentNode || nextNode === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, this.lastTop);\n        } else {\n            this.addPosition(node, Position.After, this.lastTop);\n        }\n    }\n\n    protected handleNode(node: Node, nextNode: Node, $element: JQuery): void {\n        const top = this.getTop($element);\n\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n        }\n\n        if (nextNode === this.currentNode || node === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.After, top);\n        }\n    }\n\n    private getTop($element: JQuery<HTMLElement>): number {\n        const offset = $element.offset();\n\n        return offset ? offset.top : 0;\n    }\n\n    private addPosition(node: Node, position: number, top: number): void {\n        const area = {\n            top,\n            bottom: 0,\n            node,\n            position,\n        };\n\n        this.positions.push(area);\n        this.lastTop = top;\n    }\n\n    private generateHitAreasForGroup(\n        hitAreas: HitArea[],\n        positionsInGroup: HitArea[],\n        top: number,\n        bottom: number\n    ): void {\n        // limit positions in group\n        const positionCount = Math.min(positionsInGroup.length, 4);\n\n        const areaHeight = Math.round((bottom - top) / positionCount);\n        let areaTop = top;\n\n        let i = 0;\n        while (i < positionCount) {\n            const position = positionsInGroup[i];\n\n            if (position && position.position !== Position.None) {\n                hitAreas.push({\n                    top: areaTop,\n                    bottom: areaTop + areaHeight,\n                    node: position.node,\n                    position: position.position,\n                });\n            }\n\n            areaTop += areaHeight;\n            i += 1;\n        }\n    }\n}\n\nclass DragElement {\n    private offsetX: number;\n    private offsetY: number;\n    private $element: JQuery;\n\n    constructor(\n        nodeName: string,\n        offsetX: number,\n        offsetY: number,\n        $tree: JQuery,\n        autoEscape: boolean\n    ) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n\n        this.$element = jQuery(\"<span>\").addClass(\n            \"jqtree-title jqtree-dragging\"\n        );\n\n        if (autoEscape) {\n            this.$element.text(nodeName);\n        } else {\n            this.$element.html(nodeName);\n        }\n\n        this.$element.css(\"position\", \"absolute\");\n        $tree.append(this.$element);\n    }\n\n    public move(pageX: number, pageY: number): void {\n        this.$element.offset({\n            left: pageX - this.offsetX,\n            top: pageY - this.offsetY,\n        });\n    }\n\n    public remove(): void {\n        this.$element.remove();\n    }\n}\n","export const isInt = (n: unknown): boolean =>\n    typeof n === \"number\" && n % 1 === 0;\n\nexport const isFunction = (v: unknown): boolean => typeof v === \"function\";\n\nexport const getBoolString = (value: unknown): string =>\n    value ? \"true\" : \"false\";\n","import { getBoolString } from \"./util\";\nimport { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\ntype IconElement = string | HTMLElement | JQuery<HTMLElement>;\n\nexport default class ElementsRenderer {\n    public openedIconElement?: HTMLElement | Text;\n    public closedIconElement?: HTMLElement | Text;\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        this.openedIconElement = this.createButtonElement(\n            treeWidget.options.openedIcon || \"+\",\n        );\n        this.closedIconElement = this.createButtonElement(\n            treeWidget.options.closedIcon || \"-\",\n        );\n    }\n\n    public render(fromNode: Node | null): void {\n        if (fromNode && fromNode.parent) {\n            this.renderFromNode(fromNode);\n        } else {\n            this.renderFromRoot();\n        }\n    }\n\n    public renderFromRoot(): void {\n        const $element = this.treeWidget.element;\n        $element.empty();\n\n        if ($element[0]) {\n            this.createDomElements(\n                $element[0],\n                this.treeWidget.tree.children,\n                true,\n                1,\n            );\n        }\n    }\n\n    public renderFromNode(node: Node): void {\n        // remember current li\n        const $previousLi = jQuery(node.element);\n\n        // create element\n        const li = this.createLi(node, node.getLevel());\n        this.attachNodeData(node, li);\n\n        // add element to dom\n        $previousLi.after(li);\n\n        // remove previous li\n        $previousLi.remove();\n\n        // create children\n        if (node.children) {\n            this.createDomElements(\n                li,\n                node.children,\n                false,\n                node.getLevel() + 1,\n            );\n        }\n    }\n\n    private createDomElements(\n        element: Element,\n        children: Node[],\n        isRootNode: boolean,\n        level: number,\n    ): void {\n        const ul = this.createUl(isRootNode);\n        element.appendChild(ul);\n\n        for (const child of children) {\n            const li = this.createLi(child, level);\n            ul.appendChild(li);\n\n            this.attachNodeData(child, li);\n\n            if (child.hasChildren()) {\n                this.createDomElements(li, child.children, false, level + 1);\n            }\n        }\n    }\n\n    private attachNodeData(node: Node, li: HTMLElement): void {\n        node.element = li;\n        jQuery(li).data(\"node\", node);\n    }\n\n    private createUl(isRootNode: boolean): HTMLUListElement {\n        let classString;\n        let role;\n\n        if (!isRootNode) {\n            classString = \"\";\n            role = \"group\";\n        } else {\n            classString = \"jqtree-tree\";\n            role = \"tree\";\n\n            if (this.treeWidget.options.rtl) {\n                classString += \" jqtree-rtl\";\n            }\n        }\n\n        if (this.treeWidget.options.dragAndDrop) {\n            classString += \" jqtree-dnd\";\n        }\n\n        const ul = document.createElement(\"ul\");\n        ul.className = `jqtree_common ${classString}`;\n\n        ul.setAttribute(\"role\", role);\n\n        return ul;\n    }\n\n    private createLi(node: Node, level: number): HTMLLIElement {\n        const isSelected = Boolean(\n            this.treeWidget.selectNodeHandler.isNodeSelected(node),\n        );\n\n        const mustShowFolder =\n            node.isFolder() ||\n            (node.isEmptyFolder && this.treeWidget.options.showEmptyFolder);\n\n        const li = mustShowFolder\n            ? this.createFolderLi(node, level, isSelected)\n            : this.createNodeLi(node, level, isSelected);\n\n        if (this.treeWidget.options.onCreateLi) {\n            this.treeWidget.options.onCreateLi(node, jQuery(li), isSelected);\n        }\n\n        return li;\n    }\n\n    private setTreeItemAriaAttributes(\n        element: HTMLElement,\n        name: string,\n        level: number,\n        isSelected: boolean,\n    ) {\n        element.setAttribute(\"aria-label\", name);\n        element.setAttribute(\"aria-level\", `${level}`);\n        element.setAttribute(\"aria-selected\", getBoolString(isSelected));\n        element.setAttribute(\"role\", \"treeitem\");\n    }\n\n    private createFolderLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const buttonClasses = this.getButtonClasses(node);\n        const folderClasses = this.getFolderClasses(node, isSelected);\n\n        const iconElement = node.is_open\n            ? this.openedIconElement\n            : this.closedIconElement;\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = `jqtree_common ${folderClasses}`;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // button link\n        const buttonLink = document.createElement(\"a\");\n        buttonLink.className = buttonClasses;\n\n        if (iconElement) {\n            buttonLink.appendChild(iconElement.cloneNode(true));\n        }\n\n        if (this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            true,\n            level,\n        );\n        titleSpan.setAttribute(\"aria-expanded\", getBoolString(node.is_open));\n        div.appendChild(titleSpan);\n\n        if (!this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        return li;\n    }\n\n    private createNodeLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const liClasses = [\"jqtree_common\"];\n\n        if (isSelected) {\n            liClasses.push(\"jqtree-selected\");\n        }\n\n        const classString = liClasses.join(\" \");\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = classString;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            false,\n            level,\n        );\n        div.appendChild(titleSpan);\n\n        return li;\n    }\n\n    private createTitleSpan(\n        nodeName: string,\n        isSelected: boolean,\n        isFolder: boolean,\n        level: number,\n    ): HTMLSpanElement {\n        const titleSpan = document.createElement(\"span\");\n\n        let classes = \"jqtree-title jqtree_common\";\n\n        if (isFolder) {\n            classes += \" jqtree-title-folder\";\n        }\n\n        classes += ` jqtree-title-button-${\n            this.treeWidget.options.buttonLeft ? \"left\" : \"right\"\n        }`;\n\n        titleSpan.className = classes;\n\n        if (isSelected) {\n            const tabIndex = this.treeWidget.options.tabIndex;\n\n            if (tabIndex !== undefined) {\n                titleSpan.setAttribute(\"tabindex\", `${tabIndex}`);\n            }\n        }\n\n        this.setTreeItemAriaAttributes(titleSpan, nodeName, level, isSelected);\n\n        if (this.treeWidget.options.autoEscape) {\n            titleSpan.textContent = nodeName;\n        } else {\n            titleSpan.innerHTML = nodeName;\n        }\n\n        return titleSpan;\n    }\n\n    private getButtonClasses(node: Node): string {\n        const classes = [\"jqtree-toggler\", \"jqtree_common\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (this.treeWidget.options.buttonLeft) {\n            classes.push(\"jqtree-toggler-left\");\n        } else {\n            classes.push(\"jqtree-toggler-right\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private getFolderClasses(node: Node, isSelected: boolean): string {\n        const classes = [\"jqtree-folder\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (isSelected) {\n            classes.push(\"jqtree-selected\");\n        }\n\n        if (node.is_loading) {\n            classes.push(\"jqtree-loading\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private createButtonElement(\n        value: IconElement,\n    ): HTMLElement | Text | undefined {\n        if (typeof value === \"string\") {\n            // convert value to html\n            const div = document.createElement(\"div\");\n            div.innerHTML = value;\n\n            return document.createTextNode(div.innerHTML);\n        } else {\n            return jQuery(value)[0];\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport type HandleFinishedLoading = () => void;\n\nexport default class DataLoader {\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n    }\n\n    public loadFromUrl(\n        urlInfo: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null\n    ): void {\n        if (!urlInfo) {\n            return;\n        }\n\n        const $el = this.getDomElement(parentNode);\n        this.addLoadingClass($el);\n        this.notifyLoading(true, parentNode, $el);\n\n        const stopLoading = (): void => {\n            this.removeLoadingClass($el);\n            this.notifyLoading(false, parentNode, $el);\n        };\n\n        const handleSuccess = (data: string | NodeData[]): void => {\n            stopLoading();\n            this.treeWidget.loadData(this.parseData(data), parentNode);\n\n            if (onFinished && typeof onFinished === \"function\") {\n                onFinished();\n            }\n        };\n\n        const handleError = (jqXHR: JQuery.jqXHR): void => {\n            stopLoading();\n\n            if (this.treeWidget.options.onLoadFailed) {\n                this.treeWidget.options.onLoadFailed(jqXHR);\n            }\n        };\n\n        this.submitRequest(urlInfo, handleSuccess, handleError);\n    }\n\n    private addLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.addClass(\"jqtree-loading\");\n        }\n    }\n\n    private removeLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.removeClass(\"jqtree-loading\");\n        }\n    }\n\n    private getDomElement(parentNode: Node | null): JQuery<HTMLElement> {\n        if (parentNode) {\n            return jQuery(parentNode.element);\n        } else {\n            return this.treeWidget.element;\n        }\n    }\n\n    private notifyLoading(\n        isLoading: boolean,\n        node: Node | null,\n        $el: JQuery\n    ): void {\n        if (this.treeWidget.options.onLoading) {\n            this.treeWidget.options.onLoading(isLoading, node, $el);\n        }\n\n        this.treeWidget._triggerEvent(\"tree.loading_data\", {\n            isLoading,\n            node,\n            $el,\n        });\n    }\n\n    private submitRequest(\n        urlInfoInput: string | JQuery.AjaxSettings,\n        handleSuccess: JQuery.Ajax.SuccessCallback<any>,\n        handleError: JQuery.Ajax.ErrorCallback<any>\n    ): void {\n        const urlInfo =\n            typeof urlInfoInput === \"string\"\n                ? { url: urlInfoInput }\n                : urlInfoInput;\n\n        const ajaxSettings: JQuery.AjaxSettings = {\n            method: \"GET\",\n            cache: false,\n            dataType: \"json\",\n            success: handleSuccess,\n            error: handleError,\n            ...urlInfo,\n        };\n\n        ajaxSettings.method = ajaxSettings.method?.toUpperCase() || \"GET\";\n\n        void jQuery.ajax(ajaxSettings);\n    }\n\n    private parseData(data: string | NodeData[]): NodeData[] {\n        const { dataFilter } = this.treeWidget.options;\n\n        const getParsedData = () => {\n            if (typeof data === \"string\") {\n                return JSON.parse(data) as NodeData[];\n            } else {\n                return data;\n            }\n        };\n\n        const parsedData = getParsedData();\n\n        if (dataFilter) {\n            return dataFilter(parsedData);\n        } else {\n            return parsedData;\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport default class KeyHandler {\n    private static LEFT = 37;\n    private static UP = 38;\n    private static RIGHT = 39;\n    private static DOWN = 40;\n\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        if (treeWidget.options.keyboardSupport) {\n            jQuery(document).on(\"keydown.jqtree\", this.handleKeyDown);\n        }\n    }\n\n    public deinit(): void {\n        jQuery(document).off(\"keydown.jqtree\");\n    }\n\n    public moveDown(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getNextVisibleNode());\n    }\n\n    public moveUp(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getPreviousVisibleNode());\n    }\n\n    public moveRight(selectedNode: Node): boolean {\n        if (!selectedNode.isFolder()) {\n            return true;\n        } else {\n            // folder node\n            if (selectedNode.is_open) {\n                // Right moves to the first child of an open node\n                return this.selectNode(selectedNode.getNextVisibleNode());\n            } else {\n                // Right expands a closed node\n                this.treeWidget.openNode(selectedNode);\n                return false;\n            }\n        }\n    }\n\n    public moveLeft(selectedNode: Node): boolean {\n        if (selectedNode.isFolder() && selectedNode.is_open) {\n            // Left on an open node closes the node\n            this.treeWidget.closeNode(selectedNode);\n            return false;\n        } else {\n            // Left on a closed or end node moves focus to the node's parent\n            return this.selectNode(selectedNode.getParent());\n        }\n    }\n\n    public selectNode(node: Node | null): boolean {\n        if (!node) {\n            return true;\n        } else {\n            this.treeWidget.selectNode(node);\n\n            if (\n                !this.treeWidget.scrollHandler.isScrolledIntoView(\n                    jQuery(node.element).find(\".jqtree-element\")\n                )\n            ) {\n                this.treeWidget.scrollToNode(node);\n            }\n\n            return false;\n        }\n    }\n\n    private handleKeyDown = (e: JQuery.Event): boolean => {\n        if (!this.canHandleKeyboard()) {\n            return true;\n        }\n\n        const selectedNode = this.treeWidget.getSelectedNode();\n        if (!selectedNode) {\n            return true;\n        }\n\n        const key = e.which;\n\n        switch (key) {\n            case KeyHandler.DOWN:\n                return this.moveDown(selectedNode);\n\n            case KeyHandler.UP:\n                return this.moveUp(selectedNode);\n\n            case KeyHandler.RIGHT:\n                return this.moveRight(selectedNode);\n\n            case KeyHandler.LEFT:\n                return this.moveLeft(selectedNode);\n\n            default:\n                return true;\n        }\n    };\n\n    private canHandleKeyboard(): boolean {\n        return (\n            (this.treeWidget.options.keyboardSupport || false) &&\n            this.treeWidget.selectNodeHandler.isFocusOnTree()\n        );\n    }\n}\n","const register = (widgetClass: unknown, widgetName: string): void => {\n    const getDataKey = (): string => `simple_widget_${widgetName}`;\n\n    const getWidgetData = (\n        el: HTMLElement,\n        dataKey: string\n    ): SimpleWidget<unknown> | null => {\n        const widget = jQuery.data(el, dataKey) as unknown;\n\n        if (widget && widget instanceof SimpleWidget) {\n            return widget;\n        } else {\n            return null;\n        }\n    };\n\n    const createWidget = ($el: JQuery, options: unknown): JQuery => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const existingWidget = getWidgetData(el, dataKey);\n\n            if (!existingWidget) {\n                const simpleWidgetClass = widgetClass as typeof SimpleWidget;\n                const widget = new simpleWidgetClass(el, options);\n\n                if (!jQuery.data(el, dataKey)) {\n                    jQuery.data(el, dataKey, widget);\n                }\n\n                // Call init after setting data, so we can call methods\n                widget.init();\n            }\n        }\n\n        return $el;\n    };\n\n    const destroyWidget = ($el: JQuery): void => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const widget = getWidgetData(el, dataKey);\n\n            if (widget) {\n                widget.destroy();\n            }\n\n            jQuery.removeData(el, dataKey);\n        }\n    };\n\n    const callFunction = (\n        $el: JQuery,\n        functionName: string,\n        args: unknown[]\n    ): unknown => {\n        let result = null;\n\n        for (const el of $el.get()) {\n            const widget = jQuery.data(el, getDataKey()) as unknown;\n\n            if (widget && widget instanceof SimpleWidget) {\n                const simpleWidget = widget as SimpleWidget<unknown>;\n                const widgetFunction = simpleWidget[functionName];\n\n                if (widgetFunction && typeof widgetFunction === \"function\") {\n                    result = widgetFunction.apply(widget, args) as unknown;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (jQuery.fn as any)[widgetName] = function (\n        this: JQuery,\n        argument1: unknown,\n        ...args: unknown[]\n    ) {\n        if (!argument1) {\n            return createWidget(this, null);\n        } else if (typeof argument1 === \"object\") {\n            const options = argument1 as unknown;\n            return createWidget(this, options);\n        } else if (typeof argument1 === \"string\" && argument1[0] !== \"_\") {\n            const functionName = argument1;\n\n            if (functionName === \"destroy\") {\n                return destroyWidget(this);\n            } else if (functionName === \"get_widget_class\") {\n                return widgetClass;\n            } else {\n                return callFunction(this, functionName, args);\n            }\n        } else {\n            return undefined;\n        }\n    };\n};\n\nexport default class SimpleWidget<WidgetOptions> {\n    public static register(widgetClass: unknown, widgetName: string): void {\n        register(widgetClass, widgetName);\n    }\n\n    [key: string]: unknown;\n\n    protected static defaults: unknown = {};\n\n    public options: WidgetOptions;\n\n    public $el: JQuery<HTMLElement>;\n\n    constructor(el: HTMLElement, options: WidgetOptions) {\n        this.$el = jQuery(el);\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const defaults = (this.constructor as any)[\"defaults\"] as WidgetOptions;\n        this.options = { ...defaults, ...options };\n    }\n\n    public destroy(): void {\n        this.deinit();\n    }\n\n    public init(): void {\n        //\n    }\n\n    public deinit(): void {\n        //\n    }\n}\n","/*\nThis widget does the same a the mouse widget in jqueryui.\n*/\nimport SimpleWidget from \"./simple.widget\";\nimport { PositionInfo } from \"./types\";\n\nconst getPositionInfoFromMouseEvent = (e: MouseEvent): PositionInfo => ({\n    pageX: e.pageX,\n    pageY: e.pageY,\n    target: e.target as HTMLElement,\n    originalEvent: e,\n});\n\nconst getPositionInfoFromTouch = (\n    touch: Touch,\n    e: TouchEvent\n): PositionInfo => ({\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    target: touch.target as HTMLElement,\n    originalEvent: e,\n});\n\nabstract class MouseWidget<WidgetOptions> extends SimpleWidget<WidgetOptions> {\n    protected isMouseStarted: boolean;\n    protected mouseDownInfo: PositionInfo | null;\n    private mouseDelayTimer: number | null;\n    private isMouseDelayMet: boolean;\n\n    public init(): void {\n        const element = this.$el.get(0);\n\n        if (element) {\n            element.addEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n            element.addEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.isMouseStarted = false;\n        this.mouseDelayTimer = null;\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n    }\n\n    public deinit(): void {\n        const el = this.$el.get(0);\n\n        if (el) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.removeMouseMoveEventListeners();\n    }\n\n    protected abstract mouseCapture(positionInfo: PositionInfo): boolean | null;\n\n    protected abstract mouseStart(positionInfo: PositionInfo): boolean;\n\n    protected abstract mouseDrag(positionInfo: PositionInfo): void;\n\n    protected abstract mouseStop(positionInfo: PositionInfo): void;\n\n    protected abstract getMouseDelay(): number;\n\n    private mouseDown = (e: MouseEvent): void => {\n        // Left mouse button?\n        if (e.button !== 0) {\n            return;\n        }\n\n        const result = this.handleMouseDown(getPositionInfoFromMouseEvent(e));\n\n        if (result && e.cancelable) {\n            e.preventDefault();\n        }\n    };\n\n    private handleMouseDown(positionInfo: PositionInfo): boolean {\n        // We may have missed mouseup (out of window)\n        if (this.isMouseStarted) {\n            this.handleMouseUp(positionInfo);\n        }\n\n        this.mouseDownInfo = positionInfo;\n\n        if (!this.mouseCapture(positionInfo)) {\n            return false;\n        }\n\n        this.handleStartMouse();\n\n        return true;\n    }\n\n    private handleStartMouse(): void {\n        document.addEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        document.addEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        document.addEventListener(\"mouseup\", this.mouseUp, { passive: false });\n        document.addEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n\n        const mouseDelay = this.getMouseDelay();\n\n        if (mouseDelay) {\n            this.startMouseDelayTimer(mouseDelay);\n        } else {\n            this.isMouseDelayMet = true;\n        }\n    }\n\n    private startMouseDelayTimer(mouseDelay: number): void {\n        if (this.mouseDelayTimer) {\n            clearTimeout(this.mouseDelayTimer);\n        }\n\n        this.mouseDelayTimer = window.setTimeout(() => {\n            if (this.mouseDownInfo) {\n                this.isMouseDelayMet = true;\n            }\n        }, mouseDelay);\n\n        this.isMouseDelayMet = false;\n    }\n\n    private mouseMove = (e: MouseEvent): void => {\n        this.handleMouseMove(e, getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseMove(\n        e: MouseEvent | TouchEvent,\n        positionInfo: PositionInfo\n    ): void {\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n            return;\n        }\n\n        if (!this.isMouseDelayMet) {\n            return;\n        }\n\n        if (this.mouseDownInfo) {\n            this.isMouseStarted = this.mouseStart(this.mouseDownInfo) !== false;\n        }\n\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n        } else {\n            this.handleMouseUp(positionInfo);\n        }\n    }\n\n    private mouseUp = (e: MouseEvent): void => {\n        this.handleMouseUp(getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseUp(positionInfo: PositionInfo): void {\n        this.removeMouseMoveEventListeners();\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n\n        if (this.isMouseStarted) {\n            this.isMouseStarted = false;\n            this.mouseStop(positionInfo);\n        }\n    }\n\n    private removeMouseMoveEventListeners() {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mouseup\", this.mouseUp, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n    }\n\n    private touchStart = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseDown(getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchMove = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseMove(e, getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchEnd = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseUp(getPositionInfoFromTouch(touch, e));\n    };\n}\n\nexport default MouseWidget;\n","import { isInt } from \"./util\";\nimport { JqTreeWidget } from \"./tree.jquery\";\nimport { Node } from \"./node\";\n\nexport interface SavedState {\n    open_nodes: NodeId[];\n    selected_node: NodeId[];\n}\n\nexport default class SaveStateHandler {\n    private treeWidget: JqTreeWidget;\n    private _supportsLocalStorage: boolean | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n    }\n\n    public saveState(): void {\n        const state = JSON.stringify(this.getState());\n\n        if (this.treeWidget.options.onSetStateFromStorage) {\n            this.treeWidget.options.onSetStateFromStorage(state);\n        } else if (this.supportsLocalStorage()) {\n            localStorage.setItem(this.getKeyName(), state);\n        }\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        const jsonData = this.loadFromStorage();\n\n        if (jsonData) {\n            return this.parseState(jsonData) as unknown as SavedState;\n        } else {\n            return null;\n        }\n    }\n\n    public getState(): SavedState {\n        const getOpenNodeIds = (): NodeId[] => {\n            const openNodes: NodeId[] = [];\n\n            this.treeWidget.tree.iterate((node: Node) => {\n                if (node.is_open && node.id && node.hasChildren()) {\n                    openNodes.push(node.id);\n                }\n                return true;\n            });\n\n            return openNodes;\n        };\n\n        const getSelectedNodeIds = (): NodeId[] => {\n            const selectedNodeIds: NodeId[] = [];\n\n            this.treeWidget.getSelectedNodes().forEach((node) => {\n                if (node.id != null) {\n                    selectedNodeIds.push(node.id);\n                }\n            });\n\n            return selectedNodeIds;\n        };\n\n        return {\n            open_nodes: getOpenNodeIds(),\n            selected_node: getSelectedNodeIds(),\n        };\n    }\n\n    /*\n    Set initial state\n    Don't handle nodes that are loaded on demand\n\n    result: must load on demand\n    */\n    public setInitialState(state: SavedState): boolean {\n        if (!state) {\n            return false;\n        } else {\n            let mustLoadOnDemand = false;\n\n            if (state.open_nodes) {\n                mustLoadOnDemand = this.openInitialNodes(state.open_nodes);\n            }\n\n            if (state.selected_node) {\n                this.resetSelection();\n                this.selectInitialNodes(state.selected_node);\n            }\n\n            return mustLoadOnDemand;\n        }\n    }\n\n    public setInitialStateOnDemand(\n        state: SavedState,\n        cbFinished: () => void\n    ): void {\n        if (state) {\n            this.doSetInitialStateOnDemand(\n                state.open_nodes,\n                state.selected_node,\n                cbFinished\n            );\n        } else {\n            cbFinished();\n        }\n    }\n\n    public getNodeIdToBeSelected(): NodeId | null {\n        const state = this.getStateFromStorage();\n\n        if (state && state.selected_node) {\n            return state.selected_node[0] || null;\n        } else {\n            return null;\n        }\n    }\n\n    private parseState(jsonData: string): SavedState {\n        const state = JSON.parse(jsonData) as Record<string, unknown>;\n\n        // Check if selected_node is an int (instead of an array)\n        if (state && state.selected_node && isInt(state.selected_node)) {\n            // Convert to array\n            state.selected_node = [state.selected_node];\n        }\n\n        return state as unknown as SavedState;\n    }\n\n    private loadFromStorage(): string | null {\n        if (this.treeWidget.options.onGetStateFromStorage) {\n            return this.treeWidget.options.onGetStateFromStorage();\n        } else if (this.supportsLocalStorage()) {\n            return localStorage.getItem(this.getKeyName());\n        } else {\n            return null;\n        }\n    }\n\n    private openInitialNodes(nodeIds: NodeId[]): boolean {\n        let mustLoadOnDemand = false;\n\n        for (const nodeId of nodeIds) {\n            const node = this.treeWidget.getNodeById(nodeId);\n\n            if (node) {\n                if (!node.load_on_demand) {\n                    node.is_open = true;\n                } else {\n                    mustLoadOnDemand = true;\n                }\n            }\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    private selectInitialNodes(nodeIds: NodeId[]): boolean {\n        let selectCount = 0;\n\n        for (const nodeId of nodeIds) {\n            const node = this.treeWidget.getNodeById(nodeId);\n\n            if (node) {\n                selectCount += 1;\n\n                this.treeWidget.selectNodeHandler.addToSelection(node);\n            }\n        }\n\n        return selectCount !== 0;\n    }\n\n    private resetSelection(): void {\n        const selectNodeHandler = this.treeWidget.selectNodeHandler;\n\n        const selectedNodes = selectNodeHandler.getSelectedNodes();\n\n        selectedNodes.forEach((node) => {\n            selectNodeHandler.removeFromSelection(node);\n        });\n    }\n\n    private doSetInitialStateOnDemand(\n        nodeIdsParam: NodeId[],\n        selectedNodes: NodeId[],\n        cbFinished: () => void\n    ): void {\n        let loadingCount = 0;\n        let nodeIds = nodeIdsParam;\n\n        const openNodes = (): void => {\n            const newNodesIds = [];\n\n            for (const nodeId of nodeIds) {\n                const node = this.treeWidget.getNodeById(nodeId);\n\n                if (!node) {\n                    newNodesIds.push(nodeId);\n                } else {\n                    if (!node.is_loading) {\n                        if (node.load_on_demand) {\n                            loadAndOpenNode(node);\n                        } else {\n                            this.treeWidget._openNode(node, false, null);\n                        }\n                    }\n                }\n            }\n\n            nodeIds = newNodesIds;\n\n            if (this.selectInitialNodes(selectedNodes)) {\n                this.treeWidget._refreshElements(null);\n            }\n\n            if (loadingCount === 0) {\n                cbFinished();\n            }\n        };\n\n        const loadAndOpenNode = (node: Node): void => {\n            loadingCount += 1;\n            this.treeWidget._openNode(node, false, () => {\n                loadingCount -= 1;\n                openNodes();\n            });\n        };\n\n        openNodes();\n    }\n\n    private getKeyName(): string {\n        if (typeof this.treeWidget.options.saveState === \"string\") {\n            return this.treeWidget.options.saveState;\n        } else {\n            return \"tree\";\n        }\n    }\n\n    private supportsLocalStorage(): boolean {\n        const testSupport = (): boolean => {\n            // Is local storage supported?\n            if (localStorage == null) {\n                return false;\n            } else {\n                // Check if it's possible to store an item. Safari does not allow this in private browsing mode.\n                try {\n                    const key = \"_storage_test\";\n                    sessionStorage.setItem(key, \"value\");\n                    sessionStorage.removeItem(key);\n                } catch (error) {\n                    return false;\n                }\n\n                return true;\n            }\n        };\n\n        if (this._supportsLocalStorage == null) {\n            this._supportsLocalStorage = testSupport();\n        }\n\n        return this._supportsLocalStorage;\n    }\n}\n","import { JqTreeWidget } from \"./tree.jquery\";\nimport { HitArea, PositionInfo } from \"./types\";\n\nexport default class ScrollHandler {\n    private treeWidget: JqTreeWidget;\n    private previousTop: number;\n    private isInitialized: boolean;\n    private $scrollParent: JQuery | null;\n    private scrollParentTop: number;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n        this.previousTop = -1;\n        this.isInitialized = false;\n    }\n\n    public checkScrolling(): void {\n        this.ensureInit();\n        this.checkVerticalScrolling();\n        this.checkHorizontalScrolling();\n    }\n\n    public scrollToY(top: number): void {\n        this.ensureInit();\n\n        if (this.$scrollParent && this.$scrollParent[0]) {\n            this.$scrollParent[0].scrollTop = top;\n        } else {\n            const offset = this.treeWidget.$el.offset();\n            const treeTop = offset ? offset.top : 0;\n\n            jQuery(document).scrollTop(top + treeTop);\n        }\n    }\n\n    public isScrolledIntoView($element: JQuery): boolean {\n        this.ensureInit();\n\n        let elementBottom: number;\n        let viewBottom: number;\n        let elementTop: number;\n        let viewTop: number;\n\n        const elHeight = $element.height() || 0;\n\n        if (this.$scrollParent) {\n            viewTop = 0;\n            viewBottom = this.$scrollParent.height() || 0;\n\n            const offset = $element.offset();\n            const originalTop = offset ? offset.top : 0;\n\n            elementTop = originalTop - this.scrollParentTop;\n            elementBottom = elementTop + elHeight;\n        } else {\n            viewTop = jQuery(window).scrollTop() || 0;\n\n            const windowHeight = jQuery(window).height() || 0;\n            viewBottom = viewTop + windowHeight;\n\n            const offset = $element.offset();\n\n            elementTop = offset ? offset.top : 0;\n            elementBottom = elementTop + elHeight;\n        }\n\n        return elementBottom <= viewBottom && elementTop >= viewTop;\n    }\n\n    public getScrollLeft(): number {\n        if (!this.$scrollParent) {\n            return 0;\n        } else {\n            return this.$scrollParent.scrollLeft() || 0;\n        }\n    }\n\n    private initScrollParent(): void {\n        const getParentWithOverflow = (): JQuery | null => {\n            const cssAttributes = [\"overflow\", \"overflow-y\"];\n\n            const hasOverFlow = ($el: JQuery): boolean => {\n                for (const attr of cssAttributes) {\n                    const overflowValue = $el.css(attr);\n                    if (\n                        overflowValue === \"auto\" ||\n                        overflowValue === \"scroll\"\n                    ) {\n                        return true;\n                    }\n                }\n\n                return false;\n            };\n\n            if (hasOverFlow(this.treeWidget.$el)) {\n                return this.treeWidget.$el;\n            }\n\n            for (const el of this.treeWidget.$el.parents().get()) {\n                const $el = jQuery(el);\n                if (hasOverFlow($el)) {\n                    return $el;\n                }\n            }\n\n            return null;\n        };\n\n        const setDocumentAsScrollParent = (): void => {\n            this.scrollParentTop = 0;\n            this.$scrollParent = null;\n        };\n\n        if (this.treeWidget.$el.css(\"position\") === \"fixed\") {\n            setDocumentAsScrollParent();\n        }\n\n        const $scrollParent = getParentWithOverflow();\n\n        if (\n            $scrollParent &&\n            $scrollParent.length &&\n            $scrollParent[0]?.tagName !== \"HTML\"\n        ) {\n            this.$scrollParent = $scrollParent;\n\n            const offset = this.$scrollParent.offset();\n            this.scrollParentTop = offset ? offset.top : 0;\n        } else {\n            setDocumentAsScrollParent();\n        }\n\n        this.isInitialized = true;\n    }\n\n    private ensureInit(): void {\n        if (!this.isInitialized) {\n            this.initScrollParent();\n        }\n    }\n\n    private handleVerticalScrollingWithScrollParent(area: HitArea): void {\n        const scrollParent = this.$scrollParent && this.$scrollParent[0];\n\n        if (!scrollParent) {\n            return;\n        }\n\n        const distanceBottom =\n            this.scrollParentTop + scrollParent.offsetHeight - area.bottom;\n\n        if (distanceBottom < 20) {\n            scrollParent.scrollTop += 20;\n            this.treeWidget.refreshHitAreas();\n            this.previousTop = -1;\n        } else if (area.top - this.scrollParentTop < 20) {\n            scrollParent.scrollTop -= 20;\n            this.treeWidget.refreshHitAreas();\n            this.previousTop = -1;\n        }\n    }\n\n    private handleVerticalScrollingWithDocument(area: HitArea): void {\n        const scrollTop = jQuery(document).scrollTop() || 0;\n        const distanceTop = area.top - scrollTop;\n\n        if (distanceTop < 20) {\n            jQuery(document).scrollTop(scrollTop - 20);\n        } else {\n            const windowHeight = jQuery(window).height() || 0;\n\n            if (windowHeight - (area.bottom - scrollTop) < 20) {\n                jQuery(document).scrollTop(scrollTop + 20);\n            }\n        }\n    }\n\n    private checkVerticalScrolling(): void {\n        const hoveredArea = this.treeWidget.dndHandler.hoveredArea;\n\n        if (hoveredArea && hoveredArea.top !== this.previousTop) {\n            this.previousTop = hoveredArea.top;\n\n            if (this.$scrollParent) {\n                this.handleVerticalScrollingWithScrollParent(hoveredArea);\n            } else {\n                this.handleVerticalScrollingWithDocument(hoveredArea);\n            }\n        }\n    }\n\n    private checkHorizontalScrolling(): void {\n        const positionInfo = this.treeWidget.dndHandler.positionInfo;\n\n        if (!positionInfo) {\n            return;\n        }\n\n        if (this.$scrollParent) {\n            this.handleHorizontalScrollingWithParent(positionInfo);\n        } else {\n            this.handleHorizontalScrollingWithDocument(positionInfo);\n        }\n    }\n\n    private handleHorizontalScrollingWithParent(\n        positionInfo: PositionInfo\n    ): void {\n        if (\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return;\n        }\n\n        const $scrollParent = this.$scrollParent;\n        const scrollParentOffset = $scrollParent && $scrollParent.offset();\n\n        if (!($scrollParent && scrollParentOffset)) {\n            return;\n        }\n\n        const scrollParent = $scrollParent[0];\n\n        if (!scrollParent) {\n            return;\n        }\n\n        const canScrollRight =\n            scrollParent.scrollLeft + scrollParent.clientWidth <\n            scrollParent.scrollWidth;\n        const canScrollLeft = scrollParent.scrollLeft > 0;\n\n        const rightEdge = scrollParentOffset.left + scrollParent.clientWidth;\n        const leftEdge = scrollParentOffset.left;\n        const isNearRightEdge = positionInfo.pageX > rightEdge - 20;\n        const isNearLeftEdge = positionInfo.pageX < leftEdge + 20;\n\n        if (isNearRightEdge && canScrollRight) {\n            scrollParent.scrollLeft = Math.min(\n                scrollParent.scrollLeft + 20,\n                scrollParent.scrollWidth\n            );\n        } else if (isNearLeftEdge && canScrollLeft) {\n            scrollParent.scrollLeft = Math.max(scrollParent.scrollLeft - 20, 0);\n        }\n    }\n\n    private handleHorizontalScrollingWithDocument(\n        positionInfo: PositionInfo\n    ): void {\n        if (\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return;\n        }\n\n        const $document = jQuery(document);\n\n        const scrollLeft = $document.scrollLeft() || 0;\n        const windowWidth = jQuery(window).width() || 0;\n\n        const canScrollLeft = scrollLeft > 0;\n\n        const isNearRightEdge = positionInfo.pageX > windowWidth - 20;\n        const isNearLeftEdge = positionInfo.pageX - scrollLeft < 20;\n\n        if (isNearRightEdge) {\n            $document.scrollLeft(scrollLeft + 20);\n        } else if (isNearLeftEdge && canScrollLeft) {\n            $document.scrollLeft(Math.max(scrollLeft - 20, 0));\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport default class SelectNodeHandler {\n    private treeWidget: JqTreeWidget;\n    private selectedNodes: Set<NodeId>;\n    private selectedSingleNode: Node | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n        this.selectedNodes = new Set<NodeId>();\n        this.clear();\n    }\n\n    public getSelectedNode(): Node | false {\n        const selectedNodes = this.getSelectedNodes();\n\n        if (selectedNodes.length) {\n            return selectedNodes[0] || false;\n        } else {\n            return false;\n        }\n    }\n\n    public getSelectedNodes(): Node[] {\n        if (this.selectedSingleNode) {\n            return [this.selectedSingleNode];\n        } else {\n            const selectedNodes: Node[] = [];\n\n            this.selectedNodes.forEach((id) => {\n                const node = this.treeWidget.getNodeById(id);\n                if (node) {\n                    selectedNodes.push(node);\n                }\n            });\n\n            return selectedNodes;\n        }\n    }\n\n    public getSelectedNodesUnder(parent: Node): Node[] {\n        if (this.selectedSingleNode) {\n            if (parent.isParentOf(this.selectedSingleNode)) {\n                return [this.selectedSingleNode];\n            } else {\n                return [];\n            }\n        } else {\n            const selectedNodes = [];\n\n            for (const id in this.selectedNodes) {\n                if (\n                    Object.prototype.hasOwnProperty.call(this.selectedNodes, id)\n                ) {\n                    const node = this.treeWidget.getNodeById(id);\n                    if (node && parent.isParentOf(node)) {\n                        selectedNodes.push(node);\n                    }\n                }\n            }\n\n            return selectedNodes;\n        }\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (node.id != null) {\n            return this.selectedNodes.has(node.id);\n        } else if (this.selectedSingleNode) {\n            return this.selectedSingleNode.element === node.element;\n        } else {\n            return false;\n        }\n    }\n\n    public clear(): void {\n        this.selectedNodes.clear();\n        this.selectedSingleNode = null;\n    }\n\n    public removeFromSelection(node: Node, includeChildren = false): void {\n        if (node.id == null) {\n            if (\n                this.selectedSingleNode &&\n                node.element === this.selectedSingleNode.element\n            ) {\n                this.selectedSingleNode = null;\n            }\n        } else {\n            this.selectedNodes.delete(node.id);\n\n            if (includeChildren) {\n                node.iterate(() => {\n                    if (node.id != null) {\n                        this.selectedNodes.delete(node.id);\n                    }\n                    return true;\n                });\n            }\n        }\n    }\n\n    public addToSelection(node: Node): void {\n        if (node.id != null) {\n            this.selectedNodes.add(node.id);\n        } else {\n            this.selectedSingleNode = node;\n        }\n    }\n\n    public isFocusOnTree(): boolean {\n        const activeElement = document.activeElement;\n\n        return Boolean(\n            activeElement &&\n                activeElement.tagName === \"SPAN\" &&\n                this.treeWidget._containsElement(activeElement as HTMLElement)\n        );\n    }\n}\n","import { Position, Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\nimport { DropHint } from \"./types\";\n\nexport type OnFinishOpenNode = (node: Node) => void;\n\nexport class NodeElement {\n    public node: Node;\n    public $element: JQuery<HTMLElement>;\n    protected treeWidget: JqTreeWidget;\n\n    constructor(node: Node, treeWidget: JqTreeWidget) {\n        this.init(node, treeWidget);\n    }\n\n    public init(node: Node, treeWidget: JqTreeWidget): void {\n        this.node = node;\n        this.treeWidget = treeWidget;\n\n        if (!node.element) {\n            const element = this.treeWidget.element.get(0);\n\n            if (element) {\n                node.element = element;\n            }\n        }\n\n        if (node.element) {\n            this.$element = jQuery(node.element);\n        }\n    }\n\n    public addDropHint(position: number): DropHint {\n        if (this.mustShowBorderDropHint(position)) {\n            return new BorderDropHint(\n                this.$element,\n                this.treeWidget._getScrollLeft(),\n            );\n        } else {\n            return new GhostDropHint(this.node, this.$element, position);\n        }\n    }\n\n    public select(mustSetFocus: boolean): void {\n        const $li = this.getLi();\n\n        $li.addClass(\"jqtree-selected\");\n\n        const $span = this.getSpan();\n        $span.attr(\"tabindex\", this.treeWidget.options.tabIndex ?? null);\n        $span.attr(\"aria-selected\", \"true\");\n\n        if (mustSetFocus) {\n            $span.trigger(\"focus\");\n        }\n    }\n\n    public deselect(): void {\n        const $li = this.getLi();\n\n        $li.removeClass(\"jqtree-selected\");\n\n        const $span = this.getSpan();\n        $span.removeAttr(\"tabindex\");\n        $span.attr(\"aria-selected\", \"false\");\n\n        $span.trigger(\"blur\");\n    }\n\n    protected getUl(): JQuery<HTMLElement> {\n        return this.$element.children(\"ul:first\");\n    }\n\n    protected getSpan(): JQuery<HTMLElement> {\n        return this.$element\n            .children(\".jqtree-element\")\n            .find(\"span.jqtree-title\");\n    }\n\n    protected getLi(): JQuery<HTMLElement> {\n        return this.$element;\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return position === Position.Inside;\n    }\n}\n\nexport class FolderElement extends NodeElement {\n    public open(\n        onFinished: OnFinishOpenNode | null,\n        slide = true,\n        animationSpeed: JQuery.Duration = \"fast\",\n    ): void {\n        if (this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = true;\n\n        const $button = this.getButton();\n        $button.removeClass(\"jqtree-closed\");\n        $button.html(\"\");\n\n        const buttonEl = $button.get(0);\n\n        if (buttonEl) {\n            const openedIconElement =\n                this.treeWidget.renderer.openedIconElement;\n\n            if (openedIconElement) {\n                const icon = openedIconElement.cloneNode(true);\n                buttonEl.appendChild(icon);\n            }\n        }\n\n        const doOpen = (): void => {\n            const $li = this.getLi();\n            $li.removeClass(\"jqtree-closed\");\n\n            const $titleSpan = this.getSpan();\n            $titleSpan.attr(\"aria-expanded\", \"true\");\n\n            if (onFinished) {\n                onFinished(this.node);\n            }\n\n            this.treeWidget._triggerEvent(\"tree.open\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            this.getUl().slideDown(animationSpeed, doOpen);\n        } else {\n            this.getUl().show();\n            doOpen();\n        }\n    }\n\n    public close(\n        slide = true,\n        animationSpeed: JQuery.Duration | undefined = \"fast\",\n    ): void {\n        if (!this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = false;\n\n        const $button = this.getButton();\n        $button.addClass(\"jqtree-closed\");\n        $button.html(\"\");\n\n        const buttonEl = $button.get(0);\n\n        if (buttonEl) {\n            const closedIconElement =\n                this.treeWidget.renderer.closedIconElement;\n\n            if (closedIconElement) {\n                const icon = closedIconElement.cloneNode(true);\n                buttonEl.appendChild(icon);\n            }\n        }\n\n        const doClose = (): void => {\n            const $li = this.getLi();\n            $li.addClass(\"jqtree-closed\");\n\n            const $titleSpan = this.getSpan();\n            $titleSpan.attr(\"aria-expanded\", \"false\");\n\n            this.treeWidget._triggerEvent(\"tree.close\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            this.getUl().slideUp(animationSpeed, doClose);\n        } else {\n            this.getUl().hide();\n            doClose();\n        }\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return !this.node.is_open && position === Position.Inside;\n    }\n\n    private getButton(): JQuery {\n        return this.$element\n            .children(\".jqtree-element\")\n            .find(\"a.jqtree-toggler\");\n    }\n}\n\nexport class BorderDropHint implements DropHint {\n    private $hint: JQuery<Element>;\n\n    constructor($element: JQuery<Element>, scrollLeft: number) {\n        const $div = $element.children(\".jqtree-element\");\n\n        const elWidth = $element.width() || 0;\n        const width = Math.max(elWidth + scrollLeft - 4, 0);\n\n        const elHeight = $div.outerHeight() || 0;\n        const height = Math.max(elHeight - 4, 0);\n\n        this.$hint = jQuery('<span class=\"jqtree-border\"></span>');\n        $div.append(this.$hint);\n\n        this.$hint.css({ width, height });\n    }\n\n    public remove(): void {\n        this.$hint.remove();\n    }\n}\n\nclass GhostDropHint implements DropHint {\n    private $element: JQuery<Element>;\n    private node: Node;\n    private $ghost: JQuery;\n\n    constructor(node: Node, $element: JQuery<Element>, position: Position) {\n        this.$element = $element;\n\n        this.node = node;\n        this.$ghost = jQuery(\n            `<li class=\"jqtree_common jqtree-ghost\"><span class=\"jqtree_common jqtree-circle\"></span>\n            <span class=\"jqtree_common jqtree-line\"></span></li>`,\n        );\n\n        if (position === Position.After) {\n            this.moveAfter();\n        } else if (position === Position.Before) {\n            this.moveBefore();\n        } else if (position === Position.Inside) {\n            if (node.isFolder() && node.is_open) {\n                this.moveInsideOpenFolder();\n            } else {\n                this.moveInside();\n            }\n        }\n    }\n\n    public remove(): void {\n        this.$ghost.remove();\n    }\n\n    public moveAfter(): void {\n        this.$element.after(this.$ghost);\n    }\n\n    public moveBefore(): void {\n        this.$element.before(this.$ghost);\n    }\n\n    public moveInsideOpenFolder(): void {\n        const childElement = this.node.children[0]?.element;\n\n        if (childElement) {\n            jQuery(childElement).before(this.$ghost);\n        }\n    }\n\n    public moveInside(): void {\n        this.$element.after(this.$ghost);\n        this.$ghost.addClass(\"jqtree-inside\");\n    }\n}\n","import __version__ from \"./version\";\nimport { DragAndDropHandler } from \"./dragAndDropHandler\";\nimport ElementsRenderer from \"./elementsRenderer\";\nimport DataLoader, { HandleFinishedLoading } from \"./dataLoader\";\nimport KeyHandler from \"./keyHandler\";\nimport MouseWidget from \"./mouse.widget\";\nimport { PositionInfo } from \"./types\";\nimport SaveStateHandler, { SavedState } from \"./saveStateHandler\";\nimport ScrollHandler from \"./scrollHandler\";\nimport SelectNodeHandler from \"./selectNodeHandler\";\nimport SimpleWidget from \"./simple.widget\";\nimport { Node, getPosition } from \"./node\";\nimport { isFunction } from \"./util\";\nimport { FolderElement, NodeElement, OnFinishOpenNode } from \"./nodeElement\";\nimport { JQTreeOptions } from \"./jqtreeOptions\";\n\ninterface ClickTarget {\n    node: Node;\n    type: \"button\" | \"label\";\n}\n\ninterface SelectNodeOptions {\n    mustToggle?: boolean;\n    mustSetFocus?: boolean;\n}\n\nconst NODE_PARAM_IS_EMPTY = \"Node parameter is empty\";\nconst PARAM_IS_EMPTY = \"Parameter is empty: \";\n\nexport class JqTreeWidget extends MouseWidget<JQTreeOptions> {\n    protected static defaults: JQTreeOptions = {\n        animationSpeed: \"fast\",\n        autoEscape: true,\n        autoOpen: false, // true / false / int (open n levels starting at 0)\n        buttonLeft: true,\n        // The symbol to use for a closed node - ► BLACK RIGHT-POINTING POINTER\n        // http://www.fileformat.info/info/unicode/char/25ba/index.htm\n        closedIcon: undefined,\n        data: undefined,\n        dataFilter: undefined,\n        dataUrl: undefined,\n        dragAndDrop: false,\n        keyboardSupport: true,\n        nodeClass: Node,\n        onCanMove: undefined, // Can this node be moved?\n        onCanMoveTo: undefined, // Can this node be moved to this position? function(moved_node, target_node, position)\n        onCanSelectNode: undefined,\n        onCreateLi: undefined,\n        onDragMove: undefined,\n        onDragStop: undefined,\n        onGetStateFromStorage: undefined,\n        onIsMoveHandle: undefined,\n        onLoadFailed: undefined,\n        onLoading: undefined,\n        onSetStateFromStorage: undefined,\n        openedIcon: \"&#x25bc;\",\n        openFolderDelay: 500, // The delay for opening a folder during drag and drop; the value is in milliseconds\n        // The symbol to use for an open node - ▼ BLACK DOWN-POINTING TRIANGLE\n        // http://www.fileformat.info/info/unicode/char/25bc/index.htm\n        rtl: undefined, // right-to-left support; true / false (default)\n        saveState: false, // true / false / string (cookie name)\n        selectable: true,\n        showEmptyFolder: false,\n        slide: true, // must display slide animation?\n        startDndDelay: 300, // The delay for starting dnd (in milliseconds)\n        tabIndex: 0,\n        useContextMenu: true,\n    };\n\n    public element: JQuery;\n    public tree: Node;\n    public dndHandler: DragAndDropHandler;\n    public renderer: ElementsRenderer;\n    public dataLoader: DataLoader;\n    public scrollHandler: ScrollHandler;\n    public selectNodeHandler: SelectNodeHandler;\n\n    private isInitialized: boolean;\n    private saveStateHandler: SaveStateHandler;\n    private keyHandler: KeyHandler;\n\n    public toggle(node: Node, slideParam: null | boolean = null): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.is_open) {\n            this.closeNode(node, slide);\n        } else {\n            this.openNode(node, slide);\n        }\n\n        return this.element;\n    }\n\n    public getTree(): Node {\n        return this.tree;\n    }\n\n    public selectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions\n    ): JQuery {\n        this.doSelectNode(node, optionsParam);\n        return this.element;\n    }\n\n    public getSelectedNode(): Node | false {\n        return this.selectNodeHandler.getSelectedNode();\n    }\n\n    public toJson(): string {\n        return JSON.stringify(this.tree.getData());\n    }\n\n    public loadData(data: NodeData[], parentNode: Node | null): JQuery {\n        this.doLoadData(data, parentNode);\n        return this.element;\n    }\n\n    /*\n    signatures:\n    - loadDataFromUrl(url, parent_node=null, on_finished=null)\n        loadDataFromUrl('/my_data');\n        loadDataFromUrl('/my_data', node1);\n        loadDataFromUrl('/my_data', node1, function() { console.log('finished'); });\n        loadDataFromUrl('/my_data', null, function() { console.log('finished'); });\n\n    - loadDataFromUrl(parent_node=null, on_finished=null)\n        loadDataFromUrl();\n        loadDataFromUrl(node1);\n        loadDataFromUrl(null, function() { console.log('finished'); });\n        loadDataFromUrl(node1, function() { console.log('finished'); });\n    */\n    public loadDataFromUrl(\n        param1: string | null | Node,\n        param2?: Node | null | HandleFinishedLoading,\n        param3?: HandleFinishedLoading\n    ): JQuery {\n        if (typeof param1 === \"string\") {\n            // first parameter is url\n            this.doLoadDataFromUrl(\n                param1,\n                param2 as Node | null,\n                param3 ?? null\n            );\n        } else {\n            // first parameter is not url\n            this.doLoadDataFromUrl(\n                null,\n                param1,\n                param2 as HandleFinishedLoading | null\n            );\n        }\n\n        return this.element;\n    }\n\n    public reload(onFinished: HandleFinishedLoading | null): JQuery {\n        this.doLoadDataFromUrl(null, null, onFinished);\n        return this.element;\n    }\n\n    public refresh(): JQuery {\n        this._refreshElements(null);\n        return this.element;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.tree.getNodeById(nodeId);\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.tree.getNodeByName(name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        return this.tree.getNodeByNameMustExist(name);\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.tree.getNodesByProperty(key, value);\n    }\n\n    public getNodeByHtmlElement(\n        element: HTMLElement | JQuery<HTMLElement>\n    ): Node | null {\n        return this.getNode(jQuery(element));\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        return this.tree.getNodeByCallback(callback);\n    }\n\n    public openNode(\n        node: Node,\n        param1?: boolean | OnFinishOpenNode,\n        param2?: OnFinishOpenNode\n    ): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const parseParams = (): [boolean, OnFinishOpenNode | null] => {\n            let onFinished: OnFinishOpenNode | null;\n            let slide: boolean | null;\n\n            if (isFunction(param1)) {\n                onFinished = param1 as OnFinishOpenNode | null;\n                slide = null;\n            } else {\n                slide = param1 as boolean;\n                onFinished = param2 as OnFinishOpenNode;\n            }\n\n            if (slide == null) {\n                slide = this.options.slide ?? false;\n            }\n\n            return [slide, onFinished];\n        };\n\n        const [slide, onFinished] = parseParams();\n\n        this._openNode(node, slide, onFinished);\n        return this.element;\n    }\n\n    public closeNode(node: Node, slideParam?: null | boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            new FolderElement(node, this).close(\n                slide,\n                this.options.animationSpeed\n            );\n\n            this.saveState();\n        }\n\n        return this.element;\n    }\n\n    public isDragging(): boolean {\n        return this.dndHandler.isDragging;\n    }\n\n    public refreshHitAreas(): JQuery {\n        this.dndHandler.refresh();\n        return this.element;\n    }\n\n    public addNodeAfter(\n        newNodeInfo: NodeData,\n        existingNode: Node\n    ): Node | null {\n        const newNode = existingNode.addAfter(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addNodeBefore(\n        newNodeInfo: NodeData,\n        existingNode: Node\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addBefore(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addParentNode(\n        newNodeInfo: NodeData,\n        existingNode: Node\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addParent(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(newNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public removeNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!node.parent) {\n            throw Error(\"Node has no parent\");\n        }\n\n        this.selectNodeHandler.removeFromSelection(node, true); // including children\n\n        const parent = node.parent;\n        node.remove();\n        this._refreshElements(parent);\n\n        return this.element;\n    }\n\n    public appendNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam || this.tree;\n\n        const node = parentNode.append(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public prependNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam ?? this.tree;\n\n        const node = parentNode.prepend(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public updateNode(node: Node, data: NodeData): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const idIsChanged =\n            typeof data === \"object\" && data.id && data.id !== node.id;\n\n        if (idIsChanged) {\n            this.tree.removeNodeFromIndex(node);\n        }\n\n        node.setData(data);\n\n        if (idIsChanged) {\n            this.tree.addNodeToIndex(node);\n        }\n\n        if (\n            typeof data === \"object\" &&\n            data[\"children\"] &&\n            data[\"children\"] instanceof Array\n        ) {\n            node.removeChildren();\n\n            if (data.children.length) {\n                node.loadFromData(data.children as Node[]);\n            }\n        }\n\n        this._refreshElements(node);\n\n        return this.element;\n    }\n\n    private isSelectedNodeInSubtree(subtree: Node): boolean {\n        const selectedNode = this.getSelectedNode();\n\n        if (!selectedNode) {\n            return false;\n        } else {\n            return subtree === selectedNode || subtree.isParentOf(selectedNode);\n        }\n    }\n\n    public moveNode(node: Node, targetNode: Node, position: string): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!targetNode) {\n            throw Error(PARAM_IS_EMPTY + \"targetNode\");\n        }\n\n        const positionIndex = getPosition(position);\n\n        if (positionIndex !== undefined) {\n            this.tree.moveNode(node, targetNode, positionIndex);\n            this._refreshElements(null);\n        }\n\n        return this.element;\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        return this.saveStateHandler.getStateFromStorage();\n    }\n\n    public addToSelection(node: Node, mustSetFocus?: boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.addToSelection(node);\n\n        this._getNodeElementForNode(node).select(\n            mustSetFocus === undefined ? true : mustSetFocus\n        );\n\n        this.saveState();\n\n        return this.element;\n    }\n\n    public getSelectedNodes(): Node[] {\n        return this.selectNodeHandler.getSelectedNodes();\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        return this.selectNodeHandler.isNodeSelected(node);\n    }\n\n    public removeFromSelection(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.removeFromSelection(node);\n\n        this._getNodeElementForNode(node).deselect();\n        this.saveState();\n\n        return this.element;\n    }\n\n    public scrollToNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const nodeOffset = jQuery(node.element).offset();\n        const nodeTop = nodeOffset ? nodeOffset.top : 0;\n\n        const treeOffset = this.$el.offset();\n        const treeTop = treeOffset ? treeOffset.top : 0;\n\n        const top = nodeTop - treeTop;\n\n        this.scrollHandler.scrollToY(top);\n\n        return this.element;\n    }\n\n    public getState(): SavedState | null {\n        return this.saveStateHandler.getState();\n    }\n\n    public setState(state: SavedState): JQuery {\n        this.saveStateHandler.setInitialState(state);\n        this._refreshElements(null);\n\n        return this.element;\n    }\n\n    public setOption(option: string, value: unknown): JQuery {\n        (this.options as unknown as Record<string, unknown>)[option] = value;\n        return this.element;\n    }\n\n    public moveDown(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveDown(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public moveUp(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveUp(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public getVersion(): string {\n        return __version__;\n    }\n\n    public _triggerEvent(\n        eventName: string,\n        values?: Record<string, unknown>\n    ): JQuery.Event {\n        const event = jQuery.Event(eventName, values);\n        this.element.trigger(event);\n        return event;\n    }\n\n    public _openNode(\n        node: Node,\n        slide = true,\n        onFinished: OnFinishOpenNode | null\n    ): void {\n        const doOpenNode = (\n            _node: Node,\n            _slide: boolean,\n            _onFinished: OnFinishOpenNode | null\n        ): void => {\n            const folderElement = new FolderElement(_node, this);\n            folderElement.open(\n                _onFinished,\n                _slide,\n                this.options.animationSpeed\n            );\n        };\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            if (node.load_on_demand) {\n                this.loadFolderOnDemand(node, slide, onFinished);\n            } else {\n                let parent = node.parent;\n\n                while (parent) {\n                    // nb: do not open root element\n                    if (parent.parent) {\n                        doOpenNode(parent, false, null);\n                    }\n                    parent = parent.parent;\n                }\n\n                doOpenNode(node, slide, onFinished);\n                this.saveState();\n            }\n        }\n    }\n\n    /*\n    Redraw the tree or part of the tree.\n     from_node: redraw this subtree\n    */\n    public _refreshElements(fromNode: Node | null): void {\n        const mustSetFocus = this.selectNodeHandler.isFocusOnTree();\n        const mustSelect = fromNode\n            ? this.isSelectedNodeInSubtree(fromNode)\n            : false;\n\n        this.renderer.render(fromNode);\n\n        if (mustSelect) {\n            this.selectCurrentNode(mustSetFocus);\n        }\n\n        this._triggerEvent(\"tree.refresh\");\n    }\n\n    public _getNodeElementForNode(node: Node): NodeElement {\n        if (node.isFolder()) {\n            return new FolderElement(node, this);\n        } else {\n            return new NodeElement(node, this);\n        }\n    }\n\n    public _getNodeElement($element: JQuery<HTMLElement>): NodeElement | null {\n        const node = this.getNode($element);\n        if (node) {\n            return this._getNodeElementForNode(node);\n        } else {\n            return null;\n        }\n    }\n\n    public _containsElement(element: HTMLElement): boolean {\n        const node = this.getNode(jQuery(element));\n\n        return node != null && node.tree === this.tree;\n    }\n\n    public _getScrollLeft(): number {\n        return this.scrollHandler.getScrollLeft();\n    }\n\n    public init(): void {\n        super.init();\n\n        this.element = this.$el;\n        this.isInitialized = false;\n\n        this.options.rtl = this.getRtlOption();\n\n        if (this.options.closedIcon == null) {\n            this.options.closedIcon = this.getDefaultClosedIcon();\n        }\n\n        this.renderer = new ElementsRenderer(this);\n        this.dataLoader = new DataLoader(this);\n        this.saveStateHandler = new SaveStateHandler(this);\n        this.selectNodeHandler = new SelectNodeHandler(this);\n        this.dndHandler = new DragAndDropHandler(this);\n        this.scrollHandler = new ScrollHandler(this);\n        this.keyHandler = new KeyHandler(this);\n\n        this.initData();\n\n        this.element.on(\"click\", this.handleClick);\n        this.element.on(\"dblclick\", this.handleDblclick);\n\n        if (this.options.useContextMenu) {\n            this.element.on(\"contextmenu\", this.handleContextmenu);\n        }\n    }\n\n    public deinit(): void {\n        this.element.empty();\n        this.element.off();\n\n        this.keyHandler.deinit();\n\n        this.tree = new Node({}, true);\n\n        super.deinit();\n    }\n\n    protected mouseCapture(positionInfo: PositionInfo): boolean | null {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseCapture(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStart(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStart(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseDrag(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            const result = this.dndHandler.mouseDrag(positionInfo);\n\n            this.scrollHandler.checkScrolling();\n            return result;\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStop(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStop(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected getMouseDelay(): number {\n        return this.options.startDndDelay ?? 0;\n    }\n\n    private initData(): void {\n        if (this.options.data) {\n            this.doLoadData(this.options.data, null);\n        } else {\n            const dataUrl = this.getDataUrlInfo(null);\n\n            if (dataUrl) {\n                this.doLoadDataFromUrl(null, null, null);\n            } else {\n                this.doLoadData([], null);\n            }\n        }\n    }\n\n    private getDataUrlInfo(node: Node | null): JQuery.AjaxSettings | null {\n        const dataUrl =\n            this.options.dataUrl || (this.element.data(\"url\") as string | null);\n\n        const getUrlFromString = (url: string): JQuery.AjaxSettings => {\n            const urlInfo: JQuery.AjaxSettings = { url };\n\n            setUrlInfoData(urlInfo);\n\n            return urlInfo;\n        };\n\n        const setUrlInfoData = (urlInfo: JQuery.AjaxSettings): void => {\n            if (node?.id) {\n                // Load on demand of a subtree; add node parameter\n                const data = { node: node.id };\n                urlInfo[\"data\"] = data;\n            } else {\n                // Add selected_node parameter\n                const selectedNodeId = this.getNodeIdToBeSelected();\n                if (selectedNodeId) {\n                    const data = { selected_node: selectedNodeId };\n                    urlInfo[\"data\"] = data;\n                }\n            }\n        };\n\n        if (typeof dataUrl === \"function\") {\n            return dataUrl(node);\n        } else if (typeof dataUrl === \"string\") {\n            return getUrlFromString(dataUrl);\n        } else if (dataUrl && typeof dataUrl === \"object\") {\n            setUrlInfoData(dataUrl);\n            return dataUrl;\n        } else {\n            return null;\n        }\n    }\n\n    private getNodeIdToBeSelected(): NodeId | null {\n        if (this.options.saveState) {\n            return this.saveStateHandler.getNodeIdToBeSelected();\n        } else {\n            return null;\n        }\n    }\n\n    private initTree(data: NodeData[]): void {\n        const doInit = (): void => {\n            if (!this.isInitialized) {\n                this.isInitialized = true;\n                this._triggerEvent(\"tree.init\");\n            }\n        };\n\n        if (!this.options.nodeClass) {\n            return;\n        }\n\n        this.tree = new this.options.nodeClass(\n            null,\n            true,\n            this.options.nodeClass\n        );\n\n        this.selectNodeHandler.clear();\n\n        this.tree.loadFromData(data);\n\n        const mustLoadOnDemand = this.setInitialState();\n\n        this._refreshElements(null);\n\n        if (!mustLoadOnDemand) {\n            doInit();\n        } else {\n            // Load data on demand and then init the tree\n            this.setInitialStateOnDemand(doInit);\n        }\n    }\n\n    // Set initial state, either by restoring the state or auto-opening nodes\n    // result: must load nodes on demand?\n    private setInitialState(): boolean {\n        const restoreState = (): [boolean, boolean] => {\n            // result: is state restored, must load on demand?\n            if (!this.options.saveState) {\n                return [false, false];\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return [false, false];\n                } else {\n                    const mustLoadOnDemand =\n                        this.saveStateHandler.setInitialState(state);\n\n                    // return true: the state is restored\n                    return [true, mustLoadOnDemand];\n                }\n            }\n        };\n\n        const autoOpenNodes = (): boolean => {\n            // result: must load on demand?\n            if (this.options.autoOpen === false) {\n                return false;\n            }\n\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let mustLoadOnDemand = false;\n\n            this.tree.iterate((node: Node, level: number) => {\n                if (node.load_on_demand) {\n                    mustLoadOnDemand = true;\n                    return false;\n                } else if (!node.hasChildren()) {\n                    return false;\n                } else {\n                    node.is_open = true;\n                    return level !== maxLevel;\n                }\n            });\n\n            return mustLoadOnDemand;\n        };\n\n        let [isRestored, mustLoadOnDemand] = restoreState(); // eslint-disable-line prefer-const\n\n        if (!isRestored) {\n            mustLoadOnDemand = autoOpenNodes();\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    // Set the initial state for nodes that are loaded on demand\n    // Call cb_finished when done\n    private setInitialStateOnDemand(cbFinished: () => void): void {\n        const restoreState = (): boolean => {\n            if (!this.options.saveState) {\n                return false;\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return false;\n                } else {\n                    this.saveStateHandler.setInitialStateOnDemand(\n                        state,\n                        cbFinished\n                    );\n\n                    return true;\n                }\n            }\n        };\n\n        const autoOpenNodes = (): void => {\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let loadingCount = 0;\n\n            const loadAndOpenNode = (node: Node): void => {\n                loadingCount += 1;\n                this._openNode(node, false, () => {\n                    loadingCount -= 1;\n                    openNodes();\n                });\n            };\n\n            const openNodes = (): void => {\n                this.tree.iterate((node: Node, level: number) => {\n                    if (node.load_on_demand) {\n                        if (!node.is_loading) {\n                            loadAndOpenNode(node);\n                        }\n\n                        return false;\n                    } else {\n                        this._openNode(node, false, null);\n\n                        return level !== maxLevel;\n                    }\n                });\n\n                if (loadingCount === 0) {\n                    cbFinished();\n                }\n            };\n\n            openNodes();\n        };\n\n        if (!restoreState()) {\n            autoOpenNodes();\n        }\n    }\n\n    private getAutoOpenMaxLevel(): number {\n        if (this.options.autoOpen === true) {\n            return -1;\n        } else if (typeof this.options.autoOpen === \"number\") {\n            return this.options.autoOpen;\n        } else if (typeof this.options.autoOpen === \"string\") {\n            return parseInt(this.options.autoOpen, 10);\n        } else {\n            return 0;\n        }\n    }\n\n    private handleClick = (\n        e: JQuery.ClickEvent<HTMLElement, any, HTMLElement, HTMLElement>\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget) {\n            if (clickTarget.type === \"button\") {\n                this.toggle(clickTarget.node, this.options.slide);\n\n                e.preventDefault();\n                e.stopPropagation();\n            } else if (clickTarget.type === \"label\") {\n                const node = clickTarget.node;\n                const event = this._triggerEvent(\"tree.click\", {\n                    node,\n                    click_event: e,\n                });\n\n                if (!event.isDefaultPrevented()) {\n                    this.doSelectNode(node);\n                }\n            }\n        }\n    };\n\n    private handleDblclick = (\n        e: JQuery.DoubleClickEvent<HTMLElement, any, HTMLElement, HTMLElement>\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget?.type === \"label\") {\n            this._triggerEvent(\"tree.dblclick\", {\n                node: clickTarget.node,\n                click_event: e,\n            });\n        }\n    };\n\n    private getClickTarget(element: EventTarget): ClickTarget | null {\n        const $target = jQuery(element);\n\n        const $button = $target.closest(\".jqtree-toggler\");\n\n        if ($button.length) {\n            const node = this.getNode($button as JQuery<HTMLElement>);\n\n            if (node) {\n                return {\n                    type: \"button\",\n                    node,\n                };\n            }\n        } else {\n            const $el = $target.closest(\".jqtree-element\");\n            if ($el.length) {\n                const node = this.getNode($el as JQuery<HTMLElement>);\n                if (node) {\n                    return {\n                        type: \"label\",\n                        node,\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    private getNode($element: JQuery<HTMLElement>): null | Node {\n        const $li = $element.closest(\"li.jqtree_common\");\n        if ($li.length === 0) {\n            return null;\n        } else {\n            return $li.data(\"node\") as Node;\n        }\n    }\n\n    private handleContextmenu = (\n        e: JQuery.ContextMenuEvent<HTMLElement, any, HTMLElement, HTMLElement>\n    ) => {\n        const $div = jQuery(e.target).closest(\"ul.jqtree-tree .jqtree-element\");\n        if ($div.length) {\n            const node = this.getNode($div);\n            if (node) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                this._triggerEvent(\"tree.contextmenu\", {\n                    node,\n                    click_event: e,\n                });\n                return false;\n            }\n        }\n\n        return null;\n    };\n\n    private saveState(): void {\n        if (this.options.saveState) {\n            this.saveStateHandler.saveState();\n        }\n    }\n\n    private selectCurrentNode(mustSetFocus: boolean): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            const nodeElement = this._getNodeElementForNode(node);\n            if (nodeElement) {\n                nodeElement.select(mustSetFocus);\n            }\n        }\n    }\n\n    private deselectCurrentNode(): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            this.removeFromSelection(node);\n        }\n    }\n\n    private getDefaultClosedIcon(): string {\n        if (this.options.rtl) {\n            // triangle to the left\n            return \"&#x25c0;\";\n        } else {\n            // triangle to the right\n            return \"&#x25ba;\";\n        }\n    }\n\n    private getRtlOption(): boolean {\n        if (this.options.rtl != null) {\n            return this.options.rtl;\n        } else {\n            const dataRtl = this.element.data(\"rtl\") as unknown;\n\n            if (\n                dataRtl !== null &&\n                dataRtl !== false &&\n                dataRtl !== undefined\n            ) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    private doSelectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions\n    ): void {\n        const saveState = (): void => {\n            if (this.options.saveState) {\n                this.saveStateHandler.saveState();\n            }\n        };\n\n        if (!node) {\n            // Called with empty node -> deselect current node\n            this.deselectCurrentNode();\n            saveState();\n            return;\n        }\n        const defaultOptions = { mustSetFocus: true, mustToggle: true };\n        const selectOptions = { ...defaultOptions, ...(optionsParam || {}) };\n\n        const canSelect = (): boolean => {\n            if (this.options.onCanSelectNode) {\n                return (\n                    this.options.selectable === true &&\n                    this.options.onCanSelectNode(node)\n                );\n            } else {\n                return this.options.selectable === true;\n            }\n        };\n\n        const openParents = (): void => {\n            const parent = node.parent;\n\n            if (parent && parent.parent && !parent.is_open) {\n                this.openNode(parent, false);\n            }\n        };\n\n        if (!canSelect()) {\n            return;\n        }\n\n        if (this.selectNodeHandler.isNodeSelected(node)) {\n            if (selectOptions.mustToggle) {\n                this.deselectCurrentNode();\n                this._triggerEvent(\"tree.select\", {\n                    node: null,\n                    previous_node: node,\n                });\n            }\n        } else {\n            const deselectedNode = this.getSelectedNode() || null;\n            this.deselectCurrentNode();\n            this.addToSelection(node, selectOptions.mustSetFocus);\n\n            this._triggerEvent(\"tree.select\", {\n                node,\n                deselected_node: deselectedNode,\n            });\n            openParents();\n        }\n\n        saveState();\n    }\n\n    private doLoadData(data: NodeData[] | null, parentNode: Node | null): void {\n        if (data) {\n            if (parentNode) {\n                this.deselectNodes(parentNode);\n                this.loadSubtree(data, parentNode);\n            } else {\n                this.initTree(data);\n            }\n\n            if (this.isDragging()) {\n                this.dndHandler.refresh();\n            }\n        }\n\n        this._triggerEvent(\"tree.load_data\", {\n            tree_data: data,\n            parent_node: parentNode,\n        });\n    }\n\n    private deselectNodes(parentNode: Node): void {\n        const selectedNodesUnderParent =\n            this.selectNodeHandler.getSelectedNodesUnder(parentNode);\n        for (const n of selectedNodesUnderParent) {\n            this.selectNodeHandler.removeFromSelection(n);\n        }\n    }\n\n    private loadSubtree(data: NodeData[], parentNode: Node): void {\n        parentNode.loadFromData(data);\n\n        parentNode.load_on_demand = false;\n        parentNode.is_loading = false;\n\n        this._refreshElements(parentNode);\n    }\n\n    private doLoadDataFromUrl(\n        urlInfoParam: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null\n    ): void {\n        const urlInfo = urlInfoParam || this.getDataUrlInfo(parentNode);\n\n        this.dataLoader.loadFromUrl(urlInfo, parentNode, onFinished);\n    }\n\n    private loadFolderOnDemand(\n        node: Node,\n        slide = true,\n        onFinished: OnFinishOpenNode | null\n    ): void {\n        node.is_loading = true;\n\n        this.doLoadDataFromUrl(null, node, () => {\n            this._openNode(node, slide, onFinished);\n        });\n    }\n}\n\nSimpleWidget.register(JqTreeWidget, \"tree\");\n","const version = \"1.7.4\";\n\nexport default version;\n"],"names":["Position","positionNames","before","Before","after","After","inside","Inside","none","None","getPositionName","position","name","Object","prototype","hasOwnProperty","call","isNodeRecordWithChildren","data","Array","Node","constructor","o","arguments","length","undefined","isRoot","nodeClass","this","isEmptyFolder","load_on_demand","setData","children","parent","idMapping","Map","tree","key","value","loadFromData","removeChildren","node","createNode","addChild","push","setParent","addChildAtPosition","index","splice","removeChild","doRemoveChild","getChildIndex","indexOf","hasChildren","isFolder","iterate","callback","_iterate","level","child","moveNode","movedNode","targetNode","isParentOf","getData","getDataFromNodes","nodes","map","tmpNode","k","v","getNodeByName","getNodeByCallback","getNodeByNameMustExist","n","result","addAfter","nodeInfo","childIndex","addBefore","addParent","newParent","originalParent","remove","append","prepend","getLevel","getNodeById","nodeId","get","addNodeToIndex","id","set","removeNodeFromIndex","delete","getPreviousSibling","previousIndex","getNextSibling","nextIndex","getNodesByProperty","filter","f","getNextNode","nextSibling","getNextVisibleNode","is_open","getPreviousNode","previousSibling","getLastChild","getParent","getPreviousVisibleNode","lastChild","initFromData","addChildren","childrenData","nodeData","addNode","getNodeClass","DragAndDropHandler","treeWidget","hoveredArea","hitAreas","isDragging","currentItem","positionInfo","mouseCapture","$element","jQuery","target","mustCaptureElement","options","onIsMoveHandle","nodeElement","_getNodeElement","onCanMove","mouseStart","pageX","pageY","refresh","offset","left","top","dragElement","DragElement","element","autoEscape","addClass","mouseDrag","move","area","findHoveredArea","canMoveToArea","stopOpenFolderTimer","mustOpenFolderTimer","startOpenFolderTimer","updateDropHint","removeDropHint","onDragMove","originalEvent","mouseStop","moveItem","clear","removeHover","removeHitAreas","removeClass","onDragStop","generateHitAreas","_getNodeElementForNode","hitAreasGenerator","HitAreasGenerator","getTreeDimensions","bottom","generate","is","onCanMoveTo","positionName","previousGhost","x","y","dimensions","right","low","high","mid","addDropHint","folder","openFolder","_openNode","slide","openFolderDelay","openFolderTimer","window","setTimeout","clearTimeout","previousParent","doMove","empty","_refreshElements","_triggerEvent","move_info","moved_node","target_node","previous_parent","do_move","original_event","isDefaultPrevented","el","width","height","_getScrollLeft","VisibleNodeIterator","isFirstNode","_iterateNode","nextNode","mustIterateInside","handleFirstNode","handleOpenFolder","handleClosedFolder","handleNode","childrenLength","forEach","_","i","nextChild","handleAfterOpenFolder","currentNode","treeBottom","super","positions","lastTop","previousTop","group","generateHitAreasForGroup","getTop","addPosition","positionsInGroup","positionCount","Math","min","areaHeight","round","areaTop","nodeName","offsetX","offsetY","$tree","text","html","css","getBoolString","ElementsRenderer","openedIconElement","createButtonElement","openedIcon","closedIconElement","closedIcon","render","fromNode","renderFromNode","renderFromRoot","createDomElements","$previousLi","li","createLi","attachNodeData","isRootNode","ul","createUl","appendChild","classString","role","rtl","dragAndDrop","document","createElement","className","setAttribute","isSelected","Boolean","selectNodeHandler","isNodeSelected","showEmptyFolder","createFolderLi","createNodeLi","onCreateLi","setTreeItemAriaAttributes","buttonClasses","getButtonClasses","folderClasses","getFolderClasses","iconElement","div","buttonLink","cloneNode","buttonLeft","titleSpan","createTitleSpan","liClasses","join","classes","tabIndex","textContent","innerHTML","is_loading","createTextNode","DataLoader","loadFromUrl","urlInfo","parentNode","onFinished","$el","getDomElement","addLoadingClass","notifyLoading","stopLoading","removeLoadingClass","submitRequest","loadData","parseData","jqXHR","onLoadFailed","isLoading","onLoading","urlInfoInput","handleSuccess","handleError","ajaxSettings","method","cache","dataType","success","error","url","toUpperCase","ajax","dataFilter","parsedData","JSON","parse","KeyHandler","static","keyboardSupport","on","handleKeyDown","deinit","off","moveDown","selectedNode","selectNode","moveUp","moveRight","openNode","moveLeft","closeNode","scrollHandler","isScrolledIntoView","find","scrollToNode","e","canHandleKeyboard","getSelectedNode","which","DOWN","UP","RIGHT","LEFT","isFocusOnTree","register","widgetClass","widgetName","getDataKey","getWidgetData","dataKey","widget","SimpleWidget","createWidget","init","fn","argument1","functionName","destroy","removeData","destroyWidget","_len","args","_key","callFunction","widgetFunction","apply","defaults","getPositionInfoFromMouseEvent","getPositionInfoFromTouch","touch","MouseWidget","addEventListener","mouseDown","passive","touchStart","isMouseStarted","mouseDelayTimer","isMouseDelayMet","mouseDownInfo","removeEventListener","removeMouseMoveEventListeners","button","handleMouseDown","cancelable","preventDefault","handleMouseUp","handleStartMouse","mouseMove","touchMove","mouseUp","touchEnd","mouseDelay","getMouseDelay","startMouseDelayTimer","handleMouseMove","touches","changedTouches","SaveStateHandler","saveState","state","stringify","getState","onSetStateFromStorage","supportsLocalStorage","localStorage","setItem","getKeyName","getStateFromStorage","jsonData","loadFromStorage","parseState","open_nodes","getOpenNodeIds","openNodes","selected_node","getSelectedNodeIds","selectedNodeIds","getSelectedNodes","setInitialState","mustLoadOnDemand","openInitialNodes","resetSelection","selectInitialNodes","setInitialStateOnDemand","cbFinished","doSetInitialStateOnDemand","getNodeIdToBeSelected","onGetStateFromStorage","getItem","nodeIds","selectCount","addToSelection","removeFromSelection","nodeIdsParam","selectedNodes","loadingCount","newNodesIds","loadAndOpenNode","_supportsLocalStorage","testSupport","sessionStorage","removeItem","ScrollHandler","isInitialized","checkScrolling","ensureInit","checkVerticalScrolling","checkHorizontalScrolling","scrollToY","$scrollParent","scrollTop","treeTop","elementBottom","viewBottom","elementTop","viewTop","elHeight","scrollParentTop","getScrollLeft","scrollLeft","initScrollParent","setDocumentAsScrollParent","getParentWithOverflow","cssAttributes","hasOverFlow","attr","overflowValue","parents","tagName","handleVerticalScrollingWithScrollParent","scrollParent","offsetHeight","refreshHitAreas","handleVerticalScrollingWithDocument","dndHandler","handleHorizontalScrollingWithParent","handleHorizontalScrollingWithDocument","scrollParentOffset","canScrollRight","clientWidth","scrollWidth","canScrollLeft","rightEdge","leftEdge","isNearRightEdge","isNearLeftEdge","max","$document","windowWidth","SelectNodeHandler","Set","selectedSingleNode","getSelectedNodesUnder","has","includeChildren","add","activeElement","_containsElement","NodeElement","mustShowBorderDropHint","BorderDropHint","GhostDropHint","select","mustSetFocus","getLi","$span","getSpan","trigger","deselect","removeAttr","getUl","FolderElement","open","animationSpeed","$button","getButton","buttonEl","renderer","icon","doOpen","slideDown","show","close","doClose","slideUp","hide","$div","elWidth","outerHeight","$hint","$ghost","moveAfter","moveBefore","moveInsideOpenFolder","moveInside","childElement","NODE_PARAM_IS_EMPTY","PARAM_IS_EMPTY","JqTreeWidget","autoOpen","dataUrl","onCanSelectNode","selectable","startDndDelay","useContextMenu","toggle","slideParam","Error","getTree","optionsParam","doSelectNode","toJson","doLoadData","loadDataFromUrl","param1","param2","param3","doLoadDataFromUrl","reload","getNodeByHtmlElement","getNode","parseParams","addNodeAfter","newNodeInfo","existingNode","newNode","addNodeBefore","addParentNode","removeNode","appendNode","parentNodeParam","prependNode","updateNode","idIsChanged","isSelectedNodeInSubtree","subtree","positionIndex","saveStateHandler","nodeOffset","nodeTop","treeOffset","setState","setOption","option","keyHandler","getVersion","eventName","values","event","Event","doOpenNode","_node","_slide","_onFinished","loadFolderOnDemand","mustSelect","selectCurrentNode","getRtlOption","getDefaultClosedIcon","dataLoader","initData","handleClick","handleDblclick","handleContextmenu","getDataUrlInfo","setUrlInfoData","selectedNodeId","getUrlFromString","initTree","doInit","autoOpenNodes","maxLevel","getAutoOpenMaxLevel","isRestored","restoreState","parseInt","clickTarget","getClickTarget","type","stopPropagation","click_event","$target","closest","$li","deselectCurrentNode","dataRtl","selectOptions","mustToggle","openParents","canSelect","previous_node","deselectedNode","deselected_node","deselectNodes","loadSubtree","tree_data","parent_node","selectedNodesUnderParent","urlInfoParam"],"mappings":"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"}