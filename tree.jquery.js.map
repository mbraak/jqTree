{"version":3,"file":"tree.jquery.js","sources":["src/version.ts","src/nodeUtils.ts","src/node.ts","src/dragAndDropHandler.ts","src/util.ts","src/elementsRenderer.ts","src/dataLoader.ts","src/keyHandler.ts","src/simple.widget.ts","src/mouse.widget.ts","src/saveStateHandler.ts","src/scrollHandler/containerScrollParent.ts","src/scrollHandler/documentScrollParent.ts","src/scrollHandler/createScrollParent.ts","src/scrollHandler.ts","src/selectNodeHandler.ts","src/nodeElement.ts","src/tree.jquery.ts"],"sourcesContent":["const version = \"1.7.5\";\n\nexport default version;\n","interface NodeRecordWithChildren extends NodeRecord {\n    children: NodeData[];\n}\n\nexport const isNodeRecordWithChildren = (\n    data: NodeData,\n): data is NodeRecordWithChildren =>\n    typeof data === \"object\" &&\n    \"children\" in data &&\n    data[\"children\"] instanceof Array;\n","import { isNodeRecordWithChildren } from \"./nodeUtils\";\n\nexport enum Position {\n    Before = 1,\n    After,\n    Inside,\n    None,\n}\n\nconst positionNames: Record<string, Position> = {\n    before: Position.Before,\n    after: Position.After,\n    inside: Position.Inside,\n    none: Position.None,\n};\n\ntype IterateCallback = (node: Node, level: number) => boolean;\n\nexport const getPositionName = (position: Position): string => {\n    for (const name in positionNames) {\n        if (Object.prototype.hasOwnProperty.call(positionNames, name)) {\n            if (positionNames[name] === position) {\n                return name;\n            }\n        }\n    }\n\n    return \"\";\n};\n\nexport const getPosition = (name: string): Position | undefined =>\n    positionNames[name];\n\nexport class Node implements INode {\n    public id?: NodeId;\n    public name: string;\n    public children: Node[];\n    public parent: Node | null;\n    public idMapping: Map<NodeId, Node>;\n    public tree?: Node;\n    public nodeClass?: typeof Node;\n    public load_on_demand: boolean;\n    public is_open: boolean;\n    public element: HTMLElement;\n    public is_loading: boolean;\n    public isEmptyFolder: boolean;\n\n    [key: string]: unknown;\n\n    constructor(\n        nodeData: NodeData | null = null,\n        isRoot = false,\n        nodeClass = Node,\n    ) {\n        this.name = \"\";\n        this.load_on_demand = false;\n\n        this.isEmptyFolder =\n            nodeData != null &&\n            isNodeRecordWithChildren(nodeData) &&\n            nodeData.children.length === 0;\n\n        this.setData(nodeData);\n\n        this.children = [];\n        this.parent = null;\n\n        if (isRoot) {\n            this.idMapping = new Map<NodeId, Node>();\n            this.tree = this;\n            this.nodeClass = nodeClass;\n        }\n    }\n\n    /*\n    Set the data of this node.\n\n    setData(string): set the name of the node\n    setData(object): set attributes of the node\n\n    Examples:\n        setData('node1')\n\n        setData({ name: 'node1', id: 1});\n\n        setData({ name: 'node2', id: 2, color: 'green'});\n\n    * This is an internal function; it is not in the docs\n    * Does not remove existing node values\n    */\n    public setData(o: NodeData | null): void {\n        if (!o) {\n            return;\n        } else if (typeof o === \"string\") {\n            this.name = o;\n        } else if (typeof o === \"object\") {\n            for (const key in o) {\n                if (Object.prototype.hasOwnProperty.call(o, key)) {\n                    const value = o[key];\n\n                    if (key === \"label\" || key === \"name\") {\n                        // You can use the 'label' key instead of 'name'; this is a legacy feature\n                        if (typeof value === \"string\") {\n                            this.name = value;\n                        }\n                    } else if (key !== \"children\" && key !== \"parent\") {\n                        // You can't update the children or the parent using this function\n                        this[key] = value;\n                    }\n                }\n            }\n        }\n    }\n\n    /*\n    Create tree from data.\n\n    Structure of data is:\n    [\n        {\n            name: 'node1',\n            children: [\n                { name: 'child1' },\n                { name: 'child2' }\n            ]\n        },\n        {\n            name: 'node2'\n        }\n    ]\n    */\n    public loadFromData(data: NodeData[]): Node {\n        this.removeChildren();\n\n        for (const childData of data) {\n            const node = this.createNode(childData);\n            this.addChild(node);\n\n            if (isNodeRecordWithChildren(childData)) {\n                node.loadFromData(childData.children);\n            }\n        }\n\n        return this;\n    }\n\n    /*\n    Add child.\n\n    tree.addChild(\n        new Node('child1')\n    );\n    */\n    public addChild(node: Node): void {\n        this.children.push(node);\n        node.setParent(this);\n    }\n\n    /*\n    Add child at position. Index starts at 0.\n\n    tree.addChildAtPosition(\n        new Node('abc'),\n        1\n    );\n    */\n    public addChildAtPosition(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        node.setParent(this);\n    }\n\n    /*\n    Remove child. This also removes the children of the node.\n\n    tree.removeChild(tree.children[0]);\n    */\n    public removeChild(node: Node): void {\n        // remove children from the index\n        node.removeChildren();\n\n        this.doRemoveChild(node);\n    }\n\n    /*\n    Get child index.\n\n    var index = getChildIndex(node);\n    */\n    public getChildIndex(node: Node): number {\n        return this.children.indexOf(node);\n    }\n\n    /*\n    Does the tree have children?\n\n    if (tree.hasChildren()) {\n        //\n    }\n    */\n    public hasChildren(): boolean {\n        return this.children.length !== 0;\n    }\n\n    public isFolder(): boolean {\n        return this.hasChildren() || this.load_on_demand;\n    }\n\n    /*\n    Iterate over all the nodes in the tree.\n\n    Calls callback with (node, level).\n\n    The callback must return true to continue the iteration on current node.\n\n    tree.iterate(\n        function(node, level) {\n           console.log(node.name);\n\n           // stop iteration after level 2\n           return (level <= 2);\n        }\n    );\n\n    */\n    public iterate(callback: IterateCallback): void {\n        const _iterate = (node: Node, level: number): void => {\n            if (node.children) {\n                for (const child of node.children) {\n                    const result = callback(child, level);\n\n                    if (result && child.hasChildren()) {\n                        _iterate(child, level + 1);\n                    }\n                }\n            }\n        };\n\n        _iterate(this, 0);\n    }\n\n    /*\n    Move node relative to another node.\n\n    Argument position: Position.BEFORE, Position.AFTER or Position.Inside\n\n    // move node1 after node2\n    tree.moveNode(node1, node2, Position.AFTER);\n    */\n    public moveNode(\n        movedNode: Node,\n        targetNode: Node,\n        position: Position,\n    ): boolean {\n        if (!movedNode.parent || movedNode.isParentOf(targetNode)) {\n            // - Node is parent of target node\n            // - Or, parent is empty\n            return false;\n        } else {\n            movedNode.parent.doRemoveChild(movedNode);\n\n            switch (position) {\n                case Position.After: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode) + 1,\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Before: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode),\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Inside: {\n                    // move inside as first child\n                    targetNode.addChildAtPosition(movedNode, 0);\n                    return true;\n                }\n\n                default:\n                    return false;\n            }\n        }\n    }\n\n    /*\n    Get the tree as data.\n    */\n    public getData(includeParent = false): NodeRecord[] {\n        const getDataFromNodes = (nodes: Node[]): Record<string, unknown>[] => {\n            return nodes.map((node) => {\n                const tmpNode: Record<string, unknown> = {};\n\n                for (const k in node) {\n                    if (\n                        [\n                            \"parent\",\n                            \"children\",\n                            \"element\",\n                            \"idMapping\",\n                            \"load_on_demand\",\n                            \"nodeClass\",\n                            \"tree\",\n                            \"isEmptyFolder\",\n                        ].indexOf(k) === -1 &&\n                        Object.prototype.hasOwnProperty.call(node, k)\n                    ) {\n                        const v = node[k];\n                        tmpNode[k] = v;\n                    }\n                }\n\n                if (node.hasChildren()) {\n                    tmpNode[\"children\"] = getDataFromNodes(node.children);\n                }\n\n                return tmpNode;\n            });\n        };\n\n        if (includeParent) {\n            return getDataFromNodes([this]);\n        } else {\n            return getDataFromNodes(this.children);\n        }\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.getNodeByCallback((node: Node) => node.name === name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        const node = this.getNodeByCallback((n: Node) => n.name === name);\n\n        if (!node) {\n            throw `Node with name ${name} not found`;\n        }\n\n        return node;\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        let result: Node | null = null;\n\n        this.iterate((node: Node) => {\n            if (result) {\n                return false;\n            } else if (callback(node)) {\n                result = node;\n                return false;\n            } else {\n                return true;\n            }\n        });\n\n        return result;\n    }\n\n    public addAfter(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex + 1);\n\n            node.loadChildrenFromData(nodeInfo);\n            return node;\n        }\n    }\n\n    public addBefore(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex);\n\n            node.loadChildrenFromData(nodeInfo);\n            return node;\n        }\n    }\n\n    public addParent(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const newParent = this.createNode(nodeInfo);\n\n            if (this.tree) {\n                newParent.setParent(this.tree);\n            }\n            const originalParent = this.parent;\n\n            for (const child of originalParent.children) {\n                newParent.addChild(child);\n            }\n\n            originalParent.children = [];\n            originalParent.addChild(newParent);\n            return newParent;\n        }\n    }\n\n    public remove(): void {\n        if (this.parent) {\n            this.parent.removeChild(this);\n            this.parent = null;\n        }\n    }\n\n    public append(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChild(node);\n\n        node.loadChildrenFromData(nodeInfo);\n        return node;\n    }\n\n    public prepend(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChildAtPosition(node, 0);\n\n        node.loadChildrenFromData(nodeInfo);\n        return node;\n    }\n\n    public isParentOf(node: Node): boolean {\n        let parent = node.parent;\n\n        while (parent) {\n            if (parent === this) {\n                return true;\n            }\n\n            parent = parent.parent;\n        }\n\n        return false;\n    }\n\n    public getLevel(): number {\n        let level = 0;\n        let node: Node = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n        while (node.parent) {\n            level += 1;\n            node = node.parent;\n        }\n\n        return level;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.idMapping.get(nodeId) || null;\n    }\n\n    public addNodeToIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.set(node.id, node);\n        }\n    }\n\n    public removeNodeFromIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.delete(node.id);\n        }\n    }\n\n    public removeChildren(): void {\n        this.iterate((child: Node) => {\n            this.tree?.removeNodeFromIndex(child);\n            return true;\n        });\n\n        this.children = [];\n    }\n\n    public getPreviousSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousIndex = this.parent.getChildIndex(this) - 1;\n            if (previousIndex >= 0) {\n                return this.parent.children[previousIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNextSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const nextIndex = this.parent.getChildIndex(this) + 1;\n            if (nextIndex < this.parent.children.length) {\n                return this.parent.children[nextIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.filter((node: Node) => node[key] === value);\n    }\n\n    public filter(f: (node: Node) => boolean): Node[] {\n        const result: Node[] = [];\n\n        this.iterate((node: Node) => {\n            if (f(node)) {\n                result.push(node);\n            }\n\n            return true;\n        });\n\n        return result;\n    }\n\n    public getNextNode(includeChildren = true): Node | null {\n        if (includeChildren && this.hasChildren()) {\n            return this.children[0] || null;\n        } else if (!this.parent) {\n            return null;\n        } else {\n            const nextSibling = this.getNextSibling();\n\n            if (nextSibling) {\n                return nextSibling;\n            } else {\n                return this.parent.getNextNode(false);\n            }\n        }\n    }\n\n    public getNextVisibleNode(): Node | null {\n        if (this.hasChildren() && this.is_open) {\n            // First child\n            return this.children[0] || null;\n        } else {\n            if (!this.parent) {\n                return null;\n            } else {\n                const nextSibling = this.getNextSibling();\n                if (nextSibling) {\n                    // Next sibling\n                    return nextSibling;\n                } else {\n                    // Next node of parent\n                    return this.parent.getNextNode(false);\n                }\n            }\n        }\n    }\n\n    public getPreviousNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (previousSibling.hasChildren()) {\n                return previousSibling.getLastChild();\n            } else {\n                return previousSibling;\n            }\n        }\n    }\n\n    public getPreviousVisibleNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (\n                !previousSibling.hasChildren() ||\n                !previousSibling.is_open\n            ) {\n                // Previous sibling\n                return previousSibling;\n            } else {\n                // Last child of previous sibling\n                return previousSibling.getLastChild();\n            }\n        }\n    }\n\n    public getParent(): Node | null {\n        // Return parent except if it is the root node\n        if (!this.parent) {\n            return null;\n        } else if (!this.parent.parent) {\n            // Root node -> null\n            return null;\n        } else {\n            return this.parent;\n        }\n    }\n\n    public getLastChild(): Node | null {\n        if (!this.hasChildren()) {\n            return null;\n        } else {\n            const lastChild = this.children[this.children.length - 1];\n\n            if (!lastChild) {\n                return null;\n            }\n\n            if (!(lastChild.hasChildren() && lastChild.is_open)) {\n                return lastChild;\n            } else {\n                return lastChild?.getLastChild();\n            }\n        }\n    }\n\n    // Init Node from data without making it the root of the tree\n    public initFromData(data: NodeData): void {\n        const addNode = (nodeData: NodeData): void => {\n            this.setData(nodeData);\n\n            if (\n                isNodeRecordWithChildren(nodeData) &&\n                nodeData.children.length\n            ) {\n                addChildren(nodeData.children);\n            }\n        };\n\n        const addChildren = (childrenData: NodeData[]): void => {\n            for (const child of childrenData) {\n                const node = this.createNode();\n                node.initFromData(child);\n                this.addChild(node);\n            }\n        };\n\n        addNode(data);\n    }\n\n    private setParent(parent: Node): void {\n        this.parent = parent;\n        this.tree = parent.tree;\n        this.tree?.addNodeToIndex(this);\n    }\n\n    private doRemoveChild(node: Node): void {\n        this.children.splice(this.getChildIndex(node), 1);\n        this.tree?.removeNodeFromIndex(node);\n    }\n\n    private getNodeClass(): typeof Node {\n        return this.nodeClass || this?.tree?.nodeClass || Node;\n    }\n\n    private createNode(nodeData?: NodeData): Node {\n        const nodeClass = this.getNodeClass();\n        return new nodeClass(nodeData);\n    }\n\n    // Load children data from nodeInfo if it has children\n    private loadChildrenFromData(nodeInfo: NodeData) {\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            this.loadFromData(nodeInfo.children);\n        }\n    }\n}\n","import { getPositionName, Node, Position } from \"./node\";\nimport { DropHint, HitArea, PositionInfo } from \"./types\";\nimport { NodeElement } from \"./nodeElement\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\ninterface Dimensions {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n}\n\nexport class DragAndDropHandler {\n    public hitAreas: HitArea[];\n    public isDragging: boolean;\n    public currentItem: NodeElement | null;\n    public hoveredArea: HitArea | null;\n\n    private treeWidget: JqTreeWidget;\n    private dragElement: DragElement | null;\n    private previousGhost: DropHint | null;\n    private openFolderTimer: number | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        this.hoveredArea = null;\n        this.hitAreas = [];\n        this.isDragging = false;\n        this.currentItem = null;\n    }\n\n    public mouseCapture(positionInfo: PositionInfo): boolean | null {\n        const $element = jQuery(positionInfo.target);\n\n        if (!this.mustCaptureElement($element)) {\n            return null;\n        }\n\n        if (\n            this.treeWidget.options.onIsMoveHandle &&\n            !this.treeWidget.options.onIsMoveHandle($element)\n        ) {\n            return null;\n        }\n\n        let nodeElement = this.treeWidget._getNodeElement($element);\n\n        if (nodeElement && this.treeWidget.options.onCanMove) {\n            if (!this.treeWidget.options.onCanMove(nodeElement.node)) {\n                nodeElement = null;\n            }\n        }\n\n        this.currentItem = nodeElement;\n        return this.currentItem != null;\n    }\n\n    public mouseStart(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.refresh();\n\n        const offset = jQuery(positionInfo.target).offset();\n        const left = offset ? offset.left : 0;\n        const top = offset ? offset.top : 0;\n\n        const node = this.currentItem.node;\n\n        this.dragElement = new DragElement(\n            node.name,\n            positionInfo.pageX - left,\n            positionInfo.pageY - top,\n            this.treeWidget.element,\n            this.treeWidget.options.autoEscape ?? true,\n        );\n\n        this.isDragging = true;\n        this.currentItem.$element.addClass(\"jqtree-moving\");\n\n        return true;\n    }\n\n    public mouseDrag(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            !this.dragElement ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.dragElement.move(positionInfo.pageX, positionInfo.pageY);\n\n        const area = this.findHoveredArea(\n            positionInfo.pageX,\n            positionInfo.pageY,\n        );\n\n        if (area && this.canMoveToArea(area)) {\n            if (!area.node.isFolder()) {\n                this.stopOpenFolderTimer();\n            }\n\n            if (this.hoveredArea !== area) {\n                this.hoveredArea = area;\n\n                // If this is a closed folder, start timer to open it\n                if (this.mustOpenFolderTimer(area)) {\n                    this.startOpenFolderTimer(area.node);\n                } else {\n                    this.stopOpenFolderTimer();\n                }\n\n                this.updateDropHint();\n            }\n        } else {\n            this.removeDropHint();\n            this.stopOpenFolderTimer();\n            this.hoveredArea = area;\n        }\n\n        if (!area) {\n            if (this.treeWidget.options.onDragMove) {\n                this.treeWidget.options.onDragMove(\n                    this.currentItem.node,\n                    positionInfo.originalEvent,\n                );\n            }\n        }\n\n        return true;\n    }\n\n    public mouseStop(positionInfo: PositionInfo): boolean {\n        this.moveItem(positionInfo);\n        this.clear();\n        this.removeHover();\n        this.removeDropHint();\n        this.removeHitAreas();\n\n        const currentItem = this.currentItem;\n\n        if (this.currentItem) {\n            this.currentItem.$element.removeClass(\"jqtree-moving\");\n            this.currentItem = null;\n        }\n\n        this.isDragging = false;\n\n        if (!this.hoveredArea && currentItem) {\n            if (this.treeWidget.options.onDragStop) {\n                this.treeWidget.options.onDragStop(\n                    currentItem.node,\n                    positionInfo.originalEvent,\n                );\n            }\n        }\n\n        return false;\n    }\n\n    public refresh(): void {\n        this.removeHitAreas();\n\n        if (this.currentItem) {\n            this.generateHitAreas();\n\n            this.currentItem = this.treeWidget._getNodeElementForNode(\n                this.currentItem.node,\n            );\n\n            if (this.isDragging) {\n                this.currentItem.$element.addClass(\"jqtree-moving\");\n            }\n        }\n    }\n\n    private generateHitAreas(): void {\n        if (!this.currentItem) {\n            this.hitAreas = [];\n        } else {\n            const hitAreasGenerator = new HitAreasGenerator(\n                this.treeWidget.tree,\n                this.currentItem.node,\n                this.getTreeDimensions().bottom,\n            );\n            this.hitAreas = hitAreasGenerator.generate();\n        }\n    }\n\n    private mustCaptureElement($element: JQuery<HTMLElement>): boolean {\n        return !$element.is(\"input,select,textarea\");\n    }\n\n    private canMoveToArea(area: HitArea): boolean {\n        if (!this.treeWidget.options.onCanMoveTo) {\n            return true;\n        }\n\n        if (!this.currentItem) {\n            return false;\n        }\n\n        const positionName = getPositionName(area.position);\n\n        return this.treeWidget.options.onCanMoveTo(\n            this.currentItem.node,\n            area.node,\n            positionName,\n        );\n    }\n\n    private removeHitAreas(): void {\n        this.hitAreas = [];\n    }\n\n    private clear(): void {\n        if (this.dragElement) {\n            this.dragElement.remove();\n            this.dragElement = null;\n        }\n    }\n\n    private removeDropHint(): void {\n        if (this.previousGhost) {\n            this.previousGhost.remove();\n        }\n    }\n\n    private removeHover(): void {\n        this.hoveredArea = null;\n    }\n\n    private findHoveredArea(x: number, y: number): HitArea | null {\n        const dimensions = this.getTreeDimensions();\n\n        if (\n            x < dimensions.left ||\n            y < dimensions.top ||\n            x > dimensions.right ||\n            y > dimensions.bottom\n        ) {\n            return null;\n        }\n\n        let low = 0;\n        let high = this.hitAreas.length;\n        while (low < high) {\n            const mid = (low + high) >> 1;\n            const area = this.hitAreas[mid];\n\n            if (!area) {\n                return null;\n            }\n\n            if (y < area.top) {\n                high = mid;\n            } else if (y > area.bottom) {\n                low = mid + 1;\n            } else {\n                return area;\n            }\n        }\n\n        return null;\n    }\n\n    private mustOpenFolderTimer(area: HitArea): boolean {\n        const node = area.node;\n\n        return (\n            node.isFolder() &&\n            !node.is_open &&\n            area.position === Position.Inside\n        );\n    }\n\n    private updateDropHint(): void {\n        if (!this.hoveredArea) {\n            return;\n        }\n\n        // remove previous drop hint\n        this.removeDropHint();\n\n        // add new drop hint\n        const nodeElement = this.treeWidget._getNodeElementForNode(\n            this.hoveredArea.node,\n        );\n        this.previousGhost = nodeElement.addDropHint(this.hoveredArea.position);\n    }\n\n    private startOpenFolderTimer(folder: Node): void {\n        const openFolder = (): void => {\n            this.treeWidget._openNode(\n                folder,\n                this.treeWidget.options.slide,\n                () => {\n                    this.refresh();\n                    this.updateDropHint();\n                },\n            );\n        };\n\n        this.stopOpenFolderTimer();\n\n        const openFolderDelay = this.treeWidget.options.openFolderDelay;\n\n        if (openFolderDelay !== false) {\n            this.openFolderTimer = window.setTimeout(\n                openFolder,\n                openFolderDelay,\n            );\n        }\n    }\n\n    private stopOpenFolderTimer(): void {\n        if (this.openFolderTimer) {\n            clearTimeout(this.openFolderTimer);\n            this.openFolderTimer = null;\n        }\n    }\n\n    private moveItem(positionInfo: PositionInfo): void {\n        if (\n            this.currentItem &&\n            this.hoveredArea &&\n            this.hoveredArea.position !== Position.None &&\n            this.canMoveToArea(this.hoveredArea)\n        ) {\n            const movedNode = this.currentItem.node;\n            const targetNode = this.hoveredArea.node;\n            const position = this.hoveredArea.position;\n            const previousParent = movedNode.parent;\n\n            if (position === Position.Inside) {\n                this.hoveredArea.node.is_open = true;\n            }\n\n            const doMove = (): void => {\n                this.treeWidget.tree.moveNode(movedNode, targetNode, position);\n                this.treeWidget.element.empty();\n                this.treeWidget._refreshElements(null);\n            };\n\n            const event = this.treeWidget._triggerEvent(\"tree.move\", {\n                move_info: {\n                    moved_node: movedNode,\n                    target_node: targetNode,\n                    position: getPositionName(position),\n                    previous_parent: previousParent,\n                    do_move: doMove,\n                    original_event: positionInfo.originalEvent,\n                },\n            });\n\n            if (!event.isDefaultPrevented()) {\n                doMove();\n            }\n        }\n    }\n\n    private getTreeDimensions(): Dimensions {\n        // Return the dimensions of the tree. Add a margin to the bottom to allow\n        // to drag-and-drop after the last element.\n        const offset = this.treeWidget.element.offset();\n\n        if (!offset) {\n            return { left: 0, top: 0, right: 0, bottom: 0 };\n        } else {\n            const el = this.treeWidget.element;\n            const width = el.width() || 0;\n            const height = el.height() || 0;\n            const left = offset.left + this.treeWidget._getScrollLeft();\n\n            return {\n                left,\n                top: offset.top,\n                right: left + width,\n                bottom: offset.top + height + 16,\n            };\n        }\n    }\n}\n\nabstract class VisibleNodeIterator {\n    private tree: Node;\n\n    constructor(tree: Node) {\n        this.tree = tree;\n    }\n\n    protected iterate(): void {\n        let isFirstNode = true;\n\n        const _iterateNode = (node: Node, nextNode: Node | null): void => {\n            let mustIterateInside =\n                (node.is_open || !node.element) && node.hasChildren();\n\n            let $element: JQuery<HTMLElement> | null = null;\n\n            if (node.element) {\n                $element = jQuery(node.element);\n\n                if (!$element.is(\":visible\")) {\n                    return;\n                }\n\n                if (isFirstNode) {\n                    this.handleFirstNode(node);\n                    isFirstNode = false;\n                }\n\n                if (!node.hasChildren()) {\n                    this.handleNode(node, nextNode, $element);\n                } else if (node.is_open) {\n                    if (!this.handleOpenFolder(node, $element)) {\n                        mustIterateInside = false;\n                    }\n                } else {\n                    this.handleClosedFolder(node, nextNode, $element);\n                }\n            }\n\n            if (mustIterateInside) {\n                const childrenLength = node.children.length;\n                node.children.forEach((_, i) => {\n                    const child = node.children[i];\n\n                    if (child) {\n                        if (i === childrenLength - 1) {\n                            _iterateNode(child, null);\n                        } else {\n                            const nextChild = node.children[i + 1];\n\n                            if (nextChild) {\n                                _iterateNode(child, nextChild);\n                            }\n                        }\n                    }\n                });\n\n                if (node.is_open && $element) {\n                    this.handleAfterOpenFolder(node, nextNode);\n                }\n            }\n        };\n\n        _iterateNode(this.tree, null);\n    }\n\n    protected abstract handleNode(\n        node: Node,\n        nextNode: Node | null,\n        $element: JQuery,\n    ): void;\n\n    /*\n    override\n    return\n        - true: continue iterating\n        - false: stop iterating\n    */\n    protected abstract handleOpenFolder(node: Node, $element: JQuery): boolean;\n\n    protected abstract handleClosedFolder(\n        node: Node,\n        nextNode: Node | null,\n        $element: JQuery,\n    ): void;\n\n    protected abstract handleAfterOpenFolder(\n        node: Node,\n        nextNode: Node | null,\n    ): void;\n\n    protected abstract handleFirstNode(node: Node): void;\n}\n\nexport class HitAreasGenerator extends VisibleNodeIterator {\n    private currentNode: Node;\n    private treeBottom: number;\n    private positions: HitArea[];\n    private lastTop: number;\n\n    constructor(tree: Node, currentNode: Node, treeBottom: number) {\n        super(tree);\n\n        this.currentNode = currentNode;\n        this.treeBottom = treeBottom;\n    }\n\n    public generate(): HitArea[] {\n        this.positions = [];\n        this.lastTop = 0;\n\n        this.iterate();\n\n        return this.generateHitAreas(this.positions);\n    }\n\n    protected generateHitAreas(positions: HitArea[]): HitArea[] {\n        let previousTop = positions[0]?.top ?? 0;\n        let group = [];\n        const hitAreas: HitArea[] = [];\n\n        for (const position of positions) {\n            if (position.top !== previousTop && group.length) {\n                this.generateHitAreasForGroup(\n                    hitAreas,\n                    group,\n                    previousTop,\n                    position.top,\n                );\n\n                previousTop = position.top;\n                group = [];\n            }\n\n            group.push(position);\n        }\n\n        this.generateHitAreasForGroup(\n            hitAreas,\n            group,\n            previousTop,\n            this.treeBottom,\n        );\n\n        return hitAreas;\n    }\n\n    protected handleOpenFolder(node: Node, $element: JQuery): boolean {\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n\n            // Dnd over the current element is not possible: add a position with type None for the top and the bottom.\n            const top = this.getTop($element);\n            const height = $element.height() || 0;\n            this.addPosition(node, Position.None, top);\n\n            if (height > 5) {\n                // Subtract 5 pixels to allow more space for the next element.\n                this.addPosition(node, Position.None, top + height - 5);\n            }\n\n            // Stop iterating\n            return false;\n        }\n\n        // Cannot move before current item\n        if (node.children[0] !== this.currentNode) {\n            this.addPosition(node, Position.Inside, this.getTop($element));\n        }\n\n        // Continue iterating\n        return true;\n    }\n\n    protected handleClosedFolder(\n        node: Node,\n        nextNode: Node,\n        $element: JQuery,\n    ): void {\n        const top = this.getTop($element);\n\n        if (node === this.currentNode) {\n            // Cannot move after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n\n            // Cannot move before current item\n            if (nextNode !== this.currentNode) {\n                this.addPosition(node, Position.After, top);\n            }\n        }\n    }\n\n    protected handleFirstNode(node: Node): void {\n        if (node !== this.currentNode) {\n            this.addPosition(\n                node,\n                Position.Before,\n                this.getTop(jQuery(node.element)),\n            );\n        }\n    }\n\n    protected handleAfterOpenFolder(node: Node, nextNode: Node): void {\n        if (node === this.currentNode || nextNode === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, this.lastTop);\n        } else {\n            this.addPosition(node, Position.After, this.lastTop);\n        }\n    }\n\n    protected handleNode(node: Node, nextNode: Node, $element: JQuery): void {\n        const top = this.getTop($element);\n\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n        }\n\n        if (nextNode === this.currentNode || node === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.After, top);\n        }\n    }\n\n    private getTop($element: JQuery<HTMLElement>): number {\n        const offset = $element.offset();\n\n        return offset ? offset.top : 0;\n    }\n\n    private addPosition(node: Node, position: number, top: number): void {\n        const area = {\n            top,\n            bottom: 0,\n            node,\n            position,\n        };\n\n        this.positions.push(area);\n        this.lastTop = top;\n    }\n\n    private generateHitAreasForGroup(\n        hitAreas: HitArea[],\n        positionsInGroup: HitArea[],\n        top: number,\n        bottom: number,\n    ): void {\n        // limit positions in group\n        const positionCount = Math.min(positionsInGroup.length, 4);\n\n        const areaHeight = Math.round((bottom - top) / positionCount);\n        let areaTop = top;\n\n        let i = 0;\n        while (i < positionCount) {\n            const position = positionsInGroup[i];\n\n            if (position && position.position !== Position.None) {\n                hitAreas.push({\n                    top: areaTop,\n                    bottom: areaTop + areaHeight,\n                    node: position.node,\n                    position: position.position,\n                });\n            }\n\n            areaTop += areaHeight;\n            i += 1;\n        }\n    }\n}\n\nclass DragElement {\n    private offsetX: number;\n    private offsetY: number;\n    private $element: JQuery;\n\n    constructor(\n        nodeName: string,\n        offsetX: number,\n        offsetY: number,\n        $tree: JQuery,\n        autoEscape: boolean,\n    ) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n\n        this.$element = jQuery(\"<span>\").addClass(\n            \"jqtree-title jqtree-dragging\",\n        );\n\n        if (autoEscape) {\n            this.$element.text(nodeName);\n        } else {\n            this.$element.html(nodeName);\n        }\n\n        this.$element.css(\"position\", \"absolute\");\n        $tree.append(this.$element);\n    }\n\n    public move(pageX: number, pageY: number): void {\n        this.$element.offset({\n            left: pageX - this.offsetX,\n            top: pageY - this.offsetY,\n        });\n    }\n\n    public remove(): void {\n        this.$element.remove();\n    }\n}\n","export const isInt = (n: unknown): boolean =>\n    typeof n === \"number\" && n % 1 === 0;\n\nexport const isFunction = (v: unknown): boolean => typeof v === \"function\";\n\nexport const getBoolString = (value: unknown): string =>\n    value ? \"true\" : \"false\";\n","import { getBoolString } from \"./util\";\nimport { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\ntype IconElement = string | HTMLElement | JQuery<HTMLElement>;\n\nexport default class ElementsRenderer {\n    public openedIconElement?: HTMLElement | Text;\n    public closedIconElement?: HTMLElement | Text;\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        this.openedIconElement = this.createButtonElement(\n            treeWidget.options.openedIcon || \"+\",\n        );\n        this.closedIconElement = this.createButtonElement(\n            treeWidget.options.closedIcon || \"-\",\n        );\n    }\n\n    public render(fromNode: Node | null): void {\n        if (fromNode && fromNode.parent) {\n            this.renderFromNode(fromNode);\n        } else {\n            this.renderFromRoot();\n        }\n    }\n\n    public renderFromRoot(): void {\n        const $element = this.treeWidget.element;\n        $element.empty();\n\n        if ($element[0]) {\n            this.createDomElements(\n                $element[0],\n                this.treeWidget.tree.children,\n                true,\n                1,\n            );\n        }\n    }\n\n    public renderFromNode(node: Node): void {\n        // remember current li\n        const $previousLi = jQuery(node.element);\n\n        // create element\n        const li = this.createLi(node, node.getLevel());\n        this.attachNodeData(node, li);\n\n        // add element to dom\n        $previousLi.after(li);\n\n        // remove previous li\n        $previousLi.remove();\n\n        // create children\n        if (node.children) {\n            this.createDomElements(\n                li,\n                node.children,\n                false,\n                node.getLevel() + 1,\n            );\n        }\n    }\n\n    private createDomElements(\n        element: Element,\n        children: Node[],\n        isRootNode: boolean,\n        level: number,\n    ): void {\n        const ul = this.createUl(isRootNode);\n        element.appendChild(ul);\n\n        for (const child of children) {\n            const li = this.createLi(child, level);\n            ul.appendChild(li);\n\n            this.attachNodeData(child, li);\n\n            if (child.hasChildren()) {\n                this.createDomElements(li, child.children, false, level + 1);\n            }\n        }\n    }\n\n    private attachNodeData(node: Node, li: HTMLElement): void {\n        node.element = li;\n        jQuery(li).data(\"node\", node);\n    }\n\n    private createUl(isRootNode: boolean): HTMLUListElement {\n        let classString;\n        let role;\n\n        if (!isRootNode) {\n            classString = \"\";\n            role = \"group\";\n        } else {\n            classString = \"jqtree-tree\";\n            role = \"tree\";\n\n            if (this.treeWidget.options.rtl) {\n                classString += \" jqtree-rtl\";\n            }\n        }\n\n        if (this.treeWidget.options.dragAndDrop) {\n            classString += \" jqtree-dnd\";\n        }\n\n        const ul = document.createElement(\"ul\");\n        ul.className = `jqtree_common ${classString}`;\n\n        ul.setAttribute(\"role\", role);\n\n        return ul;\n    }\n\n    private createLi(node: Node, level: number): HTMLLIElement {\n        const isSelected = Boolean(\n            this.treeWidget.selectNodeHandler.isNodeSelected(node),\n        );\n\n        const mustShowFolder =\n            node.isFolder() ||\n            (node.isEmptyFolder && this.treeWidget.options.showEmptyFolder);\n\n        const li = mustShowFolder\n            ? this.createFolderLi(node, level, isSelected)\n            : this.createNodeLi(node, level, isSelected);\n\n        if (this.treeWidget.options.onCreateLi) {\n            this.treeWidget.options.onCreateLi(node, jQuery(li), isSelected);\n        }\n\n        return li;\n    }\n\n    private setTreeItemAriaAttributes(\n        element: HTMLElement,\n        name: string,\n        level: number,\n        isSelected: boolean,\n    ) {\n        element.setAttribute(\"aria-label\", name);\n        element.setAttribute(\"aria-level\", `${level}`);\n        element.setAttribute(\"aria-selected\", getBoolString(isSelected));\n        element.setAttribute(\"role\", \"treeitem\");\n    }\n\n    private createFolderLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const buttonClasses = this.getButtonClasses(node);\n        const folderClasses = this.getFolderClasses(node, isSelected);\n\n        const iconElement = node.is_open\n            ? this.openedIconElement\n            : this.closedIconElement;\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = `jqtree_common ${folderClasses}`;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // button link\n        const buttonLink = document.createElement(\"a\");\n        buttonLink.className = buttonClasses;\n\n        if (iconElement) {\n            buttonLink.appendChild(iconElement.cloneNode(true));\n        }\n\n        if (this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            true,\n            level,\n        );\n        titleSpan.setAttribute(\"aria-expanded\", getBoolString(node.is_open));\n        div.appendChild(titleSpan);\n\n        if (!this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        return li;\n    }\n\n    private createNodeLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const liClasses = [\"jqtree_common\"];\n\n        if (isSelected) {\n            liClasses.push(\"jqtree-selected\");\n        }\n\n        const classString = liClasses.join(\" \");\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = classString;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            false,\n            level,\n        );\n        div.appendChild(titleSpan);\n\n        return li;\n    }\n\n    private createTitleSpan(\n        nodeName: string,\n        isSelected: boolean,\n        isFolder: boolean,\n        level: number,\n    ): HTMLSpanElement {\n        const titleSpan = document.createElement(\"span\");\n\n        let classes = \"jqtree-title jqtree_common\";\n\n        if (isFolder) {\n            classes += \" jqtree-title-folder\";\n        }\n\n        classes += ` jqtree-title-button-${\n            this.treeWidget.options.buttonLeft ? \"left\" : \"right\"\n        }`;\n\n        titleSpan.className = classes;\n\n        if (isSelected) {\n            const tabIndex = this.treeWidget.options.tabIndex;\n\n            if (tabIndex !== undefined) {\n                titleSpan.setAttribute(\"tabindex\", `${tabIndex}`);\n            }\n        }\n\n        this.setTreeItemAriaAttributes(titleSpan, nodeName, level, isSelected);\n\n        if (this.treeWidget.options.autoEscape) {\n            titleSpan.textContent = nodeName;\n        } else {\n            titleSpan.innerHTML = nodeName;\n        }\n\n        return titleSpan;\n    }\n\n    private getButtonClasses(node: Node): string {\n        const classes = [\"jqtree-toggler\", \"jqtree_common\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (this.treeWidget.options.buttonLeft) {\n            classes.push(\"jqtree-toggler-left\");\n        } else {\n            classes.push(\"jqtree-toggler-right\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private getFolderClasses(node: Node, isSelected: boolean): string {\n        const classes = [\"jqtree-folder\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (isSelected) {\n            classes.push(\"jqtree-selected\");\n        }\n\n        if (node.is_loading) {\n            classes.push(\"jqtree-loading\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private createButtonElement(\n        value: IconElement,\n    ): HTMLElement | Text | undefined {\n        if (typeof value === \"string\") {\n            // convert value to html\n            const div = document.createElement(\"div\");\n            div.innerHTML = value;\n\n            return document.createTextNode(div.innerHTML);\n        } else {\n            return jQuery(value)[0];\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport type HandleFinishedLoading = () => void;\n\nexport default class DataLoader {\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n    }\n\n    public loadFromUrl(\n        urlInfo: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null\n    ): void {\n        if (!urlInfo) {\n            return;\n        }\n\n        const $el = this.getDomElement(parentNode);\n        this.addLoadingClass($el);\n        this.notifyLoading(true, parentNode, $el);\n\n        const stopLoading = (): void => {\n            this.removeLoadingClass($el);\n            this.notifyLoading(false, parentNode, $el);\n        };\n\n        const handleSuccess = (data: string | NodeData[]): void => {\n            stopLoading();\n            this.treeWidget.loadData(this.parseData(data), parentNode);\n\n            if (onFinished && typeof onFinished === \"function\") {\n                onFinished();\n            }\n        };\n\n        const handleError = (jqXHR: JQuery.jqXHR): void => {\n            stopLoading();\n\n            if (this.treeWidget.options.onLoadFailed) {\n                this.treeWidget.options.onLoadFailed(jqXHR);\n            }\n        };\n\n        this.submitRequest(urlInfo, handleSuccess, handleError);\n    }\n\n    private addLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.addClass(\"jqtree-loading\");\n        }\n    }\n\n    private removeLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.removeClass(\"jqtree-loading\");\n        }\n    }\n\n    private getDomElement(parentNode: Node | null): JQuery<HTMLElement> {\n        if (parentNode) {\n            return jQuery(parentNode.element);\n        } else {\n            return this.treeWidget.element;\n        }\n    }\n\n    private notifyLoading(\n        isLoading: boolean,\n        node: Node | null,\n        $el: JQuery\n    ): void {\n        if (this.treeWidget.options.onLoading) {\n            this.treeWidget.options.onLoading(isLoading, node, $el);\n        }\n\n        this.treeWidget._triggerEvent(\"tree.loading_data\", {\n            isLoading,\n            node,\n            $el,\n        });\n    }\n\n    private submitRequest(\n        urlInfoInput: string | JQuery.AjaxSettings,\n        handleSuccess: JQuery.Ajax.SuccessCallback<any>,\n        handleError: JQuery.Ajax.ErrorCallback<any>\n    ): void {\n        const urlInfo =\n            typeof urlInfoInput === \"string\"\n                ? { url: urlInfoInput }\n                : urlInfoInput;\n\n        const ajaxSettings: JQuery.AjaxSettings = {\n            method: \"GET\",\n            cache: false,\n            dataType: \"json\",\n            success: handleSuccess,\n            error: handleError,\n            ...urlInfo,\n        };\n\n        ajaxSettings.method = ajaxSettings.method?.toUpperCase() || \"GET\";\n\n        void jQuery.ajax(ajaxSettings);\n    }\n\n    private parseData(data: string | NodeData[]): NodeData[] {\n        const { dataFilter } = this.treeWidget.options;\n\n        const getParsedData = () => {\n            if (typeof data === \"string\") {\n                return JSON.parse(data) as NodeData[];\n            } else {\n                return data;\n            }\n        };\n\n        const parsedData = getParsedData();\n\n        if (dataFilter) {\n            return dataFilter(parsedData);\n        } else {\n            return parsedData;\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport default class KeyHandler {\n    private static LEFT = 37;\n    private static UP = 38;\n    private static RIGHT = 39;\n    private static DOWN = 40;\n\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        if (treeWidget.options.keyboardSupport) {\n            jQuery(document).on(\"keydown.jqtree\", this.handleKeyDown);\n        }\n    }\n\n    public deinit(): void {\n        jQuery(document).off(\"keydown.jqtree\");\n    }\n\n    public moveDown(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getNextVisibleNode());\n    }\n\n    public moveUp(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getPreviousVisibleNode());\n    }\n\n    public moveRight(selectedNode: Node): boolean {\n        if (!selectedNode.isFolder()) {\n            return true;\n        } else {\n            // folder node\n            if (selectedNode.is_open) {\n                // Right moves to the first child of an open node\n                return this.selectNode(selectedNode.getNextVisibleNode());\n            } else {\n                // Right expands a closed node\n                this.treeWidget.openNode(selectedNode);\n                return false;\n            }\n        }\n    }\n\n    public moveLeft(selectedNode: Node): boolean {\n        if (selectedNode.isFolder() && selectedNode.is_open) {\n            // Left on an open node closes the node\n            this.treeWidget.closeNode(selectedNode);\n            return false;\n        } else {\n            // Left on a closed or end node moves focus to the node's parent\n            return this.selectNode(selectedNode.getParent());\n        }\n    }\n\n    public selectNode(node: Node | null): boolean {\n        if (!node) {\n            return true;\n        } else {\n            this.treeWidget.selectNode(node);\n\n            return false;\n        }\n    }\n\n    private handleKeyDown = (e: JQuery.Event): boolean => {\n        if (!this.canHandleKeyboard()) {\n            return true;\n        }\n\n        const selectedNode = this.treeWidget.getSelectedNode();\n        if (!selectedNode) {\n            return true;\n        }\n\n        const key = e.which;\n\n        switch (key) {\n            case KeyHandler.DOWN:\n                return this.moveDown(selectedNode);\n\n            case KeyHandler.UP:\n                return this.moveUp(selectedNode);\n\n            case KeyHandler.RIGHT:\n                return this.moveRight(selectedNode);\n\n            case KeyHandler.LEFT:\n                return this.moveLeft(selectedNode);\n\n            default:\n                return true;\n        }\n    };\n\n    private canHandleKeyboard(): boolean {\n        return (\n            (this.treeWidget.options.keyboardSupport || false) &&\n            this.treeWidget.selectNodeHandler.isFocusOnTree()\n        );\n    }\n}\n","const register = (widgetClass: unknown, widgetName: string): void => {\n    const getDataKey = (): string => `simple_widget_${widgetName}`;\n\n    const getWidgetData = (\n        el: HTMLElement,\n        dataKey: string\n    ): SimpleWidget<unknown> | null => {\n        const widget = jQuery.data(el, dataKey) as unknown;\n\n        if (widget && widget instanceof SimpleWidget) {\n            return widget;\n        } else {\n            return null;\n        }\n    };\n\n    const createWidget = ($el: JQuery, options: unknown): JQuery => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const existingWidget = getWidgetData(el, dataKey);\n\n            if (!existingWidget) {\n                const simpleWidgetClass = widgetClass as typeof SimpleWidget;\n                const widget = new simpleWidgetClass(el, options);\n\n                if (!jQuery.data(el, dataKey)) {\n                    jQuery.data(el, dataKey, widget);\n                }\n\n                // Call init after setting data, so we can call methods\n                widget.init();\n            }\n        }\n\n        return $el;\n    };\n\n    const destroyWidget = ($el: JQuery): void => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const widget = getWidgetData(el, dataKey);\n\n            if (widget) {\n                widget.destroy();\n            }\n\n            jQuery.removeData(el, dataKey);\n        }\n    };\n\n    const callFunction = (\n        $el: JQuery,\n        functionName: string,\n        args: unknown[]\n    ): unknown => {\n        let result = null;\n\n        for (const el of $el.get()) {\n            const widget = jQuery.data(el, getDataKey()) as unknown;\n\n            if (widget && widget instanceof SimpleWidget) {\n                const simpleWidget = widget as SimpleWidget<unknown>;\n                const widgetFunction = simpleWidget[functionName];\n\n                if (widgetFunction && typeof widgetFunction === \"function\") {\n                    result = widgetFunction.apply(widget, args) as unknown;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (jQuery.fn as any)[widgetName] = function (\n        this: JQuery,\n        argument1: unknown,\n        ...args: unknown[]\n    ) {\n        if (!argument1) {\n            return createWidget(this, null);\n        } else if (typeof argument1 === \"object\") {\n            const options = argument1 as unknown;\n            return createWidget(this, options);\n        } else if (typeof argument1 === \"string\" && argument1[0] !== \"_\") {\n            const functionName = argument1;\n\n            if (functionName === \"destroy\") {\n                return destroyWidget(this);\n            } else if (functionName === \"get_widget_class\") {\n                return widgetClass;\n            } else {\n                return callFunction(this, functionName, args);\n            }\n        } else {\n            return undefined;\n        }\n    };\n};\n\nexport default class SimpleWidget<WidgetOptions> {\n    public static register(widgetClass: unknown, widgetName: string): void {\n        register(widgetClass, widgetName);\n    }\n\n    [key: string]: unknown;\n\n    protected static defaults: unknown = {};\n\n    public options: WidgetOptions;\n\n    public $el: JQuery<HTMLElement>;\n\n    constructor(el: HTMLElement, options: WidgetOptions) {\n        this.$el = jQuery(el);\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const defaults = (this.constructor as any)[\"defaults\"] as WidgetOptions;\n        this.options = { ...defaults, ...options };\n    }\n\n    public destroy(): void {\n        this.deinit();\n    }\n\n    public init(): void {\n        //\n    }\n\n    public deinit(): void {\n        //\n    }\n}\n","/*\nThis widget does the same a the mouse widget in jqueryui.\n*/\nimport SimpleWidget from \"./simple.widget\";\nimport { PositionInfo } from \"./types\";\n\nconst getPositionInfoFromMouseEvent = (e: MouseEvent): PositionInfo => ({\n    pageX: e.pageX,\n    pageY: e.pageY,\n    target: e.target as HTMLElement,\n    originalEvent: e,\n});\n\nconst getPositionInfoFromTouch = (\n    touch: Touch,\n    e: TouchEvent\n): PositionInfo => ({\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    target: touch.target as HTMLElement,\n    originalEvent: e,\n});\n\nabstract class MouseWidget<WidgetOptions> extends SimpleWidget<WidgetOptions> {\n    protected isMouseStarted: boolean;\n    protected mouseDownInfo: PositionInfo | null;\n    private mouseDelayTimer: number | null;\n    private isMouseDelayMet: boolean;\n\n    public init(): void {\n        const element = this.$el.get(0);\n\n        if (element) {\n            element.addEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n            element.addEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.isMouseStarted = false;\n        this.mouseDelayTimer = null;\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n    }\n\n    public deinit(): void {\n        const el = this.$el.get(0);\n\n        if (el) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.removeMouseMoveEventListeners();\n    }\n\n    protected abstract mouseCapture(positionInfo: PositionInfo): boolean | null;\n\n    protected abstract mouseStart(positionInfo: PositionInfo): boolean;\n\n    protected abstract mouseDrag(positionInfo: PositionInfo): void;\n\n    protected abstract mouseStop(positionInfo: PositionInfo): void;\n\n    protected abstract getMouseDelay(): number;\n\n    private mouseDown = (e: MouseEvent): void => {\n        // Left mouse button?\n        if (e.button !== 0) {\n            return;\n        }\n\n        const result = this.handleMouseDown(getPositionInfoFromMouseEvent(e));\n\n        if (result && e.cancelable) {\n            e.preventDefault();\n        }\n    };\n\n    private handleMouseDown(positionInfo: PositionInfo): boolean {\n        // We may have missed mouseup (out of window)\n        if (this.isMouseStarted) {\n            this.handleMouseUp(positionInfo);\n        }\n\n        this.mouseDownInfo = positionInfo;\n\n        if (!this.mouseCapture(positionInfo)) {\n            return false;\n        }\n\n        this.handleStartMouse();\n\n        return true;\n    }\n\n    private handleStartMouse(): void {\n        document.addEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        document.addEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        document.addEventListener(\"mouseup\", this.mouseUp, { passive: false });\n        document.addEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n\n        const mouseDelay = this.getMouseDelay();\n\n        if (mouseDelay) {\n            this.startMouseDelayTimer(mouseDelay);\n        } else {\n            this.isMouseDelayMet = true;\n        }\n    }\n\n    private startMouseDelayTimer(mouseDelay: number): void {\n        if (this.mouseDelayTimer) {\n            clearTimeout(this.mouseDelayTimer);\n        }\n\n        this.mouseDelayTimer = window.setTimeout(() => {\n            if (this.mouseDownInfo) {\n                this.isMouseDelayMet = true;\n            }\n        }, mouseDelay);\n\n        this.isMouseDelayMet = false;\n    }\n\n    private mouseMove = (e: MouseEvent): void => {\n        this.handleMouseMove(e, getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseMove(\n        e: MouseEvent | TouchEvent,\n        positionInfo: PositionInfo\n    ): void {\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n            return;\n        }\n\n        if (!this.isMouseDelayMet) {\n            return;\n        }\n\n        if (this.mouseDownInfo) {\n            this.isMouseStarted = this.mouseStart(this.mouseDownInfo) !== false;\n        }\n\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n        } else {\n            this.handleMouseUp(positionInfo);\n        }\n    }\n\n    private mouseUp = (e: MouseEvent): void => {\n        this.handleMouseUp(getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseUp(positionInfo: PositionInfo): void {\n        this.removeMouseMoveEventListeners();\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n\n        if (this.isMouseStarted) {\n            this.isMouseStarted = false;\n            this.mouseStop(positionInfo);\n        }\n    }\n\n    private removeMouseMoveEventListeners() {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mouseup\", this.mouseUp, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n    }\n\n    private touchStart = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseDown(getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchMove = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseMove(e, getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchEnd = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseUp(getPositionInfoFromTouch(touch, e));\n    };\n}\n\nexport default MouseWidget;\n","import { isInt } from \"./util\";\nimport { JqTreeWidget } from \"./tree.jquery\";\nimport { Node } from \"./node\";\n\nexport interface SavedState {\n    open_nodes: NodeId[];\n    selected_node: NodeId[];\n}\n\nexport default class SaveStateHandler {\n    private treeWidget: JqTreeWidget;\n    private _supportsLocalStorage: boolean | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n    }\n\n    public saveState(): void {\n        const state = JSON.stringify(this.getState());\n\n        if (this.treeWidget.options.onSetStateFromStorage) {\n            this.treeWidget.options.onSetStateFromStorage(state);\n        } else if (this.supportsLocalStorage()) {\n            localStorage.setItem(this.getKeyName(), state);\n        }\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        const jsonData = this.loadFromStorage();\n\n        if (jsonData) {\n            return this.parseState(jsonData) as unknown as SavedState;\n        } else {\n            return null;\n        }\n    }\n\n    public getState(): SavedState {\n        const getOpenNodeIds = (): NodeId[] => {\n            const openNodes: NodeId[] = [];\n\n            this.treeWidget.tree.iterate((node: Node) => {\n                if (node.is_open && node.id && node.hasChildren()) {\n                    openNodes.push(node.id);\n                }\n                return true;\n            });\n\n            return openNodes;\n        };\n\n        const getSelectedNodeIds = (): NodeId[] => {\n            const selectedNodeIds: NodeId[] = [];\n\n            this.treeWidget.getSelectedNodes().forEach((node) => {\n                if (node.id != null) {\n                    selectedNodeIds.push(node.id);\n                }\n            });\n\n            return selectedNodeIds;\n        };\n\n        return {\n            open_nodes: getOpenNodeIds(),\n            selected_node: getSelectedNodeIds(),\n        };\n    }\n\n    /*\n    Set initial state\n    Don't handle nodes that are loaded on demand\n\n    result: must load on demand\n    */\n    public setInitialState(state: SavedState): boolean {\n        if (!state) {\n            return false;\n        } else {\n            let mustLoadOnDemand = false;\n\n            if (state.open_nodes) {\n                mustLoadOnDemand = this.openInitialNodes(state.open_nodes);\n            }\n\n            if (state.selected_node) {\n                this.resetSelection();\n                this.selectInitialNodes(state.selected_node);\n            }\n\n            return mustLoadOnDemand;\n        }\n    }\n\n    public setInitialStateOnDemand(\n        state: SavedState,\n        cbFinished: () => void\n    ): void {\n        if (state) {\n            this.doSetInitialStateOnDemand(\n                state.open_nodes,\n                state.selected_node,\n                cbFinished\n            );\n        } else {\n            cbFinished();\n        }\n    }\n\n    public getNodeIdToBeSelected(): NodeId | null {\n        const state = this.getStateFromStorage();\n\n        if (state && state.selected_node) {\n            return state.selected_node[0] || null;\n        } else {\n            return null;\n        }\n    }\n\n    private parseState(jsonData: string): SavedState {\n        const state = JSON.parse(jsonData) as Record<string, unknown>;\n\n        // Check if selected_node is an int (instead of an array)\n        if (state && state.selected_node && isInt(state.selected_node)) {\n            // Convert to array\n            state.selected_node = [state.selected_node];\n        }\n\n        return state as unknown as SavedState;\n    }\n\n    private loadFromStorage(): string | null {\n        if (this.treeWidget.options.onGetStateFromStorage) {\n            return this.treeWidget.options.onGetStateFromStorage();\n        } else if (this.supportsLocalStorage()) {\n            return localStorage.getItem(this.getKeyName());\n        } else {\n            return null;\n        }\n    }\n\n    private openInitialNodes(nodeIds: NodeId[]): boolean {\n        let mustLoadOnDemand = false;\n\n        for (const nodeId of nodeIds) {\n            const node = this.treeWidget.getNodeById(nodeId);\n\n            if (node) {\n                if (!node.load_on_demand) {\n                    node.is_open = true;\n                } else {\n                    mustLoadOnDemand = true;\n                }\n            }\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    private selectInitialNodes(nodeIds: NodeId[]): boolean {\n        let selectCount = 0;\n\n        for (const nodeId of nodeIds) {\n            const node = this.treeWidget.getNodeById(nodeId);\n\n            if (node) {\n                selectCount += 1;\n\n                this.treeWidget.selectNodeHandler.addToSelection(node);\n            }\n        }\n\n        return selectCount !== 0;\n    }\n\n    private resetSelection(): void {\n        const selectNodeHandler = this.treeWidget.selectNodeHandler;\n\n        const selectedNodes = selectNodeHandler.getSelectedNodes();\n\n        selectedNodes.forEach((node) => {\n            selectNodeHandler.removeFromSelection(node);\n        });\n    }\n\n    private doSetInitialStateOnDemand(\n        nodeIdsParam: NodeId[],\n        selectedNodes: NodeId[],\n        cbFinished: () => void\n    ): void {\n        let loadingCount = 0;\n        let nodeIds = nodeIdsParam;\n\n        const openNodes = (): void => {\n            const newNodesIds = [];\n\n            for (const nodeId of nodeIds) {\n                const node = this.treeWidget.getNodeById(nodeId);\n\n                if (!node) {\n                    newNodesIds.push(nodeId);\n                } else {\n                    if (!node.is_loading) {\n                        if (node.load_on_demand) {\n                            loadAndOpenNode(node);\n                        } else {\n                            this.treeWidget._openNode(node, false, null);\n                        }\n                    }\n                }\n            }\n\n            nodeIds = newNodesIds;\n\n            if (this.selectInitialNodes(selectedNodes)) {\n                this.treeWidget._refreshElements(null);\n            }\n\n            if (loadingCount === 0) {\n                cbFinished();\n            }\n        };\n\n        const loadAndOpenNode = (node: Node): void => {\n            loadingCount += 1;\n            this.treeWidget._openNode(node, false, () => {\n                loadingCount -= 1;\n                openNodes();\n            });\n        };\n\n        openNodes();\n    }\n\n    private getKeyName(): string {\n        if (typeof this.treeWidget.options.saveState === \"string\") {\n            return this.treeWidget.options.saveState;\n        } else {\n            return \"tree\";\n        }\n    }\n\n    private supportsLocalStorage(): boolean {\n        const testSupport = (): boolean => {\n            // Is local storage supported?\n            if (localStorage == null) {\n                return false;\n            } else {\n                // Check if it's possible to store an item. Safari does not allow this in private browsing mode.\n                try {\n                    const key = \"_storage_test\";\n                    sessionStorage.setItem(key, \"value\");\n                    sessionStorage.removeItem(key);\n                } catch (error) {\n                    return false;\n                }\n\n                return true;\n            }\n        };\n\n        if (this._supportsLocalStorage == null) {\n            this._supportsLocalStorage = testSupport();\n        }\n\n        return this._supportsLocalStorage;\n    }\n}\n","import type { ScrollParent } from \"./types\";\n\ntype HorizontalScrollDirection = \"left\" | \"right\";\ntype VerticalScrollDirection = \"bottom\" | \"top\";\n\ninterface Params {\n    $container: JQuery<HTMLElement>;\n    refreshHitAreas: () => void;\n    $treeElement: JQuery<HTMLElement>;\n}\n\nexport default class ContainerScrollParent implements ScrollParent {\n    private $container: JQuery<HTMLElement>;\n    private horizontalScrollDirection?: HorizontalScrollDirection;\n    private horizontalScrollTimeout?: number;\n    private refreshHitAreas: () => void;\n    private scrollParentBottom?: number;\n    private scrollParentTop?: number;\n    private verticalScrollTimeout?: number;\n    private verticalScrollDirection?: VerticalScrollDirection;\n\n    constructor({ $container, refreshHitAreas }: Params) {\n        this.$container = $container;\n        this.refreshHitAreas = refreshHitAreas;\n    }\n\n    public checkHorizontalScrolling(pageX: number): void {\n        const newHorizontalScrollDirection =\n            this.getNewHorizontalScrollDirection(pageX);\n\n        if (this.horizontalScrollDirection !== newHorizontalScrollDirection) {\n            this.horizontalScrollDirection = newHorizontalScrollDirection;\n\n            if (this.horizontalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n            }\n\n            if (newHorizontalScrollDirection) {\n                this.horizontalScrollTimeout = window.setTimeout(\n                    this.scrollHorizontally.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public checkVerticalScrolling(pageY: number) {\n        const newVerticalScrollDirection =\n            this.getNewVerticalScrollDirection(pageY);\n\n        if (this.verticalScrollDirection !== newVerticalScrollDirection) {\n            this.verticalScrollDirection = newVerticalScrollDirection;\n\n            if (this.verticalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n                this.verticalScrollTimeout = undefined;\n            }\n\n            if (newVerticalScrollDirection) {\n                this.verticalScrollTimeout = window.setTimeout(\n                    this.scrollVertically.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public getScrollLeft(): number {\n        return this.$container.scrollLeft() || 0;\n    }\n\n    public scrollToY(top: number): void {\n        const container = this.$container.get(0) as HTMLElement;\n        container.scrollTop = top;\n    }\n\n    public stopScrolling() {\n        this.horizontalScrollDirection = undefined;\n        this.verticalScrollDirection = undefined;\n        this.scrollParentTop = undefined;\n        this.scrollParentBottom = undefined;\n    }\n\n    private getNewHorizontalScrollDirection(\n        pageX: number,\n    ): HorizontalScrollDirection | undefined {\n        const scrollParentOffset = this.$container.offset();\n        if (!scrollParentOffset) {\n            return undefined;\n        }\n\n        const container = this.$container.get(0) as HTMLElement;\n\n        const rightEdge = scrollParentOffset.left + container.clientWidth;\n        const leftEdge = scrollParentOffset.left;\n        const isNearRightEdge = pageX > rightEdge - 20;\n        const isNearLeftEdge = pageX < leftEdge + 20;\n\n        if (isNearRightEdge) {\n            return \"right\";\n        } else if (isNearLeftEdge) {\n            return \"left\";\n        }\n\n        return undefined;\n    }\n\n    private getNewVerticalScrollDirection(\n        pageY: number,\n    ): VerticalScrollDirection | undefined {\n        if (pageY < this.getScrollParentTop()) {\n            return \"top\";\n        }\n\n        if (pageY > this.getScrollParentBottom()) {\n            return \"bottom\";\n        }\n\n        return undefined;\n    }\n\n    private scrollHorizontally() {\n        if (!this.horizontalScrollDirection) {\n            return;\n        }\n\n        const distance = this.horizontalScrollDirection === \"left\" ? -20 : 20;\n        const container = this.$container.get(0) as HTMLElement;\n\n        container.scrollBy({\n            left: distance,\n            top: 0,\n            behavior: \"instant\",\n        });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollHorizontally.bind(this), 40);\n    }\n\n    private scrollVertically() {\n        if (!this.verticalScrollDirection) {\n            return;\n        }\n\n        const distance = this.verticalScrollDirection === \"top\" ? -20 : 20;\n        const container = this.$container.get(0) as HTMLElement;\n\n        container.scrollBy({\n            left: 0,\n            top: distance,\n            behavior: \"instant\",\n        });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollVertically.bind(this), 40);\n    }\n\n    private getScrollParentTop() {\n        if (this.scrollParentTop == null) {\n            this.scrollParentTop = this.$container.offset()?.top || 0;\n        }\n\n        return this.scrollParentTop;\n    }\n\n    private getScrollParentBottom() {\n        if (this.scrollParentBottom == null) {\n            this.scrollParentBottom =\n                this.getScrollParentTop() +\n                (this.$container.innerHeight() ?? 0);\n        }\n\n        return this.scrollParentBottom;\n    }\n}\n","import type { ScrollParent } from \"./types\";\n\ntype HorizontalScrollDirection = \"left\" | \"right\";\ntype VerticalScrollDirection = \"bottom\" | \"top\";\n\nexport default class DocumentScrollParent implements ScrollParent {\n    private $element: JQuery<HTMLElement>;\n    private horizontalScrollDirection?: HorizontalScrollDirection;\n    private horizontalScrollTimeout?: number;\n    private refreshHitAreas: () => void;\n    private verticalScrollDirection?: VerticalScrollDirection;\n    private verticalScrollTimeout?: number;\n    private documentScrollHeight?: number;\n    private documentScrollWidth?: number;\n\n    constructor($element: JQuery<HTMLElement>, refreshHitAreas: () => void) {\n        this.$element = $element;\n        this.refreshHitAreas = refreshHitAreas;\n    }\n\n    public checkHorizontalScrolling(pageX: number): void {\n        const newHorizontalScrollDirection =\n            this.getNewHorizontalScrollDirection(pageX);\n\n        if (this.horizontalScrollDirection !== newHorizontalScrollDirection) {\n            this.horizontalScrollDirection = newHorizontalScrollDirection;\n\n            if (this.horizontalScrollTimeout != null) {\n                window.clearTimeout(this.horizontalScrollTimeout);\n            }\n\n            if (newHorizontalScrollDirection) {\n                this.horizontalScrollTimeout = window.setTimeout(\n                    this.scrollHorizontally.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public checkVerticalScrolling(pageY: number) {\n        const newVerticalScrollDirection =\n            this.getNewVerticalScrollDirection(pageY);\n\n        if (this.verticalScrollDirection !== newVerticalScrollDirection) {\n            this.verticalScrollDirection = newVerticalScrollDirection;\n\n            if (this.verticalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n                this.verticalScrollTimeout = undefined;\n            }\n\n            if (newVerticalScrollDirection) {\n                this.verticalScrollTimeout = window.setTimeout(\n                    this.scrollVertically.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public getScrollLeft(): number {\n        return document.documentElement.scrollLeft;\n    }\n\n    public scrollToY(top: number): void {\n        const offset = this.$element.offset();\n        const treeTop = offset ? offset.top : 0;\n\n        jQuery(document).scrollTop(top + treeTop);\n    }\n\n    public stopScrolling() {\n        this.horizontalScrollDirection = undefined;\n        this.verticalScrollDirection = undefined;\n        this.documentScrollHeight = undefined;\n        this.documentScrollWidth = undefined;\n    }\n\n    private getNewHorizontalScrollDirection(\n        pageX: number,\n    ): HorizontalScrollDirection | undefined {\n        const $document = jQuery(document);\n\n        const scrollLeft = $document.scrollLeft() || 0;\n        const windowWidth = jQuery(window).width() || 0;\n\n        const isNearRightEdge = pageX > windowWidth - 20;\n        const isNearLeftEdge = pageX - scrollLeft < 20;\n\n        if (isNearRightEdge && this.canScrollRight()) {\n            return \"right\";\n        }\n\n        if (isNearLeftEdge) {\n            return \"left\";\n        }\n\n        return undefined;\n    }\n\n    private canScrollRight() {\n        const documentElement = document.documentElement;\n\n        return (\n            documentElement.scrollLeft + documentElement.clientWidth <\n            this.getDocumentScrollWidth()\n        );\n    }\n\n    private canScrollDown() {\n        const documentElement = document.documentElement;\n\n        return (\n            documentElement.scrollTop + documentElement.clientHeight <\n            this.getDocumentScrollHeight()\n        );\n    }\n\n    private getDocumentScrollHeight() {\n        // Store the original scroll height because the scroll height can increase when the drag element is moved beyond the scroll height.\n        if (this.documentScrollHeight == null) {\n            this.documentScrollHeight = document.documentElement.scrollHeight;\n        }\n\n        return this.documentScrollHeight;\n    }\n\n    private getDocumentScrollWidth() {\n        // Store the original scroll width because the scroll width can increase when the drag element is moved beyond the scroll width.\n        if (this.documentScrollWidth == null) {\n            this.documentScrollWidth = document.documentElement.scrollWidth;\n        }\n\n        return this.documentScrollWidth;\n    }\n\n    private getNewVerticalScrollDirection(\n        pageY: number,\n    ): VerticalScrollDirection | undefined {\n        const scrollTop = jQuery(document).scrollTop() || 0;\n        const distanceTop = pageY - scrollTop;\n\n        if (distanceTop < 20) {\n            return \"top\";\n        }\n\n        const windowHeight = jQuery(window).height() || 0;\n\n        if (windowHeight - (pageY - scrollTop) < 20 && this.canScrollDown()) {\n            return \"bottom\";\n        }\n\n        return undefined;\n    }\n\n    private scrollHorizontally() {\n        if (!this.horizontalScrollDirection) {\n            return;\n        }\n\n        const distance = this.horizontalScrollDirection === \"left\" ? -20 : 20;\n        window.scrollBy({ left: distance, top: 0, behavior: \"instant\" });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollHorizontally.bind(this), 40);\n    }\n\n    private scrollVertically() {\n        if (!this.verticalScrollDirection) {\n            return;\n        }\n\n        const distance = this.verticalScrollDirection === \"top\" ? -20 : 20;\n        window.scrollBy({ left: 0, top: distance, behavior: \"instant\" });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollVertically.bind(this), 40);\n    }\n}\n","import type { ScrollParent } from \"./types\";\nimport ContainerScrollParent from \"./containerScrollParent\";\nimport DocumentScrollParent from \"./documentScrollParent\";\n\nconst hasOverFlow = ($element: JQuery<HTMLElement>): boolean => {\n    for (const attr of [\"overflow\", \"overflow-y\"]) {\n        const overflowValue = $element.css(attr);\n        if (overflowValue === \"auto\" || overflowValue === \"scroll\") {\n            return true;\n        }\n    }\n\n    return false;\n};\n\nconst getParentWithOverflow = (\n    $treeElement: JQuery<HTMLElement>,\n): JQuery<HTMLElement> | null => {\n    if (hasOverFlow($treeElement)) {\n        return $treeElement;\n    }\n\n    for (const element of $treeElement.parents().get()) {\n        const $element = jQuery(element);\n        if (hasOverFlow($element)) {\n            return $element;\n        }\n    }\n\n    return null;\n};\n\nconst createScrollParent = (\n    $treeElement: JQuery<HTMLElement>,\n    refreshHitAreas: () => void,\n): ScrollParent => {\n    const $container = getParentWithOverflow($treeElement);\n\n    if ($container?.length && $container[0]?.tagName !== \"HTML\") {\n        return new ContainerScrollParent({\n            $container,\n            refreshHitAreas,\n            $treeElement,\n        });\n    } else {\n        return new DocumentScrollParent($treeElement, refreshHitAreas);\n    }\n};\n\nexport default createScrollParent;\n","import { JqTreeWidget } from \"./tree.jquery\";\nimport { PositionInfo } from \"./types\";\nimport { ScrollParent } from \"./scrollHandler/types\";\nimport createScrollParent from \"./scrollHandler/createScrollParent\";\n\nexport default class ScrollHandler {\n    private treeWidget: JqTreeWidget;\n    private scrollParent?: ScrollParent;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n        this.scrollParent = undefined;\n    }\n\n    public checkScrolling(positionInfo: PositionInfo): void {\n        this.checkVerticalScrolling(positionInfo);\n        this.checkHorizontalScrolling(positionInfo);\n    }\n\n    public stopScrolling() {\n        this.getScrollParent().stopScrolling();\n    }\n\n    public scrollToY(top: number): void {\n        this.getScrollParent().scrollToY(top);\n    }\n\n    public getScrollLeft(): number {\n        return this.getScrollParent().getScrollLeft();\n    }\n\n    private checkVerticalScrolling(positionInfo: PositionInfo): void {\n        if (positionInfo.pageY == null) {\n            return;\n        }\n\n        this.getScrollParent().checkVerticalScrolling(positionInfo.pageY);\n    }\n\n    private checkHorizontalScrolling(positionInfo: PositionInfo): void {\n        if (positionInfo.pageX == null) {\n            return;\n        }\n\n        this.getScrollParent().checkHorizontalScrolling(positionInfo.pageX);\n    }\n\n    private getScrollParent(): ScrollParent {\n        if (!this.scrollParent) {\n            this.scrollParent = createScrollParent(\n                this.treeWidget.$el,\n                this.treeWidget.refreshHitAreas.bind(this.treeWidget),\n            );\n        }\n\n        return this.scrollParent;\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport default class SelectNodeHandler {\n    private treeWidget: JqTreeWidget;\n    private selectedNodes: Set<NodeId>;\n    private selectedSingleNode: Node | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n        this.selectedNodes = new Set<NodeId>();\n        this.clear();\n    }\n\n    public getSelectedNode(): Node | false {\n        const selectedNodes = this.getSelectedNodes();\n\n        if (selectedNodes.length) {\n            return selectedNodes[0] || false;\n        } else {\n            return false;\n        }\n    }\n\n    public getSelectedNodes(): Node[] {\n        if (this.selectedSingleNode) {\n            return [this.selectedSingleNode];\n        } else {\n            const selectedNodes: Node[] = [];\n\n            this.selectedNodes.forEach((id) => {\n                const node = this.treeWidget.getNodeById(id);\n                if (node) {\n                    selectedNodes.push(node);\n                }\n            });\n\n            return selectedNodes;\n        }\n    }\n\n    public getSelectedNodesUnder(parent: Node): Node[] {\n        if (this.selectedSingleNode) {\n            if (parent.isParentOf(this.selectedSingleNode)) {\n                return [this.selectedSingleNode];\n            } else {\n                return [];\n            }\n        } else {\n            const selectedNodes = [];\n\n            for (const id in this.selectedNodes) {\n                if (\n                    Object.prototype.hasOwnProperty.call(this.selectedNodes, id)\n                ) {\n                    const node = this.treeWidget.getNodeById(id);\n                    if (node && parent.isParentOf(node)) {\n                        selectedNodes.push(node);\n                    }\n                }\n            }\n\n            return selectedNodes;\n        }\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (node.id != null) {\n            return this.selectedNodes.has(node.id);\n        } else if (this.selectedSingleNode) {\n            return this.selectedSingleNode.element === node.element;\n        } else {\n            return false;\n        }\n    }\n\n    public clear(): void {\n        this.selectedNodes.clear();\n        this.selectedSingleNode = null;\n    }\n\n    public removeFromSelection(node: Node, includeChildren = false): void {\n        if (node.id == null) {\n            if (\n                this.selectedSingleNode &&\n                node.element === this.selectedSingleNode.element\n            ) {\n                this.selectedSingleNode = null;\n            }\n        } else {\n            this.selectedNodes.delete(node.id);\n\n            if (includeChildren) {\n                node.iterate(() => {\n                    if (node.id != null) {\n                        this.selectedNodes.delete(node.id);\n                    }\n                    return true;\n                });\n            }\n        }\n    }\n\n    public addToSelection(node: Node): void {\n        if (node.id != null) {\n            this.selectedNodes.add(node.id);\n        } else {\n            this.selectedSingleNode = node;\n        }\n    }\n\n    public isFocusOnTree(): boolean {\n        const activeElement = document.activeElement;\n\n        return Boolean(\n            activeElement &&\n                activeElement.tagName === \"SPAN\" &&\n                this.treeWidget._containsElement(activeElement as HTMLElement)\n        );\n    }\n}\n","import { Position, Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\nimport { DropHint } from \"./types\";\n\nexport type OnFinishOpenNode = (node: Node) => void;\n\nexport class NodeElement {\n    public node: Node;\n    public $element: JQuery<HTMLElement>;\n    protected treeWidget: JqTreeWidget;\n\n    constructor(node: Node, treeWidget: JqTreeWidget) {\n        this.init(node, treeWidget);\n    }\n\n    public init(node: Node, treeWidget: JqTreeWidget): void {\n        this.node = node;\n        this.treeWidget = treeWidget;\n\n        if (!node.element) {\n            const element = this.treeWidget.element.get(0);\n\n            if (element) {\n                node.element = element;\n            }\n        }\n\n        if (node.element) {\n            this.$element = jQuery(node.element);\n        }\n    }\n\n    public addDropHint(position: number): DropHint {\n        if (this.mustShowBorderDropHint(position)) {\n            return new BorderDropHint(\n                this.$element,\n                this.treeWidget._getScrollLeft(),\n            );\n        } else {\n            return new GhostDropHint(this.node, this.$element, position);\n        }\n    }\n\n    public select(mustSetFocus: boolean): void {\n        const $li = this.getLi();\n\n        $li.addClass(\"jqtree-selected\");\n\n        const $span = this.getSpan();\n        $span.attr(\"tabindex\", this.treeWidget.options.tabIndex ?? null);\n        $span.attr(\"aria-selected\", \"true\");\n\n        if (mustSetFocus) {\n            $span.trigger(\"focus\");\n        }\n    }\n\n    public deselect(): void {\n        const $li = this.getLi();\n\n        $li.removeClass(\"jqtree-selected\");\n\n        const $span = this.getSpan();\n        $span.removeAttr(\"tabindex\");\n        $span.attr(\"aria-selected\", \"false\");\n\n        $span.trigger(\"blur\");\n    }\n\n    protected getUl(): JQuery<HTMLElement> {\n        return this.$element.children(\"ul:first\");\n    }\n\n    protected getSpan(): JQuery<HTMLElement> {\n        return this.$element\n            .children(\".jqtree-element\")\n            .find(\"span.jqtree-title\");\n    }\n\n    protected getLi(): JQuery<HTMLElement> {\n        return this.$element;\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return position === Position.Inside;\n    }\n}\n\nexport class FolderElement extends NodeElement {\n    public open(\n        onFinished: OnFinishOpenNode | null,\n        slide = true,\n        animationSpeed: JQuery.Duration = \"fast\",\n    ): void {\n        if (this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = true;\n\n        const $button = this.getButton();\n        $button.removeClass(\"jqtree-closed\");\n        $button.html(\"\");\n\n        const buttonEl = $button.get(0);\n\n        if (buttonEl) {\n            const openedIconElement =\n                this.treeWidget.renderer.openedIconElement;\n\n            if (openedIconElement) {\n                const icon = openedIconElement.cloneNode(true);\n                buttonEl.appendChild(icon);\n            }\n        }\n\n        const doOpen = (): void => {\n            const $li = this.getLi();\n            $li.removeClass(\"jqtree-closed\");\n\n            const $titleSpan = this.getSpan();\n            $titleSpan.attr(\"aria-expanded\", \"true\");\n\n            if (onFinished) {\n                onFinished(this.node);\n            }\n\n            this.treeWidget._triggerEvent(\"tree.open\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            this.getUl().slideDown(animationSpeed, doOpen);\n        } else {\n            this.getUl().show();\n            doOpen();\n        }\n    }\n\n    public close(\n        slide = true,\n        animationSpeed: JQuery.Duration | undefined = \"fast\",\n    ): void {\n        if (!this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = false;\n\n        const $button = this.getButton();\n        $button.addClass(\"jqtree-closed\");\n        $button.html(\"\");\n\n        const buttonEl = $button.get(0);\n\n        if (buttonEl) {\n            const closedIconElement =\n                this.treeWidget.renderer.closedIconElement;\n\n            if (closedIconElement) {\n                const icon = closedIconElement.cloneNode(true);\n                buttonEl.appendChild(icon);\n            }\n        }\n\n        const doClose = (): void => {\n            const $li = this.getLi();\n            $li.addClass(\"jqtree-closed\");\n\n            const $titleSpan = this.getSpan();\n            $titleSpan.attr(\"aria-expanded\", \"false\");\n\n            this.treeWidget._triggerEvent(\"tree.close\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            this.getUl().slideUp(animationSpeed, doClose);\n        } else {\n            this.getUl().hide();\n            doClose();\n        }\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return !this.node.is_open && position === Position.Inside;\n    }\n\n    private getButton(): JQuery {\n        return this.$element\n            .children(\".jqtree-element\")\n            .find(\"a.jqtree-toggler\");\n    }\n}\n\nexport class BorderDropHint implements DropHint {\n    private $hint: JQuery<Element>;\n\n    constructor($element: JQuery<Element>, scrollLeft: number) {\n        const $div = $element.children(\".jqtree-element\");\n\n        const elWidth = $element.width() || 0;\n        const width = Math.max(elWidth + scrollLeft - 4, 0);\n\n        const elHeight = $div.outerHeight() || 0;\n        const height = Math.max(elHeight - 4, 0);\n\n        this.$hint = jQuery('<span class=\"jqtree-border\"></span>');\n        $div.append(this.$hint);\n\n        this.$hint.css({ width, height });\n    }\n\n    public remove(): void {\n        this.$hint.remove();\n    }\n}\n\nclass GhostDropHint implements DropHint {\n    private $element: JQuery<Element>;\n    private node: Node;\n    private $ghost: JQuery;\n\n    constructor(node: Node, $element: JQuery<Element>, position: Position) {\n        this.$element = $element;\n\n        this.node = node;\n        this.$ghost = jQuery(\n            `<li class=\"jqtree_common jqtree-ghost\"><span class=\"jqtree_common jqtree-circle\"></span>\n            <span class=\"jqtree_common jqtree-line\"></span></li>`,\n        );\n\n        if (position === Position.After) {\n            this.moveAfter();\n        } else if (position === Position.Before) {\n            this.moveBefore();\n        } else if (position === Position.Inside) {\n            if (node.isFolder() && node.is_open) {\n                this.moveInsideOpenFolder();\n            } else {\n                this.moveInside();\n            }\n        }\n    }\n\n    public remove(): void {\n        this.$ghost.remove();\n    }\n\n    public moveAfter(): void {\n        this.$element.after(this.$ghost);\n    }\n\n    public moveBefore(): void {\n        this.$element.before(this.$ghost);\n    }\n\n    public moveInsideOpenFolder(): void {\n        const childElement = this.node.children[0]?.element;\n\n        if (childElement) {\n            jQuery(childElement).before(this.$ghost);\n        }\n    }\n\n    public moveInside(): void {\n        this.$element.after(this.$ghost);\n        this.$ghost.addClass(\"jqtree-inside\");\n    }\n}\n","import __version__ from \"./version\";\nimport { DragAndDropHandler } from \"./dragAndDropHandler\";\nimport ElementsRenderer from \"./elementsRenderer\";\nimport DataLoader, { HandleFinishedLoading } from \"./dataLoader\";\nimport KeyHandler from \"./keyHandler\";\nimport MouseWidget from \"./mouse.widget\";\nimport { PositionInfo } from \"./types\";\nimport SaveStateHandler, { SavedState } from \"./saveStateHandler\";\nimport ScrollHandler from \"./scrollHandler\";\nimport SelectNodeHandler from \"./selectNodeHandler\";\nimport SimpleWidget from \"./simple.widget\";\nimport { Node, getPosition } from \"./node\";\nimport { isFunction } from \"./util\";\nimport { FolderElement, NodeElement, OnFinishOpenNode } from \"./nodeElement\";\nimport { JQTreeOptions } from \"./jqtreeOptions\";\n\ninterface ClickTarget {\n    node: Node;\n    type: \"button\" | \"label\";\n}\n\ninterface SelectNodeOptions {\n    mustToggle?: boolean;\n    mustSetFocus?: boolean;\n}\n\nconst NODE_PARAM_IS_EMPTY = \"Node parameter is empty\";\nconst PARAM_IS_EMPTY = \"Parameter is empty: \";\n\nexport class JqTreeWidget extends MouseWidget<JQTreeOptions> {\n    protected static defaults: JQTreeOptions = {\n        animationSpeed: \"fast\",\n        autoEscape: true,\n        autoOpen: false, // true / false / int (open n levels starting at 0)\n        buttonLeft: true,\n        // The symbol to use for a closed node - ► BLACK RIGHT-POINTING POINTER\n        // http://www.fileformat.info/info/unicode/char/25ba/index.htm\n        closedIcon: undefined,\n        data: undefined,\n        dataFilter: undefined,\n        dataUrl: undefined,\n        dragAndDrop: false,\n        keyboardSupport: true,\n        nodeClass: Node,\n        onCanMove: undefined, // Can this node be moved?\n        onCanMoveTo: undefined, // Can this node be moved to this position? function(moved_node, target_node, position)\n        onCanSelectNode: undefined,\n        onCreateLi: undefined,\n        onDragMove: undefined,\n        onDragStop: undefined,\n        onGetStateFromStorage: undefined,\n        onIsMoveHandle: undefined,\n        onLoadFailed: undefined,\n        onLoading: undefined,\n        onSetStateFromStorage: undefined,\n        openedIcon: \"&#x25bc;\",\n        openFolderDelay: 500, // The delay for opening a folder during drag and drop; the value is in milliseconds\n        // The symbol to use for an open node - ▼ BLACK DOWN-POINTING TRIANGLE\n        // http://www.fileformat.info/info/unicode/char/25bc/index.htm\n        rtl: undefined, // right-to-left support; true / false (default)\n        saveState: false, // true / false / string (cookie name)\n        selectable: true,\n        showEmptyFolder: false,\n        slide: true, // must display slide animation?\n        startDndDelay: 300, // The delay for starting dnd (in milliseconds)\n        tabIndex: 0,\n        useContextMenu: true,\n    };\n\n    public element: JQuery;\n    public tree: Node;\n    public dndHandler: DragAndDropHandler;\n    public renderer: ElementsRenderer;\n    public dataLoader: DataLoader;\n    public scrollHandler: ScrollHandler;\n    public selectNodeHandler: SelectNodeHandler;\n\n    private isInitialized: boolean;\n    private saveStateHandler: SaveStateHandler;\n    private keyHandler: KeyHandler;\n\n    public toggle(node: Node, slideParam: null | boolean = null): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.is_open) {\n            this.closeNode(node, slide);\n        } else {\n            this.openNode(node, slide);\n        }\n\n        return this.element;\n    }\n\n    public getTree(): Node {\n        return this.tree;\n    }\n\n    public selectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): JQuery {\n        this.doSelectNode(node, optionsParam);\n        return this.element;\n    }\n\n    public getSelectedNode(): Node | false {\n        return this.selectNodeHandler.getSelectedNode();\n    }\n\n    public toJson(): string {\n        return JSON.stringify(this.tree.getData());\n    }\n\n    public loadData(data: NodeData[], parentNode: Node | null): JQuery {\n        this.doLoadData(data, parentNode);\n        return this.element;\n    }\n\n    /*\n    signatures:\n    - loadDataFromUrl(url, parent_node=null, on_finished=null)\n        loadDataFromUrl('/my_data');\n        loadDataFromUrl('/my_data', node1);\n        loadDataFromUrl('/my_data', node1, function() { console.log('finished'); });\n        loadDataFromUrl('/my_data', null, function() { console.log('finished'); });\n\n    - loadDataFromUrl(parent_node=null, on_finished=null)\n        loadDataFromUrl();\n        loadDataFromUrl(node1);\n        loadDataFromUrl(null, function() { console.log('finished'); });\n        loadDataFromUrl(node1, function() { console.log('finished'); });\n    */\n    public loadDataFromUrl(\n        param1: string | null | Node,\n        param2?: Node | null | HandleFinishedLoading,\n        param3?: HandleFinishedLoading,\n    ): JQuery {\n        if (typeof param1 === \"string\") {\n            // first parameter is url\n            this.doLoadDataFromUrl(\n                param1,\n                param2 as Node | null,\n                param3 ?? null,\n            );\n        } else {\n            // first parameter is not url\n            this.doLoadDataFromUrl(\n                null,\n                param1,\n                param2 as HandleFinishedLoading | null,\n            );\n        }\n\n        return this.element;\n    }\n\n    public reload(onFinished: HandleFinishedLoading | null): JQuery {\n        this.doLoadDataFromUrl(null, null, onFinished);\n        return this.element;\n    }\n\n    public refresh(): JQuery {\n        this._refreshElements(null);\n        return this.element;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.tree.getNodeById(nodeId);\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.tree.getNodeByName(name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        return this.tree.getNodeByNameMustExist(name);\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.tree.getNodesByProperty(key, value);\n    }\n\n    public getNodeByHtmlElement(\n        element: HTMLElement | JQuery<HTMLElement>,\n    ): Node | null {\n        return this.getNode(jQuery(element));\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        return this.tree.getNodeByCallback(callback);\n    }\n\n    public openNode(\n        node: Node,\n        param1?: boolean | OnFinishOpenNode,\n        param2?: OnFinishOpenNode,\n    ): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const parseParams = (): [boolean, OnFinishOpenNode | null] => {\n            let onFinished: OnFinishOpenNode | null;\n            let slide: boolean | null;\n\n            if (isFunction(param1)) {\n                onFinished = param1 as OnFinishOpenNode | null;\n                slide = null;\n            } else {\n                slide = param1 as boolean;\n                onFinished = param2 as OnFinishOpenNode;\n            }\n\n            if (slide == null) {\n                slide = this.options.slide ?? false;\n            }\n\n            return [slide, onFinished];\n        };\n\n        const [slide, onFinished] = parseParams();\n\n        this._openNode(node, slide, onFinished);\n        return this.element;\n    }\n\n    public closeNode(node: Node, slideParam?: null | boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            new FolderElement(node, this).close(\n                slide,\n                this.options.animationSpeed,\n            );\n\n            this.saveState();\n        }\n\n        return this.element;\n    }\n\n    public isDragging(): boolean {\n        return this.dndHandler.isDragging;\n    }\n\n    public refreshHitAreas(): JQuery {\n        this.dndHandler.refresh();\n        return this.element;\n    }\n\n    public addNodeAfter(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        const newNode = existingNode.addAfter(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addNodeBefore(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addBefore(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addParentNode(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addParent(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(newNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public removeNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!node.parent) {\n            throw Error(\"Node has no parent\");\n        }\n\n        this.selectNodeHandler.removeFromSelection(node, true); // including children\n\n        const parent = node.parent;\n        node.remove();\n        this._refreshElements(parent);\n\n        return this.element;\n    }\n\n    public appendNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam || this.tree;\n\n        const node = parentNode.append(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public prependNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam ?? this.tree;\n\n        const node = parentNode.prepend(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public updateNode(node: Node, data: NodeData): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const idIsChanged =\n            typeof data === \"object\" && data.id && data.id !== node.id;\n\n        if (idIsChanged) {\n            this.tree.removeNodeFromIndex(node);\n        }\n\n        node.setData(data);\n\n        if (idIsChanged) {\n            this.tree.addNodeToIndex(node);\n        }\n\n        if (\n            typeof data === \"object\" &&\n            data[\"children\"] &&\n            data[\"children\"] instanceof Array\n        ) {\n            node.removeChildren();\n\n            if (data.children.length) {\n                node.loadFromData(data.children as Node[]);\n            }\n        }\n\n        this._refreshElements(node);\n\n        return this.element;\n    }\n\n    private isSelectedNodeInSubtree(subtree: Node): boolean {\n        const selectedNode = this.getSelectedNode();\n\n        if (!selectedNode) {\n            return false;\n        } else {\n            return subtree === selectedNode || subtree.isParentOf(selectedNode);\n        }\n    }\n\n    public moveNode(node: Node, targetNode: Node, position: string): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!targetNode) {\n            throw Error(PARAM_IS_EMPTY + \"targetNode\");\n        }\n\n        const positionIndex = getPosition(position);\n\n        if (positionIndex !== undefined) {\n            this.tree.moveNode(node, targetNode, positionIndex);\n            this._refreshElements(null);\n        }\n\n        return this.element;\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        return this.saveStateHandler.getStateFromStorage();\n    }\n\n    public addToSelection(node: Node, mustSetFocus?: boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.addToSelection(node);\n\n        this._getNodeElementForNode(node).select(\n            mustSetFocus === undefined ? true : mustSetFocus,\n        );\n\n        this.saveState();\n\n        return this.element;\n    }\n\n    public getSelectedNodes(): Node[] {\n        return this.selectNodeHandler.getSelectedNodes();\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        return this.selectNodeHandler.isNodeSelected(node);\n    }\n\n    public removeFromSelection(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.removeFromSelection(node);\n\n        this._getNodeElementForNode(node).deselect();\n        this.saveState();\n\n        return this.element;\n    }\n\n    public scrollToNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const nodeTop = jQuery(node.element).offset()?.top ?? 0;\n        const treeTop = this.$el.offset()?.top ?? 0;\n        const top = nodeTop - treeTop;\n\n        this.scrollHandler.scrollToY(top);\n\n        return this.element;\n    }\n\n    public getState(): SavedState | null {\n        return this.saveStateHandler.getState();\n    }\n\n    public setState(state: SavedState): JQuery {\n        this.saveStateHandler.setInitialState(state);\n        this._refreshElements(null);\n\n        return this.element;\n    }\n\n    public setOption(option: string, value: unknown): JQuery {\n        (this.options as unknown as Record<string, unknown>)[option] = value;\n        return this.element;\n    }\n\n    public moveDown(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveDown(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public moveUp(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveUp(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public getVersion(): string {\n        return __version__;\n    }\n\n    public _triggerEvent(\n        eventName: string,\n        values?: Record<string, unknown>,\n    ): JQuery.Event {\n        const event = jQuery.Event(eventName, values);\n        this.element.trigger(event);\n        return event;\n    }\n\n    public _openNode(\n        node: Node,\n        slide = true,\n        onFinished: OnFinishOpenNode | null,\n    ): void {\n        const doOpenNode = (\n            _node: Node,\n            _slide: boolean,\n            _onFinished: OnFinishOpenNode | null,\n        ): void => {\n            const folderElement = new FolderElement(_node, this);\n            folderElement.open(\n                _onFinished,\n                _slide,\n                this.options.animationSpeed,\n            );\n        };\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            if (node.load_on_demand) {\n                this.loadFolderOnDemand(node, slide, onFinished);\n            } else {\n                let parent = node.parent;\n\n                while (parent) {\n                    // nb: do not open root element\n                    if (parent.parent) {\n                        doOpenNode(parent, false, null);\n                    }\n                    parent = parent.parent;\n                }\n\n                doOpenNode(node, slide, onFinished);\n                this.saveState();\n            }\n        }\n    }\n\n    /*\n    Redraw the tree or part of the tree.\n     from_node: redraw this subtree\n    */\n    public _refreshElements(fromNode: Node | null): void {\n        const mustSetFocus = this.selectNodeHandler.isFocusOnTree();\n        const mustSelect = fromNode\n            ? this.isSelectedNodeInSubtree(fromNode)\n            : false;\n\n        this.renderer.render(fromNode);\n\n        if (mustSelect) {\n            this.selectCurrentNode(mustSetFocus);\n        }\n\n        this._triggerEvent(\"tree.refresh\");\n    }\n\n    public _getNodeElementForNode(node: Node): NodeElement {\n        if (node.isFolder()) {\n            return new FolderElement(node, this);\n        } else {\n            return new NodeElement(node, this);\n        }\n    }\n\n    public _getNodeElement($element: JQuery<HTMLElement>): NodeElement | null {\n        const node = this.getNode($element);\n        if (node) {\n            return this._getNodeElementForNode(node);\n        } else {\n            return null;\n        }\n    }\n\n    public _containsElement(element: HTMLElement): boolean {\n        const node = this.getNode(jQuery(element));\n\n        return node != null && node.tree === this.tree;\n    }\n\n    public _getScrollLeft(): number {\n        return this.scrollHandler.getScrollLeft();\n    }\n\n    public init(): void {\n        super.init();\n\n        this.element = this.$el;\n        this.isInitialized = false;\n\n        this.options.rtl = this.getRtlOption();\n\n        if (this.options.closedIcon == null) {\n            this.options.closedIcon = this.getDefaultClosedIcon();\n        }\n\n        this.renderer = new ElementsRenderer(this);\n        this.dataLoader = new DataLoader(this);\n        this.saveStateHandler = new SaveStateHandler(this);\n        this.selectNodeHandler = new SelectNodeHandler(this);\n        this.dndHandler = new DragAndDropHandler(this);\n        this.scrollHandler = new ScrollHandler(this);\n        this.keyHandler = new KeyHandler(this);\n\n        this.initData();\n\n        this.element.on(\"click\", this.handleClick);\n        this.element.on(\"dblclick\", this.handleDblclick);\n\n        if (this.options.useContextMenu) {\n            this.element.on(\"contextmenu\", this.handleContextmenu);\n        }\n    }\n\n    public deinit(): void {\n        this.element.empty();\n        this.element.off();\n\n        this.keyHandler.deinit();\n\n        this.tree = new Node({}, true);\n\n        super.deinit();\n    }\n\n    protected mouseCapture(positionInfo: PositionInfo): boolean | null {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseCapture(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStart(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStart(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseDrag(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            const result = this.dndHandler.mouseDrag(positionInfo);\n\n            this.scrollHandler.checkScrolling(positionInfo);\n            return result;\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStop(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            this.scrollHandler.stopScrolling();\n            return this.dndHandler.mouseStop(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected getMouseDelay(): number {\n        return this.options.startDndDelay ?? 0;\n    }\n\n    private initData(): void {\n        if (this.options.data) {\n            this.doLoadData(this.options.data, null);\n        } else {\n            const dataUrl = this.getDataUrlInfo(null);\n\n            if (dataUrl) {\n                this.doLoadDataFromUrl(null, null, null);\n            } else {\n                this.doLoadData([], null);\n            }\n        }\n    }\n\n    private getDataUrlInfo(node: Node | null): JQuery.AjaxSettings | null {\n        const dataUrl =\n            this.options.dataUrl || (this.element.data(\"url\") as string | null);\n\n        const getUrlFromString = (url: string): JQuery.AjaxSettings => {\n            const urlInfo: JQuery.AjaxSettings = { url };\n\n            setUrlInfoData(urlInfo);\n\n            return urlInfo;\n        };\n\n        const setUrlInfoData = (urlInfo: JQuery.AjaxSettings): void => {\n            if (node?.id) {\n                // Load on demand of a subtree; add node parameter\n                const data = { node: node.id };\n                urlInfo[\"data\"] = data;\n            } else {\n                // Add selected_node parameter\n                const selectedNodeId = this.getNodeIdToBeSelected();\n                if (selectedNodeId) {\n                    const data = { selected_node: selectedNodeId };\n                    urlInfo[\"data\"] = data;\n                }\n            }\n        };\n\n        if (typeof dataUrl === \"function\") {\n            return dataUrl(node);\n        } else if (typeof dataUrl === \"string\") {\n            return getUrlFromString(dataUrl);\n        } else if (dataUrl && typeof dataUrl === \"object\") {\n            setUrlInfoData(dataUrl);\n            return dataUrl;\n        } else {\n            return null;\n        }\n    }\n\n    private getNodeIdToBeSelected(): NodeId | null {\n        if (this.options.saveState) {\n            return this.saveStateHandler.getNodeIdToBeSelected();\n        } else {\n            return null;\n        }\n    }\n\n    private initTree(data: NodeData[]): void {\n        const doInit = (): void => {\n            if (!this.isInitialized) {\n                this.isInitialized = true;\n                this._triggerEvent(\"tree.init\");\n            }\n        };\n\n        if (!this.options.nodeClass) {\n            return;\n        }\n\n        this.tree = new this.options.nodeClass(\n            null,\n            true,\n            this.options.nodeClass,\n        );\n\n        this.selectNodeHandler.clear();\n\n        this.tree.loadFromData(data);\n\n        const mustLoadOnDemand = this.setInitialState();\n\n        this._refreshElements(null);\n\n        if (!mustLoadOnDemand) {\n            doInit();\n        } else {\n            // Load data on demand and then init the tree\n            this.setInitialStateOnDemand(doInit);\n        }\n    }\n\n    // Set initial state, either by restoring the state or auto-opening nodes\n    // result: must load nodes on demand?\n    private setInitialState(): boolean {\n        const restoreState = (): [boolean, boolean] => {\n            // result: is state restored, must load on demand?\n            if (!this.options.saveState) {\n                return [false, false];\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return [false, false];\n                } else {\n                    const mustLoadOnDemand =\n                        this.saveStateHandler.setInitialState(state);\n\n                    // return true: the state is restored\n                    return [true, mustLoadOnDemand];\n                }\n            }\n        };\n\n        const autoOpenNodes = (): boolean => {\n            // result: must load on demand?\n            if (this.options.autoOpen === false) {\n                return false;\n            }\n\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let mustLoadOnDemand = false;\n\n            this.tree.iterate((node: Node, level: number) => {\n                if (node.load_on_demand) {\n                    mustLoadOnDemand = true;\n                    return false;\n                } else if (!node.hasChildren()) {\n                    return false;\n                } else {\n                    node.is_open = true;\n                    return level !== maxLevel;\n                }\n            });\n\n            return mustLoadOnDemand;\n        };\n\n        let [isRestored, mustLoadOnDemand] = restoreState(); // eslint-disable-line prefer-const\n\n        if (!isRestored) {\n            mustLoadOnDemand = autoOpenNodes();\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    // Set the initial state for nodes that are loaded on demand\n    // Call cb_finished when done\n    private setInitialStateOnDemand(cbFinished: () => void): void {\n        const restoreState = (): boolean => {\n            if (!this.options.saveState) {\n                return false;\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return false;\n                } else {\n                    this.saveStateHandler.setInitialStateOnDemand(\n                        state,\n                        cbFinished,\n                    );\n\n                    return true;\n                }\n            }\n        };\n\n        const autoOpenNodes = (): void => {\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let loadingCount = 0;\n\n            const loadAndOpenNode = (node: Node): void => {\n                loadingCount += 1;\n                this._openNode(node, false, () => {\n                    loadingCount -= 1;\n                    openNodes();\n                });\n            };\n\n            const openNodes = (): void => {\n                this.tree.iterate((node: Node, level: number) => {\n                    if (node.load_on_demand) {\n                        if (!node.is_loading) {\n                            loadAndOpenNode(node);\n                        }\n\n                        return false;\n                    } else {\n                        this._openNode(node, false, null);\n\n                        return level !== maxLevel;\n                    }\n                });\n\n                if (loadingCount === 0) {\n                    cbFinished();\n                }\n            };\n\n            openNodes();\n        };\n\n        if (!restoreState()) {\n            autoOpenNodes();\n        }\n    }\n\n    private getAutoOpenMaxLevel(): number {\n        if (this.options.autoOpen === true) {\n            return -1;\n        } else if (typeof this.options.autoOpen === \"number\") {\n            return this.options.autoOpen;\n        } else if (typeof this.options.autoOpen === \"string\") {\n            return parseInt(this.options.autoOpen, 10);\n        } else {\n            return 0;\n        }\n    }\n\n    private handleClick = (\n        e: JQuery.ClickEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget) {\n            if (clickTarget.type === \"button\") {\n                this.toggle(clickTarget.node, this.options.slide);\n\n                e.preventDefault();\n                e.stopPropagation();\n            } else if (clickTarget.type === \"label\") {\n                const node = clickTarget.node;\n                const event = this._triggerEvent(\"tree.click\", {\n                    node,\n                    click_event: e,\n                });\n\n                if (!event.isDefaultPrevented()) {\n                    this.doSelectNode(node);\n                }\n            }\n        }\n    };\n\n    private handleDblclick = (\n        e: JQuery.DoubleClickEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget?.type === \"label\") {\n            this._triggerEvent(\"tree.dblclick\", {\n                node: clickTarget.node,\n                click_event: e,\n            });\n        }\n    };\n\n    private getClickTarget(element: EventTarget): ClickTarget | null {\n        const $target = jQuery(element);\n\n        const $button = $target.closest(\".jqtree-toggler\");\n\n        if ($button.length) {\n            const node = this.getNode($button as JQuery<HTMLElement>);\n\n            if (node) {\n                return {\n                    type: \"button\",\n                    node,\n                };\n            }\n        } else {\n            const $el = $target.closest(\".jqtree-element\");\n            if ($el.length) {\n                const node = this.getNode($el as JQuery<HTMLElement>);\n                if (node) {\n                    return {\n                        type: \"label\",\n                        node,\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    private getNode($element: JQuery<HTMLElement>): null | Node {\n        const $li = $element.closest(\"li.jqtree_common\");\n        if ($li.length === 0) {\n            return null;\n        } else {\n            return $li.data(\"node\") as Node;\n        }\n    }\n\n    private handleContextmenu = (\n        e: JQuery.ContextMenuEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ) => {\n        const $div = jQuery(e.target).closest(\"ul.jqtree-tree .jqtree-element\");\n        if ($div.length) {\n            const node = this.getNode($div);\n            if (node) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                this._triggerEvent(\"tree.contextmenu\", {\n                    node,\n                    click_event: e,\n                });\n                return false;\n            }\n        }\n\n        return null;\n    };\n\n    private saveState(): void {\n        if (this.options.saveState) {\n            this.saveStateHandler.saveState();\n        }\n    }\n\n    private selectCurrentNode(mustSetFocus: boolean): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            const nodeElement = this._getNodeElementForNode(node);\n            if (nodeElement) {\n                nodeElement.select(mustSetFocus);\n            }\n        }\n    }\n\n    private deselectCurrentNode(): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            this.removeFromSelection(node);\n        }\n    }\n\n    private getDefaultClosedIcon(): string {\n        if (this.options.rtl) {\n            // triangle to the left\n            return \"&#x25c0;\";\n        } else {\n            // triangle to the right\n            return \"&#x25ba;\";\n        }\n    }\n\n    private getRtlOption(): boolean {\n        if (this.options.rtl != null) {\n            return this.options.rtl;\n        } else {\n            const dataRtl = this.element.data(\"rtl\") as unknown;\n\n            if (\n                dataRtl !== null &&\n                dataRtl !== false &&\n                dataRtl !== undefined\n            ) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    private doSelectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): void {\n        const saveState = (): void => {\n            if (this.options.saveState) {\n                this.saveStateHandler.saveState();\n            }\n        };\n\n        if (!node) {\n            // Called with empty node -> deselect current node\n            this.deselectCurrentNode();\n            saveState();\n            return;\n        }\n        const defaultOptions = { mustSetFocus: true, mustToggle: true };\n        const selectOptions = { ...defaultOptions, ...(optionsParam || {}) };\n\n        const canSelect = (): boolean => {\n            if (this.options.onCanSelectNode) {\n                return (\n                    this.options.selectable === true &&\n                    this.options.onCanSelectNode(node)\n                );\n            } else {\n                return this.options.selectable === true;\n            }\n        };\n\n        const openParents = (): void => {\n            const parent = node.parent;\n\n            if (parent && parent.parent && !parent.is_open) {\n                this.openNode(parent, false);\n            }\n        };\n\n        if (!canSelect()) {\n            return;\n        }\n\n        if (this.selectNodeHandler.isNodeSelected(node)) {\n            if (selectOptions.mustToggle) {\n                this.deselectCurrentNode();\n                this._triggerEvent(\"tree.select\", {\n                    node: null,\n                    previous_node: node,\n                });\n            }\n        } else {\n            const deselectedNode = this.getSelectedNode() || null;\n            this.deselectCurrentNode();\n            this.addToSelection(node, selectOptions.mustSetFocus);\n\n            this._triggerEvent(\"tree.select\", {\n                node,\n                deselected_node: deselectedNode,\n            });\n            openParents();\n        }\n\n        saveState();\n    }\n\n    private doLoadData(data: NodeData[] | null, parentNode: Node | null): void {\n        if (data) {\n            if (parentNode) {\n                this.deselectNodes(parentNode);\n                this.loadSubtree(data, parentNode);\n            } else {\n                this.initTree(data);\n            }\n\n            if (this.isDragging()) {\n                this.dndHandler.refresh();\n            }\n        }\n\n        this._triggerEvent(\"tree.load_data\", {\n            tree_data: data,\n            parent_node: parentNode,\n        });\n    }\n\n    private deselectNodes(parentNode: Node): void {\n        const selectedNodesUnderParent =\n            this.selectNodeHandler.getSelectedNodesUnder(parentNode);\n        for (const n of selectedNodesUnderParent) {\n            this.selectNodeHandler.removeFromSelection(n);\n        }\n    }\n\n    private loadSubtree(data: NodeData[], parentNode: Node): void {\n        parentNode.loadFromData(data);\n\n        parentNode.load_on_demand = false;\n        parentNode.is_loading = false;\n\n        this._refreshElements(parentNode);\n    }\n\n    private doLoadDataFromUrl(\n        urlInfoParam: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null,\n    ): void {\n        const urlInfo = urlInfoParam || this.getDataUrlInfo(parentNode);\n\n        this.dataLoader.loadFromUrl(urlInfo, parentNode, onFinished);\n    }\n\n    private loadFolderOnDemand(\n        node: Node,\n        slide = true,\n        onFinished: OnFinishOpenNode | null,\n    ): void {\n        node.is_loading = true;\n\n        this.doLoadDataFromUrl(null, node, () => {\n            this._openNode(node, slide, onFinished);\n        });\n    }\n}\n\nSimpleWidget.register(JqTreeWidget, \"tree\");\n"],"names":["isNodeRecordWithChildren","data","Array","Position","positionNames","before","Before","after","After","inside","Inside","none","None","getPositionName","position","name","Object","prototype","hasOwnProperty","call","Node","constructor","nodeData","arguments","length","undefined","isRoot","nodeClass","this","load_on_demand","isEmptyFolder","children","setData","parent","idMapping","Map","tree","o","key","value","loadFromData","removeChildren","childData","node","createNode","addChild","push","setParent","addChildAtPosition","index","splice","removeChild","doRemoveChild","getChildIndex","indexOf","hasChildren","isFolder","iterate","callback","_iterate","level","child","moveNode","movedNode","targetNode","isParentOf","getData","getDataFromNodes","nodes","map","tmpNode","k","v","getNodeByName","getNodeByCallback","getNodeByNameMustExist","n","result","addAfter","nodeInfo","childIndex","loadChildrenFromData","addBefore","addParent","newParent","originalParent","remove","append","prepend","getLevel","getNodeById","nodeId","get","addNodeToIndex","id","set","removeNodeFromIndex","delete","getPreviousSibling","previousIndex","getNextSibling","nextIndex","getNodesByProperty","filter","f","getNextNode","nextSibling","getNextVisibleNode","is_open","getPreviousNode","previousSibling","getLastChild","getParent","getPreviousVisibleNode","lastChild","initFromData","addChildren","childrenData","addNode","getNodeClass","DragAndDropHandler","treeWidget","hoveredArea","hitAreas","isDragging","currentItem","mouseCapture","positionInfo","$element","jQuery","target","mustCaptureElement","options","onIsMoveHandle","nodeElement","_getNodeElement","onCanMove","mouseStart","pageX","pageY","refresh","offset","left","top","dragElement","DragElement","element","autoEscape","addClass","mouseDrag","move","area","findHoveredArea","canMoveToArea","stopOpenFolderTimer","mustOpenFolderTimer","startOpenFolderTimer","updateDropHint","removeDropHint","onDragMove","originalEvent","mouseStop","moveItem","clear","removeHover","removeHitAreas","removeClass","onDragStop","generateHitAreas","_getNodeElementForNode","hitAreasGenerator","HitAreasGenerator","getTreeDimensions","bottom","generate","is","onCanMoveTo","positionName","previousGhost","x","y","dimensions","right","low","high","mid","addDropHint","folder","openFolder","_openNode","slide","openFolderDelay","openFolderTimer","window","setTimeout","clearTimeout","previousParent","doMove","empty","_refreshElements","_triggerEvent","move_info","moved_node","target_node","previous_parent","do_move","original_event","isDefaultPrevented","el","width","height","_getScrollLeft","VisibleNodeIterator","isFirstNode","_iterateNode","nextNode","mustIterateInside","handleFirstNode","handleOpenFolder","handleClosedFolder","handleNode","childrenLength","forEach","_","i","nextChild","handleAfterOpenFolder","currentNode","treeBottom","super","positions","lastTop","previousTop","group","generateHitAreasForGroup","getTop","addPosition","positionsInGroup","positionCount","Math","min","areaHeight","round","areaTop","nodeName","offsetX","offsetY","$tree","text","html","css","getBoolString","ElementsRenderer","openedIconElement","createButtonElement","openedIcon","closedIconElement","closedIcon","render","fromNode","renderFromNode","renderFromRoot","createDomElements","$previousLi","li","createLi","attachNodeData","isRootNode","ul","createUl","appendChild","classString","role","rtl","dragAndDrop","document","createElement","className","setAttribute","isSelected","Boolean","selectNodeHandler","isNodeSelected","showEmptyFolder","createFolderLi","createNodeLi","onCreateLi","setTreeItemAriaAttributes","buttonClasses","getButtonClasses","folderClasses","getFolderClasses","iconElement","div","buttonLink","cloneNode","buttonLeft","titleSpan","createTitleSpan","liClasses","join","classes","tabIndex","textContent","innerHTML","is_loading","createTextNode","DataLoader","loadFromUrl","urlInfo","parentNode","onFinished","$el","getDomElement","addLoadingClass","notifyLoading","stopLoading","removeLoadingClass","submitRequest","loadData","parseData","jqXHR","onLoadFailed","isLoading","onLoading","urlInfoInput","handleSuccess","handleError","ajaxSettings","method","cache","dataType","success","error","url","toUpperCase","ajax","dataFilter","parsedData","JSON","parse","KeyHandler","static","keyboardSupport","on","handleKeyDown","deinit","off","moveDown","selectedNode","selectNode","moveUp","moveRight","openNode","moveLeft","closeNode","e","canHandleKeyboard","getSelectedNode","which","DOWN","UP","RIGHT","LEFT","isFocusOnTree","register","widgetClass","widgetName","getDataKey","getWidgetData","dataKey","widget","SimpleWidget","createWidget","init","fn","argument1","functionName","destroy","removeData","destroyWidget","_len","args","_key","callFunction","widgetFunction","apply","defaults","getPositionInfoFromMouseEvent","getPositionInfoFromTouch","touch","MouseWidget","addEventListener","mouseDown","passive","touchStart","isMouseStarted","mouseDelayTimer","isMouseDelayMet","mouseDownInfo","removeEventListener","removeMouseMoveEventListeners","button","handleMouseDown","cancelable","preventDefault","handleMouseUp","handleStartMouse","mouseMove","touchMove","mouseUp","touchEnd","mouseDelay","getMouseDelay","startMouseDelayTimer","handleMouseMove","touches","changedTouches","SaveStateHandler","saveState","state","stringify","getState","onSetStateFromStorage","supportsLocalStorage","localStorage","setItem","getKeyName","getStateFromStorage","jsonData","loadFromStorage","parseState","open_nodes","getOpenNodeIds","openNodes","selected_node","getSelectedNodeIds","selectedNodeIds","getSelectedNodes","setInitialState","mustLoadOnDemand","openInitialNodes","resetSelection","selectInitialNodes","setInitialStateOnDemand","cbFinished","doSetInitialStateOnDemand","getNodeIdToBeSelected","onGetStateFromStorage","getItem","nodeIds","selectCount","addToSelection","removeFromSelection","nodeIdsParam","selectedNodes","loadingCount","newNodesIds","loadAndOpenNode","_supportsLocalStorage","testSupport","sessionStorage","removeItem","ContainerScrollParent","_ref","$container","refreshHitAreas","checkHorizontalScrolling","newHorizontalScrollDirection","getNewHorizontalScrollDirection","horizontalScrollDirection","horizontalScrollTimeout","verticalScrollTimeout","scrollHorizontally","bind","checkVerticalScrolling","newVerticalScrollDirection","getNewVerticalScrollDirection","verticalScrollDirection","scrollVertically","getScrollLeft","scrollLeft","scrollToY","scrollTop","stopScrolling","scrollParentTop","scrollParentBottom","scrollParentOffset","container","rightEdge","clientWidth","leftEdge","getScrollParentTop","getScrollParentBottom","distance","scrollBy","behavior","innerHeight","DocumentScrollParent","documentElement","treeTop","documentScrollHeight","documentScrollWidth","isNearLeftEdge","canScrollRight","getDocumentScrollWidth","canScrollDown","clientHeight","getDocumentScrollHeight","scrollHeight","scrollWidth","hasOverFlow","attr","overflowValue","createScrollParent","$treeElement","parents","getParentWithOverflow","tagName","ScrollHandler","scrollParent","checkScrolling","getScrollParent","SelectNodeHandler","Set","selectedSingleNode","getSelectedNodesUnder","has","includeChildren","add","activeElement","_containsElement","NodeElement","mustShowBorderDropHint","BorderDropHint","GhostDropHint","select","mustSetFocus","getLi","$span","getSpan","trigger","deselect","removeAttr","getUl","find","FolderElement","open","animationSpeed","$button","getButton","buttonEl","renderer","icon","doOpen","slideDown","show","close","doClose","slideUp","hide","$div","elWidth","max","elHeight","outerHeight","$hint","$ghost","moveAfter","moveBefore","moveInsideOpenFolder","moveInside","childElement","NODE_PARAM_IS_EMPTY","PARAM_IS_EMPTY","JqTreeWidget","autoOpen","dataUrl","onCanSelectNode","selectable","startDndDelay","useContextMenu","toggle","slideParam","Error","getTree","optionsParam","doSelectNode","toJson","doLoadData","loadDataFromUrl","param1","param2","param3","doLoadDataFromUrl","reload","getNodeByHtmlElement","getNode","parseParams","dndHandler","addNodeAfter","newNodeInfo","existingNode","newNode","addNodeBefore","addParentNode","removeNode","appendNode","parentNodeParam","prependNode","updateNode","idIsChanged","isSelectedNodeInSubtree","subtree","positionIndex","saveStateHandler","scrollToNode","scrollHandler","setState","setOption","option","keyHandler","getVersion","eventName","values","event","Event","doOpenNode","_node","_slide","_onFinished","loadFolderOnDemand","mustSelect","selectCurrentNode","isInitialized","getRtlOption","getDefaultClosedIcon","dataLoader","initData","handleClick","handleDblclick","handleContextmenu","getDataUrlInfo","setUrlInfoData","selectedNodeId","getUrlFromString","initTree","doInit","autoOpenNodes","maxLevel","getAutoOpenMaxLevel","isRestored","restoreState","parseInt","clickTarget","getClickTarget","type","stopPropagation","click_event","$target","closest","$li","deselectCurrentNode","dataRtl","selectOptions","mustToggle","openParents","canSelect","previous_node","deselectedNode","deselected_node","deselectNodes","loadSubtree","tree_data","parent_node","selectedNodesUnderParent","urlInfoParam"],"mappings":"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"}