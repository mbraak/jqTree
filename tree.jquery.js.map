{"version":3,"file":"tree.jquery.js","sources":["src/dataLoader.ts","src/position.ts","src/util.ts","src/dragAndDropHandler/dragElement.ts","src/dragAndDropHandler/iterateVisibleNodes.ts","src/dragAndDropHandler/generateHitAreas.ts","src/dragAndDropHandler/index.ts","src/dragAndDropHandler/binarySearch.ts","src/elementsRenderer.ts","src/keyHandler.ts","src/mouseUtils.ts","src/mouseHandler.ts","src/nodeUtils.ts","src/node.ts","src/nodeElement/borderDropHint.ts","src/nodeElement/ghostDropHint.ts","src/nodeElement/index.ts","src/nodeElement/folderElement.ts","src/saveStateHandler.ts","src/scrollHandler/containerScrollParent.ts","src/scrollHandler/documentScrollParent.ts","src/scrollHandler/createScrollParent.ts","src/scrollHandler.ts","src/selectNodeHandler.ts","src/simple.widget.ts","src/version.ts","src/tree.jquery.ts"],"sourcesContent":["import { LoadData, TriggerEvent } from \"./jqtreeMethodTypes\";\nimport { DataFilter, OnLoadFailed, OnLoading } from \"./jqtreeOptions\";\nimport { Node } from \"./node\";\n\nexport type HandleFinishedLoading = () => void;\n\ninterface DataLoaderParams {\n    dataFilter?: DataFilter;\n    loadData: LoadData;\n    onLoadFailed?: OnLoadFailed;\n    onLoading?: OnLoading;\n    treeElement: HTMLElement;\n    triggerEvent: TriggerEvent;\n}\n\nexport default class DataLoader {\n    private dataFilter?: DataFilter;\n    private loadData: LoadData;\n    private onLoadFailed?: OnLoadFailed;\n    private onLoading?: OnLoading;\n    private treeElement: HTMLElement;\n    private triggerEvent: TriggerEvent;\n\n    constructor({\n        dataFilter,\n        loadData,\n        onLoadFailed,\n        onLoading,\n        treeElement,\n        triggerEvent,\n    }: DataLoaderParams) {\n        this.dataFilter = dataFilter;\n        this.loadData = loadData;\n        this.onLoadFailed = onLoadFailed;\n        this.onLoading = onLoading;\n        this.treeElement = treeElement;\n        this.triggerEvent = triggerEvent;\n    }\n\n    public loadFromUrl(\n        urlInfo: JQuery.AjaxSettings | null | string,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null,\n    ): void {\n        if (!urlInfo) {\n            return;\n        }\n\n        const element = this.getDomElement(parentNode);\n        this.addLoadingClass(element);\n        this.notifyLoading(true, parentNode, element);\n\n        const stopLoading = (): void => {\n            this.removeLoadingClass(element);\n            this.notifyLoading(false, parentNode, element);\n        };\n\n        const handleSuccess = (data: NodeData[] | string): void => {\n            stopLoading();\n            this.loadData(this.parseData(data), parentNode);\n\n            if (onFinished && typeof onFinished === \"function\") {\n                onFinished();\n            }\n        };\n\n        const handleError = (jqXHR: JQuery.jqXHR): void => {\n            stopLoading();\n\n            if (this.onLoadFailed) {\n                this.onLoadFailed(jqXHR);\n            }\n        };\n\n        this.submitRequest(urlInfo, handleSuccess, handleError);\n    }\n\n    private addLoadingClass(element: HTMLElement): void {\n        element.classList.add(\"jqtree-loading\");\n    }\n\n    private getDomElement(parentNode: Node | null): HTMLElement {\n        if (parentNode?.element) {\n            return parentNode.element;\n        } else {\n            return this.treeElement;\n        }\n    }\n\n    private notifyLoading(\n        isLoading: boolean,\n        node: Node | null,\n        element: HTMLElement,\n    ): void {\n        const $el = jQuery(element);\n\n        if (this.onLoading) {\n            this.onLoading(isLoading, node, $el);\n        }\n\n        this.triggerEvent(\"tree.loading_data\", {\n            $el,\n            isLoading,\n            node,\n        });\n    }\n\n    private parseData(data: NodeData[] | string): NodeData[] {\n        const getParsedData = () => {\n            if (typeof data === \"string\") {\n                return JSON.parse(data) as NodeData[];\n            } else {\n                return data;\n            }\n        };\n\n        const parsedData = getParsedData();\n\n        if (this.dataFilter) {\n            return this.dataFilter(parsedData);\n        } else {\n            return parsedData;\n        }\n    }\n\n    private removeLoadingClass(element: HTMLElement): void {\n        element.classList.remove(\"jqtree-loading\");\n    }\n\n    private submitRequest(\n        urlInfoInput: JQuery.AjaxSettings | string,\n        handleSuccess: JQuery.Ajax.SuccessCallback<any>,\n        handleError: JQuery.Ajax.ErrorCallback<any>,\n    ): void {\n        const urlInfo =\n            typeof urlInfoInput === \"string\"\n                ? { url: urlInfoInput }\n                : urlInfoInput;\n\n        const ajaxSettings: JQuery.AjaxSettings = {\n            cache: false,\n            dataType: \"json\",\n            error: handleError,\n            method: \"GET\",\n            success: handleSuccess,\n            ...urlInfo,\n        };\n\n        ajaxSettings.method = ajaxSettings.method?.toUpperCase() ?? \"GET\";\n\n        void jQuery.ajax(ajaxSettings);\n    }\n}\n","export enum Position {\n    Before = 1,\n    After,\n    Inside,\n    None,\n}\n\nconst positionNames: Record<string, Position> = {\n    after: Position.After,\n    before: Position.Before,\n    inside: Position.Inside,\n    none: Position.None,\n};\n\nexport const getPositionName = (position: Position): string => {\n    for (const name in positionNames) {\n        if (Object.prototype.hasOwnProperty.call(positionNames, name)) {\n            if (positionNames[name] === position) {\n                return name;\n            }\n        }\n    }\n\n    return \"\";\n};\n\nexport const getPosition = (name: string): Position | undefined =>\n    positionNames[name];\n","export const isInt = (n: unknown): boolean =>\n    typeof n === \"number\" && n % 1 === 0;\n\nexport const isFunction = (v: unknown): boolean => typeof v === \"function\";\n\nexport const getBoolString = (value: unknown): string =>\n    value ? \"true\" : \"false\";\n\nexport const getOffsetTop = (element: HTMLElement) =>\n    getElementPosition(element).top;\n\nexport const getElementPosition = (element: HTMLElement) => {\n    const rect = element.getBoundingClientRect();\n\n    return {\n        left: rect.x + window.scrollX,\n        top: rect.y + window.scrollY,\n    };\n};\n","interface DragElementParams {\n    autoEscape: boolean;\n    nodeName: string;\n    offsetX: number;\n    offsetY: number;\n    treeElement: HTMLElement;\n}\n\nclass DragElement {\n    private element: HTMLElement;\n    private offsetX: number;\n    private offsetY: number;\n\n    constructor({\n        autoEscape,\n        nodeName,\n        offsetX,\n        offsetY,\n        treeElement,\n    }: DragElementParams) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n\n        this.element = this.createElement(nodeName, autoEscape);\n\n        treeElement.appendChild(this.element);\n    }\n\n    public move(pageX: number, pageY: number): void {\n        this.element.style.left = `${pageX - this.offsetX}px`;\n        this.element.style.top = `${pageY - this.offsetY}px`;\n    }\n\n    public remove(): void {\n        this.element.remove();\n    }\n\n    private createElement(nodeName: string, autoEscape: boolean) {\n        const element = document.createElement(\"span\");\n        element.classList.add(\"jqtree-title\", \"jqtree-dragging\");\n\n        if (autoEscape) {\n            element.textContent = nodeName;\n        } else {\n            element.innerHTML = nodeName;\n        }\n\n        element.style.position = \"absolute\";\n\n        return element;\n    }\n}\n\nexport default DragElement;\n","import { Node } from \"../node\";\n\ninterface Options {\n    handleAfterOpenFolder: (node: Node, nextNode: Node | null) => void;\n    handleClosedFolder: (\n        node: Node,\n        nextNode: Node | null,\n        element: HTMLElement,\n    ) => void;\n    handleFirstNode: (node: Node) => void;\n    handleNode: (\n        node: Node,\n        nextNode: Node | null,\n        element: HTMLElement,\n    ) => void;\n\n    /*\n    override\n    return\n        - true: continue iterating\n        - false: stop iterating\n    */\n    handleOpenFolder: (node: Node, element: HTMLElement) => boolean;\n}\n\nconst iterateVisibleNodes = (\n    tree: Node,\n    {\n        handleAfterOpenFolder,\n        handleClosedFolder,\n        handleFirstNode,\n        handleNode,\n        handleOpenFolder,\n    }: Options,\n) => {\n    let isFirstNode = true;\n\n    const iterate = (node: Node, nextNode: Node | null): void => {\n        let mustIterateInside =\n            (node.is_open || !node.element) && node.hasChildren();\n\n        let element: HTMLElement | null = null;\n\n        // Is the element visible?\n        if (node.element?.offsetParent) {\n            element = node.element;\n\n            if (isFirstNode) {\n                handleFirstNode(node);\n                isFirstNode = false;\n            }\n\n            if (!node.hasChildren()) {\n                handleNode(node, nextNode, node.element);\n            } else if (node.is_open) {\n                if (!handleOpenFolder(node, node.element)) {\n                    mustIterateInside = false;\n                }\n            } else {\n                handleClosedFolder(node, nextNode, element);\n            }\n        }\n\n        if (mustIterateInside) {\n            const childrenLength = node.children.length;\n            node.children.forEach((_, i) => {\n                const child = node.children[i];\n\n                if (child) {\n                    if (i === childrenLength - 1) {\n                        iterate(child, null);\n                    } else {\n                        const nextChild = node.children[i + 1];\n\n                        if (nextChild) {\n                            iterate(child, nextChild);\n                        }\n                    }\n                }\n            });\n\n            if (node.is_open && element) {\n                handleAfterOpenFolder(node, nextNode);\n            }\n        }\n    };\n\n    iterate(tree, null);\n};\n\nexport default iterateVisibleNodes;\n","import { Node } from \"../node\";\nimport { Position } from \"../position\";\nimport { getOffsetTop } from \"../util\";\nimport iterateVisibleNodes from \"./iterateVisibleNodes\";\nimport { HitArea } from \"./types\";\n\ninterface HitPosition {\n    node: Node;\n    position: Position;\n    top: number;\n}\n\nexport const generateHitPositions = (\n    tree: Node,\n    currentNode: Node,\n): HitPosition[] => {\n    const hitPositions: HitPosition[] = [];\n    let lastTop = 0;\n\n    const addHitPosition = (node: Node, position: number, top: number) => {\n        hitPositions.push({\n            node,\n            position,\n            top,\n        });\n        lastTop = top;\n    };\n\n    const handleAfterOpenFolder = (node: Node, nextNode: Node | null) => {\n        if (node === currentNode || nextNode === currentNode) {\n            // Cannot move before or after current item\n            addHitPosition(node, Position.None, lastTop);\n        } else {\n            addHitPosition(node, Position.After, lastTop);\n        }\n    };\n\n    const handleClosedFolder = (\n        node: Node,\n        nextNode: Node | null,\n        element: HTMLElement,\n    ) => {\n        const top = getOffsetTop(element);\n\n        if (node === currentNode) {\n            // Cannot move after current item\n            addHitPosition(node, Position.None, top);\n        } else {\n            addHitPosition(node, Position.Inside, top);\n\n            // Cannot move before current item\n            if (nextNode !== currentNode) {\n                addHitPosition(node, Position.After, top);\n            }\n        }\n    };\n\n    const handleFirstNode = (node: Node) => {\n        if (node !== currentNode && node.element) {\n            addHitPosition(node, Position.Before, getOffsetTop(node.element));\n        }\n    };\n\n    const handleNode = (\n        node: Node,\n        nextNode: Node | null,\n        element: HTMLElement,\n    ) => {\n        const top = getOffsetTop(element);\n\n        if (node === currentNode) {\n            // Cannot move inside current item\n            addHitPosition(node, Position.None, top);\n        } else {\n            addHitPosition(node, Position.Inside, top);\n        }\n\n        if (nextNode === currentNode || node === currentNode) {\n            // Cannot move before or after current item\n            addHitPosition(node, Position.None, top);\n        } else {\n            addHitPosition(node, Position.After, top);\n        }\n    };\n\n    const handleOpenFolder = (node: Node, element: HTMLElement) => {\n        if (node === currentNode) {\n            // Cannot move inside current item\n\n            // Dnd over the current element is not possible: add a position with type None for the top and the bottom.\n            const top = getOffsetTop(element);\n            const height = element.clientHeight;\n            addHitPosition(node, Position.None, top);\n\n            if (height > 5) {\n                // Subtract 5 pixels to allow more space for the next element.\n                addHitPosition(node, Position.None, top + height - 5);\n            }\n\n            // Stop iterating\n            return false;\n        }\n\n        // Cannot move before current item\n        if (node.children[0] !== currentNode) {\n            addHitPosition(node, Position.Inside, getOffsetTop(element));\n        }\n\n        // Continue iterating\n        return true;\n    };\n\n    iterateVisibleNodes(tree, {\n        handleAfterOpenFolder,\n        handleClosedFolder,\n        handleFirstNode,\n        handleNode,\n        handleOpenFolder,\n    });\n\n    return hitPositions;\n};\n\nexport const generateHitAreasForGroup = (\n    hitAreas: HitArea[],\n    positionsInGroup: HitPosition[],\n    top: number,\n    bottom: number,\n) => {\n    // limit positions in group\n    const positionCount = Math.min(positionsInGroup.length, 4);\n\n    const areaHeight = Math.round((bottom - top) / positionCount);\n    let areaTop = top;\n\n    for (let i = 0; i < positionCount; i++) {\n        const position = positionsInGroup[i] as HitPosition;\n\n        if (position.position !== Position.None) {\n            hitAreas.push({\n                bottom: areaTop + areaHeight,\n                node: position.node,\n                position: position.position,\n                top: areaTop,\n            });\n        }\n\n        areaTop += areaHeight;\n    }\n};\n\nexport const generateHitAreasFromPositions = (\n    hitPositions: HitPosition[],\n    treeBottom: number,\n): HitArea[] => {\n    if (!hitPositions.length) {\n        return [];\n    }\n\n    let previousTop = (hitPositions[0] as HitPosition).top;\n    let group: HitPosition[] = [];\n    const hitAreas: HitArea[] = [];\n\n    for (const position of hitPositions) {\n        if (position.top !== previousTop && group.length) {\n            generateHitAreasForGroup(\n                hitAreas,\n                group,\n                previousTop,\n                position.top,\n            );\n\n            previousTop = position.top;\n            group = [];\n        }\n\n        group.push(position);\n    }\n\n    generateHitAreasForGroup(hitAreas, group, previousTop, treeBottom);\n\n    return hitAreas;\n};\n\nconst generateHitAreas = (tree: Node, currentNode: Node, treeBottom: number) =>\n    generateHitAreasFromPositions(\n        generateHitPositions(tree, currentNode),\n        treeBottom,\n    );\n\nexport default generateHitAreas;\n","import {\n    GetScrollLeft,\n    GetTree,\n    OpenNode,\n    RefreshElements,\n    TriggerEvent,\n} from \"../jqtreeMethodTypes\";\nimport {\n    DragMethod,\n    OnCanMove,\n    OnCanMoveTo,\n    OnIsMoveHandle,\n} from \"../jqtreeOptions\";\nimport { PositionInfo } from \"../mouseUtils\";\nimport { Node } from \"../node\";\nimport NodeElement from \"../nodeElement\";\nimport { getPositionName, Position } from \"../position\";\nimport { getElementPosition } from \"../util\";\nimport binarySearch from \"./binarySearch\";\nimport DragElement from \"./dragElement\";\nimport generateHitAreas from \"./generateHitAreas\";\nimport { DropHint, HitArea } from \"./types\";\n\ninterface Dimensions {\n    bottom: number;\n    left: number;\n    right: number;\n    top: number;\n}\n\ninterface DragAndDropHandlerParams {\n    autoEscape?: boolean;\n    getNodeElement: GetNodeElement;\n    getNodeElementForNode: GetNodeElementForNode;\n    getScrollLeft: GetScrollLeft;\n    getTree: GetTree;\n    onCanMove?: OnCanMove;\n    onCanMoveTo?: OnCanMoveTo;\n    onDragMove?: DragMethod;\n    onDragStop?: DragMethod;\n    onIsMoveHandle?: OnIsMoveHandle;\n    openFolderDelay: false | number;\n    openNode: OpenNode;\n    refreshElements: RefreshElements;\n    slide: boolean;\n    treeElement: HTMLElement;\n    triggerEvent: TriggerEvent;\n}\ntype GetNodeElement = (element: HTMLElement) => NodeElement | null;\n\ntype GetNodeElementForNode = (node: Node) => NodeElement;\n\nexport class DragAndDropHandler {\n    public currentItem: NodeElement | null;\n    public hitAreas: HitArea[];\n    public hoveredArea: HitArea | null;\n    public isDragging: boolean;\n\n    private autoEscape?: boolean;\n    private dragElement: DragElement | null;\n    private getNodeElement: GetNodeElement;\n    private getNodeElementForNode: GetNodeElementForNode;\n    private getScrollLeft: GetScrollLeft;\n    private getTree: GetTree;\n    private onCanMove?: OnCanMove;\n    private onCanMoveTo?: OnCanMoveTo;\n    private onDragMove?: DragMethod;\n    private onDragStop?: DragMethod;\n    private onIsMoveHandle?: OnIsMoveHandle;\n    private openFolderDelay: false | number;\n    private openFolderTimer: null | number;\n    private openNode: OpenNode;\n    private previousGhost: DropHint | null;\n    private refreshElements: RefreshElements;\n    private slide: boolean;\n    private treeElement: HTMLElement;\n    private triggerEvent: TriggerEvent;\n\n    constructor({\n        autoEscape,\n        getNodeElement,\n        getNodeElementForNode,\n        getScrollLeft,\n        getTree,\n        onCanMove,\n        onCanMoveTo,\n        onDragMove,\n        onDragStop,\n        onIsMoveHandle,\n        openNode,\n        refreshElements,\n        slide,\n        treeElement,\n        triggerEvent,\n    }: DragAndDropHandlerParams) {\n        this.autoEscape = autoEscape;\n        this.getNodeElement = getNodeElement;\n        this.getNodeElementForNode = getNodeElementForNode;\n        this.getScrollLeft = getScrollLeft;\n        this.getTree = getTree;\n        this.onCanMove = onCanMove;\n        this.onCanMoveTo = onCanMoveTo;\n        this.onDragMove = onDragMove;\n        this.onDragStop = onDragStop;\n        this.onIsMoveHandle = onIsMoveHandle;\n        this.openNode = openNode;\n        this.refreshElements = refreshElements;\n        this.slide = slide;\n        this.treeElement = treeElement;\n        this.triggerEvent = triggerEvent;\n\n        this.hoveredArea = null;\n        this.hitAreas = [];\n        this.isDragging = false;\n        this.currentItem = null;\n    }\n\n    public mouseCapture(positionInfo: PositionInfo): boolean | null {\n        const element = positionInfo.target;\n\n        if (!this.mustCaptureElement(element)) {\n            return null;\n        }\n\n        if (this.onIsMoveHandle && !this.onIsMoveHandle(jQuery(element))) {\n            return null;\n        }\n\n        let nodeElement = this.getNodeElement(element);\n\n        if (nodeElement && this.onCanMove) {\n            if (!this.onCanMove(nodeElement.node)) {\n                nodeElement = null;\n            }\n        }\n\n        this.currentItem = nodeElement;\n        return this.currentItem != null;\n    }\n\n    public mouseDrag(positionInfo: PositionInfo): boolean {\n        if (!this.currentItem || !this.dragElement) {\n            return false;\n        }\n\n        this.dragElement.move(positionInfo.pageX, positionInfo.pageY);\n\n        const area = this.findHoveredArea(\n            positionInfo.pageX,\n            positionInfo.pageY,\n        );\n\n        if (area && this.canMoveToArea(area, this.currentItem)) {\n            if (!area.node.isFolder()) {\n                this.stopOpenFolderTimer();\n            }\n\n            if (this.hoveredArea !== area) {\n                this.hoveredArea = area;\n\n                // If this is a closed folder, start timer to open it\n                if (this.mustOpenFolderTimer(area)) {\n                    this.startOpenFolderTimer(area.node);\n                } else {\n                    this.stopOpenFolderTimer();\n                }\n\n                this.updateDropHint();\n            }\n        } else {\n            this.removeDropHint();\n            this.stopOpenFolderTimer();\n            this.hoveredArea = area;\n        }\n\n        if (!area) {\n            if (this.onDragMove) {\n                this.onDragMove(\n                    this.currentItem.node,\n                    positionInfo.originalEvent,\n                );\n            }\n        }\n\n        return true;\n    }\n\n    public mouseStart(positionInfo: PositionInfo): boolean {\n        if (!this.currentItem) {\n            return false;\n        }\n\n        this.refresh();\n\n        const { left, top } = getElementPosition(positionInfo.target);\n\n        const node = this.currentItem.node;\n\n        this.dragElement = new DragElement({\n            autoEscape: this.autoEscape ?? true,\n            nodeName: node.name,\n            offsetX: positionInfo.pageX - left,\n            offsetY: positionInfo.pageY - top,\n            treeElement: this.treeElement,\n        });\n\n        this.isDragging = true;\n        this.currentItem.element.classList.add(\"jqtree-moving\");\n\n        return true;\n    }\n\n    public mouseStop(positionInfo: PositionInfo): boolean {\n        this.moveItem(positionInfo);\n        this.clear();\n        this.removeHover();\n        this.removeDropHint();\n        this.removeHitAreas();\n\n        const currentItem = this.currentItem;\n\n        if (this.currentItem) {\n            this.currentItem.element.classList.remove(\"jqtree-moving\");\n            this.currentItem = null;\n        }\n\n        this.isDragging = false;\n\n        if (!this.hoveredArea && currentItem) {\n            if (this.onDragStop) {\n                this.onDragStop(currentItem.node, positionInfo.originalEvent);\n            }\n        }\n\n        return false;\n    }\n\n    public refresh(): void {\n        this.removeHitAreas();\n\n        if (this.currentItem) {\n            const currentNode = this.currentItem.node;\n            this.generateHitAreas(currentNode);\n            this.currentItem = this.getNodeElementForNode(currentNode);\n\n            if (this.isDragging) {\n                this.currentItem.element.classList.add(\"jqtree-moving\");\n            }\n        }\n    }\n\n    private canMoveToArea(area: HitArea, currentItem: NodeElement): boolean {\n        if (!this.onCanMoveTo) {\n            return true;\n        }\n\n        const positionName = getPositionName(area.position);\n\n        return this.onCanMoveTo(currentItem.node, area.node, positionName);\n    }\n\n    private clear(): void {\n        if (this.dragElement) {\n            this.dragElement.remove();\n            this.dragElement = null;\n        }\n    }\n\n    private findHoveredArea(x: number, y: number): HitArea | null {\n        const dimensions = this.getTreeDimensions();\n\n        if (\n            x < dimensions.left ||\n            y < dimensions.top ||\n            x > dimensions.right ||\n            y > dimensions.bottom\n        ) {\n            return null;\n        }\n\n        return binarySearch<HitArea>(this.hitAreas, (area) => {\n            if (y < area.top) {\n                return 1;\n            } else if (y > area.bottom) {\n                return -1;\n            } else {\n                return 0;\n            }\n        });\n    }\n\n    private generateHitAreas(currentNode: Node): void {\n        const tree = this.getTree();\n\n        if (!tree) {\n            this.hitAreas = [];\n        } else {\n            this.hitAreas = generateHitAreas(\n                tree,\n                currentNode,\n                this.getTreeDimensions().bottom,\n            );\n        }\n    }\n\n    private getTreeDimensions(): Dimensions {\n        // Return the dimensions of the tree. Add a margin to the bottom to allow\n        // to drag-and-drop after the last element.\n        const treePosition = getElementPosition(this.treeElement);\n        const left = treePosition.left + this.getScrollLeft();\n        const top = treePosition.top;\n\n        return {\n            bottom: top + this.treeElement.clientHeight + 16,\n            left,\n            right: left + this.treeElement.clientWidth,\n            top,\n        };\n    }\n\n    /* Move the dragged node to the selected position in the tree. */\n    private moveItem(positionInfo: PositionInfo): void {\n        if (\n            this.currentItem &&\n            this.hoveredArea &&\n            this.hoveredArea.position !== Position.None &&\n            this.canMoveToArea(this.hoveredArea, this.currentItem)\n        ) {\n            const movedNode = this.currentItem.node;\n            const targetNode = this.hoveredArea.node;\n            const position = this.hoveredArea.position;\n            const previousParent = movedNode.parent;\n\n            if (position === Position.Inside) {\n                this.hoveredArea.node.is_open = true;\n            }\n\n            const doMove = (): void => {\n                const tree = this.getTree();\n\n                if (tree) {\n                    tree.moveNode(movedNode, targetNode, position);\n\n                    this.treeElement.textContent = \"\";\n                    this.refreshElements(null);\n                }\n            };\n\n            const event = this.triggerEvent(\"tree.move\", {\n                move_info: {\n                    do_move: doMove,\n                    moved_node: movedNode,\n                    original_event: positionInfo.originalEvent,\n                    position: getPositionName(position),\n                    previous_parent: previousParent,\n                    target_node: targetNode,\n                },\n            });\n\n            if (!event.isDefaultPrevented()) {\n                doMove();\n            }\n        }\n    }\n\n    private mustCaptureElement(element: HTMLElement): boolean {\n        const nodeName = element.nodeName;\n\n        return (\n            nodeName !== \"INPUT\" &&\n            nodeName !== \"SELECT\" &&\n            nodeName !== \"TEXTAREA\"\n        );\n    }\n\n    private mustOpenFolderTimer(area: HitArea): boolean {\n        const node = area.node;\n\n        return (\n            node.isFolder() &&\n            !node.is_open &&\n            area.position === Position.Inside\n        );\n    }\n\n    private removeDropHint(): void {\n        if (this.previousGhost) {\n            this.previousGhost.remove();\n        }\n    }\n\n    private removeHitAreas(): void {\n        this.hitAreas = [];\n    }\n\n    private removeHover(): void {\n        this.hoveredArea = null;\n    }\n\n    private startOpenFolderTimer(folder: Node): void {\n        const openFolder = (): void => {\n            this.openNode(folder, this.slide, () => {\n                this.refresh();\n                this.updateDropHint();\n            });\n        };\n\n        this.stopOpenFolderTimer();\n\n        const openFolderDelay = this.openFolderDelay;\n\n        if (openFolderDelay !== false) {\n            this.openFolderTimer = window.setTimeout(\n                openFolder,\n                openFolderDelay,\n            );\n        }\n    }\n\n    private stopOpenFolderTimer(): void {\n        if (this.openFolderTimer) {\n            clearTimeout(this.openFolderTimer);\n            this.openFolderTimer = null;\n        }\n    }\n\n    private updateDropHint(): void {\n        if (!this.hoveredArea) {\n            return;\n        }\n\n        // remove previous drop hint\n        this.removeDropHint();\n\n        // add new drop hint\n        const nodeElement = this.getNodeElementForNode(this.hoveredArea.node);\n        this.previousGhost = nodeElement.addDropHint(this.hoveredArea.position);\n    }\n}\n","function binarySearch<T>(items: T[], compareFn: (a: T) => number): null | T {\n    let low = 0;\n    let high = items.length;\n\n    while (low < high) {\n        const mid = (low + high) >> 1;\n        const item = items[mid];\n\n        if (item === undefined) {\n            return null;\n        }\n\n        const compareResult = compareFn(item);\n\n        if (compareResult > 0) {\n            high = mid;\n        } else if (compareResult < 0) {\n            low = mid + 1;\n        } else {\n            return item;\n        }\n    }\n\n    return null;\n}\n\nexport default binarySearch;\n","import { GetTree, IsNodeSelected } from \"./jqtreeMethodTypes\";\nimport { IconElement, OnCreateLi } from \"./jqtreeOptions\";\nimport { Node } from \"./node\";\nimport { getBoolString } from \"./util\";\n\ninterface ElementsRendererParams {\n    $element: JQuery;\n    autoEscape: boolean;\n    buttonLeft: boolean;\n    closedIcon?: IconElement;\n    dragAndDrop: boolean;\n    getTree: GetTree;\n    isNodeSelected: IsNodeSelected;\n    onCreateLi?: OnCreateLi;\n    openedIcon?: IconElement;\n    rtl?: boolean;\n    showEmptyFolder: boolean;\n    tabIndex?: number;\n}\n\nexport default class ElementsRenderer {\n    public closedIconElement?: HTMLElement | Text;\n    public openedIconElement?: HTMLElement | Text;\n    private $element: JQuery;\n    private autoEscape: boolean;\n    private buttonLeft: boolean;\n    private dragAndDrop: boolean;\n    private getTree: GetTree;\n    private isNodeSelected: IsNodeSelected;\n    private onCreateLi?: OnCreateLi;\n    private rtl?: boolean;\n\n    private showEmptyFolder: boolean;\n    private tabIndex?: number;\n\n    constructor({\n        $element,\n        autoEscape,\n        buttonLeft,\n        closedIcon,\n        dragAndDrop,\n        getTree,\n        isNodeSelected,\n        onCreateLi,\n        openedIcon,\n        rtl,\n        showEmptyFolder,\n        tabIndex,\n    }: ElementsRendererParams) {\n        this.autoEscape = autoEscape;\n        this.buttonLeft = buttonLeft;\n        this.dragAndDrop = dragAndDrop;\n        this.$element = $element;\n        this.getTree = getTree;\n        this.isNodeSelected = isNodeSelected;\n        this.onCreateLi = onCreateLi;\n        this.rtl = rtl;\n        this.showEmptyFolder = showEmptyFolder;\n        this.tabIndex = tabIndex;\n        this.openedIconElement = this.createButtonElement(openedIcon ?? \"+\");\n        this.closedIconElement = this.createButtonElement(closedIcon ?? \"-\");\n    }\n\n    public render(fromNode: Node | null): void {\n        if (fromNode?.parent) {\n            this.renderFromNode(fromNode);\n        } else {\n            this.renderFromRoot();\n        }\n    }\n\n    public renderFromNode(node: Node): void {\n        if (!node.element) {\n            return;\n        }\n\n        // remember current li\n        const $previousLi = jQuery(node.element);\n\n        // create element\n        const li = this.createLi(node, node.getLevel());\n\n        // add element to dom\n        $previousLi.after(li);\n\n        // remove previous li\n        $previousLi.remove();\n\n        // create children\n        this.createDomElements(li, node.children, false, node.getLevel() + 1);\n    }\n\n    public renderFromRoot(): void {\n        this.$element.empty();\n\n        const tree = this.getTree();\n\n        if (this.$element[0] && tree) {\n            this.createDomElements(this.$element[0], tree.children, true, 1);\n        }\n    }\n\n    private attachNodeData(node: Node, li: HTMLElement): void {\n        node.element = li;\n        jQuery(li).data(\"node\", node);\n    }\n\n    private createButtonElement(\n        value: IconElement,\n    ): HTMLElement | Text | undefined {\n        if (typeof value === \"string\") {\n            // convert value to html\n            const div = document.createElement(\"div\");\n            div.innerHTML = value;\n\n            return document.createTextNode(div.innerHTML);\n        } else if ((value as HTMLElement).nodeType) {\n            return value as HTMLElement;\n        } else {\n            return jQuery(value)[0];\n        }\n    }\n\n    private createDomElements(\n        element: Element,\n        children: Node[],\n        isRootNode: boolean,\n        level: number,\n    ): void {\n        const ul = this.createUl(isRootNode);\n        element.appendChild(ul);\n\n        for (const child of children) {\n            const li = this.createLi(child, level);\n            ul.appendChild(li);\n\n            if (child.hasChildren()) {\n                this.createDomElements(li, child.children, false, level + 1);\n            }\n        }\n    }\n\n    private createFolderLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const buttonClasses = this.getButtonClasses(node);\n        const folderClasses = this.getFolderClasses(node, isSelected);\n\n        const iconElement = node.is_open\n            ? this.openedIconElement\n            : this.closedIconElement;\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = `jqtree_common ${folderClasses}`;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // button link\n        const buttonLink = document.createElement(\"a\");\n        buttonLink.className = buttonClasses;\n\n        if (iconElement) {\n            buttonLink.appendChild(iconElement.cloneNode(true));\n        }\n\n        if (this.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            true,\n            level,\n        );\n        titleSpan.setAttribute(\"aria-expanded\", getBoolString(node.is_open));\n        div.appendChild(titleSpan);\n\n        if (!this.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        return li;\n    }\n\n    /* Create the <li> element\n     * Attach it to node.element.\n     * Call onCreateLi\n     */\n    private createLi(node: Node, level: number): HTMLLIElement {\n        const isSelected = Boolean(this.isNodeSelected(node));\n\n        const mustShowFolder =\n            node.isFolder() || (node.isEmptyFolder && this.showEmptyFolder);\n\n        const li = mustShowFolder\n            ? this.createFolderLi(node, level, isSelected)\n            : this.createNodeLi(node, level, isSelected);\n\n        this.attachNodeData(node, li);\n\n        if (this.onCreateLi) {\n            this.onCreateLi(node, jQuery(li), isSelected);\n        }\n\n        return li;\n    }\n\n    private createNodeLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const liClasses = [\"jqtree_common\"];\n\n        if (isSelected) {\n            liClasses.push(\"jqtree-selected\");\n        }\n\n        const classString = liClasses.join(\" \");\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = classString;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            false,\n            level,\n        );\n        div.appendChild(titleSpan);\n\n        return li;\n    }\n\n    private createTitleSpan(\n        nodeName: string,\n        isSelected: boolean,\n        isFolder: boolean,\n        level: number,\n    ): HTMLSpanElement {\n        const titleSpan = document.createElement(\"span\");\n\n        let classes = \"jqtree-title jqtree_common\";\n\n        if (isFolder) {\n            classes += \" jqtree-title-folder\";\n        }\n\n        classes += ` jqtree-title-button-${this.buttonLeft ? \"left\" : \"right\"}`;\n\n        titleSpan.className = classes;\n\n        if (isSelected) {\n            const tabIndex = this.tabIndex;\n\n            if (tabIndex !== undefined) {\n                titleSpan.setAttribute(\"tabindex\", `${tabIndex}`);\n            }\n        }\n\n        this.setTreeItemAriaAttributes(titleSpan, nodeName, level, isSelected);\n\n        if (this.autoEscape) {\n            titleSpan.textContent = nodeName;\n        } else {\n            titleSpan.innerHTML = nodeName;\n        }\n\n        return titleSpan;\n    }\n\n    private createUl(isRootNode: boolean): HTMLUListElement {\n        let classString;\n        let role;\n\n        if (!isRootNode) {\n            classString = \"\";\n            role = \"group\";\n        } else {\n            classString = \"jqtree-tree\";\n            role = \"tree\";\n\n            if (this.rtl) {\n                classString += \" jqtree-rtl\";\n            }\n        }\n\n        if (this.dragAndDrop) {\n            classString += \" jqtree-dnd\";\n        }\n\n        const ul = document.createElement(\"ul\");\n        ul.className = `jqtree_common ${classString}`;\n\n        ul.setAttribute(\"role\", role);\n\n        return ul;\n    }\n\n    private getButtonClasses(node: Node): string {\n        const classes = [\"jqtree-toggler\", \"jqtree_common\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (this.buttonLeft) {\n            classes.push(\"jqtree-toggler-left\");\n        } else {\n            classes.push(\"jqtree-toggler-right\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private getFolderClasses(node: Node, isSelected: boolean): string {\n        const classes = [\"jqtree-folder\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (isSelected) {\n            classes.push(\"jqtree-selected\");\n        }\n\n        if (node.is_loading) {\n            classes.push(\"jqtree-loading\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private setTreeItemAriaAttributes(\n        element: HTMLElement,\n        name: string,\n        level: number,\n        isSelected: boolean,\n    ) {\n        element.setAttribute(\"aria-label\", name);\n        element.setAttribute(\"aria-level\", `${level}`);\n        element.setAttribute(\"aria-selected\", getBoolString(isSelected));\n        element.setAttribute(\"role\", \"treeitem\");\n    }\n}\n","import {\n    CloseNode,\n    GetSelectedNode,\n    IsFocusOnTree,\n    OpenNode,\n    SelectNode,\n} from \"./jqtreeMethodTypes\";\nimport { Node } from \"./node\";\n\ninterface KeyHandlerParams {\n    closeNode: CloseNode;\n    getSelectedNode: GetSelectedNode;\n    isFocusOnTree: IsFocusOnTree;\n    keyboardSupport: boolean;\n    openNode: OpenNode;\n    selectNode: SelectNode;\n}\n\nexport default class KeyHandler {\n    private closeNode: CloseNode;\n    private getSelectedNode: GetSelectedNode;\n\n    private isFocusOnTree: IsFocusOnTree;\n\n    private keyboardSupport: boolean;\n    private openNode: OpenNode;\n    private originalSelectNode: SelectNode;\n    constructor({\n        closeNode,\n        getSelectedNode,\n        isFocusOnTree,\n        keyboardSupport,\n        openNode,\n        selectNode,\n    }: KeyHandlerParams) {\n        this.closeNode = closeNode;\n        this.getSelectedNode = getSelectedNode;\n        this.isFocusOnTree = isFocusOnTree;\n        this.keyboardSupport = keyboardSupport;\n        this.openNode = openNode;\n        this.originalSelectNode = selectNode;\n\n        if (keyboardSupport) {\n            document.addEventListener(\"keydown\", this.handleKeyDown);\n        }\n    }\n\n    public deinit(): void {\n        if (this.keyboardSupport) {\n            document.removeEventListener(\"keydown\", this.handleKeyDown);\n        }\n    }\n\n    public moveDown(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getNextVisibleNode());\n    }\n\n    public moveUp(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getPreviousVisibleNode());\n    }\n\n    private canHandleKeyboard(): boolean {\n        return this.keyboardSupport && this.isFocusOnTree();\n    }\n\n    private handleKeyDown = (e: KeyboardEvent): void => {\n        if (!this.canHandleKeyboard()) {\n            return;\n        }\n\n        let isKeyHandled = false;\n\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            switch (e.key) {\n                case \"ArrowDown\":\n                    isKeyHandled = this.moveDown(selectedNode);\n                    break;\n\n                case \"ArrowLeft\":\n                    isKeyHandled = this.moveLeft(selectedNode);\n                    break;\n\n                case \"ArrowRight\":\n                    isKeyHandled = this.moveRight(selectedNode);\n                    break;\n\n                case \"ArrowUp\":\n                    isKeyHandled = this.moveUp(selectedNode);\n                    break;\n            }\n        }\n\n        if (isKeyHandled) {\n            e.preventDefault();\n        }\n    };\n\n    private moveLeft(selectedNode: Node): boolean {\n        if (selectedNode.isFolder() && selectedNode.is_open) {\n            // Left on an open node closes the node\n            this.closeNode(selectedNode);\n            return true;\n        } else {\n            // Left on a closed or end node moves focus to the node's parent\n            return this.selectNode(selectedNode.getParent());\n        }\n    }\n\n    private moveRight(selectedNode: Node): boolean {\n        if (!selectedNode.isFolder()) {\n            return false;\n        } else {\n            // folder node\n            if (selectedNode.is_open) {\n                // Right moves to the first child of an open node\n                return this.selectNode(selectedNode.getNextVisibleNode());\n            } else {\n                // Right expands a closed node\n                this.openNode(selectedNode);\n                return true;\n            }\n        }\n    }\n\n    /* Select the node.\n     * Don't do anything if the node is null.\n     * Result: a different node was selected.\n     */\n    private selectNode(node: Node | null): boolean {\n        if (!node) {\n            return false;\n        } else {\n            this.originalSelectNode(node);\n\n            return true;\n        }\n    }\n}\n","export interface PositionInfo {\n    originalEvent: Event;\n    pageX: number;\n    pageY: number;\n    target: HTMLElement;\n}\n\nexport const getPositionInfoFromMouseEvent = (e: MouseEvent): PositionInfo => ({\n    originalEvent: e,\n    pageX: e.pageX,\n    pageY: e.pageY,\n    target: e.target as HTMLElement,\n});\n\nexport const getPositionInfoFromTouch = (\n    touch: Touch,\n    e: TouchEvent,\n): PositionInfo => ({\n    originalEvent: e,\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    target: touch.target as HTMLElement,\n});\n","import { TriggerEvent } from \"./jqtreeMethodTypes\";\nimport {\n    getPositionInfoFromMouseEvent,\n    getPositionInfoFromTouch,\n    PositionInfo,\n} from \"./mouseUtils\";\nimport { Node } from \"./node\";\n\ninterface ClickTarget {\n    node: Node;\n    type: \"button\" | \"label\";\n}\n\ntype GetNode = (element: HTMLElement) => Node | null;\n\ninterface MouseHandlerParams {\n    element: HTMLElement;\n    getMouseDelay: () => number;\n    getNode: GetNode;\n    onClickButton: (node: Node) => void;\n    onClickTitle: (node: Node) => void;\n    onMouseCapture: (positionInfo: PositionInfo) => boolean | null;\n    onMouseDrag: (positionInfo: PositionInfo) => void;\n    onMouseStart: (positionInfo: PositionInfo) => boolean;\n    onMouseStop: (positionInfo: PositionInfo) => void;\n    triggerEvent: TriggerEvent;\n    useContextMenu: boolean;\n}\n\nclass MouseHandler {\n    private element: HTMLElement;\n    private getMouseDelay: () => number;\n    private getNode: GetNode;\n\n    private isMouseDelayMet: boolean;\n\n    private isMouseStarted: boolean;\n\n    private mouseDelayTimer: null | number;\n\n    private mouseDownInfo: null | PositionInfo;\n    private onClickButton: (node: Node) => void;\n    private onClickTitle: (node: Node) => void;\n\n    private onMouseCapture: (positionInfo: PositionInfo) => boolean | null;\n\n    private onMouseDrag: (positionInfo: PositionInfo) => void;\n\n    private onMouseStart: (positionInfo: PositionInfo) => boolean;\n\n    private onMouseStop: (positionInfo: PositionInfo) => void;\n\n    private triggerEvent: TriggerEvent;\n    private useContextMenu: boolean;\n    constructor({\n        element,\n        getMouseDelay,\n        getNode,\n        onClickButton,\n        onClickTitle,\n        onMouseCapture,\n        onMouseDrag,\n        onMouseStart,\n        onMouseStop,\n        triggerEvent,\n        useContextMenu,\n    }: MouseHandlerParams) {\n        this.element = element;\n        this.getMouseDelay = getMouseDelay;\n        this.getNode = getNode;\n        this.onClickButton = onClickButton;\n        this.onClickTitle = onClickTitle;\n        this.onMouseCapture = onMouseCapture;\n        this.onMouseDrag = onMouseDrag;\n        this.onMouseStart = onMouseStart;\n        this.onMouseStop = onMouseStop;\n        this.triggerEvent = triggerEvent;\n        this.useContextMenu = useContextMenu;\n\n        element.addEventListener(\"click\", this.handleClick);\n        element.addEventListener(\"dblclick\", this.handleDblclick);\n        element.addEventListener(\"mousedown\", this.mouseDown, {\n            passive: false,\n        });\n        element.addEventListener(\"touchstart\", this.touchStart, {\n            passive: false,\n        });\n\n        if (useContextMenu) {\n            element.addEventListener(\"contextmenu\", this.handleContextmenu);\n        }\n\n        this.isMouseStarted = false;\n        this.mouseDelayTimer = null;\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n    }\n    public deinit(): void {\n        this.element.removeEventListener(\"click\", this.handleClick);\n        this.element.removeEventListener(\"dblclick\", this.handleDblclick);\n\n        if (this.useContextMenu) {\n            this.element.removeEventListener(\n                \"contextmenu\",\n                this.handleContextmenu,\n            );\n        }\n\n        this.element.removeEventListener(\"mousedown\", this.mouseDown);\n        this.element.removeEventListener(\"touchstart\", this.touchStart);\n        this.removeMouseMoveEventListeners();\n    }\n    private getClickTarget(element: HTMLElement): ClickTarget | null {\n        const button = element.closest<HTMLElement>(\".jqtree-toggler\");\n\n        if (button) {\n            const node = this.getNode(button);\n\n            if (node) {\n                return {\n                    node,\n                    type: \"button\",\n                };\n            }\n        } else {\n            const jqTreeElement =\n                element.closest<HTMLElement>(\".jqtree-element\");\n\n            if (jqTreeElement) {\n                const node = this.getNode(jqTreeElement);\n                if (node) {\n                    return {\n                        node,\n                        type: \"label\",\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n    private handleClick = (e: MouseEvent): void => {\n        if (!e.target) {\n            return;\n        }\n\n        const clickTarget = this.getClickTarget(e.target as HTMLElement);\n\n        if (!clickTarget) {\n            return;\n        }\n\n        switch (clickTarget.type) {\n            case \"button\":\n                this.onClickButton(clickTarget.node);\n\n                e.preventDefault();\n                e.stopPropagation();\n                break;\n\n            case \"label\": {\n                const event = this.triggerEvent(\"tree.click\", {\n                    click_event: e,\n                    node: clickTarget.node,\n                });\n\n                if (!event.isDefaultPrevented()) {\n                    this.onClickTitle(clickTarget.node);\n                }\n                break;\n            }\n        }\n    };\n\n    private handleContextmenu = (e: MouseEvent) => {\n        if (!e.target) {\n            return;\n        }\n\n        const div = (e.target as HTMLElement).closest<HTMLElement>(\n            \"ul.jqtree-tree .jqtree-element\",\n        );\n\n        if (div) {\n            const node = this.getNode(div);\n            if (node) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                this.triggerEvent(\"tree.contextmenu\", {\n                    click_event: e,\n                    node,\n                });\n                return false;\n            }\n        }\n\n        return null;\n    };\n\n    private handleDblclick = (e: MouseEvent): void => {\n        if (!e.target) {\n            return;\n        }\n\n        const clickTarget = this.getClickTarget(e.target as HTMLElement);\n\n        if (clickTarget?.type === \"label\") {\n            this.triggerEvent(\"tree.dblclick\", {\n                click_event: e,\n                node: clickTarget.node,\n            });\n        }\n    };\n\n    private handleMouseDown(positionInfo: PositionInfo): boolean {\n        // We may have missed mouseup (out of window)\n        if (this.isMouseStarted) {\n            this.handleMouseUp(positionInfo);\n        }\n\n        this.mouseDownInfo = positionInfo;\n\n        if (!this.onMouseCapture(positionInfo)) {\n            return false;\n        }\n\n        this.handleStartMouse();\n\n        return true;\n    }\n\n    private handleMouseMove(\n        e: MouseEvent | TouchEvent,\n        positionInfo: PositionInfo,\n    ): void {\n        if (this.isMouseStarted) {\n            this.onMouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n            return;\n        }\n\n        if (!this.isMouseDelayMet) {\n            return;\n        }\n\n        if (this.mouseDownInfo) {\n            this.isMouseStarted = this.onMouseStart(this.mouseDownInfo);\n        }\n\n        if (this.isMouseStarted) {\n            this.onMouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n        } else {\n            this.handleMouseUp(positionInfo);\n        }\n    }\n    private handleMouseUp(positionInfo: PositionInfo): void {\n        this.removeMouseMoveEventListeners();\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n\n        if (this.isMouseStarted) {\n            this.isMouseStarted = false;\n            this.onMouseStop(positionInfo);\n        }\n    }\n\n    private handleStartMouse(): void {\n        document.addEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        document.addEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        document.addEventListener(\"mouseup\", this.mouseUp, { passive: false });\n        document.addEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n\n        const mouseDelay = this.getMouseDelay();\n\n        if (mouseDelay) {\n            this.startMouseDelayTimer(mouseDelay);\n        } else {\n            this.isMouseDelayMet = true;\n        }\n    }\n\n    private mouseDown = (e: MouseEvent): void => {\n        // Left mouse button?\n        if (e.button !== 0) {\n            return;\n        }\n\n        const result = this.handleMouseDown(getPositionInfoFromMouseEvent(e));\n\n        if (result && e.cancelable) {\n            e.preventDefault();\n        }\n    };\n\n    private mouseMove = (e: MouseEvent): void => {\n        this.handleMouseMove(e, getPositionInfoFromMouseEvent(e));\n    };\n\n    private mouseUp = (e: MouseEvent): void => {\n        this.handleMouseUp(getPositionInfoFromMouseEvent(e));\n    };\n\n    private removeMouseMoveEventListeners() {\n        document.removeEventListener(\"mousemove\", this.mouseMove);\n        document.removeEventListener(\"touchmove\", this.touchMove);\n        document.removeEventListener(\"mouseup\", this.mouseUp);\n        document.removeEventListener(\"touchend\", this.touchEnd);\n    }\n\n    private startMouseDelayTimer(mouseDelay: number): void {\n        if (this.mouseDelayTimer) {\n            clearTimeout(this.mouseDelayTimer);\n        }\n\n        this.mouseDelayTimer = window.setTimeout(() => {\n            if (this.mouseDownInfo) {\n                this.isMouseDelayMet = true;\n            }\n        }, mouseDelay);\n\n        this.isMouseDelayMet = false;\n    }\n\n    private touchEnd = (e: TouchEvent): void => {\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.touches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseUp(getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchMove = (e: TouchEvent): void => {\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.touches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseMove(e, getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchStart = (e: TouchEvent): void => {\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.touches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseDown(getPositionInfoFromTouch(touch, e));\n    };\n}\n\nexport default MouseHandler;\n","interface NodeRecordWithChildren extends NodeRecord {\n    children: NodeData[];\n}\n\nexport const isNodeRecordWithChildren = (\n    data: NodeData,\n): data is NodeRecordWithChildren =>\n    typeof data === \"object\" &&\n    \"children\" in data &&\n    data.children instanceof Array;\n","import { isNodeRecordWithChildren } from \"./nodeUtils\";\nimport { Position } from \"./position\";\n\ntype IterateCallback = (node: Node, level: number) => boolean;\n\nexport class Node implements INode {\n    [key: string]: unknown;\n\n    public children: Node[];\n    public element?: HTMLElement;\n    public id?: NodeId;\n    public idMapping: Map<NodeId, Node>;\n    public is_loading: boolean;\n    public is_open: boolean;\n    public isEmptyFolder: boolean;\n    public load_on_demand: boolean;\n    public name: string;\n    public nodeClass?: typeof Node;\n    public parent: Node | null;\n    public tree?: Node;\n\n    constructor(\n        nodeData: NodeData | null = null,\n        isRoot = false,\n        nodeClass = Node,\n    ) {\n        this.name = \"\";\n        this.load_on_demand = false;\n\n        this.isEmptyFolder =\n            nodeData != null &&\n            isNodeRecordWithChildren(nodeData) &&\n            nodeData.children.length === 0;\n\n        this.setData(nodeData);\n\n        this.children = [];\n        this.parent = null;\n\n        if (isRoot) {\n            this.idMapping = new Map<NodeId, Node>();\n            this.tree = this;\n            this.nodeClass = nodeClass;\n        }\n    }\n\n    public addAfter(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex + 1);\n\n            node.loadChildrenFromData(nodeInfo);\n            return node;\n        }\n    }\n\n    public addBefore(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex);\n\n            node.loadChildrenFromData(nodeInfo);\n            return node;\n        }\n    }\n\n    /*\n    Add child.\n\n    tree.addChild(\n        new Node('child1')\n    );\n    */\n    public addChild(node: Node): void {\n        this.children.push(node);\n        node.setParent(this);\n    }\n\n    /*\n    Add child at position. Index starts at 0.\n\n    tree.addChildAtPosition(\n        new Node('abc'),\n        1\n    );\n    */\n    public addChildAtPosition(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        node.setParent(this);\n    }\n\n    public addNodeToIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.set(node.id, node);\n        }\n    }\n\n    public addParent(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const newParent = this.createNode(nodeInfo);\n\n            if (this.tree) {\n                newParent.setParent(this.tree);\n            }\n            const originalParent = this.parent;\n\n            for (const child of originalParent.children) {\n                newParent.addChild(child);\n            }\n\n            originalParent.children = [];\n            originalParent.addChild(newParent);\n            return newParent;\n        }\n    }\n\n    public append(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChild(node);\n\n        node.loadChildrenFromData(nodeInfo);\n        return node;\n    }\n\n    public filter(f: (node: Node) => boolean): Node[] {\n        const result: Node[] = [];\n\n        this.iterate((node: Node) => {\n            if (f(node)) {\n                result.push(node);\n            }\n\n            return true;\n        });\n\n        return result;\n    }\n\n    /*\n    Get child index.\n\n    var index = getChildIndex(node);\n    */\n    public getChildIndex(node: Node): number {\n        return this.children.indexOf(node);\n    }\n\n    /*\n    Get the tree as data.\n    */\n    public getData(includeParent = false): NodeRecord[] {\n        const getDataFromNodes = (nodes: Node[]): Record<string, unknown>[] => {\n            return nodes.map((node) => {\n                const tmpNode: Record<string, unknown> = {};\n\n                for (const k in node) {\n                    if (\n                        [\n                            \"parent\",\n                            \"children\",\n                            \"element\",\n                            \"idMapping\",\n                            \"load_on_demand\",\n                            \"nodeClass\",\n                            \"tree\",\n                            \"isEmptyFolder\",\n                        ].indexOf(k) === -1 &&\n                        Object.prototype.hasOwnProperty.call(node, k)\n                    ) {\n                        const v = node[k];\n                        tmpNode[k] = v;\n                    }\n                }\n\n                if (node.hasChildren()) {\n                    tmpNode.children = getDataFromNodes(node.children);\n                }\n\n                return tmpNode;\n            });\n        };\n\n        if (includeParent) {\n            return getDataFromNodes([this]);\n        } else {\n            return getDataFromNodes(this.children);\n        }\n    }\n\n    public getLastChild(): Node | null {\n        if (!this.hasChildren()) {\n            return null;\n        } else {\n            const lastChild = this.children[this.children.length - 1];\n\n            if (!lastChild) {\n                return null;\n            }\n\n            if (!(lastChild.hasChildren() && lastChild.is_open)) {\n                return lastChild;\n            } else {\n                return lastChild.getLastChild();\n            }\n        }\n    }\n\n    public getLevel(): number {\n        let level = 0;\n        let node: Node = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n        while (node.parent) {\n            level += 1;\n            node = node.parent;\n        }\n\n        return level;\n    }\n\n    public getNextNode(includeChildren = true): Node | null {\n        if (includeChildren && this.hasChildren()) {\n            return this.children[0] ?? null;\n        } else if (!this.parent) {\n            return null;\n        } else {\n            const nextSibling = this.getNextSibling();\n\n            if (nextSibling) {\n                return nextSibling;\n            } else {\n                return this.parent.getNextNode(false);\n            }\n        }\n    }\n\n    public getNextSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const nextIndex = this.parent.getChildIndex(this) + 1;\n            if (nextIndex < this.parent.children.length) {\n                return this.parent.children[nextIndex] ?? null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNextVisibleNode(): Node | null {\n        if (this.hasChildren() && this.is_open) {\n            // First child\n            return this.children[0] ?? null;\n        } else {\n            if (!this.parent) {\n                return null;\n            } else {\n                const nextSibling = this.getNextSibling();\n                if (nextSibling) {\n                    // Next sibling\n                    return nextSibling;\n                } else {\n                    // Next node of parent\n                    return this.parent.getNextNode(false);\n                }\n            }\n        }\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        let result: Node | null = null;\n\n        this.iterate((node: Node) => {\n            if (result) {\n                return false;\n            } else if (callback(node)) {\n                result = node;\n                return false;\n            } else {\n                return true;\n            }\n        });\n\n        return result;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.idMapping.get(nodeId) ?? null;\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.getNodeByCallback((node: Node) => node.name === name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        const node = this.getNodeByCallback((n: Node) => n.name === name);\n\n        if (!node) {\n            throw new Error(`Node with name ${name} not found`);\n        }\n\n        return node;\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.filter((node: Node) => node[key] === value);\n    }\n\n    public getParent(): Node | null {\n        // Return parent except if it is the root node\n        if (!this.parent) {\n            return null;\n        } else if (!this.parent.parent) {\n            // Root node -> null\n            return null;\n        } else {\n            return this.parent;\n        }\n    }\n\n    public getPreviousNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (previousSibling.hasChildren()) {\n                return previousSibling.getLastChild();\n            } else {\n                return previousSibling;\n            }\n        }\n    }\n\n    public getPreviousSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousIndex = this.parent.getChildIndex(this) - 1;\n            if (previousIndex >= 0) {\n                return this.parent.children[previousIndex] ?? null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getPreviousVisibleNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (\n                !previousSibling.hasChildren() ||\n                !previousSibling.is_open\n            ) {\n                // Previous sibling\n                return previousSibling;\n            } else {\n                // Last child of previous sibling\n                return previousSibling.getLastChild();\n            }\n        }\n    }\n\n    /*\n    Does the tree have children?\n\n    if (tree.hasChildren()) {\n        //\n    }\n    */\n    public hasChildren(): boolean {\n        return this.children.length !== 0;\n    }\n\n    // Init Node from data without making it the root of the tree\n    public initFromData(data: NodeData): void {\n        const addNode = (nodeData: NodeData): void => {\n            this.setData(nodeData);\n\n            if (\n                isNodeRecordWithChildren(nodeData) &&\n                nodeData.children.length\n            ) {\n                addChildren(nodeData.children);\n            }\n        };\n\n        const addChildren = (childrenData: NodeData[]): void => {\n            for (const child of childrenData) {\n                const node = this.createNode();\n                node.initFromData(child);\n                this.addChild(node);\n            }\n        };\n\n        addNode(data);\n    }\n\n    public isFolder(): boolean {\n        return this.hasChildren() || this.load_on_demand;\n    }\n\n    public isParentOf(node: Node): boolean {\n        let parent = node.parent;\n\n        while (parent) {\n            if (parent === this) {\n                return true;\n            }\n\n            parent = parent.parent;\n        }\n\n        return false;\n    }\n\n    /*\n    Iterate over all the nodes in the tree.\n\n    Calls callback with (node, level).\n\n    The callback must return true to continue the iteration on current node.\n\n    tree.iterate(\n        function(node, level) {\n           console.log(node.name);\n\n           // stop iteration after level 2\n           return (level <= 2);\n        }\n    );\n\n    */\n    public iterate(callback: IterateCallback): void {\n        const _iterate = (node: Node, level: number): void => {\n            for (const child of node.children) {\n                const result = callback(child, level);\n\n                if (result && child.hasChildren()) {\n                    _iterate(child, level + 1);\n                }\n            }\n        };\n\n        _iterate(this, 0);\n    }\n\n    /*\n    Create tree from data.\n\n    Structure of data is:\n    [\n        {\n            name: 'node1',\n            children: [\n                { name: 'child1' },\n                { name: 'child2' }\n            ]\n        },\n        {\n            name: 'node2'\n        }\n    ]\n    */\n    public loadFromData(data: NodeData[]): this {\n        this.removeChildren();\n\n        for (const childData of data) {\n            const node = this.createNode(childData);\n            this.addChild(node);\n\n            if (isNodeRecordWithChildren(childData)) {\n                node.loadFromData(childData.children);\n            }\n        }\n\n        return this;\n    }\n\n    /*\n    Move node relative to another node.\n\n    Argument position: Position.BEFORE, Position.AFTER or Position.Inside\n\n    // move node1 after node2\n    tree.moveNode(node1, node2, Position.AFTER);\n    */\n    public moveNode(\n        movedNode: Node,\n        targetNode: Node,\n        position: Position,\n    ): boolean {\n        if (!movedNode.parent || movedNode.isParentOf(targetNode)) {\n            // - Node is parent of target node\n            // - Or, parent is empty\n            return false;\n        } else {\n            movedNode.parent.doRemoveChild(movedNode);\n\n            switch (position) {\n                case Position.After: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode) + 1,\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Before: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode),\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Inside: {\n                    // move inside as first child\n                    targetNode.addChildAtPosition(movedNode, 0);\n                    return true;\n                }\n\n                default:\n                    return false;\n            }\n        }\n    }\n\n    public prepend(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChildAtPosition(node, 0);\n\n        node.loadChildrenFromData(nodeInfo);\n        return node;\n    }\n\n    public remove(): void {\n        if (this.parent) {\n            this.parent.removeChild(this);\n            this.parent = null;\n        }\n    }\n\n    /*\n    Remove child. This also removes the children of the node.\n\n    tree.removeChild(tree.children[0]);\n    */\n    public removeChild(node: Node): void {\n        // remove children from the index\n        node.removeChildren();\n\n        this.doRemoveChild(node);\n    }\n\n    public removeChildren(): void {\n        this.iterate((child: Node) => {\n            this.tree?.removeNodeFromIndex(child);\n            return true;\n        });\n\n        this.children = [];\n    }\n\n    public removeNodeFromIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.delete(node.id);\n        }\n    }\n\n    /*\n    Set the data of this node.\n\n    setData(string): set the name of the node\n    setData(object): set attributes of the node\n\n    Examples:\n        setData('node1')\n\n        setData({ name: 'node1', id: 1});\n\n        setData({ name: 'node2', id: 2, color: 'green'});\n\n    * This is an internal function; it is not in the docs\n    * Does not remove existing node values\n    */\n    public setData(o: NodeData | null): void {\n        if (!o) {\n            return;\n        } else if (typeof o === \"string\") {\n            this.name = o;\n        } else if (typeof o === \"object\") {\n            for (const key in o) {\n                if (Object.prototype.hasOwnProperty.call(o, key)) {\n                    const value = o[key];\n\n                    if (key === \"label\" || key === \"name\") {\n                        // You can use the 'label' key instead of 'name'; this is a legacy feature\n                        if (typeof value === \"string\") {\n                            this.name = value;\n                        }\n                    } else if (key !== \"children\" && key !== \"parent\") {\n                        // You can't update the children or the parent using this function\n                        this[key] = value;\n                    }\n                }\n            }\n        }\n    }\n\n    private createNode(nodeData?: NodeData): Node {\n        const nodeClass = this.getNodeClass();\n        return new nodeClass(nodeData);\n    }\n\n    private doRemoveChild(node: Node): void {\n        this.children.splice(this.getChildIndex(node), 1);\n        this.tree?.removeNodeFromIndex(node);\n    }\n\n    private getNodeClass(): typeof Node {\n        return this.nodeClass ?? this.tree?.nodeClass ?? Node;\n    }\n\n    // Load children data from nodeInfo if it has children\n    private loadChildrenFromData(nodeInfo: NodeData) {\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            this.loadFromData(nodeInfo.children);\n        }\n    }\n\n    private setParent(parent: Node): void {\n        this.parent = parent;\n        this.tree = parent.tree;\n        this.tree?.addNodeToIndex(this);\n    }\n}\n","import { DropHint } from \"../dragAndDropHandler/types\";\n\nclass BorderDropHint implements DropHint {\n    private hint?: HTMLElement;\n\n    constructor(element: HTMLElement, scrollLeft: number) {\n        const div = element.querySelector(\":scope > .jqtree-element\");\n\n        if (!div) {\n            this.hint = undefined;\n            return;\n        }\n\n        const width = Math.max(element.offsetWidth + scrollLeft - 4, 0);\n        const height = Math.max(element.clientHeight - 4, 0);\n\n        const hint = document.createElement(\"span\");\n        hint.className = \"jqtree-border\";\n        hint.style.width = `${width}px`;\n        hint.style.height = `${height}px`;\n\n        this.hint = hint;\n\n        div.append(this.hint);\n    }\n\n    public remove(): void {\n        this.hint?.remove();\n    }\n}\n\nexport default BorderDropHint;\n","import { DropHint } from \"../dragAndDropHandler/types\";\nimport { Node } from \"../node\";\nimport { Position } from \"../position\";\n\nclass GhostDropHint implements DropHint {\n    private element: HTMLElement;\n    private ghost: HTMLElement;\n    private node: Node;\n\n    constructor(node: Node, element: HTMLElement, position: Position) {\n        this.element = element;\n        this.node = node;\n        this.ghost = this.createGhostElement();\n\n        switch (position) {\n            case Position.After:\n                this.moveAfter();\n                break;\n\n            case Position.Before:\n                this.moveBefore();\n                break;\n\n            case Position.Inside: {\n                if (node.isFolder() && node.is_open) {\n                    this.moveInsideOpenFolder();\n                } else {\n                    this.moveInside();\n                }\n            }\n        }\n    }\n\n    public remove(): void {\n        this.ghost.remove();\n    }\n\n    private createGhostElement() {\n        const ghost = document.createElement(\"li\");\n        ghost.className = \"jqtree_common jqtree-ghost\";\n\n        const circleSpan = document.createElement(\"span\");\n        circleSpan.className = \"jqtree_common jqtree-circle\";\n        ghost.append(circleSpan);\n\n        const lineSpan = document.createElement(\"span\");\n        lineSpan.className = \"jqtree_common jqtree-line\";\n        ghost.append(lineSpan);\n\n        return ghost;\n    }\n\n    private moveAfter(): void {\n        this.element.after(this.ghost);\n    }\n\n    private moveBefore(): void {\n        this.element.before(this.ghost);\n    }\n\n    private moveInside(): void {\n        this.element.after(this.ghost);\n        this.ghost.classList.add(\"jqtree-inside\");\n    }\n\n    private moveInsideOpenFolder(): void {\n        const childElement = this.node.children[0]?.element;\n\n        if (childElement) {\n            childElement.before(this.ghost);\n        }\n    }\n}\n\nexport default GhostDropHint;\n","import { DropHint } from \"../dragAndDropHandler/types\";\nimport { GetScrollLeft } from \"../jqtreeMethodTypes\";\nimport { Node } from \"../node\";\nimport { Position } from \"../position\";\nimport BorderDropHint from \"./borderDropHint\";\nimport GhostDropHint from \"./ghostDropHint\";\n\nexport interface NodeElementParams {\n    getScrollLeft: GetScrollLeft;\n    node: Node;\n    tabIndex?: number;\n    treeElement: HTMLElement;\n}\n\nclass NodeElement {\n    public element: HTMLElement;\n    public node: Node;\n    private getScrollLeft: GetScrollLeft;\n    private tabIndex?: number;\n    private treeElement: HTMLElement;\n\n    constructor({\n        getScrollLeft,\n        node,\n        tabIndex,\n        treeElement,\n    }: NodeElementParams) {\n        this.getScrollLeft = getScrollLeft;\n        this.tabIndex = tabIndex;\n        this.treeElement = treeElement;\n\n        this.init(node);\n    }\n\n    public addDropHint(position: number): DropHint {\n        if (this.mustShowBorderDropHint(position)) {\n            return new BorderDropHint(this.element, this.getScrollLeft());\n        } else {\n            return new GhostDropHint(this.node, this.element, position);\n        }\n    }\n\n    public deselect(): void {\n        this.element.classList.remove(\"jqtree-selected\");\n\n        const titleSpan = this.getTitleSpan();\n        titleSpan.removeAttribute(\"tabindex\");\n        titleSpan.setAttribute(\"aria-selected\", \"false\");\n\n        titleSpan.blur();\n    }\n\n    public init(node: Node): void {\n        this.node = node;\n\n        if (!node.element) {\n            node.element = this.treeElement;\n        }\n\n        this.element = node.element;\n    }\n\n    public select(mustSetFocus: boolean): void {\n        this.element.classList.add(\"jqtree-selected\");\n\n        const titleSpan = this.getTitleSpan();\n        const tabIndex = this.tabIndex;\n\n        // Check for null or undefined\n        if (tabIndex != null) {\n            titleSpan.setAttribute(\"tabindex\", tabIndex.toString());\n        }\n\n        titleSpan.setAttribute(\"aria-selected\", \"true\");\n\n        if (mustSetFocus) {\n            titleSpan.focus();\n        }\n    }\n\n    protected getTitleSpan(): HTMLSpanElement {\n        return this.element.querySelector(\n            \":scope > .jqtree-element > span.jqtree-title\",\n        ) as HTMLSpanElement;\n    }\n\n    protected getUl(): HTMLUListElement {\n        return this.element.querySelector(\":scope > ul\") as HTMLUListElement;\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return position === Position.Inside;\n    }\n}\n\nexport default NodeElement;\n","import { OnFinishOpenNode, TriggerEvent } from \"../jqtreeMethodTypes\";\nimport { Position } from \"../position\";\nimport NodeElement, { NodeElementParams } from \"./index\";\n\ninterface FolderElementParams extends NodeElementParams {\n    closedIconElement?: HTMLElement | Text;\n    openedIconElement?: HTMLElement | Text;\n    triggerEvent: TriggerEvent;\n}\n\nclass FolderElement extends NodeElement {\n    private closedIconElement?: HTMLElement | Text;\n    private openedIconElement?: HTMLElement | Text;\n    private triggerEvent: TriggerEvent;\n\n    constructor({\n        closedIconElement,\n        getScrollLeft,\n        node,\n        openedIconElement,\n        tabIndex,\n        treeElement,\n        triggerEvent,\n    }: FolderElementParams) {\n        super({\n            getScrollLeft,\n            node,\n            tabIndex,\n            treeElement,\n        });\n\n        this.closedIconElement = closedIconElement;\n        this.openedIconElement = openedIconElement;\n        this.triggerEvent = triggerEvent;\n    }\n\n    public close(slide: boolean, animationSpeed: JQuery.Duration): void {\n        if (!this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = false;\n\n        const button = this.getButton();\n        button.classList.add(\"jqtree-closed\");\n        button.innerHTML = \"\";\n\n        const closedIconElement = this.closedIconElement;\n\n        if (closedIconElement) {\n            const icon = closedIconElement.cloneNode(true);\n            button.appendChild(icon);\n        }\n\n        const doClose = (): void => {\n            this.element.classList.add(\"jqtree-closed\");\n\n            const titleSpan = this.getTitleSpan();\n            titleSpan.setAttribute(\"aria-expanded\", \"false\");\n\n            this.triggerEvent(\"tree.close\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            jQuery(this.getUl()).slideUp(animationSpeed, doClose);\n        } else {\n            jQuery(this.getUl()).hide();\n            doClose();\n        }\n    }\n\n    public open(\n        onFinished: OnFinishOpenNode | undefined,\n        slide: boolean,\n        animationSpeed: JQuery.Duration,\n    ): void {\n        if (this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = true;\n\n        const button = this.getButton();\n        button.classList.remove(\"jqtree-closed\");\n        button.innerHTML = \"\";\n\n        const openedIconElement = this.openedIconElement;\n\n        if (openedIconElement) {\n            const icon = openedIconElement.cloneNode(true);\n            button.appendChild(icon);\n        }\n\n        const doOpen = (): void => {\n            this.element.classList.remove(\"jqtree-closed\");\n\n            const titleSpan = this.getTitleSpan();\n            titleSpan.setAttribute(\"aria-expanded\", \"true\");\n\n            if (onFinished) {\n                onFinished(this.node);\n            }\n\n            this.triggerEvent(\"tree.open\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            jQuery(this.getUl()).slideDown(animationSpeed, doOpen);\n        } else {\n            jQuery(this.getUl()).show();\n            doOpen();\n        }\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return !this.node.is_open && position === Position.Inside;\n    }\n\n    private getButton(): HTMLLinkElement {\n        return this.element.querySelector(\n            \":scope > .jqtree-element > a.jqtree-toggler\",\n        ) as HTMLLinkElement;\n    }\n}\n\nexport default FolderElement;\n","import {\n    AddToSelection,\n    GetNodeById,\n    GetSelectedNodes,\n    GetTree,\n    OpenNode,\n    RefreshElements,\n    RemoveFromSelection,\n} from \"./jqtreeMethodTypes\";\nimport { OnGetStateFromStorage, OnSetStateFromStorage } from \"./jqtreeOptions\";\nimport { Node } from \"./node\";\nimport { isInt } from \"./util\";\n\nexport interface SavedState {\n    open_nodes?: NodeId[];\n    selected_node?: NodeId[];\n}\n\ninterface SaveStateHandlerParams {\n    addToSelection: AddToSelection;\n    getNodeById: GetNodeById;\n    getSelectedNodes: GetSelectedNodes;\n    getTree: GetTree;\n    onGetStateFromStorage?: OnGetStateFromStorage;\n    onSetStateFromStorage?: OnSetStateFromStorage;\n    openNode: OpenNode;\n    refreshElements: RefreshElements;\n    removeFromSelection: RemoveFromSelection;\n    saveState: boolean | string;\n}\n\nexport default class SaveStateHandler {\n    private addToSelection: AddToSelection;\n    private getNodeById: GetNodeById;\n    private getSelectedNodes: GetSelectedNodes;\n    private getTree: GetTree;\n    private onGetStateFromStorage?: OnGetStateFromStorage;\n    private onSetStateFromStorage?: OnSetStateFromStorage;\n    private openNode: OpenNode;\n    private refreshElements: RefreshElements;\n    private removeFromSelection: RemoveFromSelection;\n    private saveStateOption: boolean | string;\n\n    constructor({\n        addToSelection,\n        getNodeById,\n        getSelectedNodes,\n        getTree,\n        onGetStateFromStorage,\n        onSetStateFromStorage,\n        openNode,\n        refreshElements,\n        removeFromSelection,\n        saveState,\n    }: SaveStateHandlerParams) {\n        this.addToSelection = addToSelection;\n        this.getNodeById = getNodeById;\n        this.getSelectedNodes = getSelectedNodes;\n        this.getTree = getTree;\n        this.onGetStateFromStorage = onGetStateFromStorage;\n        this.onSetStateFromStorage = onSetStateFromStorage;\n        this.openNode = openNode;\n        this.refreshElements = refreshElements;\n        this.removeFromSelection = removeFromSelection;\n        this.saveStateOption = saveState;\n    }\n\n    public getNodeIdToBeSelected(): NodeId | null {\n        const state = this.getStateFromStorage();\n\n        if (state?.selected_node) {\n            return state.selected_node[0] ?? null;\n        } else {\n            return null;\n        }\n    }\n\n    public getState(): SavedState {\n        const getOpenNodeIds = (): NodeId[] => {\n            const openNodes: NodeId[] = [];\n\n            this.getTree()?.iterate((node: Node) => {\n                if (node.is_open && node.id && node.hasChildren()) {\n                    openNodes.push(node.id);\n                }\n                return true;\n            });\n\n            return openNodes;\n        };\n\n        const getSelectedNodeIds = (): NodeId[] => {\n            const selectedNodeIds: NodeId[] = [];\n\n            this.getSelectedNodes().forEach((node) => {\n                if (node.id != null) {\n                    selectedNodeIds.push(node.id);\n                }\n            });\n\n            return selectedNodeIds;\n        };\n\n        return {\n            open_nodes: getOpenNodeIds(),\n            selected_node: getSelectedNodeIds(),\n        };\n    }\n\n    public getStateFromStorage(): null | SavedState {\n        const jsonData = this.loadFromStorage();\n\n        if (jsonData) {\n            return this.parseState(jsonData) as unknown as SavedState;\n        } else {\n            return null;\n        }\n    }\n\n    public saveState(): void {\n        const state = JSON.stringify(this.getState());\n\n        if (this.onSetStateFromStorage) {\n            this.onSetStateFromStorage(state);\n        } else {\n            localStorage.setItem(this.getKeyName(), state);\n        }\n    }\n\n    /*\n    Set initial state\n    Don't handle nodes that are loaded on demand\n\n    result: must load on demand (boolean)\n    */\n    public setInitialState(state: SavedState): boolean {\n        let mustLoadOnDemand = false;\n\n        if (state.open_nodes) {\n            mustLoadOnDemand = this.openInitialNodes(state.open_nodes);\n        }\n\n        this.resetSelection();\n\n        if (state.selected_node) {\n            this.selectInitialNodes(state.selected_node);\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    public setInitialStateOnDemand(\n        state: SavedState,\n        cbFinished: () => void,\n    ): void {\n        let loadingCount = 0;\n        let nodeIds = state.open_nodes;\n\n        const openNodes = (): void => {\n            if (!nodeIds) {\n                return;\n            }\n\n            const newNodesIds = [];\n\n            for (const nodeId of nodeIds) {\n                const node = this.getNodeById(nodeId);\n\n                if (!node) {\n                    newNodesIds.push(nodeId);\n                } else {\n                    if (!node.is_loading) {\n                        if (node.load_on_demand) {\n                            loadAndOpenNode(node);\n                        } else {\n                            this.openNode(node, false);\n                        }\n                    }\n                }\n            }\n\n            nodeIds = newNodesIds;\n\n            if (state.selected_node) {\n                if (this.selectInitialNodes(state.selected_node)) {\n                    this.refreshElements(null);\n                }\n            }\n\n            if (loadingCount === 0) {\n                cbFinished();\n            }\n        };\n\n        const loadAndOpenNode = (node: Node): void => {\n            loadingCount += 1;\n            this.openNode(node, false, () => {\n                loadingCount -= 1;\n                openNodes();\n            });\n        };\n\n        openNodes();\n    }\n\n    private getKeyName(): string {\n        if (typeof this.saveStateOption === \"string\") {\n            return this.saveStateOption;\n        } else {\n            return \"tree\";\n        }\n    }\n\n    private loadFromStorage(): null | string {\n        if (this.onGetStateFromStorage) {\n            return this.onGetStateFromStorage();\n        } else {\n            return localStorage.getItem(this.getKeyName());\n        }\n    }\n\n    private openInitialNodes(nodeIds: NodeId[]): boolean {\n        let mustLoadOnDemand = false;\n\n        for (const nodeId of nodeIds) {\n            const node = this.getNodeById(nodeId);\n\n            if (node) {\n                if (!node.load_on_demand) {\n                    node.is_open = true;\n                } else {\n                    mustLoadOnDemand = true;\n                }\n            }\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    private parseState(jsonData: string): SavedState {\n        const state = JSON.parse(jsonData) as Record<string, unknown>;\n\n        // Check if selected_node is an int (instead of an array)\n        if (state.selected_node && isInt(state.selected_node)) {\n            // Convert to array\n            state.selected_node = [state.selected_node];\n        }\n\n        return state as unknown as SavedState;\n    }\n\n    private resetSelection(): void {\n        const selectedNodes = this.getSelectedNodes();\n\n        selectedNodes.forEach((node) => {\n            this.removeFromSelection(node);\n        });\n    }\n\n    private selectInitialNodes(nodeIds: NodeId[]): boolean {\n        let selectCount = 0;\n\n        for (const nodeId of nodeIds) {\n            const node = this.getNodeById(nodeId);\n\n            if (node) {\n                selectCount += 1;\n\n                this.addToSelection(node);\n            }\n        }\n\n        return selectCount !== 0;\n    }\n}\n","import type { ScrollParent } from \"./types\";\n\nimport { getElementPosition, getOffsetTop } from '../util'\n\ntype HorizontalScrollDirection = \"left\" | \"right\";\ninterface Params {\n    container: HTMLElement;\n    refreshHitAreas: () => void;\n}\n\ntype VerticalScrollDirection = \"bottom\" | \"top\";\n\nexport default class ContainerScrollParent implements ScrollParent {\n    private container: HTMLElement;\n    private horizontalScrollDirection?: HorizontalScrollDirection;\n    private horizontalScrollTimeout?: number;\n    private refreshHitAreas: () => void;\n    private scrollParentBottom?: number;\n    private scrollParentTop?: number;\n    private verticalScrollDirection?: VerticalScrollDirection;\n    private verticalScrollTimeout?: number;\n\n    constructor({ container, refreshHitAreas }: Params) {\n        this.container = container;\n        this.refreshHitAreas = refreshHitAreas;\n    }\n\n    public checkHorizontalScrolling(pageX: number): void {\n        const newHorizontalScrollDirection =\n            this.getNewHorizontalScrollDirection(pageX);\n\n        if (this.horizontalScrollDirection !== newHorizontalScrollDirection) {\n            this.horizontalScrollDirection = newHorizontalScrollDirection;\n\n            if (this.horizontalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n            }\n\n            if (newHorizontalScrollDirection) {\n                this.horizontalScrollTimeout = window.setTimeout(\n                    this.scrollHorizontally.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public checkVerticalScrolling(pageY: number) {\n        const newVerticalScrollDirection =\n            this.getNewVerticalScrollDirection(pageY);\n\n        if (this.verticalScrollDirection !== newVerticalScrollDirection) {\n            this.verticalScrollDirection = newVerticalScrollDirection;\n\n            if (this.verticalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n                this.verticalScrollTimeout = undefined;\n            }\n\n            if (newVerticalScrollDirection) {\n                this.verticalScrollTimeout = window.setTimeout(\n                    this.scrollVertically.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public getScrollLeft(): number {\n        return this.container.scrollLeft;\n    }\n\n    public scrollToY(top: number): void {\n        this.container.scrollTop = top;\n    }\n\n    public stopScrolling() {\n        this.horizontalScrollDirection = undefined;\n        this.verticalScrollDirection = undefined;\n        this.scrollParentTop = undefined;\n        this.scrollParentBottom = undefined;\n    }\n\n    private getNewHorizontalScrollDirection(\n        pageX: number,\n    ): HorizontalScrollDirection | undefined {\n        const scrollParentOffset = getElementPosition(this.container);\n\n        const rightEdge = scrollParentOffset.left + this.container.clientWidth;\n        const leftEdge = scrollParentOffset.left;\n        const isNearRightEdge = pageX > rightEdge - 20;\n        const isNearLeftEdge = pageX < leftEdge + 20;\n\n        if (isNearRightEdge) {\n            return \"right\";\n        } else if (isNearLeftEdge) {\n            return \"left\";\n        }\n\n        return undefined;\n    }\n\n    private getNewVerticalScrollDirection(\n        pageY: number,\n    ): undefined | VerticalScrollDirection {\n        if (pageY < this.getScrollParentTop()) {\n            return \"top\";\n        }\n\n        if (pageY > this.getScrollParentBottom()) {\n            return \"bottom\";\n        }\n\n        return undefined;\n    }\n\n    private getScrollParentBottom() {\n        if (this.scrollParentBottom == null) {\n            this.scrollParentBottom = this.getScrollParentTop() + this.container.clientHeight;\n        }\n\n        return this.scrollParentBottom;\n    }\n\n    private getScrollParentTop() {\n        if (this.scrollParentTop == null) {\n            this.scrollParentTop = getOffsetTop(this.container)\n        }\n\n        return this.scrollParentTop;\n    }\n\n    private scrollHorizontally() {\n        if (!this.horizontalScrollDirection) {\n            return;\n        }\n\n        const distance = this.horizontalScrollDirection === \"left\" ? -20 : 20;\n\n        this.container.scrollBy({\n            behavior: \"instant\",\n            left: distance,\n            top: 0,\n        });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollHorizontally.bind(this), 40);\n    }\n\n    private scrollVertically() {\n        if (!this.verticalScrollDirection) {\n            return;\n        }\n\n        const distance = this.verticalScrollDirection === \"top\" ? -20 : 20;\n\n        this.container.scrollBy({\n            behavior: \"instant\",\n            left: 0,\n            top: distance,\n        });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollVertically.bind(this), 40);\n    }\n}\n","import type { ScrollParent } from \"./types\";\n\nimport { getOffsetTop } from \"../util\";\n\ntype HorizontalScrollDirection = \"left\" | \"right\";\ninterface Params {\n    refreshHitAreas: () => void;\n    treeElement: HTMLElement;\n}\n\ntype VerticalScrollDirection = \"bottom\" | \"top\";\n\nexport default class DocumentScrollParent implements ScrollParent {\n    private documentScrollHeight?: number;\n    private documentScrollWidth?: number;\n    private horizontalScrollDirection?: HorizontalScrollDirection;\n    private horizontalScrollTimeout?: number;\n    private refreshHitAreas: () => void;\n    private treeElement: HTMLElement;\n    private verticalScrollDirection?: VerticalScrollDirection;\n    private verticalScrollTimeout?: number;\n\n    constructor({ refreshHitAreas, treeElement }: Params) {\n        this.refreshHitAreas = refreshHitAreas;\n        this.treeElement = treeElement;\n    }\n\n    public checkHorizontalScrolling(pageX: number): void {\n        const newHorizontalScrollDirection =\n            this.getNewHorizontalScrollDirection(pageX);\n\n        if (this.horizontalScrollDirection !== newHorizontalScrollDirection) {\n            this.horizontalScrollDirection = newHorizontalScrollDirection;\n\n            if (this.horizontalScrollTimeout != null) {\n                window.clearTimeout(this.horizontalScrollTimeout);\n            }\n\n            if (newHorizontalScrollDirection) {\n                this.horizontalScrollTimeout = window.setTimeout(\n                    this.scrollHorizontally.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public checkVerticalScrolling(pageY: number) {\n        const newVerticalScrollDirection =\n            this.getNewVerticalScrollDirection(pageY);\n\n        if (this.verticalScrollDirection !== newVerticalScrollDirection) {\n            this.verticalScrollDirection = newVerticalScrollDirection;\n\n            if (this.verticalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n                this.verticalScrollTimeout = undefined;\n            }\n\n            if (newVerticalScrollDirection) {\n                this.verticalScrollTimeout = window.setTimeout(\n                    this.scrollVertically.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public getScrollLeft(): number {\n        return document.documentElement.scrollLeft;\n    }\n\n    public scrollToY(top: number): void {\n        const treeTop = getOffsetTop(this.treeElement);\n\n        document.documentElement.scrollTop = top + treeTop;\n    }\n\n    public stopScrolling() {\n        this.horizontalScrollDirection = undefined;\n        this.verticalScrollDirection = undefined;\n        this.documentScrollHeight = undefined;\n        this.documentScrollWidth = undefined;\n    }\n\n    private canScrollDown() {\n        const documentElement = document.documentElement;\n\n        return (\n            documentElement.scrollTop + documentElement.clientHeight <\n            this.getDocumentScrollHeight()\n        );\n    }\n\n    private canScrollRight() {\n        const documentElement = document.documentElement;\n\n        return (\n            documentElement.scrollLeft + documentElement.clientWidth <\n            this.getDocumentScrollWidth()\n        );\n    }\n\n    private getDocumentScrollHeight() {\n        // Store the original scroll height because the scroll height can increase when the drag element is moved beyond the scroll height.\n        if (this.documentScrollHeight == null) {\n            this.documentScrollHeight = document.documentElement.scrollHeight;\n        }\n\n        return this.documentScrollHeight;\n    }\n\n    private getDocumentScrollWidth() {\n        // Store the original scroll width because the scroll width can increase when the drag element is moved beyond the scroll width.\n        if (this.documentScrollWidth == null) {\n            this.documentScrollWidth = document.documentElement.scrollWidth;\n        }\n\n        return this.documentScrollWidth;\n    }\n\n    private getNewHorizontalScrollDirection(\n        pageX: number,\n    ): HorizontalScrollDirection | undefined {\n        const scrollLeft = document.documentElement.scrollLeft;\n        const windowWidth = window.innerWidth;\n\n        const isNearRightEdge = pageX > windowWidth - 20;\n        const isNearLeftEdge = pageX - scrollLeft < 20;\n\n        if (isNearRightEdge && this.canScrollRight()) {\n            return \"right\";\n        }\n\n        if (isNearLeftEdge) {\n            return \"left\";\n        }\n\n        return undefined;\n    }\n\n    private getNewVerticalScrollDirection(\n        pageY: number,\n    ): undefined | VerticalScrollDirection {\n        const scrollTop = jQuery(document).scrollTop() ?? 0;\n        const distanceTop = pageY - scrollTop;\n\n        if (distanceTop < 20) {\n            return \"top\";\n        }\n\n        const windowHeight = window.innerHeight;\n\n        if (windowHeight - (pageY - scrollTop) < 20 && this.canScrollDown()) {\n            return \"bottom\";\n        }\n\n        return undefined;\n    }\n\n    private scrollHorizontally() {\n        if (!this.horizontalScrollDirection) {\n            return;\n        }\n\n        const distance = this.horizontalScrollDirection === \"left\" ? -20 : 20;\n        window.scrollBy({ behavior: \"instant\", left: distance, top: 0 });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollHorizontally.bind(this), 40);\n    }\n\n    private scrollVertically() {\n        if (!this.verticalScrollDirection) {\n            return;\n        }\n\n        const distance = this.verticalScrollDirection === \"top\" ? -20 : 20;\n        window.scrollBy({ behavior: \"instant\", left: 0, top: distance });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollVertically.bind(this), 40);\n    }\n}\n","import type { ScrollParent } from \"./types\";\n\nimport ContainerScrollParent from \"./containerScrollParent\";\nimport DocumentScrollParent from \"./documentScrollParent\";\n\nconst isOverflow = (overflowValue: string) =>\n    overflowValue === \"auto\" || overflowValue === \"scroll\";\n\nconst hasOverFlow = (element: HTMLElement): boolean => {\n    const style = getComputedStyle(element);\n\n    return isOverflow(style.overflowX) || isOverflow(style.overflowY);\n};\n\nconst getParentWithOverflow = (\n    treeElement: HTMLElement,\n): HTMLElement | null => {\n    if (hasOverFlow(treeElement)) {\n        return treeElement;\n    }\n\n    let parent = treeElement.parentElement;\n\n    while (parent) {\n        if (hasOverFlow(parent)) {\n            return parent;\n        }\n\n        parent = parent.parentElement;\n    }\n\n    return null;\n};\n\nconst createScrollParent = (\n    treeElement: HTMLElement,\n    refreshHitAreas: () => void,\n): ScrollParent => {\n    const container = getParentWithOverflow(treeElement);\n\n    if (container && container.tagName !== \"HTML\") {\n        return new ContainerScrollParent({\n            container,\n            refreshHitAreas,\n        });\n    } else {\n        return new DocumentScrollParent({ refreshHitAreas, treeElement });\n    }\n};\n\nexport default createScrollParent;\n","import { PositionInfo } from \"./mouseUtils\";\nimport createScrollParent from \"./scrollHandler/createScrollParent\";\nimport { ScrollParent } from \"./scrollHandler/types\";\n\ninterface ScrollHandlerParams {\n    refreshHitAreas: () => void;\n    treeElement: HTMLElement;\n}\n\nexport default class ScrollHandler {\n    private refreshHitAreas: () => void;\n    private scrollParent?: ScrollParent;\n    private treeElement: HTMLElement;\n\n    constructor({ refreshHitAreas, treeElement }: ScrollHandlerParams) {\n        this.refreshHitAreas = refreshHitAreas;\n        this.scrollParent = undefined;\n        this.treeElement = treeElement;\n    }\n\n    public checkScrolling(positionInfo: PositionInfo): void {\n        this.checkVerticalScrolling(positionInfo);\n        this.checkHorizontalScrolling(positionInfo);\n    }\n\n    public getScrollLeft(): number {\n        return this.getScrollParent().getScrollLeft();\n    }\n\n    public scrollToY(top: number): void {\n        this.getScrollParent().scrollToY(top);\n    }\n\n    public stopScrolling() {\n        this.getScrollParent().stopScrolling();\n    }\n\n    private checkHorizontalScrolling(positionInfo: PositionInfo): void {\n        this.getScrollParent().checkHorizontalScrolling(positionInfo.pageX);\n    }\n\n    private checkVerticalScrolling(positionInfo: PositionInfo): void {\n        this.getScrollParent().checkVerticalScrolling(positionInfo.pageY);\n    }\n\n    private getScrollParent(): ScrollParent {\n        if (!this.scrollParent) {\n            this.scrollParent = createScrollParent(\n                this.treeElement,\n                this.refreshHitAreas,\n            );\n        }\n\n        return this.scrollParent;\n    }\n}\n","import { GetNodeById } from \"./jqtreeMethodTypes\";\nimport { Node } from \"./node\";\n\ninterface SelectNodeHandlerParameters {\n    getNodeById: GetNodeById;\n}\n\nexport default class SelectNodeHandler {\n    private getNodeById: GetNodeById;\n    private selectedNodes: Set<NodeId>;\n    private selectedSingleNode: Node | null;\n\n    constructor({ getNodeById }: SelectNodeHandlerParameters) {\n        this.getNodeById = getNodeById;\n        this.selectedNodes = new Set<NodeId>();\n        this.clear();\n    }\n\n    public addToSelection(node: Node): void {\n        if (node.id != null) {\n            this.selectedNodes.add(node.id);\n        } else {\n            this.selectedSingleNode = node;\n        }\n    }\n\n    public clear(): void {\n        this.selectedNodes.clear();\n        this.selectedSingleNode = null;\n    }\n\n    public getSelectedNode(): false | Node {\n        const selectedNodes = this.getSelectedNodes();\n\n        if (selectedNodes.length) {\n            return selectedNodes[0] ?? false;\n        } else {\n            return false;\n        }\n    }\n\n    public getSelectedNodes(): Node[] {\n        if (this.selectedSingleNode) {\n            return [this.selectedSingleNode];\n        } else {\n            const selectedNodes: Node[] = [];\n\n            this.selectedNodes.forEach((id) => {\n                const node = this.getNodeById(id);\n                if (node) {\n                    selectedNodes.push(node);\n                }\n            });\n\n            return selectedNodes;\n        }\n    }\n\n    public getSelectedNodesUnder(parent: Node): Node[] {\n        if (this.selectedSingleNode) {\n            if (parent.isParentOf(this.selectedSingleNode)) {\n                return [this.selectedSingleNode];\n            } else {\n                return [];\n            }\n        } else {\n            const selectedNodes: Node[] = [];\n\n            this.selectedNodes.forEach((id) => {\n                const node = this.getNodeById(id);\n                if (node && parent.isParentOf(node)) {\n                    selectedNodes.push(node);\n                }\n            });\n\n            return selectedNodes;\n        }\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (node.id != null) {\n            return this.selectedNodes.has(node.id);\n        } else if (this.selectedSingleNode) {\n            return this.selectedSingleNode.element === node.element;\n        } else {\n            return false;\n        }\n    }\n\n    public removeFromSelection(node: Node, includeChildren = false): void {\n        if (node.id == null) {\n            if (\n                this.selectedSingleNode &&\n                node.element === this.selectedSingleNode.element\n            ) {\n                this.selectedSingleNode = null;\n            }\n        } else {\n            this.selectedNodes.delete(node.id);\n\n            if (includeChildren) {\n                node.iterate(() => {\n                    if (node.id != null) {\n                        this.selectedNodes.delete(node.id);\n                    }\n                    return true;\n                });\n            }\n        }\n    }\n}\n","const register = (widgetClass: unknown, widgetName: string): void => {\n    const getDataKey = (): string => `simple_widget_${widgetName}`;\n\n    const getWidgetData = (\n        el: HTMLElement,\n        dataKey: string,\n    ): null | SimpleWidget<unknown> => {\n        const widget = jQuery.data(el, dataKey) as unknown;\n\n        if (widget && widget instanceof SimpleWidget) {\n            return widget;\n        } else {\n            return null;\n        }\n    };\n\n    const createWidget = ($el: JQuery, options: unknown): JQuery => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const existingWidget = getWidgetData(el, dataKey);\n\n            if (!existingWidget) {\n                const simpleWidgetClass = widgetClass as typeof SimpleWidget;\n                const widget = new simpleWidgetClass(el, options);\n\n                if (!jQuery.data(el, dataKey)) {\n                    jQuery.data(el, dataKey, widget);\n                }\n\n                // Call init after setting data, so we can call methods\n                widget.init();\n            }\n        }\n\n        return $el;\n    };\n\n    const destroyWidget = ($el: JQuery): void => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const widget = getWidgetData(el, dataKey);\n\n            if (widget) {\n                widget.destroy();\n            }\n\n            jQuery.removeData(el, dataKey);\n        }\n    };\n\n    const callFunction = (\n        $el: JQuery,\n        functionName: string,\n        args: unknown[],\n    ): unknown => {\n        let result = null;\n\n        for (const el of $el.get()) {\n            const widget = jQuery.data(el, getDataKey()) as unknown;\n\n            if (widget && widget instanceof SimpleWidget) {\n                const simpleWidget = widget as SimpleWidget<unknown>;\n                const widgetFunction = simpleWidget[functionName];\n\n                if (widgetFunction && typeof widgetFunction === \"function\") {\n                    result = widgetFunction.apply(widget, args) as unknown;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (jQuery.fn as any)[widgetName] = function (\n        this: JQuery,\n        argument1: unknown,\n        ...args: unknown[]\n    ) {\n        if (!argument1) {\n            return createWidget(this, null);\n        } else if (typeof argument1 === \"object\") {\n            const options = argument1 as unknown;\n            return createWidget(this, options);\n        } else if (typeof argument1 === \"string\" && argument1[0] !== \"_\") {\n            const functionName = argument1;\n\n            if (functionName === \"destroy\") {\n                destroyWidget(this);\n                return undefined;\n            } else if (functionName === \"get_widget_class\") {\n                return widgetClass;\n            } else {\n                return callFunction(this, functionName, args);\n            }\n        } else {\n            return undefined;\n        }\n    };\n};\n\nexport default class SimpleWidget<WidgetOptions> {\n    [key: string]: unknown;\n\n    protected static defaults: unknown = {};\n\n    public $el: JQuery;\n\n    public options: WidgetOptions;\n\n    constructor(el: HTMLElement, options: WidgetOptions) {\n        this.$el = jQuery(el);\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const defaults = (this.constructor as any).defaults as WidgetOptions;\n        this.options = { ...defaults, ...options };\n    }\n\n    public static register(widgetClass: unknown, widgetName: string): void {\n        register(widgetClass, widgetName);\n    }\n\n    public deinit(): void {\n        //\n    }\n\n    public destroy(): void {\n        this.deinit();\n    }\n\n    public init(): void {\n        //\n    }\n}\n","const version = \"1.8.8\";\n\nexport default version;\n","import DataLoader, { HandleFinishedLoading } from \"./dataLoader\";\nimport { DragAndDropHandler } from \"./dragAndDropHandler\";\nimport ElementsRenderer from \"./elementsRenderer\";\nimport { OnFinishOpenNode } from \"./jqtreeMethodTypes\";\nimport { JQTreeOptions } from \"./jqtreeOptions\";\nimport KeyHandler from \"./keyHandler\";\nimport MouseHandler from \"./mouseHandler\";\nimport { PositionInfo } from \"./mouseUtils\";\nimport { Node } from \"./node\";\nimport NodeElement from \"./nodeElement\";\nimport FolderElement from \"./nodeElement/folderElement\";\nimport { getPosition } from \"./position\";\nimport SaveStateHandler, { SavedState } from \"./saveStateHandler\";\nimport ScrollHandler from \"./scrollHandler\";\nimport SelectNodeHandler from \"./selectNodeHandler\";\nimport SimpleWidget from \"./simple.widget\";\nimport { getOffsetTop, isFunction } from \"./util\";\nimport __version__ from \"./version\";\n\ninterface SelectNodeOptions {\n    mustSetFocus?: boolean;\n    mustToggle?: boolean;\n}\n\nconst NODE_PARAM_IS_EMPTY = \"Node parameter is empty\";\nconst PARAM_IS_EMPTY = \"Parameter is empty: \";\n\nexport class JqTreeWidget extends SimpleWidget<JQTreeOptions> {\n    protected static defaults: JQTreeOptions = {\n        animationSpeed: \"fast\",\n        autoEscape: true,\n        autoOpen: false, // true / false / int (open n levels starting at 0)\n        buttonLeft: true,\n        // The symbol to use for a closed node - ► BLACK RIGHT-POINTING POINTER\n        // http://www.fileformat.info/info/unicode/char/25ba/index.htm\n        closedIcon: undefined,\n        data: undefined,\n        dataFilter: undefined,\n        dataUrl: undefined,\n        dragAndDrop: false,\n        keyboardSupport: true,\n        nodeClass: Node,\n        onCanMove: undefined, // Can this node be moved?\n        onCanMoveTo: undefined, // Can this node be moved to this position? function(moved_node, target_node, position)\n        onCanSelectNode: undefined,\n        onCreateLi: undefined,\n        onDragMove: undefined,\n        onDragStop: undefined,\n        onGetStateFromStorage: undefined,\n        onIsMoveHandle: undefined,\n        onLoadFailed: undefined,\n        onLoading: undefined,\n        onSetStateFromStorage: undefined,\n        openedIcon: \"&#x25bc;\",\n        openFolderDelay: 500, // The delay for opening a folder during drag and drop; the value is in milliseconds\n        // The symbol to use for an open node - ▼ BLACK DOWN-POINTING TRIANGLE\n        // http://www.fileformat.info/info/unicode/char/25bc/index.htm\n        rtl: undefined, // right-to-left support; true / false (default)\n        saveState: false, // true / false / string (cookie name)\n        selectable: true,\n        showEmptyFolder: false,\n        slide: true, // must display slide animation?\n        startDndDelay: 300, // The delay for starting dnd (in milliseconds)\n        tabIndex: 0,\n        useContextMenu: true,\n    };\n\n    private dataLoader: DataLoader;\n    private dndHandler: DragAndDropHandler;\n    private element: JQuery;\n\n    private isInitialized: boolean;\n    private keyHandler: KeyHandler;\n    private mouseHandler: MouseHandler;\n    private renderer: ElementsRenderer;\n    private saveStateHandler: SaveStateHandler;\n    private scrollHandler: ScrollHandler;\n    private selectNodeHandler: SelectNodeHandler;\n    private tree: Node;\n\n    public addNodeAfter(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        const newNode = existingNode.addAfter(newNodeInfo);\n\n        if (newNode) {\n            this.refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addNodeBefore(\n        newNodeInfo: NodeData,\n        existingNode?: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addBefore(newNodeInfo);\n\n        if (newNode) {\n            this.refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addParentNode(\n        newNodeInfo: NodeData,\n        existingNode?: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addParent(newNodeInfo);\n\n        if (newNode) {\n            this.refreshElements(newNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addToSelection(node?: Node, mustSetFocus?: boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.addToSelection(node);\n        this.openParents(node);\n\n        this.getNodeElementForNode(node).select(mustSetFocus ?? true);\n\n        this.saveState();\n\n        return this.element;\n    }\n\n    public appendNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam ?? this.tree;\n\n        const node = parentNode.append(newNodeInfo);\n\n        this.refreshElements(parentNode);\n\n        return node;\n    }\n\n    public closeNode(node?: Node, slideParam?: boolean | null): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            this.createFolderElement(node).close(\n                slide,\n                this.options.animationSpeed,\n            );\n\n            this.saveState();\n        }\n\n        return this.element;\n    }\n\n    public deinit(): void {\n        this.element.empty();\n        this.element.off();\n\n        this.keyHandler.deinit();\n        this.mouseHandler.deinit();\n\n        this.tree = new Node({}, true);\n\n        super.deinit();\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        return this.tree.getNodeByCallback(callback);\n    }\n\n    public getNodeByHtmlElement(\n        inputElement: HTMLElement | JQuery,\n    ): Node | null {\n        const element =\n            inputElement instanceof HTMLElement\n                ? inputElement\n                : inputElement[0];\n\n        if (!element) {\n            return null;\n        }\n\n        return this.getNode(element);\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.tree.getNodeById(nodeId);\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.tree.getNodeByName(name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        return this.tree.getNodeByNameMustExist(name);\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.tree.getNodesByProperty(key, value);\n    }\n\n    public getSelectedNode(): false | Node {\n        return this.selectNodeHandler.getSelectedNode();\n    }\n\n    public getSelectedNodes(): Node[] {\n        return this.selectNodeHandler.getSelectedNodes();\n    }\n\n    public getState(): null | SavedState {\n        return this.saveStateHandler.getState();\n    }\n\n    public getStateFromStorage(): null | SavedState {\n        return this.saveStateHandler.getStateFromStorage();\n    }\n\n    public getTree(): Node {\n        return this.tree;\n    }\n\n    public getVersion(): string {\n        return __version__;\n    }\n\n    public init(): void {\n        super.init();\n\n        this.element = this.$el;\n        this.isInitialized = false;\n\n        this.options.rtl = this.getRtlOption();\n\n        if (this.options.closedIcon == null) {\n            this.options.closedIcon = this.getDefaultClosedIcon();\n        }\n\n        this.connectHandlers();\n\n        this.initData();\n    }\n\n    public isDragging(): boolean {\n        return this.dndHandler.isDragging;\n    }\n\n    public isNodeSelected(node?: Node): boolean {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        return this.selectNodeHandler.isNodeSelected(node);\n    }\n\n    public loadData(data: NodeData[], parentNode: Node | null): JQuery {\n        this.doLoadData(data, parentNode);\n        return this.element;\n    }\n\n    /*\n    signatures:\n    - loadDataFromUrl(url, parent_node=null, on_finished=null)\n        loadDataFromUrl('/my_data');\n        loadDataFromUrl('/my_data', node1);\n        loadDataFromUrl('/my_data', node1, function() { console.log('finished'); });\n        loadDataFromUrl('/my_data', null, function() { console.log('finished'); });\n\n    - loadDataFromUrl(parent_node=null, on_finished=null)\n        loadDataFromUrl();\n        loadDataFromUrl(node1);\n        loadDataFromUrl(null, function() { console.log('finished'); });\n        loadDataFromUrl(node1, function() { console.log('finished'); });\n    */\n    public loadDataFromUrl(\n        param1: Node | null | string,\n        param2?: HandleFinishedLoading | Node | null,\n        param3?: HandleFinishedLoading,\n    ): JQuery {\n        if (typeof param1 === \"string\") {\n            // first parameter is url\n            this.doLoadDataFromUrl(\n                param1,\n                param2 as Node | null,\n                param3 ?? null,\n            );\n        } else {\n            // first parameter is not url\n            this.doLoadDataFromUrl(\n                null,\n                param1,\n                param2 as HandleFinishedLoading | null,\n            );\n        }\n\n        return this.element;\n    }\n\n    public moveDown(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveDown(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public moveNode(node?: Node, targetNode?: Node, position?: string): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!targetNode) {\n            throw Error(PARAM_IS_EMPTY + \"targetNode\");\n        }\n\n        if (!position) {\n            throw Error(PARAM_IS_EMPTY + \"position\");\n        }\n\n        const positionIndex = getPosition(position);\n\n        if (positionIndex !== undefined) {\n            this.tree.moveNode(node, targetNode, positionIndex);\n            this.refreshElements(null);\n        }\n\n        return this.element;\n    }\n\n    public moveUp(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveUp(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public openNode(\n        node?: Node,\n        param1?: boolean | OnFinishOpenNode,\n        param2?: OnFinishOpenNode,\n    ): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const parseParams = (): [boolean, OnFinishOpenNode | undefined] => {\n            let onFinished: null | OnFinishOpenNode;\n            let slide: boolean | null;\n\n            if (isFunction(param1)) {\n                onFinished = param1 as OnFinishOpenNode;\n                slide = null;\n            } else {\n                slide = param1 as boolean;\n                onFinished = param2 as OnFinishOpenNode;\n            }\n\n            if (slide == null) {\n                slide = this.options.slide;\n            }\n\n            return [slide, onFinished];\n        };\n\n        const [slide, onFinished] = parseParams();\n\n        this.openNodeInternal(node, slide, onFinished);\n        return this.element;\n    }\n\n    public prependNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam ?? this.tree;\n\n        const node = parentNode.prepend(newNodeInfo);\n\n        this.refreshElements(parentNode);\n\n        return node;\n    }\n\n    public refresh(): JQuery {\n        this.refreshElements(null);\n        return this.element;\n    }\n\n    public refreshHitAreas(): JQuery {\n        this.dndHandler.refresh();\n        return this.element;\n    }\n\n    public reload(onFinished: HandleFinishedLoading | null): JQuery {\n        this.doLoadDataFromUrl(null, null, onFinished);\n        return this.element;\n    }\n\n    public removeFromSelection(node?: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.removeFromSelection(node);\n\n        this.getNodeElementForNode(node).deselect();\n        this.saveState();\n\n        return this.element;\n    }\n\n    public removeNode(node?: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!node.parent) {\n            throw Error(\"Node has no parent\");\n        }\n\n        this.selectNodeHandler.removeFromSelection(node, true); // including children\n\n        const parent = node.parent;\n        node.remove();\n        this.refreshElements(parent);\n\n        return this.element;\n    }\n\n    public scrollToNode(node?: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!node.element) {\n            return this.element;\n        }\n\n        const top =\n            getOffsetTop(node.element) -\n            getOffsetTop(this.$el.get(0) as HTMLElement);\n\n        this.scrollHandler.scrollToY(top);\n\n        return this.element;\n    }\n\n    public selectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): JQuery {\n        this.doSelectNode(node, optionsParam);\n        return this.element;\n    }\n\n    public setOption(option: string, value: unknown): JQuery {\n        (this.options as unknown as Record<string, unknown>)[option] = value;\n        return this.element;\n    }\n\n    public setState(state?: SavedState): JQuery {\n        if (state) {\n            this.saveStateHandler.setInitialState(state);\n            this.refreshElements(null);\n        }\n\n        return this.element;\n    }\n\n    public toggle(node?: Node, slideParam: boolean | null = null): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.is_open) {\n            this.closeNode(node, slide);\n        } else {\n            this.openNode(node, slide);\n        }\n\n        return this.element;\n    }\n\n    public toJson(): string {\n        return JSON.stringify(this.tree.getData());\n    }\n\n    public updateNode(node?: Node, data?: NodeData): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!data) {\n            return this.element;\n        }\n\n        const idIsChanged =\n            typeof data === \"object\" && data.id && data.id !== node.id;\n\n        if (idIsChanged) {\n            this.tree.removeNodeFromIndex(node);\n        }\n\n        node.setData(data);\n\n        if (idIsChanged) {\n            this.tree.addNodeToIndex(node);\n        }\n\n        if (\n            typeof data === \"object\" &&\n            data.children &&\n            data.children instanceof Array\n        ) {\n            node.removeChildren();\n\n            if (data.children.length) {\n                node.loadFromData(data.children as Node[]);\n            }\n        }\n\n        this.refreshElements(node);\n\n        return this.element;\n    }\n\n    private connectHandlers() {\n        const {\n            autoEscape,\n            buttonLeft,\n            closedIcon,\n            dataFilter,\n            dragAndDrop,\n            keyboardSupport,\n            onCanMove,\n            onCanMoveTo,\n            onCreateLi,\n            onDragMove,\n            onDragStop,\n            onGetStateFromStorage,\n            onIsMoveHandle,\n            onLoadFailed,\n            onLoading,\n            onSetStateFromStorage,\n            openedIcon,\n            openFolderDelay,\n            rtl,\n            saveState,\n            showEmptyFolder,\n            slide,\n            tabIndex,\n        } = this.options;\n\n        const closeNode = this.closeNode.bind(this);\n        const getNodeElement = this.getNodeElement.bind(this);\n        const getNodeElementForNode = this.getNodeElementForNode.bind(this);\n        const getNodeById = this.getNodeById.bind(this);\n        const getSelectedNode = this.getSelectedNode.bind(this);\n        const getTree = this.getTree.bind(this);\n        const isFocusOnTree = this.isFocusOnTree.bind(this);\n        const loadData = this.loadData.bind(this);\n        const openNode = this.openNodeInternal.bind(this);\n        const refreshElements = this.refreshElements.bind(this);\n        const refreshHitAreas = this.refreshHitAreas.bind(this);\n        const selectNode = this.selectNode.bind(this);\n        const $treeElement = this.element;\n        const treeElement = this.element.get(0) as HTMLElement;\n        const triggerEvent = this.triggerEvent.bind(this);\n\n        const selectNodeHandler = new SelectNodeHandler({\n            getNodeById,\n        });\n\n        const addToSelection =\n            selectNodeHandler.addToSelection.bind(selectNodeHandler);\n        const getSelectedNodes =\n            selectNodeHandler.getSelectedNodes.bind(selectNodeHandler);\n        const isNodeSelected =\n            selectNodeHandler.isNodeSelected.bind(selectNodeHandler);\n        const removeFromSelection =\n            selectNodeHandler.removeFromSelection.bind(selectNodeHandler);\n        const getMouseDelay = () => this.options.startDndDelay ?? 0;\n\n        const dataLoader = new DataLoader({\n            dataFilter,\n            loadData,\n            onLoadFailed,\n            onLoading,\n            treeElement,\n            triggerEvent,\n        });\n\n        const saveStateHandler = new SaveStateHandler({\n            addToSelection,\n            getNodeById,\n            getSelectedNodes,\n            getTree,\n            onGetStateFromStorage,\n            onSetStateFromStorage,\n            openNode,\n            refreshElements,\n            removeFromSelection,\n            saveState,\n        });\n\n        const scrollHandler = new ScrollHandler({\n            refreshHitAreas,\n            treeElement,\n        });\n\n        const getScrollLeft = scrollHandler.getScrollLeft.bind(scrollHandler);\n\n        const dndHandler = new DragAndDropHandler({\n            autoEscape,\n            getNodeElement,\n            getNodeElementForNode,\n            getScrollLeft,\n            getTree,\n            onCanMove,\n            onCanMoveTo,\n            onDragMove,\n            onDragStop,\n            onIsMoveHandle,\n            openFolderDelay,\n            openNode,\n            refreshElements,\n            slide,\n            treeElement,\n            triggerEvent,\n        });\n\n        const keyHandler = new KeyHandler({\n            closeNode,\n            getSelectedNode,\n            isFocusOnTree,\n            keyboardSupport,\n            openNode,\n            selectNode,\n        });\n\n        const renderer = new ElementsRenderer({\n            $element: $treeElement,\n            autoEscape,\n            buttonLeft,\n            closedIcon,\n            dragAndDrop,\n            getTree,\n            isNodeSelected,\n            onCreateLi,\n            openedIcon,\n            rtl,\n            showEmptyFolder,\n            tabIndex,\n        });\n\n        const getNode = this.getNode.bind(this);\n        const onMouseCapture = this.mouseCapture.bind(this);\n        const onMouseDrag = this.mouseDrag.bind(this);\n        const onMouseStart = this.mouseStart.bind(this);\n        const onMouseStop = this.mouseStop.bind(this);\n\n        const mouseHandler = new MouseHandler({\n            element: treeElement,\n            getMouseDelay,\n            getNode,\n            onClickButton: this.toggle.bind(this),\n            onClickTitle: this.doSelectNode.bind(this),\n            onMouseCapture,\n            onMouseDrag,\n            onMouseStart,\n            onMouseStop,\n            triggerEvent,\n            useContextMenu: this.options.useContextMenu,\n        });\n\n        this.dataLoader = dataLoader;\n        this.dndHandler = dndHandler;\n        this.keyHandler = keyHandler;\n        this.mouseHandler = mouseHandler;\n        this.renderer = renderer;\n        this.saveStateHandler = saveStateHandler;\n        this.scrollHandler = scrollHandler;\n        this.selectNodeHandler = selectNodeHandler;\n    }\n\n    private containsElement(element: HTMLElement): boolean {\n        const node = this.getNode(element);\n\n        return node != null && node.tree === this.tree;\n    }\n\n    private createFolderElement(node: Node) {\n        const closedIconElement = this.renderer.closedIconElement;\n        const getScrollLeft = this.scrollHandler.getScrollLeft.bind(\n            this.scrollHandler,\n        );\n        const openedIconElement = this.renderer.openedIconElement;\n        const tabIndex = this.options.tabIndex;\n        const treeElement = this.element.get(0) as HTMLElement;\n        const triggerEvent = this.triggerEvent.bind(this);\n\n        return new FolderElement({\n            closedIconElement,\n            getScrollLeft,\n            node,\n            openedIconElement,\n            tabIndex,\n            treeElement,\n            triggerEvent,\n        });\n    }\n\n    private createNodeElement(node: Node) {\n        const getScrollLeft = this.scrollHandler.getScrollLeft.bind(\n            this.scrollHandler,\n        );\n        const tabIndex = this.options.tabIndex;\n        const treeElement = this.element.get(0) as HTMLElement;\n\n        return new NodeElement({\n            getScrollLeft,\n            node,\n            tabIndex,\n            treeElement,\n        });\n    }\n\n    private deselectCurrentNode(): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            this.removeFromSelection(node);\n        }\n    }\n\n    private deselectNodes(parentNode: Node): void {\n        const selectedNodesUnderParent =\n            this.selectNodeHandler.getSelectedNodesUnder(parentNode);\n        for (const n of selectedNodesUnderParent) {\n            this.selectNodeHandler.removeFromSelection(n);\n        }\n    }\n\n    private doLoadData(data: NodeData[] | null, parentNode: Node | null): void {\n        if (data) {\n            if (parentNode) {\n                this.deselectNodes(parentNode);\n                this.loadSubtree(data, parentNode);\n            } else {\n                this.initTree(data);\n            }\n\n            if (this.isDragging()) {\n                this.dndHandler.refresh();\n            }\n        }\n\n        this.triggerEvent(\"tree.load_data\", {\n            parent_node: parentNode,\n            tree_data: data,\n        });\n    }\n\n    private doLoadDataFromUrl(\n        urlInfoParam: JQuery.AjaxSettings | null | string,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null,\n    ): void {\n        const urlInfo = urlInfoParam ?? this.getDataUrlInfo(parentNode);\n\n        this.dataLoader.loadFromUrl(urlInfo, parentNode, onFinished);\n    }\n\n    private doSelectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): void {\n        const saveState = (): void => {\n            if (this.options.saveState) {\n                this.saveStateHandler.saveState();\n            }\n        };\n\n        if (!node) {\n            // Called with empty node -> deselect current node\n            this.deselectCurrentNode();\n            saveState();\n            return;\n        }\n        const defaultOptions = { mustSetFocus: true, mustToggle: true };\n        const selectOptions = { ...defaultOptions, ...(optionsParam ?? {}) };\n\n        const canSelect = (): boolean => {\n            if (this.options.onCanSelectNode) {\n                return (\n                    this.options.selectable &&\n                    this.options.onCanSelectNode(node)\n                );\n            } else {\n                return this.options.selectable;\n            }\n        };\n\n        if (!canSelect()) {\n            return;\n        }\n\n        if (this.selectNodeHandler.isNodeSelected(node)) {\n            if (selectOptions.mustToggle) {\n                this.deselectCurrentNode();\n                this.triggerEvent(\"tree.select\", {\n                    node: null,\n                    previous_node: node,\n                });\n            }\n        } else {\n            const deselectedNode = this.getSelectedNode() || null;\n            this.deselectCurrentNode();\n            this.addToSelection(node, selectOptions.mustSetFocus);\n\n            this.triggerEvent(\"tree.select\", {\n                deselected_node: deselectedNode,\n                node,\n            });\n            this.openParents(node);\n        }\n\n        saveState();\n    }\n\n    private getAutoOpenMaxLevel(): number {\n        if (this.options.autoOpen === true) {\n            return -1;\n        } else if (typeof this.options.autoOpen === \"number\") {\n            return this.options.autoOpen;\n        } else if (typeof this.options.autoOpen === \"string\") {\n            return parseInt(this.options.autoOpen, 10);\n        } else {\n            return 0;\n        }\n    }\n\n    private getDataUrlInfo(node: Node | null): JQuery.AjaxSettings | null {\n        const dataUrl =\n            this.options.dataUrl ?? (this.element.data(\"url\") as null | string);\n\n        const getUrlFromString = (url: string): JQuery.AjaxSettings => {\n            const urlInfo: JQuery.AjaxSettings = { url };\n\n            setUrlInfoData(urlInfo);\n\n            return urlInfo;\n        };\n\n        const setUrlInfoData = (urlInfo: JQuery.AjaxSettings): void => {\n            if (node?.id) {\n                // Load on demand of a subtree; add node parameter\n                const data = { node: node.id };\n                urlInfo.data = data;\n            } else {\n                // Add selected_node parameter\n                const selectedNodeId = this.getNodeIdToBeSelected();\n                if (selectedNodeId) {\n                    const data = { selected_node: selectedNodeId };\n                    urlInfo.data = data;\n                }\n            }\n        };\n\n        if (typeof dataUrl === \"function\") {\n            return dataUrl(node);\n        } else if (typeof dataUrl === \"string\") {\n            return getUrlFromString(dataUrl);\n        } else if (dataUrl && typeof dataUrl === \"object\") {\n            setUrlInfoData(dataUrl);\n            return dataUrl;\n        } else {\n            return null;\n        }\n    }\n\n    private getDefaultClosedIcon(): string {\n        if (this.options.rtl) {\n            // triangle to the left\n            return \"&#x25c0;\";\n        } else {\n            // triangle to the right\n            return \"&#x25ba;\";\n        }\n    }\n\n    private getNode(element: HTMLElement): Node | null {\n        const liElement = element.closest(\"li.jqtree_common\");\n\n        if (liElement) {\n            return jQuery(liElement).data(\"node\") as Node;\n        } else {\n            return null;\n        }\n    }\n\n    private getNodeElement(element: HTMLElement): NodeElement | null {\n        const node = this.getNode(element);\n        if (node) {\n            return this.getNodeElementForNode(node);\n        } else {\n            return null;\n        }\n    }\n\n    private getNodeElementForNode(node: Node): NodeElement {\n        if (node.isFolder()) {\n            return this.createFolderElement(node);\n        } else {\n            return this.createNodeElement(node);\n        }\n    }\n\n    private getNodeIdToBeSelected(): NodeId | null {\n        if (this.options.saveState) {\n            return this.saveStateHandler.getNodeIdToBeSelected();\n        } else {\n            return null;\n        }\n    }\n\n    private getRtlOption(): boolean {\n        if (this.options.rtl != null) {\n            return this.options.rtl;\n        } else {\n            const dataRtl = this.element.data(\"rtl\") as unknown;\n\n            if (\n                dataRtl !== null &&\n                dataRtl !== false &&\n                dataRtl !== undefined\n            ) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    private initData(): void {\n        if (this.options.data) {\n            this.doLoadData(this.options.data, null);\n        } else {\n            const dataUrl = this.getDataUrlInfo(null);\n\n            if (dataUrl) {\n                this.doLoadDataFromUrl(null, null, null);\n            } else {\n                this.doLoadData([], null);\n            }\n        }\n    }\n\n    private initTree(data: NodeData[]): void {\n        const doInit = (): void => {\n            if (!this.isInitialized) {\n                this.isInitialized = true;\n                this.triggerEvent(\"tree.init\");\n            }\n        };\n\n        this.tree = new this.options.nodeClass(\n            null,\n            true,\n            this.options.nodeClass,\n        );\n\n        this.selectNodeHandler.clear();\n\n        this.tree.loadFromData(data);\n\n        const mustLoadOnDemand = this.setInitialState();\n\n        this.refreshElements(null);\n\n        if (!mustLoadOnDemand) {\n            doInit();\n        } else {\n            // Load data on demand and then init the tree\n            this.setInitialStateOnDemand(doInit);\n        }\n    }\n\n    private isFocusOnTree(): boolean {\n        const activeElement = document.activeElement;\n\n        return Boolean(\n            activeElement &&\n                activeElement.tagName === \"SPAN\" &&\n                this.containsElement(activeElement as HTMLElement),\n        );\n    }\n\n    private isSelectedNodeInSubtree(subtree: Node): boolean {\n        const selectedNode = this.getSelectedNode();\n\n        if (!selectedNode) {\n            return false;\n        } else {\n            return subtree === selectedNode || subtree.isParentOf(selectedNode);\n        }\n    }\n\n    private loadFolderOnDemand(\n        node: Node,\n        slide = true,\n        onFinished?: OnFinishOpenNode,\n    ): void {\n        node.is_loading = true;\n\n        this.doLoadDataFromUrl(null, node, () => {\n            this.openNodeInternal(node, slide, onFinished);\n        });\n    }\n\n    private loadSubtree(data: NodeData[], parentNode: Node): void {\n        parentNode.loadFromData(data);\n\n        parentNode.load_on_demand = false;\n        parentNode.is_loading = false;\n\n        this.refreshElements(parentNode);\n    }\n\n    private mouseCapture(positionInfo: PositionInfo): boolean | null {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseCapture(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    private mouseDrag(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            const result = this.dndHandler.mouseDrag(positionInfo);\n\n            this.scrollHandler.checkScrolling(positionInfo);\n            return result;\n        } else {\n            return false;\n        }\n    }\n\n    private mouseStart(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStart(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    private mouseStop(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            this.scrollHandler.stopScrolling();\n            return this.dndHandler.mouseStop(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    private openNodeInternal(\n        node: Node,\n        slide = true,\n        onFinished?: OnFinishOpenNode,\n    ): void {\n        const doOpenNode = (\n            _node: Node,\n            _slide: boolean,\n            _onFinished?: OnFinishOpenNode,\n        ): void => {\n            if (!node.children.length) {\n                return;\n            }\n\n            const folderElement = this.createFolderElement(_node);\n            folderElement.open(\n                _onFinished,\n                _slide,\n                this.options.animationSpeed,\n            );\n        };\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            if (node.load_on_demand) {\n                this.loadFolderOnDemand(node, slide, onFinished);\n            } else {\n                let parent = node.parent;\n\n                while (parent) {\n                    // nb: do not open root element\n                    if (parent.parent) {\n                        doOpenNode(parent, false);\n                    }\n                    parent = parent.parent;\n                }\n\n                doOpenNode(node, slide, onFinished);\n                this.saveState();\n            }\n        }\n    }\n\n    private openParents(node: Node) {\n        const parent = node.parent;\n\n        if (parent?.parent && !parent.is_open) {\n            this.openNode(parent, false);\n        }\n    }\n\n    /*\n    Redraw the tree or part of the tree.\n     from_node: redraw this subtree\n    */\n    private refreshElements(fromNode: Node | null): void {\n        const mustSetFocus = this.isFocusOnTree();\n        const mustSelect = fromNode\n            ? this.isSelectedNodeInSubtree(fromNode)\n            : false;\n\n        this.renderer.render(fromNode);\n\n        if (mustSelect) {\n            this.selectCurrentNode(mustSetFocus);\n        }\n\n        this.triggerEvent(\"tree.refresh\");\n    }\n\n    private saveState(): void {\n        if (this.options.saveState) {\n            this.saveStateHandler.saveState();\n        }\n    }\n\n    private selectCurrentNode(mustSetFocus: boolean): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            const nodeElement = this.getNodeElementForNode(node);\n            nodeElement.select(mustSetFocus);\n        }\n    }\n\n    // Set initial state, either by restoring the state or auto-opening nodes\n    // result: must load nodes on demand?\n    private setInitialState(): boolean {\n        const restoreState = (): [boolean, boolean] => {\n            // result: is state restored, must load on demand?\n            if (!this.options.saveState) {\n                return [false, false];\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return [false, false];\n                } else {\n                    const mustLoadOnDemand =\n                        this.saveStateHandler.setInitialState(state);\n\n                    // return true: the state is restored\n                    return [true, mustLoadOnDemand];\n                }\n            }\n        };\n\n        const autoOpenNodes = (): boolean => {\n            // result: must load on demand?\n            if (this.options.autoOpen === false) {\n                return false;\n            }\n\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let mustLoadOnDemand = false;\n\n            this.tree.iterate((node: Node, level: number) => {\n                if (node.load_on_demand) {\n                    mustLoadOnDemand = true;\n                    return false;\n                } else if (!node.hasChildren()) {\n                    return false;\n                } else {\n                    node.is_open = true;\n                    return level !== maxLevel;\n                }\n            });\n\n            return mustLoadOnDemand;\n        };\n\n        let [isRestored, mustLoadOnDemand] = restoreState(); // eslint-disable-line prefer-const\n\n        if (!isRestored) {\n            mustLoadOnDemand = autoOpenNodes();\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    // Set the initial state for nodes that are loaded on demand\n    // Call cb_finished when done\n    private setInitialStateOnDemand(cbFinished: () => void): void {\n        const restoreState = (): boolean => {\n            if (!this.options.saveState) {\n                return false;\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return false;\n                } else {\n                    this.saveStateHandler.setInitialStateOnDemand(\n                        state,\n                        cbFinished,\n                    );\n\n                    return true;\n                }\n            }\n        };\n\n        const autoOpenNodes = (): void => {\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let loadingCount = 0;\n\n            const loadAndOpenNode = (node: Node): void => {\n                loadingCount += 1;\n                this.openNodeInternal(node, false, () => {\n                    loadingCount -= 1;\n                    openNodes();\n                });\n            };\n\n            const openNodes = (): void => {\n                this.tree.iterate((node: Node, level: number) => {\n                    if (node.load_on_demand) {\n                        if (!node.is_loading) {\n                            loadAndOpenNode(node);\n                        }\n\n                        return false;\n                    } else {\n                        this.openNodeInternal(node, false);\n\n                        return level !== maxLevel;\n                    }\n                });\n\n                if (loadingCount === 0) {\n                    cbFinished();\n                }\n            };\n\n            openNodes();\n        };\n\n        if (!restoreState()) {\n            autoOpenNodes();\n        }\n    }\n\n    private triggerEvent(\n        eventName: string,\n        values?: Record<string, unknown>,\n    ): JQuery.Event {\n        const event = jQuery.Event(eventName, values);\n        this.element.trigger(event);\n        return event;\n    }\n}\n\nSimpleWidget.register(JqTreeWidget, \"tree\");\n"],"names":["DataLoader","constructor","_ref","dataFilter","loadData","onLoadFailed","onLoading","treeElement","triggerEvent","this","loadFromUrl","urlInfo","parentNode","onFinished","element","getDomElement","addLoadingClass","notifyLoading","stopLoading","removeLoadingClass","submitRequest","data","parseData","jqXHR","classList","add","isLoading","node","$el","jQuery","parsedData","JSON","parse","remove","urlInfoInput","handleSuccess","handleError","ajaxSettings","cache","dataType","error","method","success","url","toUpperCase","ajax","Position","positionNames","after","After","before","Before","inside","Inside","none","None","getPositionName","position","name","Object","prototype","hasOwnProperty","call","getBoolString","value","getOffsetTop","getElementPosition","top","rect","getBoundingClientRect","left","x","window","scrollX","y","scrollY","DragElement","autoEscape","nodeName","offsetX","offsetY","createElement","appendChild","move","pageX","pageY","style","document","textContent","innerHTML","generateHitAreasForGroup","hitAreas","positionsInGroup","bottom","positionCount","Math","min","length","areaHeight","round","areaTop","i","push","generateHitAreas","tree","currentNode","treeBottom","generateHitAreasFromPositions","hitPositions","previousTop","group","generateHitPositions","lastTop","addHitPosition","iterateVisibleNodes","handleAfterOpenFolder","handleClosedFolder","handleFirstNode","handleNode","handleOpenFolder","isFirstNode","iterate","nextNode","mustIterateInside","is_open","hasChildren","offsetParent","childrenLength","children","forEach","_","child","nextChild","height","clientHeight","DragAndDropHandler","getNodeElement","getNodeElementForNode","getScrollLeft","getTree","onCanMove","onCanMoveTo","onDragMove","onDragStop","onIsMoveHandle","openNode","refreshElements","slide","hoveredArea","isDragging","currentItem","mouseCapture","positionInfo","target","mustCaptureElement","nodeElement","mouseDrag","dragElement","area","findHoveredArea","canMoveToArea","isFolder","stopOpenFolderTimer","mustOpenFolderTimer","startOpenFolderTimer","updateDropHint","removeDropHint","originalEvent","mouseStart","refresh","mouseStop","moveItem","clear","removeHover","removeHitAreas","positionName","dimensions","getTreeDimensions","right","items","compareFn","low","high","mid","item","undefined","compareResult","binarySearch","treePosition","clientWidth","movedNode","targetNode","previousParent","parent","doMove","moveNode","move_info","do_move","moved_node","original_event","previous_parent","target_node","isDefaultPrevented","previousGhost","folder","openFolder","openFolderDelay","openFolderTimer","setTimeout","clearTimeout","addDropHint","ElementsRenderer","$element","buttonLeft","closedIcon","dragAndDrop","isNodeSelected","onCreateLi","openedIcon","rtl","showEmptyFolder","tabIndex","openedIconElement","createButtonElement","closedIconElement","render","fromNode","renderFromNode","renderFromRoot","$previousLi","li","createLi","getLevel","createDomElements","empty","attachNodeData","div","createTextNode","nodeType","isRootNode","level","ul","createUl","createFolderLi","isSelected","buttonClasses","getButtonClasses","folderClasses","getFolderClasses","iconElement","className","setAttribute","buttonLink","cloneNode","titleSpan","createTitleSpan","Boolean","isEmptyFolder","createNodeLi","liClasses","classString","join","classes","setTreeItemAriaAttributes","role","is_loading","KeyHandler","closeNode","getSelectedNode","isFocusOnTree","keyboardSupport","selectNode","originalSelectNode","addEventListener","handleKeyDown","deinit","removeEventListener","moveDown","selectedNode","getNextVisibleNode","moveUp","getPreviousVisibleNode","canHandleKeyboard","e","isKeyHandled","key","moveLeft","moveRight","preventDefault","getParent","getPositionInfoFromMouseEvent","getPositionInfoFromTouch","touch","MouseHandler","getMouseDelay","getNode","onClickButton","onClickTitle","onMouseCapture","onMouseDrag","onMouseStart","onMouseStop","useContextMenu","handleClick","handleDblclick","mouseDown","passive","touchStart","handleContextmenu","isMouseStarted","mouseDelayTimer","isMouseDelayMet","mouseDownInfo","removeMouseMoveEventListeners","getClickTarget","button","closest","type","jqTreeElement","clickTarget","stopPropagation","click_event","handleMouseDown","handleMouseUp","handleStartMouse","handleMouseMove","cancelable","mouseMove","touchMove","mouseUp","touchEnd","mouseDelay","startMouseDelayTimer","touches","isNodeRecordWithChildren","Array","Node","nodeData","arguments","isRoot","nodeClass","load_on_demand","setData","idMapping","Map","addAfter","nodeInfo","createNode","childIndex","getChildIndex","addChildAtPosition","loadChildrenFromData","addBefore","addChild","setParent","index","splice","addNodeToIndex","id","set","addParent","newParent","originalParent","append","filter","f","result","indexOf","getData","getDataFromNodes","nodes","map","tmpNode","k","v","getLastChild","lastChild","getNextNode","nextSibling","getNextSibling","nextIndex","getNodeByCallback","callback","getNodeById","nodeId","get","getNodeByName","getNodeByNameMustExist","n","Error","getNodesByProperty","getPreviousNode","previousSibling","getPreviousSibling","previousIndex","initFromData","addChildren","childrenData","addNode","isParentOf","_iterate","loadFromData","removeChildren","childData","doRemoveChild","prepend","removeChild","removeNodeFromIndex","delete","o","getNodeClass","BorderDropHint","scrollLeft","querySelector","hint","width","max","offsetWidth","GhostDropHint","ghost","createGhostElement","moveAfter","moveBefore","moveInsideOpenFolder","moveInside","circleSpan","lineSpan","childElement","NodeElement","init","mustShowBorderDropHint","deselect","getTitleSpan","removeAttribute","blur","select","mustSetFocus","toString","focus","getUl","FolderElement","super","close","animationSpeed","getButton","icon","doClose","slideUp","hide","open","doOpen","slideDown","show","SaveStateHandler","addToSelection","getSelectedNodes","onGetStateFromStorage","onSetStateFromStorage","removeFromSelection","saveState","saveStateOption","getNodeIdToBeSelected","state","getStateFromStorage","selected_node","getState","open_nodes","getOpenNodeIds","openNodes","getSelectedNodeIds","selectedNodeIds","jsonData","loadFromStorage","parseState","stringify","localStorage","setItem","getKeyName","setInitialState","mustLoadOnDemand","openInitialNodes","resetSelection","selectInitialNodes","setInitialStateOnDemand","cbFinished","loadingCount","nodeIds","newNodesIds","loadAndOpenNode","getItem","selectCount","ContainerScrollParent","container","refreshHitAreas","checkHorizontalScrolling","newHorizontalScrollDirection","getNewHorizontalScrollDirection","horizontalScrollDirection","horizontalScrollTimeout","verticalScrollTimeout","scrollHorizontally","bind","checkVerticalScrolling","newVerticalScrollDirection","getNewVerticalScrollDirection","verticalScrollDirection","scrollVertically","scrollToY","scrollTop","stopScrolling","scrollParentTop","scrollParentBottom","scrollParentOffset","rightEdge","leftEdge","getScrollParentTop","getScrollParentBottom","distance","scrollBy","behavior","DocumentScrollParent","documentElement","treeTop","documentScrollHeight","documentScrollWidth","canScrollDown","getDocumentScrollHeight","canScrollRight","getDocumentScrollWidth","scrollHeight","scrollWidth","isNearLeftEdge","innerWidth","innerHeight","isOverflow","overflowValue","hasOverFlow","getComputedStyle","overflowX","overflowY","createScrollParent","parentElement","getParentWithOverflow","tagName","ScrollHandler","scrollParent","checkScrolling","getScrollParent","SelectNodeHandler","selectedNodes","Set","selectedSingleNode","getSelectedNodesUnder","has","includeChildren","register","widgetClass","widgetName","getDataKey","getWidgetData","el","dataKey","widget","SimpleWidget","createWidget","options","fn","argument1","functionName","destroy","removeData","destroyWidget","_len","args","_key","callFunction","widgetFunction","apply","static","defaults","NODE_PARAM_IS_EMPTY","PARAM_IS_EMPTY","JqTreeWidget","autoOpen","dataUrl","onCanSelectNode","selectable","startDndDelay","addNodeAfter","newNodeInfo","existingNode","newNode","addNodeBefore","addParentNode","selectNodeHandler","openParents","appendNode","parentNodeParam","slideParam","createFolderElement","off","keyHandler","mouseHandler","getNodeByHtmlElement","inputElement","HTMLElement","saveStateHandler","getVersion","isInitialized","getRtlOption","getDefaultClosedIcon","connectHandlers","initData","dndHandler","doLoadData","loadDataFromUrl","param1","param2","param3","doLoadDataFromUrl","positionIndex","parseParams","openNodeInternal","prependNode","reload","removeNode","scrollToNode","scrollHandler","optionsParam","doSelectNode","setOption","option","setState","toggle","toJson","updateNode","idIsChanged","$treeElement","dataLoader","renderer","containsElement","createNodeElement","deselectCurrentNode","deselectNodes","selectedNodesUnderParent","loadSubtree","initTree","parent_node","tree_data","urlInfoParam","getDataUrlInfo","selectOptions","mustToggle","canSelect","previous_node","deselectedNode","deselected_node","getAutoOpenMaxLevel","parseInt","setUrlInfoData","selectedNodeId","getUrlFromString","liElement","dataRtl","doInit","activeElement","isSelectedNodeInSubtree","subtree","loadFolderOnDemand","doOpenNode","_node","_slide","_onFinished","mustSelect","selectCurrentNode","autoOpenNodes","maxLevel","isRestored","restoreState","eventName","values","event","Event","trigger"],"mappings":"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"}