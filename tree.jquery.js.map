{"version":3,"file":"tree.jquery.js","sources":["src/version.ts","src/node.ts","src/dragAndDropHandler.ts","src/util.ts","src/elementsRenderer.ts","src/dataLoader.ts","src/keyHandler.ts","src/simple.widget.ts","src/mouse.widget.ts","src/saveStateHandler.ts","src/scrollHandler.ts","src/selectNodeHandler.ts","src/nodeElement.ts","src/tree.jquery.ts"],"sourcesContent":["const version = \"1.6.2\";\n\nexport default version;\n","interface NodeRecordWithChildren extends NodeRecord {\n    children: NodeData[];\n}\n\nexport enum Position {\n    Before = 1,\n    After,\n    Inside,\n    None,\n}\n\nconst positionNames: Record<string, Position> = {\n    before: Position.Before,\n    after: Position.After,\n    inside: Position.Inside,\n    none: Position.None,\n};\n\ntype IterateCallback = (node: Node, level: number) => boolean;\n\nexport const getPositionName = (position: Position): string => {\n    for (const name in positionNames) {\n        if (Object.prototype.hasOwnProperty.call(positionNames, name)) {\n            if (positionNames[name] === position) {\n                return name;\n            }\n        }\n    }\n\n    return \"\";\n};\n\nexport const getPosition = (name: string): Position | undefined =>\n    positionNames[name];\n\nconst isNodeRecordWithChildren = (\n    data: NodeData\n): data is NodeRecordWithChildren =>\n    typeof data === \"object\" &&\n    \"children\" in data &&\n    data[\"children\"] instanceof Array;\n\nexport class Node implements INode {\n    public id?: NodeId;\n    public name: string;\n    public children: Node[];\n    public parent: Node | null;\n    public idMapping: Map<NodeId, Node>;\n    public tree?: Node;\n    public nodeClass?: typeof Node;\n    public load_on_demand: boolean;\n    public is_open: boolean;\n    public element: HTMLElement;\n    public is_loading: boolean;\n    public isEmptyFolder: boolean;\n\n    [key: string]: unknown;\n\n    constructor(o: NodeData | null = null, isRoot = false, nodeClass = Node) {\n        this.name = \"\";\n        this.isEmptyFolder = false;\n        this.load_on_demand = false;\n\n        this.setData(o);\n\n        this.children = [];\n        this.parent = null;\n\n        if (isRoot) {\n            this.idMapping = new Map<NodeId, Node>();\n            this.tree = this;\n            this.nodeClass = nodeClass;\n        }\n    }\n\n    /*\n    Set the data of this node.\n\n    setData(string): set the name of the node\n    setdata(object): set attributes of the node\n\n    Examples:\n        setdata('node1')\n\n        setData({ name: 'node1', id: 1});\n\n        setData({ name: 'node2', id: 2, color: 'green'});\n\n    * This is an internal function; it is not in the docs\n    * Does not remove existing node values\n    */\n    public setData(o: NodeData | null): void {\n        if (!o) {\n            return;\n        } else if (typeof o === \"string\") {\n            this.name = o;\n        } else if (typeof o === \"object\") {\n            for (const key in o) {\n                if (Object.prototype.hasOwnProperty.call(o, key)) {\n                    const value = o[key];\n\n                    if (key === \"label\" || key === \"name\") {\n                        // You can use the 'label' key instead of 'name'; this is a legacy feature\n                        if (typeof value === \"string\") {\n                            this.name = value;\n                        }\n                    } else if (key !== \"children\" && key !== \"parent\") {\n                        // You can't update the children or the parent using this function\n                        this[key] = value;\n                    }\n                }\n            }\n        }\n    }\n\n    /*\n    Create tree from data.\n\n    Structure of data is:\n    [\n        {\n            name: 'node1',\n            children: [\n                { name: 'child1' },\n                { name: 'child2' }\n            ]\n        },\n        {\n            name: 'node2'\n        }\n    ]\n    */\n    public loadFromData(data: NodeData[]): Node {\n        this.removeChildren();\n\n        for (const o of data) {\n            const node = this.createNode(o);\n            this.addChild(node);\n\n            if (isNodeRecordWithChildren(o)) {\n                if (o.children.length === 0) {\n                    node.isEmptyFolder = true;\n                } else {\n                    node.loadFromData(o.children);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /*\n    Add child.\n\n    tree.addChild(\n        new Node('child1')\n    );\n    */\n    public addChild(node: Node): void {\n        this.children.push(node);\n        node.setParent(this);\n    }\n\n    /*\n    Add child at position. Index starts at 0.\n\n    tree.addChildAtPosition(\n        new Node('abc'),\n        1\n    );\n    */\n    public addChildAtPosition(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        node.setParent(this);\n    }\n\n    /*\n    Remove child. This also removes the children of the node.\n\n    tree.removeChild(tree.children[0]);\n    */\n    public removeChild(node: Node): void {\n        // remove children from the index\n        node.removeChildren();\n\n        this.doRemoveChild(node);\n    }\n\n    /*\n    Get child index.\n\n    var index = getChildIndex(node);\n    */\n    public getChildIndex(node: Node): number {\n        return this.children.indexOf(node);\n    }\n\n    /*\n    Does the tree have children?\n\n    if (tree.hasChildren()) {\n        //\n    }\n    */\n    public hasChildren(): boolean {\n        return this.children.length !== 0;\n    }\n\n    public isFolder(): boolean {\n        return this.hasChildren() || this.load_on_demand;\n    }\n\n    /*\n    Iterate over all the nodes in the tree.\n\n    Calls callback with (node, level).\n\n    The callback must return true to continue the iteration on current node.\n\n    tree.iterate(\n        function(node, level) {\n           console.log(node.name);\n\n           // stop iteration after level 2\n           return (level <= 2);\n        }\n    );\n\n    */\n    public iterate(callback: IterateCallback): void {\n        const _iterate = (node: Node, level: number): void => {\n            if (node.children) {\n                for (const child of node.children) {\n                    const result = callback(child, level);\n\n                    if (result && child.hasChildren()) {\n                        _iterate(child, level + 1);\n                    }\n                }\n            }\n        };\n\n        _iterate(this, 0);\n    }\n\n    /*\n    Move node relative to another node.\n\n    Argument position: Position.BEFORE, Position.AFTER or Position.Inside\n\n    // move node1 after node2\n    tree.moveNode(node1, node2, Position.AFTER);\n    */\n    public moveNode(\n        movedNode: Node,\n        targetNode: Node,\n        position: Position\n    ): boolean {\n        if (!movedNode.parent || movedNode.isParentOf(targetNode)) {\n            // - Node is parent of target node\n            // - Or, parent is empty\n            return false;\n        } else {\n            movedNode.parent.doRemoveChild(movedNode);\n\n            switch (position) {\n                case Position.After: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode) + 1\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Before: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode)\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Inside: {\n                    // move inside as first child\n                    targetNode.addChildAtPosition(movedNode, 0);\n                    return true;\n                }\n\n                default:\n                    return false;\n            }\n        }\n    }\n\n    /*\n    Get the tree as data.\n    */\n    public getData(includeParent = false): NodeRecord[] {\n        const getDataFromNodes = (nodes: Node[]): Record<string, unknown>[] => {\n            return nodes.map((node) => {\n                const tmpNode: Record<string, unknown> = {};\n\n                for (const k in node) {\n                    if (\n                        [\n                            \"parent\",\n                            \"children\",\n                            \"element\",\n                            \"idMapping\",\n                            \"load_on_demand\",\n                            \"nodeClass\",\n                            \"tree\",\n                            \"isEmptyFolder\",\n                        ].indexOf(k) === -1 &&\n                        Object.prototype.hasOwnProperty.call(node, k)\n                    ) {\n                        const v = node[k];\n                        tmpNode[k] = v;\n                    }\n                }\n\n                if (node.hasChildren()) {\n                    tmpNode[\"children\"] = getDataFromNodes(node.children);\n                }\n\n                return tmpNode;\n            });\n        };\n\n        if (includeParent) {\n            return getDataFromNodes([this]);\n        } else {\n            return getDataFromNodes(this.children);\n        }\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.getNodeByCallback((node: Node) => node.name === name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        const node = this.getNodeByCallback((n: Node) => n.name === name);\n\n        if (!node) {\n            throw `Node with name ${name} not found`;\n        }\n\n        return node;\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        let result: Node | null = null;\n\n        this.iterate((node: Node) => {\n            if (result) {\n                return false;\n            } else if (callback(node)) {\n                result = node;\n                return false;\n            } else {\n                return true;\n            }\n        });\n\n        return result;\n    }\n\n    public addAfter(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex + 1);\n\n            if (\n                isNodeRecordWithChildren(nodeInfo) &&\n                nodeInfo.children.length\n            ) {\n                node.loadFromData(nodeInfo.children);\n            }\n\n            return node;\n        }\n    }\n\n    public addBefore(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex);\n\n            if (\n                isNodeRecordWithChildren(nodeInfo) &&\n                nodeInfo.children.length\n            ) {\n                node.loadFromData(nodeInfo.children);\n            }\n\n            return node;\n        }\n    }\n\n    public addParent(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const newParent = this.createNode(nodeInfo);\n\n            if (this.tree) {\n                newParent.setParent(this.tree);\n            }\n            const originalParent = this.parent;\n\n            for (const child of originalParent.children) {\n                newParent.addChild(child);\n            }\n\n            originalParent.children = [];\n            originalParent.addChild(newParent);\n            return newParent;\n        }\n    }\n\n    public remove(): void {\n        if (this.parent) {\n            this.parent.removeChild(this);\n            this.parent = null;\n        }\n    }\n\n    public append(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChild(node);\n\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            node.loadFromData(nodeInfo.children);\n        }\n\n        return node;\n    }\n\n    public prepend(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChildAtPosition(node, 0);\n\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            node.loadFromData(nodeInfo.children);\n        }\n\n        return node;\n    }\n\n    public isParentOf(node: Node): boolean {\n        let parent = node.parent;\n\n        while (parent) {\n            if (parent === this) {\n                return true;\n            }\n\n            parent = parent.parent;\n        }\n\n        return false;\n    }\n\n    public getLevel(): number {\n        let level = 0;\n        let node: Node = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n        while (node.parent) {\n            level += 1;\n            node = node.parent;\n        }\n\n        return level;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.idMapping.get(nodeId) || null;\n    }\n\n    public addNodeToIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.set(node.id, node);\n        }\n    }\n\n    public removeNodeFromIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.delete(node.id);\n        }\n    }\n\n    public removeChildren(): void {\n        this.iterate((child: Node) => {\n            this.tree?.removeNodeFromIndex(child);\n            return true;\n        });\n\n        this.children = [];\n    }\n\n    public getPreviousSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousIndex = this.parent.getChildIndex(this) - 1;\n            if (previousIndex >= 0) {\n                return this.parent.children[previousIndex];\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNextSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const nextIndex = this.parent.getChildIndex(this) + 1;\n            if (nextIndex < this.parent.children.length) {\n                return this.parent.children[nextIndex];\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.filter((node: Node) => node[key] === value);\n    }\n\n    public filter(f: (node: Node) => boolean): Node[] {\n        const result: Node[] = [];\n\n        this.iterate((node: Node) => {\n            if (f(node)) {\n                result.push(node);\n            }\n\n            return true;\n        });\n\n        return result;\n    }\n\n    public getNextNode(includeChildren = true): Node | null {\n        if (includeChildren && this.hasChildren() && this.is_open) {\n            // First child\n            return this.children[0];\n        } else {\n            if (!this.parent) {\n                return null;\n            } else {\n                const nextSibling = this.getNextSibling();\n                if (nextSibling) {\n                    // Next sibling\n                    return nextSibling;\n                } else {\n                    // Next node of parent\n                    return this.parent.getNextNode(false);\n                }\n            }\n        }\n    }\n\n    public getPreviousNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n            if (previousSibling) {\n                if (\n                    !previousSibling.hasChildren() ||\n                    !previousSibling.is_open\n                ) {\n                    // Previous sibling\n                    return previousSibling;\n                } else {\n                    // Last child of previous sibling\n                    return previousSibling.getLastChild();\n                }\n            } else {\n                return this.getParent();\n            }\n        }\n    }\n\n    public getParent(): Node | null {\n        // Return parent except if it is the root node\n        if (!this.parent) {\n            return null;\n        } else if (!this.parent.parent) {\n            // Root node -> null\n            return null;\n        } else {\n            return this.parent;\n        }\n    }\n\n    public getLastChild(): Node | null {\n        if (!this.hasChildren()) {\n            return null;\n        } else {\n            const lastChild = this.children[this.children.length - 1];\n            if (!(lastChild.hasChildren() && lastChild.is_open)) {\n                return lastChild;\n            } else {\n                return lastChild.getLastChild();\n            }\n        }\n    }\n\n    // Init Node from data without making it the root of the tree\n    public initFromData(data: NodeData): void {\n        const addNode = (nodeData: NodeData): void => {\n            this.setData(nodeData);\n\n            if (\n                isNodeRecordWithChildren(nodeData) &&\n                nodeData.children.length\n            ) {\n                addChildren(nodeData.children);\n            }\n        };\n\n        const addChildren = (childrenData: NodeData[]): void => {\n            for (const child of childrenData) {\n                const node = this.createNode();\n                node.initFromData(child);\n                this.addChild(node);\n            }\n        };\n\n        addNode(data);\n    }\n\n    private setParent(parent: Node): void {\n        this.parent = parent;\n        this.tree = parent.tree;\n        this.tree?.addNodeToIndex(this);\n    }\n\n    private doRemoveChild(node: Node): void {\n        this.children.splice(this.getChildIndex(node), 1);\n        this.tree?.removeNodeFromIndex(node);\n    }\n\n    private getNodeClass(): typeof Node {\n        return this.nodeClass || this?.tree?.nodeClass || Node;\n    }\n\n    private createNode(nodeData?: NodeData): Node {\n        const nodeClass = this.getNodeClass();\n        return new nodeClass(nodeData);\n    }\n}\n","import { getPositionName, Node, Position } from \"./node\";\nimport { DropHint, HitArea, PositionInfo } from \"./types\";\nimport { NodeElement } from \"./nodeElement\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\ninterface Dimensions {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n}\n\nexport class DragAndDropHandler {\n    public hitAreas: HitArea[];\n    public isDragging: boolean;\n    public currentItem: NodeElement | null;\n    public hoveredArea: HitArea | null;\n    public positionInfo: PositionInfo | null;\n\n    private treeWidget: JqTreeWidget;\n    private dragElement: DragElement | null;\n    private previousGhost: DropHint | null;\n    private openFolderTimer: number | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        this.hoveredArea = null;\n        this.hitAreas = [];\n        this.isDragging = false;\n        this.currentItem = null;\n        this.positionInfo = null;\n    }\n\n    public mouseCapture(positionInfo: PositionInfo): boolean | null {\n        const $element = jQuery(positionInfo.target);\n\n        if (!this.mustCaptureElement($element)) {\n            return null;\n        }\n\n        if (\n            this.treeWidget.options.onIsMoveHandle &&\n            !this.treeWidget.options.onIsMoveHandle($element)\n        ) {\n            return null;\n        }\n\n        let nodeElement = this.treeWidget._getNodeElement($element);\n\n        if (nodeElement && this.treeWidget.options.onCanMove) {\n            if (!this.treeWidget.options.onCanMove(nodeElement.node)) {\n                nodeElement = null;\n            }\n        }\n\n        this.currentItem = nodeElement;\n        return this.currentItem != null;\n    }\n\n    public mouseStart(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.refresh();\n\n        const offset = jQuery(positionInfo.target).offset();\n        const left = offset ? offset.left : 0;\n        const top = offset ? offset.top : 0;\n\n        const node = this.currentItem.node;\n\n        this.dragElement = new DragElement(\n            node.name,\n            positionInfo.pageX - left,\n            positionInfo.pageY - top,\n            this.treeWidget.element,\n            this.treeWidget.options.autoEscape ?? true\n        );\n\n        this.isDragging = true;\n        this.positionInfo = positionInfo;\n        this.currentItem.$element.addClass(\"jqtree-moving\");\n        return true;\n    }\n\n    public mouseDrag(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            !this.dragElement ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.dragElement.move(positionInfo.pageX, positionInfo.pageY);\n        this.positionInfo = positionInfo;\n\n        const area = this.findHoveredArea(\n            positionInfo.pageX,\n            positionInfo.pageY\n        );\n\n        if (area && this.canMoveToArea(area)) {\n            if (!area.node.isFolder()) {\n                this.stopOpenFolderTimer();\n            }\n\n            if (this.hoveredArea !== area) {\n                this.hoveredArea = area;\n\n                // If this is a closed folder, start timer to open it\n                if (this.mustOpenFolderTimer(area)) {\n                    this.startOpenFolderTimer(area.node);\n                } else {\n                    this.stopOpenFolderTimer();\n                }\n\n                this.updateDropHint();\n            }\n        } else {\n            this.removeDropHint();\n            this.stopOpenFolderTimer();\n            this.hoveredArea = area;\n        }\n\n        if (!area) {\n            if (this.treeWidget.options.onDragMove) {\n                this.treeWidget.options.onDragMove(\n                    this.currentItem.node,\n                    positionInfo.originalEvent\n                );\n            }\n        }\n\n        return true;\n    }\n\n    public mouseStop(positionInfo: PositionInfo): boolean {\n        this.moveItem(positionInfo);\n        this.clear();\n        this.removeHover();\n        this.removeDropHint();\n        this.removeHitAreas();\n\n        const currentItem = this.currentItem;\n\n        if (this.currentItem) {\n            this.currentItem.$element.removeClass(\"jqtree-moving\");\n            this.currentItem = null;\n        }\n\n        this.isDragging = false;\n        this.positionInfo = null;\n\n        if (!this.hoveredArea && currentItem) {\n            if (this.treeWidget.options.onDragStop) {\n                this.treeWidget.options.onDragStop(\n                    currentItem.node,\n                    positionInfo.originalEvent\n                );\n            }\n        }\n\n        return false;\n    }\n\n    public refresh(): void {\n        this.removeHitAreas();\n\n        if (this.currentItem) {\n            this.generateHitAreas();\n\n            this.currentItem = this.treeWidget._getNodeElementForNode(\n                this.currentItem.node\n            );\n\n            if (this.isDragging) {\n                this.currentItem.$element.addClass(\"jqtree-moving\");\n            }\n        }\n    }\n\n    private generateHitAreas(): void {\n        if (!this.currentItem) {\n            this.hitAreas = [];\n        } else {\n            const hitAreasGenerator = new HitAreasGenerator(\n                this.treeWidget.tree,\n                this.currentItem.node,\n                this.getTreeDimensions().bottom\n            );\n            this.hitAreas = hitAreasGenerator.generate();\n        }\n    }\n\n    private mustCaptureElement($element: JQuery<HTMLElement>): boolean {\n        return !$element.is(\"input,select,textarea\");\n    }\n\n    private canMoveToArea(area: HitArea): boolean {\n        if (!this.treeWidget.options.onCanMoveTo) {\n            return true;\n        }\n\n        if (!this.currentItem) {\n            return false;\n        }\n\n        const positionName = getPositionName(area.position);\n\n        return this.treeWidget.options.onCanMoveTo(\n            this.currentItem.node,\n            area.node,\n            positionName\n        );\n    }\n\n    private removeHitAreas(): void {\n        this.hitAreas = [];\n    }\n\n    private clear(): void {\n        if (this.dragElement) {\n            this.dragElement.remove();\n            this.dragElement = null;\n        }\n    }\n\n    private removeDropHint(): void {\n        if (this.previousGhost) {\n            this.previousGhost.remove();\n        }\n    }\n\n    private removeHover(): void {\n        this.hoveredArea = null;\n    }\n\n    private findHoveredArea(x: number, y: number): HitArea | null {\n        const dimensions = this.getTreeDimensions();\n\n        if (\n            x < dimensions.left ||\n            y < dimensions.top ||\n            x > dimensions.right ||\n            y > dimensions.bottom\n        ) {\n            return null;\n        }\n\n        let low = 0;\n        let high = this.hitAreas.length;\n        while (low < high) {\n            const mid = (low + high) >> 1;\n            const area = this.hitAreas[mid];\n\n            if (y < area.top) {\n                high = mid;\n            } else if (y > area.bottom) {\n                low = mid + 1;\n            } else {\n                return area;\n            }\n        }\n\n        return null;\n    }\n\n    private mustOpenFolderTimer(area: HitArea): boolean {\n        const node = area.node;\n\n        return (\n            node.isFolder() &&\n            !node.is_open &&\n            area.position === Position.Inside\n        );\n    }\n\n    private updateDropHint(): void {\n        if (!this.hoveredArea) {\n            return;\n        }\n\n        // remove previous drop hint\n        this.removeDropHint();\n\n        // add new drop hint\n        const nodeElement = this.treeWidget._getNodeElementForNode(\n            this.hoveredArea.node\n        );\n        this.previousGhost = nodeElement.addDropHint(this.hoveredArea.position);\n    }\n\n    private startOpenFolderTimer(folder: Node): void {\n        const openFolder = (): void => {\n            this.treeWidget._openNode(\n                folder,\n                this.treeWidget.options.slide,\n                () => {\n                    this.refresh();\n                    this.updateDropHint();\n                }\n            );\n        };\n\n        this.stopOpenFolderTimer();\n\n        const openFolderDelay = this.treeWidget.options.openFolderDelay;\n\n        if (openFolderDelay !== false) {\n            this.openFolderTimer = window.setTimeout(\n                openFolder,\n                openFolderDelay\n            );\n        }\n    }\n\n    private stopOpenFolderTimer(): void {\n        if (this.openFolderTimer) {\n            clearTimeout(this.openFolderTimer);\n            this.openFolderTimer = null;\n        }\n    }\n\n    private moveItem(positionInfo: PositionInfo): void {\n        if (\n            this.currentItem &&\n            this.hoveredArea &&\n            this.hoveredArea.position !== Position.None &&\n            this.canMoveToArea(this.hoveredArea)\n        ) {\n            const movedNode = this.currentItem.node;\n            const targetNode = this.hoveredArea.node;\n            const position = this.hoveredArea.position;\n            const previousParent = movedNode.parent;\n\n            if (position === Position.Inside) {\n                this.hoveredArea.node.is_open = true;\n            }\n\n            const doMove = (): void => {\n                this.treeWidget.tree.moveNode(movedNode, targetNode, position);\n                this.treeWidget.element.empty();\n                this.treeWidget._refreshElements(null);\n            };\n\n            const event = this.treeWidget._triggerEvent(\"tree.move\", {\n                move_info: {\n                    moved_node: movedNode,\n                    target_node: targetNode,\n                    position: getPositionName(position),\n                    previous_parent: previousParent,\n                    do_move: doMove,\n                    original_event: positionInfo.originalEvent,\n                },\n            });\n\n            if (!event.isDefaultPrevented()) {\n                doMove();\n            }\n        }\n    }\n\n    private getTreeDimensions(): Dimensions {\n        // Return the dimensions of the tree. Add a margin to the bottom to allow\n        // to drag-and-drop after the last element.\n        const offset = this.treeWidget.element.offset();\n\n        if (!offset) {\n            return { left: 0, top: 0, right: 0, bottom: 0 };\n        } else {\n            const el = this.treeWidget.element;\n            const width = el.width() || 0;\n            const height = el.height() || 0;\n            const left = offset.left + this.treeWidget._getScrollLeft();\n\n            return {\n                left,\n                top: offset.top,\n                right: left + width,\n                bottom: offset.top + height + 16,\n            };\n        }\n    }\n}\n\nabstract class VisibleNodeIterator {\n    private tree: Node;\n\n    constructor(tree: Node) {\n        this.tree = tree;\n    }\n\n    protected iterate(): void {\n        let isFirstNode = true;\n\n        const _iterateNode = (node: Node, nextNode: Node | null): void => {\n            let mustIterateInside =\n                (node.is_open || !node.element) && node.hasChildren();\n\n            let $element: JQuery<HTMLElement> | null = null;\n\n            if (node.element) {\n                $element = jQuery(node.element);\n\n                if (!$element.is(\":visible\")) {\n                    return;\n                }\n\n                if (isFirstNode) {\n                    this.handleFirstNode(node);\n                    isFirstNode = false;\n                }\n\n                if (!node.hasChildren()) {\n                    this.handleNode(node, nextNode, $element);\n                } else if (node.is_open) {\n                    if (!this.handleOpenFolder(node, $element)) {\n                        mustIterateInside = false;\n                    }\n                } else {\n                    this.handleClosedFolder(node, nextNode, $element);\n                }\n            }\n\n            if (mustIterateInside) {\n                const childrenLength = node.children.length;\n                node.children.forEach((_, i) => {\n                    if (i === childrenLength - 1) {\n                        _iterateNode(node.children[i], null);\n                    } else {\n                        _iterateNode(node.children[i], node.children[i + 1]);\n                    }\n                });\n\n                if (node.is_open && $element) {\n                    this.handleAfterOpenFolder(node, nextNode);\n                }\n            }\n        };\n\n        _iterateNode(this.tree, null);\n    }\n\n    protected abstract handleNode(\n        node: Node,\n        nextNode: Node | null,\n        $element: JQuery\n    ): void;\n\n    /*\n    override\n    return\n        - true: continue iterating\n        - false: stop iterating\n    */\n    protected abstract handleOpenFolder(node: Node, $element: JQuery): boolean;\n\n    protected abstract handleClosedFolder(\n        node: Node,\n        nextNode: Node | null,\n        $element: JQuery\n    ): void;\n\n    protected abstract handleAfterOpenFolder(\n        node: Node,\n        nextNode: Node | null\n    ): void;\n\n    protected abstract handleFirstNode(node: Node): void;\n}\n\nexport class HitAreasGenerator extends VisibleNodeIterator {\n    private currentNode: Node;\n    private treeBottom: number;\n    private positions: HitArea[];\n    private lastTop: number;\n\n    constructor(tree: Node, currentNode: Node, treeBottom: number) {\n        super(tree);\n\n        this.currentNode = currentNode;\n        this.treeBottom = treeBottom;\n    }\n\n    public generate(): HitArea[] {\n        this.positions = [];\n        this.lastTop = 0;\n\n        this.iterate();\n\n        return this.generateHitAreas(this.positions);\n    }\n\n    protected generateHitAreas(positions: HitArea[]): HitArea[] {\n        let previousTop = -1;\n        let group = [];\n        const hitAreas: HitArea[] = [];\n\n        for (const position of positions) {\n            if (position.top !== previousTop && group.length) {\n                if (group.length) {\n                    this.generateHitAreasForGroup(\n                        hitAreas,\n                        group,\n                        previousTop,\n                        position.top\n                    );\n                }\n\n                previousTop = position.top;\n                group = [];\n            }\n\n            group.push(position);\n        }\n\n        this.generateHitAreasForGroup(\n            hitAreas,\n            group,\n            previousTop,\n            this.treeBottom\n        );\n\n        return hitAreas;\n    }\n\n    protected handleOpenFolder(node: Node, $element: JQuery): boolean {\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            // Stop iterating\n            return false;\n        }\n\n        // Cannot move before current item\n        if (node.children[0] !== this.currentNode) {\n            this.addPosition(node, Position.Inside, this.getTop($element));\n        }\n\n        // Continue iterating\n        return true;\n    }\n\n    protected handleClosedFolder(\n        node: Node,\n        nextNode: Node,\n        $element: JQuery\n    ): void {\n        const top = this.getTop($element);\n\n        if (node === this.currentNode) {\n            // Cannot move after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n\n            // Cannot move before current item\n            if (nextNode !== this.currentNode) {\n                this.addPosition(node, Position.After, top);\n            }\n        }\n    }\n\n    protected handleFirstNode(node: Node): void {\n        if (node !== this.currentNode) {\n            this.addPosition(\n                node,\n                Position.Before,\n                this.getTop(jQuery(node.element))\n            );\n        }\n    }\n\n    protected handleAfterOpenFolder(node: Node, nextNode: Node): void {\n        if (node === this.currentNode || nextNode === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, this.lastTop);\n        } else {\n            this.addPosition(node, Position.After, this.lastTop);\n        }\n    }\n\n    protected handleNode(node: Node, nextNode: Node, $element: JQuery): void {\n        const top = this.getTop($element);\n\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n        }\n\n        if (nextNode === this.currentNode || node === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.After, top);\n        }\n    }\n\n    private getTop($element: JQuery<HTMLElement>): number {\n        const offset = $element.offset();\n\n        return offset ? offset.top : 0;\n    }\n\n    private addPosition(node: Node, position: number, top: number): void {\n        const area = {\n            top,\n            bottom: 0,\n            node,\n            position,\n        };\n\n        this.positions.push(area);\n        this.lastTop = top;\n    }\n\n    private generateHitAreasForGroup(\n        hitAreas: HitArea[],\n        positionsInGroup: HitArea[],\n        top: number,\n        bottom: number\n    ): void {\n        // limit positions in group\n        const positionCount = Math.min(positionsInGroup.length, 4);\n\n        const areaHeight = Math.round((bottom - top) / positionCount);\n        let areaTop = top;\n\n        let i = 0;\n        while (i < positionCount) {\n            const position = positionsInGroup[i];\n\n            hitAreas.push({\n                top: areaTop,\n                bottom: areaTop + areaHeight,\n                node: position.node,\n                position: position.position,\n            });\n\n            areaTop += areaHeight;\n            i += 1;\n        }\n    }\n}\n\nclass DragElement {\n    private offsetX: number;\n    private offsetY: number;\n    private $element: JQuery;\n\n    constructor(\n        nodeName: string,\n        offsetX: number,\n        offsetY: number,\n        $tree: JQuery,\n        autoEscape: boolean\n    ) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n\n        this.$element = jQuery(\"<span>\").addClass(\n            \"jqtree-title jqtree-dragging\"\n        );\n\n        if (autoEscape) {\n            this.$element.text(nodeName);\n        } else {\n            this.$element.html(nodeName);\n        }\n\n        this.$element.css(\"position\", \"absolute\");\n        $tree.append(this.$element);\n    }\n\n    public move(pageX: number, pageY: number): void {\n        this.$element.offset({\n            left: pageX - this.offsetX,\n            top: pageY - this.offsetY,\n        });\n    }\n\n    public remove(): void {\n        this.$element.remove();\n    }\n}\n","export const isInt = (n: unknown): boolean =>\n    typeof n === \"number\" && n % 1 === 0;\n\nexport const isFunction = (v: unknown): boolean => typeof v === \"function\";\n\nexport const getBoolString = (value: unknown): string =>\n    value ? \"true\" : \"false\";\n","import { getBoolString } from \"./util\";\nimport { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\ntype IconElement = Text | Element;\n\nexport default class ElementsRenderer {\n    public openedIconElement: IconElement;\n    public closedIconElement: IconElement;\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        this.openedIconElement = this.createButtonElement(\n            treeWidget.options.openedIcon || \"+\"\n        );\n        this.closedIconElement = this.createButtonElement(\n            treeWidget.options.closedIcon || \"-\"\n        );\n    }\n\n    public render(fromNode: Node | null): void {\n        if (fromNode && fromNode.parent) {\n            this.renderFromNode(fromNode);\n        } else {\n            this.renderFromRoot();\n        }\n    }\n\n    public renderFromRoot(): void {\n        const $element = this.treeWidget.element;\n        $element.empty();\n\n        this.createDomElements(\n            $element[0],\n            this.treeWidget.tree.children,\n            true,\n            1\n        );\n    }\n\n    public renderFromNode(node: Node): void {\n        // remember current li\n        const $previousLi = jQuery(node.element);\n\n        // create element\n        const li = this.createLi(node, node.getLevel());\n        this.attachNodeData(node, li);\n\n        // add element to dom\n        $previousLi.after(li);\n\n        // remove previous li\n        $previousLi.remove();\n\n        // create children\n        if (node.children) {\n            this.createDomElements(\n                li,\n                node.children,\n                false,\n                node.getLevel() + 1\n            );\n        }\n    }\n\n    private createDomElements(\n        element: Element,\n        children: Node[],\n        isRootNode: boolean,\n        level: number\n    ): void {\n        const ul = this.createUl(isRootNode);\n        element.appendChild(ul);\n\n        for (const child of children) {\n            const li = this.createLi(child, level);\n            ul.appendChild(li);\n\n            this.attachNodeData(child, li);\n\n            if (child.hasChildren()) {\n                this.createDomElements(li, child.children, false, level + 1);\n            }\n        }\n    }\n\n    private attachNodeData(node: Node, li: HTMLElement): void {\n        node.element = li;\n        jQuery(li).data(\"node\", node);\n    }\n\n    private createUl(isRootNode: boolean): HTMLUListElement {\n        let classString;\n        let role;\n\n        if (!isRootNode) {\n            classString = \"\";\n            role = \"group\";\n        } else {\n            classString = \"jqtree-tree\";\n            role = \"tree\";\n\n            if (this.treeWidget.options.rtl) {\n                classString += \" jqtree-rtl\";\n            }\n        }\n\n        if (this.treeWidget.options.dragAndDrop) {\n            classString += \" jqtree-dnd\";\n        }\n\n        const ul = document.createElement(\"ul\");\n        ul.className = `jqtree_common ${classString}`;\n\n        ul.setAttribute(\"role\", role);\n\n        return ul;\n    }\n\n    private createLi(node: Node, level: number): HTMLLIElement {\n        const isSelected = Boolean(\n            this.treeWidget.selectNodeHandler.isNodeSelected(node)\n        );\n\n        const mustShowFolder =\n            node.isFolder() ||\n            (node.isEmptyFolder && this.treeWidget.options.showEmptyFolder);\n\n        const li = mustShowFolder\n            ? this.createFolderLi(node, level, isSelected)\n            : this.createNodeLi(node, level, isSelected);\n\n        if (this.treeWidget.options.onCreateLi) {\n            this.treeWidget.options.onCreateLi(node, jQuery(li), isSelected);\n        }\n\n        return li;\n    }\n\n    private createFolderLi(\n        node: Node,\n        level: number,\n        isSelected: boolean\n    ): HTMLLIElement {\n        const buttonClasses = this.getButtonClasses(node);\n        const folderClasses = this.getFolderClasses(node, isSelected);\n\n        const iconElement = node.is_open\n            ? this.openedIconElement\n            : this.closedIconElement;\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = `jqtree_common ${folderClasses}`;\n        li.setAttribute(\"role\", \"presentation\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"presentation\");\n\n        li.appendChild(div);\n\n        // button link\n        const buttonLink = document.createElement(\"a\");\n        buttonLink.className = buttonClasses;\n\n        buttonLink.appendChild(iconElement.cloneNode(true));\n\n        buttonLink.setAttribute(\"role\", \"presentation\");\n        buttonLink.setAttribute(\"aria-hidden\", \"true\");\n\n        if (this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        // title span\n        div.appendChild(\n            this.createTitleSpan(\n                node.name,\n                level,\n                isSelected,\n                node.is_open,\n                true\n            )\n        );\n\n        if (!this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        return li;\n    }\n\n    private createNodeLi(\n        node: Node,\n        level: number,\n        isSelected: boolean\n    ): HTMLLIElement {\n        const liClasses = [\"jqtree_common\"];\n\n        if (isSelected) {\n            liClasses.push(\"jqtree-selected\");\n        }\n\n        const classString = liClasses.join(\" \");\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = classString;\n        li.setAttribute(\"role\", \"presentation\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"presentation\");\n\n        li.appendChild(div);\n\n        // title span\n        div.appendChild(\n            this.createTitleSpan(\n                node.name,\n                level,\n                isSelected,\n                node.is_open,\n                false\n            )\n        );\n\n        return li;\n    }\n\n    private createTitleSpan(\n        nodeName: string,\n        level: number,\n        isSelected: boolean,\n        isOpen: boolean,\n        isFolder: boolean\n    ): HTMLSpanElement {\n        const titleSpan = document.createElement(\"span\");\n\n        let classes = \"jqtree-title jqtree_common\";\n\n        if (isFolder) {\n            classes += \" jqtree-title-folder\";\n        }\n\n        classes += ` jqtree-title-button-${\n            this.treeWidget.options.buttonLeft ? \"left\" : \"right\"\n        }`;\n\n        titleSpan.className = classes;\n\n        titleSpan.setAttribute(\"role\", \"treeitem\");\n        titleSpan.setAttribute(\"aria-level\", `${level}`);\n\n        titleSpan.setAttribute(\"aria-selected\", getBoolString(isSelected));\n        titleSpan.setAttribute(\"aria-expanded\", getBoolString(isOpen));\n\n        if (isSelected) {\n            const tabIndex = this.treeWidget.options.tabIndex;\n\n            if (tabIndex !== undefined) {\n                titleSpan.setAttribute(\"tabindex\", `${tabIndex}`);\n            }\n        }\n\n        if (this.treeWidget.options.autoEscape) {\n            titleSpan.textContent = nodeName;\n        } else {\n            titleSpan.innerHTML = nodeName;\n        }\n\n        return titleSpan;\n    }\n\n    private getButtonClasses(node: Node): string {\n        const classes = [\"jqtree-toggler\", \"jqtree_common\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (this.treeWidget.options.buttonLeft) {\n            classes.push(\"jqtree-toggler-left\");\n        } else {\n            classes.push(\"jqtree-toggler-right\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private getFolderClasses(node: Node, isSelected: boolean): string {\n        const classes = [\"jqtree-folder\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (isSelected) {\n            classes.push(\"jqtree-selected\");\n        }\n\n        if (node.is_loading) {\n            classes.push(\"jqtree-loading\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private createButtonElement(value: string | Element): IconElement {\n        if (typeof value === \"string\") {\n            // convert value to html\n            const div = document.createElement(\"div\");\n            div.innerHTML = value;\n\n            return document.createTextNode(div.innerHTML);\n        } else {\n            return jQuery(value)[0];\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport type HandleFinishedLoading = () => void;\n\nexport default class DataLoader {\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n    }\n\n    public loadFromUrl(\n        urlInfo: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null\n    ): void {\n        if (!urlInfo) {\n            return;\n        }\n\n        const $el = this.getDomElement(parentNode);\n        this.addLoadingClass($el);\n        this.notifyLoading(true, parentNode, $el);\n\n        const stopLoading = (): void => {\n            this.removeLoadingClass($el);\n            this.notifyLoading(false, parentNode, $el);\n        };\n\n        const handleSuccess = (data: string | NodeData[]): void => {\n            stopLoading();\n            this.treeWidget.loadData(this.parseData(data), parentNode);\n\n            if (onFinished && typeof onFinished === \"function\") {\n                onFinished();\n            }\n        };\n\n        const handleError = (jqXHR: JQuery.jqXHR): void => {\n            stopLoading();\n\n            if (this.treeWidget.options.onLoadFailed) {\n                this.treeWidget.options.onLoadFailed(jqXHR);\n            }\n        };\n\n        this.submitRequest(urlInfo, handleSuccess, handleError);\n    }\n\n    private addLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.addClass(\"jqtree-loading\");\n        }\n    }\n\n    private removeLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.removeClass(\"jqtree-loading\");\n        }\n    }\n\n    private getDomElement(parentNode: Node | null): JQuery<HTMLElement> {\n        if (parentNode) {\n            return jQuery(parentNode.element);\n        } else {\n            return this.treeWidget.element;\n        }\n    }\n\n    private notifyLoading(\n        isLoading: boolean,\n        node: Node | null,\n        $el: JQuery\n    ): void {\n        if (this.treeWidget.options.onLoading) {\n            this.treeWidget.options.onLoading(isLoading, node, $el);\n        }\n\n        this.treeWidget._triggerEvent(\"tree.loading_data\", {\n            isLoading,\n            node,\n            $el,\n        });\n    }\n\n    private submitRequest(\n        urlInfoInput: string | JQuery.AjaxSettings,\n        handleSuccess: JQuery.Ajax.SuccessCallback<any>,\n        handleError: JQuery.Ajax.ErrorCallback<any>\n    ): void {\n        const urlInfo =\n            typeof urlInfoInput === \"string\"\n                ? { url: urlInfoInput }\n                : urlInfoInput;\n\n        const ajaxSettings: JQuery.AjaxSettings = {\n            method: \"GET\",\n            cache: false,\n            dataType: \"json\",\n            success: handleSuccess,\n            error: handleError,\n            ...urlInfo,\n        };\n\n        ajaxSettings.method = ajaxSettings.method?.toUpperCase() || \"GET\";\n\n        void jQuery.ajax(ajaxSettings);\n    }\n\n    private parseData(data: string | NodeData[]): NodeData[] {\n        const { dataFilter } = this.treeWidget.options;\n\n        const getParsedData = () => {\n            if (typeof data === \"string\") {\n                return JSON.parse(data) as NodeData[];\n            } else {\n                return data;\n            }\n        };\n\n        const parsedData = getParsedData();\n\n        if (dataFilter) {\n            return dataFilter(parsedData);\n        } else {\n            return parsedData;\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport default class KeyHandler {\n    private static LEFT = 37;\n    private static UP = 38;\n    private static RIGHT = 39;\n    private static DOWN = 40;\n\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        if (treeWidget.options.keyboardSupport) {\n            jQuery(document).on(\"keydown.jqtree\", this.handleKeyDown);\n        }\n    }\n\n    public deinit(): void {\n        jQuery(document).off(\"keydown.jqtree\");\n    }\n\n    public moveDown(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getNextNode());\n    }\n\n    public moveUp(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getPreviousNode());\n    }\n\n    public moveRight(selectedNode: Node): boolean {\n        if (!selectedNode.isFolder()) {\n            return true;\n        } else {\n            // folder node\n            if (selectedNode.is_open) {\n                // Right moves to the first child of an open node\n                return this.selectNode(selectedNode.getNextNode());\n            } else {\n                // Right expands a closed node\n                this.treeWidget.openNode(selectedNode);\n                return false;\n            }\n        }\n    }\n\n    public moveLeft(selectedNode: Node): boolean {\n        if (selectedNode.isFolder() && selectedNode.is_open) {\n            // Left on an open node closes the node\n            this.treeWidget.closeNode(selectedNode);\n            return false;\n        } else {\n            // Left on a closed or end node moves focus to the node's parent\n            return this.selectNode(selectedNode.getParent());\n        }\n    }\n\n    public selectNode(node: Node | null): boolean {\n        if (!node) {\n            return true;\n        } else {\n            this.treeWidget.selectNode(node);\n\n            if (\n                !this.treeWidget.scrollHandler.isScrolledIntoView(\n                    jQuery(node.element).find(\".jqtree-element\")\n                )\n            ) {\n                this.treeWidget.scrollToNode(node);\n            }\n\n            return false;\n        }\n    }\n\n    private handleKeyDown = (e: JQuery.Event): boolean => {\n        if (!this.canHandleKeyboard()) {\n            return true;\n        }\n\n        const selectedNode = this.treeWidget.getSelectedNode();\n        if (!selectedNode) {\n            return true;\n        }\n\n        const key = e.which;\n\n        switch (key) {\n            case KeyHandler.DOWN:\n                return this.moveDown(selectedNode);\n\n            case KeyHandler.UP:\n                return this.moveUp(selectedNode);\n\n            case KeyHandler.RIGHT:\n                return this.moveRight(selectedNode);\n\n            case KeyHandler.LEFT:\n                return this.moveLeft(selectedNode);\n\n            default:\n                return true;\n        }\n    };\n\n    private canHandleKeyboard(): boolean {\n        return (\n            (this.treeWidget.options.keyboardSupport || false) &&\n            this.treeWidget.selectNodeHandler.isFocusOnTree()\n        );\n    }\n}\n","const register = (widgetClass: unknown, widgetName: string): void => {\n    const getDataKey = (): string => `simple_widget_${widgetName}`;\n\n    const getWidgetData = (\n        el: HTMLElement,\n        dataKey: string\n    ): SimpleWidget<unknown> | null => {\n        const widget = jQuery.data(el, dataKey) as unknown;\n\n        if (widget && widget instanceof SimpleWidget) {\n            return widget;\n        } else {\n            return null;\n        }\n    };\n\n    const createWidget = ($el: JQuery, options: unknown): JQuery => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const existingWidget = getWidgetData(el, dataKey);\n\n            if (!existingWidget) {\n                const simpleWidgetClass = widgetClass as typeof SimpleWidget;\n                const widget = new simpleWidgetClass(el, options);\n\n                if (!jQuery.data(el, dataKey)) {\n                    jQuery.data(el, dataKey, widget);\n                }\n\n                // Call init after setting data, so we can call methods\n                widget.init();\n            }\n        }\n\n        return $el;\n    };\n\n    const destroyWidget = ($el: JQuery): void => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const widget = getWidgetData(el, dataKey);\n\n            if (widget) {\n                widget.destroy();\n            }\n\n            jQuery.removeData(el, dataKey);\n        }\n    };\n\n    const callFunction = (\n        $el: JQuery,\n        functionName: string,\n        args: unknown[]\n    ): unknown => {\n        let result = null;\n\n        for (const el of $el.get()) {\n            const widget = jQuery.data(el, getDataKey()) as unknown;\n\n            if (widget && widget instanceof SimpleWidget) {\n                const simpleWidget = widget as SimpleWidget<unknown>;\n                const widgetFunction = simpleWidget[functionName];\n\n                if (widgetFunction && typeof widgetFunction === \"function\") {\n                    result = widgetFunction.apply(widget, args) as unknown;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (jQuery.fn as any)[widgetName] = function (\n        this: JQuery,\n        argument1: unknown,\n        ...args: unknown[]\n    ) {\n        if (!argument1) {\n            return createWidget(this, null);\n        } else if (typeof argument1 === \"object\") {\n            const options = argument1 as unknown;\n            return createWidget(this, options);\n        } else if (typeof argument1 === \"string\" && argument1[0] !== \"_\") {\n            const functionName = argument1;\n\n            if (functionName === \"destroy\") {\n                return destroyWidget(this);\n            } else if (functionName === \"get_widget_class\") {\n                return widgetClass;\n            } else {\n                return callFunction(this, functionName, args);\n            }\n        }\n    };\n};\n\nexport default class SimpleWidget<WidgetOptions> {\n    public static register(widgetClass: unknown, widgetName: string): void {\n        register(widgetClass, widgetName);\n    }\n\n    [key: string]: unknown;\n\n    protected static defaults: unknown = {};\n\n    public options: WidgetOptions;\n\n    public $el: JQuery<HTMLElement>;\n\n    constructor(el: HTMLElement, options: WidgetOptions) {\n        this.$el = jQuery(el);\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const defaults = (this.constructor as any)[\"defaults\"] as WidgetOptions;\n        this.options = { ...defaults, ...options };\n    }\n\n    public destroy(): void {\n        this.deinit();\n    }\n\n    public init(): void {\n        //\n    }\n\n    public deinit(): void {\n        //\n    }\n}\n","/*\nThis widget does the same a the mouse widget in jqueryui.\n*/\nimport SimpleWidget from \"./simple.widget\";\nimport { PositionInfo } from \"./types\";\n\nconst getPositionInfoFromMouseEvent = (e: MouseEvent): PositionInfo => ({\n    pageX: e.pageX,\n    pageY: e.pageY,\n    target: e.target as HTMLElement,\n    originalEvent: e,\n});\n\nconst getPositionInfoFromTouch = (\n    touch: Touch,\n    e: TouchEvent\n): PositionInfo => ({\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    target: touch.target as HTMLElement,\n    originalEvent: e,\n});\n\nabstract class MouseWidget<WidgetOptions> extends SimpleWidget<WidgetOptions> {\n    protected isMouseStarted: boolean;\n    protected mouseDownInfo: PositionInfo | null;\n    private mouseDelayTimer: number | null;\n    private isMouseDelayMet: boolean;\n\n    public init(): void {\n        const element = this.$el.get(0);\n\n        if (element) {\n            element.addEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n            element.addEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.isMouseStarted = false;\n        this.mouseDelayTimer = null;\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n    }\n\n    public deinit(): void {\n        const el = this.$el.get(0);\n\n        if (el) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.removeMouseMoveEventListeners();\n    }\n\n    protected abstract mouseCapture(positionInfo: PositionInfo): boolean | null;\n\n    protected abstract mouseStart(positionInfo: PositionInfo): boolean;\n\n    protected abstract mouseDrag(positionInfo: PositionInfo): void;\n\n    protected abstract mouseStop(positionInfo: PositionInfo): void;\n\n    protected abstract getMouseDelay(): number;\n\n    private mouseDown = (e: MouseEvent): void => {\n        // Left mouse button?\n        if (e.button !== 0) {\n            return;\n        }\n\n        const result = this.handleMouseDown(getPositionInfoFromMouseEvent(e));\n\n        if (result && e.cancelable) {\n            e.preventDefault();\n        }\n    };\n\n    private handleMouseDown(positionInfo: PositionInfo): boolean {\n        // We may have missed mouseup (out of window)\n        if (this.isMouseStarted) {\n            this.handleMouseUp(positionInfo);\n        }\n\n        this.mouseDownInfo = positionInfo;\n\n        if (!this.mouseCapture(positionInfo)) {\n            return false;\n        }\n\n        this.handleStartMouse();\n\n        return true;\n    }\n\n    private handleStartMouse(): void {\n        document.addEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        document.addEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        document.addEventListener(\"mouseup\", this.mouseUp, { passive: false });\n        document.addEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n\n        const mouseDelay = this.getMouseDelay();\n\n        if (mouseDelay) {\n            this.startMouseDelayTimer(mouseDelay);\n        } else {\n            this.isMouseDelayMet = true;\n        }\n    }\n\n    private startMouseDelayTimer(mouseDelay: number): void {\n        if (this.mouseDelayTimer) {\n            clearTimeout(this.mouseDelayTimer);\n        }\n\n        this.mouseDelayTimer = window.setTimeout(() => {\n            if (this.mouseDownInfo) {\n                this.isMouseDelayMet = true;\n            }\n        }, mouseDelay);\n\n        this.isMouseDelayMet = false;\n    }\n\n    private mouseMove = (e: MouseEvent): void => {\n        this.handleMouseMove(e, getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseMove(\n        e: MouseEvent | TouchEvent,\n        positionInfo: PositionInfo\n    ): void {\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n            return;\n        }\n\n        if (!this.isMouseDelayMet) {\n            return;\n        }\n\n        if (this.mouseDownInfo) {\n            this.isMouseStarted = this.mouseStart(this.mouseDownInfo) !== false;\n        }\n\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n        } else {\n            this.handleMouseUp(positionInfo);\n        }\n    }\n\n    private mouseUp = (e: MouseEvent): void => {\n        this.handleMouseUp(getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseUp(positionInfo: PositionInfo): void {\n        this.removeMouseMoveEventListeners();\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n\n        if (this.isMouseStarted) {\n            this.isMouseStarted = false;\n            this.mouseStop(positionInfo);\n        }\n    }\n\n    private removeMouseMoveEventListeners() {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mouseup\", this.mouseUp, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n    }\n\n    private touchStart = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        this.handleMouseDown(getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchMove = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        this.handleMouseMove(e, getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchEnd = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        this.handleMouseUp(getPositionInfoFromTouch(touch, e));\n    };\n}\n\nexport default MouseWidget;\n","import { isInt } from \"./util\";\nimport { JqTreeWidget } from \"./tree.jquery\";\nimport { Node } from \"./node\";\n\nexport interface SavedState {\n    open_nodes: NodeId[];\n    selected_node: NodeId[];\n}\n\nexport default class SaveStateHandler {\n    private treeWidget: JqTreeWidget;\n    private _supportsLocalStorage: boolean | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n    }\n\n    public saveState(): void {\n        const state = JSON.stringify(this.getState());\n\n        if (this.treeWidget.options.onSetStateFromStorage) {\n            this.treeWidget.options.onSetStateFromStorage(state);\n        } else if (this.supportsLocalStorage()) {\n            localStorage.setItem(this.getKeyName(), state);\n        }\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        const jsonData = this.loadFromStorage();\n\n        if (jsonData) {\n            return this.parseState(jsonData) as unknown as SavedState;\n        } else {\n            return null;\n        }\n    }\n\n    public getState(): SavedState {\n        const getOpenNodeIds = (): NodeId[] => {\n            const openNodes: NodeId[] = [];\n\n            this.treeWidget.tree.iterate((node: Node) => {\n                if (node.is_open && node.id && node.hasChildren()) {\n                    openNodes.push(node.id);\n                }\n                return true;\n            });\n\n            return openNodes;\n        };\n\n        const getSelectedNodeIds = (): NodeId[] => {\n            const selectedNodeIds: NodeId[] = [];\n\n            this.treeWidget.getSelectedNodes().forEach((node) => {\n                if (node.id != null) {\n                    selectedNodeIds.push(node.id);\n                }\n            });\n\n            return selectedNodeIds;\n        };\n\n        return {\n            open_nodes: getOpenNodeIds(),\n            selected_node: getSelectedNodeIds(),\n        };\n    }\n\n    /*\n    Set initial state\n    Don't handle nodes that are loaded on demand\n\n    result: must load on demand\n    */\n    public setInitialState(state: SavedState): boolean {\n        if (!state) {\n            return false;\n        } else {\n            let mustLoadOnDemand = false;\n\n            if (state.open_nodes) {\n                mustLoadOnDemand = this.openInitialNodes(state.open_nodes);\n            }\n\n            if (state.selected_node) {\n                this.resetSelection();\n                this.selectInitialNodes(state.selected_node);\n            }\n\n            return mustLoadOnDemand;\n        }\n    }\n\n    public setInitialStateOnDemand(\n        state: SavedState,\n        cbFinished: () => void\n    ): void {\n        if (state) {\n            this.doSetInitialStateOnDemand(\n                state.open_nodes,\n                state.selected_node,\n                cbFinished\n            );\n        } else {\n            cbFinished();\n        }\n    }\n\n    public getNodeIdToBeSelected(): NodeId | null {\n        const state = this.getStateFromStorage();\n\n        if (state && state.selected_node) {\n            return state.selected_node[0];\n        } else {\n            return null;\n        }\n    }\n\n    private parseState(jsonData: string): SavedState {\n        const state = JSON.parse(jsonData) as Record<string, unknown>;\n\n        // Check if selected_node is an int (instead of an array)\n        if (state && state.selected_node && isInt(state.selected_node)) {\n            // Convert to array\n            state.selected_node = [state.selected_node];\n        }\n\n        return state as unknown as SavedState;\n    }\n\n    private loadFromStorage(): string | null {\n        if (this.treeWidget.options.onGetStateFromStorage) {\n            return this.treeWidget.options.onGetStateFromStorage();\n        } else if (this.supportsLocalStorage()) {\n            return localStorage.getItem(this.getKeyName());\n        } else {\n            return null;\n        }\n    }\n\n    private openInitialNodes(nodeIds: NodeId[]): boolean {\n        let mustLoadOnDemand = false;\n\n        for (const nodeId of nodeIds) {\n            const node = this.treeWidget.getNodeById(nodeId);\n\n            if (node) {\n                if (!node.load_on_demand) {\n                    node.is_open = true;\n                } else {\n                    mustLoadOnDemand = true;\n                }\n            }\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    private selectInitialNodes(nodeIds: NodeId[]): boolean {\n        let selectCount = 0;\n\n        for (const nodeId of nodeIds) {\n            const node = this.treeWidget.getNodeById(nodeId);\n\n            if (node) {\n                selectCount += 1;\n\n                this.treeWidget.selectNodeHandler.addToSelection(node);\n            }\n        }\n\n        return selectCount !== 0;\n    }\n\n    private resetSelection(): void {\n        const selectNodeHandler = this.treeWidget.selectNodeHandler;\n\n        const selectedNodes = selectNodeHandler.getSelectedNodes();\n\n        selectedNodes.forEach((node) => {\n            selectNodeHandler.removeFromSelection(node);\n        });\n    }\n\n    private doSetInitialStateOnDemand(\n        nodeIdsParam: NodeId[],\n        selectedNodes: NodeId[],\n        cbFinished: () => void\n    ): void {\n        let loadingCount = 0;\n        let nodeIds = nodeIdsParam;\n\n        const openNodes = (): void => {\n            const newNodesIds = [];\n\n            for (const nodeId of nodeIds) {\n                const node = this.treeWidget.getNodeById(nodeId);\n\n                if (!node) {\n                    newNodesIds.push(nodeId);\n                } else {\n                    if (!node.is_loading) {\n                        if (node.load_on_demand) {\n                            loadAndOpenNode(node);\n                        } else {\n                            this.treeWidget._openNode(node, false, null);\n                        }\n                    }\n                }\n            }\n\n            nodeIds = newNodesIds;\n\n            if (this.selectInitialNodes(selectedNodes)) {\n                this.treeWidget._refreshElements(null);\n            }\n\n            if (loadingCount === 0) {\n                cbFinished();\n            }\n        };\n\n        const loadAndOpenNode = (node: Node): void => {\n            loadingCount += 1;\n            this.treeWidget._openNode(node, false, () => {\n                loadingCount -= 1;\n                openNodes();\n            });\n        };\n\n        openNodes();\n    }\n\n    private getKeyName(): string {\n        if (typeof this.treeWidget.options.saveState === \"string\") {\n            return this.treeWidget.options.saveState;\n        } else {\n            return \"tree\";\n        }\n    }\n\n    private supportsLocalStorage(): boolean {\n        const testSupport = (): boolean => {\n            // Is local storage supported?\n            if (localStorage == null) {\n                return false;\n            } else {\n                // Check if it's possible to store an item. Safari does not allow this in private browsing mode.\n                try {\n                    const key = \"_storage_test\";\n                    sessionStorage.setItem(key, \"value\");\n                    sessionStorage.removeItem(key);\n                } catch (error) {\n                    return false;\n                }\n\n                return true;\n            }\n        };\n\n        if (this._supportsLocalStorage == null) {\n            this._supportsLocalStorage = testSupport();\n        }\n\n        return this._supportsLocalStorage;\n    }\n}\n","import { JqTreeWidget } from \"./tree.jquery\";\nimport { HitArea, PositionInfo } from \"./types\";\n\nexport default class ScrollHandler {\n    private treeWidget: JqTreeWidget;\n    private previousTop: number;\n    private isInitialized: boolean;\n    private $scrollParent: JQuery | null;\n    private scrollParentTop: number;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n        this.previousTop = -1;\n        this.isInitialized = false;\n    }\n\n    public checkScrolling(): void {\n        this.ensureInit();\n        this.checkVerticalScrolling();\n        this.checkHorizontalScrolling();\n    }\n\n    public scrollToY(top: number): void {\n        this.ensureInit();\n\n        if (this.$scrollParent) {\n            this.$scrollParent[0].scrollTop = top;\n        } else {\n            const offset = this.treeWidget.$el.offset();\n            const treeTop = offset ? offset.top : 0;\n\n            jQuery(document).scrollTop(top + treeTop);\n        }\n    }\n\n    public isScrolledIntoView($element: JQuery): boolean {\n        this.ensureInit();\n\n        let elementBottom: number;\n        let viewBottom: number;\n        let elementTop: number;\n        let viewTop: number;\n\n        const elHeight = $element.height() || 0;\n\n        if (this.$scrollParent) {\n            viewTop = 0;\n            viewBottom = this.$scrollParent.height() || 0;\n\n            const offset = $element.offset();\n            const originalTop = offset ? offset.top : 0;\n\n            elementTop = originalTop - this.scrollParentTop;\n            elementBottom = elementTop + elHeight;\n        } else {\n            viewTop = jQuery(window).scrollTop() || 0;\n\n            const windowHeight = jQuery(window).height() || 0;\n            viewBottom = viewTop + windowHeight;\n\n            const offset = $element.offset();\n\n            elementTop = offset ? offset.top : 0;\n            elementBottom = elementTop + elHeight;\n        }\n\n        return elementBottom <= viewBottom && elementTop >= viewTop;\n    }\n\n    public getScrollLeft(): number {\n        if (!this.$scrollParent) {\n            return 0;\n        } else {\n            return this.$scrollParent.scrollLeft() || 0;\n        }\n    }\n\n    private initScrollParent(): void {\n        const getParentWithOverflow = (): JQuery | null => {\n            const cssAttributes = [\"overflow\", \"overflow-y\"];\n\n            const hasOverFlow = ($el: JQuery): boolean => {\n                for (const attr of cssAttributes) {\n                    const overflowValue = $el.css(attr);\n                    if (\n                        overflowValue === \"auto\" ||\n                        overflowValue === \"scroll\"\n                    ) {\n                        return true;\n                    }\n                }\n\n                return false;\n            };\n\n            if (hasOverFlow(this.treeWidget.$el)) {\n                return this.treeWidget.$el;\n            }\n\n            for (const el of this.treeWidget.$el.parents().get()) {\n                const $el = jQuery(el);\n                if (hasOverFlow($el)) {\n                    return $el;\n                }\n            }\n\n            return null;\n        };\n\n        const setDocumentAsScrollParent = (): void => {\n            this.scrollParentTop = 0;\n            this.$scrollParent = null;\n        };\n\n        if (this.treeWidget.$el.css(\"position\") === \"fixed\") {\n            setDocumentAsScrollParent();\n        }\n\n        const $scrollParent = getParentWithOverflow();\n\n        if (\n            $scrollParent &&\n            $scrollParent.length &&\n            $scrollParent[0].tagName !== \"HTML\"\n        ) {\n            this.$scrollParent = $scrollParent;\n\n            const offset = this.$scrollParent.offset();\n            this.scrollParentTop = offset ? offset.top : 0;\n        } else {\n            setDocumentAsScrollParent();\n        }\n\n        this.isInitialized = true;\n    }\n\n    private ensureInit(): void {\n        if (!this.isInitialized) {\n            this.initScrollParent();\n        }\n    }\n\n    private handleVerticalScrollingWithScrollParent(area: HitArea): void {\n        const scrollParent = this.$scrollParent && this.$scrollParent[0];\n\n        if (!scrollParent) {\n            return;\n        }\n\n        const distanceBottom =\n            this.scrollParentTop + scrollParent.offsetHeight - area.bottom;\n\n        if (distanceBottom < 20) {\n            scrollParent.scrollTop += 20;\n            this.treeWidget.refreshHitAreas();\n            this.previousTop = -1;\n        } else if (area.top - this.scrollParentTop < 20) {\n            scrollParent.scrollTop -= 20;\n            this.treeWidget.refreshHitAreas();\n            this.previousTop = -1;\n        }\n    }\n\n    private handleVerticalScrollingWithDocument(area: HitArea): void {\n        const scrollTop = jQuery(document).scrollTop() || 0;\n        const distanceTop = area.top - scrollTop;\n\n        if (distanceTop < 20) {\n            jQuery(document).scrollTop(scrollTop - 20);\n        } else {\n            const windowHeight = jQuery(window).height() || 0;\n\n            if (windowHeight - (area.bottom - scrollTop) < 20) {\n                jQuery(document).scrollTop(scrollTop + 20);\n            }\n        }\n    }\n\n    private checkVerticalScrolling(): void {\n        const hoveredArea = this.treeWidget.dndHandler.hoveredArea;\n\n        if (hoveredArea && hoveredArea.top !== this.previousTop) {\n            this.previousTop = hoveredArea.top;\n\n            if (this.$scrollParent) {\n                this.handleVerticalScrollingWithScrollParent(hoveredArea);\n            } else {\n                this.handleVerticalScrollingWithDocument(hoveredArea);\n            }\n        }\n    }\n\n    private checkHorizontalScrolling(): void {\n        const positionInfo = this.treeWidget.dndHandler.positionInfo;\n\n        if (!positionInfo) {\n            return;\n        }\n\n        if (this.$scrollParent) {\n            this.handleHorizontalScrollingWithParent(positionInfo);\n        } else {\n            this.handleHorizontalScrollingWithDocument(positionInfo);\n        }\n    }\n\n    private handleHorizontalScrollingWithParent(\n        positionInfo: PositionInfo\n    ): void {\n        if (\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return;\n        }\n\n        const $scrollParent = this.$scrollParent;\n        const scrollParentOffset = $scrollParent && $scrollParent.offset();\n\n        if (!($scrollParent && scrollParentOffset)) {\n            return;\n        }\n\n        const scrollParent = $scrollParent[0];\n\n        const canScrollRight =\n            scrollParent.scrollLeft + scrollParent.clientWidth <\n            scrollParent.scrollWidth;\n        const canScrollLeft = scrollParent.scrollLeft > 0;\n\n        const rightEdge = scrollParentOffset.left + scrollParent.clientWidth;\n        const leftEdge = scrollParentOffset.left;\n        const isNearRightEdge = positionInfo.pageX > rightEdge - 20;\n        const isNearLeftEdge = positionInfo.pageX < leftEdge + 20;\n\n        if (isNearRightEdge && canScrollRight) {\n            scrollParent.scrollLeft = Math.min(\n                scrollParent.scrollLeft + 20,\n                scrollParent.scrollWidth\n            );\n        } else if (isNearLeftEdge && canScrollLeft) {\n            scrollParent.scrollLeft = Math.max(scrollParent.scrollLeft - 20, 0);\n        }\n    }\n\n    private handleHorizontalScrollingWithDocument(\n        positionInfo: PositionInfo\n    ): void {\n        if (\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return;\n        }\n\n        const $document = jQuery(document);\n\n        const scrollLeft = $document.scrollLeft() || 0;\n        const windowWidth = jQuery(window).width() || 0;\n\n        const canScrollLeft = scrollLeft > 0;\n\n        const isNearRightEdge = positionInfo.pageX > windowWidth - 20;\n        const isNearLeftEdge = positionInfo.pageX - scrollLeft < 20;\n\n        if (isNearRightEdge) {\n            $document.scrollLeft(scrollLeft + 20);\n        } else if (isNearLeftEdge && canScrollLeft) {\n            $document.scrollLeft(Math.max(scrollLeft - 20, 0));\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport default class SelectNodeHandler {\n    private treeWidget: JqTreeWidget;\n    private selectedNodes: Set<NodeId>;\n    private selectedSingleNode: Node | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n        this.selectedNodes = new Set<NodeId>();\n        this.clear();\n    }\n\n    public getSelectedNode(): Node | false {\n        const selectedNodes = this.getSelectedNodes();\n\n        if (selectedNodes.length) {\n            return selectedNodes[0];\n        } else {\n            return false;\n        }\n    }\n\n    public getSelectedNodes(): Node[] {\n        if (this.selectedSingleNode) {\n            return [this.selectedSingleNode];\n        } else {\n            const selectedNodes: Node[] = [];\n\n            this.selectedNodes.forEach((id) => {\n                const node = this.treeWidget.getNodeById(id);\n                if (node) {\n                    selectedNodes.push(node);\n                }\n            });\n\n            return selectedNodes;\n        }\n    }\n\n    public getSelectedNodesUnder(parent: Node): Node[] {\n        if (this.selectedSingleNode) {\n            if (parent.isParentOf(this.selectedSingleNode)) {\n                return [this.selectedSingleNode];\n            } else {\n                return [];\n            }\n        } else {\n            const selectedNodes = [];\n\n            for (const id in this.selectedNodes) {\n                if (\n                    Object.prototype.hasOwnProperty.call(this.selectedNodes, id)\n                ) {\n                    const node = this.treeWidget.getNodeById(id);\n                    if (node && parent.isParentOf(node)) {\n                        selectedNodes.push(node);\n                    }\n                }\n            }\n\n            return selectedNodes;\n        }\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (node.id != null) {\n            return this.selectedNodes.has(node.id);\n        } else if (this.selectedSingleNode) {\n            return this.selectedSingleNode.element === node.element;\n        } else {\n            return false;\n        }\n    }\n\n    public clear(): void {\n        this.selectedNodes.clear();\n        this.selectedSingleNode = null;\n    }\n\n    public removeFromSelection(node: Node, includeChildren = false): void {\n        if (node.id == null) {\n            if (\n                this.selectedSingleNode &&\n                node.element === this.selectedSingleNode.element\n            ) {\n                this.selectedSingleNode = null;\n            }\n        } else {\n            this.selectedNodes.delete(node.id);\n\n            if (includeChildren) {\n                node.iterate(() => {\n                    if (node.id != null) {\n                        this.selectedNodes.delete(node.id);\n                    }\n                    return true;\n                });\n            }\n        }\n    }\n\n    public addToSelection(node: Node): void {\n        if (node.id != null) {\n            this.selectedNodes.add(node.id);\n        } else {\n            this.selectedSingleNode = node;\n        }\n    }\n\n    public isFocusOnTree(): boolean {\n        const activeElement = document.activeElement;\n\n        return Boolean(\n            activeElement &&\n                activeElement.tagName === \"SPAN\" &&\n                this.treeWidget._containsElement(activeElement as HTMLElement)\n        );\n    }\n}\n","import { Position, Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\nimport { DropHint } from \"./types\";\n\nexport type OnFinishOpenNode = (node: Node) => void;\n\nexport class NodeElement {\n    public node: Node;\n    public $element: JQuery<HTMLElement>;\n    protected treeWidget: JqTreeWidget;\n\n    constructor(node: Node, treeWidget: JqTreeWidget) {\n        this.init(node, treeWidget);\n    }\n\n    public init(node: Node, treeWidget: JqTreeWidget): void {\n        this.node = node;\n        this.treeWidget = treeWidget;\n\n        if (!node.element) {\n            const element = this.treeWidget.element.get(0);\n\n            if (element) {\n                node.element = element;\n            }\n        }\n\n        if (node.element) {\n            this.$element = jQuery(node.element);\n        }\n    }\n\n    public addDropHint(position: number): DropHint {\n        if (this.mustShowBorderDropHint(position)) {\n            return new BorderDropHint(\n                this.$element,\n                this.treeWidget._getScrollLeft()\n            );\n        } else {\n            return new GhostDropHint(this.node, this.$element, position);\n        }\n    }\n\n    public select(mustSetFocus: boolean): void {\n        const $li = this.getLi();\n\n        $li.addClass(\"jqtree-selected\");\n        $li.attr(\"aria-selected\", \"true\");\n\n        const $span = this.getSpan();\n        $span.attr(\"tabindex\", this.treeWidget.options.tabIndex ?? null);\n\n        if (mustSetFocus) {\n            $span.trigger(\"focus\");\n        }\n    }\n\n    public deselect(): void {\n        const $li = this.getLi();\n\n        $li.removeClass(\"jqtree-selected\");\n        $li.attr(\"aria-selected\", \"false\");\n\n        const $span = this.getSpan();\n        $span.removeAttr(\"tabindex\");\n\n        $span.blur();\n    }\n\n    protected getUl(): JQuery<HTMLElement> {\n        return this.$element.children(\"ul:first\");\n    }\n\n    protected getSpan(): JQuery<HTMLElement> {\n        return this.$element\n            .children(\".jqtree-element\")\n            .find(\"span.jqtree-title\");\n    }\n\n    protected getLi(): JQuery<HTMLElement> {\n        return this.$element;\n    }\n\n    protected mustShowBorderDropHint(position: number): boolean {\n        return position === Position.Inside;\n    }\n}\n\nexport class FolderElement extends NodeElement {\n    public open(\n        onFinished: OnFinishOpenNode | null,\n        slide = true,\n        animationSpeed: JQuery.Duration | string = \"fast\"\n    ): void {\n        if (this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = true;\n\n        const $button = this.getButton();\n        $button.removeClass(\"jqtree-closed\");\n        $button.html(\"\");\n\n        const buttonEl = $button.get(0);\n\n        if (buttonEl) {\n            const icon =\n                this.treeWidget.renderer.openedIconElement.cloneNode(true);\n\n            buttonEl.appendChild(icon);\n        }\n\n        const doOpen = (): void => {\n            const $li = this.getLi();\n            $li.removeClass(\"jqtree-closed\");\n\n            const $span = this.getSpan();\n            $span.attr(\"aria-expanded\", \"true\");\n\n            if (onFinished) {\n                onFinished(this.node);\n            }\n\n            this.treeWidget._triggerEvent(\"tree.open\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            this.getUl().slideDown(animationSpeed, doOpen);\n        } else {\n            this.getUl().show();\n            doOpen();\n        }\n    }\n\n    public close(\n        slide = true,\n        animationSpeed: JQuery.Duration | string = \"fast\"\n    ): void {\n        if (!this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = false;\n\n        const $button = this.getButton();\n        $button.addClass(\"jqtree-closed\");\n        $button.html(\"\");\n\n        const buttonEl = $button.get(0);\n\n        if (buttonEl) {\n            const icon =\n                this.treeWidget.renderer.closedIconElement.cloneNode(true);\n\n            buttonEl.appendChild(icon);\n        }\n\n        const doClose = (): void => {\n            const $li = this.getLi();\n            $li.addClass(\"jqtree-closed\");\n\n            const $span = this.getSpan();\n            $span.attr(\"aria-expanded\", \"false\");\n\n            this.treeWidget._triggerEvent(\"tree.close\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            this.getUl().slideUp(animationSpeed, doClose);\n        } else {\n            this.getUl().hide();\n            doClose();\n        }\n    }\n\n    protected mustShowBorderDropHint(position: number): boolean {\n        return !this.node.is_open && position === Position.Inside;\n    }\n\n    private getButton(): JQuery {\n        return this.$element\n            .children(\".jqtree-element\")\n            .find(\"a.jqtree-toggler\");\n    }\n}\n\nexport class BorderDropHint implements DropHint {\n    private $hint: JQuery<Element>;\n\n    constructor($element: JQuery<Element>, scrollLeft: number) {\n        const $div = $element.children(\".jqtree-element\");\n\n        const elWidth = $element.width() || 0;\n        const width = Math.max(elWidth + scrollLeft - 4, 0);\n\n        const elHeight = $div.outerHeight() || 0;\n        const height = Math.max(elHeight - 4, 0);\n\n        this.$hint = jQuery('<span class=\"jqtree-border\"></span>');\n        $div.append(this.$hint);\n\n        this.$hint.css({ width, height });\n    }\n\n    public remove(): void {\n        this.$hint.remove();\n    }\n}\n\nclass GhostDropHint implements DropHint {\n    private $element: JQuery<Element>;\n    private node: Node;\n    private $ghost: JQuery;\n\n    constructor(node: Node, $element: JQuery<Element>, position: number) {\n        this.$element = $element;\n\n        this.node = node;\n        this.$ghost = jQuery(\n            `<li class=\"jqtree_common jqtree-ghost\"><span class=\"jqtree_common jqtree-circle\"></span>\n            <span class=\"jqtree_common jqtree-line\"></span></li>`\n        );\n\n        if (position === Position.After) {\n            this.moveAfter();\n        } else if (position === Position.Before) {\n            this.moveBefore();\n        } else if (position === Position.Inside) {\n            if (node.isFolder() && node.is_open) {\n                this.moveInsideOpenFolder();\n            } else {\n                this.moveInside();\n            }\n        }\n    }\n\n    public remove(): void {\n        this.$ghost.remove();\n    }\n\n    public moveAfter(): void {\n        this.$element.after(this.$ghost);\n    }\n\n    public moveBefore(): void {\n        this.$element.before(this.$ghost);\n    }\n\n    public moveInsideOpenFolder(): void {\n        const childElement = this.node.children[0].element;\n\n        if (childElement) {\n            jQuery(childElement).before(this.$ghost);\n        }\n    }\n\n    public moveInside(): void {\n        this.$element.after(this.$ghost);\n        this.$ghost.addClass(\"jqtree-inside\");\n    }\n}\n","import __version__ from \"./version\";\nimport { DragAndDropHandler } from \"./dragAndDropHandler\";\nimport ElementsRenderer from \"./elementsRenderer\";\nimport DataLoader, { HandleFinishedLoading } from \"./dataLoader\";\nimport KeyHandler from \"./keyHandler\";\nimport MouseWidget from \"./mouse.widget\";\nimport { PositionInfo } from \"./types\";\nimport SaveStateHandler, { SavedState } from \"./saveStateHandler\";\nimport ScrollHandler from \"./scrollHandler\";\nimport SelectNodeHandler from \"./selectNodeHandler\";\nimport SimpleWidget from \"./simple.widget\";\nimport { Node, getPosition } from \"./node\";\nimport { isFunction } from \"./util\";\nimport { FolderElement, NodeElement, OnFinishOpenNode } from \"./nodeElement\";\nimport { JQTreeOptions } from \"./jqtreeOptions\";\n\ninterface ClickTarget {\n    node: Node;\n    type: \"button\" | \"label\";\n}\n\ninterface SelectNodeOptions {\n    mustToggle?: boolean;\n    mustSetFocus?: boolean;\n}\n\nconst NODE_PARAM_IS_EMPTY = \"Node parameter is empty\";\nconst PARAM_IS_EMPTY = \"Parameter is empty: \";\n\nexport class JqTreeWidget extends MouseWidget<JQTreeOptions> {\n    protected static defaults: JQTreeOptions = {\n        animationSpeed: \"fast\",\n        autoEscape: true,\n        autoOpen: false, // true / false / int (open n levels starting at 0)\n        buttonLeft: true,\n        // The symbol to use for a closed node - ► BLACK RIGHT-POINTING POINTER\n        // http://www.fileformat.info/info/unicode/char/25ba/index.htm\n        closedIcon: undefined,\n        data: undefined,\n        dataFilter: undefined,\n        dataUrl: undefined,\n        dragAndDrop: false,\n        keyboardSupport: true,\n        nodeClass: Node,\n        onCanMove: undefined, // Can this node be moved?\n        onCanMoveTo: undefined, // Can this node be moved to this position? function(moved_node, target_node, position)\n        onCanSelectNode: undefined,\n        onCreateLi: undefined,\n        onDragMove: undefined,\n        onDragStop: undefined,\n        onGetStateFromStorage: undefined,\n        onIsMoveHandle: undefined,\n        onLoadFailed: undefined,\n        onLoading: undefined,\n        onSetStateFromStorage: undefined,\n        openedIcon: \"&#x25bc;\",\n        openFolderDelay: 500, // The delay for opening a folder during drag and drop; the value is in milliseconds\n        // The symbol to use for an open node - ▼ BLACK DOWN-POINTING TRIANGLE\n        // http://www.fileformat.info/info/unicode/char/25bc/index.htm\n        rtl: undefined, // right-to-left support; true / false (default)\n        saveState: false, // true / false / string (cookie name)\n        selectable: true,\n        showEmptyFolder: false,\n        slide: true, // must display slide animation?\n        startDndDelay: 300, // The delay for starting dnd (in milliseconds)\n        tabIndex: 0,\n        useContextMenu: true,\n    };\n\n    public element: JQuery;\n    public tree: Node;\n    public dndHandler: DragAndDropHandler;\n    public renderer: ElementsRenderer;\n    public dataLoader: DataLoader;\n    public scrollHandler: ScrollHandler;\n    public selectNodeHandler: SelectNodeHandler;\n\n    private isInitialized: boolean;\n    private saveStateHandler: SaveStateHandler;\n    private keyHandler: KeyHandler;\n\n    public toggle(node: Node, slideParam: null | boolean = null): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.is_open) {\n            this.closeNode(node, slide);\n        } else {\n            this.openNode(node, slide);\n        }\n\n        return this.element;\n    }\n\n    public getTree(): Node {\n        return this.tree;\n    }\n\n    public selectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions\n    ): JQuery {\n        this.doSelectNode(node, optionsParam);\n        return this.element;\n    }\n\n    public getSelectedNode(): Node | false {\n        return this.selectNodeHandler.getSelectedNode();\n    }\n\n    public toJson(): string {\n        return JSON.stringify(this.tree.getData());\n    }\n\n    public loadData(data: NodeData[], parentNode: Node | null): JQuery {\n        this.doLoadData(data, parentNode);\n        return this.element;\n    }\n\n    /*\n    signatures:\n    - loadDataFromUrl(url, parent_node=null, on_finished=null)\n        loadDataFromUrl('/my_data');\n        loadDataFromUrl('/my_data', node1);\n        loadDataFromUrl('/my_data', node1, function() { console.log('finished'); });\n        loadDataFromUrl('/my_data', null, function() { console.log('finished'); });\n\n    - loadDataFromUrl(parent_node=null, on_finished=null)\n        loadDataFromUrl();\n        loadDataFromUrl(node1);\n        loadDataFromUrl(null, function() { console.log('finished'); });\n        loadDataFromUrl(node1, function() { console.log('finished'); });\n    */\n    public loadDataFromUrl(\n        param1: string | null | Node,\n        param2?: Node | null | HandleFinishedLoading,\n        param3?: HandleFinishedLoading\n    ): JQuery {\n        if (typeof param1 === \"string\") {\n            // first parameter is url\n            this.doLoadDataFromUrl(\n                param1,\n                param2 as Node | null,\n                param3 ?? null\n            );\n        } else {\n            // first parameter is not url\n            this.doLoadDataFromUrl(\n                null,\n                param1,\n                param2 as HandleFinishedLoading | null\n            );\n        }\n\n        return this.element;\n    }\n\n    public reload(onFinished: HandleFinishedLoading | null): JQuery {\n        this.doLoadDataFromUrl(null, null, onFinished);\n        return this.element;\n    }\n\n    public refresh(): JQuery {\n        this._refreshElements(null);\n        return this.element;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.tree.getNodeById(nodeId);\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.tree.getNodeByName(name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        return this.tree.getNodeByNameMustExist(name);\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.tree.getNodesByProperty(key, value);\n    }\n\n    public getNodeByHtmlElement(\n        element: HTMLElement | JQuery<HTMLElement>\n    ): Node | null {\n        return this.getNode(jQuery(element));\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        return this.tree.getNodeByCallback(callback);\n    }\n\n    public openNode(\n        node: Node,\n        param1?: boolean | OnFinishOpenNode,\n        param2?: OnFinishOpenNode\n    ): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const parseParams = (): [boolean, OnFinishOpenNode | null] => {\n            let onFinished: OnFinishOpenNode | null;\n            let slide: boolean | null;\n\n            if (isFunction(param1)) {\n                onFinished = param1 as OnFinishOpenNode | null;\n                slide = null;\n            } else {\n                slide = param1 as boolean;\n                onFinished = param2 as OnFinishOpenNode;\n            }\n\n            if (slide == null) {\n                slide = this.options.slide ?? false;\n            }\n\n            return [slide, onFinished];\n        };\n\n        const [slide, onFinished] = parseParams();\n\n        this._openNode(node, slide, onFinished);\n        return this.element;\n    }\n\n    public closeNode(node: Node, slideParam?: null | boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            new FolderElement(node, this).close(\n                slide,\n                this.options.animationSpeed\n            );\n\n            this.saveState();\n        }\n\n        return this.element;\n    }\n\n    public isDragging(): boolean {\n        return this.dndHandler.isDragging;\n    }\n\n    public refreshHitAreas(): JQuery {\n        this.dndHandler.refresh();\n        return this.element;\n    }\n\n    public addNodeAfter(\n        newNodeInfo: NodeData,\n        existingNode: Node\n    ): Node | null {\n        const newNode = existingNode.addAfter(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addNodeBefore(\n        newNodeInfo: NodeData,\n        existingNode: Node\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addBefore(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addParentNode(\n        newNodeInfo: NodeData,\n        existingNode: Node\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addParent(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(newNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public removeNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!node.parent) {\n            throw Error(\"Node has no parent\");\n        }\n\n        this.selectNodeHandler.removeFromSelection(node, true); // including children\n\n        const parent = node.parent;\n        node.remove();\n        this._refreshElements(parent);\n\n        return this.element;\n    }\n\n    public appendNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam || this.tree;\n\n        const node = parentNode.append(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public prependNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam ?? this.tree;\n\n        const node = parentNode.prepend(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public updateNode(node: Node, data: NodeData): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const idIsChanged =\n            typeof data === \"object\" && data.id && data.id !== node.id;\n\n        if (idIsChanged) {\n            this.tree.removeNodeFromIndex(node);\n        }\n\n        node.setData(data);\n\n        if (idIsChanged) {\n            this.tree.addNodeToIndex(node);\n        }\n\n        if (\n            typeof data === \"object\" &&\n            data[\"children\"] &&\n            data[\"children\"] instanceof Array\n        ) {\n            node.removeChildren();\n\n            if (data.children.length) {\n                node.loadFromData(data.children as Node[]);\n            }\n        }\n\n        this._refreshElements(node);\n\n        return this.element;\n    }\n\n    private isSelectedNodeInSubtree(subtree: Node): boolean {\n        const selectedNode = this.getSelectedNode();\n\n        if (!selectedNode) {\n            return false;\n        } else {\n            return subtree === selectedNode || subtree.isParentOf(selectedNode);\n        }\n    }\n\n    public moveNode(node: Node, targetNode: Node, position: string): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!targetNode) {\n            throw Error(PARAM_IS_EMPTY + \"targetNode\");\n        }\n\n        const positionIndex = getPosition(position);\n\n        if (positionIndex !== undefined) {\n            this.tree.moveNode(node, targetNode, positionIndex);\n            this._refreshElements(null);\n        }\n\n        return this.element;\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        return this.saveStateHandler.getStateFromStorage();\n    }\n\n    public addToSelection(node: Node, mustSetFocus?: boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.addToSelection(node);\n\n        this._getNodeElementForNode(node).select(\n            mustSetFocus === undefined ? true : mustSetFocus\n        );\n\n        this.saveState();\n\n        return this.element;\n    }\n\n    public getSelectedNodes(): Node[] {\n        return this.selectNodeHandler.getSelectedNodes();\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        return this.selectNodeHandler.isNodeSelected(node);\n    }\n\n    public removeFromSelection(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.removeFromSelection(node);\n\n        this._getNodeElementForNode(node).deselect();\n        this.saveState();\n\n        return this.element;\n    }\n\n    public scrollToNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const nodeOffset = jQuery(node.element).offset();\n        const nodeTop = nodeOffset ? nodeOffset.top : 0;\n\n        const treeOffset = this.$el.offset();\n        const treeTop = treeOffset ? treeOffset.top : 0;\n\n        const top = nodeTop - treeTop;\n\n        this.scrollHandler.scrollToY(top);\n\n        return this.element;\n    }\n\n    public getState(): SavedState | null {\n        return this.saveStateHandler.getState();\n    }\n\n    public setState(state: SavedState): JQuery {\n        this.saveStateHandler.setInitialState(state);\n        this._refreshElements(null);\n\n        return this.element;\n    }\n\n    public setOption(option: string, value: unknown): JQuery {\n        (this.options as unknown as Record<string, unknown>)[option] = value;\n        return this.element;\n    }\n\n    public moveDown(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveDown(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public moveUp(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveUp(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public getVersion(): string {\n        return __version__;\n    }\n\n    public _triggerEvent(\n        eventName: string,\n        values?: Record<string, unknown>\n    ): JQuery.Event {\n        const event = jQuery.Event(eventName, values);\n        this.element.trigger(event);\n        return event;\n    }\n\n    public _openNode(\n        node: Node,\n        slide = true,\n        onFinished: OnFinishOpenNode | null\n    ): void {\n        const doOpenNode = (\n            _node: Node,\n            _slide: boolean,\n            _onFinished: OnFinishOpenNode | null\n        ): void => {\n            const folderElement = new FolderElement(_node, this);\n            folderElement.open(\n                _onFinished,\n                _slide,\n                this.options.animationSpeed\n            );\n        };\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            if (node.load_on_demand) {\n                this.loadFolderOnDemand(node, slide, onFinished);\n            } else {\n                let parent = node.parent;\n\n                while (parent) {\n                    // nb: do not open root element\n                    if (parent.parent) {\n                        doOpenNode(parent, false, null);\n                    }\n                    parent = parent.parent;\n                }\n\n                doOpenNode(node, slide, onFinished);\n                this.saveState();\n            }\n        }\n    }\n\n    /*\n    Redraw the tree or part of the tree.\n     from_node: redraw this subtree\n    */\n    public _refreshElements(fromNode: Node | null): void {\n        const mustSetFocus = this.selectNodeHandler.isFocusOnTree();\n        const mustSelect = fromNode\n            ? this.isSelectedNodeInSubtree(fromNode)\n            : false;\n\n        this.renderer.render(fromNode);\n\n        if (mustSelect) {\n            this.selectCurrentNode(mustSetFocus);\n        }\n\n        this._triggerEvent(\"tree.refresh\");\n    }\n\n    public _getNodeElementForNode(node: Node): NodeElement {\n        if (node.isFolder()) {\n            return new FolderElement(node, this);\n        } else {\n            return new NodeElement(node, this);\n        }\n    }\n\n    public _getNodeElement($element: JQuery<HTMLElement>): NodeElement | null {\n        const node = this.getNode($element);\n        if (node) {\n            return this._getNodeElementForNode(node);\n        } else {\n            return null;\n        }\n    }\n\n    public _containsElement(element: HTMLElement): boolean {\n        const node = this.getNode(jQuery(element));\n\n        return node != null && node.tree === this.tree;\n    }\n\n    public _getScrollLeft(): number {\n        return this.scrollHandler.getScrollLeft();\n    }\n\n    public init(): void {\n        super.init();\n\n        this.element = this.$el;\n        this.isInitialized = false;\n\n        this.options.rtl = this.getRtlOption();\n\n        if (this.options.closedIcon == null) {\n            this.options.closedIcon = this.getDefaultClosedIcon();\n        }\n\n        this.renderer = new ElementsRenderer(this);\n        this.dataLoader = new DataLoader(this);\n        this.saveStateHandler = new SaveStateHandler(this);\n        this.selectNodeHandler = new SelectNodeHandler(this);\n        this.dndHandler = new DragAndDropHandler(this);\n        this.scrollHandler = new ScrollHandler(this);\n        this.keyHandler = new KeyHandler(this);\n\n        this.initData();\n\n        this.element.on(\"click\", this.handleClick);\n        this.element.on(\"dblclick\", this.handleDblclick);\n\n        if (this.options.useContextMenu) {\n            this.element.on(\"contextmenu\", this.handleContextmenu);\n        }\n    }\n\n    public deinit(): void {\n        this.element.empty();\n        this.element.off();\n\n        this.keyHandler.deinit();\n\n        this.tree = new Node({}, true);\n\n        super.deinit();\n    }\n\n    protected mouseCapture(positionInfo: PositionInfo): boolean | null {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseCapture(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStart(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStart(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseDrag(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            const result = this.dndHandler.mouseDrag(positionInfo);\n\n            this.scrollHandler.checkScrolling();\n            return result;\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStop(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStop(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected getMouseDelay(): number {\n        return this.options.startDndDelay ?? 0;\n    }\n\n    private initData(): void {\n        if (this.options.data) {\n            this.doLoadData(this.options.data, null);\n        } else {\n            const dataUrl = this.getDataUrlInfo(null);\n\n            if (dataUrl) {\n                this.doLoadDataFromUrl(null, null, null);\n            } else {\n                this.doLoadData([], null);\n            }\n        }\n    }\n\n    private getDataUrlInfo(node: Node | null): JQuery.AjaxSettings | null {\n        const dataUrl =\n            this.options.dataUrl || (this.element.data(\"url\") as string | null);\n\n        const getUrlFromString = (url: string): JQuery.AjaxSettings => {\n            const urlInfo: JQuery.AjaxSettings = { url };\n\n            setUrlInfoData(urlInfo);\n\n            return urlInfo;\n        };\n\n        const setUrlInfoData = (urlInfo: JQuery.AjaxSettings): void => {\n            if (node?.id) {\n                // Load on demand of a subtree; add node parameter\n                const data = { node: node.id };\n                urlInfo[\"data\"] = data;\n            } else {\n                // Add selected_node parameter\n                const selectedNodeId = this.getNodeIdToBeSelected();\n                if (selectedNodeId) {\n                    const data = { selected_node: selectedNodeId };\n                    urlInfo[\"data\"] = data;\n                }\n            }\n        };\n\n        if (typeof dataUrl === \"function\") {\n            return dataUrl(node);\n        } else if (typeof dataUrl === \"string\") {\n            return getUrlFromString(dataUrl);\n        } else if (dataUrl && typeof dataUrl === \"object\") {\n            setUrlInfoData(dataUrl);\n            return dataUrl;\n        } else {\n            return null;\n        }\n    }\n\n    private getNodeIdToBeSelected(): NodeId | null {\n        if (this.options.saveState) {\n            return this.saveStateHandler.getNodeIdToBeSelected();\n        } else {\n            return null;\n        }\n    }\n\n    private initTree(data: NodeData[]): void {\n        const doInit = (): void => {\n            if (!this.isInitialized) {\n                this.isInitialized = true;\n                this._triggerEvent(\"tree.init\");\n            }\n        };\n\n        if (!this.options.nodeClass) {\n            return;\n        }\n\n        this.tree = new this.options.nodeClass(\n            null,\n            true,\n            this.options.nodeClass\n        );\n\n        this.selectNodeHandler.clear();\n\n        this.tree.loadFromData(data);\n\n        const mustLoadOnDemand = this.setInitialState();\n\n        this._refreshElements(null);\n\n        if (!mustLoadOnDemand) {\n            doInit();\n        } else {\n            // Load data on demand and then init the tree\n            this.setInitialStateOnDemand(doInit);\n        }\n    }\n\n    // Set initial state, either by restoring the state or auto-opening nodes\n    // result: must load nodes on demand?\n    private setInitialState(): boolean {\n        const restoreState = (): boolean[] => {\n            // result: is state restored, must load on demand?\n            if (!this.options.saveState) {\n                return [false, false];\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return [false, false];\n                } else {\n                    const mustLoadOnDemand =\n                        this.saveStateHandler.setInitialState(state);\n\n                    // return true: the state is restored\n                    return [true, mustLoadOnDemand];\n                }\n            }\n        };\n\n        const autoOpenNodes = (): boolean => {\n            // result: must load on demand?\n            if (this.options.autoOpen === false) {\n                return false;\n            }\n\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let mustLoadOnDemand = false;\n\n            this.tree.iterate((node: Node, level: number) => {\n                if (node.load_on_demand) {\n                    mustLoadOnDemand = true;\n                    return false;\n                } else if (!node.hasChildren()) {\n                    return false;\n                } else {\n                    node.is_open = true;\n                    return level !== maxLevel;\n                }\n            });\n\n            return mustLoadOnDemand;\n        };\n\n        let [isRestored, mustLoadOnDemand] = restoreState(); // eslint-disable-line prefer-const\n\n        if (!isRestored) {\n            mustLoadOnDemand = autoOpenNodes();\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    // Set the initial state for nodes that are loaded on demand\n    // Call cb_finished when done\n    private setInitialStateOnDemand(cbFinished: () => void): void {\n        const restoreState = (): boolean => {\n            if (!this.options.saveState) {\n                return false;\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return false;\n                } else {\n                    this.saveStateHandler.setInitialStateOnDemand(\n                        state,\n                        cbFinished\n                    );\n\n                    return true;\n                }\n            }\n        };\n\n        const autoOpenNodes = (): void => {\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let loadingCount = 0;\n\n            const loadAndOpenNode = (node: Node): void => {\n                loadingCount += 1;\n                this._openNode(node, false, () => {\n                    loadingCount -= 1;\n                    openNodes();\n                });\n            };\n\n            const openNodes = (): void => {\n                this.tree.iterate((node: Node, level: number) => {\n                    if (node.load_on_demand) {\n                        if (!node.is_loading) {\n                            loadAndOpenNode(node);\n                        }\n\n                        return false;\n                    } else {\n                        this._openNode(node, false, null);\n\n                        return level !== maxLevel;\n                    }\n                });\n\n                if (loadingCount === 0) {\n                    cbFinished();\n                }\n            };\n\n            openNodes();\n        };\n\n        if (!restoreState()) {\n            autoOpenNodes();\n        }\n    }\n\n    private getAutoOpenMaxLevel(): number {\n        if (this.options.autoOpen === true) {\n            return -1;\n        } else if (typeof this.options.autoOpen === \"number\") {\n            return this.options.autoOpen;\n        } else if (typeof this.options.autoOpen === \"string\") {\n            return parseInt(this.options.autoOpen, 10);\n        } else {\n            return 0;\n        }\n    }\n\n    private handleClick = (\n        e: JQuery.ClickEvent<HTMLElement, any, HTMLElement, HTMLElement>\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget) {\n            if (clickTarget.type === \"button\") {\n                this.toggle(clickTarget.node, this.options.slide);\n\n                e.preventDefault();\n                e.stopPropagation();\n            } else if (clickTarget.type === \"label\") {\n                const node = clickTarget.node;\n                const event = this._triggerEvent(\"tree.click\", {\n                    node,\n                    click_event: e,\n                });\n\n                if (!event.isDefaultPrevented()) {\n                    this.doSelectNode(node);\n                }\n            }\n        }\n    };\n\n    private handleDblclick = (\n        e: JQuery.DoubleClickEvent<HTMLElement, any, HTMLElement, HTMLElement>\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget?.type === \"label\") {\n            this._triggerEvent(\"tree.dblclick\", {\n                node: clickTarget.node,\n                click_event: e,\n            });\n        }\n    };\n\n    private getClickTarget(element: EventTarget): ClickTarget | null {\n        const $target = jQuery(element);\n\n        const $button = $target.closest(\".jqtree-toggler\");\n\n        if ($button.length) {\n            const node = this.getNode($button as JQuery<HTMLElement>);\n\n            if (node) {\n                return {\n                    type: \"button\",\n                    node,\n                };\n            }\n        } else {\n            const $el = $target.closest(\".jqtree-element\");\n            if ($el.length) {\n                const node = this.getNode($el as JQuery<HTMLElement>);\n                if (node) {\n                    return {\n                        type: \"label\",\n                        node,\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    private getNode($element: JQuery<HTMLElement>): null | Node {\n        const $li = $element.closest(\"li.jqtree_common\");\n        if ($li.length === 0) {\n            return null;\n        } else {\n            return $li.data(\"node\") as Node;\n        }\n    }\n\n    private handleContextmenu = (\n        e: JQuery.ContextMenuEvent<HTMLElement, any, HTMLElement, HTMLElement>\n    ) => {\n        const $div = jQuery(e.target).closest(\"ul.jqtree-tree .jqtree-element\");\n        if ($div.length) {\n            const node = this.getNode($div);\n            if (node) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                this._triggerEvent(\"tree.contextmenu\", {\n                    node,\n                    click_event: e,\n                });\n                return false;\n            }\n        }\n\n        return null;\n    };\n\n    private saveState(): void {\n        if (this.options.saveState) {\n            this.saveStateHandler.saveState();\n        }\n    }\n\n    private selectCurrentNode(mustSetFocus: boolean): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            const nodeElement = this._getNodeElementForNode(node);\n            if (nodeElement) {\n                nodeElement.select(mustSetFocus);\n            }\n        }\n    }\n\n    private deselectCurrentNode(): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            this.removeFromSelection(node);\n        }\n    }\n\n    private getDefaultClosedIcon(): string {\n        if (this.options.rtl) {\n            // triangle to the left\n            return \"&#x25c0;\";\n        } else {\n            // triangle to the right\n            return \"&#x25ba;\";\n        }\n    }\n\n    private getRtlOption(): boolean {\n        if (this.options.rtl != null) {\n            return this.options.rtl;\n        } else {\n            const dataRtl = this.element.data(\"rtl\") as unknown;\n\n            if (\n                dataRtl !== null &&\n                dataRtl !== false &&\n                dataRtl !== undefined\n            ) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    private doSelectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions\n    ): void {\n        const saveState = (): void => {\n            if (this.options.saveState) {\n                this.saveStateHandler.saveState();\n            }\n        };\n\n        if (!node) {\n            // Called with empty node -> deselect current node\n            this.deselectCurrentNode();\n            saveState();\n            return;\n        }\n        const defaultOptions = { mustSetFocus: true, mustToggle: true };\n        const selectOptions = { ...defaultOptions, ...(optionsParam || {}) };\n\n        const canSelect = (): boolean => {\n            if (this.options.onCanSelectNode) {\n                return (\n                    this.options.selectable === true &&\n                    this.options.onCanSelectNode(node)\n                );\n            } else {\n                return this.options.selectable === true;\n            }\n        };\n\n        const openParents = (): void => {\n            const parent = node.parent;\n\n            if (parent && parent.parent && !parent.is_open) {\n                this.openNode(parent, false);\n            }\n        };\n\n        if (!canSelect()) {\n            return;\n        }\n\n        if (this.selectNodeHandler.isNodeSelected(node)) {\n            if (selectOptions.mustToggle) {\n                this.deselectCurrentNode();\n                this._triggerEvent(\"tree.select\", {\n                    node: null,\n                    previous_node: node,\n                });\n            }\n        } else {\n            const deselectedNode = this.getSelectedNode() || null;\n            this.deselectCurrentNode();\n            this.addToSelection(node, selectOptions.mustSetFocus);\n\n            this._triggerEvent(\"tree.select\", {\n                node,\n                deselected_node: deselectedNode,\n            });\n            openParents();\n        }\n\n        saveState();\n    }\n\n    private doLoadData(data: NodeData[] | null, parentNode: Node | null): void {\n        if (!data) {\n            return;\n        } else {\n            this._triggerEvent(\"tree.load_data\", { tree_data: data });\n\n            if (parentNode) {\n                this.deselectNodes(parentNode);\n                this.loadSubtree(data, parentNode);\n            } else {\n                this.initTree(data);\n            }\n\n            if (this.isDragging()) {\n                this.dndHandler.refresh();\n            }\n        }\n    }\n\n    private deselectNodes(parentNode: Node): void {\n        const selectedNodesUnderParent =\n            this.selectNodeHandler.getSelectedNodesUnder(parentNode);\n        for (const n of selectedNodesUnderParent) {\n            this.selectNodeHandler.removeFromSelection(n);\n        }\n    }\n\n    private loadSubtree(data: NodeData[], parentNode: Node): void {\n        parentNode.loadFromData(data);\n\n        parentNode.load_on_demand = false;\n        parentNode.is_loading = false;\n\n        this._refreshElements(parentNode);\n    }\n\n    private doLoadDataFromUrl(\n        urlInfoParam: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null\n    ): void {\n        const urlInfo = urlInfoParam || this.getDataUrlInfo(parentNode);\n\n        this.dataLoader.loadFromUrl(urlInfo, parentNode, onFinished);\n    }\n\n    private loadFolderOnDemand(\n        node: Node,\n        slide = true,\n        onFinished: OnFinishOpenNode | null\n    ): void {\n        node.is_loading = true;\n\n        this.doLoadDataFromUrl(null, node, () => {\n            this._openNode(node, slide, onFinished);\n        });\n    }\n}\n\nSimpleWidget.register(JqTreeWidget, \"tree\");\n"],"names":["Position","positionNames","before","Before","after","After","inside","Inside","none","None","getPositionName","position","name","Object","prototype","hasOwnProperty","call","isNodeRecordWithChildren","data","_typeof","Array","Node","o","isRoot","nodeClass","_classCallCheck","this","_defineProperty","isEmptyFolder","load_on_demand","setData","children","parent","idMapping","Map","tree","_createClass","key","value","removeChildren","_step","_iterator","_createForOfIteratorHelper","s","n","done","node","createNode","addChild","length","loadFromData","err","e","f","push","setParent","index","splice","doRemoveChild","indexOf","hasChildren","callback","_iterate","level","_step2","_iterator2","child","movedNode","targetNode","isParentOf","addChildAtPosition","getChildIndex","includeParent","getDataFromNodes","nodes","map","tmpNode","k","v","getNodeByCallback","concat","result","iterate","nodeInfo","childIndex","newParent","_step3","originalParent","_iterator3","removeChild","nodeId","get","id","set","_this","_this$tree","removeNodeFromIndex","previousIndex","nextIndex","filter","includeChildren","is_open","nextSibling","getNextSibling","getNextNode","previousSibling","getPreviousSibling","getLastChild","getParent","lastChild","nodeData","_this2","addChildren","childrenData","_step4","_iterator4","initFromData","_this$tree2","addNodeToIndex","_this$tree3","_this$tree4","getNodeClass","DragAndDropHandler","treeWidget","hoveredArea","hitAreas","isDragging","currentItem","positionInfo","$element","jQuery","target","mustCaptureElement","options","onIsMoveHandle","nodeElement","_getNodeElement","onCanMove","_this$treeWidget$opti","undefined","pageX","pageY","refresh","offset","left","top","dragElement","DragElement","element","autoEscape","addClass","move","area","findHoveredArea","canMoveToArea","isFolder","stopOpenFolderTimer","mustOpenFolderTimer","startOpenFolderTimer","updateDropHint","removeDropHint","onDragMove","originalEvent","moveItem","clear","removeHover","removeHitAreas","removeClass","onDragStop","generateHitAreas","_getNodeElementForNode","hitAreasGenerator","HitAreasGenerator","getTreeDimensions","bottom","generate","is","onCanMoveTo","positionName","remove","previousGhost","x","y","dimensions","right","low","high","mid","addDropHint","folder","openFolderDelay","openFolderTimer","window","setTimeout","_openNode","slide","clearTimeout","previousParent","doMove","moveNode","empty","_refreshElements","_triggerEvent","move_info","moved_node","target_node","previous_parent","do_move","original_event","isDefaultPrevented","el","width","height","_getScrollLeft","_VisibleNodeIterator","_inherits","_super","_createSuper","currentNode","treeBottom","_this4","_assertThisInitialized","positions","lastTop","previousTop","group","generateHitAreasForGroup","addPosition","getTop","nextNode","positionsInGroup","positionCount","Math","min","areaHeight","round","areaTop","i","VisibleNodeIterator","_this3","isFirstNode","_iterateNode","mustIterateInside","handleFirstNode","handleOpenFolder","handleClosedFolder","handleNode","childrenLength","forEach","_","handleAfterOpenFolder","nodeName","offsetX","offsetY","$tree","text","html","css","append","getBoolString","ElementsRenderer","openedIconElement","createButtonElement","openedIcon","closedIconElement","closedIcon","fromNode","renderFromNode","renderFromRoot","createDomElements","$previousLi","li","createLi","getLevel","attachNodeData","isRootNode","ul","createUl","appendChild","classString","role","rtl","dragAndDrop","document","createElement","className","setAttribute","isSelected","Boolean","selectNodeHandler","isNodeSelected","showEmptyFolder","createFolderLi","createNodeLi","onCreateLi","buttonClasses","getButtonClasses","folderClasses","getFolderClasses","iconElement","div","buttonLink","cloneNode","buttonLeft","createTitleSpan","liClasses","join","isOpen","titleSpan","classes","tabIndex","textContent","innerHTML","is_loading","createTextNode","DataLoader","urlInfo","parentNode","onFinished","$el","getDomElement","addLoadingClass","notifyLoading","stopLoading","removeLoadingClass","submitRequest","loadData","parseData","jqXHR","onLoadFailed","isLoading","onLoading","urlInfoInput","handleSuccess","handleError","_ajaxSettings$method","ajaxSettings","_objectSpread","method","cache","dataType","success","error","url","toUpperCase","ajax","dataFilter","parsedData","JSON","parse","KeyHandler","canHandleKeyboard","selectedNode","getSelectedNode","which","DOWN","moveDown","UP","moveUp","RIGHT","moveRight","LEFT","moveLeft","keyboardSupport","on","handleKeyDown","off","selectNode","getPreviousNode","openNode","closeNode","scrollHandler","isScrolledIntoView","find","scrollToNode","isFocusOnTree","register","widgetClass","widgetName","getDataKey","getWidgetData","dataKey","widget","SimpleWidget","createWidget","init","destroyWidget","destroy","removeData","callFunction","functionName","args","widgetFunction","apply","fn","argument1","_len","arguments","_key","defaults","constructor","deinit","getPositionInfoFromMouseEvent","getPositionInfoFromTouch","touch","MouseWidget","button","handleMouseDown","cancelable","preventDefault","handleMouseMove","handleMouseUp","touches","changedTouches","addEventListener","mouseDown","passive","touchStart","isMouseStarted","mouseDelayTimer","isMouseDelayMet","mouseDownInfo","removeEventListener","removeMouseMoveEventListeners","mouseCapture","handleStartMouse","mouseMove","touchMove","mouseUp","touchEnd","mouseDelay","getMouseDelay","startMouseDelayTimer","mouseDrag","mouseStart","mouseStop","SaveStateHandler","state","stringify","getState","onSetStateFromStorage","supportsLocalStorage","localStorage","setItem","getKeyName","jsonData","loadFromStorage","parseState","selectedNodeIds","openNodes","open_nodes","selected_node","getSelectedNodes","mustLoadOnDemand","openInitialNodes","resetSelection","selectInitialNodes","cbFinished","doSetInitialStateOnDemand","getStateFromStorage","onGetStateFromStorage","getItem","nodeIds","getNodeById","selectCount","addToSelection","removeFromSelection","nodeIdsParam","selectedNodes","loadingCount","newNodesIds","loadAndOpenNode","saveState","_supportsLocalStorage","sessionStorage","removeItem","testSupport","ScrollHandler","isInitialized","ensureInit","checkVerticalScrolling","checkHorizontalScrolling","$scrollParent","scrollTop","treeTop","elementBottom","viewBottom","elementTop","viewTop","elHeight","scrollParentTop","scrollLeft","setDocumentAsScrollParent","cssAttributes","hasOverFlow","attr","overflowValue","parents","getParentWithOverflow","tagName","initScrollParent","scrollParent","offsetHeight","refreshHitAreas","dndHandler","handleVerticalScrollingWithScrollParent","handleVerticalScrollingWithDocument","handleHorizontalScrollingWithParent","handleHorizontalScrollingWithDocument","scrollParentOffset","canScrollRight","clientWidth","scrollWidth","canScrollLeft","rightEdge","leftEdge","isNearRightEdge","isNearLeftEdge","max","$document","windowWidth","SelectNodeHandler","Set","selectedSingleNode","has","add","activeElement","_containsElement","NodeElement","mustShowBorderDropHint","BorderDropHint","GhostDropHint","mustSetFocus","$li","getLi","$span","getSpan","trigger","removeAttr","blur","FolderElement","_NodeElement","animationSpeed","$button","getButton","buttonEl","icon","renderer","doOpen","getUl","slideDown","show","doClose","slideUp","hide","$div","elWidth","outerHeight","$hint","$ghost","moveAfter","moveBefore","moveInsideOpenFolder","moveInside","childElement","NODE_PARAM_IS_EMPTY","PARAM_IS_EMPTY","JqTreeWidget","_MouseWidget","clickTarget","getClickTarget","type","toggle","stopPropagation","click_event","doSelectNode","closest","getNode","slideParam","Error","optionsParam","getData","doLoadData","param1","param2","param3","doLoadDataFromUrl","getNodeByName","getNodeByNameMustExist","getNodesByProperty","_parseParams","_this2$options$slide","parseParams","_parseParams2","_slicedToArray","close","newNodeInfo","existingNode","newNode","addAfter","addBefore","addParent","parentNodeParam","prepend","idIsChanged","subtree","positionIndex","saveStateHandler","select","deselect","nodeOffset","nodeTop","treeOffset","scrollToY","setInitialState","option","keyHandler","eventName","values","event","Event","doOpenNode","_node","_slide","_onFinished","open","loadFolderOnDemand","mustSelect","isSelectedNodeInSubtree","render","selectCurrentNode","getScrollLeft","_get","_getPrototypeOf","getRtlOption","getDefaultClosedIcon","dataLoader","initData","handleClick","handleDblclick","useContextMenu","handleContextmenu","checkScrolling","_this$options$startDn","startDndDelay","getDataUrlInfo","dataUrl","setUrlInfoData","selectedNodeId","getNodeIdToBeSelected","_this5","doInit","setInitialStateOnDemand","_this6","_restoreState2","restoreState","isRestored","autoOpen","maxLevel","getAutoOpenMaxLevel","autoOpenNodes","_this7","parseInt","$target","dataRtl","_this8","deselectCurrentNode","selectOptions","defaultOptions","mustToggle","onCanSelectNode","selectable","previous_node","deselectedNode","deselected_node","tree_data","deselectNodes","loadSubtree","initTree","getSelectedNodesUnder","urlInfoParam","loadFromUrl","_this9"],"mappings":"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"}