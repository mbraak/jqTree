{"version":3,"file":"tree.jquery.js","sources":["src/version.ts","src/nodeUtils.ts","src/node.ts","src/dragAndDropHandler/dragElement.ts","src/util.ts","src/dragAndDropHandler/visibleNodeIterator.ts","src/dragAndDropHandler/hitAreasGenerator.ts","src/dragAndDropHandler/index.ts","src/elementsRenderer.ts","src/dataLoader.ts","src/keyHandler.ts","src/simple.widget.ts","src/mouse.widget.ts","src/saveStateHandler.ts","src/scrollHandler/containerScrollParent.ts","src/scrollHandler/documentScrollParent.ts","src/scrollHandler/createScrollParent.ts","src/scrollHandler.ts","src/selectNodeHandler.ts","src/nodeElement/borderDropHint.ts","src/nodeElement/ghostDropHint.ts","src/nodeElement/index.ts","src/nodeElement/folderElement.ts","src/tree.jquery.ts"],"sourcesContent":["const version = \"1.7.5\";\n\nexport default version;\n","interface NodeRecordWithChildren extends NodeRecord {\n    children: NodeData[];\n}\n\nexport const isNodeRecordWithChildren = (\n    data: NodeData,\n): data is NodeRecordWithChildren =>\n    typeof data === \"object\" &&\n    \"children\" in data &&\n    data[\"children\"] instanceof Array;\n","import { isNodeRecordWithChildren } from \"./nodeUtils\";\n\nexport enum Position {\n    Before = 1,\n    After,\n    Inside,\n    None,\n}\n\nconst positionNames: Record<string, Position> = {\n    before: Position.Before,\n    after: Position.After,\n    inside: Position.Inside,\n    none: Position.None,\n};\n\ntype IterateCallback = (node: Node, level: number) => boolean;\n\nexport const getPositionName = (position: Position): string => {\n    for (const name in positionNames) {\n        if (Object.prototype.hasOwnProperty.call(positionNames, name)) {\n            if (positionNames[name] === position) {\n                return name;\n            }\n        }\n    }\n\n    return \"\";\n};\n\nexport const getPosition = (name: string): Position | undefined =>\n    positionNames[name];\n\nexport class Node implements INode {\n    public id?: NodeId;\n    public name: string;\n    public children: Node[];\n    public parent: Node | null;\n    public idMapping: Map<NodeId, Node>;\n    public tree?: Node;\n    public nodeClass?: typeof Node;\n    public load_on_demand: boolean;\n    public is_open: boolean;\n    public element: HTMLElement;\n    public is_loading: boolean;\n    public isEmptyFolder: boolean;\n\n    [key: string]: unknown;\n\n    constructor(\n        nodeData: NodeData | null = null,\n        isRoot = false,\n        nodeClass = Node,\n    ) {\n        this.name = \"\";\n        this.load_on_demand = false;\n\n        this.isEmptyFolder =\n            nodeData != null &&\n            isNodeRecordWithChildren(nodeData) &&\n            nodeData.children.length === 0;\n\n        this.setData(nodeData);\n\n        this.children = [];\n        this.parent = null;\n\n        if (isRoot) {\n            this.idMapping = new Map<NodeId, Node>();\n            this.tree = this;\n            this.nodeClass = nodeClass;\n        }\n    }\n\n    /*\n    Set the data of this node.\n\n    setData(string): set the name of the node\n    setData(object): set attributes of the node\n\n    Examples:\n        setData('node1')\n\n        setData({ name: 'node1', id: 1});\n\n        setData({ name: 'node2', id: 2, color: 'green'});\n\n    * This is an internal function; it is not in the docs\n    * Does not remove existing node values\n    */\n    public setData(o: NodeData | null): void {\n        if (!o) {\n            return;\n        } else if (typeof o === \"string\") {\n            this.name = o;\n        } else if (typeof o === \"object\") {\n            for (const key in o) {\n                if (Object.prototype.hasOwnProperty.call(o, key)) {\n                    const value = o[key];\n\n                    if (key === \"label\" || key === \"name\") {\n                        // You can use the 'label' key instead of 'name'; this is a legacy feature\n                        if (typeof value === \"string\") {\n                            this.name = value;\n                        }\n                    } else if (key !== \"children\" && key !== \"parent\") {\n                        // You can't update the children or the parent using this function\n                        this[key] = value;\n                    }\n                }\n            }\n        }\n    }\n\n    /*\n    Create tree from data.\n\n    Structure of data is:\n    [\n        {\n            name: 'node1',\n            children: [\n                { name: 'child1' },\n                { name: 'child2' }\n            ]\n        },\n        {\n            name: 'node2'\n        }\n    ]\n    */\n    public loadFromData(data: NodeData[]): Node {\n        this.removeChildren();\n\n        for (const childData of data) {\n            const node = this.createNode(childData);\n            this.addChild(node);\n\n            if (isNodeRecordWithChildren(childData)) {\n                node.loadFromData(childData.children);\n            }\n        }\n\n        return this;\n    }\n\n    /*\n    Add child.\n\n    tree.addChild(\n        new Node('child1')\n    );\n    */\n    public addChild(node: Node): void {\n        this.children.push(node);\n        node.setParent(this);\n    }\n\n    /*\n    Add child at position. Index starts at 0.\n\n    tree.addChildAtPosition(\n        new Node('abc'),\n        1\n    );\n    */\n    public addChildAtPosition(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        node.setParent(this);\n    }\n\n    /*\n    Remove child. This also removes the children of the node.\n\n    tree.removeChild(tree.children[0]);\n    */\n    public removeChild(node: Node): void {\n        // remove children from the index\n        node.removeChildren();\n\n        this.doRemoveChild(node);\n    }\n\n    /*\n    Get child index.\n\n    var index = getChildIndex(node);\n    */\n    public getChildIndex(node: Node): number {\n        return this.children.indexOf(node);\n    }\n\n    /*\n    Does the tree have children?\n\n    if (tree.hasChildren()) {\n        //\n    }\n    */\n    public hasChildren(): boolean {\n        return this.children.length !== 0;\n    }\n\n    public isFolder(): boolean {\n        return this.hasChildren() || this.load_on_demand;\n    }\n\n    /*\n    Iterate over all the nodes in the tree.\n\n    Calls callback with (node, level).\n\n    The callback must return true to continue the iteration on current node.\n\n    tree.iterate(\n        function(node, level) {\n           console.log(node.name);\n\n           // stop iteration after level 2\n           return (level <= 2);\n        }\n    );\n\n    */\n    public iterate(callback: IterateCallback): void {\n        const _iterate = (node: Node, level: number): void => {\n            if (node.children) {\n                for (const child of node.children) {\n                    const result = callback(child, level);\n\n                    if (result && child.hasChildren()) {\n                        _iterate(child, level + 1);\n                    }\n                }\n            }\n        };\n\n        _iterate(this, 0);\n    }\n\n    /*\n    Move node relative to another node.\n\n    Argument position: Position.BEFORE, Position.AFTER or Position.Inside\n\n    // move node1 after node2\n    tree.moveNode(node1, node2, Position.AFTER);\n    */\n    public moveNode(\n        movedNode: Node,\n        targetNode: Node,\n        position: Position,\n    ): boolean {\n        if (!movedNode.parent || movedNode.isParentOf(targetNode)) {\n            // - Node is parent of target node\n            // - Or, parent is empty\n            return false;\n        } else {\n            movedNode.parent.doRemoveChild(movedNode);\n\n            switch (position) {\n                case Position.After: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode) + 1,\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Before: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode),\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Inside: {\n                    // move inside as first child\n                    targetNode.addChildAtPosition(movedNode, 0);\n                    return true;\n                }\n\n                default:\n                    return false;\n            }\n        }\n    }\n\n    /*\n    Get the tree as data.\n    */\n    public getData(includeParent = false): NodeRecord[] {\n        const getDataFromNodes = (nodes: Node[]): Record<string, unknown>[] => {\n            return nodes.map((node) => {\n                const tmpNode: Record<string, unknown> = {};\n\n                for (const k in node) {\n                    if (\n                        [\n                            \"parent\",\n                            \"children\",\n                            \"element\",\n                            \"idMapping\",\n                            \"load_on_demand\",\n                            \"nodeClass\",\n                            \"tree\",\n                            \"isEmptyFolder\",\n                        ].indexOf(k) === -1 &&\n                        Object.prototype.hasOwnProperty.call(node, k)\n                    ) {\n                        const v = node[k];\n                        tmpNode[k] = v;\n                    }\n                }\n\n                if (node.hasChildren()) {\n                    tmpNode[\"children\"] = getDataFromNodes(node.children);\n                }\n\n                return tmpNode;\n            });\n        };\n\n        if (includeParent) {\n            return getDataFromNodes([this]);\n        } else {\n            return getDataFromNodes(this.children);\n        }\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.getNodeByCallback((node: Node) => node.name === name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        const node = this.getNodeByCallback((n: Node) => n.name === name);\n\n        if (!node) {\n            throw `Node with name ${name} not found`;\n        }\n\n        return node;\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        let result: Node | null = null;\n\n        this.iterate((node: Node) => {\n            if (result) {\n                return false;\n            } else if (callback(node)) {\n                result = node;\n                return false;\n            } else {\n                return true;\n            }\n        });\n\n        return result;\n    }\n\n    public addAfter(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex + 1);\n\n            node.loadChildrenFromData(nodeInfo);\n            return node;\n        }\n    }\n\n    public addBefore(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex);\n\n            node.loadChildrenFromData(nodeInfo);\n            return node;\n        }\n    }\n\n    public addParent(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const newParent = this.createNode(nodeInfo);\n\n            if (this.tree) {\n                newParent.setParent(this.tree);\n            }\n            const originalParent = this.parent;\n\n            for (const child of originalParent.children) {\n                newParent.addChild(child);\n            }\n\n            originalParent.children = [];\n            originalParent.addChild(newParent);\n            return newParent;\n        }\n    }\n\n    public remove(): void {\n        if (this.parent) {\n            this.parent.removeChild(this);\n            this.parent = null;\n        }\n    }\n\n    public append(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChild(node);\n\n        node.loadChildrenFromData(nodeInfo);\n        return node;\n    }\n\n    public prepend(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChildAtPosition(node, 0);\n\n        node.loadChildrenFromData(nodeInfo);\n        return node;\n    }\n\n    public isParentOf(node: Node): boolean {\n        let parent = node.parent;\n\n        while (parent) {\n            if (parent === this) {\n                return true;\n            }\n\n            parent = parent.parent;\n        }\n\n        return false;\n    }\n\n    public getLevel(): number {\n        let level = 0;\n        let node: Node = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n        while (node.parent) {\n            level += 1;\n            node = node.parent;\n        }\n\n        return level;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.idMapping.get(nodeId) || null;\n    }\n\n    public addNodeToIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.set(node.id, node);\n        }\n    }\n\n    public removeNodeFromIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.delete(node.id);\n        }\n    }\n\n    public removeChildren(): void {\n        this.iterate((child: Node) => {\n            this.tree?.removeNodeFromIndex(child);\n            return true;\n        });\n\n        this.children = [];\n    }\n\n    public getPreviousSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousIndex = this.parent.getChildIndex(this) - 1;\n            if (previousIndex >= 0) {\n                return this.parent.children[previousIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNextSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const nextIndex = this.parent.getChildIndex(this) + 1;\n            if (nextIndex < this.parent.children.length) {\n                return this.parent.children[nextIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.filter((node: Node) => node[key] === value);\n    }\n\n    public filter(f: (node: Node) => boolean): Node[] {\n        const result: Node[] = [];\n\n        this.iterate((node: Node) => {\n            if (f(node)) {\n                result.push(node);\n            }\n\n            return true;\n        });\n\n        return result;\n    }\n\n    public getNextNode(includeChildren = true): Node | null {\n        if (includeChildren && this.hasChildren()) {\n            return this.children[0] || null;\n        } else if (!this.parent) {\n            return null;\n        } else {\n            const nextSibling = this.getNextSibling();\n\n            if (nextSibling) {\n                return nextSibling;\n            } else {\n                return this.parent.getNextNode(false);\n            }\n        }\n    }\n\n    public getNextVisibleNode(): Node | null {\n        if (this.hasChildren() && this.is_open) {\n            // First child\n            return this.children[0] || null;\n        } else {\n            if (!this.parent) {\n                return null;\n            } else {\n                const nextSibling = this.getNextSibling();\n                if (nextSibling) {\n                    // Next sibling\n                    return nextSibling;\n                } else {\n                    // Next node of parent\n                    return this.parent.getNextNode(false);\n                }\n            }\n        }\n    }\n\n    public getPreviousNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (previousSibling.hasChildren()) {\n                return previousSibling.getLastChild();\n            } else {\n                return previousSibling;\n            }\n        }\n    }\n\n    public getPreviousVisibleNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (\n                !previousSibling.hasChildren() ||\n                !previousSibling.is_open\n            ) {\n                // Previous sibling\n                return previousSibling;\n            } else {\n                // Last child of previous sibling\n                return previousSibling.getLastChild();\n            }\n        }\n    }\n\n    public getParent(): Node | null {\n        // Return parent except if it is the root node\n        if (!this.parent) {\n            return null;\n        } else if (!this.parent.parent) {\n            // Root node -> null\n            return null;\n        } else {\n            return this.parent;\n        }\n    }\n\n    public getLastChild(): Node | null {\n        if (!this.hasChildren()) {\n            return null;\n        } else {\n            const lastChild = this.children[this.children.length - 1];\n\n            if (!lastChild) {\n                return null;\n            }\n\n            if (!(lastChild.hasChildren() && lastChild.is_open)) {\n                return lastChild;\n            } else {\n                return lastChild?.getLastChild();\n            }\n        }\n    }\n\n    // Init Node from data without making it the root of the tree\n    public initFromData(data: NodeData): void {\n        const addNode = (nodeData: NodeData): void => {\n            this.setData(nodeData);\n\n            if (\n                isNodeRecordWithChildren(nodeData) &&\n                nodeData.children.length\n            ) {\n                addChildren(nodeData.children);\n            }\n        };\n\n        const addChildren = (childrenData: NodeData[]): void => {\n            for (const child of childrenData) {\n                const node = this.createNode();\n                node.initFromData(child);\n                this.addChild(node);\n            }\n        };\n\n        addNode(data);\n    }\n\n    private setParent(parent: Node): void {\n        this.parent = parent;\n        this.tree = parent.tree;\n        this.tree?.addNodeToIndex(this);\n    }\n\n    private doRemoveChild(node: Node): void {\n        this.children.splice(this.getChildIndex(node), 1);\n        this.tree?.removeNodeFromIndex(node);\n    }\n\n    private getNodeClass(): typeof Node {\n        return this.nodeClass || this?.tree?.nodeClass || Node;\n    }\n\n    private createNode(nodeData?: NodeData): Node {\n        const nodeClass = this.getNodeClass();\n        return new nodeClass(nodeData);\n    }\n\n    // Load children data from nodeInfo if it has children\n    private loadChildrenFromData(nodeInfo: NodeData) {\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            this.loadFromData(nodeInfo.children);\n        }\n    }\n}\n","class DragElement {\n    private offsetX: number;\n    private offsetY: number;\n    private $element: JQuery;\n\n    constructor(\n        nodeName: string,\n        offsetX: number,\n        offsetY: number,\n        $tree: JQuery,\n        autoEscape: boolean,\n    ) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n\n        this.$element = jQuery(\"<span>\").addClass(\n            \"jqtree-title jqtree-dragging\",\n        );\n\n        if (autoEscape) {\n            this.$element.text(nodeName);\n        } else {\n            this.$element.html(nodeName);\n        }\n\n        this.$element.css(\"position\", \"absolute\");\n        $tree.append(this.$element);\n    }\n\n    public move(pageX: number, pageY: number): void {\n        this.$element.offset({\n            left: pageX - this.offsetX,\n            top: pageY - this.offsetY,\n        });\n    }\n\n    public remove(): void {\n        this.$element.remove();\n    }\n}\n\nexport default DragElement;\n","export const isInt = (n: unknown): boolean =>\n    typeof n === \"number\" && n % 1 === 0;\n\nexport const isFunction = (v: unknown): boolean => typeof v === \"function\";\n\nexport const getBoolString = (value: unknown): string =>\n    value ? \"true\" : \"false\";\n\nexport const getOffsetTop = (element: HTMLElement) =>\n    element.getBoundingClientRect().y + window.scrollY;\n","import { Node } from \"../node\";\n\nabstract class VisibleNodeIterator {\n    private tree: Node;\n\n    constructor(tree: Node) {\n        this.tree = tree;\n    }\n\n    protected iterate(): void {\n        let isFirstNode = true;\n\n        const _iterateNode = (node: Node, nextNode: Node | null): void => {\n            let mustIterateInside =\n                (node.is_open || !node.element) && node.hasChildren();\n\n            let element: HTMLElement | null = null;\n\n            // Is the element visible?\n            if (node.element?.offsetParent) {\n                element = node.element;\n\n                if (isFirstNode) {\n                    this.handleFirstNode(node);\n                    isFirstNode = false;\n                }\n\n                if (!node.hasChildren()) {\n                    this.handleNode(node, nextNode, node.element);\n                } else if (node.is_open) {\n                    if (!this.handleOpenFolder(node, node.element)) {\n                        mustIterateInside = false;\n                    }\n                } else {\n                    this.handleClosedFolder(node, nextNode, element);\n                }\n            }\n\n            if (mustIterateInside) {\n                const childrenLength = node.children.length;\n                node.children.forEach((_, i) => {\n                    const child = node.children[i];\n\n                    if (child) {\n                        if (i === childrenLength - 1) {\n                            _iterateNode(child, null);\n                        } else {\n                            const nextChild = node.children[i + 1];\n\n                            if (nextChild) {\n                                _iterateNode(child, nextChild);\n                            }\n                        }\n                    }\n                });\n\n                if (node.is_open && element) {\n                    this.handleAfterOpenFolder(node, nextNode);\n                }\n            }\n        };\n\n        _iterateNode(this.tree, null);\n    }\n\n    protected abstract handleNode(\n        node: Node,\n        nextNode: Node | null,\n        element: HTMLElement,\n    ): void;\n\n    /*\n    override\n    return\n        - true: continue iterating\n        - false: stop iterating\n    */\n    protected abstract handleOpenFolder(\n        node: Node,\n        element: HTMLElement,\n    ): boolean;\n\n    protected abstract handleClosedFolder(\n        node: Node,\n        nextNode: Node | null,\n        element: HTMLElement,\n    ): void;\n\n    protected abstract handleAfterOpenFolder(\n        node: Node,\n        nextNode: Node | null,\n    ): void;\n\n    protected abstract handleFirstNode(node: Node): void;\n}\n\nexport default VisibleNodeIterator;\n","import { HitArea } from \"../types\";\nimport { Node, Position } from \"../node\";\nimport { getOffsetTop } from \"../util\";\nimport VisibleNodeIterator from \"./visibleNodeIterator\";\n\nclass HitAreasGenerator extends VisibleNodeIterator {\n    private currentNode: Node;\n    private treeBottom: number;\n    private positions: HitArea[];\n    private lastTop: number;\n\n    constructor(tree: Node, currentNode: Node, treeBottom: number) {\n        super(tree);\n\n        this.currentNode = currentNode;\n        this.treeBottom = treeBottom;\n    }\n\n    public generate(): HitArea[] {\n        this.positions = [];\n        this.lastTop = 0;\n\n        this.iterate();\n\n        return this.generateHitAreas(this.positions);\n    }\n\n    protected generateHitAreas(positions: HitArea[]): HitArea[] {\n        let previousTop = positions[0]?.top ?? 0;\n        let group = [];\n        const hitAreas: HitArea[] = [];\n\n        for (const position of positions) {\n            if (position.top !== previousTop && group.length) {\n                this.generateHitAreasForGroup(\n                    hitAreas,\n                    group,\n                    previousTop,\n                    position.top,\n                );\n\n                previousTop = position.top;\n                group = [];\n            }\n\n            group.push(position);\n        }\n\n        this.generateHitAreasForGroup(\n            hitAreas,\n            group,\n            previousTop,\n            this.treeBottom,\n        );\n\n        return hitAreas;\n    }\n\n    protected handleOpenFolder(node: Node, element: HTMLElement): boolean {\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            // Stop iterating\n            return false;\n        }\n\n        // Cannot move before current item\n        if (node.children[0] !== this.currentNode) {\n            this.addPosition(node, Position.Inside, getOffsetTop(element));\n        }\n\n        // Continue iterating\n        return true;\n    }\n\n    protected handleClosedFolder(\n        node: Node,\n        nextNode: Node,\n        element: HTMLElement,\n    ): void {\n        const top = getOffsetTop(element);\n\n        if (node === this.currentNode) {\n            // Cannot move after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n\n            // Cannot move before current item\n            if (nextNode !== this.currentNode) {\n                this.addPosition(node, Position.After, top);\n            }\n        }\n    }\n\n    protected handleFirstNode(node: Node): void {\n        if (node !== this.currentNode) {\n            this.addPosition(node, Position.Before, getOffsetTop(node.element));\n        }\n    }\n\n    protected handleAfterOpenFolder(node: Node, nextNode: Node): void {\n        if (node === this.currentNode || nextNode === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, this.lastTop);\n        } else {\n            this.addPosition(node, Position.After, this.lastTop);\n        }\n    }\n\n    protected handleNode(\n        node: Node,\n        nextNode: Node,\n        element: HTMLElement,\n    ): void {\n        const top = getOffsetTop(element);\n\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n        }\n\n        if (nextNode === this.currentNode || node === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.After, top);\n        }\n    }\n\n    private addPosition(node: Node, position: number, top: number): void {\n        const area = {\n            top,\n            bottom: 0,\n            node,\n            position,\n        };\n\n        this.positions.push(area);\n        this.lastTop = top;\n    }\n\n    private generateHitAreasForGroup(\n        hitAreas: HitArea[],\n        positionsInGroup: HitArea[],\n        top: number,\n        bottom: number,\n    ): void {\n        // limit positions in group\n        const positionCount = Math.min(positionsInGroup.length, 4);\n\n        const areaHeight = Math.round((bottom - top) / positionCount);\n        let areaTop = top;\n\n        let i = 0;\n        while (i < positionCount) {\n            const position = positionsInGroup[i];\n\n            if (position) {\n                hitAreas.push({\n                    top: areaTop,\n                    bottom: areaTop + areaHeight,\n                    node: position.node,\n                    position: position.position,\n                });\n            }\n\n            areaTop += areaHeight;\n            i += 1;\n        }\n    }\n}\n\nexport default HitAreasGenerator;\n","import { getPositionName, Node, Position } from \"../node\";\nimport { DropHint, HitArea, PositionInfo } from \"../types\";\nimport NodeElement from \"../nodeElement\";\nimport { JqTreeWidget } from \"../tree.jquery\";\nimport DragElement from \"./dragElement\";\nimport HitAreasGenerator from \"./hitAreasGenerator\";\n\ninterface Dimensions {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n}\n\nexport class DragAndDropHandler {\n    public hitAreas: HitArea[];\n    public isDragging: boolean;\n    public currentItem: NodeElement | null;\n    public hoveredArea: HitArea | null;\n\n    private treeWidget: JqTreeWidget;\n    private dragElement: DragElement | null;\n    private previousGhost: DropHint | null;\n    private openFolderTimer: number | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        this.hoveredArea = null;\n        this.hitAreas = [];\n        this.isDragging = false;\n        this.currentItem = null;\n    }\n\n    public mouseCapture(positionInfo: PositionInfo): boolean | null {\n        const element = positionInfo.target;\n\n        if (!this.mustCaptureElement(element)) {\n            return null;\n        }\n\n        if (\n            this.treeWidget.options.onIsMoveHandle &&\n            !this.treeWidget.options.onIsMoveHandle(jQuery(element))\n        ) {\n            return null;\n        }\n\n        let nodeElement = this.treeWidget._getNodeElement(element);\n\n        if (nodeElement && this.treeWidget.options.onCanMove) {\n            if (!this.treeWidget.options.onCanMove(nodeElement.node)) {\n                nodeElement = null;\n            }\n        }\n\n        this.currentItem = nodeElement;\n        return this.currentItem != null;\n    }\n\n    public mouseStart(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.refresh();\n\n        const offset = jQuery(positionInfo.target).offset();\n        const left = offset ? offset.left : 0;\n        const top = offset ? offset.top : 0;\n\n        const node = this.currentItem.node;\n\n        this.dragElement = new DragElement(\n            node.name,\n            positionInfo.pageX - left,\n            positionInfo.pageY - top,\n            this.treeWidget.element,\n            this.treeWidget.options.autoEscape ?? true,\n        );\n\n        this.isDragging = true;\n        this.currentItem.element.classList.add(\"jqtree-moving\");\n\n        return true;\n    }\n\n    public mouseDrag(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            !this.dragElement ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.dragElement.move(positionInfo.pageX, positionInfo.pageY);\n\n        const area = this.findHoveredArea(\n            positionInfo.pageX,\n            positionInfo.pageY,\n        );\n\n        if (area && this.canMoveToArea(area)) {\n            if (!area.node.isFolder()) {\n                this.stopOpenFolderTimer();\n            }\n\n            if (this.hoveredArea !== area) {\n                this.hoveredArea = area;\n\n                // If this is a closed folder, start timer to open it\n                if (this.mustOpenFolderTimer(area)) {\n                    this.startOpenFolderTimer(area.node);\n                } else {\n                    this.stopOpenFolderTimer();\n                }\n\n                this.updateDropHint();\n            }\n        } else {\n            this.removeDropHint();\n            this.stopOpenFolderTimer();\n            this.hoveredArea = area;\n        }\n\n        if (!area) {\n            if (this.treeWidget.options.onDragMove) {\n                this.treeWidget.options.onDragMove(\n                    this.currentItem.node,\n                    positionInfo.originalEvent,\n                );\n            }\n        }\n\n        return true;\n    }\n\n    public mouseStop(positionInfo: PositionInfo): boolean {\n        this.moveItem(positionInfo);\n        this.clear();\n        this.removeHover();\n        this.removeDropHint();\n        this.removeHitAreas();\n\n        const currentItem = this.currentItem;\n\n        if (this.currentItem) {\n            this.currentItem.element.classList.remove(\"jqtree-moving\");\n            this.currentItem = null;\n        }\n\n        this.isDragging = false;\n\n        if (!this.hoveredArea && currentItem) {\n            if (this.treeWidget.options.onDragStop) {\n                this.treeWidget.options.onDragStop(\n                    currentItem.node,\n                    positionInfo.originalEvent,\n                );\n            }\n        }\n\n        return false;\n    }\n\n    public refresh(): void {\n        this.removeHitAreas();\n\n        if (this.currentItem) {\n            this.generateHitAreas();\n\n            this.currentItem = this.treeWidget._getNodeElementForNode(\n                this.currentItem.node,\n            );\n\n            if (this.isDragging) {\n                this.currentItem.element.classList.add(\"jqtree-moving\");\n            }\n        }\n    }\n\n    private generateHitAreas(): void {\n        if (!this.currentItem) {\n            this.hitAreas = [];\n        } else {\n            const hitAreasGenerator = new HitAreasGenerator(\n                this.treeWidget.tree,\n                this.currentItem.node,\n                this.getTreeDimensions().bottom,\n            );\n            this.hitAreas = hitAreasGenerator.generate();\n        }\n    }\n\n    private mustCaptureElement(element: HTMLElement): boolean {\n        const nodeName = element.nodeName;\n\n        return (\n            nodeName !== \"INPUT\" &&\n            nodeName !== \"SELECT\" &&\n            nodeName !== \"TEXTAREA\"\n        );\n    }\n\n    private canMoveToArea(area: HitArea): boolean {\n        if (!this.treeWidget.options.onCanMoveTo) {\n            return true;\n        }\n\n        if (!this.currentItem) {\n            return false;\n        }\n\n        const positionName = getPositionName(area.position);\n\n        return this.treeWidget.options.onCanMoveTo(\n            this.currentItem.node,\n            area.node,\n            positionName,\n        );\n    }\n\n    private removeHitAreas(): void {\n        this.hitAreas = [];\n    }\n\n    private clear(): void {\n        if (this.dragElement) {\n            this.dragElement.remove();\n            this.dragElement = null;\n        }\n    }\n\n    private removeDropHint(): void {\n        if (this.previousGhost) {\n            this.previousGhost.remove();\n        }\n    }\n\n    private removeHover(): void {\n        this.hoveredArea = null;\n    }\n\n    private findHoveredArea(x: number, y: number): HitArea | null {\n        const dimensions = this.getTreeDimensions();\n\n        if (\n            x < dimensions.left ||\n            y < dimensions.top ||\n            x > dimensions.right ||\n            y > dimensions.bottom\n        ) {\n            return null;\n        }\n\n        let low = 0;\n        let high = this.hitAreas.length;\n        while (low < high) {\n            const mid = (low + high) >> 1;\n            const area = this.hitAreas[mid];\n\n            if (!area) {\n                return null;\n            }\n\n            if (y < area.top) {\n                high = mid;\n            } else if (y > area.bottom) {\n                low = mid + 1;\n            } else {\n                return area;\n            }\n        }\n\n        return null;\n    }\n\n    private mustOpenFolderTimer(area: HitArea): boolean {\n        const node = area.node;\n\n        return (\n            node.isFolder() &&\n            !node.is_open &&\n            area.position === Position.Inside\n        );\n    }\n\n    private updateDropHint(): void {\n        if (!this.hoveredArea) {\n            return;\n        }\n\n        // remove previous drop hint\n        this.removeDropHint();\n\n        // add new drop hint\n        const nodeElement = this.treeWidget._getNodeElementForNode(\n            this.hoveredArea.node,\n        );\n        this.previousGhost = nodeElement.addDropHint(this.hoveredArea.position);\n    }\n\n    private startOpenFolderTimer(folder: Node): void {\n        const openFolder = (): void => {\n            this.treeWidget._openNode(\n                folder,\n                this.treeWidget.options.slide,\n                () => {\n                    this.refresh();\n                    this.updateDropHint();\n                },\n            );\n        };\n\n        this.stopOpenFolderTimer();\n\n        const openFolderDelay = this.treeWidget.options.openFolderDelay;\n\n        if (openFolderDelay !== false) {\n            this.openFolderTimer = window.setTimeout(\n                openFolder,\n                openFolderDelay,\n            );\n        }\n    }\n\n    private stopOpenFolderTimer(): void {\n        if (this.openFolderTimer) {\n            clearTimeout(this.openFolderTimer);\n            this.openFolderTimer = null;\n        }\n    }\n\n    private moveItem(positionInfo: PositionInfo): void {\n        if (\n            this.currentItem &&\n            this.hoveredArea &&\n            this.hoveredArea.position !== Position.None &&\n            this.canMoveToArea(this.hoveredArea)\n        ) {\n            const movedNode = this.currentItem.node;\n            const targetNode = this.hoveredArea.node;\n            const position = this.hoveredArea.position;\n            const previousParent = movedNode.parent;\n\n            if (position === Position.Inside) {\n                this.hoveredArea.node.is_open = true;\n            }\n\n            const doMove = (): void => {\n                this.treeWidget.tree.moveNode(movedNode, targetNode, position);\n                this.treeWidget.element.empty();\n                this.treeWidget._refreshElements(null);\n            };\n\n            const event = this.treeWidget._triggerEvent(\"tree.move\", {\n                move_info: {\n                    moved_node: movedNode,\n                    target_node: targetNode,\n                    position: getPositionName(position),\n                    previous_parent: previousParent,\n                    do_move: doMove,\n                    original_event: positionInfo.originalEvent,\n                },\n            });\n\n            if (!event.isDefaultPrevented()) {\n                doMove();\n            }\n        }\n    }\n\n    private getTreeDimensions(): Dimensions {\n        // Return the dimensions of the tree. Add a margin to the bottom to allow\n        // to drag-and-drop after the last element.\n        const offset = this.treeWidget.element.offset();\n\n        if (!offset) {\n            return { left: 0, top: 0, right: 0, bottom: 0 };\n        } else {\n            const el = this.treeWidget.element;\n            const width = el.width() || 0;\n            const height = el.height() || 0;\n            const left = offset.left + this.treeWidget._getScrollLeft();\n\n            return {\n                left,\n                top: offset.top,\n                right: left + width,\n                bottom: offset.top + height + 16,\n            };\n        }\n    }\n}\n","import { getBoolString } from \"./util\";\nimport { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\ntype IconElement = string | HTMLElement | JQuery<HTMLElement>;\n\nexport default class ElementsRenderer {\n    public openedIconElement?: HTMLElement | Text;\n    public closedIconElement?: HTMLElement | Text;\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        this.openedIconElement = this.createButtonElement(\n            treeWidget.options.openedIcon || \"+\",\n        );\n        this.closedIconElement = this.createButtonElement(\n            treeWidget.options.closedIcon || \"-\",\n        );\n    }\n\n    public render(fromNode: Node | null): void {\n        if (fromNode && fromNode.parent) {\n            this.renderFromNode(fromNode);\n        } else {\n            this.renderFromRoot();\n        }\n    }\n\n    public renderFromRoot(): void {\n        const $element = this.treeWidget.element;\n        $element.empty();\n\n        if ($element[0]) {\n            this.createDomElements(\n                $element[0],\n                this.treeWidget.tree.children,\n                true,\n                1,\n            );\n        }\n    }\n\n    public renderFromNode(node: Node): void {\n        // remember current li\n        const $previousLi = jQuery(node.element);\n\n        // create element\n        const li = this.createLi(node, node.getLevel());\n        this.attachNodeData(node, li);\n\n        // add element to dom\n        $previousLi.after(li);\n\n        // remove previous li\n        $previousLi.remove();\n\n        // create children\n        if (node.children) {\n            this.createDomElements(\n                li,\n                node.children,\n                false,\n                node.getLevel() + 1,\n            );\n        }\n    }\n\n    private createDomElements(\n        element: Element,\n        children: Node[],\n        isRootNode: boolean,\n        level: number,\n    ): void {\n        const ul = this.createUl(isRootNode);\n        element.appendChild(ul);\n\n        for (const child of children) {\n            const li = this.createLi(child, level);\n            ul.appendChild(li);\n\n            this.attachNodeData(child, li);\n\n            if (child.hasChildren()) {\n                this.createDomElements(li, child.children, false, level + 1);\n            }\n        }\n    }\n\n    private attachNodeData(node: Node, li: HTMLElement): void {\n        node.element = li;\n        jQuery(li).data(\"node\", node);\n    }\n\n    private createUl(isRootNode: boolean): HTMLUListElement {\n        let classString;\n        let role;\n\n        if (!isRootNode) {\n            classString = \"\";\n            role = \"group\";\n        } else {\n            classString = \"jqtree-tree\";\n            role = \"tree\";\n\n            if (this.treeWidget.options.rtl) {\n                classString += \" jqtree-rtl\";\n            }\n        }\n\n        if (this.treeWidget.options.dragAndDrop) {\n            classString += \" jqtree-dnd\";\n        }\n\n        const ul = document.createElement(\"ul\");\n        ul.className = `jqtree_common ${classString}`;\n\n        ul.setAttribute(\"role\", role);\n\n        return ul;\n    }\n\n    private createLi(node: Node, level: number): HTMLLIElement {\n        const isSelected = Boolean(\n            this.treeWidget.selectNodeHandler.isNodeSelected(node),\n        );\n\n        const mustShowFolder =\n            node.isFolder() ||\n            (node.isEmptyFolder && this.treeWidget.options.showEmptyFolder);\n\n        const li = mustShowFolder\n            ? this.createFolderLi(node, level, isSelected)\n            : this.createNodeLi(node, level, isSelected);\n\n        if (this.treeWidget.options.onCreateLi) {\n            this.treeWidget.options.onCreateLi(node, jQuery(li), isSelected);\n        }\n\n        return li;\n    }\n\n    private setTreeItemAriaAttributes(\n        element: HTMLElement,\n        name: string,\n        level: number,\n        isSelected: boolean,\n    ) {\n        element.setAttribute(\"aria-label\", name);\n        element.setAttribute(\"aria-level\", `${level}`);\n        element.setAttribute(\"aria-selected\", getBoolString(isSelected));\n        element.setAttribute(\"role\", \"treeitem\");\n    }\n\n    private createFolderLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const buttonClasses = this.getButtonClasses(node);\n        const folderClasses = this.getFolderClasses(node, isSelected);\n\n        const iconElement = node.is_open\n            ? this.openedIconElement\n            : this.closedIconElement;\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = `jqtree_common ${folderClasses}`;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // button link\n        const buttonLink = document.createElement(\"a\");\n        buttonLink.className = buttonClasses;\n\n        if (iconElement) {\n            buttonLink.appendChild(iconElement.cloneNode(true));\n        }\n\n        if (this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            true,\n            level,\n        );\n        titleSpan.setAttribute(\"aria-expanded\", getBoolString(node.is_open));\n        div.appendChild(titleSpan);\n\n        if (!this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        return li;\n    }\n\n    private createNodeLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const liClasses = [\"jqtree_common\"];\n\n        if (isSelected) {\n            liClasses.push(\"jqtree-selected\");\n        }\n\n        const classString = liClasses.join(\" \");\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = classString;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            false,\n            level,\n        );\n        div.appendChild(titleSpan);\n\n        return li;\n    }\n\n    private createTitleSpan(\n        nodeName: string,\n        isSelected: boolean,\n        isFolder: boolean,\n        level: number,\n    ): HTMLSpanElement {\n        const titleSpan = document.createElement(\"span\");\n\n        let classes = \"jqtree-title jqtree_common\";\n\n        if (isFolder) {\n            classes += \" jqtree-title-folder\";\n        }\n\n        classes += ` jqtree-title-button-${\n            this.treeWidget.options.buttonLeft ? \"left\" : \"right\"\n        }`;\n\n        titleSpan.className = classes;\n\n        if (isSelected) {\n            const tabIndex = this.treeWidget.options.tabIndex;\n\n            if (tabIndex !== undefined) {\n                titleSpan.setAttribute(\"tabindex\", `${tabIndex}`);\n            }\n        }\n\n        this.setTreeItemAriaAttributes(titleSpan, nodeName, level, isSelected);\n\n        if (this.treeWidget.options.autoEscape) {\n            titleSpan.textContent = nodeName;\n        } else {\n            titleSpan.innerHTML = nodeName;\n        }\n\n        return titleSpan;\n    }\n\n    private getButtonClasses(node: Node): string {\n        const classes = [\"jqtree-toggler\", \"jqtree_common\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (this.treeWidget.options.buttonLeft) {\n            classes.push(\"jqtree-toggler-left\");\n        } else {\n            classes.push(\"jqtree-toggler-right\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private getFolderClasses(node: Node, isSelected: boolean): string {\n        const classes = [\"jqtree-folder\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (isSelected) {\n            classes.push(\"jqtree-selected\");\n        }\n\n        if (node.is_loading) {\n            classes.push(\"jqtree-loading\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private createButtonElement(\n        value: IconElement,\n    ): HTMLElement | Text | undefined {\n        if (typeof value === \"string\") {\n            // convert value to html\n            const div = document.createElement(\"div\");\n            div.innerHTML = value;\n\n            return document.createTextNode(div.innerHTML);\n        } else if (value == null) {\n            return undefined;\n        } else if ((value as HTMLElement).nodeType) {\n            return value as HTMLElement;\n        } else {\n            return jQuery(value)[0];\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport type HandleFinishedLoading = () => void;\n\nexport default class DataLoader {\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n    }\n\n    public loadFromUrl(\n        urlInfo: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null\n    ): void {\n        if (!urlInfo) {\n            return;\n        }\n\n        const $el = this.getDomElement(parentNode);\n        this.addLoadingClass($el);\n        this.notifyLoading(true, parentNode, $el);\n\n        const stopLoading = (): void => {\n            this.removeLoadingClass($el);\n            this.notifyLoading(false, parentNode, $el);\n        };\n\n        const handleSuccess = (data: string | NodeData[]): void => {\n            stopLoading();\n            this.treeWidget.loadData(this.parseData(data), parentNode);\n\n            if (onFinished && typeof onFinished === \"function\") {\n                onFinished();\n            }\n        };\n\n        const handleError = (jqXHR: JQuery.jqXHR): void => {\n            stopLoading();\n\n            if (this.treeWidget.options.onLoadFailed) {\n                this.treeWidget.options.onLoadFailed(jqXHR);\n            }\n        };\n\n        this.submitRequest(urlInfo, handleSuccess, handleError);\n    }\n\n    private addLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.addClass(\"jqtree-loading\");\n        }\n    }\n\n    private removeLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.removeClass(\"jqtree-loading\");\n        }\n    }\n\n    private getDomElement(parentNode: Node | null): JQuery<HTMLElement> {\n        if (parentNode) {\n            return jQuery(parentNode.element);\n        } else {\n            return this.treeWidget.element;\n        }\n    }\n\n    private notifyLoading(\n        isLoading: boolean,\n        node: Node | null,\n        $el: JQuery\n    ): void {\n        if (this.treeWidget.options.onLoading) {\n            this.treeWidget.options.onLoading(isLoading, node, $el);\n        }\n\n        this.treeWidget._triggerEvent(\"tree.loading_data\", {\n            isLoading,\n            node,\n            $el,\n        });\n    }\n\n    private submitRequest(\n        urlInfoInput: string | JQuery.AjaxSettings,\n        handleSuccess: JQuery.Ajax.SuccessCallback<any>,\n        handleError: JQuery.Ajax.ErrorCallback<any>\n    ): void {\n        const urlInfo =\n            typeof urlInfoInput === \"string\"\n                ? { url: urlInfoInput }\n                : urlInfoInput;\n\n        const ajaxSettings: JQuery.AjaxSettings = {\n            method: \"GET\",\n            cache: false,\n            dataType: \"json\",\n            success: handleSuccess,\n            error: handleError,\n            ...urlInfo,\n        };\n\n        ajaxSettings.method = ajaxSettings.method?.toUpperCase() || \"GET\";\n\n        void jQuery.ajax(ajaxSettings);\n    }\n\n    private parseData(data: string | NodeData[]): NodeData[] {\n        const { dataFilter } = this.treeWidget.options;\n\n        const getParsedData = () => {\n            if (typeof data === \"string\") {\n                return JSON.parse(data) as NodeData[];\n            } else {\n                return data;\n            }\n        };\n\n        const parsedData = getParsedData();\n\n        if (dataFilter) {\n            return dataFilter(parsedData);\n        } else {\n            return parsedData;\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\ntype KeyboardEventHandler = (event: KeyboardEvent) => boolean;\n\nexport default class KeyHandler {\n    private treeWidget: JqTreeWidget;\n    private handleKeyDownHandler: KeyboardEventHandler | null = null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        if (treeWidget.options.keyboardSupport) {\n            this.handleKeyDownHandler = this.handleKeyDown.bind(this);\n\n            document.addEventListener(\"keydown\", this.handleKeyDownHandler);\n        }\n    }\n\n    public deinit(): void {\n        if (this.handleKeyDownHandler) {\n            document.removeEventListener(\"keydown\", this.handleKeyDownHandler);\n        }\n    }\n\n    public moveDown(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getNextVisibleNode());\n    }\n\n    public moveUp(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getPreviousVisibleNode());\n    }\n\n    public moveRight(selectedNode: Node): boolean {\n        if (!selectedNode.isFolder()) {\n            return true;\n        } else {\n            // folder node\n            if (selectedNode.is_open) {\n                // Right moves to the first child of an open node\n                return this.selectNode(selectedNode.getNextVisibleNode());\n            } else {\n                // Right expands a closed node\n                this.treeWidget.openNode(selectedNode);\n                return false;\n            }\n        }\n    }\n\n    public moveLeft(selectedNode: Node): boolean {\n        if (selectedNode.isFolder() && selectedNode.is_open) {\n            // Left on an open node closes the node\n            this.treeWidget.closeNode(selectedNode);\n            return false;\n        } else {\n            // Left on a closed or end node moves focus to the node's parent\n            return this.selectNode(selectedNode.getParent());\n        }\n    }\n\n    public selectNode(node: Node | null): boolean {\n        if (!node) {\n            return true;\n        } else {\n            this.treeWidget.selectNode(node);\n\n            return false;\n        }\n    }\n\n    private handleKeyDown = (e: KeyboardEvent): boolean => {\n        if (!this.canHandleKeyboard()) {\n            return true;\n        }\n\n        const selectedNode = this.treeWidget.getSelectedNode();\n        if (!selectedNode) {\n            return true;\n        }\n\n        switch (e.key) {\n            case \"ArrowDown\":\n                return this.moveDown(selectedNode);\n\n            case \"ArrowUp\":\n                return this.moveUp(selectedNode);\n\n            case \"ArrowRight\":\n                return this.moveRight(selectedNode);\n\n            case \"ArrowLeft\":\n                return this.moveLeft(selectedNode);\n\n            default:\n                return true;\n        }\n    };\n\n    private canHandleKeyboard(): boolean {\n        return (\n            (this.treeWidget.options.keyboardSupport || false) &&\n            this.treeWidget.selectNodeHandler.isFocusOnTree()\n        );\n    }\n}\n","const register = (widgetClass: unknown, widgetName: string): void => {\n    const getDataKey = (): string => `simple_widget_${widgetName}`;\n\n    const getWidgetData = (\n        el: HTMLElement,\n        dataKey: string\n    ): SimpleWidget<unknown> | null => {\n        const widget = jQuery.data(el, dataKey) as unknown;\n\n        if (widget && widget instanceof SimpleWidget) {\n            return widget;\n        } else {\n            return null;\n        }\n    };\n\n    const createWidget = ($el: JQuery, options: unknown): JQuery => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const existingWidget = getWidgetData(el, dataKey);\n\n            if (!existingWidget) {\n                const simpleWidgetClass = widgetClass as typeof SimpleWidget;\n                const widget = new simpleWidgetClass(el, options);\n\n                if (!jQuery.data(el, dataKey)) {\n                    jQuery.data(el, dataKey, widget);\n                }\n\n                // Call init after setting data, so we can call methods\n                widget.init();\n            }\n        }\n\n        return $el;\n    };\n\n    const destroyWidget = ($el: JQuery): void => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const widget = getWidgetData(el, dataKey);\n\n            if (widget) {\n                widget.destroy();\n            }\n\n            jQuery.removeData(el, dataKey);\n        }\n    };\n\n    const callFunction = (\n        $el: JQuery,\n        functionName: string,\n        args: unknown[]\n    ): unknown => {\n        let result = null;\n\n        for (const el of $el.get()) {\n            const widget = jQuery.data(el, getDataKey()) as unknown;\n\n            if (widget && widget instanceof SimpleWidget) {\n                const simpleWidget = widget as SimpleWidget<unknown>;\n                const widgetFunction = simpleWidget[functionName];\n\n                if (widgetFunction && typeof widgetFunction === \"function\") {\n                    result = widgetFunction.apply(widget, args) as unknown;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (jQuery.fn as any)[widgetName] = function (\n        this: JQuery,\n        argument1: unknown,\n        ...args: unknown[]\n    ) {\n        if (!argument1) {\n            return createWidget(this, null);\n        } else if (typeof argument1 === \"object\") {\n            const options = argument1 as unknown;\n            return createWidget(this, options);\n        } else if (typeof argument1 === \"string\" && argument1[0] !== \"_\") {\n            const functionName = argument1;\n\n            if (functionName === \"destroy\") {\n                return destroyWidget(this);\n            } else if (functionName === \"get_widget_class\") {\n                return widgetClass;\n            } else {\n                return callFunction(this, functionName, args);\n            }\n        } else {\n            return undefined;\n        }\n    };\n};\n\nexport default class SimpleWidget<WidgetOptions> {\n    public static register(widgetClass: unknown, widgetName: string): void {\n        register(widgetClass, widgetName);\n    }\n\n    [key: string]: unknown;\n\n    protected static defaults: unknown = {};\n\n    public options: WidgetOptions;\n\n    public $el: JQuery<HTMLElement>;\n\n    constructor(el: HTMLElement, options: WidgetOptions) {\n        this.$el = jQuery(el);\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const defaults = (this.constructor as any)[\"defaults\"] as WidgetOptions;\n        this.options = { ...defaults, ...options };\n    }\n\n    public destroy(): void {\n        this.deinit();\n    }\n\n    public init(): void {\n        //\n    }\n\n    public deinit(): void {\n        //\n    }\n}\n","/*\nThis widget does the same a the mouse widget in jqueryui.\n*/\nimport SimpleWidget from \"./simple.widget\";\nimport { PositionInfo } from \"./types\";\n\nconst getPositionInfoFromMouseEvent = (e: MouseEvent): PositionInfo => ({\n    pageX: e.pageX,\n    pageY: e.pageY,\n    target: e.target as HTMLElement,\n    originalEvent: e,\n});\n\nconst getPositionInfoFromTouch = (\n    touch: Touch,\n    e: TouchEvent\n): PositionInfo => ({\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    target: touch.target as HTMLElement,\n    originalEvent: e,\n});\n\nabstract class MouseWidget<WidgetOptions> extends SimpleWidget<WidgetOptions> {\n    protected isMouseStarted: boolean;\n    protected mouseDownInfo: PositionInfo | null;\n    private mouseDelayTimer: number | null;\n    private isMouseDelayMet: boolean;\n\n    public init(): void {\n        const element = this.$el.get(0);\n\n        if (element) {\n            element.addEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n            element.addEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.isMouseStarted = false;\n        this.mouseDelayTimer = null;\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n    }\n\n    public deinit(): void {\n        const el = this.$el.get(0);\n\n        if (el) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.removeMouseMoveEventListeners();\n    }\n\n    protected abstract mouseCapture(positionInfo: PositionInfo): boolean | null;\n\n    protected abstract mouseStart(positionInfo: PositionInfo): boolean;\n\n    protected abstract mouseDrag(positionInfo: PositionInfo): void;\n\n    protected abstract mouseStop(positionInfo: PositionInfo): void;\n\n    protected abstract getMouseDelay(): number;\n\n    private mouseDown = (e: MouseEvent): void => {\n        // Left mouse button?\n        if (e.button !== 0) {\n            return;\n        }\n\n        const result = this.handleMouseDown(getPositionInfoFromMouseEvent(e));\n\n        if (result && e.cancelable) {\n            e.preventDefault();\n        }\n    };\n\n    private handleMouseDown(positionInfo: PositionInfo): boolean {\n        // We may have missed mouseup (out of window)\n        if (this.isMouseStarted) {\n            this.handleMouseUp(positionInfo);\n        }\n\n        this.mouseDownInfo = positionInfo;\n\n        if (!this.mouseCapture(positionInfo)) {\n            return false;\n        }\n\n        this.handleStartMouse();\n\n        return true;\n    }\n\n    private handleStartMouse(): void {\n        document.addEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        document.addEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        document.addEventListener(\"mouseup\", this.mouseUp, { passive: false });\n        document.addEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n\n        const mouseDelay = this.getMouseDelay();\n\n        if (mouseDelay) {\n            this.startMouseDelayTimer(mouseDelay);\n        } else {\n            this.isMouseDelayMet = true;\n        }\n    }\n\n    private startMouseDelayTimer(mouseDelay: number): void {\n        if (this.mouseDelayTimer) {\n            clearTimeout(this.mouseDelayTimer);\n        }\n\n        this.mouseDelayTimer = window.setTimeout(() => {\n            if (this.mouseDownInfo) {\n                this.isMouseDelayMet = true;\n            }\n        }, mouseDelay);\n\n        this.isMouseDelayMet = false;\n    }\n\n    private mouseMove = (e: MouseEvent): void => {\n        this.handleMouseMove(e, getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseMove(\n        e: MouseEvent | TouchEvent,\n        positionInfo: PositionInfo\n    ): void {\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n            return;\n        }\n\n        if (!this.isMouseDelayMet) {\n            return;\n        }\n\n        if (this.mouseDownInfo) {\n            this.isMouseStarted = this.mouseStart(this.mouseDownInfo) !== false;\n        }\n\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n        } else {\n            this.handleMouseUp(positionInfo);\n        }\n    }\n\n    private mouseUp = (e: MouseEvent): void => {\n        this.handleMouseUp(getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseUp(positionInfo: PositionInfo): void {\n        this.removeMouseMoveEventListeners();\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n\n        if (this.isMouseStarted) {\n            this.isMouseStarted = false;\n            this.mouseStop(positionInfo);\n        }\n    }\n\n    private removeMouseMoveEventListeners() {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mouseup\", this.mouseUp, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n    }\n\n    private touchStart = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseDown(getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchMove = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseMove(e, getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchEnd = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseUp(getPositionInfoFromTouch(touch, e));\n    };\n}\n\nexport default MouseWidget;\n","import { isInt } from \"./util\";\nimport { JqTreeWidget } from \"./tree.jquery\";\nimport { Node } from \"./node\";\n\nexport interface SavedState {\n    open_nodes: NodeId[];\n    selected_node: NodeId[];\n}\n\nexport default class SaveStateHandler {\n    private treeWidget: JqTreeWidget;\n    private _supportsLocalStorage: boolean | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n    }\n\n    public saveState(): void {\n        const state = JSON.stringify(this.getState());\n\n        if (this.treeWidget.options.onSetStateFromStorage) {\n            this.treeWidget.options.onSetStateFromStorage(state);\n        } else if (this.supportsLocalStorage()) {\n            localStorage.setItem(this.getKeyName(), state);\n        }\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        const jsonData = this.loadFromStorage();\n\n        if (jsonData) {\n            return this.parseState(jsonData) as unknown as SavedState;\n        } else {\n            return null;\n        }\n    }\n\n    public getState(): SavedState {\n        const getOpenNodeIds = (): NodeId[] => {\n            const openNodes: NodeId[] = [];\n\n            this.treeWidget.tree.iterate((node: Node) => {\n                if (node.is_open && node.id && node.hasChildren()) {\n                    openNodes.push(node.id);\n                }\n                return true;\n            });\n\n            return openNodes;\n        };\n\n        const getSelectedNodeIds = (): NodeId[] => {\n            const selectedNodeIds: NodeId[] = [];\n\n            this.treeWidget.getSelectedNodes().forEach((node) => {\n                if (node.id != null) {\n                    selectedNodeIds.push(node.id);\n                }\n            });\n\n            return selectedNodeIds;\n        };\n\n        return {\n            open_nodes: getOpenNodeIds(),\n            selected_node: getSelectedNodeIds(),\n        };\n    }\n\n    /*\n    Set initial state\n    Don't handle nodes that are loaded on demand\n\n    result: must load on demand\n    */\n    public setInitialState(state: SavedState): boolean {\n        if (!state) {\n            return false;\n        } else {\n            let mustLoadOnDemand = false;\n\n            if (state.open_nodes) {\n                mustLoadOnDemand = this.openInitialNodes(state.open_nodes);\n            }\n\n            if (state.selected_node) {\n                this.resetSelection();\n                this.selectInitialNodes(state.selected_node);\n            }\n\n            return mustLoadOnDemand;\n        }\n    }\n\n    public setInitialStateOnDemand(\n        state: SavedState,\n        cbFinished: () => void\n    ): void {\n        if (state) {\n            this.doSetInitialStateOnDemand(\n                state.open_nodes,\n                state.selected_node,\n                cbFinished\n            );\n        } else {\n            cbFinished();\n        }\n    }\n\n    public getNodeIdToBeSelected(): NodeId | null {\n        const state = this.getStateFromStorage();\n\n        if (state && state.selected_node) {\n            return state.selected_node[0] || null;\n        } else {\n            return null;\n        }\n    }\n\n    private parseState(jsonData: string): SavedState {\n        const state = JSON.parse(jsonData) as Record<string, unknown>;\n\n        // Check if selected_node is an int (instead of an array)\n        if (state && state.selected_node && isInt(state.selected_node)) {\n            // Convert to array\n            state.selected_node = [state.selected_node];\n        }\n\n        return state as unknown as SavedState;\n    }\n\n    private loadFromStorage(): string | null {\n        if (this.treeWidget.options.onGetStateFromStorage) {\n            return this.treeWidget.options.onGetStateFromStorage();\n        } else if (this.supportsLocalStorage()) {\n            return localStorage.getItem(this.getKeyName());\n        } else {\n            return null;\n        }\n    }\n\n    private openInitialNodes(nodeIds: NodeId[]): boolean {\n        let mustLoadOnDemand = false;\n\n        for (const nodeId of nodeIds) {\n            const node = this.treeWidget.getNodeById(nodeId);\n\n            if (node) {\n                if (!node.load_on_demand) {\n                    node.is_open = true;\n                } else {\n                    mustLoadOnDemand = true;\n                }\n            }\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    private selectInitialNodes(nodeIds: NodeId[]): boolean {\n        let selectCount = 0;\n\n        for (const nodeId of nodeIds) {\n            const node = this.treeWidget.getNodeById(nodeId);\n\n            if (node) {\n                selectCount += 1;\n\n                this.treeWidget.selectNodeHandler.addToSelection(node);\n            }\n        }\n\n        return selectCount !== 0;\n    }\n\n    private resetSelection(): void {\n        const selectNodeHandler = this.treeWidget.selectNodeHandler;\n\n        const selectedNodes = selectNodeHandler.getSelectedNodes();\n\n        selectedNodes.forEach((node) => {\n            selectNodeHandler.removeFromSelection(node);\n        });\n    }\n\n    private doSetInitialStateOnDemand(\n        nodeIdsParam: NodeId[],\n        selectedNodes: NodeId[],\n        cbFinished: () => void\n    ): void {\n        let loadingCount = 0;\n        let nodeIds = nodeIdsParam;\n\n        const openNodes = (): void => {\n            const newNodesIds = [];\n\n            for (const nodeId of nodeIds) {\n                const node = this.treeWidget.getNodeById(nodeId);\n\n                if (!node) {\n                    newNodesIds.push(nodeId);\n                } else {\n                    if (!node.is_loading) {\n                        if (node.load_on_demand) {\n                            loadAndOpenNode(node);\n                        } else {\n                            this.treeWidget._openNode(node, false, null);\n                        }\n                    }\n                }\n            }\n\n            nodeIds = newNodesIds;\n\n            if (this.selectInitialNodes(selectedNodes)) {\n                this.treeWidget._refreshElements(null);\n            }\n\n            if (loadingCount === 0) {\n                cbFinished();\n            }\n        };\n\n        const loadAndOpenNode = (node: Node): void => {\n            loadingCount += 1;\n            this.treeWidget._openNode(node, false, () => {\n                loadingCount -= 1;\n                openNodes();\n            });\n        };\n\n        openNodes();\n    }\n\n    private getKeyName(): string {\n        if (typeof this.treeWidget.options.saveState === \"string\") {\n            return this.treeWidget.options.saveState;\n        } else {\n            return \"tree\";\n        }\n    }\n\n    private supportsLocalStorage(): boolean {\n        const testSupport = (): boolean => {\n            // Is local storage supported?\n            if (localStorage == null) {\n                return false;\n            } else {\n                // Check if it's possible to store an item. Safari does not allow this in private browsing mode.\n                try {\n                    const key = \"_storage_test\";\n                    sessionStorage.setItem(key, \"value\");\n                    sessionStorage.removeItem(key);\n                } catch (error) {\n                    return false;\n                }\n\n                return true;\n            }\n        };\n\n        if (this._supportsLocalStorage == null) {\n            this._supportsLocalStorage = testSupport();\n        }\n\n        return this._supportsLocalStorage;\n    }\n}\n","import type { ScrollParent } from \"./types\";\n\ntype HorizontalScrollDirection = \"left\" | \"right\";\ntype VerticalScrollDirection = \"bottom\" | \"top\";\n\ninterface Params {\n    $container: JQuery<HTMLElement>;\n    refreshHitAreas: () => void;\n    $treeElement: JQuery<HTMLElement>;\n}\n\nexport default class ContainerScrollParent implements ScrollParent {\n    private $container: JQuery<HTMLElement>;\n    private horizontalScrollDirection?: HorizontalScrollDirection;\n    private horizontalScrollTimeout?: number;\n    private refreshHitAreas: () => void;\n    private scrollParentBottom?: number;\n    private scrollParentTop?: number;\n    private verticalScrollTimeout?: number;\n    private verticalScrollDirection?: VerticalScrollDirection;\n\n    constructor({ $container, refreshHitAreas }: Params) {\n        this.$container = $container;\n        this.refreshHitAreas = refreshHitAreas;\n    }\n\n    public checkHorizontalScrolling(pageX: number): void {\n        const newHorizontalScrollDirection =\n            this.getNewHorizontalScrollDirection(pageX);\n\n        if (this.horizontalScrollDirection !== newHorizontalScrollDirection) {\n            this.horizontalScrollDirection = newHorizontalScrollDirection;\n\n            if (this.horizontalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n            }\n\n            if (newHorizontalScrollDirection) {\n                this.horizontalScrollTimeout = window.setTimeout(\n                    this.scrollHorizontally.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public checkVerticalScrolling(pageY: number) {\n        const newVerticalScrollDirection =\n            this.getNewVerticalScrollDirection(pageY);\n\n        if (this.verticalScrollDirection !== newVerticalScrollDirection) {\n            this.verticalScrollDirection = newVerticalScrollDirection;\n\n            if (this.verticalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n                this.verticalScrollTimeout = undefined;\n            }\n\n            if (newVerticalScrollDirection) {\n                this.verticalScrollTimeout = window.setTimeout(\n                    this.scrollVertically.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public getScrollLeft(): number {\n        return this.$container.scrollLeft() || 0;\n    }\n\n    public scrollToY(top: number): void {\n        const container = this.$container.get(0) as HTMLElement;\n        container.scrollTop = top;\n    }\n\n    public stopScrolling() {\n        this.horizontalScrollDirection = undefined;\n        this.verticalScrollDirection = undefined;\n        this.scrollParentTop = undefined;\n        this.scrollParentBottom = undefined;\n    }\n\n    private getNewHorizontalScrollDirection(\n        pageX: number,\n    ): HorizontalScrollDirection | undefined {\n        const scrollParentOffset = this.$container.offset();\n        if (!scrollParentOffset) {\n            return undefined;\n        }\n\n        const container = this.$container.get(0) as HTMLElement;\n\n        const rightEdge = scrollParentOffset.left + container.clientWidth;\n        const leftEdge = scrollParentOffset.left;\n        const isNearRightEdge = pageX > rightEdge - 20;\n        const isNearLeftEdge = pageX < leftEdge + 20;\n\n        if (isNearRightEdge) {\n            return \"right\";\n        } else if (isNearLeftEdge) {\n            return \"left\";\n        }\n\n        return undefined;\n    }\n\n    private getNewVerticalScrollDirection(\n        pageY: number,\n    ): VerticalScrollDirection | undefined {\n        if (pageY < this.getScrollParentTop()) {\n            return \"top\";\n        }\n\n        if (pageY > this.getScrollParentBottom()) {\n            return \"bottom\";\n        }\n\n        return undefined;\n    }\n\n    private scrollHorizontally() {\n        if (!this.horizontalScrollDirection) {\n            return;\n        }\n\n        const distance = this.horizontalScrollDirection === \"left\" ? -20 : 20;\n        const container = this.$container.get(0) as HTMLElement;\n\n        container.scrollBy({\n            left: distance,\n            top: 0,\n            behavior: \"instant\",\n        });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollHorizontally.bind(this), 40);\n    }\n\n    private scrollVertically() {\n        if (!this.verticalScrollDirection) {\n            return;\n        }\n\n        const distance = this.verticalScrollDirection === \"top\" ? -20 : 20;\n        const container = this.$container.get(0) as HTMLElement;\n\n        container.scrollBy({\n            left: 0,\n            top: distance,\n            behavior: \"instant\",\n        });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollVertically.bind(this), 40);\n    }\n\n    private getScrollParentTop() {\n        if (this.scrollParentTop == null) {\n            this.scrollParentTop = this.$container.offset()?.top || 0;\n        }\n\n        return this.scrollParentTop;\n    }\n\n    private getScrollParentBottom() {\n        if (this.scrollParentBottom == null) {\n            this.scrollParentBottom =\n                this.getScrollParentTop() +\n                (this.$container.innerHeight() ?? 0);\n        }\n\n        return this.scrollParentBottom;\n    }\n}\n","import type { ScrollParent } from \"./types\";\n\ntype HorizontalScrollDirection = \"left\" | \"right\";\ntype VerticalScrollDirection = \"bottom\" | \"top\";\n\nexport default class DocumentScrollParent implements ScrollParent {\n    private $element: JQuery<HTMLElement>;\n    private horizontalScrollDirection?: HorizontalScrollDirection;\n    private horizontalScrollTimeout?: number;\n    private refreshHitAreas: () => void;\n    private verticalScrollDirection?: VerticalScrollDirection;\n    private verticalScrollTimeout?: number;\n    private documentScrollHeight?: number;\n    private documentScrollWidth?: number;\n\n    constructor($element: JQuery<HTMLElement>, refreshHitAreas: () => void) {\n        this.$element = $element;\n        this.refreshHitAreas = refreshHitAreas;\n    }\n\n    public checkHorizontalScrolling(pageX: number): void {\n        const newHorizontalScrollDirection =\n            this.getNewHorizontalScrollDirection(pageX);\n\n        if (this.horizontalScrollDirection !== newHorizontalScrollDirection) {\n            this.horizontalScrollDirection = newHorizontalScrollDirection;\n\n            if (this.horizontalScrollTimeout != null) {\n                window.clearTimeout(this.horizontalScrollTimeout);\n            }\n\n            if (newHorizontalScrollDirection) {\n                this.horizontalScrollTimeout = window.setTimeout(\n                    this.scrollHorizontally.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public checkVerticalScrolling(pageY: number) {\n        const newVerticalScrollDirection =\n            this.getNewVerticalScrollDirection(pageY);\n\n        if (this.verticalScrollDirection !== newVerticalScrollDirection) {\n            this.verticalScrollDirection = newVerticalScrollDirection;\n\n            if (this.verticalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n                this.verticalScrollTimeout = undefined;\n            }\n\n            if (newVerticalScrollDirection) {\n                this.verticalScrollTimeout = window.setTimeout(\n                    this.scrollVertically.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public getScrollLeft(): number {\n        return document.documentElement.scrollLeft;\n    }\n\n    public scrollToY(top: number): void {\n        const offset = this.$element.offset();\n        const treeTop = offset ? offset.top : 0;\n\n        jQuery(document).scrollTop(top + treeTop);\n    }\n\n    public stopScrolling() {\n        this.horizontalScrollDirection = undefined;\n        this.verticalScrollDirection = undefined;\n        this.documentScrollHeight = undefined;\n        this.documentScrollWidth = undefined;\n    }\n\n    private getNewHorizontalScrollDirection(\n        pageX: number,\n    ): HorizontalScrollDirection | undefined {\n        const $document = jQuery(document);\n\n        const scrollLeft = $document.scrollLeft() || 0;\n        const windowWidth = jQuery(window).width() || 0;\n\n        const isNearRightEdge = pageX > windowWidth - 20;\n        const isNearLeftEdge = pageX - scrollLeft < 20;\n\n        if (isNearRightEdge && this.canScrollRight()) {\n            return \"right\";\n        }\n\n        if (isNearLeftEdge) {\n            return \"left\";\n        }\n\n        return undefined;\n    }\n\n    private canScrollRight() {\n        const documentElement = document.documentElement;\n\n        return (\n            documentElement.scrollLeft + documentElement.clientWidth <\n            this.getDocumentScrollWidth()\n        );\n    }\n\n    private canScrollDown() {\n        const documentElement = document.documentElement;\n\n        return (\n            documentElement.scrollTop + documentElement.clientHeight <\n            this.getDocumentScrollHeight()\n        );\n    }\n\n    private getDocumentScrollHeight() {\n        // Store the original scroll height because the scroll height can increase when the drag element is moved beyond the scroll height.\n        if (this.documentScrollHeight == null) {\n            this.documentScrollHeight = document.documentElement.scrollHeight;\n        }\n\n        return this.documentScrollHeight;\n    }\n\n    private getDocumentScrollWidth() {\n        // Store the original scroll width because the scroll width can increase when the drag element is moved beyond the scroll width.\n        if (this.documentScrollWidth == null) {\n            this.documentScrollWidth = document.documentElement.scrollWidth;\n        }\n\n        return this.documentScrollWidth;\n    }\n\n    private getNewVerticalScrollDirection(\n        pageY: number,\n    ): VerticalScrollDirection | undefined {\n        const scrollTop = jQuery(document).scrollTop() || 0;\n        const distanceTop = pageY - scrollTop;\n\n        if (distanceTop < 20) {\n            return \"top\";\n        }\n\n        const windowHeight = jQuery(window).height() || 0;\n\n        if (windowHeight - (pageY - scrollTop) < 20 && this.canScrollDown()) {\n            return \"bottom\";\n        }\n\n        return undefined;\n    }\n\n    private scrollHorizontally() {\n        if (!this.horizontalScrollDirection) {\n            return;\n        }\n\n        const distance = this.horizontalScrollDirection === \"left\" ? -20 : 20;\n        window.scrollBy({ left: distance, top: 0, behavior: \"instant\" });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollHorizontally.bind(this), 40);\n    }\n\n    private scrollVertically() {\n        if (!this.verticalScrollDirection) {\n            return;\n        }\n\n        const distance = this.verticalScrollDirection === \"top\" ? -20 : 20;\n        window.scrollBy({ left: 0, top: distance, behavior: \"instant\" });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollVertically.bind(this), 40);\n    }\n}\n","import type { ScrollParent } from \"./types\";\nimport ContainerScrollParent from \"./containerScrollParent\";\nimport DocumentScrollParent from \"./documentScrollParent\";\n\nconst hasOverFlow = ($element: JQuery<HTMLElement>): boolean => {\n    for (const attr of [\"overflow\", \"overflow-y\"]) {\n        const overflowValue = $element.css(attr);\n        if (overflowValue === \"auto\" || overflowValue === \"scroll\") {\n            return true;\n        }\n    }\n\n    return false;\n};\n\nconst getParentWithOverflow = (\n    $treeElement: JQuery<HTMLElement>,\n): JQuery<HTMLElement> | null => {\n    if (hasOverFlow($treeElement)) {\n        return $treeElement;\n    }\n\n    for (const element of $treeElement.parents().get()) {\n        const $element = jQuery(element);\n        if (hasOverFlow($element)) {\n            return $element;\n        }\n    }\n\n    return null;\n};\n\nconst createScrollParent = (\n    $treeElement: JQuery<HTMLElement>,\n    refreshHitAreas: () => void,\n): ScrollParent => {\n    const $container = getParentWithOverflow($treeElement);\n\n    if ($container?.length && $container[0]?.tagName !== \"HTML\") {\n        return new ContainerScrollParent({\n            $container,\n            refreshHitAreas,\n            $treeElement,\n        });\n    } else {\n        return new DocumentScrollParent($treeElement, refreshHitAreas);\n    }\n};\n\nexport default createScrollParent;\n","import { JqTreeWidget } from \"./tree.jquery\";\nimport { PositionInfo } from \"./types\";\nimport { ScrollParent } from \"./scrollHandler/types\";\nimport createScrollParent from \"./scrollHandler/createScrollParent\";\n\nexport default class ScrollHandler {\n    private treeWidget: JqTreeWidget;\n    private scrollParent?: ScrollParent;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n        this.scrollParent = undefined;\n    }\n\n    public checkScrolling(positionInfo: PositionInfo): void {\n        this.checkVerticalScrolling(positionInfo);\n        this.checkHorizontalScrolling(positionInfo);\n    }\n\n    public stopScrolling() {\n        this.getScrollParent().stopScrolling();\n    }\n\n    public scrollToY(top: number): void {\n        this.getScrollParent().scrollToY(top);\n    }\n\n    public getScrollLeft(): number {\n        return this.getScrollParent().getScrollLeft();\n    }\n\n    private checkVerticalScrolling(positionInfo: PositionInfo): void {\n        if (positionInfo.pageY == null) {\n            return;\n        }\n\n        this.getScrollParent().checkVerticalScrolling(positionInfo.pageY);\n    }\n\n    private checkHorizontalScrolling(positionInfo: PositionInfo): void {\n        if (positionInfo.pageX == null) {\n            return;\n        }\n\n        this.getScrollParent().checkHorizontalScrolling(positionInfo.pageX);\n    }\n\n    private getScrollParent(): ScrollParent {\n        if (!this.scrollParent) {\n            this.scrollParent = createScrollParent(\n                this.treeWidget.$el,\n                this.treeWidget.refreshHitAreas.bind(this.treeWidget),\n            );\n        }\n\n        return this.scrollParent;\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport default class SelectNodeHandler {\n    private treeWidget: JqTreeWidget;\n    private selectedNodes: Set<NodeId>;\n    private selectedSingleNode: Node | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n        this.selectedNodes = new Set<NodeId>();\n        this.clear();\n    }\n\n    public getSelectedNode(): Node | false {\n        const selectedNodes = this.getSelectedNodes();\n\n        if (selectedNodes.length) {\n            return selectedNodes[0] || false;\n        } else {\n            return false;\n        }\n    }\n\n    public getSelectedNodes(): Node[] {\n        if (this.selectedSingleNode) {\n            return [this.selectedSingleNode];\n        } else {\n            const selectedNodes: Node[] = [];\n\n            this.selectedNodes.forEach((id) => {\n                const node = this.treeWidget.getNodeById(id);\n                if (node) {\n                    selectedNodes.push(node);\n                }\n            });\n\n            return selectedNodes;\n        }\n    }\n\n    public getSelectedNodesUnder(parent: Node): Node[] {\n        if (this.selectedSingleNode) {\n            if (parent.isParentOf(this.selectedSingleNode)) {\n                return [this.selectedSingleNode];\n            } else {\n                return [];\n            }\n        } else {\n            const selectedNodes = [];\n\n            for (const id in this.selectedNodes) {\n                if (\n                    Object.prototype.hasOwnProperty.call(this.selectedNodes, id)\n                ) {\n                    const node = this.treeWidget.getNodeById(id);\n                    if (node && parent.isParentOf(node)) {\n                        selectedNodes.push(node);\n                    }\n                }\n            }\n\n            return selectedNodes;\n        }\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (node.id != null) {\n            return this.selectedNodes.has(node.id);\n        } else if (this.selectedSingleNode) {\n            return this.selectedSingleNode.element === node.element;\n        } else {\n            return false;\n        }\n    }\n\n    public clear(): void {\n        this.selectedNodes.clear();\n        this.selectedSingleNode = null;\n    }\n\n    public removeFromSelection(node: Node, includeChildren = false): void {\n        if (node.id == null) {\n            if (\n                this.selectedSingleNode &&\n                node.element === this.selectedSingleNode.element\n            ) {\n                this.selectedSingleNode = null;\n            }\n        } else {\n            this.selectedNodes.delete(node.id);\n\n            if (includeChildren) {\n                node.iterate(() => {\n                    if (node.id != null) {\n                        this.selectedNodes.delete(node.id);\n                    }\n                    return true;\n                });\n            }\n        }\n    }\n\n    public addToSelection(node: Node): void {\n        if (node.id != null) {\n            this.selectedNodes.add(node.id);\n        } else {\n            this.selectedSingleNode = node;\n        }\n    }\n\n    public isFocusOnTree(): boolean {\n        const activeElement = document.activeElement;\n\n        return Boolean(\n            activeElement &&\n                activeElement.tagName === \"SPAN\" &&\n                this.treeWidget._containsElement(activeElement as HTMLElement)\n        );\n    }\n}\n","import { DropHint } from \"..//types\";\n\nclass BorderDropHint implements DropHint {\n    private hint?: HTMLElement;\n\n    constructor(element: HTMLElement, scrollLeft: number) {\n        const div = element.querySelector(\":scope > .jqtree-element\");\n\n        if (!div) {\n            this.hint = undefined;\n            return;\n        }\n\n        const width = Math.max(element.offsetWidth + scrollLeft - 4, 0);\n        const height = Math.max(element.clientHeight - 4, 0);\n\n        const hint = document.createElement(\"span\");\n        hint.className = \"jqtree-border\";\n        hint.style.width = `${width}px`;\n        hint.style.height = `${height}px`;\n\n        this.hint = hint;\n\n        div.append(this.hint);\n    }\n\n    public remove(): void {\n        this.hint?.remove();\n    }\n}\n\nexport default BorderDropHint;\n","import { Position, Node } from \"../node\";\nimport { DropHint } from \"../types\";\n\nclass GhostDropHint implements DropHint {\n    private element: HTMLElement;\n    private node: Node;\n    private ghost: HTMLElement;\n\n    constructor(node: Node, element: HTMLElement, position: Position) {\n        this.element = element;\n        this.node = node;\n        this.ghost = this.createGhostElement();\n\n        if (position === Position.After) {\n            this.moveAfter();\n        } else if (position === Position.Before) {\n            this.moveBefore();\n        } else if (position === Position.Inside) {\n            if (node.isFolder() && node.is_open) {\n                this.moveInsideOpenFolder();\n            } else {\n                this.moveInside();\n            }\n        }\n    }\n\n    public remove(): void {\n        this.ghost.remove();\n    }\n\n    private moveAfter(): void {\n        this.element.after(this.ghost);\n    }\n\n    private moveBefore(): void {\n        this.element.before(this.ghost);\n    }\n\n    private moveInsideOpenFolder(): void {\n        const childElement = this.node.children[0]?.element;\n\n        if (childElement) {\n            childElement.before(this.ghost);\n        }\n    }\n\n    private moveInside(): void {\n        this.element.after(this.ghost);\n        this.ghost.classList.add(\"jqtree-inside\");\n    }\n\n    private createGhostElement() {\n        const ghost = document.createElement(\"li\");\n        ghost.className = \"jqtree_common jqtree-ghost\";\n\n        const circleSpan = document.createElement(\"span\");\n        circleSpan.className = \"jqtree_common jqtree-circle\";\n        ghost.append(circleSpan);\n\n        const lineSpan = document.createElement(\"span\");\n        lineSpan.className = \"jqtree_common jqtree-line\";\n        ghost.append(lineSpan);\n\n        return ghost;\n    }\n}\n\nexport default GhostDropHint;\n","import { Position, Node } from \"../node\";\nimport { JqTreeWidget } from \"../tree.jquery\";\nimport { DropHint } from \"../types\";\nimport BorderDropHint from \"./borderDropHint\";\nimport GhostDropHint from \"./ghostDropHint\";\n\nclass NodeElement {\n    public node: Node;\n    public element: HTMLElement;\n    protected treeWidget: JqTreeWidget;\n\n    constructor(node: Node, treeWidget: JqTreeWidget) {\n        this.init(node, treeWidget);\n    }\n\n    public init(node: Node, treeWidget: JqTreeWidget): void {\n        this.node = node;\n        this.treeWidget = treeWidget;\n\n        if (!node.element) {\n            const element = this.treeWidget.element.get(0);\n\n            if (element) {\n                node.element = element;\n            }\n        }\n\n        if (node.element) {\n            this.element = node.element;\n        }\n    }\n\n    public addDropHint(position: number): DropHint {\n        if (this.mustShowBorderDropHint(position)) {\n            return new BorderDropHint(\n                this.element,\n                this.treeWidget._getScrollLeft(),\n            );\n        } else {\n            return new GhostDropHint(this.node, this.element, position);\n        }\n    }\n\n    public select(mustSetFocus: boolean): void {\n        this.element.classList.add(\"jqtree-selected\");\n\n        const titleSpan = this.getTitleSpan();\n        const tabIndex = this.treeWidget.options.tabIndex;\n\n        // Check for null or undefined\n        if (tabIndex != null) {\n            titleSpan.setAttribute(\"tabindex\", tabIndex.toString());\n        }\n\n        titleSpan.setAttribute(\"aria-selected\", \"true\");\n\n        if (mustSetFocus) {\n            titleSpan.focus();\n        }\n    }\n\n    public deselect(): void {\n        this.element.classList.remove(\"jqtree-selected\");\n\n        const titleSpan = this.getTitleSpan();\n        titleSpan.removeAttribute(\"tabindex\");\n        titleSpan.setAttribute(\"aria-selected\", \"false\");\n\n        titleSpan.blur();\n    }\n\n    protected getUl(): HTMLUListElement {\n        return this.element.querySelector(\":scope > ul\") as HTMLUListElement;\n    }\n\n    protected getTitleSpan(): HTMLSpanElement {\n        return this.element.querySelector(\n            \":scope > .jqtree-element > span.jqtree-title\",\n        ) as HTMLSpanElement;\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return position === Position.Inside;\n    }\n}\n\nexport default NodeElement;\n","import { Position, Node } from \"../node\";\nimport NodeElement from \"./index\";\n\nexport type OnFinishOpenNode = (node: Node) => void;\n\nclass FolderElement extends NodeElement {\n    public open(\n        onFinished: OnFinishOpenNode | null,\n        slide = true,\n        animationSpeed: JQuery.Duration = \"fast\",\n    ): void {\n        if (this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = true;\n\n        const button = this.getButton();\n        button.classList.remove(\"jqtree-closed\");\n        button.innerHTML = \"\";\n\n        const openedIconElement = this.treeWidget.renderer.openedIconElement;\n\n        if (openedIconElement) {\n            const icon = openedIconElement.cloneNode(true);\n            button.appendChild(icon);\n        }\n\n        const doOpen = (): void => {\n            this.element.classList.remove(\"jqtree-closed\");\n\n            const titleSpan = this.getTitleSpan();\n            titleSpan.setAttribute(\"aria-expanded\", \"true\");\n\n            if (onFinished) {\n                onFinished(this.node);\n            }\n\n            this.treeWidget._triggerEvent(\"tree.open\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            jQuery(this.getUl()).slideDown(animationSpeed, doOpen);\n        } else {\n            jQuery(this.getUl()).show();\n            doOpen();\n        }\n    }\n\n    public close(\n        slide = true,\n        animationSpeed: JQuery.Duration | undefined = \"fast\",\n    ): void {\n        if (!this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = false;\n\n        const button = this.getButton();\n        button.classList.add(\"jqtree-closed\");\n        button.innerHTML = \"\";\n\n        const closedIconElement = this.treeWidget.renderer.closedIconElement;\n\n        if (closedIconElement) {\n            const icon = closedIconElement.cloneNode(true);\n            button.appendChild(icon);\n        }\n\n        const doClose = (): void => {\n            this.element.classList.add(\"jqtree-closed\");\n\n            const titleSpan = this.getTitleSpan();\n            titleSpan.setAttribute(\"aria-expanded\", \"false\");\n\n            this.treeWidget._triggerEvent(\"tree.close\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            jQuery(this.getUl()).slideUp(animationSpeed, doClose);\n        } else {\n            jQuery(this.getUl()).hide();\n            doClose();\n        }\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return !this.node.is_open && position === Position.Inside;\n    }\n\n    private getButton(): HTMLLinkElement {\n        return this.element.querySelector(\n            \":scope > .jqtree-element > a.jqtree-toggler\",\n        ) as HTMLLinkElement;\n    }\n}\n\nexport default FolderElement;\n","import __version__ from \"./version\";\nimport { DragAndDropHandler } from \"./dragAndDropHandler\";\nimport ElementsRenderer from \"./elementsRenderer\";\nimport DataLoader, { HandleFinishedLoading } from \"./dataLoader\";\nimport KeyHandler from \"./keyHandler\";\nimport MouseWidget from \"./mouse.widget\";\nimport { PositionInfo } from \"./types\";\nimport SaveStateHandler, { SavedState } from \"./saveStateHandler\";\nimport ScrollHandler from \"./scrollHandler\";\nimport SelectNodeHandler from \"./selectNodeHandler\";\nimport SimpleWidget from \"./simple.widget\";\nimport { Node, getPosition } from \"./node\";\nimport { isFunction } from \"./util\";\nimport NodeElement from \"./nodeElement\";\nimport FolderElement, { OnFinishOpenNode } from \"./nodeElement/folderElement\";\n\nimport { JQTreeOptions } from \"./jqtreeOptions\";\n\ninterface ClickTarget {\n    node: Node;\n    type: \"button\" | \"label\";\n}\n\ninterface SelectNodeOptions {\n    mustToggle?: boolean;\n    mustSetFocus?: boolean;\n}\n\nconst NODE_PARAM_IS_EMPTY = \"Node parameter is empty\";\nconst PARAM_IS_EMPTY = \"Parameter is empty: \";\n\nexport class JqTreeWidget extends MouseWidget<JQTreeOptions> {\n    protected static defaults: JQTreeOptions = {\n        animationSpeed: \"fast\",\n        autoEscape: true,\n        autoOpen: false, // true / false / int (open n levels starting at 0)\n        buttonLeft: true,\n        // The symbol to use for a closed node - ► BLACK RIGHT-POINTING POINTER\n        // http://www.fileformat.info/info/unicode/char/25ba/index.htm\n        closedIcon: undefined,\n        data: undefined,\n        dataFilter: undefined,\n        dataUrl: undefined,\n        dragAndDrop: false,\n        keyboardSupport: true,\n        nodeClass: Node,\n        onCanMove: undefined, // Can this node be moved?\n        onCanMoveTo: undefined, // Can this node be moved to this position? function(moved_node, target_node, position)\n        onCanSelectNode: undefined,\n        onCreateLi: undefined,\n        onDragMove: undefined,\n        onDragStop: undefined,\n        onGetStateFromStorage: undefined,\n        onIsMoveHandle: undefined,\n        onLoadFailed: undefined,\n        onLoading: undefined,\n        onSetStateFromStorage: undefined,\n        openedIcon: \"&#x25bc;\",\n        openFolderDelay: 500, // The delay for opening a folder during drag and drop; the value is in milliseconds\n        // The symbol to use for an open node - ▼ BLACK DOWN-POINTING TRIANGLE\n        // http://www.fileformat.info/info/unicode/char/25bc/index.htm\n        rtl: undefined, // right-to-left support; true / false (default)\n        saveState: false, // true / false / string (cookie name)\n        selectable: true,\n        showEmptyFolder: false,\n        slide: true, // must display slide animation?\n        startDndDelay: 300, // The delay for starting dnd (in milliseconds)\n        tabIndex: 0,\n        useContextMenu: true,\n    };\n\n    public element: JQuery;\n    public tree: Node;\n    public dndHandler: DragAndDropHandler;\n    public renderer: ElementsRenderer;\n    public dataLoader: DataLoader;\n    public scrollHandler: ScrollHandler;\n    public selectNodeHandler: SelectNodeHandler;\n\n    private isInitialized: boolean;\n    private saveStateHandler: SaveStateHandler;\n    private keyHandler: KeyHandler;\n\n    public toggle(node: Node, slideParam: null | boolean = null): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.is_open) {\n            this.closeNode(node, slide);\n        } else {\n            this.openNode(node, slide);\n        }\n\n        return this.element;\n    }\n\n    public getTree(): Node {\n        return this.tree;\n    }\n\n    public selectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): JQuery {\n        this.doSelectNode(node, optionsParam);\n        return this.element;\n    }\n\n    public getSelectedNode(): Node | false {\n        return this.selectNodeHandler.getSelectedNode();\n    }\n\n    public toJson(): string {\n        return JSON.stringify(this.tree.getData());\n    }\n\n    public loadData(data: NodeData[], parentNode: Node | null): JQuery {\n        this.doLoadData(data, parentNode);\n        return this.element;\n    }\n\n    /*\n    signatures:\n    - loadDataFromUrl(url, parent_node=null, on_finished=null)\n        loadDataFromUrl('/my_data');\n        loadDataFromUrl('/my_data', node1);\n        loadDataFromUrl('/my_data', node1, function() { console.log('finished'); });\n        loadDataFromUrl('/my_data', null, function() { console.log('finished'); });\n\n    - loadDataFromUrl(parent_node=null, on_finished=null)\n        loadDataFromUrl();\n        loadDataFromUrl(node1);\n        loadDataFromUrl(null, function() { console.log('finished'); });\n        loadDataFromUrl(node1, function() { console.log('finished'); });\n    */\n    public loadDataFromUrl(\n        param1: string | null | Node,\n        param2?: Node | null | HandleFinishedLoading,\n        param3?: HandleFinishedLoading,\n    ): JQuery {\n        if (typeof param1 === \"string\") {\n            // first parameter is url\n            this.doLoadDataFromUrl(\n                param1,\n                param2 as Node | null,\n                param3 ?? null,\n            );\n        } else {\n            // first parameter is not url\n            this.doLoadDataFromUrl(\n                null,\n                param1,\n                param2 as HandleFinishedLoading | null,\n            );\n        }\n\n        return this.element;\n    }\n\n    public reload(onFinished: HandleFinishedLoading | null): JQuery {\n        this.doLoadDataFromUrl(null, null, onFinished);\n        return this.element;\n    }\n\n    public refresh(): JQuery {\n        this._refreshElements(null);\n        return this.element;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.tree.getNodeById(nodeId);\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.tree.getNodeByName(name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        return this.tree.getNodeByNameMustExist(name);\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.tree.getNodesByProperty(key, value);\n    }\n\n    public getNodeByHtmlElement(\n        inputElement: HTMLElement | JQuery<HTMLElement>,\n    ): Node | null {\n        const element =\n            inputElement instanceof HTMLElement\n                ? inputElement\n                : inputElement[0];\n\n        if (!element) {\n            return null;\n        }\n\n        return this.getNode(element);\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        return this.tree.getNodeByCallback(callback);\n    }\n\n    public openNode(\n        node: Node,\n        param1?: boolean | OnFinishOpenNode,\n        param2?: OnFinishOpenNode,\n    ): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const parseParams = (): [boolean, OnFinishOpenNode | null] => {\n            let onFinished: OnFinishOpenNode | null;\n            let slide: boolean | null;\n\n            if (isFunction(param1)) {\n                onFinished = param1 as OnFinishOpenNode | null;\n                slide = null;\n            } else {\n                slide = param1 as boolean;\n                onFinished = param2 as OnFinishOpenNode;\n            }\n\n            if (slide == null) {\n                slide = this.options.slide ?? false;\n            }\n\n            return [slide, onFinished];\n        };\n\n        const [slide, onFinished] = parseParams();\n\n        this._openNode(node, slide, onFinished);\n        return this.element;\n    }\n\n    public closeNode(node: Node, slideParam?: null | boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            new FolderElement(node, this).close(\n                slide,\n                this.options.animationSpeed,\n            );\n\n            this.saveState();\n        }\n\n        return this.element;\n    }\n\n    public isDragging(): boolean {\n        return this.dndHandler.isDragging;\n    }\n\n    public refreshHitAreas(): JQuery {\n        this.dndHandler.refresh();\n        return this.element;\n    }\n\n    public addNodeAfter(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        const newNode = existingNode.addAfter(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addNodeBefore(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addBefore(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addParentNode(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addParent(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(newNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public removeNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!node.parent) {\n            throw Error(\"Node has no parent\");\n        }\n\n        this.selectNodeHandler.removeFromSelection(node, true); // including children\n\n        const parent = node.parent;\n        node.remove();\n        this._refreshElements(parent);\n\n        return this.element;\n    }\n\n    public appendNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam || this.tree;\n\n        const node = parentNode.append(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public prependNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam ?? this.tree;\n\n        const node = parentNode.prepend(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public updateNode(node: Node, data: NodeData): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const idIsChanged =\n            typeof data === \"object\" && data.id && data.id !== node.id;\n\n        if (idIsChanged) {\n            this.tree.removeNodeFromIndex(node);\n        }\n\n        node.setData(data);\n\n        if (idIsChanged) {\n            this.tree.addNodeToIndex(node);\n        }\n\n        if (\n            typeof data === \"object\" &&\n            data[\"children\"] &&\n            data[\"children\"] instanceof Array\n        ) {\n            node.removeChildren();\n\n            if (data.children.length) {\n                node.loadFromData(data.children as Node[]);\n            }\n        }\n\n        this._refreshElements(node);\n\n        return this.element;\n    }\n\n    private isSelectedNodeInSubtree(subtree: Node): boolean {\n        const selectedNode = this.getSelectedNode();\n\n        if (!selectedNode) {\n            return false;\n        } else {\n            return subtree === selectedNode || subtree.isParentOf(selectedNode);\n        }\n    }\n\n    public moveNode(node: Node, targetNode: Node, position: string): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!targetNode) {\n            throw Error(PARAM_IS_EMPTY + \"targetNode\");\n        }\n\n        const positionIndex = getPosition(position);\n\n        if (positionIndex !== undefined) {\n            this.tree.moveNode(node, targetNode, positionIndex);\n            this._refreshElements(null);\n        }\n\n        return this.element;\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        return this.saveStateHandler.getStateFromStorage();\n    }\n\n    public addToSelection(node: Node, mustSetFocus?: boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.addToSelection(node);\n\n        this._getNodeElementForNode(node).select(\n            mustSetFocus === undefined ? true : mustSetFocus,\n        );\n\n        this.saveState();\n\n        return this.element;\n    }\n\n    public getSelectedNodes(): Node[] {\n        return this.selectNodeHandler.getSelectedNodes();\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        return this.selectNodeHandler.isNodeSelected(node);\n    }\n\n    public removeFromSelection(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.removeFromSelection(node);\n\n        this._getNodeElementForNode(node).deselect();\n        this.saveState();\n\n        return this.element;\n    }\n\n    public scrollToNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const nodeTop = jQuery(node.element).offset()?.top ?? 0;\n        const treeTop = this.$el.offset()?.top ?? 0;\n        const top = nodeTop - treeTop;\n\n        this.scrollHandler.scrollToY(top);\n\n        return this.element;\n    }\n\n    public getState(): SavedState | null {\n        return this.saveStateHandler.getState();\n    }\n\n    public setState(state: SavedState): JQuery {\n        this.saveStateHandler.setInitialState(state);\n        this._refreshElements(null);\n\n        return this.element;\n    }\n\n    public setOption(option: string, value: unknown): JQuery {\n        (this.options as unknown as Record<string, unknown>)[option] = value;\n        return this.element;\n    }\n\n    public moveDown(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveDown(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public moveUp(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveUp(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public getVersion(): string {\n        return __version__;\n    }\n\n    public _triggerEvent(\n        eventName: string,\n        values?: Record<string, unknown>,\n    ): JQuery.Event {\n        const event = jQuery.Event(eventName, values);\n        this.element.trigger(event);\n        return event;\n    }\n\n    public _openNode(\n        node: Node,\n        slide = true,\n        onFinished: OnFinishOpenNode | null,\n    ): void {\n        const doOpenNode = (\n            _node: Node,\n            _slide: boolean,\n            _onFinished: OnFinishOpenNode | null,\n        ): void => {\n            const folderElement = new FolderElement(_node, this);\n            folderElement.open(\n                _onFinished,\n                _slide,\n                this.options.animationSpeed,\n            );\n        };\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            if (node.load_on_demand) {\n                this.loadFolderOnDemand(node, slide, onFinished);\n            } else {\n                let parent = node.parent;\n\n                while (parent) {\n                    // nb: do not open root element\n                    if (parent.parent) {\n                        doOpenNode(parent, false, null);\n                    }\n                    parent = parent.parent;\n                }\n\n                doOpenNode(node, slide, onFinished);\n                this.saveState();\n            }\n        }\n    }\n\n    /*\n    Redraw the tree or part of the tree.\n     from_node: redraw this subtree\n    */\n    public _refreshElements(fromNode: Node | null): void {\n        const mustSetFocus = this.selectNodeHandler.isFocusOnTree();\n        const mustSelect = fromNode\n            ? this.isSelectedNodeInSubtree(fromNode)\n            : false;\n\n        this.renderer.render(fromNode);\n\n        if (mustSelect) {\n            this.selectCurrentNode(mustSetFocus);\n        }\n\n        this._triggerEvent(\"tree.refresh\");\n    }\n\n    public _getNodeElementForNode(node: Node): NodeElement {\n        if (node.isFolder()) {\n            return new FolderElement(node, this);\n        } else {\n            return new NodeElement(node, this);\n        }\n    }\n\n    public _getNodeElement(element: HTMLElement): NodeElement | null {\n        const node = this.getNode(element);\n        if (node) {\n            return this._getNodeElementForNode(node);\n        } else {\n            return null;\n        }\n    }\n\n    public _containsElement(element: HTMLElement): boolean {\n        const node = this.getNode(element);\n\n        return node != null && node.tree === this.tree;\n    }\n\n    public _getScrollLeft(): number {\n        return this.scrollHandler.getScrollLeft();\n    }\n\n    public init(): void {\n        super.init();\n\n        this.element = this.$el;\n        this.isInitialized = false;\n\n        this.options.rtl = this.getRtlOption();\n\n        if (this.options.closedIcon == null) {\n            this.options.closedIcon = this.getDefaultClosedIcon();\n        }\n\n        this.renderer = new ElementsRenderer(this);\n        this.dataLoader = new DataLoader(this);\n        this.saveStateHandler = new SaveStateHandler(this);\n        this.selectNodeHandler = new SelectNodeHandler(this);\n        this.dndHandler = new DragAndDropHandler(this);\n        this.scrollHandler = new ScrollHandler(this);\n        this.keyHandler = new KeyHandler(this);\n\n        this.initData();\n\n        this.element.on(\"click\", this.handleClick);\n        this.element.on(\"dblclick\", this.handleDblclick);\n\n        if (this.options.useContextMenu) {\n            this.element.on(\"contextmenu\", this.handleContextmenu);\n        }\n    }\n\n    public deinit(): void {\n        this.element.empty();\n        this.element.off();\n\n        this.keyHandler.deinit();\n\n        this.tree = new Node({}, true);\n\n        super.deinit();\n    }\n\n    protected mouseCapture(positionInfo: PositionInfo): boolean | null {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseCapture(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStart(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStart(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseDrag(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            const result = this.dndHandler.mouseDrag(positionInfo);\n\n            this.scrollHandler.checkScrolling(positionInfo);\n            return result;\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStop(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            this.scrollHandler.stopScrolling();\n            return this.dndHandler.mouseStop(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected getMouseDelay(): number {\n        return this.options.startDndDelay ?? 0;\n    }\n\n    private initData(): void {\n        if (this.options.data) {\n            this.doLoadData(this.options.data, null);\n        } else {\n            const dataUrl = this.getDataUrlInfo(null);\n\n            if (dataUrl) {\n                this.doLoadDataFromUrl(null, null, null);\n            } else {\n                this.doLoadData([], null);\n            }\n        }\n    }\n\n    private getDataUrlInfo(node: Node | null): JQuery.AjaxSettings | null {\n        const dataUrl =\n            this.options.dataUrl || (this.element.data(\"url\") as string | null);\n\n        const getUrlFromString = (url: string): JQuery.AjaxSettings => {\n            const urlInfo: JQuery.AjaxSettings = { url };\n\n            setUrlInfoData(urlInfo);\n\n            return urlInfo;\n        };\n\n        const setUrlInfoData = (urlInfo: JQuery.AjaxSettings): void => {\n            if (node?.id) {\n                // Load on demand of a subtree; add node parameter\n                const data = { node: node.id };\n                urlInfo[\"data\"] = data;\n            } else {\n                // Add selected_node parameter\n                const selectedNodeId = this.getNodeIdToBeSelected();\n                if (selectedNodeId) {\n                    const data = { selected_node: selectedNodeId };\n                    urlInfo[\"data\"] = data;\n                }\n            }\n        };\n\n        if (typeof dataUrl === \"function\") {\n            return dataUrl(node);\n        } else if (typeof dataUrl === \"string\") {\n            return getUrlFromString(dataUrl);\n        } else if (dataUrl && typeof dataUrl === \"object\") {\n            setUrlInfoData(dataUrl);\n            return dataUrl;\n        } else {\n            return null;\n        }\n    }\n\n    private getNodeIdToBeSelected(): NodeId | null {\n        if (this.options.saveState) {\n            return this.saveStateHandler.getNodeIdToBeSelected();\n        } else {\n            return null;\n        }\n    }\n\n    private initTree(data: NodeData[]): void {\n        const doInit = (): void => {\n            if (!this.isInitialized) {\n                this.isInitialized = true;\n                this._triggerEvent(\"tree.init\");\n            }\n        };\n\n        if (!this.options.nodeClass) {\n            return;\n        }\n\n        this.tree = new this.options.nodeClass(\n            null,\n            true,\n            this.options.nodeClass,\n        );\n\n        this.selectNodeHandler.clear();\n\n        this.tree.loadFromData(data);\n\n        const mustLoadOnDemand = this.setInitialState();\n\n        this._refreshElements(null);\n\n        if (!mustLoadOnDemand) {\n            doInit();\n        } else {\n            // Load data on demand and then init the tree\n            this.setInitialStateOnDemand(doInit);\n        }\n    }\n\n    // Set initial state, either by restoring the state or auto-opening nodes\n    // result: must load nodes on demand?\n    private setInitialState(): boolean {\n        const restoreState = (): [boolean, boolean] => {\n            // result: is state restored, must load on demand?\n            if (!this.options.saveState) {\n                return [false, false];\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return [false, false];\n                } else {\n                    const mustLoadOnDemand =\n                        this.saveStateHandler.setInitialState(state);\n\n                    // return true: the state is restored\n                    return [true, mustLoadOnDemand];\n                }\n            }\n        };\n\n        const autoOpenNodes = (): boolean => {\n            // result: must load on demand?\n            if (this.options.autoOpen === false) {\n                return false;\n            }\n\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let mustLoadOnDemand = false;\n\n            this.tree.iterate((node: Node, level: number) => {\n                if (node.load_on_demand) {\n                    mustLoadOnDemand = true;\n                    return false;\n                } else if (!node.hasChildren()) {\n                    return false;\n                } else {\n                    node.is_open = true;\n                    return level !== maxLevel;\n                }\n            });\n\n            return mustLoadOnDemand;\n        };\n\n        let [isRestored, mustLoadOnDemand] = restoreState(); // eslint-disable-line prefer-const\n\n        if (!isRestored) {\n            mustLoadOnDemand = autoOpenNodes();\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    // Set the initial state for nodes that are loaded on demand\n    // Call cb_finished when done\n    private setInitialStateOnDemand(cbFinished: () => void): void {\n        const restoreState = (): boolean => {\n            if (!this.options.saveState) {\n                return false;\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return false;\n                } else {\n                    this.saveStateHandler.setInitialStateOnDemand(\n                        state,\n                        cbFinished,\n                    );\n\n                    return true;\n                }\n            }\n        };\n\n        const autoOpenNodes = (): void => {\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let loadingCount = 0;\n\n            const loadAndOpenNode = (node: Node): void => {\n                loadingCount += 1;\n                this._openNode(node, false, () => {\n                    loadingCount -= 1;\n                    openNodes();\n                });\n            };\n\n            const openNodes = (): void => {\n                this.tree.iterate((node: Node, level: number) => {\n                    if (node.load_on_demand) {\n                        if (!node.is_loading) {\n                            loadAndOpenNode(node);\n                        }\n\n                        return false;\n                    } else {\n                        this._openNode(node, false, null);\n\n                        return level !== maxLevel;\n                    }\n                });\n\n                if (loadingCount === 0) {\n                    cbFinished();\n                }\n            };\n\n            openNodes();\n        };\n\n        if (!restoreState()) {\n            autoOpenNodes();\n        }\n    }\n\n    private getAutoOpenMaxLevel(): number {\n        if (this.options.autoOpen === true) {\n            return -1;\n        } else if (typeof this.options.autoOpen === \"number\") {\n            return this.options.autoOpen;\n        } else if (typeof this.options.autoOpen === \"string\") {\n            return parseInt(this.options.autoOpen, 10);\n        } else {\n            return 0;\n        }\n    }\n\n    private handleClick = (\n        e: JQuery.ClickEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget) {\n            if (clickTarget.type === \"button\") {\n                this.toggle(clickTarget.node, this.options.slide);\n\n                e.preventDefault();\n                e.stopPropagation();\n            } else if (clickTarget.type === \"label\") {\n                const node = clickTarget.node;\n                const event = this._triggerEvent(\"tree.click\", {\n                    node,\n                    click_event: e,\n                });\n\n                if (!event.isDefaultPrevented()) {\n                    this.doSelectNode(node);\n                }\n            }\n        }\n    };\n\n    private handleDblclick = (\n        e: JQuery.DoubleClickEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget?.type === \"label\") {\n            this._triggerEvent(\"tree.dblclick\", {\n                node: clickTarget.node,\n                click_event: e,\n            });\n        }\n    };\n\n    private getClickTarget(element: HTMLElement): ClickTarget | null {\n        const button = element.closest(\".jqtree-toggler\");\n\n        if (button) {\n            const node = this.getNode(button as HTMLElement);\n\n            if (node) {\n                return {\n                    type: \"button\",\n                    node,\n                };\n            }\n        } else {\n            const jqTreeElement = element.closest(\".jqtree-element\");\n\n            if (jqTreeElement) {\n                const node = this.getNode(jqTreeElement as HTMLElement);\n                if (node) {\n                    return {\n                        type: \"label\",\n                        node,\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    private getNode(element: HTMLElement): null | Node {\n        const liElement = element.closest(\"li.jqtree_common\");\n\n        if (liElement) {\n            return jQuery(liElement).data(\"node\") as Node;\n        } else {\n            return null;\n        }\n    }\n\n    private handleContextmenu = (\n        e: JQuery.ContextMenuEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ) => {\n        const div = e.target.closest(\"ul.jqtree-tree .jqtree-element\");\n\n        if (div) {\n            const node = this.getNode(div as HTMLElement);\n            if (node) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                this._triggerEvent(\"tree.contextmenu\", {\n                    node,\n                    click_event: e,\n                });\n                return false;\n            }\n        }\n\n        return null;\n    };\n\n    private saveState(): void {\n        if (this.options.saveState) {\n            this.saveStateHandler.saveState();\n        }\n    }\n\n    private selectCurrentNode(mustSetFocus: boolean): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            const nodeElement = this._getNodeElementForNode(node);\n            if (nodeElement) {\n                nodeElement.select(mustSetFocus);\n            }\n        }\n    }\n\n    private deselectCurrentNode(): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            this.removeFromSelection(node);\n        }\n    }\n\n    private getDefaultClosedIcon(): string {\n        if (this.options.rtl) {\n            // triangle to the left\n            return \"&#x25c0;\";\n        } else {\n            // triangle to the right\n            return \"&#x25ba;\";\n        }\n    }\n\n    private getRtlOption(): boolean {\n        if (this.options.rtl != null) {\n            return this.options.rtl;\n        } else {\n            const dataRtl = this.element.data(\"rtl\") as unknown;\n\n            if (\n                dataRtl !== null &&\n                dataRtl !== false &&\n                dataRtl !== undefined\n            ) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    private doSelectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): void {\n        const saveState = (): void => {\n            if (this.options.saveState) {\n                this.saveStateHandler.saveState();\n            }\n        };\n\n        if (!node) {\n            // Called with empty node -> deselect current node\n            this.deselectCurrentNode();\n            saveState();\n            return;\n        }\n        const defaultOptions = { mustSetFocus: true, mustToggle: true };\n        const selectOptions = { ...defaultOptions, ...(optionsParam || {}) };\n\n        const canSelect = (): boolean => {\n            if (this.options.onCanSelectNode) {\n                return (\n                    this.options.selectable === true &&\n                    this.options.onCanSelectNode(node)\n                );\n            } else {\n                return this.options.selectable === true;\n            }\n        };\n\n        const openParents = (): void => {\n            const parent = node.parent;\n\n            if (parent && parent.parent && !parent.is_open) {\n                this.openNode(parent, false);\n            }\n        };\n\n        if (!canSelect()) {\n            return;\n        }\n\n        if (this.selectNodeHandler.isNodeSelected(node)) {\n            if (selectOptions.mustToggle) {\n                this.deselectCurrentNode();\n                this._triggerEvent(\"tree.select\", {\n                    node: null,\n                    previous_node: node,\n                });\n            }\n        } else {\n            const deselectedNode = this.getSelectedNode() || null;\n            this.deselectCurrentNode();\n            this.addToSelection(node, selectOptions.mustSetFocus);\n\n            this._triggerEvent(\"tree.select\", {\n                node,\n                deselected_node: deselectedNode,\n            });\n            openParents();\n        }\n\n        saveState();\n    }\n\n    private doLoadData(data: NodeData[] | null, parentNode: Node | null): void {\n        if (data) {\n            if (parentNode) {\n                this.deselectNodes(parentNode);\n                this.loadSubtree(data, parentNode);\n            } else {\n                this.initTree(data);\n            }\n\n            if (this.isDragging()) {\n                this.dndHandler.refresh();\n            }\n        }\n\n        this._triggerEvent(\"tree.load_data\", {\n            tree_data: data,\n            parent_node: parentNode,\n        });\n    }\n\n    private deselectNodes(parentNode: Node): void {\n        const selectedNodesUnderParent =\n            this.selectNodeHandler.getSelectedNodesUnder(parentNode);\n        for (const n of selectedNodesUnderParent) {\n            this.selectNodeHandler.removeFromSelection(n);\n        }\n    }\n\n    private loadSubtree(data: NodeData[], parentNode: Node): void {\n        parentNode.loadFromData(data);\n\n        parentNode.load_on_demand = false;\n        parentNode.is_loading = false;\n\n        this._refreshElements(parentNode);\n    }\n\n    private doLoadDataFromUrl(\n        urlInfoParam: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null,\n    ): void {\n        const urlInfo = urlInfoParam || this.getDataUrlInfo(parentNode);\n\n        this.dataLoader.loadFromUrl(urlInfo, parentNode, onFinished);\n    }\n\n    private loadFolderOnDemand(\n        node: Node,\n        slide = true,\n        onFinished: OnFinishOpenNode | null,\n    ): void {\n        node.is_loading = true;\n\n        this.doLoadDataFromUrl(null, node, () => {\n            this._openNode(node, slide, onFinished);\n        });\n    }\n}\n\nSimpleWidget.register(JqTreeWidget, \"tree\");\n"],"names":["isNodeRecordWithChildren","data","Array","Position","positionNames","before","Before","after","After","inside","Inside","none","None","getPositionName","position","name","Object","prototype","hasOwnProperty","call","Node","constructor","nodeData","arguments","length","undefined","isRoot","nodeClass","this","load_on_demand","isEmptyFolder","children","setData","parent","idMapping","Map","tree","o","key","value","loadFromData","removeChildren","childData","node","createNode","addChild","push","setParent","addChildAtPosition","index","splice","removeChild","doRemoveChild","getChildIndex","indexOf","hasChildren","isFolder","iterate","callback","_iterate","level","child","moveNode","movedNode","targetNode","isParentOf","getData","getDataFromNodes","nodes","map","tmpNode","k","v","getNodeByName","getNodeByCallback","getNodeByNameMustExist","n","result","addAfter","nodeInfo","childIndex","loadChildrenFromData","addBefore","addParent","newParent","originalParent","remove","append","prepend","getLevel","getNodeById","nodeId","get","addNodeToIndex","id","set","removeNodeFromIndex","delete","getPreviousSibling","previousIndex","getNextSibling","nextIndex","getNodesByProperty","filter","f","getNextNode","nextSibling","getNextVisibleNode","is_open","getPreviousNode","previousSibling","getLastChild","getParent","getPreviousVisibleNode","lastChild","initFromData","addChildren","childrenData","addNode","getNodeClass","DragElement","nodeName","offsetX","offsetY","$tree","autoEscape","$element","jQuery","addClass","text","html","css","move","pageX","pageY","offset","left","top","getBoolString","getOffsetTop","element","getBoundingClientRect","y","window","scrollY","VisibleNodeIterator","isFirstNode","_iterateNode","nextNode","mustIterateInside","offsetParent","handleFirstNode","handleOpenFolder","handleClosedFolder","handleNode","childrenLength","forEach","_","i","nextChild","handleAfterOpenFolder","HitAreasGenerator","currentNode","treeBottom","super","generate","positions","lastTop","generateHitAreas","previousTop","group","hitAreas","generateHitAreasForGroup","addPosition","area","bottom","positionsInGroup","positionCount","Math","min","areaHeight","round","areaTop","DragAndDropHandler","treeWidget","hoveredArea","isDragging","currentItem","mouseCapture","positionInfo","target","mustCaptureElement","options","onIsMoveHandle","nodeElement","_getNodeElement","onCanMove","mouseStart","refresh","dragElement","classList","add","mouseDrag","findHoveredArea","canMoveToArea","stopOpenFolderTimer","mustOpenFolderTimer","startOpenFolderTimer","updateDropHint","removeDropHint","onDragMove","originalEvent","mouseStop","moveItem","clear","removeHover","removeHitAreas","onDragStop","_getNodeElementForNode","hitAreasGenerator","getTreeDimensions","onCanMoveTo","positionName","previousGhost","x","dimensions","right","low","high","mid","addDropHint","folder","openFolder","_openNode","slide","openFolderDelay","openFolderTimer","setTimeout","clearTimeout","previousParent","doMove","empty","_refreshElements","_triggerEvent","move_info","moved_node","target_node","previous_parent","do_move","original_event","isDefaultPrevented","el","width","height","_getScrollLeft","ElementsRenderer","openedIconElement","createButtonElement","openedIcon","closedIconElement","closedIcon","render","fromNode","renderFromNode","renderFromRoot","createDomElements","$previousLi","li","createLi","attachNodeData","isRootNode","ul","createUl","appendChild","classString","role","rtl","dragAndDrop","document","createElement","className","setAttribute","isSelected","Boolean","selectNodeHandler","isNodeSelected","showEmptyFolder","createFolderLi","createNodeLi","onCreateLi","setTreeItemAriaAttributes","buttonClasses","getButtonClasses","folderClasses","getFolderClasses","iconElement","div","buttonLink","cloneNode","buttonLeft","titleSpan","createTitleSpan","liClasses","join","classes","tabIndex","textContent","innerHTML","is_loading","createTextNode","nodeType","DataLoader","loadFromUrl","urlInfo","parentNode","onFinished","$el","getDomElement","addLoadingClass","notifyLoading","stopLoading","removeLoadingClass","submitRequest","loadData","parseData","jqXHR","onLoadFailed","removeClass","isLoading","onLoading","urlInfoInput","handleSuccess","handleError","ajaxSettings","method","cache","dataType","success","error","url","toUpperCase","ajax","dataFilter","parsedData","JSON","parse","KeyHandler","handleKeyDownHandler","keyboardSupport","handleKeyDown","bind","addEventListener","deinit","removeEventListener","moveDown","selectedNode","selectNode","moveUp","moveRight","openNode","moveLeft","closeNode","e","canHandleKeyboard","getSelectedNode","isFocusOnTree","register","widgetClass","widgetName","getDataKey","getWidgetData","dataKey","widget","SimpleWidget","createWidget","init","fn","argument1","functionName","destroy","removeData","destroyWidget","_len","args","_key","callFunction","widgetFunction","apply","static","defaults","getPositionInfoFromMouseEvent","getPositionInfoFromTouch","touch","MouseWidget","mouseDown","passive","touchStart","isMouseStarted","mouseDelayTimer","isMouseDelayMet","mouseDownInfo","removeMouseMoveEventListeners","button","handleMouseDown","cancelable","preventDefault","handleMouseUp","handleStartMouse","mouseMove","touchMove","mouseUp","touchEnd","mouseDelay","getMouseDelay","startMouseDelayTimer","handleMouseMove","touches","changedTouches","SaveStateHandler","saveState","state","stringify","getState","onSetStateFromStorage","supportsLocalStorage","localStorage","setItem","getKeyName","getStateFromStorage","jsonData","loadFromStorage","parseState","open_nodes","getOpenNodeIds","openNodes","selected_node","getSelectedNodeIds","selectedNodeIds","getSelectedNodes","setInitialState","mustLoadOnDemand","openInitialNodes","resetSelection","selectInitialNodes","setInitialStateOnDemand","cbFinished","doSetInitialStateOnDemand","getNodeIdToBeSelected","onGetStateFromStorage","getItem","nodeIds","selectCount","addToSelection","removeFromSelection","nodeIdsParam","selectedNodes","loadingCount","newNodesIds","loadAndOpenNode","_supportsLocalStorage","testSupport","sessionStorage","removeItem","ContainerScrollParent","_ref","$container","refreshHitAreas","checkHorizontalScrolling","newHorizontalScrollDirection","getNewHorizontalScrollDirection","horizontalScrollDirection","horizontalScrollTimeout","verticalScrollTimeout","scrollHorizontally","checkVerticalScrolling","newVerticalScrollDirection","getNewVerticalScrollDirection","verticalScrollDirection","scrollVertically","getScrollLeft","scrollLeft","scrollToY","scrollTop","stopScrolling","scrollParentTop","scrollParentBottom","scrollParentOffset","container","rightEdge","clientWidth","leftEdge","getScrollParentTop","getScrollParentBottom","distance","scrollBy","behavior","innerHeight","DocumentScrollParent","documentElement","treeTop","documentScrollHeight","documentScrollWidth","isNearLeftEdge","canScrollRight","getDocumentScrollWidth","canScrollDown","clientHeight","getDocumentScrollHeight","scrollHeight","scrollWidth","hasOverFlow","attr","overflowValue","createScrollParent","$treeElement","parents","getParentWithOverflow","tagName","ScrollHandler","scrollParent","checkScrolling","getScrollParent","SelectNodeHandler","Set","selectedSingleNode","getSelectedNodesUnder","has","includeChildren","activeElement","_containsElement","BorderDropHint","querySelector","hint","max","offsetWidth","style","GhostDropHint","ghost","createGhostElement","moveAfter","moveBefore","moveInsideOpenFolder","moveInside","childElement","circleSpan","lineSpan","NodeElement","mustShowBorderDropHint","select","mustSetFocus","getTitleSpan","toString","focus","deselect","removeAttribute","blur","getUl","FolderElement","open","animationSpeed","getButton","renderer","icon","doOpen","slideDown","show","close","doClose","slideUp","hide","NODE_PARAM_IS_EMPTY","PARAM_IS_EMPTY","JqTreeWidget","autoOpen","dataUrl","onCanSelectNode","selectable","startDndDelay","useContextMenu","toggle","slideParam","Error","getTree","optionsParam","doSelectNode","toJson","doLoadData","loadDataFromUrl","param1","param2","param3","doLoadDataFromUrl","reload","getNodeByHtmlElement","inputElement","HTMLElement","getNode","parseParams","dndHandler","addNodeAfter","newNodeInfo","existingNode","newNode","addNodeBefore","addParentNode","removeNode","appendNode","parentNodeParam","prependNode","updateNode","idIsChanged","isSelectedNodeInSubtree","subtree","positionIndex","saveStateHandler","scrollToNode","scrollHandler","setState","setOption","option","keyHandler","getVersion","eventName","values","event","Event","trigger","doOpenNode","_node","_slide","_onFinished","loadFolderOnDemand","mustSelect","selectCurrentNode","isInitialized","getRtlOption","getDefaultClosedIcon","dataLoader","initData","on","handleClick","handleDblclick","handleContextmenu","off","getDataUrlInfo","setUrlInfoData","selectedNodeId","getUrlFromString","initTree","doInit","autoOpenNodes","maxLevel","getAutoOpenMaxLevel","isRestored","restoreState","parseInt","clickTarget","getClickTarget","type","stopPropagation","click_event","closest","jqTreeElement","liElement","deselectCurrentNode","dataRtl","selectOptions","mustToggle","openParents","canSelect","previous_node","deselectedNode","deselected_node","deselectNodes","loadSubtree","tree_data","parent_node","selectedNodesUnderParent","urlInfoParam"],"mappings":"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"}