{"version":3,"file":"tree.jquery.js","sources":["src/position.ts","src/dragAndDropHandler/dragElement.ts","src/util.ts","src/dragAndDropHandler/generateHitAreas.ts","src/dragAndDropHandler/iterateVisibleNodes.ts","src/dragAndDropHandler/index.ts","src/elementsRenderer.ts","src/dataLoader.ts","src/keyHandler.ts","src/mouseUtils.ts","src/mouseHandler.ts","src/saveStateHandler.ts","src/scrollHandler/containerScrollParent.ts","src/scrollHandler/documentScrollParent.ts","src/scrollHandler/createScrollParent.ts","src/scrollHandler.ts","src/selectNodeHandler.ts","src/simple.widget.ts","src/nodeUtils.ts","src/node.ts","src/nodeElement/borderDropHint.ts","src/nodeElement/ghostDropHint.ts","src/nodeElement/index.ts","src/nodeElement/folderElement.ts","src/tree.jquery.ts","src/version.ts"],"sourcesContent":["export enum Position {\n    Before = 1,\n    After,\n    Inside,\n    None,\n}\n\nconst positionNames: Record<string, Position> = {\n    before: Position.Before,\n    after: Position.After,\n    inside: Position.Inside,\n    none: Position.None,\n};\n\nexport const getPositionName = (position: Position): string => {\n    for (const name in positionNames) {\n        if (Object.prototype.hasOwnProperty.call(positionNames, name)) {\n            if (positionNames[name] === position) {\n                return name;\n            }\n        }\n    }\n\n    return \"\";\n};\n\nexport const getPosition = (name: string): Position | undefined =>\n    positionNames[name];\n","interface DragElementParams {\n    autoEscape: boolean;\n    nodeName: string;\n    offsetX: number;\n    offsetY: number;\n    treeElement: HTMLElement;\n}\n\nclass DragElement {\n    private offsetX: number;\n    private offsetY: number;\n    private element: HTMLElement;\n\n    constructor({\n        autoEscape,\n        nodeName,\n        offsetX,\n        offsetY,\n        treeElement,\n    }: DragElementParams) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n\n        this.element = this.createElement(nodeName, autoEscape);\n\n        treeElement.appendChild(this.element);\n    }\n\n    public move(pageX: number, pageY: number): void {\n        this.element.style.left = `${pageX - this.offsetX}px`;\n        this.element.style.top = `${pageY - this.offsetY}px`;\n    }\n\n    public remove(): void {\n        this.element.remove();\n    }\n\n    private createElement(nodeName: string, autoEscape: boolean) {\n        const element = document.createElement(\"span\");\n        element.classList.add(\"jqtree-title\", \"jqtree-dragging\");\n\n        if (autoEscape) {\n            element.textContent = nodeName;\n        } else {\n            element.innerHTML = nodeName;\n        }\n\n        element.style.position = \"absolute\";\n\n        return element;\n    }\n}\n\nexport default DragElement;\n","export const isInt = (n: unknown): boolean =>\n    typeof n === \"number\" && n % 1 === 0;\n\nexport const isFunction = (v: unknown): boolean => typeof v === \"function\";\n\nexport const getBoolString = (value: unknown): string =>\n    value ? \"true\" : \"false\";\n\nexport const getOffsetTop = (element: HTMLElement) =>\n    getElementPosition(element).top;\n\nexport const getElementPosition = (element: HTMLElement) => {\n    const rect = element.getBoundingClientRect();\n\n    return {\n        left: rect.x + window.scrollX,\n        top: rect.y + window.scrollY,\n    };\n};\n","import { HitArea } from \"./types\";\nimport { Node } from \"../node\";\nimport { Position } from \"../position\";\nimport { getOffsetTop } from \"../util\";\nimport iterateVisibleNodes from \"./iterateVisibleNodes\";\n\nconst generatePositions = (tree: Node, currentNode: Node): HitArea[] => {\n    const positions: HitArea[] = [];\n    let lastTop = 0;\n\n    const addPosition = (node: Node, position: number, top: number) => {\n        const area = {\n            top,\n            bottom: 0,\n            node,\n            position,\n        };\n\n        positions.push(area);\n        lastTop = top;\n    };\n\n    const handleAfterOpenFolder = (node: Node, nextNode: Node | null) => {\n        if (node === currentNode || nextNode === currentNode) {\n            // Cannot move before or after current item\n            addPosition(node, Position.None, lastTop);\n        } else {\n            addPosition(node, Position.After, lastTop);\n        }\n    };\n\n    const handleClosedFolder = (\n        node: Node,\n        nextNode: Node | null,\n        element: HTMLElement,\n    ) => {\n        const top = getOffsetTop(element);\n\n        if (node === currentNode) {\n            // Cannot move after current item\n            addPosition(node, Position.None, top);\n        } else {\n            addPosition(node, Position.Inside, top);\n\n            // Cannot move before current item\n            if (nextNode !== currentNode) {\n                addPosition(node, Position.After, top);\n            }\n        }\n    };\n\n    const handleFirstNode = (node: Node) => {\n        if (node !== currentNode) {\n            addPosition(node, Position.Before, getOffsetTop(node.element));\n        }\n    };\n\n    const handleNode = (\n        node: Node,\n        nextNode: Node | null,\n        element: HTMLElement,\n    ) => {\n        const top = getOffsetTop(element);\n\n        if (node === currentNode) {\n            // Cannot move inside current item\n            addPosition(node, Position.None, top);\n        } else {\n            addPosition(node, Position.Inside, top);\n        }\n\n        if (nextNode === currentNode || node === currentNode) {\n            // Cannot move before or after current item\n            addPosition(node, Position.None, top);\n        } else {\n            addPosition(node, Position.After, top);\n        }\n    };\n\n    const handleOpenFolder = (node: Node, element: HTMLElement) => {\n        if (node === currentNode) {\n            // Cannot move inside current item\n            // Stop iterating\n            return false;\n        }\n\n        // Cannot move before current item\n        if (node.children[0] !== currentNode) {\n            addPosition(node, Position.Inside, getOffsetTop(element));\n        }\n\n        // Continue iterating\n        return true;\n    };\n\n    iterateVisibleNodes(tree, {\n        handleAfterOpenFolder,\n        handleClosedFolder,\n        handleFirstNode,\n        handleNode,\n        handleOpenFolder,\n    });\n\n    return positions;\n};\n\nconst generateHitAreasForGroup = (\n    hitAreas: HitArea[],\n    positionsInGroup: HitArea[],\n    top: number,\n    bottom: number,\n) => {\n    // limit positions in group\n    const positionCount = Math.min(positionsInGroup.length, 4);\n\n    const areaHeight = Math.round((bottom - top) / positionCount);\n    let areaTop = top;\n\n    let i = 0;\n    while (i < positionCount) {\n        const position = positionsInGroup[i];\n\n        if (position) {\n            hitAreas.push({\n                top: areaTop,\n                bottom: areaTop + areaHeight,\n                node: position.node,\n                position: position.position,\n            });\n        }\n\n        areaTop += areaHeight;\n        i += 1;\n    }\n};\n\nconst generateHitAreasFromPositions = (\n    positions: HitArea[],\n    treeBottom: number,\n): HitArea[] => {\n    let previousTop = positions[0]?.top ?? 0;\n    let group = [];\n    const hitAreas: HitArea[] = [];\n\n    for (const position of positions) {\n        if (position.top !== previousTop && group.length) {\n            generateHitAreasForGroup(\n                hitAreas,\n                group,\n                previousTop,\n                position.top,\n            );\n\n            previousTop = position.top;\n            group = [];\n        }\n\n        group.push(position);\n    }\n\n    generateHitAreasForGroup(hitAreas, group, previousTop, treeBottom);\n\n    return hitAreas;\n};\n\nconst generateHitAreas = (\n    tree: Node,\n    currentNode: Node,\n    treeBottom: number,\n) => {\n    const positions = generatePositions(tree, currentNode);\n\n    return generateHitAreasFromPositions(positions, treeBottom);\n};\n\nexport default generateHitAreas;\n","import { Node } from \"../node\";\n\ninterface Options {\n    handleAfterOpenFolder: (node: Node, nextNode: Node | null) => void;\n    handleClosedFolder: (\n        node: Node,\n        nextNode: Node | null,\n        element: HTMLElement,\n    ) => void;\n    handleFirstNode: (node: Node) => void;\n    handleNode: (\n        node: Node,\n        nextNode: Node | null,\n        element: HTMLElement,\n    ) => void;\n\n    /*\n    override\n    return\n        - true: continue iterating\n        - false: stop iterating\n    */\n    handleOpenFolder: (node: Node, element: HTMLElement) => boolean;\n}\n\nconst iterateVisibleNodes = (\n    tree: Node,\n    {\n        handleAfterOpenFolder,\n        handleClosedFolder,\n        handleFirstNode,\n        handleNode,\n        handleOpenFolder,\n    }: Options,\n) => {\n    let isFirstNode = true;\n\n    const iterate = (node: Node, nextNode: Node | null): void => {\n        let mustIterateInside =\n            (node.is_open || !node.element) && node.hasChildren();\n\n        let element: HTMLElement | null = null;\n\n        // Is the element visible?\n        if (node.element?.offsetParent) {\n            element = node.element;\n\n            if (isFirstNode) {\n                handleFirstNode(node);\n                isFirstNode = false;\n            }\n\n            if (!node.hasChildren()) {\n                handleNode(node, nextNode, node.element);\n            } else if (node.is_open) {\n                if (!handleOpenFolder(node, node.element)) {\n                    mustIterateInside = false;\n                }\n            } else {\n                handleClosedFolder(node, nextNode, element);\n            }\n        }\n\n        if (mustIterateInside) {\n            const childrenLength = node.children.length;\n            node.children.forEach((_, i) => {\n                const child = node.children[i];\n\n                if (child) {\n                    if (i === childrenLength - 1) {\n                        iterate(child, null);\n                    } else {\n                        const nextChild = node.children[i + 1];\n\n                        if (nextChild) {\n                            iterate(child, nextChild);\n                        }\n                    }\n                }\n            });\n\n            if (node.is_open && element) {\n                handleAfterOpenFolder(node, nextNode);\n            }\n        }\n    };\n\n    iterate(tree, null);\n};\n\nexport default iterateVisibleNodes;\n","import { Node } from \"../node\";\nimport { getPositionName, Position } from \"../position\";\nimport { DropHint, HitArea } from \"./types\";\nimport { PositionInfo } from \"../mouseUtils\";\nimport NodeElement from \"../nodeElement\";\nimport DragElement from \"./dragElement\";\nimport generateHitAreas from \"./generateHitAreas\";\nimport { getElementPosition } from \"../util\";\nimport {\n    OnCanMove,\n    OnCanMoveTo,\n    OnIsMoveHandle,\n    DragMethod,\n} from \"../jqtreeOptions\";\nimport {\n    GetScrollLeft,\n    GetTree,\n    OpenNode,\n    RefreshElements,\n    TriggerEvent,\n} from \"../jqtreeMethodTypes\";\n\ninterface Dimensions {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n}\n\ntype GetNodeElement = (element: HTMLElement) => NodeElement | null;\ntype GetNodeElementForNode = (node: Node) => NodeElement;\n\ninterface DragAndDropHandlerParams {\n    autoEscape?: boolean;\n    getNodeElement: GetNodeElement;\n    getNodeElementForNode: GetNodeElementForNode;\n    getScrollLeft: GetScrollLeft;\n    getTree: GetTree;\n    onCanMove?: OnCanMove;\n    onCanMoveTo?: OnCanMoveTo;\n    onDragMove?: DragMethod;\n    onDragStop?: DragMethod;\n    onIsMoveHandle?: OnIsMoveHandle;\n    openFolderDelay: number | false;\n    openNode: OpenNode;\n    refreshElements: RefreshElements;\n    slide: boolean;\n    treeElement: HTMLElement;\n    triggerEvent: TriggerEvent;\n}\n\nexport class DragAndDropHandler {\n    public hitAreas: HitArea[];\n    public isDragging: boolean;\n    public currentItem: NodeElement | null;\n    public hoveredArea: HitArea | null;\n\n    private autoEscape?: boolean;\n    private dragElement: DragElement | null;\n    private getNodeElement: GetNodeElement;\n    private getNodeElementForNode: GetNodeElementForNode;\n    private getScrollLeft: GetScrollLeft;\n    private getTree: GetTree;\n    private onCanMove?: OnCanMove;\n    private onCanMoveTo?: OnCanMoveTo;\n    private onDragMove?: DragMethod;\n    private onDragStop?: DragMethod;\n    private onIsMoveHandle?: OnIsMoveHandle;\n    private openFolderDelay: number | false;\n    private openFolderTimer: number | null;\n    private openNode: OpenNode;\n    private previousGhost: DropHint | null;\n    private refreshElements: RefreshElements;\n    private slide: boolean;\n    private treeElement: HTMLElement;\n    private triggerEvent: TriggerEvent;\n\n    constructor({\n        autoEscape,\n        getNodeElement,\n        getNodeElementForNode,\n        getScrollLeft,\n        getTree,\n        onCanMove,\n        onCanMoveTo,\n        onDragMove,\n        onDragStop,\n        onIsMoveHandle,\n        openNode,\n        refreshElements,\n        slide,\n        treeElement,\n        triggerEvent,\n    }: DragAndDropHandlerParams) {\n        this.autoEscape = autoEscape;\n        this.getNodeElement = getNodeElement;\n        this.getNodeElementForNode = getNodeElementForNode;\n        this.getScrollLeft = getScrollLeft;\n        this.getTree = getTree;\n        this.onCanMove = onCanMove;\n        this.onCanMoveTo = onCanMoveTo;\n        this.onDragMove = onDragMove;\n        this.onDragStop = onDragStop;\n        this.onIsMoveHandle = onIsMoveHandle;\n        this.openNode = openNode;\n        this.refreshElements = refreshElements;\n        this.slide = slide;\n        this.treeElement = treeElement;\n        this.triggerEvent = triggerEvent;\n\n        this.hoveredArea = null;\n        this.hitAreas = [];\n        this.isDragging = false;\n        this.currentItem = null;\n    }\n\n    public mouseCapture(positionInfo: PositionInfo): boolean | null {\n        const element = positionInfo.target;\n\n        if (!this.mustCaptureElement(element)) {\n            return null;\n        }\n\n        if (this.onIsMoveHandle && !this.onIsMoveHandle(jQuery(element))) {\n            return null;\n        }\n\n        let nodeElement = this.getNodeElement(element);\n\n        if (nodeElement && this.onCanMove) {\n            if (!this.onCanMove(nodeElement.node)) {\n                nodeElement = null;\n            }\n        }\n\n        this.currentItem = nodeElement;\n        return this.currentItem != null;\n    }\n\n    public mouseStart(positionInfo: PositionInfo): boolean {\n        if (!this.currentItem) {\n            return false;\n        }\n\n        this.refresh();\n\n        const { left, top } = getElementPosition(positionInfo.target);\n\n        const node = this.currentItem.node;\n\n        this.dragElement = new DragElement({\n            autoEscape: this.autoEscape ?? true,\n            nodeName: node.name,\n            offsetX: positionInfo.pageX - left,\n            offsetY: positionInfo.pageY - top,\n            treeElement: this.treeElement,\n        });\n\n        this.isDragging = true;\n        this.currentItem.element.classList.add(\"jqtree-moving\");\n\n        return true;\n    }\n\n    public mouseDrag(positionInfo: PositionInfo): boolean {\n        if (!this.currentItem || !this.dragElement) {\n            return false;\n        }\n\n        this.dragElement.move(positionInfo.pageX, positionInfo.pageY);\n\n        const area = this.findHoveredArea(\n            positionInfo.pageX,\n            positionInfo.pageY,\n        );\n\n        if (area && this.canMoveToArea(area)) {\n            if (!area.node.isFolder()) {\n                this.stopOpenFolderTimer();\n            }\n\n            if (this.hoveredArea !== area) {\n                this.hoveredArea = area;\n\n                // If this is a closed folder, start timer to open it\n                if (this.mustOpenFolderTimer(area)) {\n                    this.startOpenFolderTimer(area.node);\n                } else {\n                    this.stopOpenFolderTimer();\n                }\n\n                this.updateDropHint();\n            }\n        } else {\n            this.removeDropHint();\n            this.stopOpenFolderTimer();\n            this.hoveredArea = area;\n        }\n\n        if (!area) {\n            if (this.onDragMove) {\n                this.onDragMove(\n                    this.currentItem.node,\n                    positionInfo.originalEvent,\n                );\n            }\n        }\n\n        return true;\n    }\n\n    public mouseStop(positionInfo: PositionInfo): boolean {\n        this.moveItem(positionInfo);\n        this.clear();\n        this.removeHover();\n        this.removeDropHint();\n        this.removeHitAreas();\n\n        const currentItem = this.currentItem;\n\n        if (this.currentItem) {\n            this.currentItem.element.classList.remove(\"jqtree-moving\");\n            this.currentItem = null;\n        }\n\n        this.isDragging = false;\n\n        if (!this.hoveredArea && currentItem) {\n            if (this.onDragStop) {\n                this.onDragStop(currentItem.node, positionInfo.originalEvent);\n            }\n        }\n\n        return false;\n    }\n\n    public refresh(): void {\n        this.removeHitAreas();\n\n        if (this.currentItem) {\n            this.generateHitAreas();\n\n            this.currentItem = this.getNodeElementForNode(\n                this.currentItem.node,\n            );\n\n            if (this.isDragging) {\n                this.currentItem.element.classList.add(\"jqtree-moving\");\n            }\n        }\n    }\n\n    private generateHitAreas(): void {\n        const tree = this.getTree();\n\n        if (!this.currentItem || !tree) {\n            this.hitAreas = [];\n        } else {\n            this.hitAreas = generateHitAreas(\n                tree,\n                this.currentItem.node,\n                this.getTreeDimensions().bottom,\n            );\n        }\n    }\n\n    private mustCaptureElement(element: HTMLElement): boolean {\n        const nodeName = element.nodeName;\n\n        return (\n            nodeName !== \"INPUT\" &&\n            nodeName !== \"SELECT\" &&\n            nodeName !== \"TEXTAREA\"\n        );\n    }\n\n    private canMoveToArea(area: HitArea): boolean {\n        if (!this.onCanMoveTo) {\n            return true;\n        }\n\n        if (!this.currentItem) {\n            return false;\n        }\n\n        const positionName = getPositionName(area.position);\n\n        return this.onCanMoveTo(this.currentItem.node, area.node, positionName);\n    }\n\n    private removeHitAreas(): void {\n        this.hitAreas = [];\n    }\n\n    private clear(): void {\n        if (this.dragElement) {\n            this.dragElement.remove();\n            this.dragElement = null;\n        }\n    }\n\n    private removeDropHint(): void {\n        if (this.previousGhost) {\n            this.previousGhost.remove();\n        }\n    }\n\n    private removeHover(): void {\n        this.hoveredArea = null;\n    }\n\n    private findHoveredArea(x: number, y: number): HitArea | null {\n        const dimensions = this.getTreeDimensions();\n\n        if (\n            x < dimensions.left ||\n            y < dimensions.top ||\n            x > dimensions.right ||\n            y > dimensions.bottom\n        ) {\n            return null;\n        }\n\n        let low = 0;\n        let high = this.hitAreas.length;\n        while (low < high) {\n            const mid = (low + high) >> 1;\n            const area = this.hitAreas[mid];\n\n            if (!area) {\n                return null;\n            }\n\n            if (y < area.top) {\n                high = mid;\n            } else if (y > area.bottom) {\n                low = mid + 1;\n            } else {\n                return area;\n            }\n        }\n\n        return null;\n    }\n\n    private mustOpenFolderTimer(area: HitArea): boolean {\n        const node = area.node;\n\n        return (\n            node.isFolder() &&\n            !node.is_open &&\n            area.position === Position.Inside\n        );\n    }\n\n    private updateDropHint(): void {\n        if (!this.hoveredArea) {\n            return;\n        }\n\n        // remove previous drop hint\n        this.removeDropHint();\n\n        // add new drop hint\n        const nodeElement = this.getNodeElementForNode(this.hoveredArea.node);\n        this.previousGhost = nodeElement.addDropHint(this.hoveredArea.position);\n    }\n\n    private startOpenFolderTimer(folder: Node): void {\n        const openFolder = (): void => {\n            this.openNode(folder, this.slide, () => {\n                this.refresh();\n                this.updateDropHint();\n            });\n        };\n\n        this.stopOpenFolderTimer();\n\n        const openFolderDelay = this.openFolderDelay;\n\n        if (openFolderDelay !== false) {\n            this.openFolderTimer = window.setTimeout(\n                openFolder,\n                openFolderDelay,\n            );\n        }\n    }\n\n    private stopOpenFolderTimer(): void {\n        if (this.openFolderTimer) {\n            clearTimeout(this.openFolderTimer);\n            this.openFolderTimer = null;\n        }\n    }\n\n    private moveItem(positionInfo: PositionInfo): void {\n        if (\n            this.currentItem &&\n            this.hoveredArea &&\n            this.hoveredArea.position !== Position.None &&\n            this.canMoveToArea(this.hoveredArea)\n        ) {\n            const movedNode = this.currentItem.node;\n            const targetNode = this.hoveredArea.node;\n            const position = this.hoveredArea.position;\n            const previousParent = movedNode.parent;\n\n            if (position === Position.Inside) {\n                this.hoveredArea.node.is_open = true;\n            }\n\n            const doMove = (): void => {\n                const tree = this.getTree();\n\n                if (tree) {\n                    tree.moveNode(movedNode, targetNode, position);\n\n                    this.treeElement.textContent = \"\";\n                    this.refreshElements(null);\n                }\n            };\n\n            const event = this.triggerEvent(\"tree.move\", {\n                move_info: {\n                    moved_node: movedNode,\n                    target_node: targetNode,\n                    position: getPositionName(position),\n                    previous_parent: previousParent,\n                    do_move: doMove,\n                    original_event: positionInfo.originalEvent,\n                },\n            });\n\n            if (!event.isDefaultPrevented()) {\n                doMove();\n            }\n        }\n    }\n\n    private getTreeDimensions(): Dimensions {\n        // Return the dimensions of the tree. Add a margin to the bottom to allow\n        // to drag-and-drop after the last element.\n        const treePosition = getElementPosition(this.treeElement);\n        const left = treePosition.left + this.getScrollLeft();\n        const top = treePosition.top;\n\n        return {\n            left,\n            top,\n            right: left + this.treeElement.clientWidth,\n            bottom: top + this.treeElement.clientHeight + 16,\n        };\n    }\n}\n","import { getBoolString } from \"./util\";\nimport { Node } from \"./node\";\nimport { IconElement, OnCreateLi } from \"./jqtreeOptions\";\nimport { GetTree, IsNodeSelected } from \"./jqtreeMethodTypes\";\n\ninterface ElementsRendererParams {\n    autoEscape: boolean;\n    buttonLeft: boolean;\n    closedIcon?: IconElement;\n    dragAndDrop: boolean;\n    $element: JQuery<HTMLElement>;\n    getTree: GetTree;\n    isNodeSelected: IsNodeSelected;\n    onCreateLi?: OnCreateLi;\n    openedIcon?: IconElement;\n    rtl?: boolean;\n    showEmptyFolder: boolean;\n    tabIndex?: number;\n}\n\nexport default class ElementsRenderer {\n    public openedIconElement?: HTMLElement | Text;\n    public closedIconElement?: HTMLElement | Text;\n    private autoEscape: boolean;\n    private buttonLeft: boolean;\n    private dragAndDrop: boolean;\n    private $element: JQuery<HTMLElement>;\n    private getTree: GetTree;\n    private isNodeSelected: IsNodeSelected;\n    private onCreateLi?: OnCreateLi;\n    private rtl?: boolean;\n    private showEmptyFolder: boolean;\n    private tabIndex?: number;\n\n    constructor({\n        autoEscape,\n        buttonLeft,\n        closedIcon,\n        onCreateLi,\n        dragAndDrop,\n        $element,\n        getTree,\n        isNodeSelected,\n        openedIcon,\n        rtl,\n        showEmptyFolder,\n        tabIndex,\n    }: ElementsRendererParams) {\n        this.autoEscape = autoEscape;\n        this.buttonLeft = buttonLeft;\n        this.dragAndDrop = dragAndDrop;\n        this.$element = $element;\n        this.getTree = getTree;\n        this.isNodeSelected = isNodeSelected;\n        this.onCreateLi = onCreateLi;\n        this.rtl = rtl;\n        this.showEmptyFolder = showEmptyFolder;\n        this.tabIndex = tabIndex;\n        this.openedIconElement = this.createButtonElement(openedIcon || \"+\");\n        this.closedIconElement = this.createButtonElement(closedIcon || \"-\");\n    }\n\n    public render(fromNode: Node | null): void {\n        if (fromNode && fromNode.parent) {\n            this.renderFromNode(fromNode);\n        } else {\n            this.renderFromRoot();\n        }\n    }\n\n    public renderFromRoot(): void {\n        this.$element.empty();\n\n        const tree = this.getTree();\n\n        if (this.$element[0] && tree) {\n            this.createDomElements(this.$element[0], tree.children, true, 1);\n        }\n    }\n\n    public renderFromNode(node: Node): void {\n        // remember current li\n        const $previousLi = jQuery(node.element);\n\n        // create element\n        const li = this.createLi(node, node.getLevel());\n        this.attachNodeData(node, li);\n\n        // add element to dom\n        $previousLi.after(li);\n\n        // remove previous li\n        $previousLi.remove();\n\n        // create children\n        if (node.children) {\n            this.createDomElements(\n                li,\n                node.children,\n                false,\n                node.getLevel() + 1,\n            );\n        }\n    }\n\n    private createDomElements(\n        element: Element,\n        children: Node[],\n        isRootNode: boolean,\n        level: number,\n    ): void {\n        const ul = this.createUl(isRootNode);\n        element.appendChild(ul);\n\n        for (const child of children) {\n            const li = this.createLi(child, level);\n            ul.appendChild(li);\n\n            this.attachNodeData(child, li);\n\n            if (child.hasChildren()) {\n                this.createDomElements(li, child.children, false, level + 1);\n            }\n        }\n    }\n\n    private attachNodeData(node: Node, li: HTMLElement): void {\n        node.element = li;\n        jQuery(li).data(\"node\", node);\n    }\n\n    private createUl(isRootNode: boolean): HTMLUListElement {\n        let classString;\n        let role;\n\n        if (!isRootNode) {\n            classString = \"\";\n            role = \"group\";\n        } else {\n            classString = \"jqtree-tree\";\n            role = \"tree\";\n\n            if (this.rtl) {\n                classString += \" jqtree-rtl\";\n            }\n        }\n\n        if (this.dragAndDrop) {\n            classString += \" jqtree-dnd\";\n        }\n\n        const ul = document.createElement(\"ul\");\n        ul.className = `jqtree_common ${classString}`;\n\n        ul.setAttribute(\"role\", role);\n\n        return ul;\n    }\n\n    private createLi(node: Node, level: number): HTMLLIElement {\n        const isSelected = Boolean(this.isNodeSelected(node));\n\n        const mustShowFolder =\n            node.isFolder() || (node.isEmptyFolder && this.showEmptyFolder);\n\n        const li = mustShowFolder\n            ? this.createFolderLi(node, level, isSelected)\n            : this.createNodeLi(node, level, isSelected);\n\n        if (this.onCreateLi) {\n            this.onCreateLi(node, jQuery(li), isSelected);\n        }\n\n        return li;\n    }\n\n    private setTreeItemAriaAttributes(\n        element: HTMLElement,\n        name: string,\n        level: number,\n        isSelected: boolean,\n    ) {\n        element.setAttribute(\"aria-label\", name);\n        element.setAttribute(\"aria-level\", `${level}`);\n        element.setAttribute(\"aria-selected\", getBoolString(isSelected));\n        element.setAttribute(\"role\", \"treeitem\");\n    }\n\n    private createFolderLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const buttonClasses = this.getButtonClasses(node);\n        const folderClasses = this.getFolderClasses(node, isSelected);\n\n        const iconElement = node.is_open\n            ? this.openedIconElement\n            : this.closedIconElement;\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = `jqtree_common ${folderClasses}`;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // button link\n        const buttonLink = document.createElement(\"a\");\n        buttonLink.className = buttonClasses;\n\n        if (iconElement) {\n            buttonLink.appendChild(iconElement.cloneNode(true));\n        }\n\n        if (this.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            true,\n            level,\n        );\n        titleSpan.setAttribute(\"aria-expanded\", getBoolString(node.is_open));\n        div.appendChild(titleSpan);\n\n        if (!this.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        return li;\n    }\n\n    private createNodeLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const liClasses = [\"jqtree_common\"];\n\n        if (isSelected) {\n            liClasses.push(\"jqtree-selected\");\n        }\n\n        const classString = liClasses.join(\" \");\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = classString;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            false,\n            level,\n        );\n        div.appendChild(titleSpan);\n\n        return li;\n    }\n\n    private createTitleSpan(\n        nodeName: string,\n        isSelected: boolean,\n        isFolder: boolean,\n        level: number,\n    ): HTMLSpanElement {\n        const titleSpan = document.createElement(\"span\");\n\n        let classes = \"jqtree-title jqtree_common\";\n\n        if (isFolder) {\n            classes += \" jqtree-title-folder\";\n        }\n\n        classes += ` jqtree-title-button-${this.buttonLeft ? \"left\" : \"right\"}`;\n\n        titleSpan.className = classes;\n\n        if (isSelected) {\n            const tabIndex = this.tabIndex;\n\n            if (tabIndex !== undefined) {\n                titleSpan.setAttribute(\"tabindex\", `${tabIndex}`);\n            }\n        }\n\n        this.setTreeItemAriaAttributes(titleSpan, nodeName, level, isSelected);\n\n        if (this.autoEscape) {\n            titleSpan.textContent = nodeName;\n        } else {\n            titleSpan.innerHTML = nodeName;\n        }\n\n        return titleSpan;\n    }\n\n    private getButtonClasses(node: Node): string {\n        const classes = [\"jqtree-toggler\", \"jqtree_common\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (this.buttonLeft) {\n            classes.push(\"jqtree-toggler-left\");\n        } else {\n            classes.push(\"jqtree-toggler-right\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private getFolderClasses(node: Node, isSelected: boolean): string {\n        const classes = [\"jqtree-folder\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (isSelected) {\n            classes.push(\"jqtree-selected\");\n        }\n\n        if (node.is_loading) {\n            classes.push(\"jqtree-loading\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private createButtonElement(\n        value: IconElement,\n    ): HTMLElement | Text | undefined {\n        if (typeof value === \"string\") {\n            // convert value to html\n            const div = document.createElement(\"div\");\n            div.innerHTML = value;\n\n            return document.createTextNode(div.innerHTML);\n        } else if (value == null) {\n            return undefined;\n        } else if ((value as HTMLElement).nodeType) {\n            return value as HTMLElement;\n        } else {\n            return jQuery(value)[0];\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { DataFilter, OnLoadFailed, OnLoading } from \"./jqtreeOptions\";\nimport { LoadData, TriggerEvent } from \"./jqtreeMethodTypes\";\n\nexport type HandleFinishedLoading = () => void;\n\ninterface DataLoaderParams {\n    dataFilter?: DataFilter;\n    loadData: LoadData;\n    onLoadFailed?: OnLoadFailed;\n    onLoading?: OnLoading;\n    $treeElement: JQuery<HTMLElement>;\n    triggerEvent: TriggerEvent;\n}\n\nexport default class DataLoader {\n    private dataFilter?: DataFilter;\n    private loadData: LoadData;\n    private onLoadFailed?: OnLoadFailed;\n    private onLoading?: OnLoading;\n    private $treeElement: JQuery<HTMLElement>;\n    private triggerEvent: TriggerEvent;\n\n    constructor({\n        dataFilter,\n        loadData,\n        onLoadFailed,\n        onLoading,\n        $treeElement,\n        triggerEvent,\n    }: DataLoaderParams) {\n        this.dataFilter = dataFilter;\n        this.loadData = loadData;\n        this.onLoadFailed = onLoadFailed;\n        this.onLoading = onLoading;\n        this.$treeElement = $treeElement;\n        this.triggerEvent = triggerEvent;\n    }\n\n    public loadFromUrl(\n        urlInfo: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null,\n    ): void {\n        if (!urlInfo) {\n            return;\n        }\n\n        const $el = this.getDomElement(parentNode);\n        this.addLoadingClass($el);\n        this.notifyLoading(true, parentNode, $el);\n\n        const stopLoading = (): void => {\n            this.removeLoadingClass($el);\n            this.notifyLoading(false, parentNode, $el);\n        };\n\n        const handleSuccess = (data: string | NodeData[]): void => {\n            stopLoading();\n            this.loadData(this.parseData(data), parentNode);\n\n            if (onFinished && typeof onFinished === \"function\") {\n                onFinished();\n            }\n        };\n\n        const handleError = (jqXHR: JQuery.jqXHR): void => {\n            stopLoading();\n\n            if (this.onLoadFailed) {\n                this.onLoadFailed(jqXHR);\n            }\n        };\n\n        this.submitRequest(urlInfo, handleSuccess, handleError);\n    }\n\n    private addLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.addClass(\"jqtree-loading\");\n        }\n    }\n\n    private removeLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.removeClass(\"jqtree-loading\");\n        }\n    }\n\n    private getDomElement(parentNode: Node | null): JQuery<HTMLElement> {\n        if (parentNode) {\n            return jQuery(parentNode.element);\n        } else {\n            return this.$treeElement;\n        }\n    }\n\n    private notifyLoading(\n        isLoading: boolean,\n        node: Node | null,\n        $el: JQuery,\n    ): void {\n        if (this.onLoading) {\n            this.onLoading(isLoading, node, $el);\n        }\n\n        this.triggerEvent(\"tree.loading_data\", {\n            isLoading,\n            node,\n            $el,\n        });\n    }\n\n    private submitRequest(\n        urlInfoInput: string | JQuery.AjaxSettings,\n        handleSuccess: JQuery.Ajax.SuccessCallback<any>,\n        handleError: JQuery.Ajax.ErrorCallback<any>,\n    ): void {\n        const urlInfo =\n            typeof urlInfoInput === \"string\"\n                ? { url: urlInfoInput }\n                : urlInfoInput;\n\n        const ajaxSettings: JQuery.AjaxSettings = {\n            method: \"GET\",\n            cache: false,\n            dataType: \"json\",\n            success: handleSuccess,\n            error: handleError,\n            ...urlInfo,\n        };\n\n        ajaxSettings.method = ajaxSettings.method?.toUpperCase() || \"GET\";\n\n        void jQuery.ajax(ajaxSettings);\n    }\n\n    private parseData(data: string | NodeData[]): NodeData[] {\n        const getParsedData = () => {\n            if (typeof data === \"string\") {\n                return JSON.parse(data) as NodeData[];\n            } else {\n                return data;\n            }\n        };\n\n        const parsedData = getParsedData();\n\n        if (this.dataFilter) {\n            return this.dataFilter(parsedData);\n        } else {\n            return parsedData;\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport {\n    CloseNode,\n    GetSelectedNode,\n    IsFocusOnTree,\n    OpenNode,\n    SelectNode,\n} from \"./jqtreeMethodTypes\";\n\ntype KeyboardEventHandler = (event: KeyboardEvent) => boolean;\n\ninterface KeyHandlerParams {\n    closeNode: CloseNode;\n    getSelectedNode: GetSelectedNode;\n    isFocusOnTree: IsFocusOnTree;\n    keyboardSupport: boolean;\n    openNode: OpenNode;\n    selectNode: SelectNode;\n}\n\nexport default class KeyHandler {\n    private closeNode: CloseNode;\n    private getSelectedNode: GetSelectedNode;\n    private handleKeyDownHandler?: KeyboardEventHandler;\n    private isFocusOnTree: IsFocusOnTree;\n    private keyboardSupport: boolean;\n    private openNode: OpenNode;\n    private originalSelectNode: SelectNode;\n\n    constructor({\n        closeNode,\n        getSelectedNode,\n        isFocusOnTree,\n        keyboardSupport,\n        openNode,\n        selectNode,\n    }: KeyHandlerParams) {\n        this.closeNode = closeNode;\n        this.getSelectedNode = getSelectedNode;\n        this.isFocusOnTree = isFocusOnTree;\n        this.keyboardSupport = keyboardSupport;\n        this.openNode = openNode;\n        this.originalSelectNode = selectNode;\n\n        if (keyboardSupport) {\n            this.handleKeyDownHandler = this.handleKeyDown.bind(this);\n\n            document.addEventListener(\"keydown\", this.handleKeyDownHandler);\n        }\n    }\n\n    public deinit(): void {\n        if (this.handleKeyDownHandler) {\n            document.removeEventListener(\"keydown\", this.handleKeyDownHandler);\n        }\n    }\n\n    public moveDown(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getNextVisibleNode());\n    }\n\n    public moveUp(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getPreviousVisibleNode());\n    }\n\n    public moveRight(selectedNode: Node): boolean {\n        if (!selectedNode.isFolder()) {\n            return true;\n        } else {\n            // folder node\n            if (selectedNode.is_open) {\n                // Right moves to the first child of an open node\n                return this.selectNode(selectedNode.getNextVisibleNode());\n            } else {\n                // Right expands a closed node\n                this.openNode(selectedNode);\n                return false;\n            }\n        }\n    }\n\n    public moveLeft(selectedNode: Node): boolean {\n        if (selectedNode.isFolder() && selectedNode.is_open) {\n            // Left on an open node closes the node\n            this.closeNode(selectedNode);\n            return false;\n        } else {\n            // Left on a closed or end node moves focus to the node's parent\n            return this.selectNode(selectedNode.getParent());\n        }\n    }\n\n    public selectNode(node: Node | null): boolean {\n        if (!node) {\n            return true;\n        } else {\n            this.originalSelectNode(node);\n\n            return false;\n        }\n    }\n\n    private handleKeyDown = (e: KeyboardEvent): boolean => {\n        if (!this.canHandleKeyboard()) {\n            return true;\n        }\n\n        const selectedNode = this.getSelectedNode();\n        if (!selectedNode) {\n            return true;\n        }\n\n        switch (e.key) {\n            case \"ArrowDown\":\n                return this.moveDown(selectedNode);\n\n            case \"ArrowUp\":\n                return this.moveUp(selectedNode);\n\n            case \"ArrowRight\":\n                return this.moveRight(selectedNode);\n\n            case \"ArrowLeft\":\n                return this.moveLeft(selectedNode);\n\n            default:\n                return true;\n        }\n    };\n\n    private canHandleKeyboard(): boolean {\n        return this.keyboardSupport && this.isFocusOnTree();\n    }\n}\n","export interface PositionInfo {\n    originalEvent: Event;\n    pageX: number;\n    pageY: number;\n    target: HTMLElement;\n}\n\nexport const getPositionInfoFromMouseEvent = (e: MouseEvent): PositionInfo => ({\n    originalEvent: e,\n    pageX: e.pageX,\n    pageY: e.pageY,\n    target: e.target as HTMLElement,\n});\n\nexport const getPositionInfoFromTouch = (\n    touch: Touch,\n    e: TouchEvent,\n): PositionInfo => ({\n    originalEvent: e,\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    target: touch.target as HTMLElement,\n});\n","import {\n    getPositionInfoFromMouseEvent,\n    getPositionInfoFromTouch,\n    PositionInfo,\n} from \"./mouseUtils\";\nimport { Node } from \"./node\";\nimport { TriggerEvent } from \"./jqtreeMethodTypes\";\n\ninterface ClickTarget {\n    node: Node;\n    type: \"button\" | \"label\";\n}\n\ntype GetNode = (element: HTMLElement) => null | Node;\n\ninterface MouseHandlerParams {\n    element: HTMLElement;\n    getMouseDelay: () => number;\n    getNode: GetNode;\n    onClickButton: (node: Node) => void;\n    onClickTitle: (node: Node) => void;\n    onMouseCapture: (positionInfo: PositionInfo) => boolean | null;\n    onMouseDrag: (positionInfo: PositionInfo) => void;\n    onMouseStart: (positionInfo: PositionInfo) => boolean;\n    onMouseStop: (positionInfo: PositionInfo) => void;\n    triggerEvent: TriggerEvent;\n    useContextMenu: boolean;\n}\n\nclass MouseHandler {\n    private element: HTMLElement;\n    private getMouseDelay: () => number;\n    private getNode: GetNode;\n    private isMouseDelayMet: boolean;\n    private isMouseStarted: boolean;\n    private mouseDelayTimer: number | null;\n    private mouseDownInfo: PositionInfo | null;\n    private onClickButton: (node: Node) => void;\n    private onClickTitle: (node: Node) => void;\n    private onMouseCapture: (positionInfo: PositionInfo) => boolean | null;\n    private onMouseDrag: (positionInfo: PositionInfo) => void;\n    private onMouseStart: (positionInfo: PositionInfo) => boolean;\n    private onMouseStop: (positionInfo: PositionInfo) => void;\n    private triggerEvent: TriggerEvent;\n    private useContextMenu: boolean;\n\n    constructor({\n        element,\n        getMouseDelay,\n        getNode,\n        onClickButton,\n        onClickTitle,\n        onMouseCapture,\n        onMouseDrag,\n        onMouseStart,\n        onMouseStop,\n        triggerEvent,\n        useContextMenu,\n    }: MouseHandlerParams) {\n        this.element = element;\n        this.getMouseDelay = getMouseDelay;\n        this.getNode = getNode;\n        this.onClickButton = onClickButton;\n        this.onClickTitle = onClickTitle;\n        this.onMouseCapture = onMouseCapture;\n        this.onMouseDrag = onMouseDrag;\n        this.onMouseStart = onMouseStart;\n        this.onMouseStop = onMouseStop;\n        this.triggerEvent = triggerEvent;\n        this.useContextMenu = useContextMenu;\n\n        element.addEventListener(\"click\", this.handleClick);\n        element.addEventListener(\"dblclick\", this.handleDblclick);\n        element.addEventListener(\"mousedown\", this.mouseDown, {\n            passive: false,\n        });\n        element.addEventListener(\"touchstart\", this.touchStart, {\n            passive: false,\n        });\n\n        if (useContextMenu) {\n            element.addEventListener(\"contextmenu\", this.handleContextmenu);\n        }\n\n        this.isMouseStarted = false;\n        this.mouseDelayTimer = null;\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n    }\n\n    public deinit(): void {\n        this.element.removeEventListener(\"click\", this.handleClick);\n        this.element.removeEventListener(\"dblclick\", this.handleDblclick);\n\n        if (this.useContextMenu) {\n            this.element.removeEventListener(\n                \"contextmenu\",\n                this.handleContextmenu,\n            );\n        }\n\n        this.element.removeEventListener(\"mousedown\", this.mouseDown);\n        this.element.removeEventListener(\"touchstart\", this.touchStart);\n        this.removeMouseMoveEventListeners();\n    }\n\n    private mouseDown = (e: MouseEvent): void => {\n        // Left mouse button?\n        if (e.button !== 0) {\n            return;\n        }\n\n        const result = this.handleMouseDown(getPositionInfoFromMouseEvent(e));\n\n        if (result && e.cancelable) {\n            e.preventDefault();\n        }\n    };\n\n    private handleMouseDown(positionInfo: PositionInfo): boolean {\n        // We may have missed mouseup (out of window)\n        if (this.isMouseStarted) {\n            this.handleMouseUp(positionInfo);\n        }\n\n        this.mouseDownInfo = positionInfo;\n\n        if (!this.onMouseCapture(positionInfo)) {\n            return false;\n        }\n\n        this.handleStartMouse();\n\n        return true;\n    }\n\n    private handleStartMouse(): void {\n        document.addEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        document.addEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        document.addEventListener(\"mouseup\", this.mouseUp, { passive: false });\n        document.addEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n\n        const mouseDelay = this.getMouseDelay();\n\n        if (mouseDelay) {\n            this.startMouseDelayTimer(mouseDelay);\n        } else {\n            this.isMouseDelayMet = true;\n        }\n    }\n\n    private startMouseDelayTimer(mouseDelay: number): void {\n        if (this.mouseDelayTimer) {\n            clearTimeout(this.mouseDelayTimer);\n        }\n\n        this.mouseDelayTimer = window.setTimeout(() => {\n            if (this.mouseDownInfo) {\n                this.isMouseDelayMet = true;\n            }\n        }, mouseDelay);\n\n        this.isMouseDelayMet = false;\n    }\n\n    private mouseMove = (e: MouseEvent): void => {\n        this.handleMouseMove(e, getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseMove(\n        e: MouseEvent | TouchEvent,\n        positionInfo: PositionInfo,\n    ): void {\n        if (this.isMouseStarted) {\n            this.onMouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n            return;\n        }\n\n        if (!this.isMouseDelayMet) {\n            return;\n        }\n\n        if (this.mouseDownInfo) {\n            this.isMouseStarted =\n                this.onMouseStart(this.mouseDownInfo) !== false;\n        }\n\n        if (this.isMouseStarted) {\n            this.onMouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n        } else {\n            this.handleMouseUp(positionInfo);\n        }\n    }\n\n    private mouseUp = (e: MouseEvent): void => {\n        this.handleMouseUp(getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseUp(positionInfo: PositionInfo): void {\n        this.removeMouseMoveEventListeners();\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n\n        if (this.isMouseStarted) {\n            this.isMouseStarted = false;\n            this.onMouseStop(positionInfo);\n        }\n    }\n\n    private removeMouseMoveEventListeners() {\n        document.removeEventListener(\"mousemove\", this.mouseMove);\n        document.removeEventListener(\"touchmove\", this.touchMove);\n        document.removeEventListener(\"mouseup\", this.mouseUp);\n        document.removeEventListener(\"touchend\", this.touchEnd);\n    }\n\n    private touchStart = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.touches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseDown(getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchMove = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.touches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseMove(e, getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchEnd = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.touches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseUp(getPositionInfoFromTouch(touch, e));\n    };\n\n    private handleClick = (e: MouseEvent): void => {\n        if (!e.target) {\n            return;\n        }\n\n        const clickTarget = this.getClickTarget(e.target as HTMLElement);\n\n        if (!clickTarget) {\n            return;\n        }\n\n        if (clickTarget.type === \"button\") {\n            this.onClickButton(clickTarget.node);\n\n            e.preventDefault();\n            e.stopPropagation();\n        } else if (clickTarget.type === \"label\") {\n            const event = this.triggerEvent(\"tree.click\", {\n                node: clickTarget.node,\n                click_event: e,\n            });\n\n            if (!event.isDefaultPrevented()) {\n                this.onClickTitle(clickTarget.node);\n            }\n        }\n    };\n\n    private handleDblclick = (e: MouseEvent): void => {\n        if (!e.target) {\n            return;\n        }\n\n        const clickTarget = this.getClickTarget(e.target as HTMLElement);\n\n        if (clickTarget?.type === \"label\") {\n            this.triggerEvent(\"tree.dblclick\", {\n                node: clickTarget.node,\n                click_event: e,\n            });\n        }\n    };\n\n    private handleContextmenu = (e: MouseEvent) => {\n        if (!e.target) {\n            return;\n        }\n\n        const div = (e.target as HTMLElement).closest<HTMLElement>(\n            \"ul.jqtree-tree .jqtree-element\",\n        );\n\n        if (div) {\n            const node = this.getNode(div);\n            if (node) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                this.triggerEvent(\"tree.contextmenu\", {\n                    node,\n                    click_event: e,\n                });\n                return false;\n            }\n        }\n\n        return null;\n    };\n\n    private getClickTarget(element: HTMLElement): ClickTarget | null {\n        const button = element.closest<HTMLElement>(\".jqtree-toggler\");\n\n        if (button) {\n            const node = this.getNode(button);\n\n            if (node) {\n                return {\n                    type: \"button\",\n                    node,\n                };\n            }\n        } else {\n            const jqTreeElement =\n                element.closest<HTMLElement>(\".jqtree-element\");\n\n            if (jqTreeElement) {\n                const node = this.getNode(jqTreeElement);\n                if (node) {\n                    return {\n                        type: \"label\",\n                        node,\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n}\n\nexport default MouseHandler;\n","import { isInt } from \"./util\";\nimport { Node } from \"./node\";\nimport { OnGetStateFromStorage, OnSetStateFromStorage } from \"./jqtreeOptions\";\nimport {\n    AddToSelection,\n    GetNodeById,\n    GetSelectedNodes,\n    GetTree,\n    OpenNode,\n    RefreshElements,\n    RemoveFromSelection,\n} from \"./jqtreeMethodTypes\";\n\nexport interface SavedState {\n    open_nodes: NodeId[];\n    selected_node: NodeId[];\n}\n\ninterface SaveStateHandlerParams {\n    addToSelection: AddToSelection;\n    getNodeById: GetNodeById;\n    getSelectedNodes: GetSelectedNodes;\n    getTree: GetTree;\n    onGetStateFromStorage?: OnGetStateFromStorage;\n    onSetStateFromStorage?: OnSetStateFromStorage;\n    openNode: OpenNode;\n    refreshElements: RefreshElements;\n    removeFromSelection: RemoveFromSelection;\n    saveState: boolean | string;\n}\n\nexport default class SaveStateHandler {\n    private addToSelection: AddToSelection;\n    private getNodeById: GetNodeById;\n    private getSelectedNodes: GetSelectedNodes;\n    private getTree: GetTree;\n    private onGetStateFromStorage?: OnGetStateFromStorage;\n    private onSetStateFromStorage?: OnSetStateFromStorage;\n    private openNode: OpenNode;\n    private refreshElements: RefreshElements;\n    private removeFromSelection: RemoveFromSelection;\n    private saveStateOption: boolean | string;\n    private _supportsLocalStorage: boolean | null;\n\n    constructor({\n        addToSelection,\n        getNodeById,\n        getSelectedNodes,\n        getTree,\n        onGetStateFromStorage,\n        onSetStateFromStorage,\n        openNode,\n        refreshElements,\n        removeFromSelection,\n        saveState,\n    }: SaveStateHandlerParams) {\n        this.addToSelection = addToSelection;\n        this.getNodeById = getNodeById;\n        this.getSelectedNodes = getSelectedNodes;\n        this.getTree = getTree;\n        this.onGetStateFromStorage = onGetStateFromStorage;\n        this.onSetStateFromStorage = onSetStateFromStorage;\n        this.openNode = openNode;\n        this.refreshElements = refreshElements;\n        this.removeFromSelection = removeFromSelection;\n        this.saveStateOption = saveState;\n    }\n\n    public saveState(): void {\n        const state = JSON.stringify(this.getState());\n\n        if (this.onSetStateFromStorage) {\n            this.onSetStateFromStorage(state);\n        } else if (this.supportsLocalStorage()) {\n            localStorage.setItem(this.getKeyName(), state);\n        }\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        const jsonData = this.loadFromStorage();\n\n        if (jsonData) {\n            return this.parseState(jsonData) as unknown as SavedState;\n        } else {\n            return null;\n        }\n    }\n\n    public getState(): SavedState {\n        const getOpenNodeIds = (): NodeId[] => {\n            const openNodes: NodeId[] = [];\n\n            this.getTree()?.iterate((node: Node) => {\n                if (node.is_open && node.id && node.hasChildren()) {\n                    openNodes.push(node.id);\n                }\n                return true;\n            });\n\n            return openNodes;\n        };\n\n        const getSelectedNodeIds = (): NodeId[] => {\n            const selectedNodeIds: NodeId[] = [];\n\n            this.getSelectedNodes().forEach((node) => {\n                if (node.id != null) {\n                    selectedNodeIds.push(node.id);\n                }\n            });\n\n            return selectedNodeIds;\n        };\n\n        return {\n            open_nodes: getOpenNodeIds(),\n            selected_node: getSelectedNodeIds(),\n        };\n    }\n\n    /*\n    Set initial state\n    Don't handle nodes that are loaded on demand\n\n    result: must load on demand\n    */\n    public setInitialState(state: SavedState): boolean {\n        if (!state) {\n            return false;\n        } else {\n            let mustLoadOnDemand = false;\n\n            if (state.open_nodes) {\n                mustLoadOnDemand = this.openInitialNodes(state.open_nodes);\n            }\n\n            if (state.selected_node) {\n                this.resetSelection();\n                this.selectInitialNodes(state.selected_node);\n            }\n\n            return mustLoadOnDemand;\n        }\n    }\n\n    public setInitialStateOnDemand(\n        state: SavedState,\n        cbFinished: () => void,\n    ): void {\n        if (state) {\n            this.doSetInitialStateOnDemand(\n                state.open_nodes,\n                state.selected_node,\n                cbFinished,\n            );\n        } else {\n            cbFinished();\n        }\n    }\n\n    public getNodeIdToBeSelected(): NodeId | null {\n        const state = this.getStateFromStorage();\n\n        if (state && state.selected_node) {\n            return state.selected_node[0] || null;\n        } else {\n            return null;\n        }\n    }\n\n    private parseState(jsonData: string): SavedState {\n        const state = JSON.parse(jsonData) as Record<string, unknown>;\n\n        // Check if selected_node is an int (instead of an array)\n        if (state && state.selected_node && isInt(state.selected_node)) {\n            // Convert to array\n            state.selected_node = [state.selected_node];\n        }\n\n        return state as unknown as SavedState;\n    }\n\n    private loadFromStorage(): string | null {\n        if (this.onGetStateFromStorage) {\n            return this.onGetStateFromStorage();\n        } else if (this.supportsLocalStorage()) {\n            return localStorage.getItem(this.getKeyName());\n        } else {\n            return null;\n        }\n    }\n\n    private openInitialNodes(nodeIds: NodeId[]): boolean {\n        let mustLoadOnDemand = false;\n\n        for (const nodeId of nodeIds) {\n            const node = this.getNodeById(nodeId);\n\n            if (node) {\n                if (!node.load_on_demand) {\n                    node.is_open = true;\n                } else {\n                    mustLoadOnDemand = true;\n                }\n            }\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    private selectInitialNodes(nodeIds: NodeId[]): boolean {\n        let selectCount = 0;\n\n        for (const nodeId of nodeIds) {\n            const node = this.getNodeById(nodeId);\n\n            if (node) {\n                selectCount += 1;\n\n                this.addToSelection(node);\n            }\n        }\n\n        return selectCount !== 0;\n    }\n\n    private resetSelection(): void {\n        const selectedNodes = this.getSelectedNodes();\n\n        selectedNodes.forEach((node) => {\n            this.removeFromSelection(node);\n        });\n    }\n\n    private doSetInitialStateOnDemand(\n        nodeIdsParam: NodeId[],\n        selectedNodes: NodeId[],\n        cbFinished: () => void,\n    ): void {\n        let loadingCount = 0;\n        let nodeIds = nodeIdsParam;\n\n        const openNodes = (): void => {\n            const newNodesIds = [];\n\n            for (const nodeId of nodeIds) {\n                const node = this.getNodeById(nodeId);\n\n                if (!node) {\n                    newNodesIds.push(nodeId);\n                } else {\n                    if (!node.is_loading) {\n                        if (node.load_on_demand) {\n                            loadAndOpenNode(node);\n                        } else {\n                            this.openNode(node, false);\n                        }\n                    }\n                }\n            }\n\n            nodeIds = newNodesIds;\n\n            if (this.selectInitialNodes(selectedNodes)) {\n                this.refreshElements(null);\n            }\n\n            if (loadingCount === 0) {\n                cbFinished();\n            }\n        };\n\n        const loadAndOpenNode = (node: Node): void => {\n            loadingCount += 1;\n            this.openNode(node, false, () => {\n                loadingCount -= 1;\n                openNodes();\n            });\n        };\n\n        openNodes();\n    }\n\n    private getKeyName(): string {\n        if (typeof this.saveStateOption === \"string\") {\n            return this.saveStateOption;\n        } else {\n            return \"tree\";\n        }\n    }\n\n    private supportsLocalStorage(): boolean {\n        const testSupport = (): boolean => {\n            // Is local storage supported?\n            if (localStorage == null) {\n                return false;\n            } else {\n                // Check if it's possible to store an item. Safari does not allow this in private browsing mode.\n                try {\n                    const key = \"_storage_test\";\n                    sessionStorage.setItem(key, \"value\");\n                    sessionStorage.removeItem(key);\n                } catch (error) {\n                    return false;\n                }\n\n                return true;\n            }\n        };\n\n        if (this._supportsLocalStorage == null) {\n            this._supportsLocalStorage = testSupport();\n        }\n\n        return this._supportsLocalStorage;\n    }\n}\n","import type { ScrollParent } from \"./types\";\nimport { getElementPosition, getOffsetTop } from '../util'\n\ntype HorizontalScrollDirection = \"left\" | \"right\";\ntype VerticalScrollDirection = \"bottom\" | \"top\";\n\ninterface Params {\n    container: HTMLElement;\n    refreshHitAreas: () => void;\n}\n\nexport default class ContainerScrollParent implements ScrollParent {\n    private container: HTMLElement;\n    private horizontalScrollDirection?: HorizontalScrollDirection;\n    private horizontalScrollTimeout?: number;\n    private refreshHitAreas: () => void;\n    private scrollParentBottom?: number;\n    private scrollParentTop?: number;\n    private verticalScrollTimeout?: number;\n    private verticalScrollDirection?: VerticalScrollDirection;\n\n    constructor({ container, refreshHitAreas }: Params) {\n        this.container = container;\n        this.refreshHitAreas = refreshHitAreas;\n    }\n\n    public checkHorizontalScrolling(pageX: number): void {\n        const newHorizontalScrollDirection =\n            this.getNewHorizontalScrollDirection(pageX);\n\n        if (this.horizontalScrollDirection !== newHorizontalScrollDirection) {\n            this.horizontalScrollDirection = newHorizontalScrollDirection;\n\n            if (this.horizontalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n            }\n\n            if (newHorizontalScrollDirection) {\n                this.horizontalScrollTimeout = window.setTimeout(\n                    this.scrollHorizontally.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public checkVerticalScrolling(pageY: number) {\n        const newVerticalScrollDirection =\n            this.getNewVerticalScrollDirection(pageY);\n\n        if (this.verticalScrollDirection !== newVerticalScrollDirection) {\n            this.verticalScrollDirection = newVerticalScrollDirection;\n\n            if (this.verticalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n                this.verticalScrollTimeout = undefined;\n            }\n\n            if (newVerticalScrollDirection) {\n                this.verticalScrollTimeout = window.setTimeout(\n                    this.scrollVertically.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public getScrollLeft(): number {\n        return this.container.scrollLeft;\n    }\n\n    public scrollToY(top: number): void {\n        this.container.scrollTop = top;\n    }\n\n    public stopScrolling() {\n        this.horizontalScrollDirection = undefined;\n        this.verticalScrollDirection = undefined;\n        this.scrollParentTop = undefined;\n        this.scrollParentBottom = undefined;\n    }\n\n    private getNewHorizontalScrollDirection(\n        pageX: number,\n    ): HorizontalScrollDirection | undefined {\n        const scrollParentOffset = getElementPosition(this.container);\n\n        const rightEdge = scrollParentOffset.left + this.container.clientWidth;\n        const leftEdge = scrollParentOffset.left;\n        const isNearRightEdge = pageX > rightEdge - 20;\n        const isNearLeftEdge = pageX < leftEdge + 20;\n\n        if (isNearRightEdge) {\n            return \"right\";\n        } else if (isNearLeftEdge) {\n            return \"left\";\n        }\n\n        return undefined;\n    }\n\n    private getNewVerticalScrollDirection(\n        pageY: number,\n    ): VerticalScrollDirection | undefined {\n        if (pageY < this.getScrollParentTop()) {\n            return \"top\";\n        }\n\n        if (pageY > this.getScrollParentBottom()) {\n            return \"bottom\";\n        }\n\n        return undefined;\n    }\n\n    private scrollHorizontally() {\n        if (!this.horizontalScrollDirection) {\n            return;\n        }\n\n        const distance = this.horizontalScrollDirection === \"left\" ? -20 : 20;\n\n        this.container.scrollBy({\n            left: distance,\n            top: 0,\n            behavior: \"instant\",\n        });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollHorizontally.bind(this), 40);\n    }\n\n    private scrollVertically() {\n        if (!this.verticalScrollDirection) {\n            return;\n        }\n\n        const distance = this.verticalScrollDirection === \"top\" ? -20 : 20;\n\n        this.container.scrollBy({\n            left: 0,\n            top: distance,\n            behavior: \"instant\",\n        });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollVertically.bind(this), 40);\n    }\n\n    private getScrollParentTop() {\n        if (this.scrollParentTop == null) {\n            this.scrollParentTop = getOffsetTop(this.container)\n        }\n\n        return this.scrollParentTop;\n    }\n\n    private getScrollParentBottom() {\n        if (this.scrollParentBottom == null) {\n            this.scrollParentBottom = this.getScrollParentTop() + this.container.clientHeight;\n        }\n\n        return this.scrollParentBottom;\n    }\n}\n","import type { ScrollParent } from \"./types\";\nimport { getOffsetTop } from '../util'\n\ntype HorizontalScrollDirection = \"left\" | \"right\";\ntype VerticalScrollDirection = \"bottom\" | \"top\";\n\ninterface Params {\n    refreshHitAreas: () => void;\n    treeElement: HTMLElement;\n}\n\nexport default class DocumentScrollParent implements ScrollParent {\n    private documentScrollHeight?: number;\n    private documentScrollWidth?: number;\n    private horizontalScrollDirection?: HorizontalScrollDirection;\n    private horizontalScrollTimeout?: number;\n    private refreshHitAreas: () => void;\n    private treeElement: HTMLElement;\n    private verticalScrollDirection?: VerticalScrollDirection;\n    private verticalScrollTimeout?: number;\n\n    constructor({ refreshHitAreas, treeElement }: Params) {\n        this.refreshHitAreas = refreshHitAreas;\n        this.treeElement = treeElement;\n    }\n\n    public checkHorizontalScrolling(pageX: number): void {\n        const newHorizontalScrollDirection =\n            this.getNewHorizontalScrollDirection(pageX);\n\n        if (this.horizontalScrollDirection !== newHorizontalScrollDirection) {\n            this.horizontalScrollDirection = newHorizontalScrollDirection;\n\n            if (this.horizontalScrollTimeout != null) {\n                window.clearTimeout(this.horizontalScrollTimeout);\n            }\n\n            if (newHorizontalScrollDirection) {\n                this.horizontalScrollTimeout = window.setTimeout(\n                    this.scrollHorizontally.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public checkVerticalScrolling(pageY: number) {\n        const newVerticalScrollDirection =\n            this.getNewVerticalScrollDirection(pageY);\n\n        if (this.verticalScrollDirection !== newVerticalScrollDirection) {\n            this.verticalScrollDirection = newVerticalScrollDirection;\n\n            if (this.verticalScrollTimeout != null) {\n                window.clearTimeout(this.verticalScrollTimeout);\n                this.verticalScrollTimeout = undefined;\n            }\n\n            if (newVerticalScrollDirection) {\n                this.verticalScrollTimeout = window.setTimeout(\n                    this.scrollVertically.bind(this),\n                    40,\n                );\n            }\n        }\n    }\n\n    public getScrollLeft(): number {\n        return document.documentElement.scrollLeft;\n    }\n\n    public scrollToY(top: number): void {\n        const treeTop = getOffsetTop(this.treeElement);\n\n        document.documentElement.scrollTop = top + treeTop;\n    }\n\n    public stopScrolling() {\n        this.horizontalScrollDirection = undefined;\n        this.verticalScrollDirection = undefined;\n        this.documentScrollHeight = undefined;\n        this.documentScrollWidth = undefined;\n    }\n\n    private getNewHorizontalScrollDirection(\n        pageX: number,\n    ): HorizontalScrollDirection | undefined {\n        const scrollLeft = document.documentElement.scrollLeft;\n        const windowWidth = window.innerWidth;\n\n        const isNearRightEdge = pageX > windowWidth - 20;\n        const isNearLeftEdge = pageX - scrollLeft < 20;\n\n        if (isNearRightEdge && this.canScrollRight()) {\n            return \"right\";\n        }\n\n        if (isNearLeftEdge) {\n            return \"left\";\n        }\n\n        return undefined;\n    }\n\n    private canScrollRight() {\n        const documentElement = document.documentElement;\n\n        return (\n            documentElement.scrollLeft + documentElement.clientWidth <\n            this.getDocumentScrollWidth()\n        );\n    }\n\n    private canScrollDown() {\n        const documentElement = document.documentElement;\n\n        return (\n            documentElement.scrollTop + documentElement.clientHeight <\n            this.getDocumentScrollHeight()\n        );\n    }\n\n    private getDocumentScrollHeight() {\n        // Store the original scroll height because the scroll height can increase when the drag element is moved beyond the scroll height.\n        if (this.documentScrollHeight == null) {\n            this.documentScrollHeight = document.documentElement.scrollHeight;\n        }\n\n        return this.documentScrollHeight;\n    }\n\n    private getDocumentScrollWidth() {\n        // Store the original scroll width because the scroll width can increase when the drag element is moved beyond the scroll width.\n        if (this.documentScrollWidth == null) {\n            this.documentScrollWidth = document.documentElement.scrollWidth;\n        }\n\n        return this.documentScrollWidth;\n    }\n\n    private getNewVerticalScrollDirection(\n        pageY: number,\n    ): VerticalScrollDirection | undefined {\n        const scrollTop = jQuery(document).scrollTop() || 0;\n        const distanceTop = pageY - scrollTop;\n\n        if (distanceTop < 20) {\n            return \"top\";\n        }\n\n        const windowHeight = window.innerHeight;\n\n        if (windowHeight - (pageY - scrollTop) < 20 && this.canScrollDown()) {\n            return \"bottom\";\n        }\n\n        return undefined;\n    }\n\n    private scrollHorizontally() {\n        if (!this.horizontalScrollDirection) {\n            return;\n        }\n\n        const distance = this.horizontalScrollDirection === \"left\" ? -20 : 20;\n        window.scrollBy({ left: distance, top: 0, behavior: \"instant\" });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollHorizontally.bind(this), 40);\n    }\n\n    private scrollVertically() {\n        if (!this.verticalScrollDirection) {\n            return;\n        }\n\n        const distance = this.verticalScrollDirection === \"top\" ? -20 : 20;\n        window.scrollBy({ left: 0, top: distance, behavior: \"instant\" });\n\n        this.refreshHitAreas();\n\n        setTimeout(this.scrollVertically.bind(this), 40);\n    }\n}\n","import type { ScrollParent } from \"./types\";\nimport ContainerScrollParent from \"./containerScrollParent\";\nimport DocumentScrollParent from \"./documentScrollParent\";\n\nconst isOverflow = (overflowValue: string) =>\n    overflowValue === \"auto\" || overflowValue === \"scroll\";\n\nconst hasOverFlow = (element: HTMLElement): boolean => {\n    const style = getComputedStyle(element);\n\n    return isOverflow(style.overflowX) || isOverflow(style.overflowY);\n};\n\nconst getParentWithOverflow = (\n    treeElement: HTMLElement,\n): HTMLElement | null => {\n    if (hasOverFlow(treeElement)) {\n        return treeElement;\n    }\n\n    let parent = treeElement.parentElement;\n\n    while (parent) {\n        if (hasOverFlow(parent)) {\n            return parent;\n        }\n\n        parent = parent.parentElement;\n    }\n\n    return null;\n};\n\nconst createScrollParent = (\n    treeElement: HTMLElement,\n    refreshHitAreas: () => void,\n): ScrollParent => {\n    const container = getParentWithOverflow(treeElement);\n\n    if (container && container.tagName !== \"HTML\") {\n        return new ContainerScrollParent({\n            container,\n            refreshHitAreas,\n        });\n    } else {\n        return new DocumentScrollParent({ refreshHitAreas, treeElement });\n    }\n};\n\nexport default createScrollParent;\n","import { PositionInfo } from \"./mouseUtils\";\nimport { ScrollParent } from \"./scrollHandler/types\";\nimport createScrollParent from \"./scrollHandler/createScrollParent\";\n\ninterface ScrollHandlerParams {\n    refreshHitAreas: () => void;\n    treeElement: HTMLElement;\n}\n\nexport default class ScrollHandler {\n    private refreshHitAreas: () => void;\n    private scrollParent?: ScrollParent;\n    private treeElement: HTMLElement;\n\n    constructor({ refreshHitAreas, treeElement }: ScrollHandlerParams) {\n        this.refreshHitAreas = refreshHitAreas;\n        this.scrollParent = undefined;\n        this.treeElement = treeElement;\n    }\n\n    public checkScrolling(positionInfo: PositionInfo): void {\n        this.checkVerticalScrolling(positionInfo);\n        this.checkHorizontalScrolling(positionInfo);\n    }\n\n    public stopScrolling() {\n        this.getScrollParent().stopScrolling();\n    }\n\n    public scrollToY(top: number): void {\n        this.getScrollParent().scrollToY(top);\n    }\n\n    public getScrollLeft(): number {\n        return this.getScrollParent().getScrollLeft();\n    }\n\n    private checkVerticalScrolling(positionInfo: PositionInfo): void {\n        this.getScrollParent().checkVerticalScrolling(positionInfo.pageY);\n    }\n\n    private checkHorizontalScrolling(positionInfo: PositionInfo): void {\n        this.getScrollParent().checkHorizontalScrolling(positionInfo.pageX);\n    }\n\n    private getScrollParent(): ScrollParent {\n        if (!this.scrollParent) {\n            this.scrollParent = createScrollParent(\n                this.treeElement,\n                this.refreshHitAreas,\n            );\n        }\n\n        return this.scrollParent;\n    }\n}\n","import { Node } from \"./node\";\nimport { GetNodeById } from \"./jqtreeMethodTypes\";\n\ninterface SelectNodeHandlerParameters {\n    getNodeById: GetNodeById;\n}\n\nexport default class SelectNodeHandler {\n    private getNodeById: GetNodeById;\n    private selectedNodes: Set<NodeId>;\n    private selectedSingleNode: Node | null;\n\n    constructor({ getNodeById }: SelectNodeHandlerParameters) {\n        this.getNodeById = getNodeById;\n        this.selectedNodes = new Set<NodeId>();\n        this.clear();\n    }\n\n    public getSelectedNode(): Node | false {\n        const selectedNodes = this.getSelectedNodes();\n\n        if (selectedNodes.length) {\n            return selectedNodes[0] || false;\n        } else {\n            return false;\n        }\n    }\n\n    public getSelectedNodes(): Node[] {\n        if (this.selectedSingleNode) {\n            return [this.selectedSingleNode];\n        } else {\n            const selectedNodes: Node[] = [];\n\n            this.selectedNodes.forEach((id) => {\n                const node = this.getNodeById(id);\n                if (node) {\n                    selectedNodes.push(node);\n                }\n            });\n\n            return selectedNodes;\n        }\n    }\n\n    public getSelectedNodesUnder(parent: Node): Node[] {\n        if (this.selectedSingleNode) {\n            if (parent.isParentOf(this.selectedSingleNode)) {\n                return [this.selectedSingleNode];\n            } else {\n                return [];\n            }\n        } else {\n            const selectedNodes = [];\n\n            for (const id in this.selectedNodes) {\n                if (\n                    Object.prototype.hasOwnProperty.call(this.selectedNodes, id)\n                ) {\n                    const node = this.getNodeById(id);\n                    if (node && parent.isParentOf(node)) {\n                        selectedNodes.push(node);\n                    }\n                }\n            }\n\n            return selectedNodes;\n        }\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (node.id != null) {\n            return this.selectedNodes.has(node.id);\n        } else if (this.selectedSingleNode) {\n            return this.selectedSingleNode.element === node.element;\n        } else {\n            return false;\n        }\n    }\n\n    public clear(): void {\n        this.selectedNodes.clear();\n        this.selectedSingleNode = null;\n    }\n\n    public removeFromSelection(node: Node, includeChildren = false): void {\n        if (node.id == null) {\n            if (\n                this.selectedSingleNode &&\n                node.element === this.selectedSingleNode.element\n            ) {\n                this.selectedSingleNode = null;\n            }\n        } else {\n            this.selectedNodes.delete(node.id);\n\n            if (includeChildren) {\n                node.iterate(() => {\n                    if (node.id != null) {\n                        this.selectedNodes.delete(node.id);\n                    }\n                    return true;\n                });\n            }\n        }\n    }\n\n    public addToSelection(node: Node): void {\n        if (node.id != null) {\n            this.selectedNodes.add(node.id);\n        } else {\n            this.selectedSingleNode = node;\n        }\n    }\n}\n","const register = (widgetClass: unknown, widgetName: string): void => {\n    const getDataKey = (): string => `simple_widget_${widgetName}`;\n\n    const getWidgetData = (\n        el: HTMLElement,\n        dataKey: string\n    ): SimpleWidget<unknown> | null => {\n        const widget = jQuery.data(el, dataKey) as unknown;\n\n        if (widget && widget instanceof SimpleWidget) {\n            return widget;\n        } else {\n            return null;\n        }\n    };\n\n    const createWidget = ($el: JQuery, options: unknown): JQuery => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const existingWidget = getWidgetData(el, dataKey);\n\n            if (!existingWidget) {\n                const simpleWidgetClass = widgetClass as typeof SimpleWidget;\n                const widget = new simpleWidgetClass(el, options);\n\n                if (!jQuery.data(el, dataKey)) {\n                    jQuery.data(el, dataKey, widget);\n                }\n\n                // Call init after setting data, so we can call methods\n                widget.init();\n            }\n        }\n\n        return $el;\n    };\n\n    const destroyWidget = ($el: JQuery): void => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const widget = getWidgetData(el, dataKey);\n\n            if (widget) {\n                widget.destroy();\n            }\n\n            jQuery.removeData(el, dataKey);\n        }\n    };\n\n    const callFunction = (\n        $el: JQuery,\n        functionName: string,\n        args: unknown[]\n    ): unknown => {\n        let result = null;\n\n        for (const el of $el.get()) {\n            const widget = jQuery.data(el, getDataKey()) as unknown;\n\n            if (widget && widget instanceof SimpleWidget) {\n                const simpleWidget = widget as SimpleWidget<unknown>;\n                const widgetFunction = simpleWidget[functionName];\n\n                if (widgetFunction && typeof widgetFunction === \"function\") {\n                    result = widgetFunction.apply(widget, args) as unknown;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (jQuery.fn as any)[widgetName] = function (\n        this: JQuery,\n        argument1: unknown,\n        ...args: unknown[]\n    ) {\n        if (!argument1) {\n            return createWidget(this, null);\n        } else if (typeof argument1 === \"object\") {\n            const options = argument1 as unknown;\n            return createWidget(this, options);\n        } else if (typeof argument1 === \"string\" && argument1[0] !== \"_\") {\n            const functionName = argument1;\n\n            if (functionName === \"destroy\") {\n                return destroyWidget(this);\n            } else if (functionName === \"get_widget_class\") {\n                return widgetClass;\n            } else {\n                return callFunction(this, functionName, args);\n            }\n        } else {\n            return undefined;\n        }\n    };\n};\n\nexport default class SimpleWidget<WidgetOptions> {\n    public static register(widgetClass: unknown, widgetName: string): void {\n        register(widgetClass, widgetName);\n    }\n\n    [key: string]: unknown;\n\n    protected static defaults: unknown = {};\n\n    public options: WidgetOptions;\n\n    public $el: JQuery<HTMLElement>;\n\n    constructor(el: HTMLElement, options: WidgetOptions) {\n        this.$el = jQuery(el);\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const defaults = (this.constructor as any)[\"defaults\"] as WidgetOptions;\n        this.options = { ...defaults, ...options };\n    }\n\n    public destroy(): void {\n        this.deinit();\n    }\n\n    public init(): void {\n        //\n    }\n\n    public deinit(): void {\n        //\n    }\n}\n","interface NodeRecordWithChildren extends NodeRecord {\n    children: NodeData[];\n}\n\nexport const isNodeRecordWithChildren = (\n    data: NodeData,\n): data is NodeRecordWithChildren =>\n    typeof data === \"object\" &&\n    \"children\" in data &&\n    data[\"children\"] instanceof Array;\n","import { isNodeRecordWithChildren } from \"./nodeUtils\";\nimport { Position } from \"./position\";\n\ntype IterateCallback = (node: Node, level: number) => boolean;\n\nexport class Node implements INode {\n    public id?: NodeId;\n    public name: string;\n    public children: Node[];\n    public parent: Node | null;\n    public idMapping: Map<NodeId, Node>;\n    public tree?: Node;\n    public nodeClass?: typeof Node;\n    public load_on_demand: boolean;\n    public is_open: boolean;\n    public element: HTMLElement;\n    public is_loading: boolean;\n    public isEmptyFolder: boolean;\n\n    [key: string]: unknown;\n\n    constructor(\n        nodeData: NodeData | null = null,\n        isRoot = false,\n        nodeClass = Node,\n    ) {\n        this.name = \"\";\n        this.load_on_demand = false;\n\n        this.isEmptyFolder =\n            nodeData != null &&\n            isNodeRecordWithChildren(nodeData) &&\n            nodeData.children.length === 0;\n\n        this.setData(nodeData);\n\n        this.children = [];\n        this.parent = null;\n\n        if (isRoot) {\n            this.idMapping = new Map<NodeId, Node>();\n            this.tree = this;\n            this.nodeClass = nodeClass;\n        }\n    }\n\n    /*\n    Set the data of this node.\n\n    setData(string): set the name of the node\n    setData(object): set attributes of the node\n\n    Examples:\n        setData('node1')\n\n        setData({ name: 'node1', id: 1});\n\n        setData({ name: 'node2', id: 2, color: 'green'});\n\n    * This is an internal function; it is not in the docs\n    * Does not remove existing node values\n    */\n    public setData(o: NodeData | null): void {\n        if (!o) {\n            return;\n        } else if (typeof o === \"string\") {\n            this.name = o;\n        } else if (typeof o === \"object\") {\n            for (const key in o) {\n                if (Object.prototype.hasOwnProperty.call(o, key)) {\n                    const value = o[key];\n\n                    if (key === \"label\" || key === \"name\") {\n                        // You can use the 'label' key instead of 'name'; this is a legacy feature\n                        if (typeof value === \"string\") {\n                            this.name = value;\n                        }\n                    } else if (key !== \"children\" && key !== \"parent\") {\n                        // You can't update the children or the parent using this function\n                        this[key] = value;\n                    }\n                }\n            }\n        }\n    }\n\n    /*\n    Create tree from data.\n\n    Structure of data is:\n    [\n        {\n            name: 'node1',\n            children: [\n                { name: 'child1' },\n                { name: 'child2' }\n            ]\n        },\n        {\n            name: 'node2'\n        }\n    ]\n    */\n    public loadFromData(data: NodeData[]): Node {\n        this.removeChildren();\n\n        for (const childData of data) {\n            const node = this.createNode(childData);\n            this.addChild(node);\n\n            if (isNodeRecordWithChildren(childData)) {\n                node.loadFromData(childData.children);\n            }\n        }\n\n        return this;\n    }\n\n    /*\n    Add child.\n\n    tree.addChild(\n        new Node('child1')\n    );\n    */\n    public addChild(node: Node): void {\n        this.children.push(node);\n        node.setParent(this);\n    }\n\n    /*\n    Add child at position. Index starts at 0.\n\n    tree.addChildAtPosition(\n        new Node('abc'),\n        1\n    );\n    */\n    public addChildAtPosition(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        node.setParent(this);\n    }\n\n    /*\n    Remove child. This also removes the children of the node.\n\n    tree.removeChild(tree.children[0]);\n    */\n    public removeChild(node: Node): void {\n        // remove children from the index\n        node.removeChildren();\n\n        this.doRemoveChild(node);\n    }\n\n    /*\n    Get child index.\n\n    var index = getChildIndex(node);\n    */\n    public getChildIndex(node: Node): number {\n        return this.children.indexOf(node);\n    }\n\n    /*\n    Does the tree have children?\n\n    if (tree.hasChildren()) {\n        //\n    }\n    */\n    public hasChildren(): boolean {\n        return this.children.length !== 0;\n    }\n\n    public isFolder(): boolean {\n        return this.hasChildren() || this.load_on_demand;\n    }\n\n    /*\n    Iterate over all the nodes in the tree.\n\n    Calls callback with (node, level).\n\n    The callback must return true to continue the iteration on current node.\n\n    tree.iterate(\n        function(node, level) {\n           console.log(node.name);\n\n           // stop iteration after level 2\n           return (level <= 2);\n        }\n    );\n\n    */\n    public iterate(callback: IterateCallback): void {\n        const _iterate = (node: Node, level: number): void => {\n            if (node.children) {\n                for (const child of node.children) {\n                    const result = callback(child, level);\n\n                    if (result && child.hasChildren()) {\n                        _iterate(child, level + 1);\n                    }\n                }\n            }\n        };\n\n        _iterate(this, 0);\n    }\n\n    /*\n    Move node relative to another node.\n\n    Argument position: Position.BEFORE, Position.AFTER or Position.Inside\n\n    // move node1 after node2\n    tree.moveNode(node1, node2, Position.AFTER);\n    */\n    public moveNode(\n        movedNode: Node,\n        targetNode: Node,\n        position: Position,\n    ): boolean {\n        if (!movedNode.parent || movedNode.isParentOf(targetNode)) {\n            // - Node is parent of target node\n            // - Or, parent is empty\n            return false;\n        } else {\n            movedNode.parent.doRemoveChild(movedNode);\n\n            switch (position) {\n                case Position.After: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode) + 1,\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Before: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode),\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Inside: {\n                    // move inside as first child\n                    targetNode.addChildAtPosition(movedNode, 0);\n                    return true;\n                }\n\n                default:\n                    return false;\n            }\n        }\n    }\n\n    /*\n    Get the tree as data.\n    */\n    public getData(includeParent = false): NodeRecord[] {\n        const getDataFromNodes = (nodes: Node[]): Record<string, unknown>[] => {\n            return nodes.map((node) => {\n                const tmpNode: Record<string, unknown> = {};\n\n                for (const k in node) {\n                    if (\n                        [\n                            \"parent\",\n                            \"children\",\n                            \"element\",\n                            \"idMapping\",\n                            \"load_on_demand\",\n                            \"nodeClass\",\n                            \"tree\",\n                            \"isEmptyFolder\",\n                        ].indexOf(k) === -1 &&\n                        Object.prototype.hasOwnProperty.call(node, k)\n                    ) {\n                        const v = node[k];\n                        tmpNode[k] = v;\n                    }\n                }\n\n                if (node.hasChildren()) {\n                    tmpNode[\"children\"] = getDataFromNodes(node.children);\n                }\n\n                return tmpNode;\n            });\n        };\n\n        if (includeParent) {\n            return getDataFromNodes([this]);\n        } else {\n            return getDataFromNodes(this.children);\n        }\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.getNodeByCallback((node: Node) => node.name === name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        const node = this.getNodeByCallback((n: Node) => n.name === name);\n\n        if (!node) {\n            throw `Node with name ${name} not found`;\n        }\n\n        return node;\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        let result: Node | null = null;\n\n        this.iterate((node: Node) => {\n            if (result) {\n                return false;\n            } else if (callback(node)) {\n                result = node;\n                return false;\n            } else {\n                return true;\n            }\n        });\n\n        return result;\n    }\n\n    public addAfter(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex + 1);\n\n            node.loadChildrenFromData(nodeInfo);\n            return node;\n        }\n    }\n\n    public addBefore(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex);\n\n            node.loadChildrenFromData(nodeInfo);\n            return node;\n        }\n    }\n\n    public addParent(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const newParent = this.createNode(nodeInfo);\n\n            if (this.tree) {\n                newParent.setParent(this.tree);\n            }\n            const originalParent = this.parent;\n\n            for (const child of originalParent.children) {\n                newParent.addChild(child);\n            }\n\n            originalParent.children = [];\n            originalParent.addChild(newParent);\n            return newParent;\n        }\n    }\n\n    public remove(): void {\n        if (this.parent) {\n            this.parent.removeChild(this);\n            this.parent = null;\n        }\n    }\n\n    public append(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChild(node);\n\n        node.loadChildrenFromData(nodeInfo);\n        return node;\n    }\n\n    public prepend(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChildAtPosition(node, 0);\n\n        node.loadChildrenFromData(nodeInfo);\n        return node;\n    }\n\n    public isParentOf(node: Node): boolean {\n        let parent = node.parent;\n\n        while (parent) {\n            if (parent === this) {\n                return true;\n            }\n\n            parent = parent.parent;\n        }\n\n        return false;\n    }\n\n    public getLevel(): number {\n        let level = 0;\n        let node: Node = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n        while (node.parent) {\n            level += 1;\n            node = node.parent;\n        }\n\n        return level;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.idMapping.get(nodeId) || null;\n    }\n\n    public addNodeToIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.set(node.id, node);\n        }\n    }\n\n    public removeNodeFromIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.delete(node.id);\n        }\n    }\n\n    public removeChildren(): void {\n        this.iterate((child: Node) => {\n            this.tree?.removeNodeFromIndex(child);\n            return true;\n        });\n\n        this.children = [];\n    }\n\n    public getPreviousSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousIndex = this.parent.getChildIndex(this) - 1;\n            if (previousIndex >= 0) {\n                return this.parent.children[previousIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNextSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const nextIndex = this.parent.getChildIndex(this) + 1;\n            if (nextIndex < this.parent.children.length) {\n                return this.parent.children[nextIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.filter((node: Node) => node[key] === value);\n    }\n\n    public filter(f: (node: Node) => boolean): Node[] {\n        const result: Node[] = [];\n\n        this.iterate((node: Node) => {\n            if (f(node)) {\n                result.push(node);\n            }\n\n            return true;\n        });\n\n        return result;\n    }\n\n    public getNextNode(includeChildren = true): Node | null {\n        if (includeChildren && this.hasChildren()) {\n            return this.children[0] || null;\n        } else if (!this.parent) {\n            return null;\n        } else {\n            const nextSibling = this.getNextSibling();\n\n            if (nextSibling) {\n                return nextSibling;\n            } else {\n                return this.parent.getNextNode(false);\n            }\n        }\n    }\n\n    public getNextVisibleNode(): Node | null {\n        if (this.hasChildren() && this.is_open) {\n            // First child\n            return this.children[0] || null;\n        } else {\n            if (!this.parent) {\n                return null;\n            } else {\n                const nextSibling = this.getNextSibling();\n                if (nextSibling) {\n                    // Next sibling\n                    return nextSibling;\n                } else {\n                    // Next node of parent\n                    return this.parent.getNextNode(false);\n                }\n            }\n        }\n    }\n\n    public getPreviousNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (previousSibling.hasChildren()) {\n                return previousSibling.getLastChild();\n            } else {\n                return previousSibling;\n            }\n        }\n    }\n\n    public getPreviousVisibleNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (\n                !previousSibling.hasChildren() ||\n                !previousSibling.is_open\n            ) {\n                // Previous sibling\n                return previousSibling;\n            } else {\n                // Last child of previous sibling\n                return previousSibling.getLastChild();\n            }\n        }\n    }\n\n    public getParent(): Node | null {\n        // Return parent except if it is the root node\n        if (!this.parent) {\n            return null;\n        } else if (!this.parent.parent) {\n            // Root node -> null\n            return null;\n        } else {\n            return this.parent;\n        }\n    }\n\n    public getLastChild(): Node | null {\n        if (!this.hasChildren()) {\n            return null;\n        } else {\n            const lastChild = this.children[this.children.length - 1];\n\n            if (!lastChild) {\n                return null;\n            }\n\n            if (!(lastChild.hasChildren() && lastChild.is_open)) {\n                return lastChild;\n            } else {\n                return lastChild?.getLastChild();\n            }\n        }\n    }\n\n    // Init Node from data without making it the root of the tree\n    public initFromData(data: NodeData): void {\n        const addNode = (nodeData: NodeData): void => {\n            this.setData(nodeData);\n\n            if (\n                isNodeRecordWithChildren(nodeData) &&\n                nodeData.children.length\n            ) {\n                addChildren(nodeData.children);\n            }\n        };\n\n        const addChildren = (childrenData: NodeData[]): void => {\n            for (const child of childrenData) {\n                const node = this.createNode();\n                node.initFromData(child);\n                this.addChild(node);\n            }\n        };\n\n        addNode(data);\n    }\n\n    private setParent(parent: Node): void {\n        this.parent = parent;\n        this.tree = parent.tree;\n        this.tree?.addNodeToIndex(this);\n    }\n\n    private doRemoveChild(node: Node): void {\n        this.children.splice(this.getChildIndex(node), 1);\n        this.tree?.removeNodeFromIndex(node);\n    }\n\n    private getNodeClass(): typeof Node {\n        return this.nodeClass || this?.tree?.nodeClass || Node;\n    }\n\n    private createNode(nodeData?: NodeData): Node {\n        const nodeClass = this.getNodeClass();\n        return new nodeClass(nodeData);\n    }\n\n    // Load children data from nodeInfo if it has children\n    private loadChildrenFromData(nodeInfo: NodeData) {\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            this.loadFromData(nodeInfo.children);\n        }\n    }\n}\n","import { DropHint } from \"../dragAndDropHandler/types\";\n\nclass BorderDropHint implements DropHint {\n    private hint?: HTMLElement;\n\n    constructor(element: HTMLElement, scrollLeft: number) {\n        const div = element.querySelector(\":scope > .jqtree-element\");\n\n        if (!div) {\n            this.hint = undefined;\n            return;\n        }\n\n        const width = Math.max(element.offsetWidth + scrollLeft - 4, 0);\n        const height = Math.max(element.clientHeight - 4, 0);\n\n        const hint = document.createElement(\"span\");\n        hint.className = \"jqtree-border\";\n        hint.style.width = `${width}px`;\n        hint.style.height = `${height}px`;\n\n        this.hint = hint;\n\n        div.append(this.hint);\n    }\n\n    public remove(): void {\n        this.hint?.remove();\n    }\n}\n\nexport default BorderDropHint;\n","import { Node } from \"../node\";\nimport { Position } from \"../position\";\nimport { DropHint } from \"../dragAndDropHandler/types\";\n\nclass GhostDropHint implements DropHint {\n    private element: HTMLElement;\n    private node: Node;\n    private ghost: HTMLElement;\n\n    constructor(node: Node, element: HTMLElement, position: Position) {\n        this.element = element;\n        this.node = node;\n        this.ghost = this.createGhostElement();\n\n        if (position === Position.After) {\n            this.moveAfter();\n        } else if (position === Position.Before) {\n            this.moveBefore();\n        } else if (position === Position.Inside) {\n            if (node.isFolder() && node.is_open) {\n                this.moveInsideOpenFolder();\n            } else {\n                this.moveInside();\n            }\n        }\n    }\n\n    public remove(): void {\n        this.ghost.remove();\n    }\n\n    private moveAfter(): void {\n        this.element.after(this.ghost);\n    }\n\n    private moveBefore(): void {\n        this.element.before(this.ghost);\n    }\n\n    private moveInsideOpenFolder(): void {\n        const childElement = this.node.children[0]?.element;\n\n        if (childElement) {\n            childElement.before(this.ghost);\n        }\n    }\n\n    private moveInside(): void {\n        this.element.after(this.ghost);\n        this.ghost.classList.add(\"jqtree-inside\");\n    }\n\n    private createGhostElement() {\n        const ghost = document.createElement(\"li\");\n        ghost.className = \"jqtree_common jqtree-ghost\";\n\n        const circleSpan = document.createElement(\"span\");\n        circleSpan.className = \"jqtree_common jqtree-circle\";\n        ghost.append(circleSpan);\n\n        const lineSpan = document.createElement(\"span\");\n        lineSpan.className = \"jqtree_common jqtree-line\";\n        ghost.append(lineSpan);\n\n        return ghost;\n    }\n}\n\nexport default GhostDropHint;\n","import { Node } from \"../node\";\nimport { Position } from \"../position\";\nimport { DropHint } from \"../dragAndDropHandler/types\";\nimport BorderDropHint from \"./borderDropHint\";\nimport GhostDropHint from \"./ghostDropHint\";\nimport { GetScrollLeft } from \"../jqtreeMethodTypes\";\n\nexport interface NodeElementParams {\n    getScrollLeft: GetScrollLeft;\n    node: Node;\n    tabIndex?: number;\n    $treeElement: JQuery<HTMLElement>;\n}\n\nclass NodeElement {\n    public node: Node;\n    public element: HTMLElement;\n    private getScrollLeft: GetScrollLeft;\n    private tabIndex?: number;\n    private $treeElement: JQuery<HTMLElement>;\n\n    constructor({\n        getScrollLeft,\n        node,\n        tabIndex,\n        $treeElement,\n    }: NodeElementParams) {\n        this.getScrollLeft = getScrollLeft;\n        this.tabIndex = tabIndex;\n        this.$treeElement = $treeElement;\n\n        this.init(node);\n    }\n\n    public init(node: Node): void {\n        this.node = node;\n\n        if (!node.element) {\n            const element = this.$treeElement.get(0);\n\n            if (element) {\n                node.element = element;\n            }\n        }\n\n        if (node.element) {\n            this.element = node.element;\n        }\n    }\n\n    public addDropHint(position: number): DropHint {\n        if (this.mustShowBorderDropHint(position)) {\n            return new BorderDropHint(this.element, this.getScrollLeft());\n        } else {\n            return new GhostDropHint(this.node, this.element, position);\n        }\n    }\n\n    public select(mustSetFocus: boolean): void {\n        this.element.classList.add(\"jqtree-selected\");\n\n        const titleSpan = this.getTitleSpan();\n        const tabIndex = this.tabIndex;\n\n        // Check for null or undefined\n        if (tabIndex != null) {\n            titleSpan.setAttribute(\"tabindex\", tabIndex.toString());\n        }\n\n        titleSpan.setAttribute(\"aria-selected\", \"true\");\n\n        if (mustSetFocus) {\n            titleSpan.focus();\n        }\n    }\n\n    public deselect(): void {\n        this.element.classList.remove(\"jqtree-selected\");\n\n        const titleSpan = this.getTitleSpan();\n        titleSpan.removeAttribute(\"tabindex\");\n        titleSpan.setAttribute(\"aria-selected\", \"false\");\n\n        titleSpan.blur();\n    }\n\n    protected getUl(): HTMLUListElement {\n        return this.element.querySelector(\":scope > ul\") as HTMLUListElement;\n    }\n\n    protected getTitleSpan(): HTMLSpanElement {\n        return this.element.querySelector(\n            \":scope > .jqtree-element > span.jqtree-title\",\n        ) as HTMLSpanElement;\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return position === Position.Inside;\n    }\n}\n\nexport default NodeElement;\n","import { Position } from \"../position\";\nimport NodeElement, { NodeElementParams } from \"./index\";\nimport { OnFinishOpenNode, TriggerEvent } from \"../jqtreeMethodTypes\";\n\ninterface FolderElementParams extends NodeElementParams {\n    closedIconElement?: HTMLElement | Text;\n    openedIconElement?: HTMLElement | Text;\n    triggerEvent: TriggerEvent;\n}\n\nclass FolderElement extends NodeElement {\n    private closedIconElement?: HTMLElement | Text;\n    private openedIconElement?: HTMLElement | Text;\n    private triggerEvent: TriggerEvent;\n\n    constructor({\n        closedIconElement,\n        getScrollLeft,\n        node,\n        openedIconElement,\n        tabIndex,\n        $treeElement,\n        triggerEvent,\n    }: FolderElementParams) {\n        super({\n            getScrollLeft,\n            node,\n            tabIndex,\n            $treeElement,\n        });\n\n        this.closedIconElement = closedIconElement;\n        this.openedIconElement = openedIconElement;\n        this.triggerEvent = triggerEvent;\n    }\n\n    public open(\n        onFinished: OnFinishOpenNode | undefined,\n        slide = true,\n        animationSpeed: JQuery.Duration = \"fast\",\n    ): void {\n        if (this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = true;\n\n        const button = this.getButton();\n        button.classList.remove(\"jqtree-closed\");\n        button.innerHTML = \"\";\n\n        const openedIconElement = this.openedIconElement;\n\n        if (openedIconElement) {\n            const icon = openedIconElement.cloneNode(true);\n            button.appendChild(icon);\n        }\n\n        const doOpen = (): void => {\n            this.element.classList.remove(\"jqtree-closed\");\n\n            const titleSpan = this.getTitleSpan();\n            titleSpan.setAttribute(\"aria-expanded\", \"true\");\n\n            if (onFinished) {\n                onFinished(this.node);\n            }\n\n            this.triggerEvent(\"tree.open\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            jQuery(this.getUl()).slideDown(animationSpeed, doOpen);\n        } else {\n            jQuery(this.getUl()).show();\n            doOpen();\n        }\n    }\n\n    public close(\n        slide = true,\n        animationSpeed: JQuery.Duration | undefined = \"fast\",\n    ): void {\n        if (!this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = false;\n\n        const button = this.getButton();\n        button.classList.add(\"jqtree-closed\");\n        button.innerHTML = \"\";\n\n        const closedIconElement = this.closedIconElement;\n\n        if (closedIconElement) {\n            const icon = closedIconElement.cloneNode(true);\n            button.appendChild(icon);\n        }\n\n        const doClose = (): void => {\n            this.element.classList.add(\"jqtree-closed\");\n\n            const titleSpan = this.getTitleSpan();\n            titleSpan.setAttribute(\"aria-expanded\", \"false\");\n\n            this.triggerEvent(\"tree.close\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            jQuery(this.getUl()).slideUp(animationSpeed, doClose);\n        } else {\n            jQuery(this.getUl()).hide();\n            doClose();\n        }\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return !this.node.is_open && position === Position.Inside;\n    }\n\n    private getButton(): HTMLLinkElement {\n        return this.element.querySelector(\n            \":scope > .jqtree-element > a.jqtree-toggler\",\n        ) as HTMLLinkElement;\n    }\n}\n\nexport default FolderElement;\n","import __version__ from \"./version\";\nimport { DragAndDropHandler } from \"./dragAndDropHandler\";\nimport ElementsRenderer from \"./elementsRenderer\";\nimport DataLoader, { HandleFinishedLoading } from \"./dataLoader\";\nimport KeyHandler from \"./keyHandler\";\nimport MouseHandler from \"./mouseHandler\";\nimport { PositionInfo } from \"./mouseUtils\";\nimport SaveStateHandler, { SavedState } from \"./saveStateHandler\";\nimport ScrollHandler from \"./scrollHandler\";\nimport SelectNodeHandler from \"./selectNodeHandler\";\nimport SimpleWidget from \"./simple.widget\";\nimport { getOffsetTop, isFunction } from \"./util\";\nimport { Node } from \"./node\";\nimport { getPosition } from \"./position\";\nimport NodeElement from \"./nodeElement\";\nimport FolderElement from \"./nodeElement/folderElement\";\nimport { OnFinishOpenNode } from \"./jqtreeMethodTypes\";\nimport { JQTreeOptions } from \"./jqtreeOptions\";\n\ninterface SelectNodeOptions {\n    mustToggle?: boolean;\n    mustSetFocus?: boolean;\n}\n\nconst NODE_PARAM_IS_EMPTY = \"Node parameter is empty\";\nconst PARAM_IS_EMPTY = \"Parameter is empty: \";\n\nexport class JqTreeWidget extends SimpleWidget<JQTreeOptions> {\n    protected static defaults: JQTreeOptions = {\n        animationSpeed: \"fast\",\n        autoEscape: true,\n        autoOpen: false, // true / false / int (open n levels starting at 0)\n        buttonLeft: true,\n        // The symbol to use for a closed node - ► BLACK RIGHT-POINTING POINTER\n        // http://www.fileformat.info/info/unicode/char/25ba/index.htm\n        closedIcon: undefined,\n        data: undefined,\n        dataFilter: undefined,\n        dataUrl: undefined,\n        dragAndDrop: false,\n        keyboardSupport: true,\n        nodeClass: Node,\n        onCanMove: undefined, // Can this node be moved?\n        onCanMoveTo: undefined, // Can this node be moved to this position? function(moved_node, target_node, position)\n        onCanSelectNode: undefined,\n        onCreateLi: undefined,\n        onDragMove: undefined,\n        onDragStop: undefined,\n        onGetStateFromStorage: undefined,\n        onIsMoveHandle: undefined,\n        onLoadFailed: undefined,\n        onLoading: undefined,\n        onSetStateFromStorage: undefined,\n        openedIcon: \"&#x25bc;\",\n        openFolderDelay: 500, // The delay for opening a folder during drag and drop; the value is in milliseconds\n        // The symbol to use for an open node - ▼ BLACK DOWN-POINTING TRIANGLE\n        // http://www.fileformat.info/info/unicode/char/25bc/index.htm\n        rtl: undefined, // right-to-left support; true / false (default)\n        saveState: false, // true / false / string (cookie name)\n        selectable: true,\n        showEmptyFolder: false,\n        slide: true, // must display slide animation?\n        startDndDelay: 300, // The delay for starting dnd (in milliseconds)\n        tabIndex: 0,\n        useContextMenu: true,\n    };\n\n    private element: JQuery;\n    private isInitialized: boolean;\n    private tree: Node;\n\n    private dataLoader: DataLoader;\n    private dndHandler: DragAndDropHandler;\n    private keyHandler: KeyHandler;\n    private mouseHandler: MouseHandler;\n    private renderer: ElementsRenderer;\n    private saveStateHandler: SaveStateHandler;\n    private scrollHandler: ScrollHandler;\n    private selectNodeHandler: SelectNodeHandler;\n\n    public toggle(node: Node, slideParam: null | boolean = null): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.is_open) {\n            this.closeNode(node, slide);\n        } else {\n            this.openNode(node, slide);\n        }\n\n        return this.element;\n    }\n\n    public getTree(): Node {\n        return this.tree;\n    }\n\n    public selectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): JQuery {\n        this.doSelectNode(node, optionsParam);\n        return this.element;\n    }\n\n    public getSelectedNode(): Node | false {\n        return this.selectNodeHandler.getSelectedNode();\n    }\n\n    public toJson(): string {\n        return JSON.stringify(this.tree.getData());\n    }\n\n    public loadData(data: NodeData[], parentNode: Node | null): JQuery {\n        this.doLoadData(data, parentNode);\n        return this.element;\n    }\n\n    /*\n    signatures:\n    - loadDataFromUrl(url, parent_node=null, on_finished=null)\n        loadDataFromUrl('/my_data');\n        loadDataFromUrl('/my_data', node1);\n        loadDataFromUrl('/my_data', node1, function() { console.log('finished'); });\n        loadDataFromUrl('/my_data', null, function() { console.log('finished'); });\n\n    - loadDataFromUrl(parent_node=null, on_finished=null)\n        loadDataFromUrl();\n        loadDataFromUrl(node1);\n        loadDataFromUrl(null, function() { console.log('finished'); });\n        loadDataFromUrl(node1, function() { console.log('finished'); });\n    */\n    public loadDataFromUrl(\n        param1: string | null | Node,\n        param2?: Node | null | HandleFinishedLoading,\n        param3?: HandleFinishedLoading,\n    ): JQuery {\n        if (typeof param1 === \"string\") {\n            // first parameter is url\n            this.doLoadDataFromUrl(\n                param1,\n                param2 as Node | null,\n                param3 ?? null,\n            );\n        } else {\n            // first parameter is not url\n            this.doLoadDataFromUrl(\n                null,\n                param1,\n                param2 as HandleFinishedLoading | null,\n            );\n        }\n\n        return this.element;\n    }\n\n    public reload(onFinished: HandleFinishedLoading | null): JQuery {\n        this.doLoadDataFromUrl(null, null, onFinished);\n        return this.element;\n    }\n\n    public refresh(): JQuery {\n        this.refreshElements(null);\n        return this.element;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.tree.getNodeById(nodeId);\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.tree.getNodeByName(name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        return this.tree.getNodeByNameMustExist(name);\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.tree.getNodesByProperty(key, value);\n    }\n\n    public getNodeByHtmlElement(\n        inputElement: HTMLElement | JQuery<HTMLElement>,\n    ): Node | null {\n        const element =\n            inputElement instanceof HTMLElement\n                ? inputElement\n                : inputElement[0];\n\n        if (!element) {\n            return null;\n        }\n\n        return this.getNode(element);\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        return this.tree.getNodeByCallback(callback);\n    }\n\n    public openNode(\n        node: Node,\n        param1?: boolean | OnFinishOpenNode,\n        param2?: OnFinishOpenNode,\n    ): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const parseParams = (): [boolean, OnFinishOpenNode | undefined] => {\n            let onFinished: OnFinishOpenNode | null;\n            let slide: boolean | null;\n\n            if (isFunction(param1)) {\n                onFinished = param1 as OnFinishOpenNode;\n                slide = null;\n            } else {\n                slide = param1 as boolean;\n                onFinished = param2 as OnFinishOpenNode;\n            }\n\n            if (slide == null) {\n                slide = this.options.slide ?? false;\n            }\n\n            return [slide, onFinished];\n        };\n\n        const [slide, onFinished] = parseParams();\n\n        this.openNodeInternal(node, slide, onFinished);\n        return this.element;\n    }\n\n    public closeNode(node: Node, slideParam?: null | boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            this.createFolderElement(node).close(\n                slide,\n                this.options.animationSpeed,\n            );\n\n            this.saveState();\n        }\n\n        return this.element;\n    }\n\n    public isDragging(): boolean {\n        return this.dndHandler.isDragging;\n    }\n\n    public refreshHitAreas(): JQuery {\n        this.dndHandler.refresh();\n        return this.element;\n    }\n\n    public addNodeAfter(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        const newNode = existingNode.addAfter(newNodeInfo);\n\n        if (newNode) {\n            this.refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addNodeBefore(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addBefore(newNodeInfo);\n\n        if (newNode) {\n            this.refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addParentNode(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addParent(newNodeInfo);\n\n        if (newNode) {\n            this.refreshElements(newNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public removeNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!node.parent) {\n            throw Error(\"Node has no parent\");\n        }\n\n        this.selectNodeHandler.removeFromSelection(node, true); // including children\n\n        const parent = node.parent;\n        node.remove();\n        this.refreshElements(parent);\n\n        return this.element;\n    }\n\n    public appendNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam || this.tree;\n\n        const node = parentNode.append(newNodeInfo);\n\n        this.refreshElements(parentNode);\n\n        return node;\n    }\n\n    public prependNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam ?? this.tree;\n\n        const node = parentNode.prepend(newNodeInfo);\n\n        this.refreshElements(parentNode);\n\n        return node;\n    }\n\n    public updateNode(node: Node, data: NodeData): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const idIsChanged =\n            typeof data === \"object\" && data.id && data.id !== node.id;\n\n        if (idIsChanged) {\n            this.tree.removeNodeFromIndex(node);\n        }\n\n        node.setData(data);\n\n        if (idIsChanged) {\n            this.tree.addNodeToIndex(node);\n        }\n\n        if (\n            typeof data === \"object\" &&\n            data[\"children\"] &&\n            data[\"children\"] instanceof Array\n        ) {\n            node.removeChildren();\n\n            if (data.children.length) {\n                node.loadFromData(data.children as Node[]);\n            }\n        }\n\n        this.refreshElements(node);\n\n        return this.element;\n    }\n\n    private isSelectedNodeInSubtree(subtree: Node): boolean {\n        const selectedNode = this.getSelectedNode();\n\n        if (!selectedNode) {\n            return false;\n        } else {\n            return subtree === selectedNode || subtree.isParentOf(selectedNode);\n        }\n    }\n\n    public moveNode(node: Node, targetNode: Node, position: string): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!targetNode) {\n            throw Error(PARAM_IS_EMPTY + \"targetNode\");\n        }\n\n        const positionIndex = getPosition(position);\n\n        if (positionIndex !== undefined) {\n            this.tree.moveNode(node, targetNode, positionIndex);\n            this.refreshElements(null);\n        }\n\n        return this.element;\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        return this.saveStateHandler.getStateFromStorage();\n    }\n\n    public addToSelection(node: Node, mustSetFocus?: boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.addToSelection(node);\n        this.openParents(node);\n\n        this.getNodeElementForNode(node).select(\n            mustSetFocus === undefined ? true : mustSetFocus,\n        );\n\n        this.saveState();\n\n        return this.element;\n    }\n\n    public getSelectedNodes(): Node[] {\n        return this.selectNodeHandler.getSelectedNodes();\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        return this.selectNodeHandler.isNodeSelected(node);\n    }\n\n    public removeFromSelection(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.removeFromSelection(node);\n\n        this.getNodeElementForNode(node).deselect();\n        this.saveState();\n\n        return this.element;\n    }\n\n    public scrollToNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const top =\n            getOffsetTop(node.element) -\n            getOffsetTop(this.$el.get(0) as HTMLElement);\n\n        this.scrollHandler.scrollToY(top);\n\n        return this.element;\n    }\n\n    public getState(): SavedState | null {\n        return this.saveStateHandler.getState();\n    }\n\n    public setState(state: SavedState): JQuery {\n        this.saveStateHandler.setInitialState(state);\n        this.refreshElements(null);\n\n        return this.element;\n    }\n\n    public setOption(option: string, value: unknown): JQuery {\n        (this.options as unknown as Record<string, unknown>)[option] = value;\n        return this.element;\n    }\n\n    public moveDown(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveDown(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public moveUp(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveUp(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public getVersion(): string {\n        return __version__;\n    }\n\n    private openNodeInternal(\n        node: Node,\n        slide = true,\n        onFinished?: OnFinishOpenNode,\n    ): void {\n        const doOpenNode = (\n            _node: Node,\n            _slide: boolean,\n            _onFinished?: OnFinishOpenNode,\n        ): void => {\n            const folderElement = this.createFolderElement(_node);\n            folderElement.open(\n                _onFinished,\n                _slide,\n                this.options.animationSpeed,\n            );\n        };\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            if (node.load_on_demand) {\n                this.loadFolderOnDemand(node, slide, onFinished);\n            } else {\n                let parent = node.parent;\n\n                while (parent) {\n                    // nb: do not open root element\n                    if (parent.parent) {\n                        doOpenNode(parent, false);\n                    }\n                    parent = parent.parent;\n                }\n\n                doOpenNode(node, slide, onFinished);\n                this.saveState();\n            }\n        }\n    }\n\n    /*\n    Redraw the tree or part of the tree.\n     from_node: redraw this subtree\n    */\n    private refreshElements(fromNode: Node | null): void {\n        const mustSetFocus = this.isFocusOnTree();\n        const mustSelect = fromNode\n            ? this.isSelectedNodeInSubtree(fromNode)\n            : false;\n\n        this.renderer.render(fromNode);\n\n        if (mustSelect) {\n            this.selectCurrentNode(mustSetFocus);\n        }\n\n        this.triggerEvent(\"tree.refresh\");\n    }\n\n    private getNodeElementForNode(node: Node): NodeElement {\n        if (node.isFolder()) {\n            return this.createFolderElement(node);\n        } else {\n            return this.createNodeElement(node);\n        }\n    }\n\n    private getNodeElement(element: HTMLElement): NodeElement | null {\n        const node = this.getNode(element);\n        if (node) {\n            return this.getNodeElementForNode(node);\n        } else {\n            return null;\n        }\n    }\n\n    public init(): void {\n        super.init();\n\n        this.element = this.$el;\n        this.isInitialized = false;\n\n        this.options.rtl = this.getRtlOption();\n\n        if (this.options.closedIcon == null) {\n            this.options.closedIcon = this.getDefaultClosedIcon();\n        }\n\n        this.connectHandlers();\n\n        this.initData();\n    }\n\n    public deinit(): void {\n        this.element.empty();\n        this.element.off();\n\n        this.keyHandler.deinit();\n        this.mouseHandler.deinit();\n\n        this.tree = new Node({}, true);\n\n        super.deinit();\n    }\n\n    private triggerEvent(\n        eventName: string,\n        values?: Record<string, unknown>,\n    ): JQuery.Event {\n        const event = jQuery.Event(eventName, values);\n        this.element.trigger(event);\n        return event;\n    }\n\n    private mouseCapture(positionInfo: PositionInfo): boolean | null {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseCapture(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    private mouseStart(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStart(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    private mouseDrag(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            const result = this.dndHandler.mouseDrag(positionInfo);\n\n            this.scrollHandler.checkScrolling(positionInfo);\n            return result;\n        } else {\n            return false;\n        }\n    }\n\n    private mouseStop(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            this.scrollHandler.stopScrolling();\n            return this.dndHandler.mouseStop(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    private initData(): void {\n        if (this.options.data) {\n            this.doLoadData(this.options.data, null);\n        } else {\n            const dataUrl = this.getDataUrlInfo(null);\n\n            if (dataUrl) {\n                this.doLoadDataFromUrl(null, null, null);\n            } else {\n                this.doLoadData([], null);\n            }\n        }\n    }\n\n    private getDataUrlInfo(node: Node | null): JQuery.AjaxSettings | null {\n        const dataUrl =\n            this.options.dataUrl || (this.element.data(\"url\") as string | null);\n\n        const getUrlFromString = (url: string): JQuery.AjaxSettings => {\n            const urlInfo: JQuery.AjaxSettings = { url };\n\n            setUrlInfoData(urlInfo);\n\n            return urlInfo;\n        };\n\n        const setUrlInfoData = (urlInfo: JQuery.AjaxSettings): void => {\n            if (node?.id) {\n                // Load on demand of a subtree; add node parameter\n                const data = { node: node.id };\n                urlInfo[\"data\"] = data;\n            } else {\n                // Add selected_node parameter\n                const selectedNodeId = this.getNodeIdToBeSelected();\n                if (selectedNodeId) {\n                    const data = { selected_node: selectedNodeId };\n                    urlInfo[\"data\"] = data;\n                }\n            }\n        };\n\n        if (typeof dataUrl === \"function\") {\n            return dataUrl(node);\n        } else if (typeof dataUrl === \"string\") {\n            return getUrlFromString(dataUrl);\n        } else if (dataUrl && typeof dataUrl === \"object\") {\n            setUrlInfoData(dataUrl);\n            return dataUrl;\n        } else {\n            return null;\n        }\n    }\n\n    private getNodeIdToBeSelected(): NodeId | null {\n        if (this.options.saveState) {\n            return this.saveStateHandler.getNodeIdToBeSelected();\n        } else {\n            return null;\n        }\n    }\n\n    private initTree(data: NodeData[]): void {\n        const doInit = (): void => {\n            if (!this.isInitialized) {\n                this.isInitialized = true;\n                this.triggerEvent(\"tree.init\");\n            }\n        };\n\n        if (!this.options.nodeClass) {\n            return;\n        }\n\n        this.tree = new this.options.nodeClass(\n            null,\n            true,\n            this.options.nodeClass,\n        );\n\n        this.selectNodeHandler.clear();\n\n        this.tree.loadFromData(data);\n\n        const mustLoadOnDemand = this.setInitialState();\n\n        this.refreshElements(null);\n\n        if (!mustLoadOnDemand) {\n            doInit();\n        } else {\n            // Load data on demand and then init the tree\n            this.setInitialStateOnDemand(doInit);\n        }\n    }\n\n    // Set initial state, either by restoring the state or auto-opening nodes\n    // result: must load nodes on demand?\n    private setInitialState(): boolean {\n        const restoreState = (): [boolean, boolean] => {\n            // result: is state restored, must load on demand?\n            if (!this.options.saveState) {\n                return [false, false];\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return [false, false];\n                } else {\n                    const mustLoadOnDemand =\n                        this.saveStateHandler.setInitialState(state);\n\n                    // return true: the state is restored\n                    return [true, mustLoadOnDemand];\n                }\n            }\n        };\n\n        const autoOpenNodes = (): boolean => {\n            // result: must load on demand?\n            if (this.options.autoOpen === false) {\n                return false;\n            }\n\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let mustLoadOnDemand = false;\n\n            this.tree.iterate((node: Node, level: number) => {\n                if (node.load_on_demand) {\n                    mustLoadOnDemand = true;\n                    return false;\n                } else if (!node.hasChildren()) {\n                    return false;\n                } else {\n                    node.is_open = true;\n                    return level !== maxLevel;\n                }\n            });\n\n            return mustLoadOnDemand;\n        };\n\n        let [isRestored, mustLoadOnDemand] = restoreState(); // eslint-disable-line prefer-const\n\n        if (!isRestored) {\n            mustLoadOnDemand = autoOpenNodes();\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    // Set the initial state for nodes that are loaded on demand\n    // Call cb_finished when done\n    private setInitialStateOnDemand(cbFinished: () => void): void {\n        const restoreState = (): boolean => {\n            if (!this.options.saveState) {\n                return false;\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return false;\n                } else {\n                    this.saveStateHandler.setInitialStateOnDemand(\n                        state,\n                        cbFinished,\n                    );\n\n                    return true;\n                }\n            }\n        };\n\n        const autoOpenNodes = (): void => {\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let loadingCount = 0;\n\n            const loadAndOpenNode = (node: Node): void => {\n                loadingCount += 1;\n                this.openNodeInternal(node, false, () => {\n                    loadingCount -= 1;\n                    openNodes();\n                });\n            };\n\n            const openNodes = (): void => {\n                this.tree.iterate((node: Node, level: number) => {\n                    if (node.load_on_demand) {\n                        if (!node.is_loading) {\n                            loadAndOpenNode(node);\n                        }\n\n                        return false;\n                    } else {\n                        this.openNodeInternal(node, false);\n\n                        return level !== maxLevel;\n                    }\n                });\n\n                if (loadingCount === 0) {\n                    cbFinished();\n                }\n            };\n\n            openNodes();\n        };\n\n        if (!restoreState()) {\n            autoOpenNodes();\n        }\n    }\n\n    private getAutoOpenMaxLevel(): number {\n        if (this.options.autoOpen === true) {\n            return -1;\n        } else if (typeof this.options.autoOpen === \"number\") {\n            return this.options.autoOpen;\n        } else if (typeof this.options.autoOpen === \"string\") {\n            return parseInt(this.options.autoOpen, 10);\n        } else {\n            return 0;\n        }\n    }\n\n    private getNode(element: HTMLElement): null | Node {\n        const liElement = element.closest(\"li.jqtree_common\");\n\n        if (liElement) {\n            return jQuery(liElement).data(\"node\") as Node;\n        } else {\n            return null;\n        }\n    }\n\n    private saveState(): void {\n        if (this.options.saveState) {\n            this.saveStateHandler.saveState();\n        }\n    }\n\n    private selectCurrentNode(mustSetFocus: boolean): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            const nodeElement = this.getNodeElementForNode(node);\n            if (nodeElement) {\n                nodeElement.select(mustSetFocus);\n            }\n        }\n    }\n\n    private deselectCurrentNode(): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            this.removeFromSelection(node);\n        }\n    }\n\n    private getDefaultClosedIcon(): string {\n        if (this.options.rtl) {\n            // triangle to the left\n            return \"&#x25c0;\";\n        } else {\n            // triangle to the right\n            return \"&#x25ba;\";\n        }\n    }\n\n    private getRtlOption(): boolean {\n        if (this.options.rtl != null) {\n            return this.options.rtl;\n        } else {\n            const dataRtl = this.element.data(\"rtl\") as unknown;\n\n            if (\n                dataRtl !== null &&\n                dataRtl !== false &&\n                dataRtl !== undefined\n            ) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    private doSelectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): void {\n        const saveState = (): void => {\n            if (this.options.saveState) {\n                this.saveStateHandler.saveState();\n            }\n        };\n\n        if (!node) {\n            // Called with empty node -> deselect current node\n            this.deselectCurrentNode();\n            saveState();\n            return;\n        }\n        const defaultOptions = { mustSetFocus: true, mustToggle: true };\n        const selectOptions = { ...defaultOptions, ...(optionsParam || {}) };\n\n        const canSelect = (): boolean => {\n            if (this.options.onCanSelectNode) {\n                return (\n                    this.options.selectable === true &&\n                    this.options.onCanSelectNode(node)\n                );\n            } else {\n                return this.options.selectable === true;\n            }\n        };\n\n        if (!canSelect()) {\n            return;\n        }\n\n        if (this.selectNodeHandler.isNodeSelected(node)) {\n            if (selectOptions.mustToggle) {\n                this.deselectCurrentNode();\n                this.triggerEvent(\"tree.select\", {\n                    node: null,\n                    previous_node: node,\n                });\n            }\n        } else {\n            const deselectedNode = this.getSelectedNode() || null;\n            this.deselectCurrentNode();\n            this.addToSelection(node, selectOptions.mustSetFocus);\n\n            this.triggerEvent(\"tree.select\", {\n                node,\n                deselected_node: deselectedNode,\n            });\n            this.openParents(node);\n        }\n\n        saveState();\n    }\n\n    private doLoadData(data: NodeData[] | null, parentNode: Node | null): void {\n        if (data) {\n            if (parentNode) {\n                this.deselectNodes(parentNode);\n                this.loadSubtree(data, parentNode);\n            } else {\n                this.initTree(data);\n            }\n\n            if (this.isDragging()) {\n                this.dndHandler.refresh();\n            }\n        }\n\n        this.triggerEvent(\"tree.load_data\", {\n            tree_data: data,\n            parent_node: parentNode,\n        });\n    }\n\n    private deselectNodes(parentNode: Node): void {\n        const selectedNodesUnderParent =\n            this.selectNodeHandler.getSelectedNodesUnder(parentNode);\n        for (const n of selectedNodesUnderParent) {\n            this.selectNodeHandler.removeFromSelection(n);\n        }\n    }\n\n    private loadSubtree(data: NodeData[], parentNode: Node): void {\n        parentNode.loadFromData(data);\n\n        parentNode.load_on_demand = false;\n        parentNode.is_loading = false;\n\n        this.refreshElements(parentNode);\n    }\n\n    private doLoadDataFromUrl(\n        urlInfoParam: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null,\n    ): void {\n        const urlInfo = urlInfoParam || this.getDataUrlInfo(parentNode);\n\n        this.dataLoader.loadFromUrl(urlInfo, parentNode, onFinished);\n    }\n\n    private loadFolderOnDemand(\n        node: Node,\n        slide = true,\n        onFinished?: OnFinishOpenNode,\n    ): void {\n        node.is_loading = true;\n\n        this.doLoadDataFromUrl(null, node, () => {\n            this.openNodeInternal(node, slide, onFinished);\n        });\n    }\n\n    private containsElement(element: HTMLElement): boolean {\n        const node = this.getNode(element);\n\n        return node != null && node.tree === this.tree;\n    }\n\n    private isFocusOnTree(): boolean {\n        const activeElement = document.activeElement;\n\n        return Boolean(\n            activeElement &&\n                activeElement.tagName === \"SPAN\" &&\n                this.containsElement(activeElement as HTMLElement),\n        );\n    }\n\n    private connectHandlers() {\n        const {\n            autoEscape,\n            buttonLeft,\n            closedIcon,\n            dataFilter,\n            dragAndDrop,\n            keyboardSupport,\n            onCanMove,\n            onCreateLi,\n            onDragMove,\n            onDragStop,\n            onGetStateFromStorage,\n            onIsMoveHandle,\n            onLoadFailed,\n            onLoading,\n            onSetStateFromStorage,\n            openedIcon,\n            openFolderDelay,\n            rtl,\n            saveState,\n            showEmptyFolder,\n            slide,\n            tabIndex,\n        } = this.options;\n\n        const closeNode = this.closeNode.bind(this);\n        const getNodeElement = this.getNodeElement.bind(this);\n        const getNodeElementForNode = this.getNodeElementForNode.bind(this);\n        const getNodeById = this.getNodeById.bind(this);\n        const getSelectedNode = this.getSelectedNode.bind(this);\n        const getTree = this.getTree.bind(this);\n        const isFocusOnTree = this.isFocusOnTree.bind(this);\n        const loadData = this.loadData.bind(this);\n        const openNode = this.openNodeInternal.bind(this);\n        const refreshElements = this.refreshElements.bind(this);\n        const refreshHitAreas = this.refreshHitAreas.bind(this);\n        const selectNode = this.selectNode.bind(this);\n        const $treeElement = this.element;\n        const treeElement = this.element.get(0) as HTMLElement;\n        const triggerEvent = this.triggerEvent.bind(this);\n\n        const selectNodeHandler = new SelectNodeHandler({\n            getNodeById,\n        });\n\n        const addToSelection =\n            selectNodeHandler.addToSelection.bind(selectNodeHandler);\n        const getSelectedNodes =\n            selectNodeHandler.getSelectedNodes.bind(selectNodeHandler);\n        const isNodeSelected =\n            selectNodeHandler.isNodeSelected.bind(selectNodeHandler);\n        const removeFromSelection =\n            selectNodeHandler.removeFromSelection.bind(selectNodeHandler);\n        const getMouseDelay = () => this.options.startDndDelay ?? 0;\n\n        const dataLoader = new DataLoader({\n            dataFilter,\n            loadData,\n            onLoadFailed,\n            onLoading,\n            $treeElement,\n            triggerEvent,\n        });\n\n        const saveStateHandler = new SaveStateHandler({\n            addToSelection,\n            getNodeById,\n            getSelectedNodes,\n            getTree,\n            onGetStateFromStorage,\n            onSetStateFromStorage,\n            openNode,\n            refreshElements,\n            removeFromSelection,\n            saveState,\n        });\n\n        const scrollHandler = new ScrollHandler({\n            refreshHitAreas,\n            treeElement,\n        });\n\n        const getScrollLeft = scrollHandler.getScrollLeft.bind(scrollHandler);\n\n        const dndHandler = new DragAndDropHandler({\n            autoEscape,\n            getNodeElement,\n            getNodeElementForNode,\n            getScrollLeft,\n            getTree,\n            onCanMove,\n            onDragMove,\n            onDragStop,\n            onIsMoveHandle,\n            openFolderDelay,\n            openNode,\n            refreshElements,\n            slide,\n            treeElement,\n            triggerEvent,\n        });\n\n        const keyHandler = new KeyHandler({\n            closeNode,\n            getSelectedNode,\n            isFocusOnTree,\n            keyboardSupport,\n            openNode,\n            selectNode,\n        });\n\n        const renderer = new ElementsRenderer({\n            autoEscape,\n            buttonLeft,\n            closedIcon,\n            dragAndDrop,\n            $element: $treeElement,\n            getTree,\n            isNodeSelected,\n            onCreateLi,\n            openedIcon,\n            rtl,\n            showEmptyFolder,\n            tabIndex,\n        });\n\n        const getNode = this.getNode.bind(this);\n        const onMouseCapture = this.mouseCapture.bind(this);\n        const onMouseDrag = this.mouseDrag.bind(this);\n        const onMouseStart = this.mouseStart.bind(this);\n        const onMouseStop = this.mouseStop.bind(this);\n\n        const mouseHandler = new MouseHandler({\n            element: treeElement,\n            getMouseDelay,\n            getNode,\n            onClickButton: this.toggle.bind(this),\n            onClickTitle: this.doSelectNode.bind(this),\n            onMouseCapture,\n            onMouseDrag,\n            onMouseStart,\n            onMouseStop,\n            triggerEvent,\n            useContextMenu: this.options.useContextMenu,\n        });\n\n        this.dataLoader = dataLoader;\n        this.dndHandler = dndHandler;\n        this.keyHandler = keyHandler;\n        this.mouseHandler = mouseHandler;\n        this.renderer = renderer;\n        this.saveStateHandler = saveStateHandler;\n        this.scrollHandler = scrollHandler;\n        this.selectNodeHandler = selectNodeHandler;\n    }\n\n    private createFolderElement(node: Node) {\n        const closedIconElement = this.renderer.closedIconElement;\n        const getScrollLeft = this.scrollHandler.getScrollLeft.bind(\n            this.scrollHandler,\n        );\n        const openedIconElement = this.renderer.openedIconElement;\n        const tabIndex = this.options.tabIndex;\n        const $treeElement = this.element;\n        const triggerEvent = this.triggerEvent.bind(this);\n\n        return new FolderElement({\n            closedIconElement,\n            getScrollLeft,\n            node,\n            openedIconElement,\n            tabIndex,\n            $treeElement,\n            triggerEvent,\n        });\n    }\n\n    private createNodeElement(node: Node) {\n        const getScrollLeft = this.scrollHandler.getScrollLeft.bind(\n            this.scrollHandler,\n        );\n        const tabIndex = this.options.tabIndex;\n        const $treeElement = this.element;\n\n        return new NodeElement({\n            getScrollLeft,\n            node,\n            tabIndex,\n            $treeElement,\n        });\n    }\n\n    private openParents(node: Node) {\n        const parent = node.parent;\n\n        if (parent && parent.parent && !parent.is_open) {\n            this.openNode(parent, false);\n        }\n    }\n}\n\nSimpleWidget.register(JqTreeWidget, \"tree\");\n","const version = \"1.8.0\";\n\nexport default version;\n"],"names":["Position","positionNames","before","Before","after","After","inside","Inside","none","None","getPositionName","position","name","Object","prototype","hasOwnProperty","call","DragElement","constructor","_ref","autoEscape","nodeName","offsetX","offsetY","treeElement","this","element","createElement","appendChild","move","pageX","pageY","style","left","top","remove","document","classList","add","textContent","innerHTML","getBoolString","value","getOffsetTop","getElementPosition","rect","getBoundingClientRect","x","window","scrollX","y","scrollY","generateHitAreasForGroup","hitAreas","positionsInGroup","bottom","positionCount","Math","min","length","areaHeight","round","areaTop","i","push","node","generateHitAreas","tree","currentNode","treeBottom","positions","generatePositions","lastTop","addPosition","area","iterateVisibleNodes","handleAfterOpenFolder","handleClosedFolder","handleFirstNode","handleNode","handleOpenFolder","isFirstNode","iterate","nextNode","mustIterateInside","is_open","hasChildren","offsetParent","childrenLength","children","forEach","_","child","nextChild","generateHitAreasFromPositions","previousTop","group","DragAndDropHandler","getNodeElement","getNodeElementForNode","getScrollLeft","getTree","onCanMove","onCanMoveTo","onDragMove","onDragStop","onIsMoveHandle","openNode","refreshElements","slide","triggerEvent","hoveredArea","isDragging","currentItem","mouseCapture","positionInfo","target","mustCaptureElement","jQuery","nodeElement","mouseStart","refresh","dragElement","mouseDrag","findHoveredArea","canMoveToArea","isFolder","stopOpenFolderTimer","mustOpenFolderTimer","startOpenFolderTimer","updateDropHint","removeDropHint","originalEvent","mouseStop","moveItem","clear","removeHover","removeHitAreas","getTreeDimensions","positionName","previousGhost","dimensions","right","low","high","mid","addDropHint","folder","openFolder","openFolderDelay","openFolderTimer","setTimeout","clearTimeout","movedNode","targetNode","previousParent","parent","doMove","moveNode","move_info","moved_node","target_node","previous_parent","do_move","original_event","isDefaultPrevented","treePosition","clientWidth","clientHeight","ElementsRenderer","buttonLeft","closedIcon","onCreateLi","dragAndDrop","$element","isNodeSelected","openedIcon","rtl","showEmptyFolder","tabIndex","openedIconElement","createButtonElement","closedIconElement","render","fromNode","renderFromNode","renderFromRoot","empty","createDomElements","$previousLi","li","createLi","getLevel","attachNodeData","isRootNode","level","ul","createUl","data","classString","role","className","setAttribute","isSelected","Boolean","isEmptyFolder","createFolderLi","createNodeLi","setTreeItemAriaAttributes","buttonClasses","getButtonClasses","folderClasses","getFolderClasses","iconElement","div","buttonLink","cloneNode","titleSpan","createTitleSpan","liClasses","join","classes","undefined","is_loading","createTextNode","nodeType","DataLoader","dataFilter","loadData","onLoadFailed","onLoading","$treeElement","loadFromUrl","urlInfo","parentNode","onFinished","$el","getDomElement","addLoadingClass","notifyLoading","stopLoading","removeLoadingClass","submitRequest","parseData","jqXHR","addClass","removeClass","isLoading","urlInfoInput","handleSuccess","handleError","ajaxSettings","method","cache","dataType","success","error","url","toUpperCase","ajax","parsedData","JSON","parse","KeyHandler","closeNode","getSelectedNode","isFocusOnTree","keyboardSupport","selectNode","originalSelectNode","handleKeyDownHandler","handleKeyDown","bind","addEventListener","deinit","removeEventListener","moveDown","selectedNode","getNextVisibleNode","moveUp","getPreviousVisibleNode","moveRight","moveLeft","getParent","e","canHandleKeyboard","key","getPositionInfoFromMouseEvent","getPositionInfoFromTouch","touch","MouseHandler","getMouseDelay","getNode","onClickButton","onClickTitle","onMouseCapture","onMouseDrag","onMouseStart","onMouseStop","useContextMenu","handleClick","handleDblclick","mouseDown","passive","touchStart","handleContextmenu","isMouseStarted","mouseDelayTimer","isMouseDelayMet","mouseDownInfo","removeMouseMoveEventListeners","button","handleMouseDown","cancelable","preventDefault","handleMouseUp","handleStartMouse","mouseMove","touchMove","mouseUp","touchEnd","mouseDelay","startMouseDelayTimer","handleMouseMove","touches","clickTarget","getClickTarget","type","stopPropagation","click_event","closest","jqTreeElement","SaveStateHandler","addToSelection","getNodeById","getSelectedNodes","onGetStateFromStorage","onSetStateFromStorage","removeFromSelection","saveState","saveStateOption","state","stringify","getState","supportsLocalStorage","localStorage","setItem","getKeyName","getStateFromStorage","jsonData","loadFromStorage","parseState","open_nodes","getOpenNodeIds","openNodes","id","selected_node","getSelectedNodeIds","selectedNodeIds","setInitialState","mustLoadOnDemand","openInitialNodes","resetSelection","selectInitialNodes","setInitialStateOnDemand","cbFinished","doSetInitialStateOnDemand","getNodeIdToBeSelected","n","getItem","nodeIds","nodeId","load_on_demand","selectCount","nodeIdsParam","selectedNodes","loadingCount","newNodesIds","loadAndOpenNode","_supportsLocalStorage","testSupport","sessionStorage","removeItem","ContainerScrollParent","container","refreshHitAreas","checkHorizontalScrolling","newHorizontalScrollDirection","getNewHorizontalScrollDirection","horizontalScrollDirection","horizontalScrollTimeout","verticalScrollTimeout","scrollHorizontally","checkVerticalScrolling","newVerticalScrollDirection","getNewVerticalScrollDirection","verticalScrollDirection","scrollVertically","scrollLeft","scrollToY","scrollTop","stopScrolling","scrollParentTop","scrollParentBottom","scrollParentOffset","rightEdge","leftEdge","getScrollParentTop","getScrollParentBottom","distance","scrollBy","behavior","DocumentScrollParent","documentElement","treeTop","documentScrollHeight","documentScrollWidth","isNearLeftEdge","innerWidth","canScrollRight","getDocumentScrollWidth","canScrollDown","getDocumentScrollHeight","scrollHeight","scrollWidth","innerHeight","isOverflow","overflowValue","hasOverFlow","getComputedStyle","overflowX","overflowY","createScrollParent","parentElement","getParentWithOverflow","tagName","ScrollHandler","scrollParent","checkScrolling","getScrollParent","SelectNodeHandler","Set","selectedSingleNode","getSelectedNodesUnder","isParentOf","has","includeChildren","arguments","delete","register","widgetClass","widgetName","getDataKey","getWidgetData","el","dataKey","widget","SimpleWidget","createWidget","options","get","init","fn","argument1","functionName","destroy","removeData","destroyWidget","_len","args","Array","_key","callFunction","result","widgetFunction","apply","static","defaults","isNodeRecordWithChildren","Node","nodeData","isRoot","nodeClass","setData","idMapping","Map","o","loadFromData","removeChildren","childData","createNode","addChild","setParent","addChildAtPosition","index","splice","removeChild","doRemoveChild","getChildIndex","indexOf","callback","_iterate","getData","getDataFromNodes","nodes","map","tmpNode","k","v","getNodeByName","getNodeByCallback","getNodeByNameMustExist","addAfter","nodeInfo","childIndex","loadChildrenFromData","addBefore","addParent","newParent","originalParent","append","prepend","addNodeToIndex","set","removeNodeFromIndex","getPreviousSibling","previousIndex","getNextSibling","nextIndex","getNodesByProperty","filter","f","getNextNode","nextSibling","getPreviousNode","previousSibling","getLastChild","lastChild","initFromData","addChildren","childrenData","addNode","getNodeClass","BorderDropHint","querySelector","hint","width","max","offsetWidth","height","GhostDropHint","ghost","createGhostElement","moveAfter","moveBefore","moveInsideOpenFolder","moveInside","childElement","circleSpan","lineSpan","NodeElement","mustShowBorderDropHint","select","mustSetFocus","getTitleSpan","toString","focus","deselect","removeAttribute","blur","getUl","FolderElement","super","open","animationSpeed","getButton","icon","doOpen","slideDown","show","close","doClose","slideUp","hide","NODE_PARAM_IS_EMPTY","PARAM_IS_EMPTY","JqTreeWidget","autoOpen","dataUrl","onCanSelectNode","selectable","startDndDelay","toggle","slideParam","Error","optionsParam","doSelectNode","selectNodeHandler","toJson","doLoadData","loadDataFromUrl","param1","param2","param3","doLoadDataFromUrl","reload","getNodeByHtmlElement","inputElement","HTMLElement","parseParams","openNodeInternal","createFolderElement","dndHandler","addNodeAfter","newNodeInfo","existingNode","newNode","addNodeBefore","addParentNode","removeNode","appendNode","parentNodeParam","prependNode","updateNode","idIsChanged","isSelectedNodeInSubtree","subtree","positionIndex","saveStateHandler","openParents","scrollToNode","scrollHandler","setState","setOption","option","keyHandler","getVersion","doOpenNode","_node","_slide","_onFinished","loadFolderOnDemand","mustSelect","renderer","selectCurrentNode","createNodeElement","isInitialized","getRtlOption","getDefaultClosedIcon","connectHandlers","initData","off","mouseHandler","eventName","values","event","Event","trigger","getDataUrlInfo","setUrlInfoData","selectedNodeId","getUrlFromString","initTree","doInit","autoOpenNodes","maxLevel","getAutoOpenMaxLevel","isRestored","restoreState","parseInt","liElement","deselectCurrentNode","dataRtl","selectOptions","mustToggle","canSelect","previous_node","deselectedNode","deselected_node","deselectNodes","loadSubtree","tree_data","parent_node","selectedNodesUnderParent","urlInfoParam","dataLoader","containsElement","activeElement"],"mappings":"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"}