{"version":3,"file":"tree.jquery.debug.js","sources":["src/version.ts","src/node.ts","src/dragAndDropHandler/dragElement.ts","src/dragAndDropHandler/visibleNodeIterator.ts","src/dragAndDropHandler/hitAreasGenerator.ts","src/dragAndDropHandler/index.ts","src/util.ts","src/elementsRenderer.ts","src/dataLoader.ts","src/keyHandler.ts","src/simple.widget.ts","src/mouse.widget.ts","src/saveStateHandler.ts","src/scrollHandler.ts","src/selectNodeHandler.ts","src/nodeElement/borderDropHint.ts","src/nodeElement/ghostDropHint.ts","src/nodeElement/index.ts","src/nodeElement/folderElement.ts","src/tree.jquery.ts"],"sourcesContent":["const version = \"1.7.3\";\n\nexport default version;\n","interface NodeRecordWithChildren extends NodeRecord {\n    children: NodeData[];\n}\n\nexport enum Position {\n    Before = 1,\n    After,\n    Inside,\n    None,\n}\n\nconst positionNames: Record<string, Position> = {\n    before: Position.Before,\n    after: Position.After,\n    inside: Position.Inside,\n    none: Position.None,\n};\n\ntype IterateCallback = (node: Node, level: number) => boolean;\n\nexport const getPositionName = (position: Position): string => {\n    for (const name in positionNames) {\n        if (Object.prototype.hasOwnProperty.call(positionNames, name)) {\n            if (positionNames[name] === position) {\n                return name;\n            }\n        }\n    }\n\n    return \"\";\n};\n\nexport const getPosition = (name: string): Position | undefined =>\n    positionNames[name];\n\nconst isNodeRecordWithChildren = (\n    data: NodeData\n): data is NodeRecordWithChildren =>\n    typeof data === \"object\" &&\n    \"children\" in data &&\n    data[\"children\"] instanceof Array;\n\nexport class Node implements INode {\n    public id?: NodeId;\n    public name: string;\n    public children: Node[];\n    public parent: Node | null;\n    public idMapping: Map<NodeId, Node>;\n    public tree?: Node;\n    public nodeClass?: typeof Node;\n    public load_on_demand: boolean;\n    public is_open: boolean;\n    public element: HTMLElement;\n    public is_loading: boolean;\n    public isEmptyFolder: boolean;\n\n    [key: string]: unknown;\n\n    constructor(o: NodeData | null = null, isRoot = false, nodeClass = Node) {\n        this.name = \"\";\n        this.isEmptyFolder = false;\n        this.load_on_demand = false;\n\n        this.setData(o);\n\n        this.children = [];\n        this.parent = null;\n\n        if (isRoot) {\n            this.idMapping = new Map<NodeId, Node>();\n            this.tree = this;\n            this.nodeClass = nodeClass;\n        }\n    }\n\n    /*\n    Set the data of this node.\n\n    setData(string): set the name of the node\n    setdata(object): set attributes of the node\n\n    Examples:\n        setdata('node1')\n\n        setData({ name: 'node1', id: 1});\n\n        setData({ name: 'node2', id: 2, color: 'green'});\n\n    * This is an internal function; it is not in the docs\n    * Does not remove existing node values\n    */\n    public setData(o: NodeData | null): void {\n        if (!o) {\n            return;\n        } else if (typeof o === \"string\") {\n            this.name = o;\n        } else if (typeof o === \"object\") {\n            for (const key in o) {\n                if (Object.prototype.hasOwnProperty.call(o, key)) {\n                    const value = o[key];\n\n                    if (key === \"label\" || key === \"name\") {\n                        // You can use the 'label' key instead of 'name'; this is a legacy feature\n                        if (typeof value === \"string\") {\n                            this.name = value;\n                        }\n                    } else if (key !== \"children\" && key !== \"parent\") {\n                        // You can't update the children or the parent using this function\n                        this[key] = value;\n                    }\n                }\n            }\n        }\n    }\n\n    /*\n    Create tree from data.\n\n    Structure of data is:\n    [\n        {\n            name: 'node1',\n            children: [\n                { name: 'child1' },\n                { name: 'child2' }\n            ]\n        },\n        {\n            name: 'node2'\n        }\n    ]\n    */\n    public loadFromData(data: NodeData[]): Node {\n        this.removeChildren();\n\n        for (const o of data) {\n            const node = this.createNode(o);\n            this.addChild(node);\n\n            if (isNodeRecordWithChildren(o)) {\n                if (o.children.length === 0) {\n                    node.isEmptyFolder = true;\n                } else {\n                    node.loadFromData(o.children);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /*\n    Add child.\n\n    tree.addChild(\n        new Node('child1')\n    );\n    */\n    public addChild(node: Node): void {\n        this.children.push(node);\n        node.setParent(this);\n    }\n\n    /*\n    Add child at position. Index starts at 0.\n\n    tree.addChildAtPosition(\n        new Node('abc'),\n        1\n    );\n    */\n    public addChildAtPosition(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        node.setParent(this);\n    }\n\n    /*\n    Remove child. This also removes the children of the node.\n\n    tree.removeChild(tree.children[0]);\n    */\n    public removeChild(node: Node): void {\n        // remove children from the index\n        node.removeChildren();\n\n        this.doRemoveChild(node);\n    }\n\n    /*\n    Get child index.\n\n    var index = getChildIndex(node);\n    */\n    public getChildIndex(node: Node): number {\n        return this.children.indexOf(node);\n    }\n\n    /*\n    Does the tree have children?\n\n    if (tree.hasChildren()) {\n        //\n    }\n    */\n    public hasChildren(): boolean {\n        return this.children.length !== 0;\n    }\n\n    public isFolder(): boolean {\n        return this.hasChildren() || this.load_on_demand;\n    }\n\n    /*\n    Iterate over all the nodes in the tree.\n\n    Calls callback with (node, level).\n\n    The callback must return true to continue the iteration on current node.\n\n    tree.iterate(\n        function(node, level) {\n           console.log(node.name);\n\n           // stop iteration after level 2\n           return (level <= 2);\n        }\n    );\n\n    */\n    public iterate(callback: IterateCallback): void {\n        const _iterate = (node: Node, level: number): void => {\n            if (node.children) {\n                for (const child of node.children) {\n                    const result = callback(child, level);\n\n                    if (result && child.hasChildren()) {\n                        _iterate(child, level + 1);\n                    }\n                }\n            }\n        };\n\n        _iterate(this, 0);\n    }\n\n    /*\n    Move node relative to another node.\n\n    Argument position: Position.BEFORE, Position.AFTER or Position.Inside\n\n    // move node1 after node2\n    tree.moveNode(node1, node2, Position.AFTER);\n    */\n    public moveNode(\n        movedNode: Node,\n        targetNode: Node,\n        position: Position\n    ): boolean {\n        if (!movedNode.parent || movedNode.isParentOf(targetNode)) {\n            // - Node is parent of target node\n            // - Or, parent is empty\n            return false;\n        } else {\n            movedNode.parent.doRemoveChild(movedNode);\n\n            switch (position) {\n                case Position.After: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode) + 1\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Before: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode)\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Inside: {\n                    // move inside as first child\n                    targetNode.addChildAtPosition(movedNode, 0);\n                    return true;\n                }\n\n                default:\n                    return false;\n            }\n        }\n    }\n\n    /*\n    Get the tree as data.\n    */\n    public getData(includeParent = false): NodeRecord[] {\n        const getDataFromNodes = (nodes: Node[]): Record<string, unknown>[] => {\n            return nodes.map((node) => {\n                const tmpNode: Record<string, unknown> = {};\n\n                for (const k in node) {\n                    if (\n                        [\n                            \"parent\",\n                            \"children\",\n                            \"element\",\n                            \"idMapping\",\n                            \"load_on_demand\",\n                            \"nodeClass\",\n                            \"tree\",\n                            \"isEmptyFolder\",\n                        ].indexOf(k) === -1 &&\n                        Object.prototype.hasOwnProperty.call(node, k)\n                    ) {\n                        const v = node[k];\n                        tmpNode[k] = v;\n                    }\n                }\n\n                if (node.hasChildren()) {\n                    tmpNode[\"children\"] = getDataFromNodes(node.children);\n                }\n\n                return tmpNode;\n            });\n        };\n\n        if (includeParent) {\n            return getDataFromNodes([this]);\n        } else {\n            return getDataFromNodes(this.children);\n        }\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.getNodeByCallback((node: Node) => node.name === name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        const node = this.getNodeByCallback((n: Node) => n.name === name);\n\n        if (!node) {\n            throw `Node with name ${name} not found`;\n        }\n\n        return node;\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        let result: Node | null = null;\n\n        this.iterate((node: Node) => {\n            if (result) {\n                return false;\n            } else if (callback(node)) {\n                result = node;\n                return false;\n            } else {\n                return true;\n            }\n        });\n\n        return result;\n    }\n\n    public addAfter(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex + 1);\n\n            if (\n                isNodeRecordWithChildren(nodeInfo) &&\n                nodeInfo.children.length\n            ) {\n                node.loadFromData(nodeInfo.children);\n            }\n\n            return node;\n        }\n    }\n\n    public addBefore(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex);\n\n            if (\n                isNodeRecordWithChildren(nodeInfo) &&\n                nodeInfo.children.length\n            ) {\n                node.loadFromData(nodeInfo.children);\n            }\n\n            return node;\n        }\n    }\n\n    public addParent(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const newParent = this.createNode(nodeInfo);\n\n            if (this.tree) {\n                newParent.setParent(this.tree);\n            }\n            const originalParent = this.parent;\n\n            for (const child of originalParent.children) {\n                newParent.addChild(child);\n            }\n\n            originalParent.children = [];\n            originalParent.addChild(newParent);\n            return newParent;\n        }\n    }\n\n    public remove(): void {\n        if (this.parent) {\n            this.parent.removeChild(this);\n            this.parent = null;\n        }\n    }\n\n    public append(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChild(node);\n\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            node.loadFromData(nodeInfo.children);\n        }\n\n        return node;\n    }\n\n    public prepend(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChildAtPosition(node, 0);\n\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            node.loadFromData(nodeInfo.children);\n        }\n\n        return node;\n    }\n\n    public isParentOf(node: Node): boolean {\n        let parent = node.parent;\n\n        while (parent) {\n            if (parent === this) {\n                return true;\n            }\n\n            parent = parent.parent;\n        }\n\n        return false;\n    }\n\n    public getLevel(): number {\n        let level = 0;\n        let node: Node = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n        while (node.parent) {\n            level += 1;\n            node = node.parent;\n        }\n\n        return level;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.idMapping.get(nodeId) || null;\n    }\n\n    public addNodeToIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.set(node.id, node);\n        }\n    }\n\n    public removeNodeFromIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.delete(node.id);\n        }\n    }\n\n    public removeChildren(): void {\n        this.iterate((child: Node) => {\n            this.tree?.removeNodeFromIndex(child);\n            return true;\n        });\n\n        this.children = [];\n    }\n\n    public getPreviousSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousIndex = this.parent.getChildIndex(this) - 1;\n            if (previousIndex >= 0) {\n                return this.parent.children[previousIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNextSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const nextIndex = this.parent.getChildIndex(this) + 1;\n            if (nextIndex < this.parent.children.length) {\n                return this.parent.children[nextIndex] || null;\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.filter((node: Node) => node[key] === value);\n    }\n\n    public filter(f: (node: Node) => boolean): Node[] {\n        const result: Node[] = [];\n\n        this.iterate((node: Node) => {\n            if (f(node)) {\n                result.push(node);\n            }\n\n            return true;\n        });\n\n        return result;\n    }\n\n    public getNextNode(includeChildren = true): Node | null {\n        if (includeChildren && this.hasChildren()) {\n            return this.children[0] || null;\n        } else if (!this.parent) {\n            return null;\n        } else {\n            const nextSibling = this.getNextSibling();\n\n            if (nextSibling) {\n                return nextSibling;\n            } else {\n                return this.parent.getNextNode(false);\n            }\n        }\n    }\n\n    public getNextVisibleNode(): Node | null {\n        if (this.hasChildren() && this.is_open) {\n            // First child\n            return this.children[0] || null;\n        } else {\n            if (!this.parent) {\n                return null;\n            } else {\n                const nextSibling = this.getNextSibling();\n                if (nextSibling) {\n                    // Next sibling\n                    return nextSibling;\n                } else {\n                    // Next node of parent\n                    return this.parent.getNextNode(false);\n                }\n            }\n        }\n    }\n\n    public getPreviousNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (previousSibling.hasChildren()) {\n                return previousSibling.getLastChild();\n            } else {\n                return previousSibling;\n            }\n        }\n    }\n\n    public getPreviousVisibleNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n\n            if (!previousSibling) {\n                return this.getParent();\n            } else if (\n                !previousSibling.hasChildren() ||\n                !previousSibling.is_open\n            ) {\n                // Previous sibling\n                return previousSibling;\n            } else {\n                // Last child of previous sibling\n                return previousSibling.getLastChild();\n            }\n        }\n    }\n\n    public getParent(): Node | null {\n        // Return parent except if it is the root node\n        if (!this.parent) {\n            return null;\n        } else if (!this.parent.parent) {\n            // Root node -> null\n            return null;\n        } else {\n            return this.parent;\n        }\n    }\n\n    public getLastChild(): Node | null {\n        if (!this.hasChildren()) {\n            return null;\n        } else {\n            const lastChild = this.children[this.children.length - 1];\n\n            if (!lastChild) {\n                return null;\n            }\n\n            if (!(lastChild.hasChildren() && lastChild.is_open)) {\n                return lastChild;\n            } else {\n                return lastChild?.getLastChild();\n            }\n        }\n    }\n\n    // Init Node from data without making it the root of the tree\n    public initFromData(data: NodeData): void {\n        const addNode = (nodeData: NodeData): void => {\n            this.setData(nodeData);\n\n            if (\n                isNodeRecordWithChildren(nodeData) &&\n                nodeData.children.length\n            ) {\n                addChildren(nodeData.children);\n            }\n        };\n\n        const addChildren = (childrenData: NodeData[]): void => {\n            for (const child of childrenData) {\n                const node = this.createNode();\n                node.initFromData(child);\n                this.addChild(node);\n            }\n        };\n\n        addNode(data);\n    }\n\n    private setParent(parent: Node): void {\n        this.parent = parent;\n        this.tree = parent.tree;\n        this.tree?.addNodeToIndex(this);\n    }\n\n    private doRemoveChild(node: Node): void {\n        this.children.splice(this.getChildIndex(node), 1);\n        this.tree?.removeNodeFromIndex(node);\n    }\n\n    private getNodeClass(): typeof Node {\n        return this.nodeClass || this?.tree?.nodeClass || Node;\n    }\n\n    private createNode(nodeData?: NodeData): Node {\n        const nodeClass = this.getNodeClass();\n        return new nodeClass(nodeData);\n    }\n}\n","class DragElement {\n    private offsetX: number;\n    private offsetY: number;\n    private $element: JQuery;\n\n    constructor(\n        nodeName: string,\n        offsetX: number,\n        offsetY: number,\n        $tree: JQuery,\n        autoEscape: boolean,\n    ) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n\n        this.$element = jQuery(\"<span>\").addClass(\n            \"jqtree-title jqtree-dragging\",\n        );\n\n        if (autoEscape) {\n            this.$element.text(nodeName);\n        } else {\n            this.$element.html(nodeName);\n        }\n\n        this.$element.css(\"position\", \"absolute\");\n        $tree.append(this.$element);\n    }\n\n    public move(pageX: number, pageY: number): void {\n        this.$element.offset({\n            left: pageX - this.offsetX,\n            top: pageY - this.offsetY,\n        });\n    }\n\n    public remove(): void {\n        this.$element.remove();\n    }\n}\n\nexport default DragElement;\n","import { Node } from \"../node\";\n\nabstract class VisibleNodeIterator {\n    private tree: Node;\n\n    constructor(tree: Node) {\n        this.tree = tree;\n    }\n\n    protected iterate(): void {\n        let isFirstNode = true;\n\n        const _iterateNode = (node: Node, nextNode: Node | null): void => {\n            let mustIterateInside =\n                (node.is_open || !node.element) && node.hasChildren();\n\n            let $element: JQuery<HTMLElement> | null = null;\n\n            if (node.element) {\n                $element = jQuery(node.element);\n\n                if (!$element.is(\":visible\")) {\n                    return;\n                }\n\n                if (isFirstNode) {\n                    this.handleFirstNode(node);\n                    isFirstNode = false;\n                }\n\n                if (!node.hasChildren()) {\n                    this.handleNode(node, nextNode, $element);\n                } else if (node.is_open) {\n                    if (!this.handleOpenFolder(node, $element)) {\n                        mustIterateInside = false;\n                    }\n                } else {\n                    this.handleClosedFolder(node, nextNode, $element);\n                }\n            }\n\n            if (mustIterateInside) {\n                const childrenLength = node.children.length;\n                node.children.forEach((_, i) => {\n                    const child = node.children[i];\n\n                    if (child) {\n                        if (i === childrenLength - 1) {\n                            _iterateNode(child, null);\n                        } else {\n                            const nextChild = node.children[i + 1];\n\n                            if (nextChild) {\n                                _iterateNode(child, nextChild);\n                            }\n                        }\n                    }\n                });\n\n                if (node.is_open && $element) {\n                    this.handleAfterOpenFolder(node, nextNode);\n                }\n            }\n        };\n\n        _iterateNode(this.tree, null);\n    }\n\n    protected abstract handleNode(\n        node: Node,\n        nextNode: Node | null,\n        $element: JQuery,\n    ): void;\n\n    /*\n    override\n    return\n        - true: continue iterating\n        - false: stop iterating\n    */\n    protected abstract handleOpenFolder(node: Node, $element: JQuery): boolean;\n\n    protected abstract handleClosedFolder(\n        node: Node,\n        nextNode: Node | null,\n        $element: JQuery,\n    ): void;\n\n    protected abstract handleAfterOpenFolder(\n        node: Node,\n        nextNode: Node | null,\n    ): void;\n\n    protected abstract handleFirstNode(node: Node): void;\n}\n\nexport default VisibleNodeIterator;\n","import { HitArea } from \"../types\";\nimport { Node, Position } from \"../node\";\nimport VisibleNodeIterator from \"./visibleNodeIterator\";\n\nclass HitAreasGenerator extends VisibleNodeIterator {\n    private currentNode: Node;\n    private treeBottom: number;\n    private positions: HitArea[];\n    private lastTop: number;\n\n    constructor(tree: Node, currentNode: Node, treeBottom: number) {\n        super(tree);\n\n        this.currentNode = currentNode;\n        this.treeBottom = treeBottom;\n    }\n\n    public generate(): HitArea[] {\n        this.positions = [];\n        this.lastTop = 0;\n\n        this.iterate();\n\n        return this.generateHitAreas(this.positions);\n    }\n\n    protected generateHitAreas(positions: HitArea[]): HitArea[] {\n        let previousTop = -1;\n        let group = [];\n        const hitAreas: HitArea[] = [];\n\n        for (const position of positions) {\n            if (position.top !== previousTop && group.length) {\n                if (group.length) {\n                    this.generateHitAreasForGroup(\n                        hitAreas,\n                        group,\n                        previousTop,\n                        position.top,\n                    );\n                }\n\n                previousTop = position.top;\n                group = [];\n            }\n\n            group.push(position);\n        }\n\n        this.generateHitAreasForGroup(\n            hitAreas,\n            group,\n            previousTop,\n            this.treeBottom,\n        );\n\n        return hitAreas;\n    }\n\n    protected handleOpenFolder(node: Node, $element: JQuery): boolean {\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            // Stop iterating\n            return false;\n        }\n\n        // Cannot move before current item\n        if (node.children[0] !== this.currentNode) {\n            this.addPosition(node, Position.Inside, this.getTop($element));\n        }\n\n        // Continue iterating\n        return true;\n    }\n\n    protected handleClosedFolder(\n        node: Node,\n        nextNode: Node,\n        $element: JQuery,\n    ): void {\n        const top = this.getTop($element);\n\n        if (node === this.currentNode) {\n            // Cannot move after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n\n            // Cannot move before current item\n            if (nextNode !== this.currentNode) {\n                this.addPosition(node, Position.After, top);\n            }\n        }\n    }\n\n    protected handleFirstNode(node: Node): void {\n        if (node !== this.currentNode) {\n            this.addPosition(\n                node,\n                Position.Before,\n                this.getTop(jQuery(node.element)),\n            );\n        }\n    }\n\n    protected handleAfterOpenFolder(node: Node, nextNode: Node): void {\n        if (node === this.currentNode || nextNode === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, this.lastTop);\n        } else {\n            this.addPosition(node, Position.After, this.lastTop);\n        }\n    }\n\n    protected handleNode(node: Node, nextNode: Node, $element: JQuery): void {\n        const top = this.getTop($element);\n\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n        }\n\n        if (nextNode === this.currentNode || node === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.After, top);\n        }\n    }\n\n    private getTop($element: JQuery<HTMLElement>): number {\n        const offset = $element.offset();\n\n        return offset ? offset.top : 0;\n    }\n\n    private addPosition(node: Node, position: number, top: number): void {\n        const area = {\n            top,\n            bottom: 0,\n            node,\n            position,\n        };\n\n        this.positions.push(area);\n        this.lastTop = top;\n    }\n\n    private generateHitAreasForGroup(\n        hitAreas: HitArea[],\n        positionsInGroup: HitArea[],\n        top: number,\n        bottom: number,\n    ): void {\n        // limit positions in group\n        const positionCount = Math.min(positionsInGroup.length, 4);\n\n        const areaHeight = Math.round((bottom - top) / positionCount);\n        let areaTop = top;\n\n        let i = 0;\n        while (i < positionCount) {\n            const position = positionsInGroup[i];\n\n            if (position) {\n                hitAreas.push({\n                    top: areaTop,\n                    bottom: areaTop + areaHeight,\n                    node: position.node,\n                    position: position.position,\n                });\n            }\n\n            areaTop += areaHeight;\n            i += 1;\n        }\n    }\n}\n\nexport default HitAreasGenerator;\n","import { getPositionName, Node, Position } from \"../node\";\nimport { DropHint, HitArea, PositionInfo } from \"../types\";\nimport NodeElement from \"../nodeElement\";\nimport { JqTreeWidget } from \"../tree.jquery\";\nimport DragElement from \"./dragElement\";\nimport HitAreasGenerator from \"./hitAreasGenerator\";\n\ninterface Dimensions {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n}\n\nexport class DragAndDropHandler {\n    public hitAreas: HitArea[];\n    public isDragging: boolean;\n    public currentItem: NodeElement | null;\n    public hoveredArea: HitArea | null;\n    public positionInfo: PositionInfo | null;\n\n    private treeWidget: JqTreeWidget;\n    private dragElement: DragElement | null;\n    private previousGhost: DropHint | null;\n    private openFolderTimer: number | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        this.hoveredArea = null;\n        this.hitAreas = [];\n        this.isDragging = false;\n        this.currentItem = null;\n        this.positionInfo = null;\n    }\n\n    public mouseCapture(positionInfo: PositionInfo): boolean | null {\n        const $element = jQuery(positionInfo.target);\n\n        if (!this.mustCaptureElement($element)) {\n            return null;\n        }\n\n        if (\n            this.treeWidget.options.onIsMoveHandle &&\n            !this.treeWidget.options.onIsMoveHandle($element)\n        ) {\n            return null;\n        }\n\n        let nodeElement = this.treeWidget._getNodeElement($element);\n\n        if (nodeElement && this.treeWidget.options.onCanMove) {\n            if (!this.treeWidget.options.onCanMove(nodeElement.node)) {\n                nodeElement = null;\n            }\n        }\n\n        this.currentItem = nodeElement;\n        return this.currentItem != null;\n    }\n\n    public mouseStart(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.refresh();\n\n        const offset = jQuery(positionInfo.target).offset();\n        const left = offset ? offset.left : 0;\n        const top = offset ? offset.top : 0;\n\n        const node = this.currentItem.node;\n\n        this.dragElement = new DragElement(\n            node.name,\n            positionInfo.pageX - left,\n            positionInfo.pageY - top,\n            this.treeWidget.element,\n            this.treeWidget.options.autoEscape ?? true,\n        );\n\n        this.isDragging = true;\n        this.positionInfo = positionInfo;\n        this.currentItem.element.classList.add(\"jqtree-moving\");\n        return true;\n    }\n\n    public mouseDrag(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            !this.dragElement ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.dragElement.move(positionInfo.pageX, positionInfo.pageY);\n        this.positionInfo = positionInfo;\n\n        const area = this.findHoveredArea(\n            positionInfo.pageX,\n            positionInfo.pageY,\n        );\n\n        if (area && this.canMoveToArea(area)) {\n            if (!area.node.isFolder()) {\n                this.stopOpenFolderTimer();\n            }\n\n            if (this.hoveredArea !== area) {\n                this.hoveredArea = area;\n\n                // If this is a closed folder, start timer to open it\n                if (this.mustOpenFolderTimer(area)) {\n                    this.startOpenFolderTimer(area.node);\n                } else {\n                    this.stopOpenFolderTimer();\n                }\n\n                this.updateDropHint();\n            }\n        } else {\n            this.removeDropHint();\n            this.stopOpenFolderTimer();\n            this.hoveredArea = area;\n        }\n\n        if (!area) {\n            if (this.treeWidget.options.onDragMove) {\n                this.treeWidget.options.onDragMove(\n                    this.currentItem.node,\n                    positionInfo.originalEvent,\n                );\n            }\n        }\n\n        return true;\n    }\n\n    public mouseStop(positionInfo: PositionInfo): boolean {\n        this.moveItem(positionInfo);\n        this.clear();\n        this.removeHover();\n        this.removeDropHint();\n        this.removeHitAreas();\n\n        const currentItem = this.currentItem;\n\n        if (this.currentItem) {\n            this.currentItem.element.classList.remove(\"jqtree-moving\");\n            this.currentItem = null;\n        }\n\n        this.isDragging = false;\n        this.positionInfo = null;\n\n        if (!this.hoveredArea && currentItem) {\n            if (this.treeWidget.options.onDragStop) {\n                this.treeWidget.options.onDragStop(\n                    currentItem.node,\n                    positionInfo.originalEvent,\n                );\n            }\n        }\n\n        return false;\n    }\n\n    public refresh(): void {\n        this.removeHitAreas();\n\n        if (this.currentItem) {\n            this.generateHitAreas();\n\n            this.currentItem = this.treeWidget._getNodeElementForNode(\n                this.currentItem.node,\n            );\n\n            if (this.isDragging) {\n                this.currentItem.element.classList.add(\"jqtree-moving\");\n            }\n        }\n    }\n\n    private generateHitAreas(): void {\n        if (!this.currentItem) {\n            this.hitAreas = [];\n        } else {\n            const hitAreasGenerator = new HitAreasGenerator(\n                this.treeWidget.tree,\n                this.currentItem.node,\n                this.getTreeDimensions().bottom,\n            );\n            this.hitAreas = hitAreasGenerator.generate();\n        }\n    }\n\n    private mustCaptureElement($element: JQuery<HTMLElement>): boolean {\n        return !$element.is(\"input,select,textarea\");\n    }\n\n    private canMoveToArea(area: HitArea): boolean {\n        if (!this.treeWidget.options.onCanMoveTo) {\n            return true;\n        }\n\n        if (!this.currentItem) {\n            return false;\n        }\n\n        const positionName = getPositionName(area.position);\n\n        return this.treeWidget.options.onCanMoveTo(\n            this.currentItem.node,\n            area.node,\n            positionName,\n        );\n    }\n\n    private removeHitAreas(): void {\n        this.hitAreas = [];\n    }\n\n    private clear(): void {\n        if (this.dragElement) {\n            this.dragElement.remove();\n            this.dragElement = null;\n        }\n    }\n\n    private removeDropHint(): void {\n        if (this.previousGhost) {\n            this.previousGhost.remove();\n        }\n    }\n\n    private removeHover(): void {\n        this.hoveredArea = null;\n    }\n\n    private findHoveredArea(x: number, y: number): HitArea | null {\n        const dimensions = this.getTreeDimensions();\n\n        if (\n            x < dimensions.left ||\n            y < dimensions.top ||\n            x > dimensions.right ||\n            y > dimensions.bottom\n        ) {\n            return null;\n        }\n\n        let low = 0;\n        let high = this.hitAreas.length;\n        while (low < high) {\n            const mid = (low + high) >> 1;\n            const area = this.hitAreas[mid];\n\n            if (!area) {\n                return null;\n            }\n\n            if (y < area.top) {\n                high = mid;\n            } else if (y > area.bottom) {\n                low = mid + 1;\n            } else {\n                return area;\n            }\n        }\n\n        return null;\n    }\n\n    private mustOpenFolderTimer(area: HitArea): boolean {\n        const node = area.node;\n\n        return (\n            node.isFolder() &&\n            !node.is_open &&\n            area.position === Position.Inside\n        );\n    }\n\n    private updateDropHint(): void {\n        if (!this.hoveredArea) {\n            return;\n        }\n\n        // remove previous drop hint\n        this.removeDropHint();\n\n        // add new drop hint\n        const nodeElement = this.treeWidget._getNodeElementForNode(\n            this.hoveredArea.node,\n        );\n        this.previousGhost = nodeElement.addDropHint(this.hoveredArea.position);\n    }\n\n    private startOpenFolderTimer(folder: Node): void {\n        const openFolder = (): void => {\n            this.treeWidget._openNode(\n                folder,\n                this.treeWidget.options.slide,\n                () => {\n                    this.refresh();\n                    this.updateDropHint();\n                },\n            );\n        };\n\n        this.stopOpenFolderTimer();\n\n        const openFolderDelay = this.treeWidget.options.openFolderDelay;\n\n        if (openFolderDelay !== false) {\n            this.openFolderTimer = window.setTimeout(\n                openFolder,\n                openFolderDelay,\n            );\n        }\n    }\n\n    private stopOpenFolderTimer(): void {\n        if (this.openFolderTimer) {\n            clearTimeout(this.openFolderTimer);\n            this.openFolderTimer = null;\n        }\n    }\n\n    private moveItem(positionInfo: PositionInfo): void {\n        if (\n            this.currentItem &&\n            this.hoveredArea &&\n            this.hoveredArea.position !== Position.None &&\n            this.canMoveToArea(this.hoveredArea)\n        ) {\n            const movedNode = this.currentItem.node;\n            const targetNode = this.hoveredArea.node;\n            const position = this.hoveredArea.position;\n            const previousParent = movedNode.parent;\n\n            if (position === Position.Inside) {\n                this.hoveredArea.node.is_open = true;\n            }\n\n            const doMove = (): void => {\n                this.treeWidget.tree.moveNode(movedNode, targetNode, position);\n                this.treeWidget.element.empty();\n                this.treeWidget._refreshElements(null);\n            };\n\n            const event = this.treeWidget._triggerEvent(\"tree.move\", {\n                move_info: {\n                    moved_node: movedNode,\n                    target_node: targetNode,\n                    position: getPositionName(position),\n                    previous_parent: previousParent,\n                    do_move: doMove,\n                    original_event: positionInfo.originalEvent,\n                },\n            });\n\n            if (!event.isDefaultPrevented()) {\n                doMove();\n            }\n        }\n    }\n\n    private getTreeDimensions(): Dimensions {\n        // Return the dimensions of the tree. Add a margin to the bottom to allow\n        // to drag-and-drop after the last element.\n        const offset = this.treeWidget.element.offset();\n\n        if (!offset) {\n            return { left: 0, top: 0, right: 0, bottom: 0 };\n        } else {\n            const el = this.treeWidget.element;\n            const width = el.width() || 0;\n            const height = el.height() || 0;\n            const left = offset.left + this.treeWidget._getScrollLeft();\n\n            return {\n                left,\n                top: offset.top,\n                right: left + width,\n                bottom: offset.top + height + 16,\n            };\n        }\n    }\n}\n","export const isInt = (n: unknown): boolean =>\n    typeof n === \"number\" && n % 1 === 0;\n\nexport const isFunction = (v: unknown): boolean => typeof v === \"function\";\n\nexport const getBoolString = (value: unknown): string =>\n    value ? \"true\" : \"false\";\n","import { getBoolString } from \"./util\";\nimport { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\ntype IconElement = string | HTMLElement | JQuery<HTMLElement>;\n\nexport default class ElementsRenderer {\n    public openedIconElement?: HTMLElement | Text;\n    public closedIconElement?: HTMLElement | Text;\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        this.openedIconElement = this.createButtonElement(\n            treeWidget.options.openedIcon || \"+\",\n        );\n        this.closedIconElement = this.createButtonElement(\n            treeWidget.options.closedIcon || \"-\",\n        );\n    }\n\n    public render(fromNode: Node | null): void {\n        if (fromNode && fromNode.parent) {\n            this.renderFromNode(fromNode);\n        } else {\n            this.renderFromRoot();\n        }\n    }\n\n    public renderFromRoot(): void {\n        const $element = this.treeWidget.element;\n        $element.empty();\n\n        if ($element[0]) {\n            this.createDomElements(\n                $element[0],\n                this.treeWidget.tree.children,\n                true,\n                1,\n            );\n        }\n    }\n\n    public renderFromNode(node: Node): void {\n        // remember current li\n        const $previousLi = jQuery(node.element);\n\n        // create element\n        const li = this.createLi(node, node.getLevel());\n        this.attachNodeData(node, li);\n\n        // add element to dom\n        $previousLi.after(li);\n\n        // remove previous li\n        $previousLi.remove();\n\n        // create children\n        if (node.children) {\n            this.createDomElements(\n                li,\n                node.children,\n                false,\n                node.getLevel() + 1,\n            );\n        }\n    }\n\n    private createDomElements(\n        element: Element,\n        children: Node[],\n        isRootNode: boolean,\n        level: number,\n    ): void {\n        const ul = this.createUl(isRootNode);\n        element.appendChild(ul);\n\n        for (const child of children) {\n            const li = this.createLi(child, level);\n            ul.appendChild(li);\n\n            this.attachNodeData(child, li);\n\n            if (child.hasChildren()) {\n                this.createDomElements(li, child.children, false, level + 1);\n            }\n        }\n    }\n\n    private attachNodeData(node: Node, li: HTMLElement): void {\n        node.element = li;\n        jQuery(li).data(\"node\", node);\n    }\n\n    private createUl(isRootNode: boolean): HTMLUListElement {\n        let classString;\n        let role;\n\n        if (!isRootNode) {\n            classString = \"\";\n            role = \"group\";\n        } else {\n            classString = \"jqtree-tree\";\n            role = \"tree\";\n\n            if (this.treeWidget.options.rtl) {\n                classString += \" jqtree-rtl\";\n            }\n        }\n\n        if (this.treeWidget.options.dragAndDrop) {\n            classString += \" jqtree-dnd\";\n        }\n\n        const ul = document.createElement(\"ul\");\n        ul.className = `jqtree_common ${classString}`;\n\n        ul.setAttribute(\"role\", role);\n\n        return ul;\n    }\n\n    private createLi(node: Node, level: number): HTMLLIElement {\n        const isSelected = Boolean(\n            this.treeWidget.selectNodeHandler.isNodeSelected(node),\n        );\n\n        const mustShowFolder =\n            node.isFolder() ||\n            (node.isEmptyFolder && this.treeWidget.options.showEmptyFolder);\n\n        const li = mustShowFolder\n            ? this.createFolderLi(node, level, isSelected)\n            : this.createNodeLi(node, level, isSelected);\n\n        if (this.treeWidget.options.onCreateLi) {\n            this.treeWidget.options.onCreateLi(node, jQuery(li), isSelected);\n        }\n\n        return li;\n    }\n\n    private setTreeItemAriaAttributes(\n        element: HTMLElement,\n        name: string,\n        level: number,\n        isSelected: boolean,\n    ) {\n        element.setAttribute(\"aria-label\", name);\n        element.setAttribute(\"aria-level\", `${level}`);\n        element.setAttribute(\"aria-selected\", getBoolString(isSelected));\n        element.setAttribute(\"role\", \"treeitem\");\n    }\n\n    private createFolderLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const buttonClasses = this.getButtonClasses(node);\n        const folderClasses = this.getFolderClasses(node, isSelected);\n\n        const iconElement = node.is_open\n            ? this.openedIconElement\n            : this.closedIconElement;\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = `jqtree_common ${folderClasses}`;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // button link\n        const buttonLink = document.createElement(\"a\");\n        buttonLink.className = buttonClasses;\n\n        if (iconElement) {\n            buttonLink.appendChild(iconElement.cloneNode(true));\n        }\n\n        if (this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            true,\n            level,\n        );\n        titleSpan.setAttribute(\"aria-expanded\", getBoolString(node.is_open));\n        div.appendChild(titleSpan);\n\n        if (!this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        return li;\n    }\n\n    private createNodeLi(\n        node: Node,\n        level: number,\n        isSelected: boolean,\n    ): HTMLLIElement {\n        const liClasses = [\"jqtree_common\"];\n\n        if (isSelected) {\n            liClasses.push(\"jqtree-selected\");\n        }\n\n        const classString = liClasses.join(\" \");\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = classString;\n        li.setAttribute(\"role\", \"none\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"none\");\n\n        li.appendChild(div);\n\n        // title span\n        const titleSpan = this.createTitleSpan(\n            node.name,\n            isSelected,\n            false,\n            level,\n        );\n        div.appendChild(titleSpan);\n\n        return li;\n    }\n\n    private createTitleSpan(\n        nodeName: string,\n        isSelected: boolean,\n        isFolder: boolean,\n        level: number,\n    ): HTMLSpanElement {\n        const titleSpan = document.createElement(\"span\");\n\n        let classes = \"jqtree-title jqtree_common\";\n\n        if (isFolder) {\n            classes += \" jqtree-title-folder\";\n        }\n\n        classes += ` jqtree-title-button-${\n            this.treeWidget.options.buttonLeft ? \"left\" : \"right\"\n        }`;\n\n        titleSpan.className = classes;\n\n        if (isSelected) {\n            const tabIndex = this.treeWidget.options.tabIndex;\n\n            if (tabIndex !== undefined) {\n                titleSpan.setAttribute(\"tabindex\", `${tabIndex}`);\n            }\n        }\n\n        this.setTreeItemAriaAttributes(titleSpan, nodeName, level, isSelected);\n\n        if (this.treeWidget.options.autoEscape) {\n            titleSpan.textContent = nodeName;\n        } else {\n            titleSpan.innerHTML = nodeName;\n        }\n\n        return titleSpan;\n    }\n\n    private getButtonClasses(node: Node): string {\n        const classes = [\"jqtree-toggler\", \"jqtree_common\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (this.treeWidget.options.buttonLeft) {\n            classes.push(\"jqtree-toggler-left\");\n        } else {\n            classes.push(\"jqtree-toggler-right\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private getFolderClasses(node: Node, isSelected: boolean): string {\n        const classes = [\"jqtree-folder\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (isSelected) {\n            classes.push(\"jqtree-selected\");\n        }\n\n        if (node.is_loading) {\n            classes.push(\"jqtree-loading\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private createButtonElement(\n        value: IconElement,\n    ): HTMLElement | Text | undefined {\n        if (typeof value === \"string\") {\n            // convert value to html\n            const div = document.createElement(\"div\");\n            div.innerHTML = value;\n\n            return document.createTextNode(div.innerHTML);\n        } else if (value == null) {\n            return undefined;\n        } else if ((value as HTMLElement).nodeType) {\n            return value as HTMLElement;\n        } else {\n            return jQuery(value)[0];\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport type HandleFinishedLoading = () => void;\n\nexport default class DataLoader {\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n    }\n\n    public loadFromUrl(\n        urlInfo: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null\n    ): void {\n        if (!urlInfo) {\n            return;\n        }\n\n        const $el = this.getDomElement(parentNode);\n        this.addLoadingClass($el);\n        this.notifyLoading(true, parentNode, $el);\n\n        const stopLoading = (): void => {\n            this.removeLoadingClass($el);\n            this.notifyLoading(false, parentNode, $el);\n        };\n\n        const handleSuccess = (data: string | NodeData[]): void => {\n            stopLoading();\n            this.treeWidget.loadData(this.parseData(data), parentNode);\n\n            if (onFinished && typeof onFinished === \"function\") {\n                onFinished();\n            }\n        };\n\n        const handleError = (jqXHR: JQuery.jqXHR): void => {\n            stopLoading();\n\n            if (this.treeWidget.options.onLoadFailed) {\n                this.treeWidget.options.onLoadFailed(jqXHR);\n            }\n        };\n\n        this.submitRequest(urlInfo, handleSuccess, handleError);\n    }\n\n    private addLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.addClass(\"jqtree-loading\");\n        }\n    }\n\n    private removeLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.removeClass(\"jqtree-loading\");\n        }\n    }\n\n    private getDomElement(parentNode: Node | null): JQuery<HTMLElement> {\n        if (parentNode) {\n            return jQuery(parentNode.element);\n        } else {\n            return this.treeWidget.element;\n        }\n    }\n\n    private notifyLoading(\n        isLoading: boolean,\n        node: Node | null,\n        $el: JQuery\n    ): void {\n        if (this.treeWidget.options.onLoading) {\n            this.treeWidget.options.onLoading(isLoading, node, $el);\n        }\n\n        this.treeWidget._triggerEvent(\"tree.loading_data\", {\n            isLoading,\n            node,\n            $el,\n        });\n    }\n\n    private submitRequest(\n        urlInfoInput: string | JQuery.AjaxSettings,\n        handleSuccess: JQuery.Ajax.SuccessCallback<any>,\n        handleError: JQuery.Ajax.ErrorCallback<any>\n    ): void {\n        const urlInfo =\n            typeof urlInfoInput === \"string\"\n                ? { url: urlInfoInput }\n                : urlInfoInput;\n\n        const ajaxSettings: JQuery.AjaxSettings = {\n            method: \"GET\",\n            cache: false,\n            dataType: \"json\",\n            success: handleSuccess,\n            error: handleError,\n            ...urlInfo,\n        };\n\n        ajaxSettings.method = ajaxSettings.method?.toUpperCase() || \"GET\";\n\n        void jQuery.ajax(ajaxSettings);\n    }\n\n    private parseData(data: string | NodeData[]): NodeData[] {\n        const { dataFilter } = this.treeWidget.options;\n\n        const getParsedData = () => {\n            if (typeof data === \"string\") {\n                return JSON.parse(data) as NodeData[];\n            } else {\n                return data;\n            }\n        };\n\n        const parsedData = getParsedData();\n\n        if (dataFilter) {\n            return dataFilter(parsedData);\n        } else {\n            return parsedData;\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport default class KeyHandler {\n    private static LEFT = 37;\n    private static UP = 38;\n    private static RIGHT = 39;\n    private static DOWN = 40;\n\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        if (treeWidget.options.keyboardSupport) {\n            jQuery(document).on(\"keydown.jqtree\", this.handleKeyDown);\n        }\n    }\n\n    public deinit(): void {\n        jQuery(document).off(\"keydown.jqtree\");\n    }\n\n    public moveDown(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getNextVisibleNode());\n    }\n\n    public moveUp(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getPreviousVisibleNode());\n    }\n\n    public moveRight(selectedNode: Node): boolean {\n        if (!selectedNode.isFolder()) {\n            return true;\n        } else {\n            // folder node\n            if (selectedNode.is_open) {\n                // Right moves to the first child of an open node\n                return this.selectNode(selectedNode.getNextVisibleNode());\n            } else {\n                // Right expands a closed node\n                this.treeWidget.openNode(selectedNode);\n                return false;\n            }\n        }\n    }\n\n    public moveLeft(selectedNode: Node): boolean {\n        if (selectedNode.isFolder() && selectedNode.is_open) {\n            // Left on an open node closes the node\n            this.treeWidget.closeNode(selectedNode);\n            return false;\n        } else {\n            // Left on a closed or end node moves focus to the node's parent\n            return this.selectNode(selectedNode.getParent());\n        }\n    }\n\n    public selectNode(node: Node | null): boolean {\n        if (!node) {\n            return true;\n        } else {\n            this.treeWidget.selectNode(node);\n\n            if (\n                !this.treeWidget.scrollHandler.isScrolledIntoView(\n                    jQuery(node.element).find(\".jqtree-element\")\n                )\n            ) {\n                this.treeWidget.scrollToNode(node);\n            }\n\n            return false;\n        }\n    }\n\n    private handleKeyDown = (e: JQuery.Event): boolean => {\n        if (!this.canHandleKeyboard()) {\n            return true;\n        }\n\n        const selectedNode = this.treeWidget.getSelectedNode();\n        if (!selectedNode) {\n            return true;\n        }\n\n        const key = e.which;\n\n        switch (key) {\n            case KeyHandler.DOWN:\n                return this.moveDown(selectedNode);\n\n            case KeyHandler.UP:\n                return this.moveUp(selectedNode);\n\n            case KeyHandler.RIGHT:\n                return this.moveRight(selectedNode);\n\n            case KeyHandler.LEFT:\n                return this.moveLeft(selectedNode);\n\n            default:\n                return true;\n        }\n    };\n\n    private canHandleKeyboard(): boolean {\n        return (\n            (this.treeWidget.options.keyboardSupport || false) &&\n            this.treeWidget.selectNodeHandler.isFocusOnTree()\n        );\n    }\n}\n","const register = (widgetClass: unknown, widgetName: string): void => {\n    const getDataKey = (): string => `simple_widget_${widgetName}`;\n\n    const getWidgetData = (\n        el: HTMLElement,\n        dataKey: string\n    ): SimpleWidget<unknown> | null => {\n        const widget = jQuery.data(el, dataKey) as unknown;\n\n        if (widget && widget instanceof SimpleWidget) {\n            return widget;\n        } else {\n            return null;\n        }\n    };\n\n    const createWidget = ($el: JQuery, options: unknown): JQuery => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const existingWidget = getWidgetData(el, dataKey);\n\n            if (!existingWidget) {\n                const simpleWidgetClass = widgetClass as typeof SimpleWidget;\n                const widget = new simpleWidgetClass(el, options);\n\n                if (!jQuery.data(el, dataKey)) {\n                    jQuery.data(el, dataKey, widget);\n                }\n\n                // Call init after setting data, so we can call methods\n                widget.init();\n            }\n        }\n\n        return $el;\n    };\n\n    const destroyWidget = ($el: JQuery): void => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const widget = getWidgetData(el, dataKey);\n\n            if (widget) {\n                widget.destroy();\n            }\n\n            jQuery.removeData(el, dataKey);\n        }\n    };\n\n    const callFunction = (\n        $el: JQuery,\n        functionName: string,\n        args: unknown[]\n    ): unknown => {\n        let result = null;\n\n        for (const el of $el.get()) {\n            const widget = jQuery.data(el, getDataKey()) as unknown;\n\n            if (widget && widget instanceof SimpleWidget) {\n                const simpleWidget = widget as SimpleWidget<unknown>;\n                const widgetFunction = simpleWidget[functionName];\n\n                if (widgetFunction && typeof widgetFunction === \"function\") {\n                    result = widgetFunction.apply(widget, args) as unknown;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (jQuery.fn as any)[widgetName] = function (\n        this: JQuery,\n        argument1: unknown,\n        ...args: unknown[]\n    ) {\n        if (!argument1) {\n            return createWidget(this, null);\n        } else if (typeof argument1 === \"object\") {\n            const options = argument1 as unknown;\n            return createWidget(this, options);\n        } else if (typeof argument1 === \"string\" && argument1[0] !== \"_\") {\n            const functionName = argument1;\n\n            if (functionName === \"destroy\") {\n                return destroyWidget(this);\n            } else if (functionName === \"get_widget_class\") {\n                return widgetClass;\n            } else {\n                return callFunction(this, functionName, args);\n            }\n        } else {\n            return undefined;\n        }\n    };\n};\n\nexport default class SimpleWidget<WidgetOptions> {\n    public static register(widgetClass: unknown, widgetName: string): void {\n        register(widgetClass, widgetName);\n    }\n\n    [key: string]: unknown;\n\n    protected static defaults: unknown = {};\n\n    public options: WidgetOptions;\n\n    public $el: JQuery<HTMLElement>;\n\n    constructor(el: HTMLElement, options: WidgetOptions) {\n        this.$el = jQuery(el);\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const defaults = (this.constructor as any)[\"defaults\"] as WidgetOptions;\n        this.options = { ...defaults, ...options };\n    }\n\n    public destroy(): void {\n        this.deinit();\n    }\n\n    public init(): void {\n        //\n    }\n\n    public deinit(): void {\n        //\n    }\n}\n","/*\nThis widget does the same a the mouse widget in jqueryui.\n*/\nimport SimpleWidget from \"./simple.widget\";\nimport { PositionInfo } from \"./types\";\n\nconst getPositionInfoFromMouseEvent = (e: MouseEvent): PositionInfo => ({\n    pageX: e.pageX,\n    pageY: e.pageY,\n    target: e.target as HTMLElement,\n    originalEvent: e,\n});\n\nconst getPositionInfoFromTouch = (\n    touch: Touch,\n    e: TouchEvent\n): PositionInfo => ({\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    target: touch.target as HTMLElement,\n    originalEvent: e,\n});\n\nabstract class MouseWidget<WidgetOptions> extends SimpleWidget<WidgetOptions> {\n    protected isMouseStarted: boolean;\n    protected mouseDownInfo: PositionInfo | null;\n    private mouseDelayTimer: number | null;\n    private isMouseDelayMet: boolean;\n\n    public init(): void {\n        const element = this.$el.get(0);\n\n        if (element) {\n            element.addEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n            element.addEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.isMouseStarted = false;\n        this.mouseDelayTimer = null;\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n    }\n\n    public deinit(): void {\n        const el = this.$el.get(0);\n\n        if (el) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.removeMouseMoveEventListeners();\n    }\n\n    protected abstract mouseCapture(positionInfo: PositionInfo): boolean | null;\n\n    protected abstract mouseStart(positionInfo: PositionInfo): boolean;\n\n    protected abstract mouseDrag(positionInfo: PositionInfo): void;\n\n    protected abstract mouseStop(positionInfo: PositionInfo): void;\n\n    protected abstract getMouseDelay(): number;\n\n    private mouseDown = (e: MouseEvent): void => {\n        // Left mouse button?\n        if (e.button !== 0) {\n            return;\n        }\n\n        const result = this.handleMouseDown(getPositionInfoFromMouseEvent(e));\n\n        if (result && e.cancelable) {\n            e.preventDefault();\n        }\n    };\n\n    private handleMouseDown(positionInfo: PositionInfo): boolean {\n        // We may have missed mouseup (out of window)\n        if (this.isMouseStarted) {\n            this.handleMouseUp(positionInfo);\n        }\n\n        this.mouseDownInfo = positionInfo;\n\n        if (!this.mouseCapture(positionInfo)) {\n            return false;\n        }\n\n        this.handleStartMouse();\n\n        return true;\n    }\n\n    private handleStartMouse(): void {\n        document.addEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        document.addEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        document.addEventListener(\"mouseup\", this.mouseUp, { passive: false });\n        document.addEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n\n        const mouseDelay = this.getMouseDelay();\n\n        if (mouseDelay) {\n            this.startMouseDelayTimer(mouseDelay);\n        } else {\n            this.isMouseDelayMet = true;\n        }\n    }\n\n    private startMouseDelayTimer(mouseDelay: number): void {\n        if (this.mouseDelayTimer) {\n            clearTimeout(this.mouseDelayTimer);\n        }\n\n        this.mouseDelayTimer = window.setTimeout(() => {\n            if (this.mouseDownInfo) {\n                this.isMouseDelayMet = true;\n            }\n        }, mouseDelay);\n\n        this.isMouseDelayMet = false;\n    }\n\n    private mouseMove = (e: MouseEvent): void => {\n        this.handleMouseMove(e, getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseMove(\n        e: MouseEvent | TouchEvent,\n        positionInfo: PositionInfo\n    ): void {\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n            return;\n        }\n\n        if (!this.isMouseDelayMet) {\n            return;\n        }\n\n        if (this.mouseDownInfo) {\n            this.isMouseStarted = this.mouseStart(this.mouseDownInfo) !== false;\n        }\n\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n        } else {\n            this.handleMouseUp(positionInfo);\n        }\n    }\n\n    private mouseUp = (e: MouseEvent): void => {\n        this.handleMouseUp(getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseUp(positionInfo: PositionInfo): void {\n        this.removeMouseMoveEventListeners();\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n\n        if (this.isMouseStarted) {\n            this.isMouseStarted = false;\n            this.mouseStop(positionInfo);\n        }\n    }\n\n    private removeMouseMoveEventListeners() {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mouseup\", this.mouseUp, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n    }\n\n    private touchStart = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseDown(getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchMove = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseMove(e, getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchEnd = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        if (!touch) {\n            return;\n        }\n\n        this.handleMouseUp(getPositionInfoFromTouch(touch, e));\n    };\n}\n\nexport default MouseWidget;\n","import { isInt } from \"./util\";\nimport { JqTreeWidget } from \"./tree.jquery\";\nimport { Node } from \"./node\";\n\nexport interface SavedState {\n    open_nodes: NodeId[];\n    selected_node: NodeId[];\n}\n\nexport default class SaveStateHandler {\n    private treeWidget: JqTreeWidget;\n    private _supportsLocalStorage: boolean | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n    }\n\n    public saveState(): void {\n        const state = JSON.stringify(this.getState());\n\n        if (this.treeWidget.options.onSetStateFromStorage) {\n            this.treeWidget.options.onSetStateFromStorage(state);\n        } else if (this.supportsLocalStorage()) {\n            localStorage.setItem(this.getKeyName(), state);\n        }\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        const jsonData = this.loadFromStorage();\n\n        if (jsonData) {\n            return this.parseState(jsonData) as unknown as SavedState;\n        } else {\n            return null;\n        }\n    }\n\n    public getState(): SavedState {\n        const getOpenNodeIds = (): NodeId[] => {\n            const openNodes: NodeId[] = [];\n\n            this.treeWidget.tree.iterate((node: Node) => {\n                if (node.is_open && node.id && node.hasChildren()) {\n                    openNodes.push(node.id);\n                }\n                return true;\n            });\n\n            return openNodes;\n        };\n\n        const getSelectedNodeIds = (): NodeId[] => {\n            const selectedNodeIds: NodeId[] = [];\n\n            this.treeWidget.getSelectedNodes().forEach((node) => {\n                if (node.id != null) {\n                    selectedNodeIds.push(node.id);\n                }\n            });\n\n            return selectedNodeIds;\n        };\n\n        return {\n            open_nodes: getOpenNodeIds(),\n            selected_node: getSelectedNodeIds(),\n        };\n    }\n\n    /*\n    Set initial state\n    Don't handle nodes that are loaded on demand\n\n    result: must load on demand\n    */\n    public setInitialState(state: SavedState): boolean {\n        if (!state) {\n            return false;\n        } else {\n            let mustLoadOnDemand = false;\n\n            if (state.open_nodes) {\n                mustLoadOnDemand = this.openInitialNodes(state.open_nodes);\n            }\n\n            if (state.selected_node) {\n                this.resetSelection();\n                this.selectInitialNodes(state.selected_node);\n            }\n\n            return mustLoadOnDemand;\n        }\n    }\n\n    public setInitialStateOnDemand(\n        state: SavedState,\n        cbFinished: () => void\n    ): void {\n        if (state) {\n            this.doSetInitialStateOnDemand(\n                state.open_nodes,\n                state.selected_node,\n                cbFinished\n            );\n        } else {\n            cbFinished();\n        }\n    }\n\n    public getNodeIdToBeSelected(): NodeId | null {\n        const state = this.getStateFromStorage();\n\n        if (state && state.selected_node) {\n            return state.selected_node[0] || null;\n        } else {\n            return null;\n        }\n    }\n\n    private parseState(jsonData: string): SavedState {\n        const state = JSON.parse(jsonData) as Record<string, unknown>;\n\n        // Check if selected_node is an int (instead of an array)\n        if (state && state.selected_node && isInt(state.selected_node)) {\n            // Convert to array\n            state.selected_node = [state.selected_node];\n        }\n\n        return state as unknown as SavedState;\n    }\n\n    private loadFromStorage(): string | null {\n        if (this.treeWidget.options.onGetStateFromStorage) {\n            return this.treeWidget.options.onGetStateFromStorage();\n        } else if (this.supportsLocalStorage()) {\n            return localStorage.getItem(this.getKeyName());\n        } else {\n            return null;\n        }\n    }\n\n    private openInitialNodes(nodeIds: NodeId[]): boolean {\n        let mustLoadOnDemand = false;\n\n        for (const nodeId of nodeIds) {\n            const node = this.treeWidget.getNodeById(nodeId);\n\n            if (node) {\n                if (!node.load_on_demand) {\n                    node.is_open = true;\n                } else {\n                    mustLoadOnDemand = true;\n                }\n            }\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    private selectInitialNodes(nodeIds: NodeId[]): boolean {\n        let selectCount = 0;\n\n        for (const nodeId of nodeIds) {\n            const node = this.treeWidget.getNodeById(nodeId);\n\n            if (node) {\n                selectCount += 1;\n\n                this.treeWidget.selectNodeHandler.addToSelection(node);\n            }\n        }\n\n        return selectCount !== 0;\n    }\n\n    private resetSelection(): void {\n        const selectNodeHandler = this.treeWidget.selectNodeHandler;\n\n        const selectedNodes = selectNodeHandler.getSelectedNodes();\n\n        selectedNodes.forEach((node) => {\n            selectNodeHandler.removeFromSelection(node);\n        });\n    }\n\n    private doSetInitialStateOnDemand(\n        nodeIdsParam: NodeId[],\n        selectedNodes: NodeId[],\n        cbFinished: () => void\n    ): void {\n        let loadingCount = 0;\n        let nodeIds = nodeIdsParam;\n\n        const openNodes = (): void => {\n            const newNodesIds = [];\n\n            for (const nodeId of nodeIds) {\n                const node = this.treeWidget.getNodeById(nodeId);\n\n                if (!node) {\n                    newNodesIds.push(nodeId);\n                } else {\n                    if (!node.is_loading) {\n                        if (node.load_on_demand) {\n                            loadAndOpenNode(node);\n                        } else {\n                            this.treeWidget._openNode(node, false, null);\n                        }\n                    }\n                }\n            }\n\n            nodeIds = newNodesIds;\n\n            if (this.selectInitialNodes(selectedNodes)) {\n                this.treeWidget._refreshElements(null);\n            }\n\n            if (loadingCount === 0) {\n                cbFinished();\n            }\n        };\n\n        const loadAndOpenNode = (node: Node): void => {\n            loadingCount += 1;\n            this.treeWidget._openNode(node, false, () => {\n                loadingCount -= 1;\n                openNodes();\n            });\n        };\n\n        openNodes();\n    }\n\n    private getKeyName(): string {\n        if (typeof this.treeWidget.options.saveState === \"string\") {\n            return this.treeWidget.options.saveState;\n        } else {\n            return \"tree\";\n        }\n    }\n\n    private supportsLocalStorage(): boolean {\n        const testSupport = (): boolean => {\n            // Is local storage supported?\n            if (localStorage == null) {\n                return false;\n            } else {\n                // Check if it's possible to store an item. Safari does not allow this in private browsing mode.\n                try {\n                    const key = \"_storage_test\";\n                    sessionStorage.setItem(key, \"value\");\n                    sessionStorage.removeItem(key);\n                } catch (error) {\n                    return false;\n                }\n\n                return true;\n            }\n        };\n\n        if (this._supportsLocalStorage == null) {\n            this._supportsLocalStorage = testSupport();\n        }\n\n        return this._supportsLocalStorage;\n    }\n}\n","import { JqTreeWidget } from \"./tree.jquery\";\nimport { HitArea, PositionInfo } from \"./types\";\n\nexport default class ScrollHandler {\n    private treeWidget: JqTreeWidget;\n    private previousTop: number;\n    private isInitialized: boolean;\n    private $scrollParent: JQuery | null;\n    private scrollParentTop: number;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n        this.previousTop = -1;\n        this.isInitialized = false;\n    }\n\n    public checkScrolling(): void {\n        this.ensureInit();\n        this.checkVerticalScrolling();\n        this.checkHorizontalScrolling();\n    }\n\n    public scrollToY(top: number): void {\n        this.ensureInit();\n\n        if (this.$scrollParent && this.$scrollParent[0]) {\n            this.$scrollParent[0].scrollTop = top;\n        } else {\n            const offset = this.treeWidget.$el.offset();\n            const treeTop = offset ? offset.top : 0;\n\n            jQuery(document).scrollTop(top + treeTop);\n        }\n    }\n\n    public isScrolledIntoView($element: JQuery): boolean {\n        this.ensureInit();\n\n        let elementBottom: number;\n        let viewBottom: number;\n        let elementTop: number;\n        let viewTop: number;\n\n        const elHeight = $element.height() || 0;\n\n        if (this.$scrollParent) {\n            viewTop = 0;\n            viewBottom = this.$scrollParent.height() || 0;\n\n            const offset = $element.offset();\n            const originalTop = offset ? offset.top : 0;\n\n            elementTop = originalTop - this.scrollParentTop;\n            elementBottom = elementTop + elHeight;\n        } else {\n            viewTop = jQuery(window).scrollTop() || 0;\n\n            const windowHeight = jQuery(window).height() || 0;\n            viewBottom = viewTop + windowHeight;\n\n            const offset = $element.offset();\n\n            elementTop = offset ? offset.top : 0;\n            elementBottom = elementTop + elHeight;\n        }\n\n        return elementBottom <= viewBottom && elementTop >= viewTop;\n    }\n\n    public getScrollLeft(): number {\n        if (!this.$scrollParent) {\n            return 0;\n        } else {\n            return this.$scrollParent.scrollLeft() || 0;\n        }\n    }\n\n    private initScrollParent(): void {\n        const getParentWithOverflow = (): JQuery | null => {\n            const cssAttributes = [\"overflow\", \"overflow-y\"];\n\n            const hasOverFlow = ($el: JQuery): boolean => {\n                for (const attr of cssAttributes) {\n                    const overflowValue = $el.css(attr);\n                    if (\n                        overflowValue === \"auto\" ||\n                        overflowValue === \"scroll\"\n                    ) {\n                        return true;\n                    }\n                }\n\n                return false;\n            };\n\n            if (hasOverFlow(this.treeWidget.$el)) {\n                return this.treeWidget.$el;\n            }\n\n            for (const el of this.treeWidget.$el.parents().get()) {\n                const $el = jQuery(el);\n                if (hasOverFlow($el)) {\n                    return $el;\n                }\n            }\n\n            return null;\n        };\n\n        const setDocumentAsScrollParent = (): void => {\n            this.scrollParentTop = 0;\n            this.$scrollParent = null;\n        };\n\n        if (this.treeWidget.$el.css(\"position\") === \"fixed\") {\n            setDocumentAsScrollParent();\n        }\n\n        const $scrollParent = getParentWithOverflow();\n\n        if (\n            $scrollParent &&\n            $scrollParent.length &&\n            $scrollParent[0]?.tagName !== \"HTML\"\n        ) {\n            this.$scrollParent = $scrollParent;\n\n            const offset = this.$scrollParent.offset();\n            this.scrollParentTop = offset ? offset.top : 0;\n        } else {\n            setDocumentAsScrollParent();\n        }\n\n        this.isInitialized = true;\n    }\n\n    private ensureInit(): void {\n        if (!this.isInitialized) {\n            this.initScrollParent();\n        }\n    }\n\n    private handleVerticalScrollingWithScrollParent(area: HitArea): void {\n        const scrollParent = this.$scrollParent && this.$scrollParent[0];\n\n        if (!scrollParent) {\n            return;\n        }\n\n        const distanceBottom =\n            this.scrollParentTop + scrollParent.offsetHeight - area.bottom;\n\n        if (distanceBottom < 20) {\n            scrollParent.scrollTop += 20;\n            this.treeWidget.refreshHitAreas();\n            this.previousTop = -1;\n        } else if (area.top - this.scrollParentTop < 20) {\n            scrollParent.scrollTop -= 20;\n            this.treeWidget.refreshHitAreas();\n            this.previousTop = -1;\n        }\n    }\n\n    private handleVerticalScrollingWithDocument(area: HitArea): void {\n        const scrollTop = jQuery(document).scrollTop() || 0;\n        const distanceTop = area.top - scrollTop;\n\n        if (distanceTop < 20) {\n            jQuery(document).scrollTop(scrollTop - 20);\n        } else {\n            const windowHeight = jQuery(window).height() || 0;\n\n            if (windowHeight - (area.bottom - scrollTop) < 20) {\n                jQuery(document).scrollTop(scrollTop + 20);\n            }\n        }\n    }\n\n    private checkVerticalScrolling(): void {\n        const hoveredArea = this.treeWidget.dndHandler.hoveredArea;\n\n        if (hoveredArea && hoveredArea.top !== this.previousTop) {\n            this.previousTop = hoveredArea.top;\n\n            if (this.$scrollParent) {\n                this.handleVerticalScrollingWithScrollParent(hoveredArea);\n            } else {\n                this.handleVerticalScrollingWithDocument(hoveredArea);\n            }\n        }\n    }\n\n    private checkHorizontalScrolling(): void {\n        const positionInfo = this.treeWidget.dndHandler.positionInfo;\n\n        if (!positionInfo) {\n            return;\n        }\n\n        if (this.$scrollParent) {\n            this.handleHorizontalScrollingWithParent(positionInfo);\n        } else {\n            this.handleHorizontalScrollingWithDocument(positionInfo);\n        }\n    }\n\n    private handleHorizontalScrollingWithParent(\n        positionInfo: PositionInfo\n    ): void {\n        if (\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return;\n        }\n\n        const $scrollParent = this.$scrollParent;\n        const scrollParentOffset = $scrollParent && $scrollParent.offset();\n\n        if (!($scrollParent && scrollParentOffset)) {\n            return;\n        }\n\n        const scrollParent = $scrollParent[0];\n\n        if (!scrollParent) {\n            return;\n        }\n\n        const canScrollRight =\n            scrollParent.scrollLeft + scrollParent.clientWidth <\n            scrollParent.scrollWidth;\n        const canScrollLeft = scrollParent.scrollLeft > 0;\n\n        const rightEdge = scrollParentOffset.left + scrollParent.clientWidth;\n        const leftEdge = scrollParentOffset.left;\n        const isNearRightEdge = positionInfo.pageX > rightEdge - 20;\n        const isNearLeftEdge = positionInfo.pageX < leftEdge + 20;\n\n        if (isNearRightEdge && canScrollRight) {\n            scrollParent.scrollLeft = Math.min(\n                scrollParent.scrollLeft + 20,\n                scrollParent.scrollWidth\n            );\n        } else if (isNearLeftEdge && canScrollLeft) {\n            scrollParent.scrollLeft = Math.max(scrollParent.scrollLeft - 20, 0);\n        }\n    }\n\n    private handleHorizontalScrollingWithDocument(\n        positionInfo: PositionInfo\n    ): void {\n        if (\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return;\n        }\n\n        const $document = jQuery(document);\n\n        const scrollLeft = $document.scrollLeft() || 0;\n        const windowWidth = jQuery(window).width() || 0;\n\n        const canScrollLeft = scrollLeft > 0;\n\n        const isNearRightEdge = positionInfo.pageX > windowWidth - 20;\n        const isNearLeftEdge = positionInfo.pageX - scrollLeft < 20;\n\n        if (isNearRightEdge) {\n            $document.scrollLeft(scrollLeft + 20);\n        } else if (isNearLeftEdge && canScrollLeft) {\n            $document.scrollLeft(Math.max(scrollLeft - 20, 0));\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport default class SelectNodeHandler {\n    private treeWidget: JqTreeWidget;\n    private selectedNodes: Set<NodeId>;\n    private selectedSingleNode: Node | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n        this.selectedNodes = new Set<NodeId>();\n        this.clear();\n    }\n\n    public getSelectedNode(): Node | false {\n        const selectedNodes = this.getSelectedNodes();\n\n        if (selectedNodes.length) {\n            return selectedNodes[0] || false;\n        } else {\n            return false;\n        }\n    }\n\n    public getSelectedNodes(): Node[] {\n        if (this.selectedSingleNode) {\n            return [this.selectedSingleNode];\n        } else {\n            const selectedNodes: Node[] = [];\n\n            this.selectedNodes.forEach((id) => {\n                const node = this.treeWidget.getNodeById(id);\n                if (node) {\n                    selectedNodes.push(node);\n                }\n            });\n\n            return selectedNodes;\n        }\n    }\n\n    public getSelectedNodesUnder(parent: Node): Node[] {\n        if (this.selectedSingleNode) {\n            if (parent.isParentOf(this.selectedSingleNode)) {\n                return [this.selectedSingleNode];\n            } else {\n                return [];\n            }\n        } else {\n            const selectedNodes = [];\n\n            for (const id in this.selectedNodes) {\n                if (\n                    Object.prototype.hasOwnProperty.call(this.selectedNodes, id)\n                ) {\n                    const node = this.treeWidget.getNodeById(id);\n                    if (node && parent.isParentOf(node)) {\n                        selectedNodes.push(node);\n                    }\n                }\n            }\n\n            return selectedNodes;\n        }\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (node.id != null) {\n            return this.selectedNodes.has(node.id);\n        } else if (this.selectedSingleNode) {\n            return this.selectedSingleNode.element === node.element;\n        } else {\n            return false;\n        }\n    }\n\n    public clear(): void {\n        this.selectedNodes.clear();\n        this.selectedSingleNode = null;\n    }\n\n    public removeFromSelection(node: Node, includeChildren = false): void {\n        if (node.id == null) {\n            if (\n                this.selectedSingleNode &&\n                node.element === this.selectedSingleNode.element\n            ) {\n                this.selectedSingleNode = null;\n            }\n        } else {\n            this.selectedNodes.delete(node.id);\n\n            if (includeChildren) {\n                node.iterate(() => {\n                    if (node.id != null) {\n                        this.selectedNodes.delete(node.id);\n                    }\n                    return true;\n                });\n            }\n        }\n    }\n\n    public addToSelection(node: Node): void {\n        if (node.id != null) {\n            this.selectedNodes.add(node.id);\n        } else {\n            this.selectedSingleNode = node;\n        }\n    }\n\n    public isFocusOnTree(): boolean {\n        const activeElement = document.activeElement;\n\n        return Boolean(\n            activeElement &&\n                activeElement.tagName === \"SPAN\" &&\n                this.treeWidget._containsElement(activeElement as HTMLElement)\n        );\n    }\n}\n","import { DropHint } from \"..//types\";\n\nclass BorderDropHint implements DropHint {\n    private hint?: HTMLElement;\n\n    constructor(element: HTMLElement, scrollLeft: number) {\n        const div = element.querySelector(\":scope > .jqtree-element\");\n\n        if (!div) {\n            this.hint = undefined;\n            return;\n        }\n\n        const width = Math.max(element.offsetWidth + scrollLeft - 4, 0);\n        const height = Math.max(element.clientHeight - 4, 0);\n\n        const hint = document.createElement(\"span\");\n        hint.className = \"jqtree-border\";\n        hint.style.width = `${width}px`;\n        hint.style.height = `${height}px`;\n\n        this.hint = hint;\n\n        div.append(this.hint);\n    }\n\n    public remove(): void {\n        this.hint?.remove();\n    }\n}\n\nexport default BorderDropHint;\n","import { Position, Node } from \"../node\";\nimport { DropHint } from \"../types\";\n\nclass GhostDropHint implements DropHint {\n    private element: HTMLElement;\n    private node: Node;\n    private ghost: HTMLElement;\n\n    constructor(node: Node, element: HTMLElement, position: Position) {\n        this.element = element;\n        this.node = node;\n        this.ghost = this.createGhostElement();\n\n        if (position === Position.After) {\n            this.moveAfter();\n        } else if (position === Position.Before) {\n            this.moveBefore();\n        } else if (position === Position.Inside) {\n            if (node.isFolder() && node.is_open) {\n                this.moveInsideOpenFolder();\n            } else {\n                this.moveInside();\n            }\n        }\n    }\n\n    public remove(): void {\n        this.ghost.remove();\n    }\n\n    private moveAfter(): void {\n        this.element.after(this.ghost);\n    }\n\n    private moveBefore(): void {\n        this.element.before(this.ghost);\n    }\n\n    private moveInsideOpenFolder(): void {\n        const childElement = this.node.children[0]?.element;\n\n        if (childElement) {\n            childElement.before(this.ghost);\n        }\n    }\n\n    private moveInside(): void {\n        this.element.after(this.ghost);\n        this.ghost.classList.add(\"jqtree-inside\");\n    }\n\n    private createGhostElement() {\n        const ghost = document.createElement(\"li\");\n        ghost.className = \"jqtree_common jqtree-ghost\";\n\n        const circleSpan = document.createElement(\"span\");\n        circleSpan.className = \"jqtree_common jqtree-circle\";\n        ghost.append(circleSpan);\n\n        const lineSpan = document.createElement(\"span\");\n        lineSpan.className = \"jqtree_common jqtree-line\";\n        ghost.append(lineSpan);\n\n        return ghost;\n    }\n}\n\nexport default GhostDropHint;\n","import { Position, Node } from \"../node\";\nimport { JqTreeWidget } from \"../tree.jquery\";\nimport { DropHint } from \"../types\";\nimport BorderDropHint from \"./borderDropHint\";\nimport GhostDropHint from \"./ghostDropHint\";\n\nclass NodeElement {\n    public node: Node;\n    public element: HTMLElement;\n    protected treeWidget: JqTreeWidget;\n\n    constructor(node: Node, treeWidget: JqTreeWidget) {\n        this.init(node, treeWidget);\n    }\n\n    public init(node: Node, treeWidget: JqTreeWidget): void {\n        this.node = node;\n        this.treeWidget = treeWidget;\n\n        if (!node.element) {\n            const element = this.treeWidget.element.get(0);\n\n            if (element) {\n                node.element = element;\n            }\n        }\n\n        if (node.element) {\n            this.element = node.element;\n        }\n    }\n\n    public addDropHint(position: number): DropHint {\n        if (this.mustShowBorderDropHint(position)) {\n            return new BorderDropHint(\n                this.element,\n                this.treeWidget._getScrollLeft(),\n            );\n        } else {\n            return new GhostDropHint(this.node, this.element, position);\n        }\n    }\n\n    public select(mustSetFocus: boolean): void {\n        this.element.classList.add(\"jqtree-selected\");\n\n        const titleSpan = this.getTitleSpan();\n        const tabIndex = this.treeWidget.options.tabIndex;\n\n        // Check for null or undefined\n        if (tabIndex != null) {\n            titleSpan.setAttribute(\"tabindex\", tabIndex.toString());\n        }\n\n        titleSpan.setAttribute(\"aria-selected\", \"true\");\n\n        if (mustSetFocus) {\n            titleSpan.focus();\n        }\n    }\n\n    public deselect(): void {\n        this.element.classList.remove(\"jqtree-selected\");\n\n        const titleSpan = this.getTitleSpan();\n        titleSpan.removeAttribute(\"tabindex\");\n        titleSpan.setAttribute(\"aria-selected\", \"false\");\n\n        titleSpan.blur();\n    }\n\n    protected getUl(): HTMLUListElement {\n        return this.element.querySelector(\":scope > ul\") as HTMLUListElement;\n    }\n\n    protected getTitleSpan(): HTMLSpanElement {\n        return this.element.querySelector(\n            \":scope > .jqtree-element > span.jqtree-title\",\n        ) as HTMLSpanElement;\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return position === Position.Inside;\n    }\n}\n\nexport default NodeElement;\n","import { Position, Node } from \"../node\";\nimport NodeElement from \"./index\";\n\nexport type OnFinishOpenNode = (node: Node) => void;\n\nclass FolderElement extends NodeElement {\n    public open(\n        onFinished: OnFinishOpenNode | null,\n        slide = true,\n        animationSpeed: JQuery.Duration = \"fast\",\n    ): void {\n        if (this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = true;\n\n        const button = this.getButton();\n        button.classList.remove(\"jqtree-closed\");\n        button.innerHTML = \"\";\n\n        const openedIconElement = this.treeWidget.renderer.openedIconElement;\n\n        if (openedIconElement) {\n            const icon = openedIconElement.cloneNode(true);\n            button.appendChild(icon);\n        }\n\n        const doOpen = (): void => {\n            this.element.classList.remove(\"jqtree-closed\");\n\n            const titleSpan = this.getTitleSpan();\n            titleSpan.setAttribute(\"aria-expanded\", \"true\");\n\n            if (onFinished) {\n                onFinished(this.node);\n            }\n\n            this.treeWidget._triggerEvent(\"tree.open\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            jQuery(this.getUl()).slideDown(animationSpeed, doOpen);\n        } else {\n            jQuery(this.getUl()).show();\n            doOpen();\n        }\n    }\n\n    public close(\n        slide = true,\n        animationSpeed: JQuery.Duration | undefined = \"fast\",\n    ): void {\n        if (!this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = false;\n\n        const button = this.getButton();\n        button.classList.add(\"jqtree-closed\");\n        button.innerHTML = \"\";\n\n        const closedIconElement = this.treeWidget.renderer.closedIconElement;\n\n        if (closedIconElement) {\n            const icon = closedIconElement.cloneNode(true);\n            button.appendChild(icon);\n        }\n\n        const doClose = (): void => {\n            this.element.classList.add(\"jqtree-closed\");\n\n            const titleSpan = this.getTitleSpan();\n            titleSpan.setAttribute(\"aria-expanded\", \"false\");\n\n            this.treeWidget._triggerEvent(\"tree.close\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            jQuery(this.getUl()).slideUp(animationSpeed, doClose);\n        } else {\n            jQuery(this.getUl()).hide();\n            doClose();\n        }\n    }\n\n    protected mustShowBorderDropHint(position: Position): boolean {\n        return !this.node.is_open && position === Position.Inside;\n    }\n\n    private getButton(): HTMLLinkElement {\n        return this.element.querySelector(\n            \":scope > .jqtree-element > a.jqtree-toggler\",\n        ) as HTMLLinkElement;\n    }\n}\n\nexport default FolderElement;\n","import __version__ from \"./version\";\nimport { DragAndDropHandler } from \"./dragAndDropHandler\";\nimport ElementsRenderer from \"./elementsRenderer\";\nimport DataLoader, { HandleFinishedLoading } from \"./dataLoader\";\nimport KeyHandler from \"./keyHandler\";\nimport MouseWidget from \"./mouse.widget\";\nimport { PositionInfo } from \"./types\";\nimport SaveStateHandler, { SavedState } from \"./saveStateHandler\";\nimport ScrollHandler from \"./scrollHandler\";\nimport SelectNodeHandler from \"./selectNodeHandler\";\nimport SimpleWidget from \"./simple.widget\";\nimport { Node, getPosition } from \"./node\";\nimport { isFunction } from \"./util\";\nimport NodeElement from \"./nodeElement\";\nimport FolderElement, { OnFinishOpenNode } from \"./nodeElement/folderElement\";\n\nimport { JQTreeOptions } from \"./jqtreeOptions\";\n\ninterface ClickTarget {\n    node: Node;\n    type: \"button\" | \"label\";\n}\n\ninterface SelectNodeOptions {\n    mustToggle?: boolean;\n    mustSetFocus?: boolean;\n}\n\nconst NODE_PARAM_IS_EMPTY = \"Node parameter is empty\";\nconst PARAM_IS_EMPTY = \"Parameter is empty: \";\n\nexport class JqTreeWidget extends MouseWidget<JQTreeOptions> {\n    protected static defaults: JQTreeOptions = {\n        animationSpeed: \"fast\",\n        autoEscape: true,\n        autoOpen: false, // true / false / int (open n levels starting at 0)\n        buttonLeft: true,\n        // The symbol to use for a closed node - ► BLACK RIGHT-POINTING POINTER\n        // http://www.fileformat.info/info/unicode/char/25ba/index.htm\n        closedIcon: undefined,\n        data: undefined,\n        dataFilter: undefined,\n        dataUrl: undefined,\n        dragAndDrop: false,\n        keyboardSupport: true,\n        nodeClass: Node,\n        onCanMove: undefined, // Can this node be moved?\n        onCanMoveTo: undefined, // Can this node be moved to this position? function(moved_node, target_node, position)\n        onCanSelectNode: undefined,\n        onCreateLi: undefined,\n        onDragMove: undefined,\n        onDragStop: undefined,\n        onGetStateFromStorage: undefined,\n        onIsMoveHandle: undefined,\n        onLoadFailed: undefined,\n        onLoading: undefined,\n        onSetStateFromStorage: undefined,\n        openedIcon: \"&#x25bc;\",\n        openFolderDelay: 500, // The delay for opening a folder during drag and drop; the value is in milliseconds\n        // The symbol to use for an open node - ▼ BLACK DOWN-POINTING TRIANGLE\n        // http://www.fileformat.info/info/unicode/char/25bc/index.htm\n        rtl: undefined, // right-to-left support; true / false (default)\n        saveState: false, // true / false / string (cookie name)\n        selectable: true,\n        showEmptyFolder: false,\n        slide: true, // must display slide animation?\n        startDndDelay: 300, // The delay for starting dnd (in milliseconds)\n        tabIndex: 0,\n        useContextMenu: true,\n    };\n\n    public element: JQuery;\n    public tree: Node;\n    public dndHandler: DragAndDropHandler;\n    public renderer: ElementsRenderer;\n    public dataLoader: DataLoader;\n    public scrollHandler: ScrollHandler;\n    public selectNodeHandler: SelectNodeHandler;\n\n    private isInitialized: boolean;\n    private saveStateHandler: SaveStateHandler;\n    private keyHandler: KeyHandler;\n\n    public toggle(node: Node, slideParam: null | boolean = null): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.is_open) {\n            this.closeNode(node, slide);\n        } else {\n            this.openNode(node, slide);\n        }\n\n        return this.element;\n    }\n\n    public getTree(): Node {\n        return this.tree;\n    }\n\n    public selectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): JQuery {\n        this.doSelectNode(node, optionsParam);\n        return this.element;\n    }\n\n    public getSelectedNode(): Node | false {\n        return this.selectNodeHandler.getSelectedNode();\n    }\n\n    public toJson(): string {\n        return JSON.stringify(this.tree.getData());\n    }\n\n    public loadData(data: NodeData[], parentNode: Node | null): JQuery {\n        this.doLoadData(data, parentNode);\n        return this.element;\n    }\n\n    /*\n    signatures:\n    - loadDataFromUrl(url, parent_node=null, on_finished=null)\n        loadDataFromUrl('/my_data');\n        loadDataFromUrl('/my_data', node1);\n        loadDataFromUrl('/my_data', node1, function() { console.log('finished'); });\n        loadDataFromUrl('/my_data', null, function() { console.log('finished'); });\n\n    - loadDataFromUrl(parent_node=null, on_finished=null)\n        loadDataFromUrl();\n        loadDataFromUrl(node1);\n        loadDataFromUrl(null, function() { console.log('finished'); });\n        loadDataFromUrl(node1, function() { console.log('finished'); });\n    */\n    public loadDataFromUrl(\n        param1: string | null | Node,\n        param2?: Node | null | HandleFinishedLoading,\n        param3?: HandleFinishedLoading,\n    ): JQuery {\n        if (typeof param1 === \"string\") {\n            // first parameter is url\n            this.doLoadDataFromUrl(\n                param1,\n                param2 as Node | null,\n                param3 ?? null,\n            );\n        } else {\n            // first parameter is not url\n            this.doLoadDataFromUrl(\n                null,\n                param1,\n                param2 as HandleFinishedLoading | null,\n            );\n        }\n\n        return this.element;\n    }\n\n    public reload(onFinished: HandleFinishedLoading | null): JQuery {\n        this.doLoadDataFromUrl(null, null, onFinished);\n        return this.element;\n    }\n\n    public refresh(): JQuery {\n        this._refreshElements(null);\n        return this.element;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.tree.getNodeById(nodeId);\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.tree.getNodeByName(name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        return this.tree.getNodeByNameMustExist(name);\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.tree.getNodesByProperty(key, value);\n    }\n\n    public getNodeByHtmlElement(\n        element: HTMLElement | JQuery<HTMLElement>,\n    ): Node | null {\n        return this.getNode(jQuery(element));\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        return this.tree.getNodeByCallback(callback);\n    }\n\n    public openNode(\n        node: Node,\n        param1?: boolean | OnFinishOpenNode,\n        param2?: OnFinishOpenNode,\n    ): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const parseParams = (): [boolean, OnFinishOpenNode | null] => {\n            let onFinished: OnFinishOpenNode | null;\n            let slide: boolean | null;\n\n            if (isFunction(param1)) {\n                onFinished = param1 as OnFinishOpenNode | null;\n                slide = null;\n            } else {\n                slide = param1 as boolean;\n                onFinished = param2 as OnFinishOpenNode;\n            }\n\n            if (slide == null) {\n                slide = this.options.slide ?? false;\n            }\n\n            return [slide, onFinished];\n        };\n\n        const [slide, onFinished] = parseParams();\n\n        this._openNode(node, slide, onFinished);\n        return this.element;\n    }\n\n    public closeNode(node: Node, slideParam?: null | boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            new FolderElement(node, this).close(\n                slide,\n                this.options.animationSpeed,\n            );\n\n            this.saveState();\n        }\n\n        return this.element;\n    }\n\n    public isDragging(): boolean {\n        return this.dndHandler.isDragging;\n    }\n\n    public refreshHitAreas(): JQuery {\n        this.dndHandler.refresh();\n        return this.element;\n    }\n\n    public addNodeAfter(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        const newNode = existingNode.addAfter(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addNodeBefore(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addBefore(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addParentNode(\n        newNodeInfo: NodeData,\n        existingNode: Node,\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addParent(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(newNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public removeNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!node.parent) {\n            throw Error(\"Node has no parent\");\n        }\n\n        this.selectNodeHandler.removeFromSelection(node, true); // including children\n\n        const parent = node.parent;\n        node.remove();\n        this._refreshElements(parent);\n\n        return this.element;\n    }\n\n    public appendNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam || this.tree;\n\n        const node = parentNode.append(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public prependNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam ?? this.tree;\n\n        const node = parentNode.prepend(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public updateNode(node: Node, data: NodeData): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const idIsChanged =\n            typeof data === \"object\" && data.id && data.id !== node.id;\n\n        if (idIsChanged) {\n            this.tree.removeNodeFromIndex(node);\n        }\n\n        node.setData(data);\n\n        if (idIsChanged) {\n            this.tree.addNodeToIndex(node);\n        }\n\n        if (\n            typeof data === \"object\" &&\n            data[\"children\"] &&\n            data[\"children\"] instanceof Array\n        ) {\n            node.removeChildren();\n\n            if (data.children.length) {\n                node.loadFromData(data.children as Node[]);\n            }\n        }\n\n        this._refreshElements(node);\n\n        return this.element;\n    }\n\n    private isSelectedNodeInSubtree(subtree: Node): boolean {\n        const selectedNode = this.getSelectedNode();\n\n        if (!selectedNode) {\n            return false;\n        } else {\n            return subtree === selectedNode || subtree.isParentOf(selectedNode);\n        }\n    }\n\n    public moveNode(node: Node, targetNode: Node, position: string): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!targetNode) {\n            throw Error(PARAM_IS_EMPTY + \"targetNode\");\n        }\n\n        const positionIndex = getPosition(position);\n\n        if (positionIndex !== undefined) {\n            this.tree.moveNode(node, targetNode, positionIndex);\n            this._refreshElements(null);\n        }\n\n        return this.element;\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        return this.saveStateHandler.getStateFromStorage();\n    }\n\n    public addToSelection(node: Node, mustSetFocus?: boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.addToSelection(node);\n\n        this._getNodeElementForNode(node).select(\n            mustSetFocus === undefined ? true : mustSetFocus,\n        );\n\n        this.saveState();\n\n        return this.element;\n    }\n\n    public getSelectedNodes(): Node[] {\n        return this.selectNodeHandler.getSelectedNodes();\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        return this.selectNodeHandler.isNodeSelected(node);\n    }\n\n    public removeFromSelection(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.removeFromSelection(node);\n\n        this._getNodeElementForNode(node).deselect();\n        this.saveState();\n\n        return this.element;\n    }\n\n    public scrollToNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const nodeOffset = jQuery(node.element).offset();\n        const nodeTop = nodeOffset ? nodeOffset.top : 0;\n\n        const treeOffset = this.$el.offset();\n        const treeTop = treeOffset ? treeOffset.top : 0;\n\n        const top = nodeTop - treeTop;\n\n        this.scrollHandler.scrollToY(top);\n\n        return this.element;\n    }\n\n    public getState(): SavedState | null {\n        return this.saveStateHandler.getState();\n    }\n\n    public setState(state: SavedState): JQuery {\n        this.saveStateHandler.setInitialState(state);\n        this._refreshElements(null);\n\n        return this.element;\n    }\n\n    public setOption(option: string, value: unknown): JQuery {\n        (this.options as unknown as Record<string, unknown>)[option] = value;\n        return this.element;\n    }\n\n    public moveDown(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveDown(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public moveUp(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveUp(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public getVersion(): string {\n        return __version__;\n    }\n\n    public _triggerEvent(\n        eventName: string,\n        values?: Record<string, unknown>,\n    ): JQuery.Event {\n        const event = jQuery.Event(eventName, values);\n        this.element.trigger(event);\n        return event;\n    }\n\n    public _openNode(\n        node: Node,\n        slide = true,\n        onFinished: OnFinishOpenNode | null,\n    ): void {\n        const doOpenNode = (\n            _node: Node,\n            _slide: boolean,\n            _onFinished: OnFinishOpenNode | null,\n        ): void => {\n            const folderElement = new FolderElement(_node, this);\n            folderElement.open(\n                _onFinished,\n                _slide,\n                this.options.animationSpeed,\n            );\n        };\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            if (node.load_on_demand) {\n                this.loadFolderOnDemand(node, slide, onFinished);\n            } else {\n                let parent = node.parent;\n\n                while (parent) {\n                    // nb: do not open root element\n                    if (parent.parent) {\n                        doOpenNode(parent, false, null);\n                    }\n                    parent = parent.parent;\n                }\n\n                doOpenNode(node, slide, onFinished);\n                this.saveState();\n            }\n        }\n    }\n\n    /*\n    Redraw the tree or part of the tree.\n     from_node: redraw this subtree\n    */\n    public _refreshElements(fromNode: Node | null): void {\n        const mustSetFocus = this.selectNodeHandler.isFocusOnTree();\n        const mustSelect = fromNode\n            ? this.isSelectedNodeInSubtree(fromNode)\n            : false;\n\n        this.renderer.render(fromNode);\n\n        if (mustSelect) {\n            this.selectCurrentNode(mustSetFocus);\n        }\n\n        this._triggerEvent(\"tree.refresh\");\n    }\n\n    public _getNodeElementForNode(node: Node): NodeElement {\n        if (node.isFolder()) {\n            return new FolderElement(node, this);\n        } else {\n            return new NodeElement(node, this);\n        }\n    }\n\n    public _getNodeElement($element: JQuery<HTMLElement>): NodeElement | null {\n        const node = this.getNode($element);\n        if (node) {\n            return this._getNodeElementForNode(node);\n        } else {\n            return null;\n        }\n    }\n\n    public _containsElement(element: HTMLElement): boolean {\n        const node = this.getNode(jQuery(element));\n\n        return node != null && node.tree === this.tree;\n    }\n\n    public _getScrollLeft(): number {\n        return this.scrollHandler.getScrollLeft();\n    }\n\n    public init(): void {\n        super.init();\n\n        this.element = this.$el;\n        this.isInitialized = false;\n\n        this.options.rtl = this.getRtlOption();\n\n        if (this.options.closedIcon == null) {\n            this.options.closedIcon = this.getDefaultClosedIcon();\n        }\n\n        this.renderer = new ElementsRenderer(this);\n        this.dataLoader = new DataLoader(this);\n        this.saveStateHandler = new SaveStateHandler(this);\n        this.selectNodeHandler = new SelectNodeHandler(this);\n        this.dndHandler = new DragAndDropHandler(this);\n        this.scrollHandler = new ScrollHandler(this);\n        this.keyHandler = new KeyHandler(this);\n\n        this.initData();\n\n        this.element.on(\"click\", this.handleClick);\n        this.element.on(\"dblclick\", this.handleDblclick);\n\n        if (this.options.useContextMenu) {\n            this.element.on(\"contextmenu\", this.handleContextmenu);\n        }\n    }\n\n    public deinit(): void {\n        this.element.empty();\n        this.element.off();\n\n        this.keyHandler.deinit();\n\n        this.tree = new Node({}, true);\n\n        super.deinit();\n    }\n\n    protected mouseCapture(positionInfo: PositionInfo): boolean | null {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseCapture(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStart(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStart(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseDrag(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            const result = this.dndHandler.mouseDrag(positionInfo);\n\n            this.scrollHandler.checkScrolling();\n            return result;\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStop(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStop(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected getMouseDelay(): number {\n        return this.options.startDndDelay ?? 0;\n    }\n\n    private initData(): void {\n        if (this.options.data) {\n            this.doLoadData(this.options.data, null);\n        } else {\n            const dataUrl = this.getDataUrlInfo(null);\n\n            if (dataUrl) {\n                this.doLoadDataFromUrl(null, null, null);\n            } else {\n                this.doLoadData([], null);\n            }\n        }\n    }\n\n    private getDataUrlInfo(node: Node | null): JQuery.AjaxSettings | null {\n        const dataUrl =\n            this.options.dataUrl || (this.element.data(\"url\") as string | null);\n\n        const getUrlFromString = (url: string): JQuery.AjaxSettings => {\n            const urlInfo: JQuery.AjaxSettings = { url };\n\n            setUrlInfoData(urlInfo);\n\n            return urlInfo;\n        };\n\n        const setUrlInfoData = (urlInfo: JQuery.AjaxSettings): void => {\n            if (node?.id) {\n                // Load on demand of a subtree; add node parameter\n                const data = { node: node.id };\n                urlInfo[\"data\"] = data;\n            } else {\n                // Add selected_node parameter\n                const selectedNodeId = this.getNodeIdToBeSelected();\n                if (selectedNodeId) {\n                    const data = { selected_node: selectedNodeId };\n                    urlInfo[\"data\"] = data;\n                }\n            }\n        };\n\n        if (typeof dataUrl === \"function\") {\n            return dataUrl(node);\n        } else if (typeof dataUrl === \"string\") {\n            return getUrlFromString(dataUrl);\n        } else if (dataUrl && typeof dataUrl === \"object\") {\n            setUrlInfoData(dataUrl);\n            return dataUrl;\n        } else {\n            return null;\n        }\n    }\n\n    private getNodeIdToBeSelected(): NodeId | null {\n        if (this.options.saveState) {\n            return this.saveStateHandler.getNodeIdToBeSelected();\n        } else {\n            return null;\n        }\n    }\n\n    private initTree(data: NodeData[]): void {\n        const doInit = (): void => {\n            if (!this.isInitialized) {\n                this.isInitialized = true;\n                this._triggerEvent(\"tree.init\");\n            }\n        };\n\n        if (!this.options.nodeClass) {\n            return;\n        }\n\n        this.tree = new this.options.nodeClass(\n            null,\n            true,\n            this.options.nodeClass,\n        );\n\n        this.selectNodeHandler.clear();\n\n        this.tree.loadFromData(data);\n\n        const mustLoadOnDemand = this.setInitialState();\n\n        this._refreshElements(null);\n\n        if (!mustLoadOnDemand) {\n            doInit();\n        } else {\n            // Load data on demand and then init the tree\n            this.setInitialStateOnDemand(doInit);\n        }\n    }\n\n    // Set initial state, either by restoring the state or auto-opening nodes\n    // result: must load nodes on demand?\n    private setInitialState(): boolean {\n        const restoreState = (): [boolean, boolean] => {\n            // result: is state restored, must load on demand?\n            if (!this.options.saveState) {\n                return [false, false];\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return [false, false];\n                } else {\n                    const mustLoadOnDemand =\n                        this.saveStateHandler.setInitialState(state);\n\n                    // return true: the state is restored\n                    return [true, mustLoadOnDemand];\n                }\n            }\n        };\n\n        const autoOpenNodes = (): boolean => {\n            // result: must load on demand?\n            if (this.options.autoOpen === false) {\n                return false;\n            }\n\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let mustLoadOnDemand = false;\n\n            this.tree.iterate((node: Node, level: number) => {\n                if (node.load_on_demand) {\n                    mustLoadOnDemand = true;\n                    return false;\n                } else if (!node.hasChildren()) {\n                    return false;\n                } else {\n                    node.is_open = true;\n                    return level !== maxLevel;\n                }\n            });\n\n            return mustLoadOnDemand;\n        };\n\n        let [isRestored, mustLoadOnDemand] = restoreState(); // eslint-disable-line prefer-const\n\n        if (!isRestored) {\n            mustLoadOnDemand = autoOpenNodes();\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    // Set the initial state for nodes that are loaded on demand\n    // Call cb_finished when done\n    private setInitialStateOnDemand(cbFinished: () => void): void {\n        const restoreState = (): boolean => {\n            if (!this.options.saveState) {\n                return false;\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return false;\n                } else {\n                    this.saveStateHandler.setInitialStateOnDemand(\n                        state,\n                        cbFinished,\n                    );\n\n                    return true;\n                }\n            }\n        };\n\n        const autoOpenNodes = (): void => {\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let loadingCount = 0;\n\n            const loadAndOpenNode = (node: Node): void => {\n                loadingCount += 1;\n                this._openNode(node, false, () => {\n                    loadingCount -= 1;\n                    openNodes();\n                });\n            };\n\n            const openNodes = (): void => {\n                this.tree.iterate((node: Node, level: number) => {\n                    if (node.load_on_demand) {\n                        if (!node.is_loading) {\n                            loadAndOpenNode(node);\n                        }\n\n                        return false;\n                    } else {\n                        this._openNode(node, false, null);\n\n                        return level !== maxLevel;\n                    }\n                });\n\n                if (loadingCount === 0) {\n                    cbFinished();\n                }\n            };\n\n            openNodes();\n        };\n\n        if (!restoreState()) {\n            autoOpenNodes();\n        }\n    }\n\n    private getAutoOpenMaxLevel(): number {\n        if (this.options.autoOpen === true) {\n            return -1;\n        } else if (typeof this.options.autoOpen === \"number\") {\n            return this.options.autoOpen;\n        } else if (typeof this.options.autoOpen === \"string\") {\n            return parseInt(this.options.autoOpen, 10);\n        } else {\n            return 0;\n        }\n    }\n\n    private handleClick = (\n        e: JQuery.ClickEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget) {\n            if (clickTarget.type === \"button\") {\n                this.toggle(clickTarget.node, this.options.slide);\n\n                e.preventDefault();\n                e.stopPropagation();\n            } else if (clickTarget.type === \"label\") {\n                const node = clickTarget.node;\n                const event = this._triggerEvent(\"tree.click\", {\n                    node,\n                    click_event: e,\n                });\n\n                if (!event.isDefaultPrevented()) {\n                    this.doSelectNode(node);\n                }\n            }\n        }\n    };\n\n    private handleDblclick = (\n        e: JQuery.DoubleClickEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget?.type === \"label\") {\n            this._triggerEvent(\"tree.dblclick\", {\n                node: clickTarget.node,\n                click_event: e,\n            });\n        }\n    };\n\n    private getClickTarget(element: EventTarget): ClickTarget | null {\n        const $target = jQuery(element);\n\n        const $button = $target.closest(\".jqtree-toggler\");\n\n        if ($button.length) {\n            const node = this.getNode($button as JQuery<HTMLElement>);\n\n            if (node) {\n                return {\n                    type: \"button\",\n                    node,\n                };\n            }\n        } else {\n            const $el = $target.closest(\".jqtree-element\");\n            if ($el.length) {\n                const node = this.getNode($el as JQuery<HTMLElement>);\n                if (node) {\n                    return {\n                        type: \"label\",\n                        node,\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    private getNode($element: JQuery<HTMLElement>): null | Node {\n        const $li = $element.closest(\"li.jqtree_common\");\n        if ($li.length === 0) {\n            return null;\n        } else {\n            return $li.data(\"node\") as Node;\n        }\n    }\n\n    private handleContextmenu = (\n        e: JQuery.ContextMenuEvent<HTMLElement, any, HTMLElement, HTMLElement>,\n    ) => {\n        const $div = jQuery(e.target).closest(\"ul.jqtree-tree .jqtree-element\");\n        if ($div.length) {\n            const node = this.getNode($div);\n            if (node) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                this._triggerEvent(\"tree.contextmenu\", {\n                    node,\n                    click_event: e,\n                });\n                return false;\n            }\n        }\n\n        return null;\n    };\n\n    private saveState(): void {\n        if (this.options.saveState) {\n            this.saveStateHandler.saveState();\n        }\n    }\n\n    private selectCurrentNode(mustSetFocus: boolean): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            const nodeElement = this._getNodeElementForNode(node);\n            if (nodeElement) {\n                nodeElement.select(mustSetFocus);\n            }\n        }\n    }\n\n    private deselectCurrentNode(): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            this.removeFromSelection(node);\n        }\n    }\n\n    private getDefaultClosedIcon(): string {\n        if (this.options.rtl) {\n            // triangle to the left\n            return \"&#x25c0;\";\n        } else {\n            // triangle to the right\n            return \"&#x25ba;\";\n        }\n    }\n\n    private getRtlOption(): boolean {\n        if (this.options.rtl != null) {\n            return this.options.rtl;\n        } else {\n            const dataRtl = this.element.data(\"rtl\") as unknown;\n\n            if (\n                dataRtl !== null &&\n                dataRtl !== false &&\n                dataRtl !== undefined\n            ) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    private doSelectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions,\n    ): void {\n        const saveState = (): void => {\n            if (this.options.saveState) {\n                this.saveStateHandler.saveState();\n            }\n        };\n\n        if (!node) {\n            // Called with empty node -> deselect current node\n            this.deselectCurrentNode();\n            saveState();\n            return;\n        }\n        const defaultOptions = { mustSetFocus: true, mustToggle: true };\n        const selectOptions = { ...defaultOptions, ...(optionsParam || {}) };\n\n        const canSelect = (): boolean => {\n            if (this.options.onCanSelectNode) {\n                return (\n                    this.options.selectable === true &&\n                    this.options.onCanSelectNode(node)\n                );\n            } else {\n                return this.options.selectable === true;\n            }\n        };\n\n        const openParents = (): void => {\n            const parent = node.parent;\n\n            if (parent && parent.parent && !parent.is_open) {\n                this.openNode(parent, false);\n            }\n        };\n\n        if (!canSelect()) {\n            return;\n        }\n\n        if (this.selectNodeHandler.isNodeSelected(node)) {\n            if (selectOptions.mustToggle) {\n                this.deselectCurrentNode();\n                this._triggerEvent(\"tree.select\", {\n                    node: null,\n                    previous_node: node,\n                });\n            }\n        } else {\n            const deselectedNode = this.getSelectedNode() || null;\n            this.deselectCurrentNode();\n            this.addToSelection(node, selectOptions.mustSetFocus);\n\n            this._triggerEvent(\"tree.select\", {\n                node,\n                deselected_node: deselectedNode,\n            });\n            openParents();\n        }\n\n        saveState();\n    }\n\n    private doLoadData(data: NodeData[] | null, parentNode: Node | null): void {\n        if (data) {\n            if (parentNode) {\n                this.deselectNodes(parentNode);\n                this.loadSubtree(data, parentNode);\n            } else {\n                this.initTree(data);\n            }\n\n            if (this.isDragging()) {\n                this.dndHandler.refresh();\n            }\n        }\n\n        this._triggerEvent(\"tree.load_data\", {\n            tree_data: data,\n            parent_node: parentNode,\n        });\n    }\n\n    private deselectNodes(parentNode: Node): void {\n        const selectedNodesUnderParent =\n            this.selectNodeHandler.getSelectedNodesUnder(parentNode);\n        for (const n of selectedNodesUnderParent) {\n            this.selectNodeHandler.removeFromSelection(n);\n        }\n    }\n\n    private loadSubtree(data: NodeData[], parentNode: Node): void {\n        parentNode.loadFromData(data);\n\n        parentNode.load_on_demand = false;\n        parentNode.is_loading = false;\n\n        this._refreshElements(parentNode);\n    }\n\n    private doLoadDataFromUrl(\n        urlInfoParam: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null,\n    ): void {\n        const urlInfo = urlInfoParam || this.getDataUrlInfo(parentNode);\n\n        this.dataLoader.loadFromUrl(urlInfo, parentNode, onFinished);\n    }\n\n    private loadFolderOnDemand(\n        node: Node,\n        slide = true,\n        onFinished: OnFinishOpenNode | null,\n    ): void {\n        node.is_loading = true;\n\n        this.doLoadDataFromUrl(null, node, () => {\n            this._openNode(node, slide, onFinished);\n        });\n    }\n}\n\nSimpleWidget.register(JqTreeWidget, \"tree\");\n"],"names":["version","Position","positionNames","before","Before","after","After","inside","Inside","none","None","getPositionName","position","name","Object","prototype","hasOwnProperty","call","getPosition","isNodeRecordWithChildren","data","_typeof","Array","Node","o","arguments","length","undefined","isRoot","nodeClass","_classCallCheck","_defineProperty","isEmptyFolder","load_on_demand","setData","children","parent","idMapping","Map","tree","_createClass","key","value","loadFromData","removeChildren","_iterator","_createForOfIteratorHelper","_step","s","n","done","node","createNode","addChild","err","e","f","push","setParent","addChildAtPosition","index","splice","removeChild","doRemoveChild","getChildIndex","indexOf","hasChildren","isFolder","iterate","callback","_iterate","level","_iterator2","_step2","child","result","moveNode","movedNode","targetNode","isParentOf","getData","includeParent","getDataFromNodes","nodes","map","tmpNode","k","v","getNodeByName","getNodeByCallback","getNodeByNameMustExist","concat","addAfter","nodeInfo","childIndex","addBefore","addParent","newParent","originalParent","_iterator3","_step3","remove","append","prepend","getLevel","getNodeById","nodeId","get","addNodeToIndex","id","set","removeNodeFromIndex","_this","_this$tree","getPreviousSibling","previousIndex","getNextSibling","nextIndex","getNodesByProperty","filter","getNextNode","includeChildren","nextSibling","getNextVisibleNode","is_open","getPreviousNode","previousSibling","getParent","getLastChild","getPreviousVisibleNode","lastChild","initFromData","_this2","addNode","nodeData","addChildren","childrenData","_iterator4","_step4","_this$tree2","_this$tree3","getNodeClass","_this$tree4","DragElement","nodeName","offsetX","offsetY","$tree","autoEscape","$element","jQuery","addClass","text","html","css","move","pageX","pageY","offset","left","top","VisibleNodeIterator","isFirstNode","_iterateNode","nextNode","mustIterateInside","element","is","handleFirstNode","handleNode","handleOpenFolder","handleClosedFolder","childrenLength","forEach","_","i","nextChild","handleAfterOpenFolder","HitAreasGenerator","_VisibleNodeIterator","_inherits","_super","_createSuper","currentNode","treeBottom","_assertThisInitialized","generate","positions","lastTop","generateHitAreas","previousTop","group","hitAreas","generateHitAreasForGroup","addPosition","getTop","area","bottom","positionsInGroup","positionCount","Math","min","areaHeight","round","areaTop","DragAndDropHandler","treeWidget","hoveredArea","isDragging","currentItem","positionInfo","mouseCapture","target","mustCaptureElement","options","onIsMoveHandle","nodeElement","_getNodeElement","onCanMove","mouseStart","_this$treeWidget$opti","refresh","dragElement","classList","add","mouseDrag","findHoveredArea","canMoveToArea","stopOpenFolderTimer","mustOpenFolderTimer","startOpenFolderTimer","updateDropHint","removeDropHint","onDragMove","originalEvent","mouseStop","moveItem","clear","removeHover","removeHitAreas","onDragStop","_getNodeElementForNode","hitAreasGenerator","getTreeDimensions","onCanMoveTo","positionName","previousGhost","x","y","dimensions","right","low","high","mid","addDropHint","folder","openFolder","_openNode","slide","openFolderDelay","openFolderTimer","window","setTimeout","clearTimeout","previousParent","doMove","empty","_refreshElements","event","_triggerEvent","move_info","moved_node","target_node","previous_parent","do_move","original_event","isDefaultPrevented","el","width","height","_getScrollLeft","isInt","isFunction","getBoolString","ElementsRenderer","openedIconElement","createButtonElement","openedIcon","closedIconElement","closedIcon","render","fromNode","renderFromNode","renderFromRoot","createDomElements","$previousLi","li","createLi","attachNodeData","isRootNode","ul","createUl","appendChild","classString","role","rtl","dragAndDrop","document","createElement","className","setAttribute","isSelected","Boolean","selectNodeHandler","isNodeSelected","mustShowFolder","showEmptyFolder","createFolderLi","createNodeLi","onCreateLi","setTreeItemAriaAttributes","buttonClasses","getButtonClasses","folderClasses","getFolderClasses","iconElement","div","buttonLink","cloneNode","buttonLeft","titleSpan","createTitleSpan","liClasses","join","classes","tabIndex","textContent","innerHTML","is_loading","createTextNode","nodeType","DataLoader","loadFromUrl","urlInfo","parentNode","onFinished","$el","getDomElement","addLoadingClass","notifyLoading","stopLoading","removeLoadingClass","handleSuccess","loadData","parseData","handleError","jqXHR","onLoadFailed","submitRequest","removeClass","isLoading","onLoading","urlInfoInput","_ajaxSettings$method","url","ajaxSettings","_objectSpread","method","cache","dataType","success","error","toUpperCase","ajax","dataFilter","getParsedData","JSON","parse","parsedData","KeyHandler","canHandleKeyboard","selectedNode","getSelectedNode","which","DOWN","moveDown","UP","moveUp","RIGHT","moveRight","LEFT","moveLeft","keyboardSupport","on","handleKeyDown","deinit","off","selectNode","openNode","closeNode","scrollHandler","isScrolledIntoView","find","scrollToNode","isFocusOnTree","register","widgetClass","widgetName","getDataKey","getWidgetData","dataKey","widget","SimpleWidget","createWidget","existingWidget","simpleWidgetClass","init","destroyWidget","destroy","removeData","callFunction","functionName","args","simpleWidget","widgetFunction","apply","fn","argument1","_len","_key","defaults","constructor","getPositionInfoFromMouseEvent","getPositionInfoFromTouch","touch","MouseWidget","_SimpleWidget","button","handleMouseDown","cancelable","preventDefault","handleMouseMove","handleMouseUp","touches","changedTouches","addEventListener","mouseDown","passive","touchStart","isMouseStarted","mouseDelayTimer","isMouseDelayMet","mouseDownInfo","removeEventListener","removeMouseMoveEventListeners","handleStartMouse","mouseMove","touchMove","mouseUp","touchEnd","mouseDelay","getMouseDelay","startMouseDelayTimer","SaveStateHandler","saveState","state","stringify","getState","onSetStateFromStorage","supportsLocalStorage","localStorage","setItem","getKeyName","getStateFromStorage","jsonData","loadFromStorage","parseState","getOpenNodeIds","openNodes","getSelectedNodeIds","selectedNodeIds","getSelectedNodes","open_nodes","selected_node","setInitialState","mustLoadOnDemand","openInitialNodes","resetSelection","selectInitialNodes","setInitialStateOnDemand","cbFinished","doSetInitialStateOnDemand","getNodeIdToBeSelected","onGetStateFromStorage","getItem","nodeIds","selectCount","addToSelection","selectedNodes","removeFromSelection","nodeIdsParam","loadingCount","newNodesIds","loadAndOpenNode","testSupport","sessionStorage","removeItem","_supportsLocalStorage","ScrollHandler","isInitialized","checkScrolling","ensureInit","checkVerticalScrolling","checkHorizontalScrolling","scrollToY","$scrollParent","scrollTop","treeTop","elementBottom","viewBottom","elementTop","viewTop","elHeight","originalTop","scrollParentTop","windowHeight","getScrollLeft","scrollLeft","initScrollParent","_$scrollParent$","getParentWithOverflow","cssAttributes","hasOverFlow","_i","_cssAttributes","attr","overflowValue","parents","setDocumentAsScrollParent","tagName","handleVerticalScrollingWithScrollParent","scrollParent","distanceBottom","offsetHeight","refreshHitAreas","handleVerticalScrollingWithDocument","distanceTop","dndHandler","handleHorizontalScrollingWithParent","handleHorizontalScrollingWithDocument","scrollParentOffset","canScrollRight","clientWidth","scrollWidth","canScrollLeft","rightEdge","leftEdge","isNearRightEdge","isNearLeftEdge","max","$document","windowWidth","SelectNodeHandler","Set","selectedSingleNode","getSelectedNodesUnder","has","activeElement","_containsElement","BorderDropHint","querySelector","hint","offsetWidth","clientHeight","style","_this$hint","GhostDropHint","ghost","createGhostElement","moveAfter","moveBefore","moveInsideOpenFolder","moveInside","_this$node$children$","childElement","circleSpan","lineSpan","NodeElement","mustShowBorderDropHint","select","mustSetFocus","getTitleSpan","toString","focus","deselect","removeAttribute","blur","getUl","FolderElement","_NodeElement","open","animationSpeed","getButton","renderer","icon","doOpen","slideDown","show","close","doClose","slideUp","hide","NODE_PARAM_IS_EMPTY","PARAM_IS_EMPTY","JqTreeWidget","_MouseWidget","clickTarget","getClickTarget","type","toggle","stopPropagation","click_event","doSelectNode","$div","closest","getNode","slideParam","Error","getTree","optionsParam","toJson","doLoadData","loadDataFromUrl","param1","param2","param3","doLoadDataFromUrl","reload","getNodeByHtmlElement","parseParams","_this2$options$slide","_parseParams","_parseParams2","_slicedToArray","addNodeAfter","newNodeInfo","existingNode","newNode","addNodeBefore","addParentNode","removeNode","appendNode","parentNodeParam","prependNode","updateNode","idIsChanged","isSelectedNodeInSubtree","subtree","positionIndex","saveStateHandler","nodeOffset","nodeTop","treeOffset","setState","setOption","option","keyHandler","getVersion","__version__","eventName","values","Event","trigger","_this3","doOpenNode","_node","_slide","_onFinished","folderElement","loadFolderOnDemand","mustSelect","selectCurrentNode","_get","_getPrototypeOf","getRtlOption","getDefaultClosedIcon","dataLoader","initData","handleClick","handleDblclick","useContextMenu","handleContextmenu","_this$options$startDn","startDndDelay","dataUrl","getDataUrlInfo","_this4","getUrlFromString","setUrlInfoData","selectedNodeId","initTree","_this5","doInit","_this6","restoreState","autoOpenNodes","autoOpen","maxLevel","getAutoOpenMaxLevel","_restoreState","_restoreState2","isRestored","_this7","parseInt","$target","$button","$li","deselectCurrentNode","dataRtl","_this8","defaultOptions","mustToggle","selectOptions","canSelect","onCanSelectNode","selectable","openParents","previous_node","deselectedNode","deselected_node","deselectNodes","loadSubtree","tree_data","parent_node","selectedNodesUnderParent","urlInfoParam","_this9"],"mappings":"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"}