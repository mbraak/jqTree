{"version":3,"file":"tree.jquery.debug.js","sources":["src/version.ts","src/node.ts","src/dragAndDropHandler.ts","src/util.ts","src/elementsRenderer.ts","src/dataLoader.ts","src/keyHandler.ts","src/simple.widget.ts","src/mouse.widget.ts","src/saveStateHandler.ts","src/scrollHandler.ts","src/selectNodeHandler.ts","src/nodeElement.ts","src/tree.jquery.ts"],"sourcesContent":["const version = \"1.6.2\";\n\nexport default version;\n","interface NodeRecordWithChildren extends NodeRecord {\n    children: NodeData[];\n}\n\nexport enum Position {\n    Before = 1,\n    After,\n    Inside,\n    None,\n}\n\nconst positionNames: Record<string, Position> = {\n    before: Position.Before,\n    after: Position.After,\n    inside: Position.Inside,\n    none: Position.None,\n};\n\ntype IterateCallback = (node: Node, level: number) => boolean;\n\nexport const getPositionName = (position: Position): string => {\n    for (const name in positionNames) {\n        if (Object.prototype.hasOwnProperty.call(positionNames, name)) {\n            if (positionNames[name] === position) {\n                return name;\n            }\n        }\n    }\n\n    return \"\";\n};\n\nexport const getPosition = (name: string): Position | undefined =>\n    positionNames[name];\n\nconst isNodeRecordWithChildren = (\n    data: NodeData\n): data is NodeRecordWithChildren =>\n    typeof data === \"object\" &&\n    \"children\" in data &&\n    data[\"children\"] instanceof Array;\n\nexport class Node implements INode {\n    public id?: NodeId;\n    public name: string;\n    public children: Node[];\n    public parent: Node | null;\n    public idMapping: Map<NodeId, Node>;\n    public tree?: Node;\n    public nodeClass?: typeof Node;\n    public load_on_demand: boolean;\n    public is_open: boolean;\n    public element: HTMLElement;\n    public is_loading: boolean;\n    public isEmptyFolder: boolean;\n\n    [key: string]: unknown;\n\n    constructor(o: NodeData | null = null, isRoot = false, nodeClass = Node) {\n        this.name = \"\";\n        this.isEmptyFolder = false;\n        this.load_on_demand = false;\n\n        this.setData(o);\n\n        this.children = [];\n        this.parent = null;\n\n        if (isRoot) {\n            this.idMapping = new Map<NodeId, Node>();\n            this.tree = this;\n            this.nodeClass = nodeClass;\n        }\n    }\n\n    /*\n    Set the data of this node.\n\n    setData(string): set the name of the node\n    setdata(object): set attributes of the node\n\n    Examples:\n        setdata('node1')\n\n        setData({ name: 'node1', id: 1});\n\n        setData({ name: 'node2', id: 2, color: 'green'});\n\n    * This is an internal function; it is not in the docs\n    * Does not remove existing node values\n    */\n    public setData(o: NodeData | null): void {\n        if (!o) {\n            return;\n        } else if (typeof o === \"string\") {\n            this.name = o;\n        } else if (typeof o === \"object\") {\n            for (const key in o) {\n                if (Object.prototype.hasOwnProperty.call(o, key)) {\n                    const value = o[key];\n\n                    if (key === \"label\" || key === \"name\") {\n                        // You can use the 'label' key instead of 'name'; this is a legacy feature\n                        if (typeof value === \"string\") {\n                            this.name = value;\n                        }\n                    } else if (key !== \"children\" && key !== \"parent\") {\n                        // You can't update the children or the parent using this function\n                        this[key] = value;\n                    }\n                }\n            }\n        }\n    }\n\n    /*\n    Create tree from data.\n\n    Structure of data is:\n    [\n        {\n            name: 'node1',\n            children: [\n                { name: 'child1' },\n                { name: 'child2' }\n            ]\n        },\n        {\n            name: 'node2'\n        }\n    ]\n    */\n    public loadFromData(data: NodeData[]): Node {\n        this.removeChildren();\n\n        for (const o of data) {\n            const node = this.createNode(o);\n            this.addChild(node);\n\n            if (isNodeRecordWithChildren(o)) {\n                if (o.children.length === 0) {\n                    node.isEmptyFolder = true;\n                } else {\n                    node.loadFromData(o.children);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /*\n    Add child.\n\n    tree.addChild(\n        new Node('child1')\n    );\n    */\n    public addChild(node: Node): void {\n        this.children.push(node);\n        node.setParent(this);\n    }\n\n    /*\n    Add child at position. Index starts at 0.\n\n    tree.addChildAtPosition(\n        new Node('abc'),\n        1\n    );\n    */\n    public addChildAtPosition(node: Node, index: number): void {\n        this.children.splice(index, 0, node);\n        node.setParent(this);\n    }\n\n    /*\n    Remove child. This also removes the children of the node.\n\n    tree.removeChild(tree.children[0]);\n    */\n    public removeChild(node: Node): void {\n        // remove children from the index\n        node.removeChildren();\n\n        this.doRemoveChild(node);\n    }\n\n    /*\n    Get child index.\n\n    var index = getChildIndex(node);\n    */\n    public getChildIndex(node: Node): number {\n        return this.children.indexOf(node);\n    }\n\n    /*\n    Does the tree have children?\n\n    if (tree.hasChildren()) {\n        //\n    }\n    */\n    public hasChildren(): boolean {\n        return this.children.length !== 0;\n    }\n\n    public isFolder(): boolean {\n        return this.hasChildren() || this.load_on_demand;\n    }\n\n    /*\n    Iterate over all the nodes in the tree.\n\n    Calls callback with (node, level).\n\n    The callback must return true to continue the iteration on current node.\n\n    tree.iterate(\n        function(node, level) {\n           console.log(node.name);\n\n           // stop iteration after level 2\n           return (level <= 2);\n        }\n    );\n\n    */\n    public iterate(callback: IterateCallback): void {\n        const _iterate = (node: Node, level: number): void => {\n            if (node.children) {\n                for (const child of node.children) {\n                    const result = callback(child, level);\n\n                    if (result && child.hasChildren()) {\n                        _iterate(child, level + 1);\n                    }\n                }\n            }\n        };\n\n        _iterate(this, 0);\n    }\n\n    /*\n    Move node relative to another node.\n\n    Argument position: Position.BEFORE, Position.AFTER or Position.Inside\n\n    // move node1 after node2\n    tree.moveNode(node1, node2, Position.AFTER);\n    */\n    public moveNode(\n        movedNode: Node,\n        targetNode: Node,\n        position: Position\n    ): boolean {\n        if (!movedNode.parent || movedNode.isParentOf(targetNode)) {\n            // - Node is parent of target node\n            // - Or, parent is empty\n            return false;\n        } else {\n            movedNode.parent.doRemoveChild(movedNode);\n\n            switch (position) {\n                case Position.After: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode) + 1\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Before: {\n                    if (targetNode.parent) {\n                        targetNode.parent.addChildAtPosition(\n                            movedNode,\n                            targetNode.parent.getChildIndex(targetNode)\n                        );\n                        return true;\n                    }\n                    return false;\n                }\n\n                case Position.Inside: {\n                    // move inside as first child\n                    targetNode.addChildAtPosition(movedNode, 0);\n                    return true;\n                }\n\n                default:\n                    return false;\n            }\n        }\n    }\n\n    /*\n    Get the tree as data.\n    */\n    public getData(includeParent = false): NodeRecord[] {\n        const getDataFromNodes = (nodes: Node[]): Record<string, unknown>[] => {\n            return nodes.map((node) => {\n                const tmpNode: Record<string, unknown> = {};\n\n                for (const k in node) {\n                    if (\n                        [\n                            \"parent\",\n                            \"children\",\n                            \"element\",\n                            \"idMapping\",\n                            \"load_on_demand\",\n                            \"nodeClass\",\n                            \"tree\",\n                            \"isEmptyFolder\",\n                        ].indexOf(k) === -1 &&\n                        Object.prototype.hasOwnProperty.call(node, k)\n                    ) {\n                        const v = node[k];\n                        tmpNode[k] = v;\n                    }\n                }\n\n                if (node.hasChildren()) {\n                    tmpNode[\"children\"] = getDataFromNodes(node.children);\n                }\n\n                return tmpNode;\n            });\n        };\n\n        if (includeParent) {\n            return getDataFromNodes([this]);\n        } else {\n            return getDataFromNodes(this.children);\n        }\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.getNodeByCallback((node: Node) => node.name === name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        const node = this.getNodeByCallback((n: Node) => n.name === name);\n\n        if (!node) {\n            throw `Node with name ${name} not found`;\n        }\n\n        return node;\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        let result: Node | null = null;\n\n        this.iterate((node: Node) => {\n            if (result) {\n                return false;\n            } else if (callback(node)) {\n                result = node;\n                return false;\n            } else {\n                return true;\n            }\n        });\n\n        return result;\n    }\n\n    public addAfter(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex + 1);\n\n            if (\n                isNodeRecordWithChildren(nodeInfo) &&\n                nodeInfo.children.length\n            ) {\n                node.loadFromData(nodeInfo.children);\n            }\n\n            return node;\n        }\n    }\n\n    public addBefore(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const node = this.createNode(nodeInfo);\n\n            const childIndex = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, childIndex);\n\n            if (\n                isNodeRecordWithChildren(nodeInfo) &&\n                nodeInfo.children.length\n            ) {\n                node.loadFromData(nodeInfo.children);\n            }\n\n            return node;\n        }\n    }\n\n    public addParent(nodeInfo: NodeData): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const newParent = this.createNode(nodeInfo);\n\n            if (this.tree) {\n                newParent.setParent(this.tree);\n            }\n            const originalParent = this.parent;\n\n            for (const child of originalParent.children) {\n                newParent.addChild(child);\n            }\n\n            originalParent.children = [];\n            originalParent.addChild(newParent);\n            return newParent;\n        }\n    }\n\n    public remove(): void {\n        if (this.parent) {\n            this.parent.removeChild(this);\n            this.parent = null;\n        }\n    }\n\n    public append(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChild(node);\n\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            node.loadFromData(nodeInfo.children);\n        }\n\n        return node;\n    }\n\n    public prepend(nodeInfo: NodeData): Node {\n        const node = this.createNode(nodeInfo);\n        this.addChildAtPosition(node, 0);\n\n        if (isNodeRecordWithChildren(nodeInfo) && nodeInfo.children.length) {\n            node.loadFromData(nodeInfo.children);\n        }\n\n        return node;\n    }\n\n    public isParentOf(node: Node): boolean {\n        let parent = node.parent;\n\n        while (parent) {\n            if (parent === this) {\n                return true;\n            }\n\n            parent = parent.parent;\n        }\n\n        return false;\n    }\n\n    public getLevel(): number {\n        let level = 0;\n        let node: Node = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n        while (node.parent) {\n            level += 1;\n            node = node.parent;\n        }\n\n        return level;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.idMapping.get(nodeId) || null;\n    }\n\n    public addNodeToIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.set(node.id, node);\n        }\n    }\n\n    public removeNodeFromIndex(node: Node): void {\n        if (node.id != null) {\n            this.idMapping.delete(node.id);\n        }\n    }\n\n    public removeChildren(): void {\n        this.iterate((child: Node) => {\n            this.tree?.removeNodeFromIndex(child);\n            return true;\n        });\n\n        this.children = [];\n    }\n\n    public getPreviousSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousIndex = this.parent.getChildIndex(this) - 1;\n            if (previousIndex >= 0) {\n                return this.parent.children[previousIndex];\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNextSibling(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const nextIndex = this.parent.getChildIndex(this) + 1;\n            if (nextIndex < this.parent.children.length) {\n                return this.parent.children[nextIndex];\n            } else {\n                return null;\n            }\n        }\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.filter((node: Node) => node[key] === value);\n    }\n\n    public filter(f: (node: Node) => boolean): Node[] {\n        const result: Node[] = [];\n\n        this.iterate((node: Node) => {\n            if (f(node)) {\n                result.push(node);\n            }\n\n            return true;\n        });\n\n        return result;\n    }\n\n    public getNextNode(includeChildren = true): Node | null {\n        if (includeChildren && this.hasChildren() && this.is_open) {\n            // First child\n            return this.children[0];\n        } else {\n            if (!this.parent) {\n                return null;\n            } else {\n                const nextSibling = this.getNextSibling();\n                if (nextSibling) {\n                    // Next sibling\n                    return nextSibling;\n                } else {\n                    // Next node of parent\n                    return this.parent.getNextNode(false);\n                }\n            }\n        }\n    }\n\n    public getPreviousNode(): Node | null {\n        if (!this.parent) {\n            return null;\n        } else {\n            const previousSibling = this.getPreviousSibling();\n            if (previousSibling) {\n                if (\n                    !previousSibling.hasChildren() ||\n                    !previousSibling.is_open\n                ) {\n                    // Previous sibling\n                    return previousSibling;\n                } else {\n                    // Last child of previous sibling\n                    return previousSibling.getLastChild();\n                }\n            } else {\n                return this.getParent();\n            }\n        }\n    }\n\n    public getParent(): Node | null {\n        // Return parent except if it is the root node\n        if (!this.parent) {\n            return null;\n        } else if (!this.parent.parent) {\n            // Root node -> null\n            return null;\n        } else {\n            return this.parent;\n        }\n    }\n\n    public getLastChild(): Node | null {\n        if (!this.hasChildren()) {\n            return null;\n        } else {\n            const lastChild = this.children[this.children.length - 1];\n            if (!(lastChild.hasChildren() && lastChild.is_open)) {\n                return lastChild;\n            } else {\n                return lastChild.getLastChild();\n            }\n        }\n    }\n\n    // Init Node from data without making it the root of the tree\n    public initFromData(data: NodeData): void {\n        const addNode = (nodeData: NodeData): void => {\n            this.setData(nodeData);\n\n            if (\n                isNodeRecordWithChildren(nodeData) &&\n                nodeData.children.length\n            ) {\n                addChildren(nodeData.children);\n            }\n        };\n\n        const addChildren = (childrenData: NodeData[]): void => {\n            for (const child of childrenData) {\n                const node = this.createNode();\n                node.initFromData(child);\n                this.addChild(node);\n            }\n        };\n\n        addNode(data);\n    }\n\n    private setParent(parent: Node): void {\n        this.parent = parent;\n        this.tree = parent.tree;\n        this.tree?.addNodeToIndex(this);\n    }\n\n    private doRemoveChild(node: Node): void {\n        this.children.splice(this.getChildIndex(node), 1);\n        this.tree?.removeNodeFromIndex(node);\n    }\n\n    private getNodeClass(): typeof Node {\n        return this.nodeClass || this?.tree?.nodeClass || Node;\n    }\n\n    private createNode(nodeData?: NodeData): Node {\n        const nodeClass = this.getNodeClass();\n        return new nodeClass(nodeData);\n    }\n}\n","import { getPositionName, Node, Position } from \"./node\";\nimport { DropHint, HitArea, PositionInfo } from \"./types\";\nimport { NodeElement } from \"./nodeElement\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\ninterface Dimensions {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n}\n\nexport class DragAndDropHandler {\n    public hitAreas: HitArea[];\n    public isDragging: boolean;\n    public currentItem: NodeElement | null;\n    public hoveredArea: HitArea | null;\n    public positionInfo: PositionInfo | null;\n\n    private treeWidget: JqTreeWidget;\n    private dragElement: DragElement | null;\n    private previousGhost: DropHint | null;\n    private openFolderTimer: number | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        this.hoveredArea = null;\n        this.hitAreas = [];\n        this.isDragging = false;\n        this.currentItem = null;\n        this.positionInfo = null;\n    }\n\n    public mouseCapture(positionInfo: PositionInfo): boolean | null {\n        const $element = jQuery(positionInfo.target);\n\n        if (!this.mustCaptureElement($element)) {\n            return null;\n        }\n\n        if (\n            this.treeWidget.options.onIsMoveHandle &&\n            !this.treeWidget.options.onIsMoveHandle($element)\n        ) {\n            return null;\n        }\n\n        let nodeElement = this.treeWidget._getNodeElement($element);\n\n        if (nodeElement && this.treeWidget.options.onCanMove) {\n            if (!this.treeWidget.options.onCanMove(nodeElement.node)) {\n                nodeElement = null;\n            }\n        }\n\n        this.currentItem = nodeElement;\n        return this.currentItem != null;\n    }\n\n    public mouseStart(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.refresh();\n\n        const offset = jQuery(positionInfo.target).offset();\n        const left = offset ? offset.left : 0;\n        const top = offset ? offset.top : 0;\n\n        const node = this.currentItem.node;\n\n        this.dragElement = new DragElement(\n            node.name,\n            positionInfo.pageX - left,\n            positionInfo.pageY - top,\n            this.treeWidget.element,\n            this.treeWidget.options.autoEscape ?? true\n        );\n\n        this.isDragging = true;\n        this.positionInfo = positionInfo;\n        this.currentItem.$element.addClass(\"jqtree-moving\");\n        return true;\n    }\n\n    public mouseDrag(positionInfo: PositionInfo): boolean {\n        if (\n            !this.currentItem ||\n            !this.dragElement ||\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return false;\n        }\n\n        this.dragElement.move(positionInfo.pageX, positionInfo.pageY);\n        this.positionInfo = positionInfo;\n\n        const area = this.findHoveredArea(\n            positionInfo.pageX,\n            positionInfo.pageY\n        );\n\n        if (area && this.canMoveToArea(area)) {\n            if (!area.node.isFolder()) {\n                this.stopOpenFolderTimer();\n            }\n\n            if (this.hoveredArea !== area) {\n                this.hoveredArea = area;\n\n                // If this is a closed folder, start timer to open it\n                if (this.mustOpenFolderTimer(area)) {\n                    this.startOpenFolderTimer(area.node);\n                } else {\n                    this.stopOpenFolderTimer();\n                }\n\n                this.updateDropHint();\n            }\n        } else {\n            this.removeDropHint();\n            this.stopOpenFolderTimer();\n            this.hoveredArea = area;\n        }\n\n        if (!area) {\n            if (this.treeWidget.options.onDragMove) {\n                this.treeWidget.options.onDragMove(\n                    this.currentItem.node,\n                    positionInfo.originalEvent\n                );\n            }\n        }\n\n        return true;\n    }\n\n    public mouseStop(positionInfo: PositionInfo): boolean {\n        this.moveItem(positionInfo);\n        this.clear();\n        this.removeHover();\n        this.removeDropHint();\n        this.removeHitAreas();\n\n        const currentItem = this.currentItem;\n\n        if (this.currentItem) {\n            this.currentItem.$element.removeClass(\"jqtree-moving\");\n            this.currentItem = null;\n        }\n\n        this.isDragging = false;\n        this.positionInfo = null;\n\n        if (!this.hoveredArea && currentItem) {\n            if (this.treeWidget.options.onDragStop) {\n                this.treeWidget.options.onDragStop(\n                    currentItem.node,\n                    positionInfo.originalEvent\n                );\n            }\n        }\n\n        return false;\n    }\n\n    public refresh(): void {\n        this.removeHitAreas();\n\n        if (this.currentItem) {\n            this.generateHitAreas();\n\n            this.currentItem = this.treeWidget._getNodeElementForNode(\n                this.currentItem.node\n            );\n\n            if (this.isDragging) {\n                this.currentItem.$element.addClass(\"jqtree-moving\");\n            }\n        }\n    }\n\n    private generateHitAreas(): void {\n        if (!this.currentItem) {\n            this.hitAreas = [];\n        } else {\n            const hitAreasGenerator = new HitAreasGenerator(\n                this.treeWidget.tree,\n                this.currentItem.node,\n                this.getTreeDimensions().bottom\n            );\n            this.hitAreas = hitAreasGenerator.generate();\n        }\n    }\n\n    private mustCaptureElement($element: JQuery<HTMLElement>): boolean {\n        return !$element.is(\"input,select,textarea\");\n    }\n\n    private canMoveToArea(area: HitArea): boolean {\n        if (!this.treeWidget.options.onCanMoveTo) {\n            return true;\n        }\n\n        if (!this.currentItem) {\n            return false;\n        }\n\n        const positionName = getPositionName(area.position);\n\n        return this.treeWidget.options.onCanMoveTo(\n            this.currentItem.node,\n            area.node,\n            positionName\n        );\n    }\n\n    private removeHitAreas(): void {\n        this.hitAreas = [];\n    }\n\n    private clear(): void {\n        if (this.dragElement) {\n            this.dragElement.remove();\n            this.dragElement = null;\n        }\n    }\n\n    private removeDropHint(): void {\n        if (this.previousGhost) {\n            this.previousGhost.remove();\n        }\n    }\n\n    private removeHover(): void {\n        this.hoveredArea = null;\n    }\n\n    private findHoveredArea(x: number, y: number): HitArea | null {\n        const dimensions = this.getTreeDimensions();\n\n        if (\n            x < dimensions.left ||\n            y < dimensions.top ||\n            x > dimensions.right ||\n            y > dimensions.bottom\n        ) {\n            return null;\n        }\n\n        let low = 0;\n        let high = this.hitAreas.length;\n        while (low < high) {\n            const mid = (low + high) >> 1;\n            const area = this.hitAreas[mid];\n\n            if (y < area.top) {\n                high = mid;\n            } else if (y > area.bottom) {\n                low = mid + 1;\n            } else {\n                return area;\n            }\n        }\n\n        return null;\n    }\n\n    private mustOpenFolderTimer(area: HitArea): boolean {\n        const node = area.node;\n\n        return (\n            node.isFolder() &&\n            !node.is_open &&\n            area.position === Position.Inside\n        );\n    }\n\n    private updateDropHint(): void {\n        if (!this.hoveredArea) {\n            return;\n        }\n\n        // remove previous drop hint\n        this.removeDropHint();\n\n        // add new drop hint\n        const nodeElement = this.treeWidget._getNodeElementForNode(\n            this.hoveredArea.node\n        );\n        this.previousGhost = nodeElement.addDropHint(this.hoveredArea.position);\n    }\n\n    private startOpenFolderTimer(folder: Node): void {\n        const openFolder = (): void => {\n            this.treeWidget._openNode(\n                folder,\n                this.treeWidget.options.slide,\n                () => {\n                    this.refresh();\n                    this.updateDropHint();\n                }\n            );\n        };\n\n        this.stopOpenFolderTimer();\n\n        const openFolderDelay = this.treeWidget.options.openFolderDelay;\n\n        if (openFolderDelay !== false) {\n            this.openFolderTimer = window.setTimeout(\n                openFolder,\n                openFolderDelay\n            );\n        }\n    }\n\n    private stopOpenFolderTimer(): void {\n        if (this.openFolderTimer) {\n            clearTimeout(this.openFolderTimer);\n            this.openFolderTimer = null;\n        }\n    }\n\n    private moveItem(positionInfo: PositionInfo): void {\n        if (\n            this.currentItem &&\n            this.hoveredArea &&\n            this.hoveredArea.position !== Position.None &&\n            this.canMoveToArea(this.hoveredArea)\n        ) {\n            const movedNode = this.currentItem.node;\n            const targetNode = this.hoveredArea.node;\n            const position = this.hoveredArea.position;\n            const previousParent = movedNode.parent;\n\n            if (position === Position.Inside) {\n                this.hoveredArea.node.is_open = true;\n            }\n\n            const doMove = (): void => {\n                this.treeWidget.tree.moveNode(movedNode, targetNode, position);\n                this.treeWidget.element.empty();\n                this.treeWidget._refreshElements(null);\n            };\n\n            const event = this.treeWidget._triggerEvent(\"tree.move\", {\n                move_info: {\n                    moved_node: movedNode,\n                    target_node: targetNode,\n                    position: getPositionName(position),\n                    previous_parent: previousParent,\n                    do_move: doMove,\n                    original_event: positionInfo.originalEvent,\n                },\n            });\n\n            if (!event.isDefaultPrevented()) {\n                doMove();\n            }\n        }\n    }\n\n    private getTreeDimensions(): Dimensions {\n        // Return the dimensions of the tree. Add a margin to the bottom to allow\n        // to drag-and-drop after the last element.\n        const offset = this.treeWidget.element.offset();\n\n        if (!offset) {\n            return { left: 0, top: 0, right: 0, bottom: 0 };\n        } else {\n            const el = this.treeWidget.element;\n            const width = el.width() || 0;\n            const height = el.height() || 0;\n            const left = offset.left + this.treeWidget._getScrollLeft();\n\n            return {\n                left,\n                top: offset.top,\n                right: left + width,\n                bottom: offset.top + height + 16,\n            };\n        }\n    }\n}\n\nabstract class VisibleNodeIterator {\n    private tree: Node;\n\n    constructor(tree: Node) {\n        this.tree = tree;\n    }\n\n    protected iterate(): void {\n        let isFirstNode = true;\n\n        const _iterateNode = (node: Node, nextNode: Node | null): void => {\n            let mustIterateInside =\n                (node.is_open || !node.element) && node.hasChildren();\n\n            let $element: JQuery<HTMLElement> | null = null;\n\n            if (node.element) {\n                $element = jQuery(node.element);\n\n                if (!$element.is(\":visible\")) {\n                    return;\n                }\n\n                if (isFirstNode) {\n                    this.handleFirstNode(node);\n                    isFirstNode = false;\n                }\n\n                if (!node.hasChildren()) {\n                    this.handleNode(node, nextNode, $element);\n                } else if (node.is_open) {\n                    if (!this.handleOpenFolder(node, $element)) {\n                        mustIterateInside = false;\n                    }\n                } else {\n                    this.handleClosedFolder(node, nextNode, $element);\n                }\n            }\n\n            if (mustIterateInside) {\n                const childrenLength = node.children.length;\n                node.children.forEach((_, i) => {\n                    if (i === childrenLength - 1) {\n                        _iterateNode(node.children[i], null);\n                    } else {\n                        _iterateNode(node.children[i], node.children[i + 1]);\n                    }\n                });\n\n                if (node.is_open && $element) {\n                    this.handleAfterOpenFolder(node, nextNode);\n                }\n            }\n        };\n\n        _iterateNode(this.tree, null);\n    }\n\n    protected abstract handleNode(\n        node: Node,\n        nextNode: Node | null,\n        $element: JQuery\n    ): void;\n\n    /*\n    override\n    return\n        - true: continue iterating\n        - false: stop iterating\n    */\n    protected abstract handleOpenFolder(node: Node, $element: JQuery): boolean;\n\n    protected abstract handleClosedFolder(\n        node: Node,\n        nextNode: Node | null,\n        $element: JQuery\n    ): void;\n\n    protected abstract handleAfterOpenFolder(\n        node: Node,\n        nextNode: Node | null\n    ): void;\n\n    protected abstract handleFirstNode(node: Node): void;\n}\n\nexport class HitAreasGenerator extends VisibleNodeIterator {\n    private currentNode: Node;\n    private treeBottom: number;\n    private positions: HitArea[];\n    private lastTop: number;\n\n    constructor(tree: Node, currentNode: Node, treeBottom: number) {\n        super(tree);\n\n        this.currentNode = currentNode;\n        this.treeBottom = treeBottom;\n    }\n\n    public generate(): HitArea[] {\n        this.positions = [];\n        this.lastTop = 0;\n\n        this.iterate();\n\n        return this.generateHitAreas(this.positions);\n    }\n\n    protected generateHitAreas(positions: HitArea[]): HitArea[] {\n        let previousTop = -1;\n        let group = [];\n        const hitAreas: HitArea[] = [];\n\n        for (const position of positions) {\n            if (position.top !== previousTop && group.length) {\n                if (group.length) {\n                    this.generateHitAreasForGroup(\n                        hitAreas,\n                        group,\n                        previousTop,\n                        position.top\n                    );\n                }\n\n                previousTop = position.top;\n                group = [];\n            }\n\n            group.push(position);\n        }\n\n        this.generateHitAreasForGroup(\n            hitAreas,\n            group,\n            previousTop,\n            this.treeBottom\n        );\n\n        return hitAreas;\n    }\n\n    protected handleOpenFolder(node: Node, $element: JQuery): boolean {\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            // Stop iterating\n            return false;\n        }\n\n        // Cannot move before current item\n        if (node.children[0] !== this.currentNode) {\n            this.addPosition(node, Position.Inside, this.getTop($element));\n        }\n\n        // Continue iterating\n        return true;\n    }\n\n    protected handleClosedFolder(\n        node: Node,\n        nextNode: Node,\n        $element: JQuery\n    ): void {\n        const top = this.getTop($element);\n\n        if (node === this.currentNode) {\n            // Cannot move after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n\n            // Cannot move before current item\n            if (nextNode !== this.currentNode) {\n                this.addPosition(node, Position.After, top);\n            }\n        }\n    }\n\n    protected handleFirstNode(node: Node): void {\n        if (node !== this.currentNode) {\n            this.addPosition(\n                node,\n                Position.Before,\n                this.getTop(jQuery(node.element))\n            );\n        }\n    }\n\n    protected handleAfterOpenFolder(node: Node, nextNode: Node): void {\n        if (node === this.currentNode || nextNode === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, this.lastTop);\n        } else {\n            this.addPosition(node, Position.After, this.lastTop);\n        }\n    }\n\n    protected handleNode(node: Node, nextNode: Node, $element: JQuery): void {\n        const top = this.getTop($element);\n\n        if (node === this.currentNode) {\n            // Cannot move inside current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.Inside, top);\n        }\n\n        if (nextNode === this.currentNode || node === this.currentNode) {\n            // Cannot move before or after current item\n            this.addPosition(node, Position.None, top);\n        } else {\n            this.addPosition(node, Position.After, top);\n        }\n    }\n\n    private getTop($element: JQuery<HTMLElement>): number {\n        const offset = $element.offset();\n\n        return offset ? offset.top : 0;\n    }\n\n    private addPosition(node: Node, position: number, top: number): void {\n        const area = {\n            top,\n            bottom: 0,\n            node,\n            position,\n        };\n\n        this.positions.push(area);\n        this.lastTop = top;\n    }\n\n    private generateHitAreasForGroup(\n        hitAreas: HitArea[],\n        positionsInGroup: HitArea[],\n        top: number,\n        bottom: number\n    ): void {\n        // limit positions in group\n        const positionCount = Math.min(positionsInGroup.length, 4);\n\n        const areaHeight = Math.round((bottom - top) / positionCount);\n        let areaTop = top;\n\n        let i = 0;\n        while (i < positionCount) {\n            const position = positionsInGroup[i];\n\n            hitAreas.push({\n                top: areaTop,\n                bottom: areaTop + areaHeight,\n                node: position.node,\n                position: position.position,\n            });\n\n            areaTop += areaHeight;\n            i += 1;\n        }\n    }\n}\n\nclass DragElement {\n    private offsetX: number;\n    private offsetY: number;\n    private $element: JQuery;\n\n    constructor(\n        nodeName: string,\n        offsetX: number,\n        offsetY: number,\n        $tree: JQuery,\n        autoEscape: boolean\n    ) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n\n        this.$element = jQuery(\"<span>\").addClass(\n            \"jqtree-title jqtree-dragging\"\n        );\n\n        if (autoEscape) {\n            this.$element.text(nodeName);\n        } else {\n            this.$element.html(nodeName);\n        }\n\n        this.$element.css(\"position\", \"absolute\");\n        $tree.append(this.$element);\n    }\n\n    public move(pageX: number, pageY: number): void {\n        this.$element.offset({\n            left: pageX - this.offsetX,\n            top: pageY - this.offsetY,\n        });\n    }\n\n    public remove(): void {\n        this.$element.remove();\n    }\n}\n","export const isInt = (n: unknown): boolean =>\n    typeof n === \"number\" && n % 1 === 0;\n\nexport const isFunction = (v: unknown): boolean => typeof v === \"function\";\n\nexport const getBoolString = (value: unknown): string =>\n    value ? \"true\" : \"false\";\n","import { getBoolString } from \"./util\";\nimport { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\ntype IconElement = Text | Element;\n\nexport default class ElementsRenderer {\n    public openedIconElement: IconElement;\n    public closedIconElement: IconElement;\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        this.openedIconElement = this.createButtonElement(\n            treeWidget.options.openedIcon || \"+\"\n        );\n        this.closedIconElement = this.createButtonElement(\n            treeWidget.options.closedIcon || \"-\"\n        );\n    }\n\n    public render(fromNode: Node | null): void {\n        if (fromNode && fromNode.parent) {\n            this.renderFromNode(fromNode);\n        } else {\n            this.renderFromRoot();\n        }\n    }\n\n    public renderFromRoot(): void {\n        const $element = this.treeWidget.element;\n        $element.empty();\n\n        this.createDomElements(\n            $element[0],\n            this.treeWidget.tree.children,\n            true,\n            1\n        );\n    }\n\n    public renderFromNode(node: Node): void {\n        // remember current li\n        const $previousLi = jQuery(node.element);\n\n        // create element\n        const li = this.createLi(node, node.getLevel());\n        this.attachNodeData(node, li);\n\n        // add element to dom\n        $previousLi.after(li);\n\n        // remove previous li\n        $previousLi.remove();\n\n        // create children\n        if (node.children) {\n            this.createDomElements(\n                li,\n                node.children,\n                false,\n                node.getLevel() + 1\n            );\n        }\n    }\n\n    private createDomElements(\n        element: Element,\n        children: Node[],\n        isRootNode: boolean,\n        level: number\n    ): void {\n        const ul = this.createUl(isRootNode);\n        element.appendChild(ul);\n\n        for (const child of children) {\n            const li = this.createLi(child, level);\n            ul.appendChild(li);\n\n            this.attachNodeData(child, li);\n\n            if (child.hasChildren()) {\n                this.createDomElements(li, child.children, false, level + 1);\n            }\n        }\n    }\n\n    private attachNodeData(node: Node, li: HTMLElement): void {\n        node.element = li;\n        jQuery(li).data(\"node\", node);\n    }\n\n    private createUl(isRootNode: boolean): HTMLUListElement {\n        let classString;\n        let role;\n\n        if (!isRootNode) {\n            classString = \"\";\n            role = \"group\";\n        } else {\n            classString = \"jqtree-tree\";\n            role = \"tree\";\n\n            if (this.treeWidget.options.rtl) {\n                classString += \" jqtree-rtl\";\n            }\n        }\n\n        if (this.treeWidget.options.dragAndDrop) {\n            classString += \" jqtree-dnd\";\n        }\n\n        const ul = document.createElement(\"ul\");\n        ul.className = `jqtree_common ${classString}`;\n\n        ul.setAttribute(\"role\", role);\n\n        return ul;\n    }\n\n    private createLi(node: Node, level: number): HTMLLIElement {\n        const isSelected = Boolean(\n            this.treeWidget.selectNodeHandler.isNodeSelected(node)\n        );\n\n        const mustShowFolder =\n            node.isFolder() ||\n            (node.isEmptyFolder && this.treeWidget.options.showEmptyFolder);\n\n        const li = mustShowFolder\n            ? this.createFolderLi(node, level, isSelected)\n            : this.createNodeLi(node, level, isSelected);\n\n        if (this.treeWidget.options.onCreateLi) {\n            this.treeWidget.options.onCreateLi(node, jQuery(li), isSelected);\n        }\n\n        return li;\n    }\n\n    private createFolderLi(\n        node: Node,\n        level: number,\n        isSelected: boolean\n    ): HTMLLIElement {\n        const buttonClasses = this.getButtonClasses(node);\n        const folderClasses = this.getFolderClasses(node, isSelected);\n\n        const iconElement = node.is_open\n            ? this.openedIconElement\n            : this.closedIconElement;\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = `jqtree_common ${folderClasses}`;\n        li.setAttribute(\"role\", \"presentation\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"presentation\");\n\n        li.appendChild(div);\n\n        // button link\n        const buttonLink = document.createElement(\"a\");\n        buttonLink.className = buttonClasses;\n\n        buttonLink.appendChild(iconElement.cloneNode(true));\n\n        buttonLink.setAttribute(\"role\", \"presentation\");\n        buttonLink.setAttribute(\"aria-hidden\", \"true\");\n\n        if (this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        // title span\n        div.appendChild(\n            this.createTitleSpan(\n                node.name,\n                level,\n                isSelected,\n                node.is_open,\n                true\n            )\n        );\n\n        if (!this.treeWidget.options.buttonLeft) {\n            div.appendChild(buttonLink);\n        }\n\n        return li;\n    }\n\n    private createNodeLi(\n        node: Node,\n        level: number,\n        isSelected: boolean\n    ): HTMLLIElement {\n        const liClasses = [\"jqtree_common\"];\n\n        if (isSelected) {\n            liClasses.push(\"jqtree-selected\");\n        }\n\n        const classString = liClasses.join(\" \");\n\n        // li\n        const li = document.createElement(\"li\");\n        li.className = classString;\n        li.setAttribute(\"role\", \"presentation\");\n\n        // div\n        const div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"presentation\");\n\n        li.appendChild(div);\n\n        // title span\n        div.appendChild(\n            this.createTitleSpan(\n                node.name,\n                level,\n                isSelected,\n                node.is_open,\n                false\n            )\n        );\n\n        return li;\n    }\n\n    private createTitleSpan(\n        nodeName: string,\n        level: number,\n        isSelected: boolean,\n        isOpen: boolean,\n        isFolder: boolean\n    ): HTMLSpanElement {\n        const titleSpan = document.createElement(\"span\");\n\n        let classes = \"jqtree-title jqtree_common\";\n\n        if (isFolder) {\n            classes += \" jqtree-title-folder\";\n        }\n\n        classes += ` jqtree-title-button-${\n            this.treeWidget.options.buttonLeft ? \"left\" : \"right\"\n        }`;\n\n        titleSpan.className = classes;\n\n        titleSpan.setAttribute(\"role\", \"treeitem\");\n        titleSpan.setAttribute(\"aria-level\", `${level}`);\n\n        titleSpan.setAttribute(\"aria-selected\", getBoolString(isSelected));\n        titleSpan.setAttribute(\"aria-expanded\", getBoolString(isOpen));\n\n        if (isSelected) {\n            const tabIndex = this.treeWidget.options.tabIndex;\n\n            if (tabIndex !== undefined) {\n                titleSpan.setAttribute(\"tabindex\", `${tabIndex}`);\n            }\n        }\n\n        if (this.treeWidget.options.autoEscape) {\n            titleSpan.textContent = nodeName;\n        } else {\n            titleSpan.innerHTML = nodeName;\n        }\n\n        return titleSpan;\n    }\n\n    private getButtonClasses(node: Node): string {\n        const classes = [\"jqtree-toggler\", \"jqtree_common\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (this.treeWidget.options.buttonLeft) {\n            classes.push(\"jqtree-toggler-left\");\n        } else {\n            classes.push(\"jqtree-toggler-right\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private getFolderClasses(node: Node, isSelected: boolean): string {\n        const classes = [\"jqtree-folder\"];\n\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n\n        if (isSelected) {\n            classes.push(\"jqtree-selected\");\n        }\n\n        if (node.is_loading) {\n            classes.push(\"jqtree-loading\");\n        }\n\n        return classes.join(\" \");\n    }\n\n    private createButtonElement(value: string | Element): IconElement {\n        if (typeof value === \"string\") {\n            // convert value to html\n            const div = document.createElement(\"div\");\n            div.innerHTML = value;\n\n            return document.createTextNode(div.innerHTML);\n        } else {\n            return jQuery(value)[0];\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport type HandleFinishedLoading = () => void;\n\nexport default class DataLoader {\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n    }\n\n    public loadFromUrl(\n        urlInfo: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null\n    ): void {\n        if (!urlInfo) {\n            return;\n        }\n\n        const $el = this.getDomElement(parentNode);\n        this.addLoadingClass($el);\n        this.notifyLoading(true, parentNode, $el);\n\n        const stopLoading = (): void => {\n            this.removeLoadingClass($el);\n            this.notifyLoading(false, parentNode, $el);\n        };\n\n        const handleSuccess = (data: string | NodeData[]): void => {\n            stopLoading();\n            this.treeWidget.loadData(this.parseData(data), parentNode);\n\n            if (onFinished && typeof onFinished === \"function\") {\n                onFinished();\n            }\n        };\n\n        const handleError = (jqXHR: JQuery.jqXHR): void => {\n            stopLoading();\n\n            if (this.treeWidget.options.onLoadFailed) {\n                this.treeWidget.options.onLoadFailed(jqXHR);\n            }\n        };\n\n        this.submitRequest(urlInfo, handleSuccess, handleError);\n    }\n\n    private addLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.addClass(\"jqtree-loading\");\n        }\n    }\n\n    private removeLoadingClass($el: JQuery<HTMLElement>): void {\n        if ($el) {\n            $el.removeClass(\"jqtree-loading\");\n        }\n    }\n\n    private getDomElement(parentNode: Node | null): JQuery<HTMLElement> {\n        if (parentNode) {\n            return jQuery(parentNode.element);\n        } else {\n            return this.treeWidget.element;\n        }\n    }\n\n    private notifyLoading(\n        isLoading: boolean,\n        node: Node | null,\n        $el: JQuery\n    ): void {\n        if (this.treeWidget.options.onLoading) {\n            this.treeWidget.options.onLoading(isLoading, node, $el);\n        }\n\n        this.treeWidget._triggerEvent(\"tree.loading_data\", {\n            isLoading,\n            node,\n            $el,\n        });\n    }\n\n    private submitRequest(\n        urlInfoInput: string | JQuery.AjaxSettings,\n        handleSuccess: JQuery.Ajax.SuccessCallback<any>,\n        handleError: JQuery.Ajax.ErrorCallback<any>\n    ): void {\n        const urlInfo =\n            typeof urlInfoInput === \"string\"\n                ? { url: urlInfoInput }\n                : urlInfoInput;\n\n        const ajaxSettings: JQuery.AjaxSettings = {\n            method: \"GET\",\n            cache: false,\n            dataType: \"json\",\n            success: handleSuccess,\n            error: handleError,\n            ...urlInfo,\n        };\n\n        ajaxSettings.method = ajaxSettings.method?.toUpperCase() || \"GET\";\n\n        void jQuery.ajax(ajaxSettings);\n    }\n\n    private parseData(data: string | NodeData[]): NodeData[] {\n        const { dataFilter } = this.treeWidget.options;\n\n        const getParsedData = () => {\n            if (typeof data === \"string\") {\n                return JSON.parse(data) as NodeData[];\n            } else {\n                return data;\n            }\n        };\n\n        const parsedData = getParsedData();\n\n        if (dataFilter) {\n            return dataFilter(parsedData);\n        } else {\n            return parsedData;\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport default class KeyHandler {\n    private static LEFT = 37;\n    private static UP = 38;\n    private static RIGHT = 39;\n    private static DOWN = 40;\n\n    private treeWidget: JqTreeWidget;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n\n        if (treeWidget.options.keyboardSupport) {\n            jQuery(document).on(\"keydown.jqtree\", this.handleKeyDown);\n        }\n    }\n\n    public deinit(): void {\n        jQuery(document).off(\"keydown.jqtree\");\n    }\n\n    public moveDown(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getNextNode());\n    }\n\n    public moveUp(selectedNode: Node): boolean {\n        return this.selectNode(selectedNode.getPreviousNode());\n    }\n\n    public moveRight(selectedNode: Node): boolean {\n        if (!selectedNode.isFolder()) {\n            return true;\n        } else {\n            // folder node\n            if (selectedNode.is_open) {\n                // Right moves to the first child of an open node\n                return this.selectNode(selectedNode.getNextNode());\n            } else {\n                // Right expands a closed node\n                this.treeWidget.openNode(selectedNode);\n                return false;\n            }\n        }\n    }\n\n    public moveLeft(selectedNode: Node): boolean {\n        if (selectedNode.isFolder() && selectedNode.is_open) {\n            // Left on an open node closes the node\n            this.treeWidget.closeNode(selectedNode);\n            return false;\n        } else {\n            // Left on a closed or end node moves focus to the node's parent\n            return this.selectNode(selectedNode.getParent());\n        }\n    }\n\n    public selectNode(node: Node | null): boolean {\n        if (!node) {\n            return true;\n        } else {\n            this.treeWidget.selectNode(node);\n\n            if (\n                !this.treeWidget.scrollHandler.isScrolledIntoView(\n                    jQuery(node.element).find(\".jqtree-element\")\n                )\n            ) {\n                this.treeWidget.scrollToNode(node);\n            }\n\n            return false;\n        }\n    }\n\n    private handleKeyDown = (e: JQuery.Event): boolean => {\n        if (!this.canHandleKeyboard()) {\n            return true;\n        }\n\n        const selectedNode = this.treeWidget.getSelectedNode();\n        if (!selectedNode) {\n            return true;\n        }\n\n        const key = e.which;\n\n        switch (key) {\n            case KeyHandler.DOWN:\n                return this.moveDown(selectedNode);\n\n            case KeyHandler.UP:\n                return this.moveUp(selectedNode);\n\n            case KeyHandler.RIGHT:\n                return this.moveRight(selectedNode);\n\n            case KeyHandler.LEFT:\n                return this.moveLeft(selectedNode);\n\n            default:\n                return true;\n        }\n    };\n\n    private canHandleKeyboard(): boolean {\n        return (\n            (this.treeWidget.options.keyboardSupport || false) &&\n            this.treeWidget.selectNodeHandler.isFocusOnTree()\n        );\n    }\n}\n","const register = (widgetClass: unknown, widgetName: string): void => {\n    const getDataKey = (): string => `simple_widget_${widgetName}`;\n\n    const getWidgetData = (\n        el: HTMLElement,\n        dataKey: string\n    ): SimpleWidget<unknown> | null => {\n        const widget = jQuery.data(el, dataKey) as unknown;\n\n        if (widget && widget instanceof SimpleWidget) {\n            return widget;\n        } else {\n            return null;\n        }\n    };\n\n    const createWidget = ($el: JQuery, options: unknown): JQuery => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const existingWidget = getWidgetData(el, dataKey);\n\n            if (!existingWidget) {\n                const simpleWidgetClass = widgetClass as typeof SimpleWidget;\n                const widget = new simpleWidgetClass(el, options);\n\n                if (!jQuery.data(el, dataKey)) {\n                    jQuery.data(el, dataKey, widget);\n                }\n\n                // Call init after setting data, so we can call methods\n                widget.init();\n            }\n        }\n\n        return $el;\n    };\n\n    const destroyWidget = ($el: JQuery): void => {\n        const dataKey = getDataKey();\n\n        for (const el of $el.get()) {\n            const widget = getWidgetData(el, dataKey);\n\n            if (widget) {\n                widget.destroy();\n            }\n\n            jQuery.removeData(el, dataKey);\n        }\n    };\n\n    const callFunction = (\n        $el: JQuery,\n        functionName: string,\n        args: unknown[]\n    ): unknown => {\n        let result = null;\n\n        for (const el of $el.get()) {\n            const widget = jQuery.data(el, getDataKey()) as unknown;\n\n            if (widget && widget instanceof SimpleWidget) {\n                const simpleWidget = widget as SimpleWidget<unknown>;\n                const widgetFunction = simpleWidget[functionName];\n\n                if (widgetFunction && typeof widgetFunction === \"function\") {\n                    result = widgetFunction.apply(widget, args) as unknown;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (jQuery.fn as any)[widgetName] = function (\n        this: JQuery,\n        argument1: unknown,\n        ...args: unknown[]\n    ) {\n        if (!argument1) {\n            return createWidget(this, null);\n        } else if (typeof argument1 === \"object\") {\n            const options = argument1 as unknown;\n            return createWidget(this, options);\n        } else if (typeof argument1 === \"string\" && argument1[0] !== \"_\") {\n            const functionName = argument1;\n\n            if (functionName === \"destroy\") {\n                return destroyWidget(this);\n            } else if (functionName === \"get_widget_class\") {\n                return widgetClass;\n            } else {\n                return callFunction(this, functionName, args);\n            }\n        }\n    };\n};\n\nexport default class SimpleWidget<WidgetOptions> {\n    public static register(widgetClass: unknown, widgetName: string): void {\n        register(widgetClass, widgetName);\n    }\n\n    [key: string]: unknown;\n\n    protected static defaults: unknown = {};\n\n    public options: WidgetOptions;\n\n    public $el: JQuery<HTMLElement>;\n\n    constructor(el: HTMLElement, options: WidgetOptions) {\n        this.$el = jQuery(el);\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const defaults = (this.constructor as any)[\"defaults\"] as WidgetOptions;\n        this.options = { ...defaults, ...options };\n    }\n\n    public destroy(): void {\n        this.deinit();\n    }\n\n    public init(): void {\n        //\n    }\n\n    public deinit(): void {\n        //\n    }\n}\n","/*\nThis widget does the same a the mouse widget in jqueryui.\n*/\nimport SimpleWidget from \"./simple.widget\";\nimport { PositionInfo } from \"./types\";\n\nconst getPositionInfoFromMouseEvent = (e: MouseEvent): PositionInfo => ({\n    pageX: e.pageX,\n    pageY: e.pageY,\n    target: e.target as HTMLElement,\n    originalEvent: e,\n});\n\nconst getPositionInfoFromTouch = (\n    touch: Touch,\n    e: TouchEvent\n): PositionInfo => ({\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    target: touch.target as HTMLElement,\n    originalEvent: e,\n});\n\nabstract class MouseWidget<WidgetOptions> extends SimpleWidget<WidgetOptions> {\n    protected isMouseStarted: boolean;\n    protected mouseDownInfo: PositionInfo | null;\n    private mouseDelayTimer: number | null;\n    private isMouseDelayMet: boolean;\n\n    public init(): void {\n        const element = this.$el.get(0);\n\n        if (element) {\n            element.addEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n            element.addEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.isMouseStarted = false;\n        this.mouseDelayTimer = null;\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n    }\n\n    public deinit(): void {\n        const el = this.$el.get(0);\n\n        if (el) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"mousedown\", this.mouseDown, {\n                passive: false,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            (el as any).removeEventListener(\"touchstart\", this.touchStart, {\n                passive: false,\n            });\n        }\n\n        this.removeMouseMoveEventListeners();\n    }\n\n    protected abstract mouseCapture(positionInfo: PositionInfo): boolean | null;\n\n    protected abstract mouseStart(positionInfo: PositionInfo): boolean;\n\n    protected abstract mouseDrag(positionInfo: PositionInfo): void;\n\n    protected abstract mouseStop(positionInfo: PositionInfo): void;\n\n    protected abstract getMouseDelay(): number;\n\n    private mouseDown = (e: MouseEvent): void => {\n        // Left mouse button?\n        if (e.button !== 0) {\n            return;\n        }\n\n        const result = this.handleMouseDown(getPositionInfoFromMouseEvent(e));\n\n        if (result && e.cancelable) {\n            e.preventDefault();\n        }\n    };\n\n    private handleMouseDown(positionInfo: PositionInfo): boolean {\n        // We may have missed mouseup (out of window)\n        if (this.isMouseStarted) {\n            this.handleMouseUp(positionInfo);\n        }\n\n        this.mouseDownInfo = positionInfo;\n\n        if (!this.mouseCapture(positionInfo)) {\n            return false;\n        }\n\n        this.handleStartMouse();\n\n        return true;\n    }\n\n    private handleStartMouse(): void {\n        document.addEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        document.addEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        document.addEventListener(\"mouseup\", this.mouseUp, { passive: false });\n        document.addEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n\n        const mouseDelay = this.getMouseDelay();\n\n        if (mouseDelay) {\n            this.startMouseDelayTimer(mouseDelay);\n        } else {\n            this.isMouseDelayMet = true;\n        }\n    }\n\n    private startMouseDelayTimer(mouseDelay: number): void {\n        if (this.mouseDelayTimer) {\n            clearTimeout(this.mouseDelayTimer);\n        }\n\n        this.mouseDelayTimer = window.setTimeout(() => {\n            if (this.mouseDownInfo) {\n                this.isMouseDelayMet = true;\n            }\n        }, mouseDelay);\n\n        this.isMouseDelayMet = false;\n    }\n\n    private mouseMove = (e: MouseEvent): void => {\n        this.handleMouseMove(e, getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseMove(\n        e: MouseEvent | TouchEvent,\n        positionInfo: PositionInfo\n    ): void {\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n            return;\n        }\n\n        if (!this.isMouseDelayMet) {\n            return;\n        }\n\n        if (this.mouseDownInfo) {\n            this.isMouseStarted = this.mouseStart(this.mouseDownInfo) !== false;\n        }\n\n        if (this.isMouseStarted) {\n            this.mouseDrag(positionInfo);\n\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n        } else {\n            this.handleMouseUp(positionInfo);\n        }\n    }\n\n    private mouseUp = (e: MouseEvent): void => {\n        this.handleMouseUp(getPositionInfoFromMouseEvent(e));\n    };\n\n    private handleMouseUp(positionInfo: PositionInfo): void {\n        this.removeMouseMoveEventListeners();\n        this.isMouseDelayMet = false;\n        this.mouseDownInfo = null;\n\n        if (this.isMouseStarted) {\n            this.isMouseStarted = false;\n            this.mouseStop(positionInfo);\n        }\n    }\n\n    private removeMouseMoveEventListeners() {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mousemove\", this.mouseMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchmove\", this.touchMove, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"mouseup\", this.mouseUp, {\n            passive: false,\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        (document as any).removeEventListener(\"touchend\", this.touchEnd, {\n            passive: false,\n        });\n    }\n\n    private touchStart = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        this.handleMouseDown(getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchMove = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        this.handleMouseMove(e, getPositionInfoFromTouch(touch, e));\n    };\n\n    private touchEnd = (e: TouchEvent): void => {\n        if (!e) {\n            return;\n        }\n\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        const touch = e.changedTouches[0];\n\n        this.handleMouseUp(getPositionInfoFromTouch(touch, e));\n    };\n}\n\nexport default MouseWidget;\n","import { isInt } from \"./util\";\nimport { JqTreeWidget } from \"./tree.jquery\";\nimport { Node } from \"./node\";\n\nexport interface SavedState {\n    open_nodes: NodeId[];\n    selected_node: NodeId[];\n}\n\nexport default class SaveStateHandler {\n    private treeWidget: JqTreeWidget;\n    private _supportsLocalStorage: boolean | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n    }\n\n    public saveState(): void {\n        const state = JSON.stringify(this.getState());\n\n        if (this.treeWidget.options.onSetStateFromStorage) {\n            this.treeWidget.options.onSetStateFromStorage(state);\n        } else if (this.supportsLocalStorage()) {\n            localStorage.setItem(this.getKeyName(), state);\n        }\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        const jsonData = this.loadFromStorage();\n\n        if (jsonData) {\n            return this.parseState(jsonData) as unknown as SavedState;\n        } else {\n            return null;\n        }\n    }\n\n    public getState(): SavedState {\n        const getOpenNodeIds = (): NodeId[] => {\n            const openNodes: NodeId[] = [];\n\n            this.treeWidget.tree.iterate((node: Node) => {\n                if (node.is_open && node.id && node.hasChildren()) {\n                    openNodes.push(node.id);\n                }\n                return true;\n            });\n\n            return openNodes;\n        };\n\n        const getSelectedNodeIds = (): NodeId[] => {\n            const selectedNodeIds: NodeId[] = [];\n\n            this.treeWidget.getSelectedNodes().forEach((node) => {\n                if (node.id != null) {\n                    selectedNodeIds.push(node.id);\n                }\n            });\n\n            return selectedNodeIds;\n        };\n\n        return {\n            open_nodes: getOpenNodeIds(),\n            selected_node: getSelectedNodeIds(),\n        };\n    }\n\n    /*\n    Set initial state\n    Don't handle nodes that are loaded on demand\n\n    result: must load on demand\n    */\n    public setInitialState(state: SavedState): boolean {\n        if (!state) {\n            return false;\n        } else {\n            let mustLoadOnDemand = false;\n\n            if (state.open_nodes) {\n                mustLoadOnDemand = this.openInitialNodes(state.open_nodes);\n            }\n\n            if (state.selected_node) {\n                this.resetSelection();\n                this.selectInitialNodes(state.selected_node);\n            }\n\n            return mustLoadOnDemand;\n        }\n    }\n\n    public setInitialStateOnDemand(\n        state: SavedState,\n        cbFinished: () => void\n    ): void {\n        if (state) {\n            this.doSetInitialStateOnDemand(\n                state.open_nodes,\n                state.selected_node,\n                cbFinished\n            );\n        } else {\n            cbFinished();\n        }\n    }\n\n    public getNodeIdToBeSelected(): NodeId | null {\n        const state = this.getStateFromStorage();\n\n        if (state && state.selected_node) {\n            return state.selected_node[0];\n        } else {\n            return null;\n        }\n    }\n\n    private parseState(jsonData: string): SavedState {\n        const state = JSON.parse(jsonData) as Record<string, unknown>;\n\n        // Check if selected_node is an int (instead of an array)\n        if (state && state.selected_node && isInt(state.selected_node)) {\n            // Convert to array\n            state.selected_node = [state.selected_node];\n        }\n\n        return state as unknown as SavedState;\n    }\n\n    private loadFromStorage(): string | null {\n        if (this.treeWidget.options.onGetStateFromStorage) {\n            return this.treeWidget.options.onGetStateFromStorage();\n        } else if (this.supportsLocalStorage()) {\n            return localStorage.getItem(this.getKeyName());\n        } else {\n            return null;\n        }\n    }\n\n    private openInitialNodes(nodeIds: NodeId[]): boolean {\n        let mustLoadOnDemand = false;\n\n        for (const nodeId of nodeIds) {\n            const node = this.treeWidget.getNodeById(nodeId);\n\n            if (node) {\n                if (!node.load_on_demand) {\n                    node.is_open = true;\n                } else {\n                    mustLoadOnDemand = true;\n                }\n            }\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    private selectInitialNodes(nodeIds: NodeId[]): boolean {\n        let selectCount = 0;\n\n        for (const nodeId of nodeIds) {\n            const node = this.treeWidget.getNodeById(nodeId);\n\n            if (node) {\n                selectCount += 1;\n\n                this.treeWidget.selectNodeHandler.addToSelection(node);\n            }\n        }\n\n        return selectCount !== 0;\n    }\n\n    private resetSelection(): void {\n        const selectNodeHandler = this.treeWidget.selectNodeHandler;\n\n        const selectedNodes = selectNodeHandler.getSelectedNodes();\n\n        selectedNodes.forEach((node) => {\n            selectNodeHandler.removeFromSelection(node);\n        });\n    }\n\n    private doSetInitialStateOnDemand(\n        nodeIdsParam: NodeId[],\n        selectedNodes: NodeId[],\n        cbFinished: () => void\n    ): void {\n        let loadingCount = 0;\n        let nodeIds = nodeIdsParam;\n\n        const openNodes = (): void => {\n            const newNodesIds = [];\n\n            for (const nodeId of nodeIds) {\n                const node = this.treeWidget.getNodeById(nodeId);\n\n                if (!node) {\n                    newNodesIds.push(nodeId);\n                } else {\n                    if (!node.is_loading) {\n                        if (node.load_on_demand) {\n                            loadAndOpenNode(node);\n                        } else {\n                            this.treeWidget._openNode(node, false, null);\n                        }\n                    }\n                }\n            }\n\n            nodeIds = newNodesIds;\n\n            if (this.selectInitialNodes(selectedNodes)) {\n                this.treeWidget._refreshElements(null);\n            }\n\n            if (loadingCount === 0) {\n                cbFinished();\n            }\n        };\n\n        const loadAndOpenNode = (node: Node): void => {\n            loadingCount += 1;\n            this.treeWidget._openNode(node, false, () => {\n                loadingCount -= 1;\n                openNodes();\n            });\n        };\n\n        openNodes();\n    }\n\n    private getKeyName(): string {\n        if (typeof this.treeWidget.options.saveState === \"string\") {\n            return this.treeWidget.options.saveState;\n        } else {\n            return \"tree\";\n        }\n    }\n\n    private supportsLocalStorage(): boolean {\n        const testSupport = (): boolean => {\n            // Is local storage supported?\n            if (localStorage == null) {\n                return false;\n            } else {\n                // Check if it's possible to store an item. Safari does not allow this in private browsing mode.\n                try {\n                    const key = \"_storage_test\";\n                    sessionStorage.setItem(key, \"value\");\n                    sessionStorage.removeItem(key);\n                } catch (error) {\n                    return false;\n                }\n\n                return true;\n            }\n        };\n\n        if (this._supportsLocalStorage == null) {\n            this._supportsLocalStorage = testSupport();\n        }\n\n        return this._supportsLocalStorage;\n    }\n}\n","import { JqTreeWidget } from \"./tree.jquery\";\nimport { HitArea, PositionInfo } from \"./types\";\n\nexport default class ScrollHandler {\n    private treeWidget: JqTreeWidget;\n    private previousTop: number;\n    private isInitialized: boolean;\n    private $scrollParent: JQuery | null;\n    private scrollParentTop: number;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n        this.previousTop = -1;\n        this.isInitialized = false;\n    }\n\n    public checkScrolling(): void {\n        this.ensureInit();\n        this.checkVerticalScrolling();\n        this.checkHorizontalScrolling();\n    }\n\n    public scrollToY(top: number): void {\n        this.ensureInit();\n\n        if (this.$scrollParent) {\n            this.$scrollParent[0].scrollTop = top;\n        } else {\n            const offset = this.treeWidget.$el.offset();\n            const treeTop = offset ? offset.top : 0;\n\n            jQuery(document).scrollTop(top + treeTop);\n        }\n    }\n\n    public isScrolledIntoView($element: JQuery): boolean {\n        this.ensureInit();\n\n        let elementBottom: number;\n        let viewBottom: number;\n        let elementTop: number;\n        let viewTop: number;\n\n        const elHeight = $element.height() || 0;\n\n        if (this.$scrollParent) {\n            viewTop = 0;\n            viewBottom = this.$scrollParent.height() || 0;\n\n            const offset = $element.offset();\n            const originalTop = offset ? offset.top : 0;\n\n            elementTop = originalTop - this.scrollParentTop;\n            elementBottom = elementTop + elHeight;\n        } else {\n            viewTop = jQuery(window).scrollTop() || 0;\n\n            const windowHeight = jQuery(window).height() || 0;\n            viewBottom = viewTop + windowHeight;\n\n            const offset = $element.offset();\n\n            elementTop = offset ? offset.top : 0;\n            elementBottom = elementTop + elHeight;\n        }\n\n        return elementBottom <= viewBottom && elementTop >= viewTop;\n    }\n\n    public getScrollLeft(): number {\n        if (!this.$scrollParent) {\n            return 0;\n        } else {\n            return this.$scrollParent.scrollLeft() || 0;\n        }\n    }\n\n    private initScrollParent(): void {\n        const getParentWithOverflow = (): JQuery | null => {\n            const cssAttributes = [\"overflow\", \"overflow-y\"];\n\n            const hasOverFlow = ($el: JQuery): boolean => {\n                for (const attr of cssAttributes) {\n                    const overflowValue = $el.css(attr);\n                    if (\n                        overflowValue === \"auto\" ||\n                        overflowValue === \"scroll\"\n                    ) {\n                        return true;\n                    }\n                }\n\n                return false;\n            };\n\n            if (hasOverFlow(this.treeWidget.$el)) {\n                return this.treeWidget.$el;\n            }\n\n            for (const el of this.treeWidget.$el.parents().get()) {\n                const $el = jQuery(el);\n                if (hasOverFlow($el)) {\n                    return $el;\n                }\n            }\n\n            return null;\n        };\n\n        const setDocumentAsScrollParent = (): void => {\n            this.scrollParentTop = 0;\n            this.$scrollParent = null;\n        };\n\n        if (this.treeWidget.$el.css(\"position\") === \"fixed\") {\n            setDocumentAsScrollParent();\n        }\n\n        const $scrollParent = getParentWithOverflow();\n\n        if (\n            $scrollParent &&\n            $scrollParent.length &&\n            $scrollParent[0].tagName !== \"HTML\"\n        ) {\n            this.$scrollParent = $scrollParent;\n\n            const offset = this.$scrollParent.offset();\n            this.scrollParentTop = offset ? offset.top : 0;\n        } else {\n            setDocumentAsScrollParent();\n        }\n\n        this.isInitialized = true;\n    }\n\n    private ensureInit(): void {\n        if (!this.isInitialized) {\n            this.initScrollParent();\n        }\n    }\n\n    private handleVerticalScrollingWithScrollParent(area: HitArea): void {\n        const scrollParent = this.$scrollParent && this.$scrollParent[0];\n\n        if (!scrollParent) {\n            return;\n        }\n\n        const distanceBottom =\n            this.scrollParentTop + scrollParent.offsetHeight - area.bottom;\n\n        if (distanceBottom < 20) {\n            scrollParent.scrollTop += 20;\n            this.treeWidget.refreshHitAreas();\n            this.previousTop = -1;\n        } else if (area.top - this.scrollParentTop < 20) {\n            scrollParent.scrollTop -= 20;\n            this.treeWidget.refreshHitAreas();\n            this.previousTop = -1;\n        }\n    }\n\n    private handleVerticalScrollingWithDocument(area: HitArea): void {\n        const scrollTop = jQuery(document).scrollTop() || 0;\n        const distanceTop = area.top - scrollTop;\n\n        if (distanceTop < 20) {\n            jQuery(document).scrollTop(scrollTop - 20);\n        } else {\n            const windowHeight = jQuery(window).height() || 0;\n\n            if (windowHeight - (area.bottom - scrollTop) < 20) {\n                jQuery(document).scrollTop(scrollTop + 20);\n            }\n        }\n    }\n\n    private checkVerticalScrolling(): void {\n        const hoveredArea = this.treeWidget.dndHandler.hoveredArea;\n\n        if (hoveredArea && hoveredArea.top !== this.previousTop) {\n            this.previousTop = hoveredArea.top;\n\n            if (this.$scrollParent) {\n                this.handleVerticalScrollingWithScrollParent(hoveredArea);\n            } else {\n                this.handleVerticalScrollingWithDocument(hoveredArea);\n            }\n        }\n    }\n\n    private checkHorizontalScrolling(): void {\n        const positionInfo = this.treeWidget.dndHandler.positionInfo;\n\n        if (!positionInfo) {\n            return;\n        }\n\n        if (this.$scrollParent) {\n            this.handleHorizontalScrollingWithParent(positionInfo);\n        } else {\n            this.handleHorizontalScrollingWithDocument(positionInfo);\n        }\n    }\n\n    private handleHorizontalScrollingWithParent(\n        positionInfo: PositionInfo\n    ): void {\n        if (\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return;\n        }\n\n        const $scrollParent = this.$scrollParent;\n        const scrollParentOffset = $scrollParent && $scrollParent.offset();\n\n        if (!($scrollParent && scrollParentOffset)) {\n            return;\n        }\n\n        const scrollParent = $scrollParent[0];\n\n        const canScrollRight =\n            scrollParent.scrollLeft + scrollParent.clientWidth <\n            scrollParent.scrollWidth;\n        const canScrollLeft = scrollParent.scrollLeft > 0;\n\n        const rightEdge = scrollParentOffset.left + scrollParent.clientWidth;\n        const leftEdge = scrollParentOffset.left;\n        const isNearRightEdge = positionInfo.pageX > rightEdge - 20;\n        const isNearLeftEdge = positionInfo.pageX < leftEdge + 20;\n\n        if (isNearRightEdge && canScrollRight) {\n            scrollParent.scrollLeft = Math.min(\n                scrollParent.scrollLeft + 20,\n                scrollParent.scrollWidth\n            );\n        } else if (isNearLeftEdge && canScrollLeft) {\n            scrollParent.scrollLeft = Math.max(scrollParent.scrollLeft - 20, 0);\n        }\n    }\n\n    private handleHorizontalScrollingWithDocument(\n        positionInfo: PositionInfo\n    ): void {\n        if (\n            positionInfo.pageX === undefined ||\n            positionInfo.pageY === undefined\n        ) {\n            return;\n        }\n\n        const $document = jQuery(document);\n\n        const scrollLeft = $document.scrollLeft() || 0;\n        const windowWidth = jQuery(window).width() || 0;\n\n        const canScrollLeft = scrollLeft > 0;\n\n        const isNearRightEdge = positionInfo.pageX > windowWidth - 20;\n        const isNearLeftEdge = positionInfo.pageX - scrollLeft < 20;\n\n        if (isNearRightEdge) {\n            $document.scrollLeft(scrollLeft + 20);\n        } else if (isNearLeftEdge && canScrollLeft) {\n            $document.scrollLeft(Math.max(scrollLeft - 20, 0));\n        }\n    }\n}\n","import { Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\n\nexport default class SelectNodeHandler {\n    private treeWidget: JqTreeWidget;\n    private selectedNodes: Set<NodeId>;\n    private selectedSingleNode: Node | null;\n\n    constructor(treeWidget: JqTreeWidget) {\n        this.treeWidget = treeWidget;\n        this.selectedNodes = new Set<NodeId>();\n        this.clear();\n    }\n\n    public getSelectedNode(): Node | false {\n        const selectedNodes = this.getSelectedNodes();\n\n        if (selectedNodes.length) {\n            return selectedNodes[0];\n        } else {\n            return false;\n        }\n    }\n\n    public getSelectedNodes(): Node[] {\n        if (this.selectedSingleNode) {\n            return [this.selectedSingleNode];\n        } else {\n            const selectedNodes: Node[] = [];\n\n            this.selectedNodes.forEach((id) => {\n                const node = this.treeWidget.getNodeById(id);\n                if (node) {\n                    selectedNodes.push(node);\n                }\n            });\n\n            return selectedNodes;\n        }\n    }\n\n    public getSelectedNodesUnder(parent: Node): Node[] {\n        if (this.selectedSingleNode) {\n            if (parent.isParentOf(this.selectedSingleNode)) {\n                return [this.selectedSingleNode];\n            } else {\n                return [];\n            }\n        } else {\n            const selectedNodes = [];\n\n            for (const id in this.selectedNodes) {\n                if (\n                    Object.prototype.hasOwnProperty.call(this.selectedNodes, id)\n                ) {\n                    const node = this.treeWidget.getNodeById(id);\n                    if (node && parent.isParentOf(node)) {\n                        selectedNodes.push(node);\n                    }\n                }\n            }\n\n            return selectedNodes;\n        }\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (node.id != null) {\n            return this.selectedNodes.has(node.id);\n        } else if (this.selectedSingleNode) {\n            return this.selectedSingleNode.element === node.element;\n        } else {\n            return false;\n        }\n    }\n\n    public clear(): void {\n        this.selectedNodes.clear();\n        this.selectedSingleNode = null;\n    }\n\n    public removeFromSelection(node: Node, includeChildren = false): void {\n        if (node.id == null) {\n            if (\n                this.selectedSingleNode &&\n                node.element === this.selectedSingleNode.element\n            ) {\n                this.selectedSingleNode = null;\n            }\n        } else {\n            this.selectedNodes.delete(node.id);\n\n            if (includeChildren) {\n                node.iterate(() => {\n                    if (node.id != null) {\n                        this.selectedNodes.delete(node.id);\n                    }\n                    return true;\n                });\n            }\n        }\n    }\n\n    public addToSelection(node: Node): void {\n        if (node.id != null) {\n            this.selectedNodes.add(node.id);\n        } else {\n            this.selectedSingleNode = node;\n        }\n    }\n\n    public isFocusOnTree(): boolean {\n        const activeElement = document.activeElement;\n\n        return Boolean(\n            activeElement &&\n                activeElement.tagName === \"SPAN\" &&\n                this.treeWidget._containsElement(activeElement as HTMLElement)\n        );\n    }\n}\n","import { Position, Node } from \"./node\";\nimport { JqTreeWidget } from \"./tree.jquery\";\nimport { DropHint } from \"./types\";\n\nexport type OnFinishOpenNode = (node: Node) => void;\n\nexport class NodeElement {\n    public node: Node;\n    public $element: JQuery<HTMLElement>;\n    protected treeWidget: JqTreeWidget;\n\n    constructor(node: Node, treeWidget: JqTreeWidget) {\n        this.init(node, treeWidget);\n    }\n\n    public init(node: Node, treeWidget: JqTreeWidget): void {\n        this.node = node;\n        this.treeWidget = treeWidget;\n\n        if (!node.element) {\n            const element = this.treeWidget.element.get(0);\n\n            if (element) {\n                node.element = element;\n            }\n        }\n\n        if (node.element) {\n            this.$element = jQuery(node.element);\n        }\n    }\n\n    public addDropHint(position: number): DropHint {\n        if (this.mustShowBorderDropHint(position)) {\n            return new BorderDropHint(\n                this.$element,\n                this.treeWidget._getScrollLeft()\n            );\n        } else {\n            return new GhostDropHint(this.node, this.$element, position);\n        }\n    }\n\n    public select(mustSetFocus: boolean): void {\n        const $li = this.getLi();\n\n        $li.addClass(\"jqtree-selected\");\n        $li.attr(\"aria-selected\", \"true\");\n\n        const $span = this.getSpan();\n        $span.attr(\"tabindex\", this.treeWidget.options.tabIndex ?? null);\n\n        if (mustSetFocus) {\n            $span.trigger(\"focus\");\n        }\n    }\n\n    public deselect(): void {\n        const $li = this.getLi();\n\n        $li.removeClass(\"jqtree-selected\");\n        $li.attr(\"aria-selected\", \"false\");\n\n        const $span = this.getSpan();\n        $span.removeAttr(\"tabindex\");\n\n        $span.blur();\n    }\n\n    protected getUl(): JQuery<HTMLElement> {\n        return this.$element.children(\"ul:first\");\n    }\n\n    protected getSpan(): JQuery<HTMLElement> {\n        return this.$element\n            .children(\".jqtree-element\")\n            .find(\"span.jqtree-title\");\n    }\n\n    protected getLi(): JQuery<HTMLElement> {\n        return this.$element;\n    }\n\n    protected mustShowBorderDropHint(position: number): boolean {\n        return position === Position.Inside;\n    }\n}\n\nexport class FolderElement extends NodeElement {\n    public open(\n        onFinished: OnFinishOpenNode | null,\n        slide = true,\n        animationSpeed: JQuery.Duration | string = \"fast\"\n    ): void {\n        if (this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = true;\n\n        const $button = this.getButton();\n        $button.removeClass(\"jqtree-closed\");\n        $button.html(\"\");\n\n        const buttonEl = $button.get(0);\n\n        if (buttonEl) {\n            const icon =\n                this.treeWidget.renderer.openedIconElement.cloneNode(true);\n\n            buttonEl.appendChild(icon);\n        }\n\n        const doOpen = (): void => {\n            const $li = this.getLi();\n            $li.removeClass(\"jqtree-closed\");\n\n            const $span = this.getSpan();\n            $span.attr(\"aria-expanded\", \"true\");\n\n            if (onFinished) {\n                onFinished(this.node);\n            }\n\n            this.treeWidget._triggerEvent(\"tree.open\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            this.getUl().slideDown(animationSpeed, doOpen);\n        } else {\n            this.getUl().show();\n            doOpen();\n        }\n    }\n\n    public close(\n        slide = true,\n        animationSpeed: JQuery.Duration | string = \"fast\"\n    ): void {\n        if (!this.node.is_open) {\n            return;\n        }\n\n        this.node.is_open = false;\n\n        const $button = this.getButton();\n        $button.addClass(\"jqtree-closed\");\n        $button.html(\"\");\n\n        const buttonEl = $button.get(0);\n\n        if (buttonEl) {\n            const icon =\n                this.treeWidget.renderer.closedIconElement.cloneNode(true);\n\n            buttonEl.appendChild(icon);\n        }\n\n        const doClose = (): void => {\n            const $li = this.getLi();\n            $li.addClass(\"jqtree-closed\");\n\n            const $span = this.getSpan();\n            $span.attr(\"aria-expanded\", \"false\");\n\n            this.treeWidget._triggerEvent(\"tree.close\", {\n                node: this.node,\n            });\n        };\n\n        if (slide) {\n            this.getUl().slideUp(animationSpeed, doClose);\n        } else {\n            this.getUl().hide();\n            doClose();\n        }\n    }\n\n    protected mustShowBorderDropHint(position: number): boolean {\n        return !this.node.is_open && position === Position.Inside;\n    }\n\n    private getButton(): JQuery {\n        return this.$element\n            .children(\".jqtree-element\")\n            .find(\"a.jqtree-toggler\");\n    }\n}\n\nexport class BorderDropHint implements DropHint {\n    private $hint: JQuery<Element>;\n\n    constructor($element: JQuery<Element>, scrollLeft: number) {\n        const $div = $element.children(\".jqtree-element\");\n\n        const elWidth = $element.width() || 0;\n        const width = Math.max(elWidth + scrollLeft - 4, 0);\n\n        const elHeight = $div.outerHeight() || 0;\n        const height = Math.max(elHeight - 4, 0);\n\n        this.$hint = jQuery('<span class=\"jqtree-border\"></span>');\n        $div.append(this.$hint);\n\n        this.$hint.css({ width, height });\n    }\n\n    public remove(): void {\n        this.$hint.remove();\n    }\n}\n\nclass GhostDropHint implements DropHint {\n    private $element: JQuery<Element>;\n    private node: Node;\n    private $ghost: JQuery;\n\n    constructor(node: Node, $element: JQuery<Element>, position: number) {\n        this.$element = $element;\n\n        this.node = node;\n        this.$ghost = jQuery(\n            `<li class=\"jqtree_common jqtree-ghost\"><span class=\"jqtree_common jqtree-circle\"></span>\n            <span class=\"jqtree_common jqtree-line\"></span></li>`\n        );\n\n        if (position === Position.After) {\n            this.moveAfter();\n        } else if (position === Position.Before) {\n            this.moveBefore();\n        } else if (position === Position.Inside) {\n            if (node.isFolder() && node.is_open) {\n                this.moveInsideOpenFolder();\n            } else {\n                this.moveInside();\n            }\n        }\n    }\n\n    public remove(): void {\n        this.$ghost.remove();\n    }\n\n    public moveAfter(): void {\n        this.$element.after(this.$ghost);\n    }\n\n    public moveBefore(): void {\n        this.$element.before(this.$ghost);\n    }\n\n    public moveInsideOpenFolder(): void {\n        const childElement = this.node.children[0].element;\n\n        if (childElement) {\n            jQuery(childElement).before(this.$ghost);\n        }\n    }\n\n    public moveInside(): void {\n        this.$element.after(this.$ghost);\n        this.$ghost.addClass(\"jqtree-inside\");\n    }\n}\n","import __version__ from \"./version\";\nimport { DragAndDropHandler } from \"./dragAndDropHandler\";\nimport ElementsRenderer from \"./elementsRenderer\";\nimport DataLoader, { HandleFinishedLoading } from \"./dataLoader\";\nimport KeyHandler from \"./keyHandler\";\nimport MouseWidget from \"./mouse.widget\";\nimport { PositionInfo } from \"./types\";\nimport SaveStateHandler, { SavedState } from \"./saveStateHandler\";\nimport ScrollHandler from \"./scrollHandler\";\nimport SelectNodeHandler from \"./selectNodeHandler\";\nimport SimpleWidget from \"./simple.widget\";\nimport { Node, getPosition } from \"./node\";\nimport { isFunction } from \"./util\";\nimport { FolderElement, NodeElement, OnFinishOpenNode } from \"./nodeElement\";\nimport { JQTreeOptions } from \"./jqtreeOptions\";\n\ninterface ClickTarget {\n    node: Node;\n    type: \"button\" | \"label\";\n}\n\ninterface SelectNodeOptions {\n    mustToggle?: boolean;\n    mustSetFocus?: boolean;\n}\n\nconst NODE_PARAM_IS_EMPTY = \"Node parameter is empty\";\nconst PARAM_IS_EMPTY = \"Parameter is empty: \";\n\nexport class JqTreeWidget extends MouseWidget<JQTreeOptions> {\n    protected static defaults: JQTreeOptions = {\n        animationSpeed: \"fast\",\n        autoEscape: true,\n        autoOpen: false, // true / false / int (open n levels starting at 0)\n        buttonLeft: true,\n        // The symbol to use for a closed node - ► BLACK RIGHT-POINTING POINTER\n        // http://www.fileformat.info/info/unicode/char/25ba/index.htm\n        closedIcon: undefined,\n        data: undefined,\n        dataFilter: undefined,\n        dataUrl: undefined,\n        dragAndDrop: false,\n        keyboardSupport: true,\n        nodeClass: Node,\n        onCanMove: undefined, // Can this node be moved?\n        onCanMoveTo: undefined, // Can this node be moved to this position? function(moved_node, target_node, position)\n        onCanSelectNode: undefined,\n        onCreateLi: undefined,\n        onDragMove: undefined,\n        onDragStop: undefined,\n        onGetStateFromStorage: undefined,\n        onIsMoveHandle: undefined,\n        onLoadFailed: undefined,\n        onLoading: undefined,\n        onSetStateFromStorage: undefined,\n        openedIcon: \"&#x25bc;\",\n        openFolderDelay: 500, // The delay for opening a folder during drag and drop; the value is in milliseconds\n        // The symbol to use for an open node - ▼ BLACK DOWN-POINTING TRIANGLE\n        // http://www.fileformat.info/info/unicode/char/25bc/index.htm\n        rtl: undefined, // right-to-left support; true / false (default)\n        saveState: false, // true / false / string (cookie name)\n        selectable: true,\n        showEmptyFolder: false,\n        slide: true, // must display slide animation?\n        startDndDelay: 300, // The delay for starting dnd (in milliseconds)\n        tabIndex: 0,\n        useContextMenu: true,\n    };\n\n    public element: JQuery;\n    public tree: Node;\n    public dndHandler: DragAndDropHandler;\n    public renderer: ElementsRenderer;\n    public dataLoader: DataLoader;\n    public scrollHandler: ScrollHandler;\n    public selectNodeHandler: SelectNodeHandler;\n\n    private isInitialized: boolean;\n    private saveStateHandler: SaveStateHandler;\n    private keyHandler: KeyHandler;\n\n    public toggle(node: Node, slideParam: null | boolean = null): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.is_open) {\n            this.closeNode(node, slide);\n        } else {\n            this.openNode(node, slide);\n        }\n\n        return this.element;\n    }\n\n    public getTree(): Node {\n        return this.tree;\n    }\n\n    public selectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions\n    ): JQuery {\n        this.doSelectNode(node, optionsParam);\n        return this.element;\n    }\n\n    public getSelectedNode(): Node | false {\n        return this.selectNodeHandler.getSelectedNode();\n    }\n\n    public toJson(): string {\n        return JSON.stringify(this.tree.getData());\n    }\n\n    public loadData(data: NodeData[], parentNode: Node | null): JQuery {\n        this.doLoadData(data, parentNode);\n        return this.element;\n    }\n\n    /*\n    signatures:\n    - loadDataFromUrl(url, parent_node=null, on_finished=null)\n        loadDataFromUrl('/my_data');\n        loadDataFromUrl('/my_data', node1);\n        loadDataFromUrl('/my_data', node1, function() { console.log('finished'); });\n        loadDataFromUrl('/my_data', null, function() { console.log('finished'); });\n\n    - loadDataFromUrl(parent_node=null, on_finished=null)\n        loadDataFromUrl();\n        loadDataFromUrl(node1);\n        loadDataFromUrl(null, function() { console.log('finished'); });\n        loadDataFromUrl(node1, function() { console.log('finished'); });\n    */\n    public loadDataFromUrl(\n        param1: string | null | Node,\n        param2?: Node | null | HandleFinishedLoading,\n        param3?: HandleFinishedLoading\n    ): JQuery {\n        if (typeof param1 === \"string\") {\n            // first parameter is url\n            this.doLoadDataFromUrl(\n                param1,\n                param2 as Node | null,\n                param3 ?? null\n            );\n        } else {\n            // first parameter is not url\n            this.doLoadDataFromUrl(\n                null,\n                param1,\n                param2 as HandleFinishedLoading | null\n            );\n        }\n\n        return this.element;\n    }\n\n    public reload(onFinished: HandleFinishedLoading | null): JQuery {\n        this.doLoadDataFromUrl(null, null, onFinished);\n        return this.element;\n    }\n\n    public refresh(): JQuery {\n        this._refreshElements(null);\n        return this.element;\n    }\n\n    public getNodeById(nodeId: NodeId): Node | null {\n        return this.tree.getNodeById(nodeId);\n    }\n\n    public getNodeByName(name: string): Node | null {\n        return this.tree.getNodeByName(name);\n    }\n\n    public getNodeByNameMustExist(name: string): Node {\n        return this.tree.getNodeByNameMustExist(name);\n    }\n\n    public getNodesByProperty(key: string, value: unknown): Node[] {\n        return this.tree.getNodesByProperty(key, value);\n    }\n\n    public getNodeByHtmlElement(\n        element: HTMLElement | JQuery<HTMLElement>\n    ): Node | null {\n        return this.getNode(jQuery(element));\n    }\n\n    public getNodeByCallback(callback: (node: Node) => boolean): Node | null {\n        return this.tree.getNodeByCallback(callback);\n    }\n\n    public openNode(\n        node: Node,\n        param1?: boolean | OnFinishOpenNode,\n        param2?: OnFinishOpenNode\n    ): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const parseParams = (): [boolean, OnFinishOpenNode | null] => {\n            let onFinished: OnFinishOpenNode | null;\n            let slide: boolean | null;\n\n            if (isFunction(param1)) {\n                onFinished = param1 as OnFinishOpenNode | null;\n                slide = null;\n            } else {\n                slide = param1 as boolean;\n                onFinished = param2 as OnFinishOpenNode;\n            }\n\n            if (slide == null) {\n                slide = this.options.slide ?? false;\n            }\n\n            return [slide, onFinished];\n        };\n\n        const [slide, onFinished] = parseParams();\n\n        this._openNode(node, slide, onFinished);\n        return this.element;\n    }\n\n    public closeNode(node: Node, slideParam?: null | boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const slide = slideParam ?? this.options.slide;\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            new FolderElement(node, this).close(\n                slide,\n                this.options.animationSpeed\n            );\n\n            this.saveState();\n        }\n\n        return this.element;\n    }\n\n    public isDragging(): boolean {\n        return this.dndHandler.isDragging;\n    }\n\n    public refreshHitAreas(): JQuery {\n        this.dndHandler.refresh();\n        return this.element;\n    }\n\n    public addNodeAfter(\n        newNodeInfo: NodeData,\n        existingNode: Node\n    ): Node | null {\n        const newNode = existingNode.addAfter(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addNodeBefore(\n        newNodeInfo: NodeData,\n        existingNode: Node\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addBefore(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(existingNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public addParentNode(\n        newNodeInfo: NodeData,\n        existingNode: Node\n    ): Node | null {\n        if (!existingNode) {\n            throw Error(PARAM_IS_EMPTY + \"existingNode\");\n        }\n\n        const newNode = existingNode.addParent(newNodeInfo);\n\n        if (newNode) {\n            this._refreshElements(newNode.parent);\n        }\n\n        return newNode;\n    }\n\n    public removeNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!node.parent) {\n            throw Error(\"Node has no parent\");\n        }\n\n        this.selectNodeHandler.removeFromSelection(node, true); // including children\n\n        const parent = node.parent;\n        node.remove();\n        this._refreshElements(parent);\n\n        return this.element;\n    }\n\n    public appendNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam || this.tree;\n\n        const node = parentNode.append(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public prependNode(newNodeInfo: NodeData, parentNodeParam?: Node): Node {\n        const parentNode = parentNodeParam ?? this.tree;\n\n        const node = parentNode.prepend(newNodeInfo);\n\n        this._refreshElements(parentNode);\n\n        return node;\n    }\n\n    public updateNode(node: Node, data: NodeData): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const idIsChanged =\n            typeof data === \"object\" && data.id && data.id !== node.id;\n\n        if (idIsChanged) {\n            this.tree.removeNodeFromIndex(node);\n        }\n\n        node.setData(data);\n\n        if (idIsChanged) {\n            this.tree.addNodeToIndex(node);\n        }\n\n        if (\n            typeof data === \"object\" &&\n            data[\"children\"] &&\n            data[\"children\"] instanceof Array\n        ) {\n            node.removeChildren();\n\n            if (data.children.length) {\n                node.loadFromData(data.children as Node[]);\n            }\n        }\n\n        this._refreshElements(node);\n\n        return this.element;\n    }\n\n    private isSelectedNodeInSubtree(subtree: Node): boolean {\n        const selectedNode = this.getSelectedNode();\n\n        if (!selectedNode) {\n            return false;\n        } else {\n            return subtree === selectedNode || subtree.isParentOf(selectedNode);\n        }\n    }\n\n    public moveNode(node: Node, targetNode: Node, position: string): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        if (!targetNode) {\n            throw Error(PARAM_IS_EMPTY + \"targetNode\");\n        }\n\n        const positionIndex = getPosition(position);\n\n        if (positionIndex !== undefined) {\n            this.tree.moveNode(node, targetNode, positionIndex);\n            this._refreshElements(null);\n        }\n\n        return this.element;\n    }\n\n    public getStateFromStorage(): SavedState | null {\n        return this.saveStateHandler.getStateFromStorage();\n    }\n\n    public addToSelection(node: Node, mustSetFocus?: boolean): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.addToSelection(node);\n\n        this._getNodeElementForNode(node).select(\n            mustSetFocus === undefined ? true : mustSetFocus\n        );\n\n        this.saveState();\n\n        return this.element;\n    }\n\n    public getSelectedNodes(): Node[] {\n        return this.selectNodeHandler.getSelectedNodes();\n    }\n\n    public isNodeSelected(node: Node): boolean {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        return this.selectNodeHandler.isNodeSelected(node);\n    }\n\n    public removeFromSelection(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        this.selectNodeHandler.removeFromSelection(node);\n\n        this._getNodeElementForNode(node).deselect();\n        this.saveState();\n\n        return this.element;\n    }\n\n    public scrollToNode(node: Node): JQuery {\n        if (!node) {\n            throw Error(NODE_PARAM_IS_EMPTY);\n        }\n\n        const nodeOffset = jQuery(node.element).offset();\n        const nodeTop = nodeOffset ? nodeOffset.top : 0;\n\n        const treeOffset = this.$el.offset();\n        const treeTop = treeOffset ? treeOffset.top : 0;\n\n        const top = nodeTop - treeTop;\n\n        this.scrollHandler.scrollToY(top);\n\n        return this.element;\n    }\n\n    public getState(): SavedState | null {\n        return this.saveStateHandler.getState();\n    }\n\n    public setState(state: SavedState): JQuery {\n        this.saveStateHandler.setInitialState(state);\n        this._refreshElements(null);\n\n        return this.element;\n    }\n\n    public setOption(option: string, value: unknown): JQuery {\n        (this.options as unknown as Record<string, unknown>)[option] = value;\n        return this.element;\n    }\n\n    public moveDown(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveDown(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public moveUp(): JQuery {\n        const selectedNode = this.getSelectedNode();\n        if (selectedNode) {\n            this.keyHandler.moveUp(selectedNode);\n        }\n\n        return this.element;\n    }\n\n    public getVersion(): string {\n        return __version__;\n    }\n\n    public _triggerEvent(\n        eventName: string,\n        values?: Record<string, unknown>\n    ): JQuery.Event {\n        const event = jQuery.Event(eventName, values);\n        this.element.trigger(event);\n        return event;\n    }\n\n    public _openNode(\n        node: Node,\n        slide = true,\n        onFinished: OnFinishOpenNode | null\n    ): void {\n        const doOpenNode = (\n            _node: Node,\n            _slide: boolean,\n            _onFinished: OnFinishOpenNode | null\n        ): void => {\n            const folderElement = new FolderElement(_node, this);\n            folderElement.open(\n                _onFinished,\n                _slide,\n                this.options.animationSpeed\n            );\n        };\n\n        if (node.isFolder() || node.isEmptyFolder) {\n            if (node.load_on_demand) {\n                this.loadFolderOnDemand(node, slide, onFinished);\n            } else {\n                let parent = node.parent;\n\n                while (parent) {\n                    // nb: do not open root element\n                    if (parent.parent) {\n                        doOpenNode(parent, false, null);\n                    }\n                    parent = parent.parent;\n                }\n\n                doOpenNode(node, slide, onFinished);\n                this.saveState();\n            }\n        }\n    }\n\n    /*\n    Redraw the tree or part of the tree.\n     from_node: redraw this subtree\n    */\n    public _refreshElements(fromNode: Node | null): void {\n        const mustSetFocus = this.selectNodeHandler.isFocusOnTree();\n        const mustSelect = fromNode\n            ? this.isSelectedNodeInSubtree(fromNode)\n            : false;\n\n        this.renderer.render(fromNode);\n\n        if (mustSelect) {\n            this.selectCurrentNode(mustSetFocus);\n        }\n\n        this._triggerEvent(\"tree.refresh\");\n    }\n\n    public _getNodeElementForNode(node: Node): NodeElement {\n        if (node.isFolder()) {\n            return new FolderElement(node, this);\n        } else {\n            return new NodeElement(node, this);\n        }\n    }\n\n    public _getNodeElement($element: JQuery<HTMLElement>): NodeElement | null {\n        const node = this.getNode($element);\n        if (node) {\n            return this._getNodeElementForNode(node);\n        } else {\n            return null;\n        }\n    }\n\n    public _containsElement(element: HTMLElement): boolean {\n        const node = this.getNode(jQuery(element));\n\n        return node != null && node.tree === this.tree;\n    }\n\n    public _getScrollLeft(): number {\n        return this.scrollHandler.getScrollLeft();\n    }\n\n    public init(): void {\n        super.init();\n\n        this.element = this.$el;\n        this.isInitialized = false;\n\n        this.options.rtl = this.getRtlOption();\n\n        if (this.options.closedIcon == null) {\n            this.options.closedIcon = this.getDefaultClosedIcon();\n        }\n\n        this.renderer = new ElementsRenderer(this);\n        this.dataLoader = new DataLoader(this);\n        this.saveStateHandler = new SaveStateHandler(this);\n        this.selectNodeHandler = new SelectNodeHandler(this);\n        this.dndHandler = new DragAndDropHandler(this);\n        this.scrollHandler = new ScrollHandler(this);\n        this.keyHandler = new KeyHandler(this);\n\n        this.initData();\n\n        this.element.on(\"click\", this.handleClick);\n        this.element.on(\"dblclick\", this.handleDblclick);\n\n        if (this.options.useContextMenu) {\n            this.element.on(\"contextmenu\", this.handleContextmenu);\n        }\n    }\n\n    public deinit(): void {\n        this.element.empty();\n        this.element.off();\n\n        this.keyHandler.deinit();\n\n        this.tree = new Node({}, true);\n\n        super.deinit();\n    }\n\n    protected mouseCapture(positionInfo: PositionInfo): boolean | null {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseCapture(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStart(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStart(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseDrag(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            const result = this.dndHandler.mouseDrag(positionInfo);\n\n            this.scrollHandler.checkScrolling();\n            return result;\n        } else {\n            return false;\n        }\n    }\n\n    protected mouseStop(positionInfo: PositionInfo): boolean {\n        if (this.options.dragAndDrop) {\n            return this.dndHandler.mouseStop(positionInfo);\n        } else {\n            return false;\n        }\n    }\n\n    protected getMouseDelay(): number {\n        return this.options.startDndDelay ?? 0;\n    }\n\n    private initData(): void {\n        if (this.options.data) {\n            this.doLoadData(this.options.data, null);\n        } else {\n            const dataUrl = this.getDataUrlInfo(null);\n\n            if (dataUrl) {\n                this.doLoadDataFromUrl(null, null, null);\n            } else {\n                this.doLoadData([], null);\n            }\n        }\n    }\n\n    private getDataUrlInfo(node: Node | null): JQuery.AjaxSettings | null {\n        const dataUrl =\n            this.options.dataUrl || (this.element.data(\"url\") as string | null);\n\n        const getUrlFromString = (url: string): JQuery.AjaxSettings => {\n            const urlInfo: JQuery.AjaxSettings = { url };\n\n            setUrlInfoData(urlInfo);\n\n            return urlInfo;\n        };\n\n        const setUrlInfoData = (urlInfo: JQuery.AjaxSettings): void => {\n            if (node?.id) {\n                // Load on demand of a subtree; add node parameter\n                const data = { node: node.id };\n                urlInfo[\"data\"] = data;\n            } else {\n                // Add selected_node parameter\n                const selectedNodeId = this.getNodeIdToBeSelected();\n                if (selectedNodeId) {\n                    const data = { selected_node: selectedNodeId };\n                    urlInfo[\"data\"] = data;\n                }\n            }\n        };\n\n        if (typeof dataUrl === \"function\") {\n            return dataUrl(node);\n        } else if (typeof dataUrl === \"string\") {\n            return getUrlFromString(dataUrl);\n        } else if (dataUrl && typeof dataUrl === \"object\") {\n            setUrlInfoData(dataUrl);\n            return dataUrl;\n        } else {\n            return null;\n        }\n    }\n\n    private getNodeIdToBeSelected(): NodeId | null {\n        if (this.options.saveState) {\n            return this.saveStateHandler.getNodeIdToBeSelected();\n        } else {\n            return null;\n        }\n    }\n\n    private initTree(data: NodeData[]): void {\n        const doInit = (): void => {\n            if (!this.isInitialized) {\n                this.isInitialized = true;\n                this._triggerEvent(\"tree.init\");\n            }\n        };\n\n        if (!this.options.nodeClass) {\n            return;\n        }\n\n        this.tree = new this.options.nodeClass(\n            null,\n            true,\n            this.options.nodeClass\n        );\n\n        this.selectNodeHandler.clear();\n\n        this.tree.loadFromData(data);\n\n        const mustLoadOnDemand = this.setInitialState();\n\n        this._refreshElements(null);\n\n        if (!mustLoadOnDemand) {\n            doInit();\n        } else {\n            // Load data on demand and then init the tree\n            this.setInitialStateOnDemand(doInit);\n        }\n    }\n\n    // Set initial state, either by restoring the state or auto-opening nodes\n    // result: must load nodes on demand?\n    private setInitialState(): boolean {\n        const restoreState = (): boolean[] => {\n            // result: is state restored, must load on demand?\n            if (!this.options.saveState) {\n                return [false, false];\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return [false, false];\n                } else {\n                    const mustLoadOnDemand =\n                        this.saveStateHandler.setInitialState(state);\n\n                    // return true: the state is restored\n                    return [true, mustLoadOnDemand];\n                }\n            }\n        };\n\n        const autoOpenNodes = (): boolean => {\n            // result: must load on demand?\n            if (this.options.autoOpen === false) {\n                return false;\n            }\n\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let mustLoadOnDemand = false;\n\n            this.tree.iterate((node: Node, level: number) => {\n                if (node.load_on_demand) {\n                    mustLoadOnDemand = true;\n                    return false;\n                } else if (!node.hasChildren()) {\n                    return false;\n                } else {\n                    node.is_open = true;\n                    return level !== maxLevel;\n                }\n            });\n\n            return mustLoadOnDemand;\n        };\n\n        let [isRestored, mustLoadOnDemand] = restoreState(); // eslint-disable-line prefer-const\n\n        if (!isRestored) {\n            mustLoadOnDemand = autoOpenNodes();\n        }\n\n        return mustLoadOnDemand;\n    }\n\n    // Set the initial state for nodes that are loaded on demand\n    // Call cb_finished when done\n    private setInitialStateOnDemand(cbFinished: () => void): void {\n        const restoreState = (): boolean => {\n            if (!this.options.saveState) {\n                return false;\n            } else {\n                const state = this.saveStateHandler.getStateFromStorage();\n\n                if (!state) {\n                    return false;\n                } else {\n                    this.saveStateHandler.setInitialStateOnDemand(\n                        state,\n                        cbFinished\n                    );\n\n                    return true;\n                }\n            }\n        };\n\n        const autoOpenNodes = (): void => {\n            const maxLevel = this.getAutoOpenMaxLevel();\n            let loadingCount = 0;\n\n            const loadAndOpenNode = (node: Node): void => {\n                loadingCount += 1;\n                this._openNode(node, false, () => {\n                    loadingCount -= 1;\n                    openNodes();\n                });\n            };\n\n            const openNodes = (): void => {\n                this.tree.iterate((node: Node, level: number) => {\n                    if (node.load_on_demand) {\n                        if (!node.is_loading) {\n                            loadAndOpenNode(node);\n                        }\n\n                        return false;\n                    } else {\n                        this._openNode(node, false, null);\n\n                        return level !== maxLevel;\n                    }\n                });\n\n                if (loadingCount === 0) {\n                    cbFinished();\n                }\n            };\n\n            openNodes();\n        };\n\n        if (!restoreState()) {\n            autoOpenNodes();\n        }\n    }\n\n    private getAutoOpenMaxLevel(): number {\n        if (this.options.autoOpen === true) {\n            return -1;\n        } else if (typeof this.options.autoOpen === \"number\") {\n            return this.options.autoOpen;\n        } else if (typeof this.options.autoOpen === \"string\") {\n            return parseInt(this.options.autoOpen, 10);\n        } else {\n            return 0;\n        }\n    }\n\n    private handleClick = (\n        e: JQuery.ClickEvent<HTMLElement, any, HTMLElement, HTMLElement>\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget) {\n            if (clickTarget.type === \"button\") {\n                this.toggle(clickTarget.node, this.options.slide);\n\n                e.preventDefault();\n                e.stopPropagation();\n            } else if (clickTarget.type === \"label\") {\n                const node = clickTarget.node;\n                const event = this._triggerEvent(\"tree.click\", {\n                    node,\n                    click_event: e,\n                });\n\n                if (!event.isDefaultPrevented()) {\n                    this.doSelectNode(node);\n                }\n            }\n        }\n    };\n\n    private handleDblclick = (\n        e: JQuery.DoubleClickEvent<HTMLElement, any, HTMLElement, HTMLElement>\n    ): void => {\n        const clickTarget = this.getClickTarget(e.target);\n\n        if (clickTarget?.type === \"label\") {\n            this._triggerEvent(\"tree.dblclick\", {\n                node: clickTarget.node,\n                click_event: e,\n            });\n        }\n    };\n\n    private getClickTarget(element: EventTarget): ClickTarget | null {\n        const $target = jQuery(element);\n\n        const $button = $target.closest(\".jqtree-toggler\");\n\n        if ($button.length) {\n            const node = this.getNode($button as JQuery<HTMLElement>);\n\n            if (node) {\n                return {\n                    type: \"button\",\n                    node,\n                };\n            }\n        } else {\n            const $el = $target.closest(\".jqtree-element\");\n            if ($el.length) {\n                const node = this.getNode($el as JQuery<HTMLElement>);\n                if (node) {\n                    return {\n                        type: \"label\",\n                        node,\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    private getNode($element: JQuery<HTMLElement>): null | Node {\n        const $li = $element.closest(\"li.jqtree_common\");\n        if ($li.length === 0) {\n            return null;\n        } else {\n            return $li.data(\"node\") as Node;\n        }\n    }\n\n    private handleContextmenu = (\n        e: JQuery.ContextMenuEvent<HTMLElement, any, HTMLElement, HTMLElement>\n    ) => {\n        const $div = jQuery(e.target).closest(\"ul.jqtree-tree .jqtree-element\");\n        if ($div.length) {\n            const node = this.getNode($div);\n            if (node) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                this._triggerEvent(\"tree.contextmenu\", {\n                    node,\n                    click_event: e,\n                });\n                return false;\n            }\n        }\n\n        return null;\n    };\n\n    private saveState(): void {\n        if (this.options.saveState) {\n            this.saveStateHandler.saveState();\n        }\n    }\n\n    private selectCurrentNode(mustSetFocus: boolean): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            const nodeElement = this._getNodeElementForNode(node);\n            if (nodeElement) {\n                nodeElement.select(mustSetFocus);\n            }\n        }\n    }\n\n    private deselectCurrentNode(): void {\n        const node = this.getSelectedNode();\n        if (node) {\n            this.removeFromSelection(node);\n        }\n    }\n\n    private getDefaultClosedIcon(): string {\n        if (this.options.rtl) {\n            // triangle to the left\n            return \"&#x25c0;\";\n        } else {\n            // triangle to the right\n            return \"&#x25ba;\";\n        }\n    }\n\n    private getRtlOption(): boolean {\n        if (this.options.rtl != null) {\n            return this.options.rtl;\n        } else {\n            const dataRtl = this.element.data(\"rtl\") as unknown;\n\n            if (\n                dataRtl !== null &&\n                dataRtl !== false &&\n                dataRtl !== undefined\n            ) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    private doSelectNode(\n        node: Node | null,\n        optionsParam?: SelectNodeOptions\n    ): void {\n        const saveState = (): void => {\n            if (this.options.saveState) {\n                this.saveStateHandler.saveState();\n            }\n        };\n\n        if (!node) {\n            // Called with empty node -> deselect current node\n            this.deselectCurrentNode();\n            saveState();\n            return;\n        }\n        const defaultOptions = { mustSetFocus: true, mustToggle: true };\n        const selectOptions = { ...defaultOptions, ...(optionsParam || {}) };\n\n        const canSelect = (): boolean => {\n            if (this.options.onCanSelectNode) {\n                return (\n                    this.options.selectable === true &&\n                    this.options.onCanSelectNode(node)\n                );\n            } else {\n                return this.options.selectable === true;\n            }\n        };\n\n        const openParents = (): void => {\n            const parent = node.parent;\n\n            if (parent && parent.parent && !parent.is_open) {\n                this.openNode(parent, false);\n            }\n        };\n\n        if (!canSelect()) {\n            return;\n        }\n\n        if (this.selectNodeHandler.isNodeSelected(node)) {\n            if (selectOptions.mustToggle) {\n                this.deselectCurrentNode();\n                this._triggerEvent(\"tree.select\", {\n                    node: null,\n                    previous_node: node,\n                });\n            }\n        } else {\n            const deselectedNode = this.getSelectedNode() || null;\n            this.deselectCurrentNode();\n            this.addToSelection(node, selectOptions.mustSetFocus);\n\n            this._triggerEvent(\"tree.select\", {\n                node,\n                deselected_node: deselectedNode,\n            });\n            openParents();\n        }\n\n        saveState();\n    }\n\n    private doLoadData(data: NodeData[] | null, parentNode: Node | null): void {\n        if (data) {\n            if (parentNode) {\n                this.deselectNodes(parentNode);\n                this.loadSubtree(data, parentNode);\n            } else {\n                this.initTree(data);\n            }\n\n            if (this.isDragging()) {\n                this.dndHandler.refresh();\n            }\n        }\n\n        this._triggerEvent(\"tree.load_data\", {\n            tree_data: data,\n            parent_node: parentNode,\n        });\n    }\n\n    private deselectNodes(parentNode: Node): void {\n        const selectedNodesUnderParent =\n            this.selectNodeHandler.getSelectedNodesUnder(parentNode);\n        for (const n of selectedNodesUnderParent) {\n            this.selectNodeHandler.removeFromSelection(n);\n        }\n    }\n\n    private loadSubtree(data: NodeData[], parentNode: Node): void {\n        parentNode.loadFromData(data);\n\n        parentNode.load_on_demand = false;\n        parentNode.is_loading = false;\n\n        this._refreshElements(parentNode);\n    }\n\n    private doLoadDataFromUrl(\n        urlInfoParam: string | JQuery.AjaxSettings | null,\n        parentNode: Node | null,\n        onFinished: HandleFinishedLoading | null\n    ): void {\n        const urlInfo = urlInfoParam || this.getDataUrlInfo(parentNode);\n\n        this.dataLoader.loadFromUrl(urlInfo, parentNode, onFinished);\n    }\n\n    private loadFolderOnDemand(\n        node: Node,\n        slide = true,\n        onFinished: OnFinishOpenNode | null\n    ): void {\n        node.is_loading = true;\n\n        this.doLoadDataFromUrl(null, node, () => {\n            this._openNode(node, slide, onFinished);\n        });\n    }\n}\n\nSimpleWidget.register(JqTreeWidget, \"tree\");\n"],"names":["version","Position","positionNames","before","Before","after","After","inside","Inside","none","None","getPositionName","position","name","Object","prototype","hasOwnProperty","call","getPosition","isNodeRecordWithChildren","data","Array","Node","o","isRoot","nodeClass","isEmptyFolder","load_on_demand","setData","children","parent","idMapping","Map","tree","key","value","removeChildren","node","createNode","addChild","length","loadFromData","push","setParent","index","splice","doRemoveChild","indexOf","hasChildren","callback","_iterate","level","child","result","movedNode","targetNode","isParentOf","addChildAtPosition","getChildIndex","includeParent","getDataFromNodes","nodes","map","tmpNode","k","v","getNodeByCallback","n","iterate","nodeInfo","childIndex","newParent","originalParent","removeChild","nodeId","get","id","set","removeNodeFromIndex","previousIndex","nextIndex","filter","f","includeChildren","is_open","nextSibling","getNextSibling","getNextNode","previousSibling","getPreviousSibling","getLastChild","getParent","lastChild","addNode","nodeData","addChildren","childrenData","initFromData","addNodeToIndex","getNodeClass","DragAndDropHandler","treeWidget","hoveredArea","hitAreas","isDragging","currentItem","positionInfo","$element","jQuery","target","mustCaptureElement","options","onIsMoveHandle","nodeElement","_getNodeElement","onCanMove","pageX","undefined","pageY","refresh","offset","left","top","dragElement","DragElement","element","autoEscape","addClass","move","area","findHoveredArea","canMoveToArea","isFolder","stopOpenFolderTimer","mustOpenFolderTimer","startOpenFolderTimer","updateDropHint","removeDropHint","onDragMove","originalEvent","moveItem","clear","removeHover","removeHitAreas","removeClass","onDragStop","generateHitAreas","_getNodeElementForNode","hitAreasGenerator","HitAreasGenerator","getTreeDimensions","bottom","generate","is","onCanMoveTo","positionName","remove","previousGhost","x","y","dimensions","right","low","high","mid","addDropHint","folder","openFolder","_openNode","slide","openFolderDelay","openFolderTimer","window","setTimeout","clearTimeout","previousParent","doMove","moveNode","empty","_refreshElements","event","_triggerEvent","move_info","moved_node","target_node","previous_parent","do_move","original_event","isDefaultPrevented","el","width","height","_getScrollLeft","VisibleNodeIterator","isFirstNode","_iterateNode","nextNode","mustIterateInside","handleFirstNode","handleNode","handleOpenFolder","handleClosedFolder","childrenLength","forEach","_","i","handleAfterOpenFolder","currentNode","treeBottom","positions","lastTop","previousTop","group","generateHitAreasForGroup","addPosition","getTop","positionsInGroup","positionCount","Math","min","areaHeight","round","areaTop","nodeName","offsetX","offsetY","$tree","text","html","css","append","isInt","isFunction","getBoolString","ElementsRenderer","openedIconElement","createButtonElement","openedIcon","closedIconElement","closedIcon","fromNode","renderFromNode","renderFromRoot","createDomElements","$previousLi","li","createLi","getLevel","attachNodeData","isRootNode","ul","createUl","appendChild","classString","role","rtl","dragAndDrop","document","createElement","className","setAttribute","isSelected","Boolean","selectNodeHandler","isNodeSelected","mustShowFolder","showEmptyFolder","createFolderLi","createNodeLi","onCreateLi","buttonClasses","getButtonClasses","folderClasses","getFolderClasses","iconElement","div","buttonLink","cloneNode","buttonLeft","createTitleSpan","liClasses","join","isOpen","titleSpan","classes","tabIndex","textContent","innerHTML","is_loading","createTextNode","DataLoader","urlInfo","parentNode","onFinished","$el","getDomElement","addLoadingClass","notifyLoading","stopLoading","removeLoadingClass","handleSuccess","loadData","parseData","handleError","jqXHR","onLoadFailed","submitRequest","isLoading","onLoading","urlInfoInput","url","ajaxSettings","_objectSpread","method","cache","dataType","success","error","toUpperCase","ajax","dataFilter","getParsedData","JSON","parse","parsedData","KeyHandler","e","canHandleKeyboard","selectedNode","getSelectedNode","which","DOWN","moveDown","UP","moveUp","RIGHT","moveRight","LEFT","moveLeft","keyboardSupport","on","handleKeyDown","off","selectNode","getPreviousNode","openNode","closeNode","scrollHandler","isScrolledIntoView","find","scrollToNode","isFocusOnTree","register","widgetClass","widgetName","getDataKey","getWidgetData","dataKey","widget","SimpleWidget","createWidget","existingWidget","simpleWidgetClass","init","destroyWidget","destroy","removeData","callFunction","functionName","args","simpleWidget","widgetFunction","apply","fn","argument1","defaults","constructor","deinit","getPositionInfoFromMouseEvent","getPositionInfoFromTouch","touch","MouseWidget","button","handleMouseDown","cancelable","preventDefault","handleMouseMove","handleMouseUp","touches","changedTouches","addEventListener","mouseDown","passive","touchStart","isMouseStarted","mouseDelayTimer","isMouseDelayMet","mouseDownInfo","removeEventListener","removeMouseMoveEventListeners","mouseCapture","handleStartMouse","mouseMove","touchMove","mouseUp","touchEnd","mouseDelay","getMouseDelay","startMouseDelayTimer","mouseDrag","mouseStart","mouseStop","SaveStateHandler","state","stringify","getState","onSetStateFromStorage","supportsLocalStorage","localStorage","setItem","getKeyName","jsonData","loadFromStorage","parseState","getOpenNodeIds","openNodes","getSelectedNodeIds","selectedNodeIds","getSelectedNodes","open_nodes","selected_node","mustLoadOnDemand","openInitialNodes","resetSelection","selectInitialNodes","cbFinished","doSetInitialStateOnDemand","getStateFromStorage","onGetStateFromStorage","getItem","nodeIds","getNodeById","selectCount","addToSelection","selectedNodes","removeFromSelection","nodeIdsParam","loadingCount","newNodesIds","loadAndOpenNode","saveState","testSupport","sessionStorage","removeItem","_supportsLocalStorage","ScrollHandler","isInitialized","ensureInit","checkVerticalScrolling","checkHorizontalScrolling","$scrollParent","scrollTop","treeTop","elementBottom","viewBottom","elementTop","viewTop","elHeight","originalTop","scrollParentTop","windowHeight","scrollLeft","getParentWithOverflow","cssAttributes","hasOverFlow","attr","overflowValue","parents","setDocumentAsScrollParent","tagName","initScrollParent","scrollParent","distanceBottom","offsetHeight","refreshHitAreas","distanceTop","dndHandler","handleVerticalScrollingWithScrollParent","handleVerticalScrollingWithDocument","handleHorizontalScrollingWithParent","handleHorizontalScrollingWithDocument","scrollParentOffset","canScrollRight","clientWidth","scrollWidth","canScrollLeft","rightEdge","leftEdge","isNearRightEdge","isNearLeftEdge","max","$document","windowWidth","SelectNodeHandler","Set","selectedSingleNode","has","add","activeElement","_containsElement","NodeElement","mustShowBorderDropHint","BorderDropHint","GhostDropHint","mustSetFocus","$li","getLi","$span","getSpan","trigger","removeAttr","blur","FolderElement","animationSpeed","$button","getButton","buttonEl","icon","renderer","doOpen","getUl","slideDown","show","doClose","slideUp","hide","$div","elWidth","outerHeight","$hint","$ghost","moveAfter","moveBefore","moveInsideOpenFolder","moveInside","childElement","NODE_PARAM_IS_EMPTY","PARAM_IS_EMPTY","JqTreeWidget","clickTarget","getClickTarget","type","toggle","stopPropagation","click_event","doSelectNode","closest","getNode","slideParam","Error","optionsParam","getData","doLoadData","param1","param2","param3","doLoadDataFromUrl","getNodeByName","getNodeByNameMustExist","getNodesByProperty","parseParams","close","newNodeInfo","existingNode","newNode","addAfter","addBefore","addParent","parentNodeParam","prepend","idIsChanged","subtree","positionIndex","saveStateHandler","select","deselect","nodeOffset","nodeTop","treeOffset","scrollToY","setInitialState","option","keyHandler","__version__","eventName","values","Event","doOpenNode","_node","_slide","_onFinished","folderElement","open","loadFolderOnDemand","mustSelect","isSelectedNodeInSubtree","render","selectCurrentNode","getScrollLeft","getRtlOption","getDefaultClosedIcon","dataLoader","initData","handleClick","handleDblclick","useContextMenu","handleContextmenu","checkScrolling","startDndDelay","dataUrl","getDataUrlInfo","getUrlFromString","setUrlInfoData","selectedNodeId","getNodeIdToBeSelected","doInit","setInitialStateOnDemand","restoreState","autoOpenNodes","autoOpen","maxLevel","getAutoOpenMaxLevel","isRestored","parseInt","$target","dataRtl","deselectCurrentNode","defaultOptions","mustToggle","selectOptions","canSelect","onCanSelectNode","selectable","openParents","previous_node","deselectedNode","deselected_node","deselectNodes","loadSubtree","initTree","tree_data","parent_node","selectedNodesUnderParent","getSelectedNodesUnder","urlInfoParam","loadFromUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA,IAAMA,OAAO,GAAG,OAAO;;ECIvB,IAAYC,QAAQ,CAAA;EAKnB,CAAA,UALWA,QAAQ,EAAA;EAARA,EAAAA,QAAQ,CAARA,QAAQ,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;EAARA,EAAAA,QAAQ,CAARA,QAAQ,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;EAARA,EAAAA,QAAQ,CAARA,QAAQ,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;EAARA,EAAAA,QAAQ,CAARA,QAAQ,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA;EAAA,CAARA,EAAAA,QAAQ,KAARA,QAAQ,GAAA,EAAA,CAAA,CAAA,CAAA;EAOpB,IAAMC,aAAuC,GAAG;IAC5CC,MAAM,EAAEF,QAAQ,CAACG,MAAM;IACvBC,KAAK,EAAEJ,QAAQ,CAACK,KAAK;IACrBC,MAAM,EAAEN,QAAQ,CAACO,MAAM;IACvBC,IAAI,EAAER,QAAQ,CAACS,IAAAA;EACnB,CAAC,CAAA;EAIM,IAAMC,eAAe,GAAG,SAAlBA,eAAe,CAAIC,QAAkB,EAAa;EAC3D,EAAA,KAAK,IAAMC,IAAI,IAAIX,aAAa,EAAE;EAC9B,IAAA,IAAIY,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACf,aAAa,EAAEW,IAAI,CAAC,EAAE;EAC3D,MAAA,IAAIX,aAAa,CAACW,IAAI,CAAC,KAAKD,QAAQ,EAAE;EAClC,QAAA,OAAOC,IAAI,CAAA;EACf,OAAA;EACJ,KAAA;EACJ,GAAA;EAEA,EAAA,OAAO,EAAE,CAAA;EACb,CAAC,CAAA;EAEM,IAAMK,WAAW,GAAG,SAAdA,WAAW,CAAIL,IAAY,EAAA;IAAA,OACpCX,aAAa,CAACW,IAAI,CAAC,CAAA;EAAA,CAAA,CAAA;EAEvB,IAAMM,wBAAwB,GAAG,SAA3BA,wBAAwB,CAC1BC,IAAc,EAAA;EAAA,EAAA,OAEd,OAAOA,CAAAA,IAAI,CAAK,KAAA,QAAQ,IACxB,UAAU,IAAIA,IAAI,IAClBA,IAAI,CAAC,UAAU,CAAC,YAAYC,KAAK,CAAA;EAAA,CAAA,CAAA;EAErC,IAAaC,IAAI,gBAAA,YAAA;IAgBb,SAAyE,IAAA,GAAA;MAAA,IAA7DC,CAAkB,uEAAG,IAAI,CAAA;MAAA,IAAEC,MAAM,uEAAG,KAAK,CAAA;MAAA,IAAEC,SAAS,uEAAGH,IAAI,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,IAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,gBAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,EAAA,KAAA,CAAA,CAAA,CAAA;MACnE,IAAI,CAACT,IAAI,GAAG,EAAE,CAAA;MACd,IAAI,CAACa,aAAa,GAAG,KAAK,CAAA;MAC1B,IAAI,CAACC,cAAc,GAAG,KAAK,CAAA;EAE3B,IAAA,IAAI,CAACC,OAAO,CAACL,CAAC,CAAC,CAAA;MAEf,IAAI,CAACM,QAAQ,GAAG,EAAE,CAAA;MAClB,IAAI,CAACC,MAAM,GAAG,IAAI,CAAA;EAElB,IAAA,IAAIN,MAAM,EAAE;EACR,MAAA,IAAI,CAACO,SAAS,GAAG,IAAIC,GAAG,EAAgB,CAAA;QACxC,IAAI,CAACC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAACR,SAAS,GAAGA,SAAS,CAAA;EAC9B,KAAA;EACJ,GAAA;;EAEA;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAVI,EAAA,YAAA,CAAA,IAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,SAAA;MAAA,KAgBA,EAAA,SAAA,OAAA,CAAeF,CAAkB,EAAQ;QACrC,IAAI,CAACA,CAAC,EAAE;EACJ,QAAA,OAAA;EACJ,OAAC,MAAM,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE;UAC9B,IAAI,CAACV,IAAI,GAAGU,CAAC,CAAA;EACjB,OAAC,MAAM,IAAI,OAAA,CAAOA,CAAC,CAAA,KAAK,QAAQ,EAAE;EAC9B,QAAA,KAAK,IAAMW,IAAG,IAAIX,CAAC,EAAE;EACjB,UAAA,IAAIT,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACM,CAAC,EAAEW,IAAG,CAAC,EAAE;EAC9C,YAAA,IAAMC,KAAK,GAAGZ,CAAC,CAACW,IAAG,CAAC,CAAA;EAEpB,YAAA,IAAIA,IAAG,KAAK,OAAO,IAAIA,IAAG,KAAK,MAAM,EAAE;EACnC;EACA,cAAA,IAAI,OAAOC,KAAK,KAAK,QAAQ,EAAE;kBAC3B,IAAI,CAACtB,IAAI,GAAGsB,KAAK,CAAA;EACrB,eAAA;eACH,MAAM,IAAID,IAAG,KAAK,UAAU,IAAIA,IAAG,KAAK,QAAQ,EAAE;EAC/C;EACA,cAAA,IAAI,CAACA,IAAG,CAAC,GAAGC,KAAK,CAAA;EACrB,aAAA;EACJ,WAAA;EACJ,SAAA;EACJ,OAAA;EACJ,KAAA;;EAEA;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAfI,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,cAAA;MAAA,KAiBA,EAAA,SAAA,YAAA,CAAoBf,IAAgB,EAAQ;QACxC,IAAI,CAACgB,cAAc,EAAE,CAAA;EAAC,MAAA,IAAA,SAAA,GAAA,0BAAA,CAENhB,IAAI,CAAA;EAAA,QAAA,KAAA,CAAA;EAAA,MAAA,IAAA;UAApB,KAAsB,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;EAAA,UAAA,IAAXG,CAAC,GAAA,KAAA,CAAA,KAAA,CAAA;EACR,UAAA,IAAMc,KAAI,GAAG,IAAI,CAACC,UAAU,CAACf,CAAC,CAAC,CAAA;EAC/B,UAAA,IAAI,CAACgB,QAAQ,CAACF,KAAI,CAAC,CAAA;EAEnB,UAAA,IAAIlB,wBAAwB,CAACI,CAAC,CAAC,EAAE;EAC7B,YAAA,IAAIA,CAAC,CAACM,QAAQ,CAACW,MAAM,KAAK,CAAC,EAAE;gBACzBH,KAAI,CAACX,aAAa,GAAG,IAAI,CAAA;EAC7B,aAAC,MAAM;EACHW,cAAAA,KAAI,CAACI,YAAY,CAAClB,CAAC,CAACM,QAAQ,CAAC,CAAA;EACjC,aAAA;EACJ,WAAA;EACJ,SAAA;EAAC,OAAA,CAAA,OAAA,GAAA,EAAA;EAAA,QAAA,SAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;EAAA,OAAA,SAAA;EAAA,QAAA,SAAA,CAAA,CAAA,EAAA,CAAA;EAAA,OAAA;EAED,MAAA,OAAO,IAAI,CAAA;EACf,KAAA;;EAEA;EACJ;EACA;EACA;EACA;EACA;EALI,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;MAAA,KAOA,EAAA,SAAA,QAAA,CAAgBQ,IAAU,EAAQ;EAC9B,MAAA,IAAI,CAACR,QAAQ,CAACa,IAAI,CAACL,IAAI,CAAC,CAAA;EACxBA,MAAAA,IAAI,CAACM,SAAS,CAAC,IAAI,CAAC,CAAA;EACxB,KAAA;;EAEA;EACJ;EACA;EACA;EACA;EACA;EACA;EANI,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,oBAAA;EAAA,IAAA,KAAA,EAQA,SAA0BN,kBAAAA,CAAAA,IAAU,EAAEO,KAAa,EAAQ;QACvD,IAAI,CAACf,QAAQ,CAACgB,MAAM,CAACD,KAAK,EAAE,CAAC,EAAEP,IAAI,CAAC,CAAA;EACpCA,MAAAA,IAAI,CAACM,SAAS,CAAC,IAAI,CAAC,CAAA;EACxB,KAAA;;EAEA;EACJ;EACA;EACA;EAHI,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,aAAA;MAAA,KAKA,EAAA,SAAA,WAAA,CAAmBN,IAAU,EAAQ;EACjC;QACAA,IAAI,CAACD,cAAc,EAAE,CAAA;EAErB,MAAA,IAAI,CAACU,aAAa,CAACT,IAAI,CAAC,CAAA;EAC5B,KAAA;;EAEA;EACJ;EACA;EACA;EAHI,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,eAAA;MAAA,KAKA,EAAA,SAAA,aAAA,CAAqBA,IAAU,EAAU;EACrC,MAAA,OAAO,IAAI,CAACR,QAAQ,CAACkB,OAAO,CAACV,IAAI,CAAC,CAAA;EACtC,KAAA;;EAEA;EACJ;EACA;EACA;EACA;EACA;EALI,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,aAAA;EAAA,IAAA,KAAA,EAOA,SAA8B,WAAA,GAAA;EAC1B,MAAA,OAAO,IAAI,CAACR,QAAQ,CAACW,MAAM,KAAK,CAAC,CAAA;EACrC,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;EAAA,IAAA,KAAA,EAED,SAA2B,QAAA,GAAA;EACvB,MAAA,OAAO,IAAI,CAACQ,WAAW,EAAE,IAAI,IAAI,CAACrB,cAAc,CAAA;EACpD,KAAA;;EAEA;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAXI,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,SAAA;MAAA,KAiBA,EAAA,SAAA,OAAA,CAAesB,QAAyB,EAAQ;QAC5C,IAAMC,QAAQ,GAAG,SAAXA,QAAQ,CAAIb,IAAU,EAAEc,KAAa,EAAW;UAClD,IAAId,IAAI,CAACR,QAAQ,EAAE;YAAA,IACKQ,UAAAA,GAAAA,0BAAAA,CAAAA,IAAI,CAACR,QAAQ,CAAA;EAAA,YAAA,MAAA,CAAA;EAAA,UAAA,IAAA;cAAjC,KAAmC,UAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,MAAA,GAAA,UAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;EAAA,cAAA,IAAxBuB,KAAK,GAAA,MAAA,CAAA,KAAA,CAAA;EACZ,cAAA,IAAMC,MAAM,GAAGJ,QAAQ,CAACG,KAAK,EAAED,KAAK,CAAC,CAAA;EAErC,cAAA,IAAIE,MAAM,IAAID,KAAK,CAACJ,WAAW,EAAE,EAAE;EAC/BE,gBAAAA,QAAQ,CAACE,KAAK,EAAED,KAAK,GAAG,CAAC,CAAC,CAAA;EAC9B,eAAA;EACJ,aAAA;EAAC,WAAA,CAAA,OAAA,GAAA,EAAA;EAAA,YAAA,UAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;EAAA,WAAA,SAAA;EAAA,YAAA,UAAA,CAAA,CAAA,EAAA,CAAA;EAAA,WAAA;EACL,SAAA;SACH,CAAA;EAEDD,MAAAA,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAA;EACrB,KAAA;;EAEA;EACJ;EACA;EACA;EACA;EACA;EALI,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;EAAA,IAAA,KAAA,EAQA,kBACII,SAAe,EACfC,UAAgB,EAChB3C,QAAkB,EACX;QACP,IAAI,CAAC0C,SAAS,CAACxB,MAAM,IAAIwB,SAAS,CAACE,UAAU,CAACD,UAAU,CAAC,EAAE;EACvD;EACA;EACA,QAAA,OAAO,KAAK,CAAA;EAChB,OAAC,MAAM;EACHD,QAAAA,SAAS,CAACxB,MAAM,CAACgB,aAAa,CAACQ,SAAS,CAAC,CAAA;EAEzC,QAAA,QAAQ1C,QAAQ;YACZ,KAAKX,QAAQ,CAACK,KAAK;EAAE,YAAA;gBACjB,IAAIiD,UAAU,CAACzB,MAAM,EAAE;EACnByB,gBAAAA,UAAU,CAACzB,MAAM,CAAC2B,kBAAkB,CAChCH,SAAS,EACTC,UAAU,CAACzB,MAAM,CAAC4B,aAAa,CAACH,UAAU,CAAC,GAAG,CAAC,CAClD,CAAA;EACD,gBAAA,OAAO,IAAI,CAAA;EACf,eAAA;EACA,cAAA,OAAO,KAAK,CAAA;EAChB,aAAA;YAEA,KAAKtD,QAAQ,CAACG,MAAM;EAAE,YAAA;gBAClB,IAAImD,UAAU,CAACzB,MAAM,EAAE;EACnByB,gBAAAA,UAAU,CAACzB,MAAM,CAAC2B,kBAAkB,CAChCH,SAAS,EACTC,UAAU,CAACzB,MAAM,CAAC4B,aAAa,CAACH,UAAU,CAAC,CAC9C,CAAA;EACD,gBAAA,OAAO,IAAI,CAAA;EACf,eAAA;EACA,cAAA,OAAO,KAAK,CAAA;EAChB,aAAA;YAEA,KAAKtD,QAAQ,CAACO,MAAM;EAAE,YAAA;EAClB;EACA+C,cAAAA,UAAU,CAACE,kBAAkB,CAACH,SAAS,EAAE,CAAC,CAAC,CAAA;EAC3C,cAAA,OAAO,IAAI,CAAA;EACf,aAAA;EAEA,UAAA;EACI,YAAA,OAAO,KAAK,CAAA;EAAC,SAAA;EAEzB,OAAA;EACJ,KAAA;;EAEA;EACJ;EACA;EAFI,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,SAAA;EAAA,IAAA,KAAA,EAGA,SAAoD,OAAA,GAAA;QAAA,IAArCK,aAAa,uEAAG,KAAK,CAAA;EAChC,MAAA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAIC,KAAa,EAAgC;EACnE,QAAA,OAAOA,KAAK,CAACC,GAAG,CAAC,UAACzB,IAAI,EAAK;YACvB,IAAM0B,OAAgC,GAAG,EAAE,CAAA;EAE3C,UAAA,KAAK,IAAMC,CAAC,IAAI3B,IAAI,EAAE;EAClB,YAAA,IACI,CACI,QAAQ,EACR,UAAU,EACV,SAAS,EACT,WAAW,EACX,gBAAgB,EAChB,WAAW,EACX,MAAM,EACN,eAAe,CAClB,CAACU,OAAO,CAACiB,CAAC,CAAC,KAAK,CAAC,CAAC,IACnBlD,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACoB,IAAI,EAAE2B,CAAC,CAAC,EAC/C;EACE,cAAA,IAAMC,CAAC,GAAG5B,IAAI,CAAC2B,CAAC,CAAC,CAAA;EACjBD,cAAAA,OAAO,CAACC,CAAC,CAAC,GAAGC,CAAC,CAAA;EAClB,aAAA;EACJ,WAAA;EAEA,UAAA,IAAI5B,IAAI,CAACW,WAAW,EAAE,EAAE;cACpBe,OAAO,CAAC,UAAU,CAAC,GAAGH,gBAAgB,CAACvB,IAAI,CAACR,QAAQ,CAAC,CAAA;EACzD,WAAA;EAEA,UAAA,OAAOkC,OAAO,CAAA;EAClB,SAAC,CAAC,CAAA;SACL,CAAA;EAED,MAAA,IAAIJ,aAAa,EAAE;EACf,QAAA,OAAOC,gBAAgB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAA;EACnC,OAAC,MAAM;EACH,QAAA,OAAOA,gBAAgB,CAAC,IAAI,CAAC/B,QAAQ,CAAC,CAAA;EAC1C,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,eAAA;MAAA,KAED,EAAA,SAAA,aAAA,CAAqBhB,IAAY,EAAe;EAC5C,MAAA,OAAO,IAAI,CAACqD,iBAAiB,CAAC,UAAC7B,IAAU,EAAA;EAAA,QAAA,OAAKA,IAAI,CAACxB,IAAI,KAAKA,IAAI,CAAA;SAAC,CAAA,CAAA;EACrE,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,wBAAA;MAAA,KAED,EAAA,SAAA,sBAAA,CAA8BA,IAAY,EAAQ;EAC9C,MAAA,IAAMwB,IAAI,GAAG,IAAI,CAAC6B,iBAAiB,CAAC,UAACC,CAAO,EAAA;EAAA,QAAA,OAAKA,CAAC,CAACtD,IAAI,KAAKA,IAAI,CAAA;SAAC,CAAA,CAAA;QAEjE,IAAI,CAACwB,IAAI,EAAE;EACP,QAAA,MAAA,iBAAA,CAAA,MAAA,CAAwBxB,IAAI,EAAA,YAAA,CAAA,CAAA;EAChC,OAAA;EAEA,MAAA,OAAOwB,IAAI,CAAA;EACf,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,mBAAA;MAAA,KAED,EAAA,SAAA,iBAAA,CAAyBY,QAAiC,EAAe;QACrE,IAAII,MAAmB,GAAG,IAAI,CAAA;EAE9B,MAAA,IAAI,CAACe,OAAO,CAAC,UAAC/B,IAAU,EAAK;EACzB,QAAA,IAAIgB,MAAM,EAAE;EACR,UAAA,OAAO,KAAK,CAAA;EAChB,SAAC,MAAM,IAAIJ,QAAQ,CAACZ,IAAI,CAAC,EAAE;EACvBgB,UAAAA,MAAM,GAAGhB,IAAI,CAAA;EACb,UAAA,OAAO,KAAK,CAAA;EAChB,SAAC,MAAM;EACH,UAAA,OAAO,IAAI,CAAA;EACf,SAAA;EACJ,OAAC,CAAC,CAAA;EAEF,MAAA,OAAOgB,MAAM,CAAA;EACjB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;MAAA,KAED,EAAA,SAAA,QAAA,CAAgBgB,QAAkB,EAAe;EAC7C,MAAA,IAAI,CAAC,IAAI,CAACvC,MAAM,EAAE;EACd,QAAA,OAAO,IAAI,CAAA;EACf,OAAC,MAAM;EACH,QAAA,IAAMO,MAAI,GAAG,IAAI,CAACC,UAAU,CAAC+B,QAAQ,CAAC,CAAA;UAEtC,IAAMC,UAAU,GAAG,IAAI,CAACxC,MAAM,CAAC4B,aAAa,CAAC,IAAI,CAAC,CAAA;UAClD,IAAI,CAAC5B,MAAM,CAAC2B,kBAAkB,CAACpB,MAAI,EAAEiC,UAAU,GAAG,CAAC,CAAC,CAAA;UAEpD,IACInD,wBAAwB,CAACkD,QAAQ,CAAC,IAClCA,QAAQ,CAACxC,QAAQ,CAACW,MAAM,EAC1B;EACEH,UAAAA,MAAI,CAACI,YAAY,CAAC4B,QAAQ,CAACxC,QAAQ,CAAC,CAAA;EACxC,SAAA;EAEA,QAAA,OAAOQ,MAAI,CAAA;EACf,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,WAAA;MAAA,KAED,EAAA,SAAA,SAAA,CAAiBgC,QAAkB,EAAe;EAC9C,MAAA,IAAI,CAAC,IAAI,CAACvC,MAAM,EAAE;EACd,QAAA,OAAO,IAAI,CAAA;EACf,OAAC,MAAM;EACH,QAAA,IAAMO,MAAI,GAAG,IAAI,CAACC,UAAU,CAAC+B,QAAQ,CAAC,CAAA;UAEtC,IAAMC,UAAU,GAAG,IAAI,CAACxC,MAAM,CAAC4B,aAAa,CAAC,IAAI,CAAC,CAAA;UAClD,IAAI,CAAC5B,MAAM,CAAC2B,kBAAkB,CAACpB,MAAI,EAAEiC,UAAU,CAAC,CAAA;UAEhD,IACInD,wBAAwB,CAACkD,QAAQ,CAAC,IAClCA,QAAQ,CAACxC,QAAQ,CAACW,MAAM,EAC1B;EACEH,UAAAA,MAAI,CAACI,YAAY,CAAC4B,QAAQ,CAACxC,QAAQ,CAAC,CAAA;EACxC,SAAA;EAEA,QAAA,OAAOQ,MAAI,CAAA;EACf,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,WAAA;MAAA,KAED,EAAA,SAAA,SAAA,CAAiBgC,QAAkB,EAAe;EAC9C,MAAA,IAAI,CAAC,IAAI,CAACvC,MAAM,EAAE;EACd,QAAA,OAAO,IAAI,CAAA;EACf,OAAC,MAAM;EACH,QAAA,IAAMyC,SAAS,GAAG,IAAI,CAACjC,UAAU,CAAC+B,QAAQ,CAAC,CAAA;UAE3C,IAAI,IAAI,CAACpC,IAAI,EAAE;EACXsC,UAAAA,SAAS,CAAC5B,SAAS,CAAC,IAAI,CAACV,IAAI,CAAC,CAAA;EAClC,SAAA;EACA,QAAA,IAAMuC,cAAc,GAAG,IAAI,CAAC1C,MAAM,CAAA;UAAC,IAEf0C,UAAAA,GAAAA,0BAAAA,CAAAA,cAAc,CAAC3C,QAAQ,CAAA;EAAA,UAAA,MAAA,CAAA;EAAA,QAAA,IAAA;YAA3C,KAA6C,UAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,MAAA,GAAA,UAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;EAAA,YAAA,IAAlCuB,KAAK,GAAA,MAAA,CAAA,KAAA,CAAA;EACZmB,YAAAA,SAAS,CAAChC,QAAQ,CAACa,KAAK,CAAC,CAAA;EAC7B,WAAA;EAAC,SAAA,CAAA,OAAA,GAAA,EAAA;EAAA,UAAA,UAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;EAAA,SAAA,SAAA;EAAA,UAAA,UAAA,CAAA,CAAA,EAAA,CAAA;EAAA,SAAA;UAEDoB,cAAc,CAAC3C,QAAQ,GAAG,EAAE,CAAA;EAC5B2C,QAAAA,cAAc,CAACjC,QAAQ,CAACgC,SAAS,CAAC,CAAA;EAClC,QAAA,OAAOA,SAAS,CAAA;EACpB,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;EAAA,IAAA,KAAA,EAED,SAAsB,MAAA,GAAA;QAClB,IAAI,IAAI,CAACzC,MAAM,EAAE;EACb,QAAA,IAAI,CAACA,MAAM,CAAC2C,WAAW,CAAC,IAAI,CAAC,CAAA;UAC7B,IAAI,CAAC3C,MAAM,GAAG,IAAI,CAAA;EACtB,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;MAAA,KAED,EAAA,SAAA,MAAA,CAAcuC,QAAkB,EAAQ;EACpC,MAAA,IAAMhC,IAAI,GAAG,IAAI,CAACC,UAAU,CAAC+B,QAAQ,CAAC,CAAA;EACtC,MAAA,IAAI,CAAC9B,QAAQ,CAACF,IAAI,CAAC,CAAA;QAEnB,IAAIlB,wBAAwB,CAACkD,QAAQ,CAAC,IAAIA,QAAQ,CAACxC,QAAQ,CAACW,MAAM,EAAE;EAChEH,QAAAA,IAAI,CAACI,YAAY,CAAC4B,QAAQ,CAACxC,QAAQ,CAAC,CAAA;EACxC,OAAA;EAEA,MAAA,OAAOQ,IAAI,CAAA;EACf,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,SAAA;MAAA,KAED,EAAA,SAAA,OAAA,CAAegC,QAAkB,EAAQ;EACrC,MAAA,IAAMhC,IAAI,GAAG,IAAI,CAACC,UAAU,CAAC+B,QAAQ,CAAC,CAAA;EACtC,MAAA,IAAI,CAACZ,kBAAkB,CAACpB,IAAI,EAAE,CAAC,CAAC,CAAA;QAEhC,IAAIlB,wBAAwB,CAACkD,QAAQ,CAAC,IAAIA,QAAQ,CAACxC,QAAQ,CAACW,MAAM,EAAE;EAChEH,QAAAA,IAAI,CAACI,YAAY,CAAC4B,QAAQ,CAACxC,QAAQ,CAAC,CAAA;EACxC,OAAA;EAEA,MAAA,OAAOQ,IAAI,CAAA;EACf,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;MAAA,KAED,EAAA,SAAA,UAAA,CAAkBA,IAAU,EAAW;EACnC,MAAA,IAAIP,MAAM,GAAGO,IAAI,CAACP,MAAM,CAAA;EAExB,MAAA,OAAOA,MAAM,EAAE;UACX,IAAIA,MAAM,KAAK,IAAI,EAAE;EACjB,UAAA,OAAO,IAAI,CAAA;EACf,SAAA;UAEAA,MAAM,GAAGA,MAAM,CAACA,MAAM,CAAA;EAC1B,OAAA;EAEA,MAAA,OAAO,KAAK,CAAA;EAChB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;EAAA,IAAA,KAAA,EAED,SAA0B,QAAA,GAAA;QACtB,IAAIqB,KAAK,GAAG,CAAC,CAAA;EACb,MAAA,IAAId,IAAU,GAAG,IAAI,CAAC;;QAEtB,OAAOA,IAAI,CAACP,MAAM,EAAE;EAChBqB,QAAAA,KAAK,IAAI,CAAC,CAAA;UACVd,IAAI,GAAGA,IAAI,CAACP,MAAM,CAAA;EACtB,OAAA;EAEA,MAAA,OAAOqB,KAAK,CAAA;EAChB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,aAAA;MAAA,KAED,EAAA,SAAA,WAAA,CAAmBuB,MAAc,EAAe;QAC5C,OAAO,IAAI,CAAC3C,SAAS,CAAC4C,GAAG,CAACD,MAAM,CAAC,IAAI,IAAI,CAAA;EAC7C,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,gBAAA;MAAA,KAED,EAAA,SAAA,cAAA,CAAsBrC,IAAU,EAAQ;EACpC,MAAA,IAAIA,IAAI,CAACuC,EAAE,IAAI,IAAI,EAAE;UACjB,IAAI,CAAC7C,SAAS,CAAC8C,GAAG,CAACxC,IAAI,CAACuC,EAAE,EAAEvC,IAAI,CAAC,CAAA;EACrC,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,qBAAA;MAAA,KAED,EAAA,SAAA,mBAAA,CAA2BA,IAAU,EAAQ;EACzC,MAAA,IAAIA,IAAI,CAACuC,EAAE,IAAI,IAAI,EAAE;EACjB,QAAA,IAAI,CAAC7C,SAAS,CAAA,QAAA,CAAO,CAACM,IAAI,CAACuC,EAAE,CAAC,CAAA;EAClC,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,gBAAA;EAAA,IAAA,KAAA,EAED,SAA8B,cAAA,GAAA;EAAA,MAAA,IAAA,KAAA,GAAA,IAAA,CAAA;EAC1B,MAAA,IAAI,CAACR,OAAO,CAAC,UAAChB,KAAW,EAAK;EAAA,QAAA,IAAA,UAAA,CAAA;EAC1B,QAAA,CAAA,UAAA,GAAA,KAAI,CAACnB,IAAI,MAAA,IAAA,IAAA,UAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAT,WAAW6C,mBAAmB,CAAC1B,KAAK,CAAC,CAAA;EACrC,QAAA,OAAO,IAAI,CAAA;EACf,OAAC,CAAC,CAAA;QAEF,IAAI,CAACvB,QAAQ,GAAG,EAAE,CAAA;EACtB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,oBAAA;EAAA,IAAA,KAAA,EAED,SAAyC,kBAAA,GAAA;EACrC,MAAA,IAAI,CAAC,IAAI,CAACC,MAAM,EAAE;EACd,QAAA,OAAO,IAAI,CAAA;EACf,OAAC,MAAM;UACH,IAAMiD,aAAa,GAAG,IAAI,CAACjD,MAAM,CAAC4B,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;UACzD,IAAIqB,aAAa,IAAI,CAAC,EAAE;EACpB,UAAA,OAAO,IAAI,CAACjD,MAAM,CAACD,QAAQ,CAACkD,aAAa,CAAC,CAAA;EAC9C,SAAC,MAAM;EACH,UAAA,OAAO,IAAI,CAAA;EACf,SAAA;EACJ,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,gBAAA;EAAA,IAAA,KAAA,EAED,SAAqC,cAAA,GAAA;EACjC,MAAA,IAAI,CAAC,IAAI,CAACjD,MAAM,EAAE;EACd,QAAA,OAAO,IAAI,CAAA;EACf,OAAC,MAAM;UACH,IAAMkD,SAAS,GAAG,IAAI,CAAClD,MAAM,CAAC4B,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;UACrD,IAAIsB,SAAS,GAAG,IAAI,CAAClD,MAAM,CAACD,QAAQ,CAACW,MAAM,EAAE;EACzC,UAAA,OAAO,IAAI,CAACV,MAAM,CAACD,QAAQ,CAACmD,SAAS,CAAC,CAAA;EAC1C,SAAC,MAAM;EACH,UAAA,OAAO,IAAI,CAAA;EACf,SAAA;EACJ,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,oBAAA;EAAA,IAAA,KAAA,EAED,SAA0B9C,kBAAAA,CAAAA,GAAW,EAAEC,KAAc,EAAU;EAC3D,MAAA,OAAO,IAAI,CAAC8C,MAAM,CAAC,UAAC5C,IAAU,EAAA;EAAA,QAAA,OAAKA,IAAI,CAACH,GAAG,CAAC,KAAKC,KAAK,CAAA;SAAC,CAAA,CAAA;EAC3D,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;MAAA,KAED,EAAA,SAAA,MAAA,CAAc+C,CAA0B,EAAU;QAC9C,IAAM7B,MAAc,GAAG,EAAE,CAAA;EAEzB,MAAA,IAAI,CAACe,OAAO,CAAC,UAAC/B,IAAU,EAAK;EACzB,QAAA,IAAI6C,CAAC,CAAC7C,IAAI,CAAC,EAAE;EACTgB,UAAAA,MAAM,CAACX,IAAI,CAACL,IAAI,CAAC,CAAA;EACrB,SAAA;EAEA,QAAA,OAAO,IAAI,CAAA;EACf,OAAC,CAAC,CAAA;EAEF,MAAA,OAAOgB,MAAM,CAAA;EACjB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,aAAA;EAAA,IAAA,KAAA,EAED,SAAwD,WAAA,GAAA;QAAA,IAArC8B,eAAe,uEAAG,IAAI,CAAA;QACrC,IAAIA,eAAe,IAAI,IAAI,CAACnC,WAAW,EAAE,IAAI,IAAI,CAACoC,OAAO,EAAE;EACvD;EACA,QAAA,OAAO,IAAI,CAACvD,QAAQ,CAAC,CAAC,CAAC,CAAA;EAC3B,OAAC,MAAM;EACH,QAAA,IAAI,CAAC,IAAI,CAACC,MAAM,EAAE;EACd,UAAA,OAAO,IAAI,CAAA;EACf,SAAC,MAAM;EACH,UAAA,IAAMuD,WAAW,GAAG,IAAI,CAACC,cAAc,EAAE,CAAA;EACzC,UAAA,IAAID,WAAW,EAAE;EACb;EACA,YAAA,OAAOA,WAAW,CAAA;EACtB,WAAC,MAAM;EACH;EACA,YAAA,OAAO,IAAI,CAACvD,MAAM,CAACyD,WAAW,CAAC,KAAK,CAAC,CAAA;EACzC,WAAA;EACJ,SAAA;EACJ,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,iBAAA;EAAA,IAAA,KAAA,EAED,SAAsC,eAAA,GAAA;EAClC,MAAA,IAAI,CAAC,IAAI,CAACzD,MAAM,EAAE;EACd,QAAA,OAAO,IAAI,CAAA;EACf,OAAC,MAAM;EACH,QAAA,IAAM0D,eAAe,GAAG,IAAI,CAACC,kBAAkB,EAAE,CAAA;EACjD,QAAA,IAAID,eAAe,EAAE;YACjB,IACI,CAACA,eAAe,CAACxC,WAAW,EAAE,IAC9B,CAACwC,eAAe,CAACJ,OAAO,EAC1B;EACE;EACA,YAAA,OAAOI,eAAe,CAAA;EAC1B,WAAC,MAAM;EACH;cACA,OAAOA,eAAe,CAACE,YAAY,EAAE,CAAA;EACzC,WAAA;EACJ,SAAC,MAAM;YACH,OAAO,IAAI,CAACC,SAAS,EAAE,CAAA;EAC3B,SAAA;EACJ,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,WAAA;EAAA,IAAA,KAAA,EAED,SAAgC,SAAA,GAAA;EAC5B;EACA,MAAA,IAAI,CAAC,IAAI,CAAC7D,MAAM,EAAE;EACd,QAAA,OAAO,IAAI,CAAA;SACd,MAAM,IAAI,CAAC,IAAI,CAACA,MAAM,CAACA,MAAM,EAAE;EAC5B;EACA,QAAA,OAAO,IAAI,CAAA;EACf,OAAC,MAAM;UACH,OAAO,IAAI,CAACA,MAAM,CAAA;EACtB,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,cAAA;EAAA,IAAA,KAAA,EAED,SAAmC,YAAA,GAAA;EAC/B,MAAA,IAAI,CAAC,IAAI,CAACkB,WAAW,EAAE,EAAE;EACrB,QAAA,OAAO,IAAI,CAAA;EACf,OAAC,MAAM;EACH,QAAA,IAAM4C,SAAS,GAAG,IAAI,CAAC/D,QAAQ,CAAC,IAAI,CAACA,QAAQ,CAACW,MAAM,GAAG,CAAC,CAAC,CAAA;UACzD,IAAI,EAAEoD,SAAS,CAAC5C,WAAW,EAAE,IAAI4C,SAAS,CAACR,OAAO,CAAC,EAAE;EACjD,UAAA,OAAOQ,SAAS,CAAA;EACpB,SAAC,MAAM;YACH,OAAOA,SAAS,CAACF,YAAY,EAAE,CAAA;EACnC,SAAA;EACJ,OAAA;EACJ,KAAA;;EAEA;EAAA,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,cAAA;MAAA,KACA,EAAA,SAAA,YAAA,CAAoBtE,IAAc,EAAQ;EAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;EACtC,MAAA,IAAMyE,OAAO,GAAG,SAAVA,OAAO,CAAIC,QAAkB,EAAW;EAC1C,QAAA,MAAI,CAAClE,OAAO,CAACkE,QAAQ,CAAC,CAAA;UAEtB,IACI3E,wBAAwB,CAAC2E,QAAQ,CAAC,IAClCA,QAAQ,CAACjE,QAAQ,CAACW,MAAM,EAC1B;EACEuD,UAAAA,WAAW,CAACD,QAAQ,CAACjE,QAAQ,CAAC,CAAA;EAClC,SAAA;SACH,CAAA;EAED,MAAA,IAAMkE,WAAW,GAAG,SAAdA,WAAW,CAAIC,YAAwB,EAAW;EAAA,QAAA,IAAA,UAAA,GAAA,0BAAA,CAChCA,YAAY,CAAA;EAAA,UAAA,MAAA,CAAA;EAAA,QAAA,IAAA;YAAhC,KAAkC,UAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,MAAA,GAAA,UAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;EAAA,YAAA,IAAvB5C,KAAK,GAAA,MAAA,CAAA,KAAA,CAAA;EACZ,YAAA,IAAMf,MAAI,GAAG,MAAI,CAACC,UAAU,EAAE,CAAA;EAC9BD,YAAAA,MAAI,CAAC4D,YAAY,CAAC7C,KAAK,CAAC,CAAA;EACxB,YAAA,MAAI,CAACb,QAAQ,CAACF,MAAI,CAAC,CAAA;EACvB,WAAA;EAAC,SAAA,CAAA,OAAA,GAAA,EAAA;EAAA,UAAA,UAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;EAAA,SAAA,SAAA;EAAA,UAAA,UAAA,CAAA,CAAA,EAAA,CAAA;EAAA,SAAA;SACJ,CAAA;QAEDwD,OAAO,CAACzE,IAAI,CAAC,CAAA;EACjB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,WAAA;MAAA,KAED,EAAA,SAAA,SAAA,CAAkBU,MAAY,EAAQ;EAAA,MAAA,IAAA,WAAA,CAAA;QAClC,IAAI,CAACA,MAAM,GAAGA,MAAM,CAAA;EACpB,MAAA,IAAI,CAACG,IAAI,GAAGH,MAAM,CAACG,IAAI,CAAA;EACvB,MAAA,CAAA,WAAA,GAAA,IAAI,CAACA,IAAI,MAAA,IAAA,IAAA,WAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAT,YAAWiE,cAAc,CAAC,IAAI,CAAC,CAAA;EACnC,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,eAAA;MAAA,KAED,EAAA,SAAA,aAAA,CAAsB7D,IAAU,EAAQ;EAAA,MAAA,IAAA,WAAA,CAAA;EACpC,MAAA,IAAI,CAACR,QAAQ,CAACgB,MAAM,CAAC,IAAI,CAACa,aAAa,CAACrB,IAAI,CAAC,EAAE,CAAC,CAAC,CAAA;EACjD,MAAA,CAAA,WAAA,GAAA,IAAI,CAACJ,IAAI,MAAA,IAAA,IAAA,WAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAT,YAAW6C,mBAAmB,CAACzC,IAAI,CAAC,CAAA;EACxC,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,cAAA;EAAA,IAAA,KAAA,EAED,SAAoC,YAAA,GAAA;EAAA,MAAA,IAAA,WAAA,CAAA;EAChC,MAAA,OAAO,IAAI,CAACZ,SAAS,KAAI,IAAI,KAAJ,IAAA,IAAA,IAAI,KAAJ,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,WAAA,GAAA,IAAI,CAAEQ,IAAI,MAAA,IAAA,IAAA,WAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAV,WAAYR,CAAAA,SAAS,KAAIH,IAAI,CAAA;EAC1D,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;MAAA,KAED,EAAA,SAAA,UAAA,CAAmBwE,QAAmB,EAAQ;EAC1C,MAAA,IAAMrE,SAAS,GAAG,IAAI,CAAC0E,YAAY,EAAE,CAAA;EACrC,MAAA,OAAO,IAAI1E,SAAS,CAACqE,QAAQ,CAAC,CAAA;EAClC,KAAA;EAAC,GAAA,CAAA,CAAA,CAAA;EAAA,EAAA,OAAA,IAAA,CAAA;EAAA,CAAA,EAAA;;EC/oBL,IAAaM,kBAAkB,gBAAA,YAAA;EAY3B,EAAA,SAAA,kBAAA,CAAYC,UAAwB,EAAE;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,kBAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EAAA,KAAA,CAAA,CAAA,CAAA;MAClC,IAAI,CAACA,UAAU,GAAGA,UAAU,CAAA;MAE5B,IAAI,CAACC,WAAW,GAAG,IAAI,CAAA;MACvB,IAAI,CAACC,QAAQ,GAAG,EAAE,CAAA;MAClB,IAAI,CAACC,UAAU,GAAG,KAAK,CAAA;MACvB,IAAI,CAACC,WAAW,GAAG,IAAI,CAAA;MACvB,IAAI,CAACC,YAAY,GAAG,IAAI,CAAA;EAC5B,GAAA;EAAC,EAAA,YAAA,CAAA,kBAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,cAAA;MAAA,KAED,EAAA,SAAA,YAAA,CAAoBA,YAA0B,EAAkB;EAC5D,MAAA,IAAMC,QAAQ,GAAGC,MAAM,CAACF,YAAY,CAACG,MAAM,CAAC,CAAA;EAE5C,MAAA,IAAI,CAAC,IAAI,CAACC,kBAAkB,CAACH,QAAQ,CAAC,EAAE;EACpC,QAAA,OAAO,IAAI,CAAA;EACf,OAAA;EAEA,MAAA,IACI,IAAI,CAACN,UAAU,CAACU,OAAO,CAACC,cAAc,IACtC,CAAC,IAAI,CAACX,UAAU,CAACU,OAAO,CAACC,cAAc,CAACL,QAAQ,CAAC,EACnD;EACE,QAAA,OAAO,IAAI,CAAA;EACf,OAAA;QAEA,IAAIM,WAAW,GAAG,IAAI,CAACZ,UAAU,CAACa,eAAe,CAACP,QAAQ,CAAC,CAAA;QAE3D,IAAIM,WAAW,IAAI,IAAI,CAACZ,UAAU,CAACU,OAAO,CAACI,SAAS,EAAE;EAClD,QAAA,IAAI,CAAC,IAAI,CAACd,UAAU,CAACU,OAAO,CAACI,SAAS,CAACF,WAAW,CAAC5E,IAAI,CAAC,EAAE;EACtD4E,UAAAA,WAAW,GAAG,IAAI,CAAA;EACtB,SAAA;EACJ,OAAA;QAEA,IAAI,CAACR,WAAW,GAAGQ,WAAW,CAAA;EAC9B,MAAA,OAAO,IAAI,CAACR,WAAW,IAAI,IAAI,CAAA;EACnC,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;MAAA,KAED,EAAA,SAAA,UAAA,CAAkBC,YAA0B,EAAW;EAAA,MAAA,IAAA,qBAAA,CAAA;EACnD,MAAA,IACI,CAAC,IAAI,CAACD,WAAW,IACjBC,YAAY,CAACU,KAAK,KAAKC,SAAS,IAChCX,YAAY,CAACY,KAAK,KAAKD,SAAS,EAClC;EACE,QAAA,OAAO,KAAK,CAAA;EAChB,OAAA;QAEA,IAAI,CAACE,OAAO,EAAE,CAAA;QAEd,IAAMC,MAAM,GAAGZ,MAAM,CAACF,YAAY,CAACG,MAAM,CAAC,CAACW,MAAM,EAAE,CAAA;QACnD,IAAMC,IAAI,GAAGD,MAAM,GAAGA,MAAM,CAACC,IAAI,GAAG,CAAC,CAAA;QACrC,IAAMC,GAAG,GAAGF,MAAM,GAAGA,MAAM,CAACE,GAAG,GAAG,CAAC,CAAA;EAEnC,MAAA,IAAMrF,IAAI,GAAG,IAAI,CAACoE,WAAW,CAACpE,IAAI,CAAA;EAElC,MAAA,IAAI,CAACsF,WAAW,GAAG,IAAIC,WAAW,CAC9BvF,IAAI,CAACxB,IAAI,EACT6F,YAAY,CAACU,KAAK,GAAGK,IAAI,EACzBf,YAAY,CAACY,KAAK,GAAGI,GAAG,EACxB,IAAI,CAACrB,UAAU,CAACwB,OAAO,EAAA,CAAA,qBAAA,GACvB,IAAI,CAACxB,UAAU,CAACU,OAAO,CAACe,UAAU,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAI,IAAI,CAC7C,CAAA;QAED,IAAI,CAACtB,UAAU,GAAG,IAAI,CAAA;QACtB,IAAI,CAACE,YAAY,GAAGA,YAAY,CAAA;QAChC,IAAI,CAACD,WAAW,CAACE,QAAQ,CAACoB,QAAQ,CAAC,eAAe,CAAC,CAAA;EACnD,MAAA,OAAO,IAAI,CAAA;EACf,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,WAAA;MAAA,KAED,EAAA,SAAA,SAAA,CAAiBrB,YAA0B,EAAW;QAClD,IACI,CAAC,IAAI,CAACD,WAAW,IACjB,CAAC,IAAI,CAACkB,WAAW,IACjBjB,YAAY,CAACU,KAAK,KAAKC,SAAS,IAChCX,YAAY,CAACY,KAAK,KAAKD,SAAS,EAClC;EACE,QAAA,OAAO,KAAK,CAAA;EAChB,OAAA;EAEA,MAAA,IAAI,CAACM,WAAW,CAACK,IAAI,CAACtB,YAAY,CAACU,KAAK,EAAEV,YAAY,CAACY,KAAK,CAAC,CAAA;QAC7D,IAAI,CAACZ,YAAY,GAAGA,YAAY,CAAA;EAEhC,MAAA,IAAMuB,IAAI,GAAG,IAAI,CAACC,eAAe,CAC7BxB,YAAY,CAACU,KAAK,EAClBV,YAAY,CAACY,KAAK,CACrB,CAAA;QAED,IAAIW,IAAI,IAAI,IAAI,CAACE,aAAa,CAACF,IAAI,CAAC,EAAE;EAClC,QAAA,IAAI,CAACA,IAAI,CAAC5F,IAAI,CAAC+F,QAAQ,EAAE,EAAE;YACvB,IAAI,CAACC,mBAAmB,EAAE,CAAA;EAC9B,SAAA;EAEA,QAAA,IAAI,IAAI,CAAC/B,WAAW,KAAK2B,IAAI,EAAE;YAC3B,IAAI,CAAC3B,WAAW,GAAG2B,IAAI,CAAA;;EAEvB;EACA,UAAA,IAAI,IAAI,CAACK,mBAAmB,CAACL,IAAI,CAAC,EAAE;EAChC,YAAA,IAAI,CAACM,oBAAoB,CAACN,IAAI,CAAC5F,IAAI,CAAC,CAAA;EACxC,WAAC,MAAM;cACH,IAAI,CAACgG,mBAAmB,EAAE,CAAA;EAC9B,WAAA;YAEA,IAAI,CAACG,cAAc,EAAE,CAAA;EACzB,SAAA;EACJ,OAAC,MAAM;UACH,IAAI,CAACC,cAAc,EAAE,CAAA;UACrB,IAAI,CAACJ,mBAAmB,EAAE,CAAA;UAC1B,IAAI,CAAC/B,WAAW,GAAG2B,IAAI,CAAA;EAC3B,OAAA;QAEA,IAAI,CAACA,IAAI,EAAE;EACP,QAAA,IAAI,IAAI,CAAC5B,UAAU,CAACU,OAAO,CAAC2B,UAAU,EAAE;EACpC,UAAA,IAAI,CAACrC,UAAU,CAACU,OAAO,CAAC2B,UAAU,CAC9B,IAAI,CAACjC,WAAW,CAACpE,IAAI,EACrBqE,YAAY,CAACiC,aAAa,CAC7B,CAAA;EACL,SAAA;EACJ,OAAA;EAEA,MAAA,OAAO,IAAI,CAAA;EACf,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,WAAA;MAAA,KAED,EAAA,SAAA,SAAA,CAAiBjC,YAA0B,EAAW;EAClD,MAAA,IAAI,CAACkC,QAAQ,CAAClC,YAAY,CAAC,CAAA;QAC3B,IAAI,CAACmC,KAAK,EAAE,CAAA;QACZ,IAAI,CAACC,WAAW,EAAE,CAAA;QAClB,IAAI,CAACL,cAAc,EAAE,CAAA;QACrB,IAAI,CAACM,cAAc,EAAE,CAAA;EAErB,MAAA,IAAMtC,WAAW,GAAG,IAAI,CAACA,WAAW,CAAA;QAEpC,IAAI,IAAI,CAACA,WAAW,EAAE;UAClB,IAAI,CAACA,WAAW,CAACE,QAAQ,CAACqC,WAAW,CAAC,eAAe,CAAC,CAAA;UACtD,IAAI,CAACvC,WAAW,GAAG,IAAI,CAAA;EAC3B,OAAA;QAEA,IAAI,CAACD,UAAU,GAAG,KAAK,CAAA;QACvB,IAAI,CAACE,YAAY,GAAG,IAAI,CAAA;EAExB,MAAA,IAAI,CAAC,IAAI,CAACJ,WAAW,IAAIG,WAAW,EAAE;EAClC,QAAA,IAAI,IAAI,CAACJ,UAAU,CAACU,OAAO,CAACkC,UAAU,EAAE;EACpC,UAAA,IAAI,CAAC5C,UAAU,CAACU,OAAO,CAACkC,UAAU,CAC9BxC,WAAW,CAACpE,IAAI,EAChBqE,YAAY,CAACiC,aAAa,CAC7B,CAAA;EACL,SAAA;EACJ,OAAA;EAEA,MAAA,OAAO,KAAK,CAAA;EAChB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,SAAA;EAAA,IAAA,KAAA,EAED,SAAuB,OAAA,GAAA;QACnB,IAAI,CAACI,cAAc,EAAE,CAAA;QAErB,IAAI,IAAI,CAACtC,WAAW,EAAE;UAClB,IAAI,CAACyC,gBAAgB,EAAE,CAAA;EAEvB,QAAA,IAAI,CAACzC,WAAW,GAAG,IAAI,CAACJ,UAAU,CAAC8C,sBAAsB,CACrD,IAAI,CAAC1C,WAAW,CAACpE,IAAI,CACxB,CAAA;UAED,IAAI,IAAI,CAACmE,UAAU,EAAE;YACjB,IAAI,CAACC,WAAW,CAACE,QAAQ,CAACoB,QAAQ,CAAC,eAAe,CAAC,CAAA;EACvD,SAAA;EACJ,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,kBAAA;EAAA,IAAA,KAAA,EAED,SAAiC,gBAAA,GAAA;EAC7B,MAAA,IAAI,CAAC,IAAI,CAACtB,WAAW,EAAE;UACnB,IAAI,CAACF,QAAQ,GAAG,EAAE,CAAA;EACtB,OAAC,MAAM;UACH,IAAM6C,iBAAiB,GAAG,IAAIC,iBAAiB,CAC3C,IAAI,CAAChD,UAAU,CAACpE,IAAI,EACpB,IAAI,CAACwE,WAAW,CAACpE,IAAI,EACrB,IAAI,CAACiH,iBAAiB,EAAE,CAACC,MAAM,CAClC,CAAA;EACD,QAAA,IAAI,CAAChD,QAAQ,GAAG6C,iBAAiB,CAACI,QAAQ,EAAE,CAAA;EAChD,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,oBAAA;MAAA,KAED,EAAA,SAAA,kBAAA,CAA2B7C,QAA6B,EAAW;EAC/D,MAAA,OAAO,CAACA,QAAQ,CAAC8C,EAAE,CAAC,uBAAuB,CAAC,CAAA;EAChD,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,eAAA;MAAA,KAED,EAAA,SAAA,aAAA,CAAsBxB,IAAa,EAAW;QAC1C,IAAI,CAAC,IAAI,CAAC5B,UAAU,CAACU,OAAO,CAAC2C,WAAW,EAAE;EACtC,QAAA,OAAO,IAAI,CAAA;EACf,OAAA;EAEA,MAAA,IAAI,CAAC,IAAI,CAACjD,WAAW,EAAE;EACnB,QAAA,OAAO,KAAK,CAAA;EAChB,OAAA;EAEA,MAAA,IAAMkD,YAAY,GAAGhJ,eAAe,CAACsH,IAAI,CAACrH,QAAQ,CAAC,CAAA;EAEnD,MAAA,OAAO,IAAI,CAACyF,UAAU,CAACU,OAAO,CAAC2C,WAAW,CACtC,IAAI,CAACjD,WAAW,CAACpE,IAAI,EACrB4F,IAAI,CAAC5F,IAAI,EACTsH,YAAY,CACf,CAAA;EACL,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,gBAAA;EAAA,IAAA,KAAA,EAED,SAA+B,cAAA,GAAA;QAC3B,IAAI,CAACpD,QAAQ,GAAG,EAAE,CAAA;EACtB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,OAAA;EAAA,IAAA,KAAA,EAED,SAAsB,KAAA,GAAA;QAClB,IAAI,IAAI,CAACoB,WAAW,EAAE;EAClB,QAAA,IAAI,CAACA,WAAW,CAACiC,MAAM,EAAE,CAAA;UACzB,IAAI,CAACjC,WAAW,GAAG,IAAI,CAAA;EAC3B,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,gBAAA;EAAA,IAAA,KAAA,EAED,SAA+B,cAAA,GAAA;QAC3B,IAAI,IAAI,CAACkC,aAAa,EAAE;EACpB,QAAA,IAAI,CAACA,aAAa,CAACD,MAAM,EAAE,CAAA;EAC/B,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,aAAA;EAAA,IAAA,KAAA,EAED,SAA4B,WAAA,GAAA;QACxB,IAAI,CAACtD,WAAW,GAAG,IAAI,CAAA;EAC3B,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,iBAAA;EAAA,IAAA,KAAA,EAED,SAAwBwD,eAAAA,CAAAA,CAAS,EAAEC,CAAS,EAAkB;EAC1D,MAAA,IAAMC,UAAU,GAAG,IAAI,CAACV,iBAAiB,EAAE,CAAA;QAE3C,IACIQ,CAAC,GAAGE,UAAU,CAACvC,IAAI,IACnBsC,CAAC,GAAGC,UAAU,CAACtC,GAAG,IAClBoC,CAAC,GAAGE,UAAU,CAACC,KAAK,IACpBF,CAAC,GAAGC,UAAU,CAACT,MAAM,EACvB;EACE,QAAA,OAAO,IAAI,CAAA;EACf,OAAA;QAEA,IAAIW,GAAG,GAAG,CAAC,CAAA;EACX,MAAA,IAAIC,IAAI,GAAG,IAAI,CAAC5D,QAAQ,CAAC/D,MAAM,CAAA;QAC/B,OAAO0H,GAAG,GAAGC,IAAI,EAAE;EACf,QAAA,IAAMC,GAAG,GAAIF,GAAG,GAAGC,IAAI,IAAK,CAAC,CAAA;EAC7B,QAAA,IAAMlC,IAAI,GAAG,IAAI,CAAC1B,QAAQ,CAAC6D,GAAG,CAAC,CAAA;EAE/B,QAAA,IAAIL,CAAC,GAAG9B,IAAI,CAACP,GAAG,EAAE;EACdyC,UAAAA,IAAI,GAAGC,GAAG,CAAA;EACd,SAAC,MAAM,IAAIL,CAAC,GAAG9B,IAAI,CAACsB,MAAM,EAAE;YACxBW,GAAG,GAAGE,GAAG,GAAG,CAAC,CAAA;EACjB,SAAC,MAAM;EACH,UAAA,OAAOnC,IAAI,CAAA;EACf,SAAA;EACJ,OAAA;EAEA,MAAA,OAAO,IAAI,CAAA;EACf,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,qBAAA;MAAA,KAED,EAAA,SAAA,mBAAA,CAA4BA,IAAa,EAAW;EAChD,MAAA,IAAM5F,IAAI,GAAG4F,IAAI,CAAC5F,IAAI,CAAA;EAEtB,MAAA,OACIA,IAAI,CAAC+F,QAAQ,EAAE,IACf,CAAC/F,IAAI,CAAC+C,OAAO,IACb6C,IAAI,CAACrH,QAAQ,KAAKX,QAAQ,CAACO,MAAM,CAAA;EAEzC,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,gBAAA;EAAA,IAAA,KAAA,EAED,SAA+B,cAAA,GAAA;EAC3B,MAAA,IAAI,CAAC,IAAI,CAAC8F,WAAW,EAAE;EACnB,QAAA,OAAA;EACJ,OAAA;;EAEA;QACA,IAAI,CAACmC,cAAc,EAAE,CAAA;;EAErB;EACA,MAAA,IAAMxB,WAAW,GAAG,IAAI,CAACZ,UAAU,CAAC8C,sBAAsB,CACtD,IAAI,CAAC7C,WAAW,CAACjE,IAAI,CACxB,CAAA;EACD,MAAA,IAAI,CAACwH,aAAa,GAAG5C,WAAW,CAACoD,WAAW,CAAC,IAAI,CAAC/D,WAAW,CAAC1F,QAAQ,CAAC,CAAA;EAC3E,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,sBAAA;MAAA,KAED,EAAA,SAAA,oBAAA,CAA6B0J,MAAY,EAAQ;EAAA,MAAA,IAAA,KAAA,GAAA,IAAA,CAAA;EAC7C,MAAA,IAAMC,UAAU,GAAG,SAAbA,UAAU,GAAe;EAC3B,QAAA,KAAI,CAAClE,UAAU,CAACmE,SAAS,CACrBF,MAAM,EACN,KAAI,CAACjE,UAAU,CAACU,OAAO,CAAC0D,KAAK,EAC7B,YAAM;YACF,KAAI,CAAClD,OAAO,EAAE,CAAA;YACd,KAAI,CAACiB,cAAc,EAAE,CAAA;EACzB,SAAC,CACJ,CAAA;SACJ,CAAA;QAED,IAAI,CAACH,mBAAmB,EAAE,CAAA;QAE1B,IAAMqC,eAAe,GAAG,IAAI,CAACrE,UAAU,CAACU,OAAO,CAAC2D,eAAe,CAAA;QAE/D,IAAIA,eAAe,KAAK,KAAK,EAAE;UAC3B,IAAI,CAACC,eAAe,GAAGC,MAAM,CAACC,UAAU,CACpCN,UAAU,EACVG,eAAe,CAClB,CAAA;EACL,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,qBAAA;EAAA,IAAA,KAAA,EAED,SAAoC,mBAAA,GAAA;QAChC,IAAI,IAAI,CAACC,eAAe,EAAE;EACtBG,QAAAA,YAAY,CAAC,IAAI,CAACH,eAAe,CAAC,CAAA;UAClC,IAAI,CAACA,eAAe,GAAG,IAAI,CAAA;EAC/B,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;MAAA,KAED,EAAA,SAAA,QAAA,CAAiBjE,YAA0B,EAAQ;EAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;QAC/C,IACI,IAAI,CAACD,WAAW,IAChB,IAAI,CAACH,WAAW,IAChB,IAAI,CAACA,WAAW,CAAC1F,QAAQ,KAAKX,QAAQ,CAACS,IAAI,IAC3C,IAAI,CAACyH,aAAa,CAAC,IAAI,CAAC7B,WAAW,CAAC,EACtC;EACE,QAAA,IAAMhD,SAAS,GAAG,IAAI,CAACmD,WAAW,CAACpE,IAAI,CAAA;EACvC,QAAA,IAAMkB,UAAU,GAAG,IAAI,CAAC+C,WAAW,CAACjE,IAAI,CAAA;EACxC,QAAA,IAAMzB,QAAQ,GAAG,IAAI,CAAC0F,WAAW,CAAC1F,QAAQ,CAAA;EAC1C,QAAA,IAAMmK,cAAc,GAAGzH,SAAS,CAACxB,MAAM,CAAA;EAEvC,QAAA,IAAIlB,QAAQ,KAAKX,QAAQ,CAACO,MAAM,EAAE;EAC9B,UAAA,IAAI,CAAC8F,WAAW,CAACjE,IAAI,CAAC+C,OAAO,GAAG,IAAI,CAAA;EACxC,SAAA;EAEA,QAAA,IAAM4F,MAAM,GAAG,SAATA,MAAM,GAAe;EACvB,UAAA,MAAI,CAAC3E,UAAU,CAACpE,IAAI,CAACgJ,QAAQ,CAAC3H,SAAS,EAAEC,UAAU,EAAE3C,QAAQ,CAAC,CAAA;EAC9D,UAAA,MAAI,CAACyF,UAAU,CAACwB,OAAO,CAACqD,KAAK,EAAE,CAAA;EAC/B,UAAA,MAAI,CAAC7E,UAAU,CAAC8E,gBAAgB,CAAC,IAAI,CAAC,CAAA;WACzC,CAAA;UAED,IAAMC,KAAK,GAAG,IAAI,CAAC/E,UAAU,CAACgF,aAAa,CAAC,WAAW,EAAE;EACrDC,UAAAA,SAAS,EAAE;EACPC,YAAAA,UAAU,EAAEjI,SAAS;EACrBkI,YAAAA,WAAW,EAAEjI,UAAU;EACvB3C,YAAAA,QAAQ,EAAED,eAAe,CAACC,QAAQ,CAAC;EACnC6K,YAAAA,eAAe,EAAEV,cAAc;EAC/BW,YAAAA,OAAO,EAAEV,MAAM;cACfW,cAAc,EAAEjF,YAAY,CAACiC,aAAAA;EACjC,WAAA;EACJ,SAAC,CAAC,CAAA;EAEF,QAAA,IAAI,CAACyC,KAAK,CAACQ,kBAAkB,EAAE,EAAE;EAC7BZ,UAAAA,MAAM,EAAE,CAAA;EACZ,SAAA;EACJ,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,mBAAA;EAAA,IAAA,KAAA,EAED,SAAwC,iBAAA,GAAA;EACpC;EACA;QACA,IAAMxD,MAAM,GAAG,IAAI,CAACnB,UAAU,CAACwB,OAAO,CAACL,MAAM,EAAE,CAAA;QAE/C,IAAI,CAACA,MAAM,EAAE;UACT,OAAO;EAAEC,UAAAA,IAAI,EAAE,CAAC;EAAEC,UAAAA,GAAG,EAAE,CAAC;EAAEuC,UAAAA,KAAK,EAAE,CAAC;EAAEV,UAAAA,MAAM,EAAE,CAAA;WAAG,CAAA;EACnD,OAAC,MAAM;EACH,QAAA,IAAMsC,EAAE,GAAG,IAAI,CAACxF,UAAU,CAACwB,OAAO,CAAA;EAClC,QAAA,IAAMiE,KAAK,GAAGD,EAAE,CAACC,KAAK,EAAE,IAAI,CAAC,CAAA;EAC7B,QAAA,IAAMC,MAAM,GAAGF,EAAE,CAACE,MAAM,EAAE,IAAI,CAAC,CAAA;UAC/B,IAAMtE,IAAI,GAAGD,MAAM,CAACC,IAAI,GAAG,IAAI,CAACpB,UAAU,CAAC2F,cAAc,EAAE,CAAA;UAE3D,OAAO;EACHvE,UAAAA,IAAI,EAAJA,IAAI;YACJC,GAAG,EAAEF,MAAM,CAACE,GAAG;YACfuC,KAAK,EAAExC,IAAI,GAAGqE,KAAK;EACnBvC,UAAAA,MAAM,EAAE/B,MAAM,CAACE,GAAG,GAAGqE,MAAM,GAAG,EAAA;WACjC,CAAA;EACL,OAAA;EACJ,KAAA;EAAC,GAAA,CAAA,CAAA,CAAA;EAAA,EAAA,OAAA,kBAAA,CAAA;EAAA,CAAA,EAAA,CAAA;EACJ,IAEcE,mBAAmB,gBAAA,YAAA;EAG9B,EAAA,SAAA,mBAAA,CAAYhK,IAAU,EAAE;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,mBAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA,CAAA;MACpB,IAAI,CAACA,IAAI,GAAGA,IAAI,CAAA;EACpB,GAAA;EAAC,EAAA,YAAA,CAAA,mBAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,SAAA;EAAA,IAAA,KAAA,EAED,SAA0B,OAAA,GAAA;EAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;QACtB,IAAIiK,WAAW,GAAG,IAAI,CAAA;QAEtB,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAI9J,IAAU,EAAE+J,QAAqB,EAAW;EAC9D,QAAA,IAAIC,iBAAiB,GACjB,CAAChK,IAAI,CAAC+C,OAAO,IAAI,CAAC/C,IAAI,CAACwF,OAAO,KAAKxF,IAAI,CAACW,WAAW,EAAE,CAAA;UAEzD,IAAI2D,QAAoC,GAAG,IAAI,CAAA;UAE/C,IAAItE,IAAI,CAACwF,OAAO,EAAE;EACdlB,UAAAA,QAAQ,GAAGC,MAAM,CAACvE,IAAI,CAACwF,OAAO,CAAC,CAAA;EAE/B,UAAA,IAAI,CAAClB,QAAQ,CAAC8C,EAAE,CAAC,UAAU,CAAC,EAAE;EAC1B,YAAA,OAAA;EACJ,WAAA;EAEA,UAAA,IAAIyC,WAAW,EAAE;EACb,YAAA,MAAI,CAACI,eAAe,CAACjK,IAAI,CAAC,CAAA;EAC1B6J,YAAAA,WAAW,GAAG,KAAK,CAAA;EACvB,WAAA;EAEA,UAAA,IAAI,CAAC7J,IAAI,CAACW,WAAW,EAAE,EAAE;cACrB,MAAI,CAACuJ,UAAU,CAAClK,IAAI,EAAE+J,QAAQ,EAAEzF,QAAQ,CAAC,CAAA;EAC7C,WAAC,MAAM,IAAItE,IAAI,CAAC+C,OAAO,EAAE;cACrB,IAAI,CAAC,MAAI,CAACoH,gBAAgB,CAACnK,IAAI,EAAEsE,QAAQ,CAAC,EAAE;EACxC0F,cAAAA,iBAAiB,GAAG,KAAK,CAAA;EAC7B,aAAA;EACJ,WAAC,MAAM;cACH,MAAI,CAACI,kBAAkB,CAACpK,IAAI,EAAE+J,QAAQ,EAAEzF,QAAQ,CAAC,CAAA;EACrD,WAAA;EACJ,SAAA;EAEA,QAAA,IAAI0F,iBAAiB,EAAE;EACnB,UAAA,IAAMK,cAAc,GAAGrK,IAAI,CAACR,QAAQ,CAACW,MAAM,CAAA;YAC3CH,IAAI,CAACR,QAAQ,CAAC8K,OAAO,CAAC,UAACC,CAAC,EAAEC,CAAC,EAAK;EAC5B,YAAA,IAAIA,CAAC,KAAKH,cAAc,GAAG,CAAC,EAAE;gBAC1BP,YAAY,CAAC9J,IAAI,CAACR,QAAQ,CAACgL,CAAC,CAAC,EAAE,IAAI,CAAC,CAAA;EACxC,aAAC,MAAM;EACHV,cAAAA,YAAY,CAAC9J,IAAI,CAACR,QAAQ,CAACgL,CAAC,CAAC,EAAExK,IAAI,CAACR,QAAQ,CAACgL,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;EACxD,aAAA;EACJ,WAAC,CAAC,CAAA;EAEF,UAAA,IAAIxK,IAAI,CAAC+C,OAAO,IAAIuB,QAAQ,EAAE;EAC1B,YAAA,MAAI,CAACmG,qBAAqB,CAACzK,IAAI,EAAE+J,QAAQ,CAAC,CAAA;EAC9C,WAAA;EACJ,SAAA;SACH,CAAA;EAEDD,MAAAA,YAAY,CAAC,IAAI,CAAClK,IAAI,EAAE,IAAI,CAAC,CAAA;EACjC,KAAA;EAAC,GAAA,CAAA,CAAA,CAAA;EAAA,EAAA,OAAA,mBAAA,CAAA;EAAA,CAAA,EAAA,CAAA;EA8BL,IAAaoH,iBAAiB,gBAAA,UAAA,oBAAA,EAAA;EAAA,EAAA,SAAA,CAAA,iBAAA,EAAA,oBAAA,CAAA,CAAA;EAAA,EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,iBAAA,CAAA,CAAA;EAM1B,EAAA,SAAA,iBAAA,CAAYpH,IAAU,EAAE8K,WAAiB,EAAEC,UAAkB,EAAE;EAAA,IAAA,IAAA,MAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,CAAA,CAAA;EAC3D,IAAA,MAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM/K,IAAI,CAAA,CAAA;EAAE,IAAA,eAAA,CAAA,sBAAA,CAAA,MAAA,CAAA,EAAA,aAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,MAAA,CAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,MAAA,CAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,MAAA,CAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,CAAA;MAEZ,MAAK8K,CAAAA,WAAW,GAAGA,WAAW,CAAA;MAC9B,MAAKC,CAAAA,UAAU,GAAGA,UAAU,CAAA;EAAC,IAAA,OAAA,MAAA,CAAA;EACjC,GAAA;EAAC,EAAA,YAAA,CAAA,iBAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,UAAA;EAAA,IAAA,KAAA,EAED,SAA6B,QAAA,GAAA;QACzB,IAAI,CAACC,SAAS,GAAG,EAAE,CAAA;QACnB,IAAI,CAACC,OAAO,GAAG,CAAC,CAAA;QAEhB,IAAI,CAAC9I,OAAO,EAAE,CAAA;EAEd,MAAA,OAAO,IAAI,CAAC8E,gBAAgB,CAAC,IAAI,CAAC+D,SAAS,CAAC,CAAA;EAChD,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,kBAAA;MAAA,KAED,EAAA,SAAA,gBAAA,CAA2BA,SAAoB,EAAa;QACxD,IAAIE,WAAW,GAAG,CAAC,CAAC,CAAA;QACpB,IAAIC,KAAK,GAAG,EAAE,CAAA;QACd,IAAM7G,QAAmB,GAAG,EAAE,CAAA;EAAC,MAAA,IAAA,SAAA,GAAA,0BAAA,CAER0G,SAAS,CAAA;EAAA,QAAA,KAAA,CAAA;EAAA,MAAA,IAAA;UAAhC,KAAkC,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;EAAA,UAAA,IAAvBrM,QAAQ,GAAA,KAAA,CAAA,KAAA,CAAA;YACf,IAAIA,QAAQ,CAAC8G,GAAG,KAAKyF,WAAW,IAAIC,KAAK,CAAC5K,MAAM,EAAE;cAC9C,IAAI4K,KAAK,CAAC5K,MAAM,EAAE;EACd,cAAA,IAAI,CAAC6K,wBAAwB,CACzB9G,QAAQ,EACR6G,KAAK,EACLD,WAAW,EACXvM,QAAQ,CAAC8G,GAAG,CACf,CAAA;EACL,aAAA;cAEAyF,WAAW,GAAGvM,QAAQ,CAAC8G,GAAG,CAAA;EAC1B0F,YAAAA,KAAK,GAAG,EAAE,CAAA;EACd,WAAA;EAEAA,UAAAA,KAAK,CAAC1K,IAAI,CAAC9B,QAAQ,CAAC,CAAA;EACxB,SAAA;EAAC,OAAA,CAAA,OAAA,GAAA,EAAA;EAAA,QAAA,SAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;EAAA,OAAA,SAAA;EAAA,QAAA,SAAA,CAAA,CAAA,EAAA,CAAA;EAAA,OAAA;EAED,MAAA,IAAI,CAACyM,wBAAwB,CACzB9G,QAAQ,EACR6G,KAAK,EACLD,WAAW,EACX,IAAI,CAACH,UAAU,CAClB,CAAA;EAED,MAAA,OAAOzG,QAAQ,CAAA;EACnB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,kBAAA;EAAA,IAAA,KAAA,EAED,SAA2BlE,gBAAAA,CAAAA,IAAU,EAAEsE,QAAgB,EAAW;EAC9D,MAAA,IAAItE,IAAI,KAAK,IAAI,CAAC0K,WAAW,EAAE;EAC3B;EACA;EACA,QAAA,OAAO,KAAK,CAAA;EAChB,OAAA;;EAEA;QACA,IAAI1K,IAAI,CAACR,QAAQ,CAAC,CAAC,CAAC,KAAK,IAAI,CAACkL,WAAW,EAAE;EACvC,QAAA,IAAI,CAACO,WAAW,CAACjL,IAAI,EAAEpC,QAAQ,CAACO,MAAM,EAAE,IAAI,CAAC+M,MAAM,CAAC5G,QAAQ,CAAC,CAAC,CAAA;EAClE,OAAA;;EAEA;EACA,MAAA,OAAO,IAAI,CAAA;EACf,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,oBAAA;EAAA,IAAA,KAAA,EAED,4BACItE,IAAU,EACV+J,QAAc,EACdzF,QAAgB,EACZ;EACJ,MAAA,IAAMe,GAAG,GAAG,IAAI,CAAC6F,MAAM,CAAC5G,QAAQ,CAAC,CAAA;EAEjC,MAAA,IAAItE,IAAI,KAAK,IAAI,CAAC0K,WAAW,EAAE;EAC3B;UACA,IAAI,CAACO,WAAW,CAACjL,IAAI,EAAEpC,QAAQ,CAACS,IAAI,EAAEgH,GAAG,CAAC,CAAA;EAC9C,OAAC,MAAM;UACH,IAAI,CAAC4F,WAAW,CAACjL,IAAI,EAAEpC,QAAQ,CAACO,MAAM,EAAEkH,GAAG,CAAC,CAAA;;EAE5C;EACA,QAAA,IAAI0E,QAAQ,KAAK,IAAI,CAACW,WAAW,EAAE;YAC/B,IAAI,CAACO,WAAW,CAACjL,IAAI,EAAEpC,QAAQ,CAACK,KAAK,EAAEoH,GAAG,CAAC,CAAA;EAC/C,SAAA;EACJ,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,iBAAA;MAAA,KAED,EAAA,SAAA,eAAA,CAA0BrF,IAAU,EAAQ;EACxC,MAAA,IAAIA,IAAI,KAAK,IAAI,CAAC0K,WAAW,EAAE;UAC3B,IAAI,CAACO,WAAW,CACZjL,IAAI,EACJpC,QAAQ,CAACG,MAAM,EACf,IAAI,CAACmN,MAAM,CAAC3G,MAAM,CAACvE,IAAI,CAACwF,OAAO,CAAC,CAAC,CACpC,CAAA;EACL,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,uBAAA;EAAA,IAAA,KAAA,EAED,SAAgCxF,qBAAAA,CAAAA,IAAU,EAAE+J,QAAc,EAAQ;QAC9D,IAAI/J,IAAI,KAAK,IAAI,CAAC0K,WAAW,IAAIX,QAAQ,KAAK,IAAI,CAACW,WAAW,EAAE;EAC5D;EACA,QAAA,IAAI,CAACO,WAAW,CAACjL,IAAI,EAAEpC,QAAQ,CAACS,IAAI,EAAE,IAAI,CAACwM,OAAO,CAAC,CAAA;EACvD,OAAC,MAAM;EACH,QAAA,IAAI,CAACI,WAAW,CAACjL,IAAI,EAAEpC,QAAQ,CAACK,KAAK,EAAE,IAAI,CAAC4M,OAAO,CAAC,CAAA;EACxD,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;EAAA,IAAA,KAAA,EAED,oBAAqB7K,IAAU,EAAE+J,QAAc,EAAEzF,QAAgB,EAAQ;EACrE,MAAA,IAAMe,GAAG,GAAG,IAAI,CAAC6F,MAAM,CAAC5G,QAAQ,CAAC,CAAA;EAEjC,MAAA,IAAItE,IAAI,KAAK,IAAI,CAAC0K,WAAW,EAAE;EAC3B;UACA,IAAI,CAACO,WAAW,CAACjL,IAAI,EAAEpC,QAAQ,CAACS,IAAI,EAAEgH,GAAG,CAAC,CAAA;EAC9C,OAAC,MAAM;UACH,IAAI,CAAC4F,WAAW,CAACjL,IAAI,EAAEpC,QAAQ,CAACO,MAAM,EAAEkH,GAAG,CAAC,CAAA;EAChD,OAAA;QAEA,IAAI0E,QAAQ,KAAK,IAAI,CAACW,WAAW,IAAI1K,IAAI,KAAK,IAAI,CAAC0K,WAAW,EAAE;EAC5D;UACA,IAAI,CAACO,WAAW,CAACjL,IAAI,EAAEpC,QAAQ,CAACS,IAAI,EAAEgH,GAAG,CAAC,CAAA;EAC9C,OAAC,MAAM;UACH,IAAI,CAAC4F,WAAW,CAACjL,IAAI,EAAEpC,QAAQ,CAACK,KAAK,EAAEoH,GAAG,CAAC,CAAA;EAC/C,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;MAAA,KAED,EAAA,SAAA,MAAA,CAAef,QAA6B,EAAU;EAClD,MAAA,IAAMa,MAAM,GAAGb,QAAQ,CAACa,MAAM,EAAE,CAAA;EAEhC,MAAA,OAAOA,MAAM,GAAGA,MAAM,CAACE,GAAG,GAAG,CAAC,CAAA;EAClC,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,aAAA;EAAA,IAAA,KAAA,EAED,qBAAoBrF,IAAU,EAAEzB,QAAgB,EAAE8G,GAAW,EAAQ;EACjE,MAAA,IAAMO,IAAI,GAAG;EACTP,QAAAA,GAAG,EAAHA,GAAG;EACH6B,QAAAA,MAAM,EAAE,CAAC;EACTlH,QAAAA,IAAI,EAAJA,IAAI;EACJzB,QAAAA,QAAQ,EAARA,QAAAA;SACH,CAAA;EAED,MAAA,IAAI,CAACqM,SAAS,CAACvK,IAAI,CAACuF,IAAI,CAAC,CAAA;QACzB,IAAI,CAACiF,OAAO,GAAGxF,GAAG,CAAA;EACtB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,0BAAA;MAAA,KAED,EAAA,SAAA,wBAAA,CACInB,QAAmB,EACnBiH,gBAA2B,EAC3B9F,GAAW,EACX6B,MAAc,EACV;EACJ;QACA,IAAMkE,aAAa,GAAGC,IAAI,CAACC,GAAG,CAACH,gBAAgB,CAAChL,MAAM,EAAE,CAAC,CAAC,CAAA;EAE1D,MAAA,IAAMoL,UAAU,GAAGF,IAAI,CAACG,KAAK,CAAC,CAACtE,MAAM,GAAG7B,GAAG,IAAI+F,aAAa,CAAC,CAAA;QAC7D,IAAIK,OAAO,GAAGpG,GAAG,CAAA;QAEjB,IAAImF,CAAC,GAAG,CAAC,CAAA;QACT,OAAOA,CAAC,GAAGY,aAAa,EAAE;EACtB,QAAA,IAAM7M,QAAQ,GAAG4M,gBAAgB,CAACX,CAAC,CAAC,CAAA;UAEpCtG,QAAQ,CAAC7D,IAAI,CAAC;EACVgF,UAAAA,GAAG,EAAEoG,OAAO;YACZvE,MAAM,EAAEuE,OAAO,GAAGF,UAAU;YAC5BvL,IAAI,EAAEzB,QAAQ,CAACyB,IAAI;YACnBzB,QAAQ,EAAEA,QAAQ,CAACA,QAAAA;EACvB,SAAC,CAAC,CAAA;EAEFkN,QAAAA,OAAO,IAAIF,UAAU,CAAA;EACrBf,QAAAA,CAAC,IAAI,CAAC,CAAA;EACV,OAAA;EACJ,KAAA;EAAC,GAAA,CAAA,CAAA,CAAA;EAAA,EAAA,OAAA,iBAAA,CAAA;EAAA,CAAA,CA5KkCZ,mBAAmB,CAAA,CAAA;EA6KzD,IAEKrE,WAAW,gBAAA,YAAA;IAKb,SACImG,WAAAA,CAAAA,QAAgB,EAChBC,OAAe,EACfC,OAAe,EACfC,KAAa,EACbpG,UAAmB,EACrB;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA,CAAA;MACE,IAAI,CAACkG,OAAO,GAAGA,OAAO,CAAA;MACtB,IAAI,CAACC,OAAO,GAAGA,OAAO,CAAA;MAEtB,IAAI,CAACtH,QAAQ,GAAGC,MAAM,CAAC,QAAQ,CAAC,CAACmB,QAAQ,CACrC,8BAA8B,CACjC,CAAA;EAED,IAAA,IAAID,UAAU,EAAE;EACZ,MAAA,IAAI,CAACnB,QAAQ,CAACwH,IAAI,CAACJ,QAAQ,CAAC,CAAA;EAChC,KAAC,MAAM;EACH,MAAA,IAAI,CAACpH,QAAQ,CAACyH,IAAI,CAACL,QAAQ,CAAC,CAAA;EAChC,KAAA;MAEA,IAAI,CAACpH,QAAQ,CAAC0H,GAAG,CAAC,UAAU,EAAE,UAAU,CAAC,CAAA;EACzCH,IAAAA,KAAK,CAACI,MAAM,CAAC,IAAI,CAAC3H,QAAQ,CAAC,CAAA;EAC/B,GAAA;EAAC,EAAA,YAAA,CAAA,WAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,MAAA;EAAA,IAAA,KAAA,EAED,SAAYS,IAAAA,CAAAA,KAAa,EAAEE,KAAa,EAAQ;EAC5C,MAAA,IAAI,CAACX,QAAQ,CAACa,MAAM,CAAC;EACjBC,QAAAA,IAAI,EAAEL,KAAK,GAAG,IAAI,CAAC4G,OAAO;EAC1BtG,QAAAA,GAAG,EAAEJ,KAAK,GAAG,IAAI,CAAC2G,OAAAA;EACtB,OAAC,CAAC,CAAA;EACN,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;EAAA,IAAA,KAAA,EAED,SAAsB,MAAA,GAAA;EAClB,MAAA,IAAI,CAACtH,QAAQ,CAACiD,MAAM,EAAE,CAAA;EAC1B,KAAA;EAAC,GAAA,CAAA,CAAA,CAAA;EAAA,EAAA,OAAA,WAAA,CAAA;EAAA,CAAA,EAAA;;ECprBE,IAAM2E,KAAK,GAAG,SAARA,KAAK,CAAIpK,CAAU,EAAA;IAAA,OAC5B,OAAOA,CAAC,KAAK,QAAQ,IAAIA,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;EAAA,CAAA,CAAA;EAEjC,IAAMqK,UAAU,GAAG,SAAbA,UAAU,CAAIvK,CAAU,EAAA;IAAA,OAAc,OAAOA,CAAC,KAAK,UAAU,CAAA;EAAA,CAAA,CAAA;EAEnE,IAAMwK,aAAa,GAAG,SAAhBA,aAAa,CAAItM,KAAc,EAAA;EAAA,EAAA,OACxCA,KAAK,GAAG,MAAM,GAAG,OAAO,CAAA;EAAA,CAAA;;ECNW,IAMlBuM,gBAAgB,gBAAA,YAAA;EAKjC,EAAA,SAAA,gBAAA,CAAYrI,UAAwB,EAAE;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,gBAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,mBAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,mBAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA,CAAA;MAClC,IAAI,CAACA,UAAU,GAAGA,UAAU,CAAA;EAE5B,IAAA,IAAI,CAACsI,iBAAiB,GAAG,IAAI,CAACC,mBAAmB,CAC7CvI,UAAU,CAACU,OAAO,CAAC8H,UAAU,IAAI,GAAG,CACvC,CAAA;EACD,IAAA,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACF,mBAAmB,CAC7CvI,UAAU,CAACU,OAAO,CAACgI,UAAU,IAAI,GAAG,CACvC,CAAA;EACL,GAAA;EAAC,EAAA,YAAA,CAAA,gBAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,QAAA;MAAA,KAED,EAAA,SAAA,MAAA,CAAcC,QAAqB,EAAQ;EACvC,MAAA,IAAIA,QAAQ,IAAIA,QAAQ,CAAClN,MAAM,EAAE;EAC7B,QAAA,IAAI,CAACmN,cAAc,CAACD,QAAQ,CAAC,CAAA;EACjC,OAAC,MAAM;UACH,IAAI,CAACE,cAAc,EAAE,CAAA;EACzB,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,gBAAA;EAAA,IAAA,KAAA,EAED,SAA8B,cAAA,GAAA;EAC1B,MAAA,IAAMvI,QAAQ,GAAG,IAAI,CAACN,UAAU,CAACwB,OAAO,CAAA;QACxClB,QAAQ,CAACuE,KAAK,EAAE,CAAA;EAEhB,MAAA,IAAI,CAACiE,iBAAiB,CAClBxI,QAAQ,CAAC,CAAC,CAAC,EACX,IAAI,CAACN,UAAU,CAACpE,IAAI,CAACJ,QAAQ,EAC7B,IAAI,EACJ,CAAC,CACJ,CAAA;EACL,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,gBAAA;MAAA,KAED,EAAA,SAAA,cAAA,CAAsBQ,IAAU,EAAQ;EACpC;EACA,MAAA,IAAM+M,WAAW,GAAGxI,MAAM,CAACvE,IAAI,CAACwF,OAAO,CAAC,CAAA;;EAExC;EACA,MAAA,IAAMwH,EAAE,GAAG,IAAI,CAACC,QAAQ,CAACjN,IAAI,EAAEA,IAAI,CAACkN,QAAQ,EAAE,CAAC,CAAA;EAC/C,MAAA,IAAI,CAACC,cAAc,CAACnN,IAAI,EAAEgN,EAAE,CAAC,CAAA;;EAE7B;EACAD,MAAAA,WAAW,CAAC/O,KAAK,CAACgP,EAAE,CAAC,CAAA;;EAErB;QACAD,WAAW,CAACxF,MAAM,EAAE,CAAA;;EAEpB;QACA,IAAIvH,IAAI,CAACR,QAAQ,EAAE;EACf,QAAA,IAAI,CAACsN,iBAAiB,CAClBE,EAAE,EACFhN,IAAI,CAACR,QAAQ,EACb,KAAK,EACLQ,IAAI,CAACkN,QAAQ,EAAE,GAAG,CAAC,CACtB,CAAA;EACL,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,mBAAA;MAAA,KAED,EAAA,SAAA,iBAAA,CACI1H,OAAgB,EAChBhG,QAAgB,EAChB4N,UAAmB,EACnBtM,KAAa,EACT;EACJ,MAAA,IAAMuM,EAAE,GAAG,IAAI,CAACC,QAAQ,CAACF,UAAU,CAAC,CAAA;EACpC5H,MAAAA,OAAO,CAAC+H,WAAW,CAACF,EAAE,CAAC,CAAA;EAAC,MAAA,IAAA,SAAA,GAAA,0BAAA,CAEJ7N,QAAQ,CAAA;EAAA,QAAA,KAAA,CAAA;EAAA,MAAA,IAAA;UAA5B,KAA8B,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;EAAA,UAAA,IAAnBuB,KAAK,GAAA,KAAA,CAAA,KAAA,CAAA;YACZ,IAAMiM,EAAE,GAAG,IAAI,CAACC,QAAQ,CAAClM,KAAK,EAAED,KAAK,CAAC,CAAA;EACtCuM,UAAAA,EAAE,CAACE,WAAW,CAACP,EAAE,CAAC,CAAA;EAElB,UAAA,IAAI,CAACG,cAAc,CAACpM,KAAK,EAAEiM,EAAE,CAAC,CAAA;EAE9B,UAAA,IAAIjM,KAAK,CAACJ,WAAW,EAAE,EAAE;EACrB,YAAA,IAAI,CAACmM,iBAAiB,CAACE,EAAE,EAAEjM,KAAK,CAACvB,QAAQ,EAAE,KAAK,EAAEsB,KAAK,GAAG,CAAC,CAAC,CAAA;EAChE,WAAA;EACJ,SAAA;EAAC,OAAA,CAAA,OAAA,GAAA,EAAA;EAAA,QAAA,SAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;EAAA,OAAA,SAAA;EAAA,QAAA,SAAA,CAAA,CAAA,EAAA,CAAA;EAAA,OAAA;EACL,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,gBAAA;EAAA,IAAA,KAAA,EAED,SAAuBd,cAAAA,CAAAA,IAAU,EAAEgN,EAAe,EAAQ;QACtDhN,IAAI,CAACwF,OAAO,GAAGwH,EAAE,CAAA;QACjBzI,MAAM,CAACyI,EAAE,CAAC,CAACjO,IAAI,CAAC,MAAM,EAAEiB,IAAI,CAAC,CAAA;EACjC,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;MAAA,KAED,EAAA,SAAA,QAAA,CAAiBoN,UAAmB,EAAoB;EACpD,MAAA,IAAII,WAAW,CAAA;EACf,MAAA,IAAIC,IAAI,CAAA;QAER,IAAI,CAACL,UAAU,EAAE;EACbI,QAAAA,WAAW,GAAG,EAAE,CAAA;EAChBC,QAAAA,IAAI,GAAG,OAAO,CAAA;EAClB,OAAC,MAAM;EACHD,QAAAA,WAAW,GAAG,aAAa,CAAA;EAC3BC,QAAAA,IAAI,GAAG,MAAM,CAAA;EAEb,QAAA,IAAI,IAAI,CAACzJ,UAAU,CAACU,OAAO,CAACgJ,GAAG,EAAE;EAC7BF,UAAAA,WAAW,IAAI,aAAa,CAAA;EAChC,SAAA;EACJ,OAAA;EAEA,MAAA,IAAI,IAAI,CAACxJ,UAAU,CAACU,OAAO,CAACiJ,WAAW,EAAE;EACrCH,QAAAA,WAAW,IAAI,aAAa,CAAA;EAChC,OAAA;EAEA,MAAA,IAAMH,EAAE,GAAGO,QAAQ,CAACC,aAAa,CAAC,IAAI,CAAC,CAAA;EACvCR,MAAAA,EAAE,CAACS,SAAS,GAAoBN,gBAAAA,CAAAA,MAAAA,CAAAA,WAAW,CAAE,CAAA;EAE7CH,MAAAA,EAAE,CAACU,YAAY,CAAC,MAAM,EAAEN,IAAI,CAAC,CAAA;EAE7B,MAAA,OAAOJ,EAAE,CAAA;EACb,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;EAAA,IAAA,KAAA,EAED,SAAiBrN,QAAAA,CAAAA,IAAU,EAAEc,KAAa,EAAiB;EACvD,MAAA,IAAMkN,UAAU,GAAGC,OAAO,CACtB,IAAI,CAACjK,UAAU,CAACkK,iBAAiB,CAACC,cAAc,CAACnO,IAAI,CAAC,CACzD,CAAA;EAED,MAAA,IAAMoO,cAAc,GAChBpO,IAAI,CAAC+F,QAAQ,EAAE,IACd/F,IAAI,CAACX,aAAa,IAAI,IAAI,CAAC2E,UAAU,CAACU,OAAO,CAAC2J,eAAgB,CAAA;QAEnE,IAAMrB,EAAE,GAAGoB,cAAc,GACnB,IAAI,CAACE,cAAc,CAACtO,IAAI,EAAEc,KAAK,EAAEkN,UAAU,CAAC,GAC5C,IAAI,CAACO,YAAY,CAACvO,IAAI,EAAEc,KAAK,EAAEkN,UAAU,CAAC,CAAA;EAEhD,MAAA,IAAI,IAAI,CAAChK,UAAU,CAACU,OAAO,CAAC8J,UAAU,EAAE;EACpC,QAAA,IAAI,CAACxK,UAAU,CAACU,OAAO,CAAC8J,UAAU,CAACxO,IAAI,EAAEuE,MAAM,CAACyI,EAAE,CAAC,EAAEgB,UAAU,CAAC,CAAA;EACpE,OAAA;EAEA,MAAA,OAAOhB,EAAE,CAAA;EACb,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,gBAAA;EAAA,IAAA,KAAA,EAED,wBACIhN,IAAU,EACVc,KAAa,EACbkN,UAAmB,EACN;EACb,MAAA,IAAMS,aAAa,GAAG,IAAI,CAACC,gBAAgB,CAAC1O,IAAI,CAAC,CAAA;QACjD,IAAM2O,aAAa,GAAG,IAAI,CAACC,gBAAgB,CAAC5O,IAAI,EAAEgO,UAAU,CAAC,CAAA;EAE7D,MAAA,IAAMa,WAAW,GAAG7O,IAAI,CAAC+C,OAAO,GAC1B,IAAI,CAACuJ,iBAAiB,GACtB,IAAI,CAACG,iBAAiB,CAAA;;EAE5B;EACA,MAAA,IAAMO,EAAE,GAAGY,QAAQ,CAACC,aAAa,CAAC,IAAI,CAAC,CAAA;EACvCb,MAAAA,EAAE,CAACc,SAAS,GAAoBa,gBAAAA,CAAAA,MAAAA,CAAAA,aAAa,CAAE,CAAA;EAC/C3B,MAAAA,EAAE,CAACe,YAAY,CAAC,MAAM,EAAE,cAAc,CAAC,CAAA;;EAEvC;EACA,MAAA,IAAMe,GAAG,GAAGlB,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC,CAAA;QACzCiB,GAAG,CAAChB,SAAS,GAAG,8BAA8B,CAAA;EAC9CgB,MAAAA,GAAG,CAACf,YAAY,CAAC,MAAM,EAAE,cAAc,CAAC,CAAA;EAExCf,MAAAA,EAAE,CAACO,WAAW,CAACuB,GAAG,CAAC,CAAA;;EAEnB;EACA,MAAA,IAAMC,UAAU,GAAGnB,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC,CAAA;QAC9CkB,UAAU,CAACjB,SAAS,GAAGW,aAAa,CAAA;QAEpCM,UAAU,CAACxB,WAAW,CAACsB,WAAW,CAACG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAA;EAEnDD,MAAAA,UAAU,CAAChB,YAAY,CAAC,MAAM,EAAE,cAAc,CAAC,CAAA;EAC/CgB,MAAAA,UAAU,CAAChB,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC,CAAA;EAE9C,MAAA,IAAI,IAAI,CAAC/J,UAAU,CAACU,OAAO,CAACuK,UAAU,EAAE;EACpCH,QAAAA,GAAG,CAACvB,WAAW,CAACwB,UAAU,CAAC,CAAA;EAC/B,OAAA;;EAEA;QACAD,GAAG,CAACvB,WAAW,CACX,IAAI,CAAC2B,eAAe,CAChBlP,IAAI,CAACxB,IAAI,EACTsC,KAAK,EACLkN,UAAU,EACVhO,IAAI,CAAC+C,OAAO,EACZ,IAAI,CACP,CACJ,CAAA;QAED,IAAI,CAAC,IAAI,CAACiB,UAAU,CAACU,OAAO,CAACuK,UAAU,EAAE;EACrCH,QAAAA,GAAG,CAACvB,WAAW,CAACwB,UAAU,CAAC,CAAA;EAC/B,OAAA;EAEA,MAAA,OAAO/B,EAAE,CAAA;EACb,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,cAAA;EAAA,IAAA,KAAA,EAED,sBACIhN,IAAU,EACVc,KAAa,EACbkN,UAAmB,EACN;EACb,MAAA,IAAMmB,SAAS,GAAG,CAAC,eAAe,CAAC,CAAA;EAEnC,MAAA,IAAInB,UAAU,EAAE;EACZmB,QAAAA,SAAS,CAAC9O,IAAI,CAAC,iBAAiB,CAAC,CAAA;EACrC,OAAA;EAEA,MAAA,IAAMmN,WAAW,GAAG2B,SAAS,CAACC,IAAI,CAAC,GAAG,CAAC,CAAA;;EAEvC;EACA,MAAA,IAAMpC,EAAE,GAAGY,QAAQ,CAACC,aAAa,CAAC,IAAI,CAAC,CAAA;QACvCb,EAAE,CAACc,SAAS,GAAGN,WAAW,CAAA;EAC1BR,MAAAA,EAAE,CAACe,YAAY,CAAC,MAAM,EAAE,cAAc,CAAC,CAAA;;EAEvC;EACA,MAAA,IAAMe,GAAG,GAAGlB,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC,CAAA;QACzCiB,GAAG,CAAChB,SAAS,GAAG,8BAA8B,CAAA;EAC9CgB,MAAAA,GAAG,CAACf,YAAY,CAAC,MAAM,EAAE,cAAc,CAAC,CAAA;EAExCf,MAAAA,EAAE,CAACO,WAAW,CAACuB,GAAG,CAAC,CAAA;;EAEnB;QACAA,GAAG,CAACvB,WAAW,CACX,IAAI,CAAC2B,eAAe,CAChBlP,IAAI,CAACxB,IAAI,EACTsC,KAAK,EACLkN,UAAU,EACVhO,IAAI,CAAC+C,OAAO,EACZ,KAAK,CACR,CACJ,CAAA;EAED,MAAA,OAAOiK,EAAE,CAAA;EACb,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,iBAAA;MAAA,KAED,EAAA,SAAA,eAAA,CACItB,QAAgB,EAChB5K,KAAa,EACbkN,UAAmB,EACnBqB,MAAe,EACftJ,QAAiB,EACF;EACf,MAAA,IAAMuJ,SAAS,GAAG1B,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC,CAAA;QAEhD,IAAI0B,OAAO,GAAG,4BAA4B,CAAA;EAE1C,MAAA,IAAIxJ,QAAQ,EAAE;EACVwJ,QAAAA,OAAO,IAAI,sBAAsB,CAAA;EACrC,OAAA;EAEAA,MAAAA,OAAO,IACH,uBAAA,CAAA,MAAA,CAAA,IAAI,CAACvL,UAAU,CAACU,OAAO,CAACuK,UAAU,GAAG,MAAM,GAAG,OAAO,CACvD,CAAA;QAEFK,SAAS,CAACxB,SAAS,GAAGyB,OAAO,CAAA;EAE7BD,MAAAA,SAAS,CAACvB,YAAY,CAAC,MAAM,EAAE,UAAU,CAAC,CAAA;EAC1CuB,MAAAA,SAAS,CAACvB,YAAY,CAAC,YAAY,EAAA,EAAA,CAAA,MAAA,CAAKjN,KAAK,CAAG,CAAA,CAAA;QAEhDwO,SAAS,CAACvB,YAAY,CAAC,eAAe,EAAE3B,aAAa,CAAC4B,UAAU,CAAC,CAAC,CAAA;QAClEsB,SAAS,CAACvB,YAAY,CAAC,eAAe,EAAE3B,aAAa,CAACiD,MAAM,CAAC,CAAC,CAAA;EAE9D,MAAA,IAAIrB,UAAU,EAAE;UACZ,IAAMwB,QAAQ,GAAG,IAAI,CAACxL,UAAU,CAACU,OAAO,CAAC8K,QAAQ,CAAA;UAEjD,IAAIA,QAAQ,KAAKxK,SAAS,EAAE;EACxBsK,UAAAA,SAAS,CAACvB,YAAY,CAAC,UAAU,EAAA,EAAA,CAAA,MAAA,CAAKyB,QAAQ,CAAG,CAAA,CAAA;EACrD,SAAA;EACJ,OAAA;EAEA,MAAA,IAAI,IAAI,CAACxL,UAAU,CAACU,OAAO,CAACe,UAAU,EAAE;UACpC6J,SAAS,CAACG,WAAW,GAAG/D,QAAQ,CAAA;EACpC,OAAC,MAAM;UACH4D,SAAS,CAACI,SAAS,GAAGhE,QAAQ,CAAA;EAClC,OAAA;EAEA,MAAA,OAAO4D,SAAS,CAAA;EACpB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,kBAAA;MAAA,KAED,EAAA,SAAA,gBAAA,CAAyBtP,IAAU,EAAU;EACzC,MAAA,IAAMuP,OAAO,GAAG,CAAC,gBAAgB,EAAE,eAAe,CAAC,CAAA;EAEnD,MAAA,IAAI,CAACvP,IAAI,CAAC+C,OAAO,EAAE;EACfwM,QAAAA,OAAO,CAAClP,IAAI,CAAC,eAAe,CAAC,CAAA;EACjC,OAAA;EAEA,MAAA,IAAI,IAAI,CAAC2D,UAAU,CAACU,OAAO,CAACuK,UAAU,EAAE;EACpCM,QAAAA,OAAO,CAAClP,IAAI,CAAC,qBAAqB,CAAC,CAAA;EACvC,OAAC,MAAM;EACHkP,QAAAA,OAAO,CAAClP,IAAI,CAAC,sBAAsB,CAAC,CAAA;EACxC,OAAA;EAEA,MAAA,OAAOkP,OAAO,CAACH,IAAI,CAAC,GAAG,CAAC,CAAA;EAC5B,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,kBAAA;EAAA,IAAA,KAAA,EAED,SAAyBpP,gBAAAA,CAAAA,IAAU,EAAEgO,UAAmB,EAAU;EAC9D,MAAA,IAAMuB,OAAO,GAAG,CAAC,eAAe,CAAC,CAAA;EAEjC,MAAA,IAAI,CAACvP,IAAI,CAAC+C,OAAO,EAAE;EACfwM,QAAAA,OAAO,CAAClP,IAAI,CAAC,eAAe,CAAC,CAAA;EACjC,OAAA;EAEA,MAAA,IAAI2N,UAAU,EAAE;EACZuB,QAAAA,OAAO,CAAClP,IAAI,CAAC,iBAAiB,CAAC,CAAA;EACnC,OAAA;QAEA,IAAIL,IAAI,CAAC2P,UAAU,EAAE;EACjBJ,QAAAA,OAAO,CAAClP,IAAI,CAAC,gBAAgB,CAAC,CAAA;EAClC,OAAA;EAEA,MAAA,OAAOkP,OAAO,CAACH,IAAI,CAAC,GAAG,CAAC,CAAA;EAC5B,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,qBAAA;MAAA,KAED,EAAA,SAAA,mBAAA,CAA4BtP,KAAuB,EAAe;EAC9D,MAAA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;EAC3B;EACA,QAAA,IAAMgP,GAAG,GAAGlB,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC,CAAA;UACzCiB,GAAG,CAACY,SAAS,GAAG5P,KAAK,CAAA;EAErB,QAAA,OAAO8N,QAAQ,CAACgC,cAAc,CAACd,GAAG,CAACY,SAAS,CAAC,CAAA;EACjD,OAAC,MAAM;EACH,QAAA,OAAOnL,MAAM,CAACzE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;EAC3B,OAAA;EACJ,KAAA;EAAC,GAAA,CAAA,CAAA,CAAA;EAAA,EAAA,OAAA,gBAAA,CAAA;EAAA,CAAA,EAAA;;MC9TgB+P,UAAU,gBAAA,YAAA;EAG3B,EAAA,SAAA,UAAA,CAAY7L,UAAwB,EAAE;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA,CAAA;MAClC,IAAI,CAACA,UAAU,GAAGA,UAAU,CAAA;EAChC,GAAA;EAAC,EAAA,YAAA,CAAA,UAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,aAAA;EAAA,IAAA,KAAA,EAED,qBACI8L,OAA4C,EAC5CC,UAAuB,EACvBC,UAAwC,EACpC;EAAA,MAAA,IAAA,KAAA,GAAA,IAAA,CAAA;QACJ,IAAI,CAACF,OAAO,EAAE;EACV,QAAA,OAAA;EACJ,OAAA;EAEA,MAAA,IAAMG,GAAG,GAAG,IAAI,CAACC,aAAa,CAACH,UAAU,CAAC,CAAA;EAC1C,MAAA,IAAI,CAACI,eAAe,CAACF,GAAG,CAAC,CAAA;QACzB,IAAI,CAACG,aAAa,CAAC,IAAI,EAAEL,UAAU,EAAEE,GAAG,CAAC,CAAA;EAEzC,MAAA,IAAMI,WAAW,GAAG,SAAdA,WAAW,GAAe;EAC5B,QAAA,KAAI,CAACC,kBAAkB,CAACL,GAAG,CAAC,CAAA;UAC5B,KAAI,CAACG,aAAa,CAAC,KAAK,EAAEL,UAAU,EAAEE,GAAG,CAAC,CAAA;SAC7C,CAAA;EAED,MAAA,IAAMM,aAAa,GAAG,SAAhBA,aAAa,CAAIxR,IAAyB,EAAW;EACvDsR,QAAAA,WAAW,EAAE,CAAA;EACb,QAAA,KAAI,CAACrM,UAAU,CAACwM,QAAQ,CAAC,KAAI,CAACC,SAAS,CAAC1R,IAAI,CAAC,EAAEgR,UAAU,CAAC,CAAA;EAE1D,QAAA,IAAIC,UAAU,IAAI,OAAOA,UAAU,KAAK,UAAU,EAAE;EAChDA,UAAAA,UAAU,EAAE,CAAA;EAChB,SAAA;SACH,CAAA;EAED,MAAA,IAAMU,WAAW,GAAG,SAAdA,WAAW,CAAIC,KAAmB,EAAW;EAC/CN,QAAAA,WAAW,EAAE,CAAA;EAEb,QAAA,IAAI,KAAI,CAACrM,UAAU,CAACU,OAAO,CAACkM,YAAY,EAAE;YACtC,KAAI,CAAC5M,UAAU,CAACU,OAAO,CAACkM,YAAY,CAACD,KAAK,CAAC,CAAA;EAC/C,SAAA;SACH,CAAA;QAED,IAAI,CAACE,aAAa,CAACf,OAAO,EAAES,aAAa,EAAEG,WAAW,CAAC,CAAA;EAC3D,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,iBAAA;MAAA,KAED,EAAA,SAAA,eAAA,CAAwBT,GAAwB,EAAQ;EACpD,MAAA,IAAIA,GAAG,EAAE;EACLA,QAAAA,GAAG,CAACvK,QAAQ,CAAC,gBAAgB,CAAC,CAAA;EAClC,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,oBAAA;MAAA,KAED,EAAA,SAAA,kBAAA,CAA2BuK,GAAwB,EAAQ;EACvD,MAAA,IAAIA,GAAG,EAAE;EACLA,QAAAA,GAAG,CAACtJ,WAAW,CAAC,gBAAgB,CAAC,CAAA;EACrC,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,eAAA;MAAA,KAED,EAAA,SAAA,aAAA,CAAsBoJ,UAAuB,EAAuB;EAChE,MAAA,IAAIA,UAAU,EAAE;EACZ,QAAA,OAAOxL,MAAM,CAACwL,UAAU,CAACvK,OAAO,CAAC,CAAA;EACrC,OAAC,MAAM;EACH,QAAA,OAAO,IAAI,CAACxB,UAAU,CAACwB,OAAO,CAAA;EAClC,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,eAAA;EAAA,IAAA,KAAA,EAED,uBACIsL,SAAkB,EAClB9Q,IAAiB,EACjBiQ,GAAW,EACP;EACJ,MAAA,IAAI,IAAI,CAACjM,UAAU,CAACU,OAAO,CAACqM,SAAS,EAAE;EACnC,QAAA,IAAI,CAAC/M,UAAU,CAACU,OAAO,CAACqM,SAAS,CAACD,SAAS,EAAE9Q,IAAI,EAAEiQ,GAAG,CAAC,CAAA;EAC3D,OAAA;EAEA,MAAA,IAAI,CAACjM,UAAU,CAACgF,aAAa,CAAC,mBAAmB,EAAE;EAC/C8H,QAAAA,SAAS,EAATA,SAAS;EACT9Q,QAAAA,IAAI,EAAJA,IAAI;EACJiQ,QAAAA,GAAG,EAAHA,GAAAA;EACJ,OAAC,CAAC,CAAA;EACN,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,eAAA;EAAA,IAAA,KAAA,EAED,uBACIe,YAA0C,EAC1CT,aAA+C,EAC/CG,WAA2C,EACvC;EAAA,MAAA,IAAA,oBAAA,CAAA;EACJ,MAAA,IAAMZ,OAAO,GACT,OAAOkB,YAAY,KAAK,QAAQ,GAC1B;EAAEC,QAAAA,GAAG,EAAED,YAAAA;EAAa,OAAC,GACrBA,YAAY,CAAA;EAEtB,MAAA,IAAME,YAAiC,GAAAC,cAAA,CAAA;EACnCC,QAAAA,MAAM,EAAE,KAAK;EACbC,QAAAA,KAAK,EAAE,KAAK;EACZC,QAAAA,QAAQ,EAAE,MAAM;EAChBC,QAAAA,OAAO,EAAEhB,aAAa;EACtBiB,QAAAA,KAAK,EAAEd,WAAAA;EAAW,OAAA,EACfZ,OAAO,CACb,CAAA;EAEDoB,MAAAA,YAAY,CAACE,MAAM,GAAG,CAAA,CAAA,oBAAA,GAAAF,YAAY,CAACE,MAAM,MAAA,IAAA,IAAA,oBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAnB,oBAAqBK,CAAAA,WAAW,EAAE,KAAI,KAAK,CAAA;EAEjE,MAAA,KAAKlN,MAAM,CAACmN,IAAI,CAACR,YAAY,CAAC,CAAA;EAClC,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,WAAA;MAAA,KAED,EAAA,SAAA,SAAA,CAAkBnS,IAAyB,EAAc;QACrD,IAAQ4S,UAAU,GAAK,IAAI,CAAC3N,UAAU,CAACU,OAAO,CAAtCiN,UAAU,CAAA;EAElB,MAAA,IAAMC,aAAa,GAAG,SAAhBA,aAAa,GAAS;EACxB,QAAA,IAAI,OAAO7S,IAAI,KAAK,QAAQ,EAAE;EAC1B,UAAA,OAAO8S,IAAI,CAACC,KAAK,CAAC/S,IAAI,CAAC,CAAA;EAC3B,SAAC,MAAM;EACH,UAAA,OAAOA,IAAI,CAAA;EACf,SAAA;SACH,CAAA;QAED,IAAMgT,UAAU,GAAGH,aAAa,EAAE,CAAA;EAElC,MAAA,IAAID,UAAU,EAAE;UACZ,OAAOA,UAAU,CAACI,UAAU,CAAC,CAAA;EACjC,OAAC,MAAM;EACH,QAAA,OAAOA,UAAU,CAAA;EACrB,OAAA;EACJ,KAAA;EAAC,GAAA,CAAA,CAAA,CAAA;EAAA,EAAA,OAAA,UAAA,CAAA;EAAA,CAAA,EAAA;;MC7HgBC,UAAU,gBAAA,YAAA;EAQ3B,EAAA,SAAA,UAAA,CAAYhO,UAAwB,EAAE;EAAA,IAAA,IAAA,KAAA,GAAA,IAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA,CAAA;MAAA,eAiEd,CAAA,IAAA,EAAA,eAAA,EAAA,UAACiO,CAAe,EAAc;EAClD,MAAA,IAAI,CAAC,KAAI,CAACC,iBAAiB,EAAE,EAAE;EAC3B,QAAA,OAAO,IAAI,CAAA;EACf,OAAA;EAEA,MAAA,IAAMC,YAAY,GAAG,KAAI,CAACnO,UAAU,CAACoO,eAAe,EAAE,CAAA;QACtD,IAAI,CAACD,YAAY,EAAE;EACf,QAAA,OAAO,IAAI,CAAA;EACf,OAAA;EAEA,MAAA,IAAMtS,GAAG,GAAGoS,CAAC,CAACI,KAAK,CAAA;EAEnB,MAAA,QAAQxS,GAAG;UACP,KAAKmS,UAAU,CAACM,IAAI;EAChB,UAAA,OAAO,KAAI,CAACC,QAAQ,CAACJ,YAAY,CAAC,CAAA;UAEtC,KAAKH,UAAU,CAACQ,EAAE;EACd,UAAA,OAAO,KAAI,CAACC,MAAM,CAACN,YAAY,CAAC,CAAA;UAEpC,KAAKH,UAAU,CAACU,KAAK;EACjB,UAAA,OAAO,KAAI,CAACC,SAAS,CAACR,YAAY,CAAC,CAAA;UAEvC,KAAKH,UAAU,CAACY,IAAI;EAChB,UAAA,OAAO,KAAI,CAACC,QAAQ,CAACV,YAAY,CAAC,CAAA;EAEtC,QAAA;EACI,UAAA,OAAO,IAAI,CAAA;EAAC,OAAA;OAEvB,CAAA,CAAA;MA5FG,IAAI,CAACnO,UAAU,GAAGA,UAAU,CAAA;EAE5B,IAAA,IAAIA,UAAU,CAACU,OAAO,CAACoO,eAAe,EAAE;QACpCvO,MAAM,CAACqJ,QAAQ,CAAC,CAACmF,EAAE,CAAC,gBAAgB,EAAE,IAAI,CAACC,aAAa,CAAC,CAAA;EAC7D,KAAA;EACJ,GAAA;EAAC,EAAA,YAAA,CAAA,UAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,QAAA;EAAA,IAAA,KAAA,EAED,SAAsB,MAAA,GAAA;EAClBzO,MAAAA,MAAM,CAACqJ,QAAQ,CAAC,CAACqF,GAAG,CAAC,gBAAgB,CAAC,CAAA;EAC1C,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;MAAA,KAED,EAAA,SAAA,QAAA,CAAgBd,YAAkB,EAAW;QACzC,OAAO,IAAI,CAACe,UAAU,CAACf,YAAY,CAACjP,WAAW,EAAE,CAAC,CAAA;EACtD,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;MAAA,KAED,EAAA,SAAA,MAAA,CAAciP,YAAkB,EAAW;QACvC,OAAO,IAAI,CAACe,UAAU,CAACf,YAAY,CAACgB,eAAe,EAAE,CAAC,CAAA;EAC1D,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,WAAA;MAAA,KAED,EAAA,SAAA,SAAA,CAAiBhB,YAAkB,EAAW;EAC1C,MAAA,IAAI,CAACA,YAAY,CAACpM,QAAQ,EAAE,EAAE;EAC1B,QAAA,OAAO,IAAI,CAAA;EACf,OAAC,MAAM;EACH;UACA,IAAIoM,YAAY,CAACpP,OAAO,EAAE;EACtB;YACA,OAAO,IAAI,CAACmQ,UAAU,CAACf,YAAY,CAACjP,WAAW,EAAE,CAAC,CAAA;EACtD,SAAC,MAAM;EACH;EACA,UAAA,IAAI,CAACc,UAAU,CAACoP,QAAQ,CAACjB,YAAY,CAAC,CAAA;EACtC,UAAA,OAAO,KAAK,CAAA;EAChB,SAAA;EACJ,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;MAAA,KAED,EAAA,SAAA,QAAA,CAAgBA,YAAkB,EAAW;QACzC,IAAIA,YAAY,CAACpM,QAAQ,EAAE,IAAIoM,YAAY,CAACpP,OAAO,EAAE;EACjD;EACA,QAAA,IAAI,CAACiB,UAAU,CAACqP,SAAS,CAAClB,YAAY,CAAC,CAAA;EACvC,QAAA,OAAO,KAAK,CAAA;EAChB,OAAC,MAAM;EACH;UACA,OAAO,IAAI,CAACe,UAAU,CAACf,YAAY,CAAC7O,SAAS,EAAE,CAAC,CAAA;EACpD,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;MAAA,KAED,EAAA,SAAA,UAAA,CAAkBtD,IAAiB,EAAW;QAC1C,IAAI,CAACA,IAAI,EAAE;EACP,QAAA,OAAO,IAAI,CAAA;EACf,OAAC,MAAM;EACH,QAAA,IAAI,CAACgE,UAAU,CAACkP,UAAU,CAAClT,IAAI,CAAC,CAAA;UAEhC,IACI,CAAC,IAAI,CAACgE,UAAU,CAACsP,aAAa,CAACC,kBAAkB,CAC7ChP,MAAM,CAACvE,IAAI,CAACwF,OAAO,CAAC,CAACgO,IAAI,CAAC,iBAAiB,CAAC,CAC/C,EACH;EACE,UAAA,IAAI,CAACxP,UAAU,CAACyP,YAAY,CAACzT,IAAI,CAAC,CAAA;EACtC,SAAA;EAEA,QAAA,OAAO,KAAK,CAAA;EAChB,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,mBAAA;EAAA,IAAA,KAAA,EAgCD,SAAqC,iBAAA,GAAA;EACjC,MAAA,OACI,CAAC,IAAI,CAACgE,UAAU,CAACU,OAAO,CAACoO,eAAe,IAAI,KAAK,KACjD,IAAI,CAAC9O,UAAU,CAACkK,iBAAiB,CAACwF,aAAa,EAAE,CAAA;EAEzD,KAAA;EAAC,GAAA,CAAA,CAAA,CAAA;EAAA,EAAA,OAAA,UAAA,CAAA;EAAA,CAAA,EAAA,CAAA;EAAA,eA5GgB1B,CAAAA,UAAU,UACL,EAAE,CAAA,CAAA;EAAA,eADPA,CAAAA,UAAU,QAEP,EAAE,CAAA,CAAA;EAAA,eAFLA,CAAAA,UAAU,WAGJ,EAAE,CAAA,CAAA;EAAA,eAHRA,CAAAA,UAAU,UAIL,EAAE,CAAA;;ECP5B,IAAM2B,SAAQ,GAAG,SAAXA,QAAQ,CAAIC,WAAoB,EAAEC,UAAkB,EAAW;IACjE,IAAMC,UAAU,GAAG,SAAbA,UAAU,GAAA;EAAA,IAAA,OAAA,gBAAA,CAAA,MAAA,CAAkCD,UAAU,CAAA,CAAA;KAAE,CAAA;IAE9D,IAAME,aAAa,GAAG,SAAhBA,aAAa,CACfvK,EAAe,EACfwK,OAAe,EACgB;MAC/B,IAAMC,MAAM,GAAG1P,MAAM,CAACxF,IAAI,CAACyK,EAAE,EAAEwK,OAAO,CAAY,CAAA;EAElD,IAAA,IAAIC,MAAM,IAAIA,MAAM,YAAYC,YAAY,EAAE;EAC1C,MAAA,OAAOD,MAAM,CAAA;EACjB,KAAC,MAAM;EACH,MAAA,OAAO,IAAI,CAAA;EACf,KAAA;KACH,CAAA;IAED,IAAME,YAAY,GAAG,SAAfA,YAAY,CAAIlE,GAAW,EAAEvL,OAAgB,EAAa;MAC5D,IAAMsP,OAAO,GAAGF,UAAU,EAAE,CAAA;MAAC,IAEZ7D,SAAAA,GAAAA,0BAAAA,CAAAA,GAAG,CAAC3N,GAAG,EAAE,CAAA;EAAA,MAAA,KAAA,CAAA;EAAA,IAAA,IAAA;QAA1B,KAA4B,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;EAAA,QAAA,IAAjBkH,EAAE,GAAA,KAAA,CAAA,KAAA,CAAA;EACT,QAAA,IAAM4K,cAAc,GAAGL,aAAa,CAACvK,EAAE,EAAEwK,OAAO,CAAC,CAAA;UAEjD,IAAI,CAACI,cAAc,EAAE;YACjB,IAAMC,iBAAiB,GAAGT,WAAkC,CAAA;YAC5D,IAAMK,MAAM,GAAG,IAAII,iBAAiB,CAAC7K,EAAE,EAAE9E,OAAO,CAAC,CAAA;YAEjD,IAAI,CAACH,MAAM,CAACxF,IAAI,CAACyK,EAAE,EAAEwK,OAAO,CAAC,EAAE;cAC3BzP,MAAM,CAACxF,IAAI,CAACyK,EAAE,EAAEwK,OAAO,EAAEC,MAAM,CAAC,CAAA;EACpC,WAAA;;EAEA;YACAA,MAAM,CAACK,IAAI,EAAE,CAAA;EACjB,SAAA;EACJ,OAAA;EAAC,KAAA,CAAA,OAAA,GAAA,EAAA;EAAA,MAAA,SAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;EAAA,KAAA,SAAA;EAAA,MAAA,SAAA,CAAA,CAAA,EAAA,CAAA;EAAA,KAAA;EAED,IAAA,OAAOrE,GAAG,CAAA;KACb,CAAA;EAED,EAAA,IAAMsE,aAAa,GAAG,SAAhBA,aAAa,CAAItE,GAAW,EAAW;MACzC,IAAM+D,OAAO,GAAGF,UAAU,EAAE,CAAA;MAAC,IAEZ7D,UAAAA,GAAAA,0BAAAA,CAAAA,GAAG,CAAC3N,GAAG,EAAE,CAAA;EAAA,MAAA,MAAA,CAAA;EAAA,IAAA,IAAA;QAA1B,KAA4B,UAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,MAAA,GAAA,UAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;EAAA,QAAA,IAAjBkH,EAAE,GAAA,MAAA,CAAA,KAAA,CAAA;EACT,QAAA,IAAMyK,MAAM,GAAGF,aAAa,CAACvK,EAAE,EAAEwK,OAAO,CAAC,CAAA;EAEzC,QAAA,IAAIC,MAAM,EAAE;YACRA,MAAM,CAACO,OAAO,EAAE,CAAA;EACpB,SAAA;EAEAjQ,QAAAA,MAAM,CAACkQ,UAAU,CAACjL,EAAE,EAAEwK,OAAO,CAAC,CAAA;EAClC,OAAA;EAAC,KAAA,CAAA,OAAA,GAAA,EAAA;EAAA,MAAA,UAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;EAAA,KAAA,SAAA;EAAA,MAAA,UAAA,CAAA,CAAA,EAAA,CAAA;EAAA,KAAA;KACJ,CAAA;IAED,IAAMU,YAAY,GAAG,SAAfA,YAAY,CACdzE,GAAW,EACX0E,YAAoB,EACpBC,IAAe,EACL;MACV,IAAI5T,MAAM,GAAG,IAAI,CAAA;MAAC,IAEDiP,UAAAA,GAAAA,0BAAAA,CAAAA,GAAG,CAAC3N,GAAG,EAAE,CAAA;EAAA,MAAA,MAAA,CAAA;EAAA,IAAA,IAAA;QAA1B,KAA4B,UAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,MAAA,GAAA,UAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;EAAA,QAAA,IAAjBkH,EAAE,GAAA,MAAA,CAAA,KAAA,CAAA;UACT,IAAMyK,MAAM,GAAG1P,MAAM,CAACxF,IAAI,CAACyK,EAAE,EAAEsK,UAAU,EAAE,CAAY,CAAA;EAEvD,QAAA,IAAIG,MAAM,IAAIA,MAAM,YAAYC,YAAY,EAAE;YAC1C,IAAMW,YAAY,GAAGZ,MAA+B,CAAA;EACpD,UAAA,IAAMa,cAAc,GAAGD,YAAY,CAACF,YAAY,CAAC,CAAA;EAEjD,UAAA,IAAIG,cAAc,IAAI,OAAOA,cAAc,KAAK,UAAU,EAAE;cACxD9T,MAAM,GAAG8T,cAAc,CAACC,KAAK,CAACd,MAAM,EAAEW,IAAI,CAAY,CAAA;EAC1D,WAAA;EACJ,SAAA;EACJ,OAAA;EAAC,KAAA,CAAA,OAAA,GAAA,EAAA;EAAA,MAAA,UAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;EAAA,KAAA,SAAA;EAAA,MAAA,UAAA,CAAA,CAAA,EAAA,CAAA;EAAA,KAAA;EAED,IAAA,OAAO5T,MAAM,CAAA;KAChB,CAAA;;EAED;IACCuD,MAAM,CAACyQ,EAAE,CAASnB,UAAU,CAAC,GAAG,UAE7BoB,SAAkB,EAEpB;MACE,IAAI,CAACA,SAAS,EAAE;EACZ,MAAA,OAAOd,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;EACnC,KAAC,MAAM,IAAI,OAAA,CAAOc,SAAS,CAAA,KAAK,QAAQ,EAAE;QACtC,IAAMvQ,OAAO,GAAGuQ,SAAoB,CAAA;EACpC,MAAA,OAAOd,YAAY,CAAC,IAAI,EAAEzP,OAAO,CAAC,CAAA;EACtC,KAAC,MAAM,IAAI,OAAOuQ,SAAS,KAAK,QAAQ,IAAIA,SAAS,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QAC9D,IAAMN,YAAY,GAAGM,SAAS,CAAA;QAE9B,IAAIN,YAAY,KAAK,SAAS,EAAE;UAC5B,OAAOJ,aAAa,CAAC,IAAI,CAAC,CAAA;EAC9B,OAAC,MAAM,IAAII,YAAY,KAAK,kBAAkB,EAAE;EAC5C,QAAA,OAAOf,WAAW,CAAA;EACtB,OAAC,MAAM;EAAA,QAAA,KAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAdRgB,IAAI,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;YAAJA,IAAI,CAAA,IAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,IAAA,CAAA,CAAA;EAAA,SAAA;EAeC,QAAA,OAAOF,YAAY,CAAC,IAAI,EAAEC,YAAY,EAAEC,IAAI,CAAC,CAAA;EACjD,OAAA;EACJ,KAAA;KACH,CAAA;EACL,CAAC,CAAA;EAAC,IAEmBV,YAAY,gBAAA,YAAA;IAa7B,SAAY1K,YAAAA,CAAAA,EAAe,EAAE9E,OAAsB,EAAE;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,KAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EACjD,IAAA,IAAI,CAACuL,GAAG,GAAG1L,MAAM,CAACiF,EAAE,CAAC,CAAA;;EAErB;EACA,IAAA,IAAM0L,QAAQ,GAAI,IAAI,CAACC,WAAW,CAAS,UAAU,CAAkB,CAAA;EACvE,IAAA,IAAI,CAACzQ,OAAO,GAAAyM,cAAA,CAAAA,cAAA,CAAA,EAAA,EAAQ+D,QAAQ,CAAA,EAAKxQ,OAAO,CAAE,CAAA;EAC9C,GAAA;EAAC,EAAA,YAAA,CAAA,YAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,SAAA;EAAA,IAAA,KAAA,EAED,SAAuB,OAAA,GAAA;QACnB,IAAI,CAAC0Q,MAAM,EAAE,CAAA;EACjB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,MAAA;EAAA,IAAA,KAAA,EAED,SAAoB,IAAA,GAAA;EAChB;EAAA,KAAA;EACH,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;EAAA,IAAA,KAAA,EAED,SAAsB,MAAA,GAAA;EAClB;EAAA,KAAA;EACH,GAAA,CAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,UAAA;EAAA,IAAA,KAAA,EA9BD,SAAuBxB,QAAAA,CAAAA,WAAoB,EAAEC,UAAkB,EAAQ;EACnEF,MAAAA,SAAQ,CAACC,WAAW,EAAEC,UAAU,CAAC,CAAA;EACrC,KAAA;EAAC,GAAA,CAAA,CAAA,CAAA;EAAA,EAAA,OAAA,YAAA,CAAA;EAAA,CAAA,EAAA,CAAA;EAAA,eAHgBK,CAAAA,YAAY,EAOQ,UAAA,EAAA,EAAE,CAAA;;ECrG3C,IAAMmB,6BAA6B,GAAG,SAAhCA,6BAA6B,CAAIpD,CAAa,EAAA;IAAA,OAAoB;MACpElN,KAAK,EAAEkN,CAAC,CAAClN,KAAK;MACdE,KAAK,EAAEgN,CAAC,CAAChN,KAAK;MACdT,MAAM,EAAEyN,CAAC,CAACzN,MAAqB;EAC/B8B,IAAAA,aAAa,EAAE2L,CAAAA;KAClB,CAAA;EAAA,CAAC,CAAA;EAEF,IAAMqD,wBAAwB,GAAG,SAA3BA,wBAAwB,CAC1BC,KAAY,EACZtD,CAAa,EAAA;IAAA,OACG;MAChBlN,KAAK,EAAEwQ,KAAK,CAACxQ,KAAK;MAClBE,KAAK,EAAEsQ,KAAK,CAACtQ,KAAK;MAClBT,MAAM,EAAE+Q,KAAK,CAAC/Q,MAAqB;EACnC8B,IAAAA,aAAa,EAAE2L,CAAAA;KAClB,CAAA;EAAA,CAAC,CAAA;EAAC,IAEYuD,WAAW,gBAAA,UAAA,aAAA,EAAA;EAAA,EAAA,SAAA,CAAA,WAAA,EAAA,aAAA,CAAA,CAAA;EAAA,EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,WAAA,CAAA,CAAA;EAAA,EAAA,SAAA,WAAA,GAAA;EAAA,IAAA,IAAA,KAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,CAAA,CAAA;EAAA,IAAA,KAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAA,IAAA,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;EAAA,MAAA,IAAA,CAAA,IAAA,CAAA,GAAA,SAAA,CAAA,IAAA,CAAA,CAAA;EAAA,KAAA;EAAA,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,MAAA,EAAA,CAAA,IAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,gBAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,eAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,iBAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,iBAAA,EAAA,KAAA,CAAA,CAAA,CAAA;MAAA,eAoDF,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,WAAA,EAAA,UAACvD,CAAa,EAAW;EACzC;EACA,MAAA,IAAIA,CAAC,CAACwD,MAAM,KAAK,CAAC,EAAE;EAChB,QAAA,OAAA;EACJ,OAAA;QAEA,IAAMzU,MAAM,GAAG,KAAK0U,CAAAA,eAAe,CAACL,6BAA6B,CAACpD,CAAC,CAAC,CAAC,CAAA;EAErE,MAAA,IAAIjR,MAAM,IAAIiR,CAAC,CAAC0D,UAAU,EAAE;UACxB1D,CAAC,CAAC2D,cAAc,EAAE,CAAA;EACtB,OAAA;OACH,CAAA,CAAA;MAAA,eAsDmB,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,WAAA,EAAA,UAAC3D,CAAa,EAAW;QACzC,KAAK4D,CAAAA,eAAe,CAAC5D,CAAC,EAAEoD,6BAA6B,CAACpD,CAAC,CAAC,CAAC,CAAA;OAC5D,CAAA,CAAA;MAAA,eAkCiB,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,SAAA,EAAA,UAACA,CAAa,EAAW;EACvC,MAAA,KAAA,CAAK6D,aAAa,CAACT,6BAA6B,CAACpD,CAAC,CAAC,CAAC,CAAA;OACvD,CAAA,CAAA;MAAA,eAgCoB,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,YAAA,EAAA,UAACA,CAAa,EAAW;QAC1C,IAAI,CAACA,CAAC,EAAE;EACJ,QAAA,OAAA;EACJ,OAAA;EAEA,MAAA,IAAIA,CAAC,CAAC8D,OAAO,CAAC5V,MAAM,GAAG,CAAC,EAAE;EACtB,QAAA,OAAA;EACJ,OAAA;EAEA,MAAA,IAAMoV,KAAK,GAAGtD,CAAC,CAAC+D,cAAc,CAAC,CAAC,CAAC,CAAA;QAEjC,KAAKN,CAAAA,eAAe,CAACJ,wBAAwB,CAACC,KAAK,EAAEtD,CAAC,CAAC,CAAC,CAAA;OAC3D,CAAA,CAAA;MAAA,eAEmB,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,WAAA,EAAA,UAACA,CAAa,EAAW;QACzC,IAAI,CAACA,CAAC,EAAE;EACJ,QAAA,OAAA;EACJ,OAAA;EAEA,MAAA,IAAIA,CAAC,CAAC8D,OAAO,CAAC5V,MAAM,GAAG,CAAC,EAAE;EACtB,QAAA,OAAA;EACJ,OAAA;EAEA,MAAA,IAAMoV,KAAK,GAAGtD,CAAC,CAAC+D,cAAc,CAAC,CAAC,CAAC,CAAA;QAEjC,KAAKH,CAAAA,eAAe,CAAC5D,CAAC,EAAEqD,wBAAwB,CAACC,KAAK,EAAEtD,CAAC,CAAC,CAAC,CAAA;OAC9D,CAAA,CAAA;MAAA,eAEkB,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,UAAA,EAAA,UAACA,CAAa,EAAW;QACxC,IAAI,CAACA,CAAC,EAAE;EACJ,QAAA,OAAA;EACJ,OAAA;EAEA,MAAA,IAAIA,CAAC,CAAC8D,OAAO,CAAC5V,MAAM,GAAG,CAAC,EAAE;EACtB,QAAA,OAAA;EACJ,OAAA;EAEA,MAAA,IAAMoV,KAAK,GAAGtD,CAAC,CAAC+D,cAAc,CAAC,CAAC,CAAC,CAAA;QAEjC,KAAKF,CAAAA,aAAa,CAACR,wBAAwB,CAACC,KAAK,EAAEtD,CAAC,CAAC,CAAC,CAAA;OACzD,CAAA,CAAA;EAAA,IAAA,OAAA,KAAA,CAAA;EAAA,GAAA;EAAA,EAAA,YAAA,CAAA,WAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,MAAA;EAAA,IAAA,KAAA,EA7ND,SAAoB,IAAA,GAAA;QAChB,IAAMzM,OAAO,GAAG,IAAI,CAACyK,GAAG,CAAC3N,GAAG,CAAC,CAAC,CAAC,CAAA;EAE/B,MAAA,IAAIkD,OAAO,EAAE;UACTA,OAAO,CAACyQ,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAACC,SAAS,EAAE;EAClDC,UAAAA,OAAO,EAAE,KAAA;EACb,SAAC,CAAC,CAAA;UACF3Q,OAAO,CAACyQ,gBAAgB,CAAC,YAAY,EAAE,IAAI,CAACG,UAAU,EAAE;EACpDD,UAAAA,OAAO,EAAE,KAAA;EACb,SAAC,CAAC,CAAA;EACN,OAAA;QAEA,IAAI,CAACE,cAAc,GAAG,KAAK,CAAA;QAC3B,IAAI,CAACC,eAAe,GAAG,IAAI,CAAA;QAC3B,IAAI,CAACC,eAAe,GAAG,KAAK,CAAA;QAC5B,IAAI,CAACC,aAAa,GAAG,IAAI,CAAA;EAC7B,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;EAAA,IAAA,KAAA,EAED,SAAsB,MAAA,GAAA;QAClB,IAAMhN,EAAE,GAAG,IAAI,CAACyG,GAAG,CAAC3N,GAAG,CAAC,CAAC,CAAC,CAAA;EAE1B,MAAA,IAAIkH,EAAE,EAAE;EACJ;UACCA,EAAE,CAASiN,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAACP,SAAS,EAAE;EACzDC,UAAAA,OAAO,EAAE,KAAA;EACb,SAAC,CAAC,CAAA;;EAEF;UACC3M,EAAE,CAASiN,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAACL,UAAU,EAAE;EAC3DD,UAAAA,OAAO,EAAE,KAAA;EACb,SAAC,CAAC,CAAA;EACN,OAAA;QAEA,IAAI,CAACO,6BAA6B,EAAE,CAAA;EACxC,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,iBAAA;MAAA,KAyBD,EAAA,SAAA,eAAA,CAAwBrS,YAA0B,EAAW;EACzD;QACA,IAAI,IAAI,CAACgS,cAAc,EAAE;EACrB,QAAA,IAAI,CAACP,aAAa,CAACzR,YAAY,CAAC,CAAA;EACpC,OAAA;QAEA,IAAI,CAACmS,aAAa,GAAGnS,YAAY,CAAA;EAEjC,MAAA,IAAI,CAAC,IAAI,CAACsS,YAAY,CAACtS,YAAY,CAAC,EAAE;EAClC,QAAA,OAAO,KAAK,CAAA;EAChB,OAAA;QAEA,IAAI,CAACuS,gBAAgB,EAAE,CAAA;EAEvB,MAAA,OAAO,IAAI,CAAA;EACf,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,kBAAA;EAAA,IAAA,KAAA,EAED,SAAiC,gBAAA,GAAA;QAC7BhJ,QAAQ,CAACqI,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAACY,SAAS,EAAE;EACnDV,QAAAA,OAAO,EAAE,KAAA;EACb,OAAC,CAAC,CAAA;QACFvI,QAAQ,CAACqI,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAACa,SAAS,EAAE;EACnDX,QAAAA,OAAO,EAAE,KAAA;EACb,OAAC,CAAC,CAAA;QACFvI,QAAQ,CAACqI,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAACc,OAAO,EAAE;EAAEZ,QAAAA,OAAO,EAAE,KAAA;EAAM,OAAC,CAAC,CAAA;QACtEvI,QAAQ,CAACqI,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAACe,QAAQ,EAAE;EACjDb,QAAAA,OAAO,EAAE,KAAA;EACb,OAAC,CAAC,CAAA;EAEF,MAAA,IAAMc,UAAU,GAAG,IAAI,CAACC,aAAa,EAAE,CAAA;EAEvC,MAAA,IAAID,UAAU,EAAE;EACZ,QAAA,IAAI,CAACE,oBAAoB,CAACF,UAAU,CAAC,CAAA;EACzC,OAAC,MAAM;UACH,IAAI,CAACV,eAAe,GAAG,IAAI,CAAA;EAC/B,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,sBAAA;MAAA,KAED,EAAA,SAAA,oBAAA,CAA6BU,UAAkB,EAAQ;EAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;QACnD,IAAI,IAAI,CAACX,eAAe,EAAE;EACtB7N,QAAAA,YAAY,CAAC,IAAI,CAAC6N,eAAe,CAAC,CAAA;EACtC,OAAA;EAEA,MAAA,IAAI,CAACA,eAAe,GAAG/N,MAAM,CAACC,UAAU,CAAC,YAAM;UAC3C,IAAI,MAAI,CAACgO,aAAa,EAAE;YACpB,MAAI,CAACD,eAAe,GAAG,IAAI,CAAA;EAC/B,SAAA;SACH,EAAEU,UAAU,CAAC,CAAA;QAEd,IAAI,CAACV,eAAe,GAAG,KAAK,CAAA;EAChC,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,iBAAA;EAAA,IAAA,KAAA,EAMD,SACItE,eAAAA,CAAAA,CAA0B,EAC1B5N,YAA0B,EACtB;QACJ,IAAI,IAAI,CAACgS,cAAc,EAAE;EACrB,QAAA,IAAI,CAACe,SAAS,CAAC/S,YAAY,CAAC,CAAA;UAE5B,IAAI4N,CAAC,CAAC0D,UAAU,EAAE;YACd1D,CAAC,CAAC2D,cAAc,EAAE,CAAA;EACtB,SAAA;EACA,QAAA,OAAA;EACJ,OAAA;EAEA,MAAA,IAAI,CAAC,IAAI,CAACW,eAAe,EAAE;EACvB,QAAA,OAAA;EACJ,OAAA;QAEA,IAAI,IAAI,CAACC,aAAa,EAAE;EACpB,QAAA,IAAI,CAACH,cAAc,GAAG,IAAI,CAACgB,UAAU,CAAC,IAAI,CAACb,aAAa,CAAC,KAAK,KAAK,CAAA;EACvE,OAAA;QAEA,IAAI,IAAI,CAACH,cAAc,EAAE;EACrB,QAAA,IAAI,CAACe,SAAS,CAAC/S,YAAY,CAAC,CAAA;UAE5B,IAAI4N,CAAC,CAAC0D,UAAU,EAAE;YACd1D,CAAC,CAAC2D,cAAc,EAAE,CAAA;EACtB,SAAA;EACJ,OAAC,MAAM;EACH,QAAA,IAAI,CAACE,aAAa,CAACzR,YAAY,CAAC,CAAA;EACpC,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,eAAA;MAAA,KAMD,EAAA,SAAA,aAAA,CAAsBA,YAA0B,EAAQ;QACpD,IAAI,CAACqS,6BAA6B,EAAE,CAAA;QACpC,IAAI,CAACH,eAAe,GAAG,KAAK,CAAA;QAC5B,IAAI,CAACC,aAAa,GAAG,IAAI,CAAA;QAEzB,IAAI,IAAI,CAACH,cAAc,EAAE;UACrB,IAAI,CAACA,cAAc,GAAG,KAAK,CAAA;EAC3B,QAAA,IAAI,CAACiB,SAAS,CAACjT,YAAY,CAAC,CAAA;EAChC,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,+BAAA;EAAA,IAAA,KAAA,EAED,SAAwC,6BAAA,GAAA;EACpC;QACCuJ,QAAQ,CAAS6I,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAACI,SAAS,EAAE;EAC/DV,QAAAA,OAAO,EAAE,KAAA;EACb,OAAC,CAAC,CAAA;EACF;QACCvI,QAAQ,CAAS6I,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAACK,SAAS,EAAE;EAC/DX,QAAAA,OAAO,EAAE,KAAA;EACb,OAAC,CAAC,CAAA;EACF;QACCvI,QAAQ,CAAS6I,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAACM,OAAO,EAAE;EAC3DZ,QAAAA,OAAO,EAAE,KAAA;EACb,OAAC,CAAC,CAAA;EACF;QACCvI,QAAQ,CAAS6I,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAACO,QAAQ,EAAE;EAC7Db,QAAAA,OAAO,EAAE,KAAA;EACb,OAAC,CAAC,CAAA;EACN,KAAA;EAAC,GAAA,CAAA,CAAA,CAAA;EAAA,EAAA,OAAA,WAAA,CAAA;EAAA,CAAA,CAzL6CjC,YAAY,CAAA;;ECvB/B,IASVqD,gBAAgB,gBAAA,YAAA;EAIjC,EAAA,SAAA,gBAAA,CAAYvT,UAAwB,EAAE;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,gBAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,uBAAA,EAAA,KAAA,CAAA,CAAA,CAAA;MAClC,IAAI,CAACA,UAAU,GAAGA,UAAU,CAAA;EAChC,GAAA;EAAC,EAAA,YAAA,CAAA,gBAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,WAAA;EAAA,IAAA,KAAA,EAED,SAAyB,SAAA,GAAA;QACrB,IAAMwT,KAAK,GAAG3F,IAAI,CAAC4F,SAAS,CAAC,IAAI,CAACC,QAAQ,EAAE,CAAC,CAAA;EAE7C,MAAA,IAAI,IAAI,CAAC1T,UAAU,CAACU,OAAO,CAACiT,qBAAqB,EAAE;UAC/C,IAAI,CAAC3T,UAAU,CAACU,OAAO,CAACiT,qBAAqB,CAACH,KAAK,CAAC,CAAA;EACxD,OAAC,MAAM,IAAI,IAAI,CAACI,oBAAoB,EAAE,EAAE;UACpCC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACC,UAAU,EAAE,EAAEP,KAAK,CAAC,CAAA;EAClD,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,qBAAA;EAAA,IAAA,KAAA,EAED,SAAgD,mBAAA,GAAA;EAC5C,MAAA,IAAMQ,QAAQ,GAAG,IAAI,CAACC,eAAe,EAAE,CAAA;EAEvC,MAAA,IAAID,QAAQ,EAAE;EACV,QAAA,OAAO,IAAI,CAACE,UAAU,CAACF,QAAQ,CAAC,CAAA;EACpC,OAAC,MAAM;EACH,QAAA,OAAO,IAAI,CAAA;EACf,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;EAAA,IAAA,KAAA,EAED,SAA8B,QAAA,GAAA;EAAA,MAAA,IAAA,KAAA,GAAA,IAAA,CAAA;EAC1B,MAAA,IAAMG,cAAc,GAAG,SAAjBA,cAAc,GAAmB;UACnC,IAAMC,SAAmB,GAAG,EAAE,CAAA;UAE9B,KAAI,CAACpU,UAAU,CAACpE,IAAI,CAACmC,OAAO,CAAC,UAAC/B,IAAU,EAAK;EACzC,UAAA,IAAIA,IAAI,CAAC+C,OAAO,IAAI/C,IAAI,CAACuC,EAAE,IAAIvC,IAAI,CAACW,WAAW,EAAE,EAAE;EAC/CyX,YAAAA,SAAS,CAAC/X,IAAI,CAACL,IAAI,CAACuC,EAAE,CAAC,CAAA;EAC3B,WAAA;EACA,UAAA,OAAO,IAAI,CAAA;EACf,SAAC,CAAC,CAAA;EAEF,QAAA,OAAO6V,SAAS,CAAA;SACnB,CAAA;EAED,MAAA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkB,GAAmB;UACvC,IAAMC,eAAyB,GAAG,EAAE,CAAA;UAEpC,KAAI,CAACtU,UAAU,CAACuU,gBAAgB,EAAE,CAACjO,OAAO,CAAC,UAACtK,IAAI,EAAK;EACjD,UAAA,IAAIA,IAAI,CAACuC,EAAE,IAAI,IAAI,EAAE;EACjB+V,YAAAA,eAAe,CAACjY,IAAI,CAACL,IAAI,CAACuC,EAAE,CAAC,CAAA;EACjC,WAAA;EACJ,SAAC,CAAC,CAAA;EAEF,QAAA,OAAO+V,eAAe,CAAA;SACzB,CAAA;QAED,OAAO;UACHE,UAAU,EAAEL,cAAc,EAAE;EAC5BM,QAAAA,aAAa,EAAEJ,kBAAkB,EAAA;SACpC,CAAA;EACL,KAAA;;EAEA;EACJ;EACA;EACA;EACA;EAJI,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,iBAAA;MAAA,KAMA,EAAA,SAAA,eAAA,CAAuBb,KAAiB,EAAW;QAC/C,IAAI,CAACA,KAAK,EAAE;EACR,QAAA,OAAO,KAAK,CAAA;EAChB,OAAC,MAAM;UACH,IAAIkB,gBAAgB,GAAG,KAAK,CAAA;UAE5B,IAAIlB,KAAK,CAACgB,UAAU,EAAE;YAClBE,gBAAgB,GAAG,IAAI,CAACC,gBAAgB,CAACnB,KAAK,CAACgB,UAAU,CAAC,CAAA;EAC9D,SAAA;UAEA,IAAIhB,KAAK,CAACiB,aAAa,EAAE;YACrB,IAAI,CAACG,cAAc,EAAE,CAAA;EACrB,UAAA,IAAI,CAACC,kBAAkB,CAACrB,KAAK,CAACiB,aAAa,CAAC,CAAA;EAChD,SAAA;EAEA,QAAA,OAAOC,gBAAgB,CAAA;EAC3B,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,yBAAA;EAAA,IAAA,KAAA,EAED,SACIlB,uBAAAA,CAAAA,KAAiB,EACjBsB,UAAsB,EAClB;EACJ,MAAA,IAAItB,KAAK,EAAE;EACP,QAAA,IAAI,CAACuB,yBAAyB,CAC1BvB,KAAK,CAACgB,UAAU,EAChBhB,KAAK,CAACiB,aAAa,EACnBK,UAAU,CACb,CAAA;EACL,OAAC,MAAM;EACHA,QAAAA,UAAU,EAAE,CAAA;EAChB,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,uBAAA;EAAA,IAAA,KAAA,EAED,SAA8C,qBAAA,GAAA;EAC1C,MAAA,IAAMtB,KAAK,GAAG,IAAI,CAACwB,mBAAmB,EAAE,CAAA;EAExC,MAAA,IAAIxB,KAAK,IAAIA,KAAK,CAACiB,aAAa,EAAE;EAC9B,QAAA,OAAOjB,KAAK,CAACiB,aAAa,CAAC,CAAC,CAAC,CAAA;EACjC,OAAC,MAAM;EACH,QAAA,OAAO,IAAI,CAAA;EACf,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;MAAA,KAED,EAAA,SAAA,UAAA,CAAmBT,QAAgB,EAAc;EAC7C,MAAA,IAAMR,KAAK,GAAG3F,IAAI,CAACC,KAAK,CAACkG,QAAQ,CAA4B,CAAA;;EAE7D;EACA,MAAA,IAAIR,KAAK,IAAIA,KAAK,CAACiB,aAAa,IAAIvM,KAAK,CAACsL,KAAK,CAACiB,aAAa,CAAC,EAAE;EAC5D;EACAjB,QAAAA,KAAK,CAACiB,aAAa,GAAG,CAACjB,KAAK,CAACiB,aAAa,CAAC,CAAA;EAC/C,OAAA;EAEA,MAAA,OAAOjB,KAAK,CAAA;EAChB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,iBAAA;EAAA,IAAA,KAAA,EAED,SAAyC,eAAA,GAAA;EACrC,MAAA,IAAI,IAAI,CAACxT,UAAU,CAACU,OAAO,CAACuU,qBAAqB,EAAE;EAC/C,QAAA,OAAO,IAAI,CAACjV,UAAU,CAACU,OAAO,CAACuU,qBAAqB,EAAE,CAAA;EAC1D,OAAC,MAAM,IAAI,IAAI,CAACrB,oBAAoB,EAAE,EAAE;UACpC,OAAOC,YAAY,CAACqB,OAAO,CAAC,IAAI,CAACnB,UAAU,EAAE,CAAC,CAAA;EAClD,OAAC,MAAM;EACH,QAAA,OAAO,IAAI,CAAA;EACf,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,kBAAA;MAAA,KAED,EAAA,SAAA,gBAAA,CAAyBoB,OAAiB,EAAW;QACjD,IAAIT,gBAAgB,GAAG,KAAK,CAAA;EAAC,MAAA,IAAA,SAAA,GAAA,0BAAA,CAERS,OAAO,CAAA;EAAA,QAAA,KAAA,CAAA;EAAA,MAAA,IAAA;UAA5B,KAA8B,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;EAAA,UAAA,IAAnB9W,MAAM,GAAA,KAAA,CAAA,KAAA,CAAA;YACb,IAAMrC,IAAI,GAAG,IAAI,CAACgE,UAAU,CAACoV,WAAW,CAAC/W,MAAM,CAAC,CAAA;EAEhD,UAAA,IAAIrC,IAAI,EAAE;EACN,YAAA,IAAI,CAACA,IAAI,CAACV,cAAc,EAAE;gBACtBU,IAAI,CAAC+C,OAAO,GAAG,IAAI,CAAA;EACvB,aAAC,MAAM;EACH2V,cAAAA,gBAAgB,GAAG,IAAI,CAAA;EAC3B,aAAA;EACJ,WAAA;EACJ,SAAA;EAAC,OAAA,CAAA,OAAA,GAAA,EAAA;EAAA,QAAA,SAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;EAAA,OAAA,SAAA;EAAA,QAAA,SAAA,CAAA,CAAA,EAAA,CAAA;EAAA,OAAA;EAED,MAAA,OAAOA,gBAAgB,CAAA;EAC3B,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,oBAAA;MAAA,KAED,EAAA,SAAA,kBAAA,CAA2BS,OAAiB,EAAW;QACnD,IAAIE,WAAW,GAAG,CAAC,CAAA;EAAC,MAAA,IAAA,UAAA,GAAA,0BAAA,CAECF,OAAO,CAAA;EAAA,QAAA,MAAA,CAAA;EAAA,MAAA,IAAA;UAA5B,KAA8B,UAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,MAAA,GAAA,UAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;EAAA,UAAA,IAAnB9W,MAAM,GAAA,MAAA,CAAA,KAAA,CAAA;YACb,IAAMrC,IAAI,GAAG,IAAI,CAACgE,UAAU,CAACoV,WAAW,CAAC/W,MAAM,CAAC,CAAA;EAEhD,UAAA,IAAIrC,IAAI,EAAE;EACNqZ,YAAAA,WAAW,IAAI,CAAC,CAAA;cAEhB,IAAI,CAACrV,UAAU,CAACkK,iBAAiB,CAACoL,cAAc,CAACtZ,IAAI,CAAC,CAAA;EAC1D,WAAA;EACJ,SAAA;EAAC,OAAA,CAAA,OAAA,GAAA,EAAA;EAAA,QAAA,UAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;EAAA,OAAA,SAAA;EAAA,QAAA,UAAA,CAAA,CAAA,EAAA,CAAA;EAAA,OAAA;QAED,OAAOqZ,WAAW,KAAK,CAAC,CAAA;EAC5B,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,gBAAA;EAAA,IAAA,KAAA,EAED,SAA+B,cAAA,GAAA;EAC3B,MAAA,IAAMnL,iBAAiB,GAAG,IAAI,CAAClK,UAAU,CAACkK,iBAAiB,CAAA;EAE3D,MAAA,IAAMqL,aAAa,GAAGrL,iBAAiB,CAACqK,gBAAgB,EAAE,CAAA;EAE1DgB,MAAAA,aAAa,CAACjP,OAAO,CAAC,UAACtK,IAAI,EAAK;EAC5BkO,QAAAA,iBAAiB,CAACsL,mBAAmB,CAACxZ,IAAI,CAAC,CAAA;EAC/C,OAAC,CAAC,CAAA;EACN,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,2BAAA;EAAA,IAAA,KAAA,EAED,mCACIyZ,YAAsB,EACtBF,aAAuB,EACvBT,UAAsB,EAClB;EAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;QACJ,IAAIY,YAAY,GAAG,CAAC,CAAA;QACpB,IAAIP,OAAO,GAAGM,YAAY,CAAA;EAE1B,MAAA,IAAMrB,SAAS,GAAG,SAAZA,SAAS,GAAe;UAC1B,IAAMuB,WAAW,GAAG,EAAE,CAAA;EAAC,QAAA,IAAA,UAAA,GAAA,0BAAA,CAEFR,OAAO,CAAA;EAAA,UAAA,MAAA,CAAA;EAAA,QAAA,IAAA;YAA5B,KAA8B,UAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,MAAA,GAAA,UAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;EAAA,YAAA,IAAnB9W,MAAM,GAAA,MAAA,CAAA,KAAA,CAAA;cACb,IAAMrC,IAAI,GAAG,MAAI,CAACgE,UAAU,CAACoV,WAAW,CAAC/W,MAAM,CAAC,CAAA;cAEhD,IAAI,CAACrC,IAAI,EAAE;EACP2Z,cAAAA,WAAW,CAACtZ,IAAI,CAACgC,MAAM,CAAC,CAAA;EAC5B,aAAC,MAAM;EACH,cAAA,IAAI,CAACrC,IAAI,CAAC2P,UAAU,EAAE;kBAClB,IAAI3P,IAAI,CAACV,cAAc,EAAE;oBACrBsa,eAAe,CAAC5Z,IAAI,CAAC,CAAA;EACzB,iBAAC,MAAM;oBACH,MAAI,CAACgE,UAAU,CAACmE,SAAS,CAACnI,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;EAChD,iBAAA;EACJ,eAAA;EACJ,aAAA;EACJ,WAAA;EAAC,SAAA,CAAA,OAAA,GAAA,EAAA;EAAA,UAAA,UAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;EAAA,SAAA,SAAA;EAAA,UAAA,UAAA,CAAA,CAAA,EAAA,CAAA;EAAA,SAAA;EAEDmZ,QAAAA,OAAO,GAAGQ,WAAW,CAAA;EAErB,QAAA,IAAI,MAAI,CAACd,kBAAkB,CAACU,aAAa,CAAC,EAAE;EACxC,UAAA,MAAI,CAACvV,UAAU,CAAC8E,gBAAgB,CAAC,IAAI,CAAC,CAAA;EAC1C,SAAA;UAEA,IAAI4Q,YAAY,KAAK,CAAC,EAAE;EACpBZ,UAAAA,UAAU,EAAE,CAAA;EAChB,SAAA;SACH,CAAA;EAED,MAAA,IAAMc,eAAe,GAAG,SAAlBA,eAAe,CAAI5Z,IAAU,EAAW;EAC1C0Z,QAAAA,YAAY,IAAI,CAAC,CAAA;UACjB,MAAI,CAAC1V,UAAU,CAACmE,SAAS,CAACnI,IAAI,EAAE,KAAK,EAAE,YAAM;EACzC0Z,UAAAA,YAAY,IAAI,CAAC,CAAA;EACjBtB,UAAAA,SAAS,EAAE,CAAA;EACf,SAAC,CAAC,CAAA;SACL,CAAA;EAEDA,MAAAA,SAAS,EAAE,CAAA;EACf,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;EAAA,IAAA,KAAA,EAED,SAA6B,UAAA,GAAA;QACzB,IAAI,OAAO,IAAI,CAACpU,UAAU,CAACU,OAAO,CAACmV,SAAS,KAAK,QAAQ,EAAE;EACvD,QAAA,OAAO,IAAI,CAAC7V,UAAU,CAACU,OAAO,CAACmV,SAAS,CAAA;EAC5C,OAAC,MAAM;EACH,QAAA,OAAO,MAAM,CAAA;EACjB,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,sBAAA;EAAA,IAAA,KAAA,EAED,SAAwC,oBAAA,GAAA;EACpC,MAAA,IAAMC,WAAW,GAAG,SAAdA,WAAW,GAAkB;EAC/B;UACA,IAAIjC,YAAY,IAAI,IAAI,EAAE;EACtB,UAAA,OAAO,KAAK,CAAA;EAChB,SAAC,MAAM;EACH;YACA,IAAI;cACA,IAAMhY,GAAG,GAAG,eAAe,CAAA;EAC3Bka,YAAAA,cAAc,CAACjC,OAAO,CAACjY,GAAG,EAAE,OAAO,CAAC,CAAA;EACpCka,YAAAA,cAAc,CAACC,UAAU,CAACna,GAAG,CAAC,CAAA;aACjC,CAAC,OAAO2R,KAAK,EAAE;EACZ,YAAA,OAAO,KAAK,CAAA;EAChB,WAAA;EAEA,UAAA,OAAO,IAAI,CAAA;EACf,SAAA;SACH,CAAA;EAED,MAAA,IAAI,IAAI,CAACyI,qBAAqB,IAAI,IAAI,EAAE;EACpC,QAAA,IAAI,CAACA,qBAAqB,GAAGH,WAAW,EAAE,CAAA;EAC9C,OAAA;QAEA,OAAO,IAAI,CAACG,qBAAqB,CAAA;EACrC,KAAA;EAAC,GAAA,CAAA,CAAA,CAAA;EAAA,EAAA,OAAA,gBAAA,CAAA;EAAA,CAAA,EAAA;;MCvQgBC,aAAa,gBAAA,YAAA;EAO9B,EAAA,SAAA,aAAA,CAAYlW,UAAwB,EAAE;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EAAA,KAAA,CAAA,CAAA,CAAA;MAClC,IAAI,CAACA,UAAU,GAAGA,UAAU,CAAA;EAC5B,IAAA,IAAI,CAAC8G,WAAW,GAAG,CAAC,CAAC,CAAA;MACrB,IAAI,CAACqP,aAAa,GAAG,KAAK,CAAA;EAC9B,GAAA;EAAC,EAAA,YAAA,CAAA,aAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,gBAAA;EAAA,IAAA,KAAA,EAED,SAA8B,cAAA,GAAA;QAC1B,IAAI,CAACC,UAAU,EAAE,CAAA;QACjB,IAAI,CAACC,sBAAsB,EAAE,CAAA;QAC7B,IAAI,CAACC,wBAAwB,EAAE,CAAA;EACnC,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,WAAA;MAAA,KAED,EAAA,SAAA,SAAA,CAAiBjV,GAAW,EAAQ;QAChC,IAAI,CAAC+U,UAAU,EAAE,CAAA;QAEjB,IAAI,IAAI,CAACG,aAAa,EAAE;UACpB,IAAI,CAACA,aAAa,CAAC,CAAC,CAAC,CAACC,SAAS,GAAGnV,GAAG,CAAA;EACzC,OAAC,MAAM;UACH,IAAMF,MAAM,GAAG,IAAI,CAACnB,UAAU,CAACiM,GAAG,CAAC9K,MAAM,EAAE,CAAA;UAC3C,IAAMsV,OAAO,GAAGtV,MAAM,GAAGA,MAAM,CAACE,GAAG,GAAG,CAAC,CAAA;UAEvCd,MAAM,CAACqJ,QAAQ,CAAC,CAAC4M,SAAS,CAACnV,GAAG,GAAGoV,OAAO,CAAC,CAAA;EAC7C,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,oBAAA;MAAA,KAED,EAAA,SAAA,kBAAA,CAA0BnW,QAAgB,EAAW;QACjD,IAAI,CAAC8V,UAAU,EAAE,CAAA;EAEjB,MAAA,IAAIM,aAAqB,CAAA;EACzB,MAAA,IAAIC,UAAkB,CAAA;EACtB,MAAA,IAAIC,UAAkB,CAAA;EACtB,MAAA,IAAIC,OAAe,CAAA;EAEnB,MAAA,IAAMC,QAAQ,GAAGxW,QAAQ,CAACoF,MAAM,EAAE,IAAI,CAAC,CAAA;QAEvC,IAAI,IAAI,CAAC6Q,aAAa,EAAE;EACpBM,QAAAA,OAAO,GAAG,CAAC,CAAA;UACXF,UAAU,GAAG,IAAI,CAACJ,aAAa,CAAC7Q,MAAM,EAAE,IAAI,CAAC,CAAA;EAE7C,QAAA,IAAMvE,MAAM,GAAGb,QAAQ,CAACa,MAAM,EAAE,CAAA;UAChC,IAAM4V,WAAW,GAAG5V,MAAM,GAAGA,MAAM,CAACE,GAAG,GAAG,CAAC,CAAA;EAE3CuV,QAAAA,UAAU,GAAGG,WAAW,GAAG,IAAI,CAACC,eAAe,CAAA;UAC/CN,aAAa,GAAGE,UAAU,GAAGE,QAAQ,CAAA;EACzC,OAAC,MAAM;UACHD,OAAO,GAAGtW,MAAM,CAACgE,MAAM,CAAC,CAACiS,SAAS,EAAE,IAAI,CAAC,CAAA;UAEzC,IAAMS,YAAY,GAAG1W,MAAM,CAACgE,MAAM,CAAC,CAACmB,MAAM,EAAE,IAAI,CAAC,CAAA;UACjDiR,UAAU,GAAGE,OAAO,GAAGI,YAAY,CAAA;EAEnC,QAAA,IAAM9V,OAAM,GAAGb,QAAQ,CAACa,MAAM,EAAE,CAAA;EAEhCyV,QAAAA,UAAU,GAAGzV,OAAM,GAAGA,OAAM,CAACE,GAAG,GAAG,CAAC,CAAA;UACpCqV,aAAa,GAAGE,UAAU,GAAGE,QAAQ,CAAA;EACzC,OAAA;EAEA,MAAA,OAAOJ,aAAa,IAAIC,UAAU,IAAIC,UAAU,IAAIC,OAAO,CAAA;EAC/D,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,eAAA;EAAA,IAAA,KAAA,EAED,SAA+B,aAAA,GAAA;EAC3B,MAAA,IAAI,CAAC,IAAI,CAACN,aAAa,EAAE;EACrB,QAAA,OAAO,CAAC,CAAA;EACZ,OAAC,MAAM;EACH,QAAA,OAAO,IAAI,CAACA,aAAa,CAACW,UAAU,EAAE,IAAI,CAAC,CAAA;EAC/C,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,kBAAA;EAAA,IAAA,KAAA,EAED,SAAiC,gBAAA,GAAA;EAAA,MAAA,IAAA,KAAA,GAAA,IAAA,CAAA;EAC7B,MAAA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqB,GAAwB;EAC/C,QAAA,IAAMC,aAAa,GAAG,CAAC,UAAU,EAAE,YAAY,CAAC,CAAA;EAEhD,QAAA,IAAMC,WAAW,GAAG,SAAdA,WAAW,CAAIpL,GAAW,EAAc;EAAA,UAAA,IAAA,SAAA,GAAA,0BAAA,CACvBmL,aAAa,CAAA;EAAA,YAAA,KAAA,CAAA;EAAA,UAAA,IAAA;cAAhC,KAAkC,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;EAAA,cAAA,IAAvBE,IAAI,GAAA,KAAA,CAAA,KAAA,CAAA;EACX,cAAA,IAAMC,aAAa,GAAGtL,GAAG,CAACjE,GAAG,CAACsP,IAAI,CAAC,CAAA;EACnC,cAAA,IACIC,aAAa,KAAK,MAAM,IACxBA,aAAa,KAAK,QAAQ,EAC5B;EACE,gBAAA,OAAO,IAAI,CAAA;EACf,eAAA;EACJ,aAAA;EAAC,WAAA,CAAA,OAAA,GAAA,EAAA;EAAA,YAAA,SAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;EAAA,WAAA,SAAA;EAAA,YAAA,SAAA,CAAA,CAAA,EAAA,CAAA;EAAA,WAAA;EAED,UAAA,OAAO,KAAK,CAAA;WACf,CAAA;UAED,IAAIF,WAAW,CAAC,KAAI,CAACrX,UAAU,CAACiM,GAAG,CAAC,EAAE;EAClC,UAAA,OAAO,KAAI,CAACjM,UAAU,CAACiM,GAAG,CAAA;EAC9B,SAAA;UAAC,IAEgB,UAAA,GAAA,0BAAA,CAAA,KAAI,CAACjM,UAAU,CAACiM,GAAG,CAACuL,OAAO,EAAE,CAAClZ,GAAG,EAAE,CAAA;EAAA,UAAA,MAAA,CAAA;EAAA,QAAA,IAAA;YAApD,KAAsD,UAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,MAAA,GAAA,UAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;EAAA,YAAA,IAA3CkH,EAAE,GAAA,MAAA,CAAA,KAAA,CAAA;EACT,YAAA,IAAMyG,GAAG,GAAG1L,MAAM,CAACiF,EAAE,CAAC,CAAA;EACtB,YAAA,IAAI6R,WAAW,CAACpL,GAAG,CAAC,EAAE;EAClB,cAAA,OAAOA,GAAG,CAAA;EACd,aAAA;EACJ,WAAA;EAAC,SAAA,CAAA,OAAA,GAAA,EAAA;EAAA,UAAA,UAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;EAAA,SAAA,SAAA;EAAA,UAAA,UAAA,CAAA,CAAA,EAAA,CAAA;EAAA,SAAA;EAED,QAAA,OAAO,IAAI,CAAA;SACd,CAAA;EAED,MAAA,IAAMwL,yBAAyB,GAAG,SAA5BA,yBAAyB,GAAe;UAC1C,KAAI,CAACT,eAAe,GAAG,CAAC,CAAA;UACxB,KAAI,CAACT,aAAa,GAAG,IAAI,CAAA;SAC5B,CAAA;EAED,MAAA,IAAI,IAAI,CAACvW,UAAU,CAACiM,GAAG,CAACjE,GAAG,CAAC,UAAU,CAAC,KAAK,OAAO,EAAE;EACjDyP,QAAAA,yBAAyB,EAAE,CAAA;EAC/B,OAAA;QAEA,IAAMlB,aAAa,GAAGY,qBAAqB,EAAE,CAAA;EAE7C,MAAA,IACIZ,aAAa,IACbA,aAAa,CAACpa,MAAM,IACpBoa,aAAa,CAAC,CAAC,CAAC,CAACmB,OAAO,KAAK,MAAM,EACrC;UACE,IAAI,CAACnB,aAAa,GAAGA,aAAa,CAAA;EAElC,QAAA,IAAMpV,MAAM,GAAG,IAAI,CAACoV,aAAa,CAACpV,MAAM,EAAE,CAAA;UAC1C,IAAI,CAAC6V,eAAe,GAAG7V,MAAM,GAAGA,MAAM,CAACE,GAAG,GAAG,CAAC,CAAA;EAClD,OAAC,MAAM;EACHoW,QAAAA,yBAAyB,EAAE,CAAA;EAC/B,OAAA;QAEA,IAAI,CAACtB,aAAa,GAAG,IAAI,CAAA;EAC7B,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;EAAA,IAAA,KAAA,EAED,SAA2B,UAAA,GAAA;EACvB,MAAA,IAAI,CAAC,IAAI,CAACA,aAAa,EAAE;UACrB,IAAI,CAACwB,gBAAgB,EAAE,CAAA;EAC3B,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,yCAAA;MAAA,KAED,EAAA,SAAA,uCAAA,CAAgD/V,IAAa,EAAQ;QACjE,IAAMgW,YAAY,GAAG,IAAI,CAACrB,aAAa,IAAI,IAAI,CAACA,aAAa,CAAC,CAAC,CAAC,CAAA;QAEhE,IAAI,CAACqB,YAAY,EAAE;EACf,QAAA,OAAA;EACJ,OAAA;EAEA,MAAA,IAAMC,cAAc,GAChB,IAAI,CAACb,eAAe,GAAGY,YAAY,CAACE,YAAY,GAAGlW,IAAI,CAACsB,MAAM,CAAA;QAElE,IAAI2U,cAAc,GAAG,EAAE,EAAE;UACrBD,YAAY,CAACpB,SAAS,IAAI,EAAE,CAAA;EAC5B,QAAA,IAAI,CAACxW,UAAU,CAAC+X,eAAe,EAAE,CAAA;EACjC,QAAA,IAAI,CAACjR,WAAW,GAAG,CAAC,CAAC,CAAA;SACxB,MAAM,IAAIlF,IAAI,CAACP,GAAG,GAAG,IAAI,CAAC2V,eAAe,GAAG,EAAE,EAAE;UAC7CY,YAAY,CAACpB,SAAS,IAAI,EAAE,CAAA;EAC5B,QAAA,IAAI,CAACxW,UAAU,CAAC+X,eAAe,EAAE,CAAA;EACjC,QAAA,IAAI,CAACjR,WAAW,GAAG,CAAC,CAAC,CAAA;EACzB,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,qCAAA;MAAA,KAED,EAAA,SAAA,mCAAA,CAA4ClF,IAAa,EAAQ;QAC7D,IAAM4U,SAAS,GAAGjW,MAAM,CAACqJ,QAAQ,CAAC,CAAC4M,SAAS,EAAE,IAAI,CAAC,CAAA;EACnD,MAAA,IAAMwB,WAAW,GAAGpW,IAAI,CAACP,GAAG,GAAGmV,SAAS,CAAA;QAExC,IAAIwB,WAAW,GAAG,EAAE,EAAE;UAClBzX,MAAM,CAACqJ,QAAQ,CAAC,CAAC4M,SAAS,CAACA,SAAS,GAAG,EAAE,CAAC,CAAA;EAC9C,OAAC,MAAM;UACH,IAAMS,YAAY,GAAG1W,MAAM,CAACgE,MAAM,CAAC,CAACmB,MAAM,EAAE,IAAI,CAAC,CAAA;UAEjD,IAAIuR,YAAY,IAAIrV,IAAI,CAACsB,MAAM,GAAGsT,SAAS,CAAC,GAAG,EAAE,EAAE;YAC/CjW,MAAM,CAACqJ,QAAQ,CAAC,CAAC4M,SAAS,CAACA,SAAS,GAAG,EAAE,CAAC,CAAA;EAC9C,SAAA;EACJ,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,wBAAA;EAAA,IAAA,KAAA,EAED,SAAuC,sBAAA,GAAA;QACnC,IAAMvW,WAAW,GAAG,IAAI,CAACD,UAAU,CAACiY,UAAU,CAAChY,WAAW,CAAA;QAE1D,IAAIA,WAAW,IAAIA,WAAW,CAACoB,GAAG,KAAK,IAAI,CAACyF,WAAW,EAAE;EACrD,QAAA,IAAI,CAACA,WAAW,GAAG7G,WAAW,CAACoB,GAAG,CAAA;UAElC,IAAI,IAAI,CAACkV,aAAa,EAAE;EACpB,UAAA,IAAI,CAAC2B,uCAAuC,CAACjY,WAAW,CAAC,CAAA;EAC7D,SAAC,MAAM;EACH,UAAA,IAAI,CAACkY,mCAAmC,CAAClY,WAAW,CAAC,CAAA;EACzD,SAAA;EACJ,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,0BAAA;EAAA,IAAA,KAAA,EAED,SAAyC,wBAAA,GAAA;QACrC,IAAMI,YAAY,GAAG,IAAI,CAACL,UAAU,CAACiY,UAAU,CAAC5X,YAAY,CAAA;QAE5D,IAAI,CAACA,YAAY,EAAE;EACf,QAAA,OAAA;EACJ,OAAA;QAEA,IAAI,IAAI,CAACkW,aAAa,EAAE;EACpB,QAAA,IAAI,CAAC6B,mCAAmC,CAAC/X,YAAY,CAAC,CAAA;EAC1D,OAAC,MAAM;EACH,QAAA,IAAI,CAACgY,qCAAqC,CAAChY,YAAY,CAAC,CAAA;EAC5D,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,qCAAA;MAAA,KAED,EAAA,SAAA,mCAAA,CACIA,YAA0B,EACtB;QACJ,IACIA,YAAY,CAACU,KAAK,KAAKC,SAAS,IAChCX,YAAY,CAACY,KAAK,KAAKD,SAAS,EAClC;EACE,QAAA,OAAA;EACJ,OAAA;EAEA,MAAA,IAAMuV,aAAa,GAAG,IAAI,CAACA,aAAa,CAAA;EACxC,MAAA,IAAM+B,kBAAkB,GAAG/B,aAAa,IAAIA,aAAa,CAACpV,MAAM,EAAE,CAAA;EAElE,MAAA,IAAI,EAAEoV,aAAa,IAAI+B,kBAAkB,CAAC,EAAE;EACxC,QAAA,OAAA;EACJ,OAAA;EAEA,MAAA,IAAMV,YAAY,GAAGrB,aAAa,CAAC,CAAC,CAAC,CAAA;EAErC,MAAA,IAAMgC,cAAc,GAChBX,YAAY,CAACV,UAAU,GAAGU,YAAY,CAACY,WAAW,GAClDZ,YAAY,CAACa,WAAW,CAAA;EAC5B,MAAA,IAAMC,aAAa,GAAGd,YAAY,CAACV,UAAU,GAAG,CAAC,CAAA;QAEjD,IAAMyB,SAAS,GAAGL,kBAAkB,CAAClX,IAAI,GAAGwW,YAAY,CAACY,WAAW,CAAA;EACpE,MAAA,IAAMI,QAAQ,GAAGN,kBAAkB,CAAClX,IAAI,CAAA;QACxC,IAAMyX,eAAe,GAAGxY,YAAY,CAACU,KAAK,GAAG4X,SAAS,GAAG,EAAE,CAAA;QAC3D,IAAMG,cAAc,GAAGzY,YAAY,CAACU,KAAK,GAAG6X,QAAQ,GAAG,EAAE,CAAA;QAEzD,IAAIC,eAAe,IAAIN,cAAc,EAAE;EACnCX,QAAAA,YAAY,CAACV,UAAU,GAAG7P,IAAI,CAACC,GAAG,CAC9BsQ,YAAY,CAACV,UAAU,GAAG,EAAE,EAC5BU,YAAY,CAACa,WAAW,CAC3B,CAAA;EACL,OAAC,MAAM,IAAIK,cAAc,IAAIJ,aAAa,EAAE;EACxCd,QAAAA,YAAY,CAACV,UAAU,GAAG7P,IAAI,CAAC0R,GAAG,CAACnB,YAAY,CAACV,UAAU,GAAG,EAAE,EAAE,CAAC,CAAC,CAAA;EACvE,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,uCAAA;MAAA,KAED,EAAA,SAAA,qCAAA,CACI7W,YAA0B,EACtB;QACJ,IACIA,YAAY,CAACU,KAAK,KAAKC,SAAS,IAChCX,YAAY,CAACY,KAAK,KAAKD,SAAS,EAClC;EACE,QAAA,OAAA;EACJ,OAAA;EAEA,MAAA,IAAMgY,SAAS,GAAGzY,MAAM,CAACqJ,QAAQ,CAAC,CAAA;EAElC,MAAA,IAAMsN,UAAU,GAAG8B,SAAS,CAAC9B,UAAU,EAAE,IAAI,CAAC,CAAA;QAC9C,IAAM+B,WAAW,GAAG1Y,MAAM,CAACgE,MAAM,CAAC,CAACkB,KAAK,EAAE,IAAI,CAAC,CAAA;EAE/C,MAAA,IAAMiT,aAAa,GAAGxB,UAAU,GAAG,CAAC,CAAA;QAEpC,IAAM2B,eAAe,GAAGxY,YAAY,CAACU,KAAK,GAAGkY,WAAW,GAAG,EAAE,CAAA;QAC7D,IAAMH,cAAc,GAAGzY,YAAY,CAACU,KAAK,GAAGmW,UAAU,GAAG,EAAE,CAAA;EAE3D,MAAA,IAAI2B,eAAe,EAAE;EACjBG,QAAAA,SAAS,CAAC9B,UAAU,CAACA,UAAU,GAAG,EAAE,CAAC,CAAA;EACzC,OAAC,MAAM,IAAI4B,cAAc,IAAIJ,aAAa,EAAE;EACxCM,QAAAA,SAAS,CAAC9B,UAAU,CAAC7P,IAAI,CAAC0R,GAAG,CAAC7B,UAAU,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAA;EACtD,OAAA;EACJ,KAAA;EAAC,GAAA,CAAA,CAAA,CAAA;EAAA,EAAA,OAAA,aAAA,CAAA;EAAA,CAAA,EAAA;;MC3QgBgC,iBAAiB,gBAAA,YAAA;EAKlC,EAAA,SAAA,iBAAA,CAAYlZ,UAAwB,EAAE;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,oBAAA,EAAA,KAAA,CAAA,CAAA,CAAA;MAClC,IAAI,CAACA,UAAU,GAAGA,UAAU,CAAA;EAC5B,IAAA,IAAI,CAACuV,aAAa,GAAG,IAAI4D,GAAG,EAAU,CAAA;MACtC,IAAI,CAAC3W,KAAK,EAAE,CAAA;EAChB,GAAA;EAAC,EAAA,YAAA,CAAA,iBAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,iBAAA;EAAA,IAAA,KAAA,EAED,SAAuC,eAAA,GAAA;EACnC,MAAA,IAAM+S,aAAa,GAAG,IAAI,CAAChB,gBAAgB,EAAE,CAAA;QAE7C,IAAIgB,aAAa,CAACpZ,MAAM,EAAE;UACtB,OAAOoZ,aAAa,CAAC,CAAC,CAAC,CAAA;EAC3B,OAAC,MAAM;EACH,QAAA,OAAO,KAAK,CAAA;EAChB,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,kBAAA;EAAA,IAAA,KAAA,EAED,SAAkC,gBAAA,GAAA;EAAA,MAAA,IAAA,KAAA,GAAA,IAAA,CAAA;QAC9B,IAAI,IAAI,CAAC6D,kBAAkB,EAAE;EACzB,QAAA,OAAO,CAAC,IAAI,CAACA,kBAAkB,CAAC,CAAA;EACpC,OAAC,MAAM;UACH,IAAM7D,aAAqB,GAAG,EAAE,CAAA;EAEhC,QAAA,IAAI,CAACA,aAAa,CAACjP,OAAO,CAAC,UAAC/H,EAAE,EAAK;YAC/B,IAAMvC,IAAI,GAAG,KAAI,CAACgE,UAAU,CAACoV,WAAW,CAAC7W,EAAE,CAAC,CAAA;EAC5C,UAAA,IAAIvC,IAAI,EAAE;EACNuZ,YAAAA,aAAa,CAAClZ,IAAI,CAACL,IAAI,CAAC,CAAA;EAC5B,WAAA;EACJ,SAAC,CAAC,CAAA;EAEF,QAAA,OAAOuZ,aAAa,CAAA;EACxB,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,uBAAA;MAAA,KAED,EAAA,SAAA,qBAAA,CAA6B9Z,MAAY,EAAU;QAC/C,IAAI,IAAI,CAAC2d,kBAAkB,EAAE;UACzB,IAAI3d,MAAM,CAAC0B,UAAU,CAAC,IAAI,CAACic,kBAAkB,CAAC,EAAE;EAC5C,UAAA,OAAO,CAAC,IAAI,CAACA,kBAAkB,CAAC,CAAA;EACpC,SAAC,MAAM;EACH,UAAA,OAAO,EAAE,CAAA;EACb,SAAA;EACJ,OAAC,MAAM;UACH,IAAM7D,aAAa,GAAG,EAAE,CAAA;EAExB,QAAA,KAAK,IAAMhX,EAAE,IAAI,IAAI,CAACgX,aAAa,EAAE;EACjC,UAAA,IACI9a,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAAC,IAAI,CAAC2a,aAAa,EAAEhX,EAAE,CAAC,EAC9D;cACE,IAAMvC,IAAI,GAAG,IAAI,CAACgE,UAAU,CAACoV,WAAW,CAAC7W,EAAE,CAAC,CAAA;cAC5C,IAAIvC,IAAI,IAAIP,MAAM,CAAC0B,UAAU,CAACnB,IAAI,CAAC,EAAE;EACjCuZ,cAAAA,aAAa,CAAClZ,IAAI,CAACL,IAAI,CAAC,CAAA;EAC5B,aAAA;EACJ,WAAA;EACJ,SAAA;EAEA,QAAA,OAAOuZ,aAAa,CAAA;EACxB,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,gBAAA;MAAA,KAED,EAAA,SAAA,cAAA,CAAsBvZ,IAAU,EAAW;EACvC,MAAA,IAAIA,IAAI,CAACuC,EAAE,IAAI,IAAI,EAAE;UACjB,OAAO,IAAI,CAACgX,aAAa,CAAC8D,GAAG,CAACrd,IAAI,CAACuC,EAAE,CAAC,CAAA;EAC1C,OAAC,MAAM,IAAI,IAAI,CAAC6a,kBAAkB,EAAE;UAChC,OAAO,IAAI,CAACA,kBAAkB,CAAC5X,OAAO,KAAKxF,IAAI,CAACwF,OAAO,CAAA;EAC3D,OAAC,MAAM;EACH,QAAA,OAAO,KAAK,CAAA;EAChB,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,OAAA;EAAA,IAAA,KAAA,EAED,SAAqB,KAAA,GAAA;EACjB,MAAA,IAAI,CAAC+T,aAAa,CAAC/S,KAAK,EAAE,CAAA;QAC1B,IAAI,CAAC4W,kBAAkB,GAAG,IAAI,CAAA;EAClC,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,qBAAA;MAAA,KAED,EAAA,SAAA,mBAAA,CAA2Bpd,IAAU,EAAiC;EAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;QAAA,IAA/B8C,eAAe,uEAAG,KAAK,CAAA;EAC1D,MAAA,IAAI9C,IAAI,CAACuC,EAAE,IAAI,IAAI,EAAE;EACjB,QAAA,IACI,IAAI,CAAC6a,kBAAkB,IACvBpd,IAAI,CAACwF,OAAO,KAAK,IAAI,CAAC4X,kBAAkB,CAAC5X,OAAO,EAClD;YACE,IAAI,CAAC4X,kBAAkB,GAAG,IAAI,CAAA;EAClC,SAAA;EACJ,OAAC,MAAM;EACH,QAAA,IAAI,CAAC7D,aAAa,CAAA,QAAA,CAAO,CAACvZ,IAAI,CAACuC,EAAE,CAAC,CAAA;EAElC,QAAA,IAAIO,eAAe,EAAE;YACjB9C,IAAI,CAAC+B,OAAO,CAAC,YAAM;EACf,YAAA,IAAI/B,IAAI,CAACuC,EAAE,IAAI,IAAI,EAAE;EACjB,cAAA,MAAI,CAACgX,aAAa,CAAA,QAAA,CAAO,CAACvZ,IAAI,CAACuC,EAAE,CAAC,CAAA;EACtC,aAAA;EACA,YAAA,OAAO,IAAI,CAAA;EACf,WAAC,CAAC,CAAA;EACN,SAAA;EACJ,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,gBAAA;MAAA,KAED,EAAA,SAAA,cAAA,CAAsBvC,IAAU,EAAQ;EACpC,MAAA,IAAIA,IAAI,CAACuC,EAAE,IAAI,IAAI,EAAE;UACjB,IAAI,CAACgX,aAAa,CAAC+D,GAAG,CAACtd,IAAI,CAACuC,EAAE,CAAC,CAAA;EACnC,OAAC,MAAM;UACH,IAAI,CAAC6a,kBAAkB,GAAGpd,IAAI,CAAA;EAClC,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,eAAA;EAAA,IAAA,KAAA,EAED,SAAgC,aAAA,GAAA;EAC5B,MAAA,IAAMud,aAAa,GAAG3P,QAAQ,CAAC2P,aAAa,CAAA;EAE5C,MAAA,OAAOtP,OAAO,CACVsP,aAAa,IACTA,aAAa,CAAC7B,OAAO,KAAK,MAAM,IAChC,IAAI,CAAC1X,UAAU,CAACwZ,gBAAgB,CAACD,aAAa,CAAgB,CACrE,CAAA;EACL,KAAA;EAAC,GAAA,CAAA,CAAA,CAAA;EAAA,EAAA,OAAA,iBAAA,CAAA;EAAA,CAAA,EAAA;;ECjHL,IAAaE,WAAW,gBAAA,YAAA;IAKpB,SAAYzd,WAAAA,CAAAA,IAAU,EAAEgE,UAAwB,EAAE;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAC9C,IAAA,IAAI,CAACsQ,IAAI,CAACtU,IAAI,EAAEgE,UAAU,CAAC,CAAA;EAC/B,GAAA;EAAC,EAAA,YAAA,CAAA,WAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,MAAA;EAAA,IAAA,KAAA,EAED,SAAYhE,IAAAA,CAAAA,IAAU,EAAEgE,UAAwB,EAAQ;QACpD,IAAI,CAAChE,IAAI,GAAGA,IAAI,CAAA;QAChB,IAAI,CAACgE,UAAU,GAAGA,UAAU,CAAA;EAE5B,MAAA,IAAI,CAAChE,IAAI,CAACwF,OAAO,EAAE;UACf,IAAMA,OAAO,GAAG,IAAI,CAACxB,UAAU,CAACwB,OAAO,CAAClD,GAAG,CAAC,CAAC,CAAC,CAAA;EAE9C,QAAA,IAAIkD,OAAO,EAAE;YACTxF,IAAI,CAACwF,OAAO,GAAGA,OAAO,CAAA;EAC1B,SAAA;EACJ,OAAA;QAEA,IAAIxF,IAAI,CAACwF,OAAO,EAAE;UACd,IAAI,CAAClB,QAAQ,GAAGC,MAAM,CAACvE,IAAI,CAACwF,OAAO,CAAC,CAAA;EACxC,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,aAAA;MAAA,KAED,EAAA,SAAA,WAAA,CAAmBjH,QAAgB,EAAY;EAC3C,MAAA,IAAI,IAAI,CAACmf,sBAAsB,CAACnf,QAAQ,CAAC,EAAE;EACvC,QAAA,OAAO,IAAIof,cAAc,CACrB,IAAI,CAACrZ,QAAQ,EACb,IAAI,CAACN,UAAU,CAAC2F,cAAc,EAAE,CACnC,CAAA;EACL,OAAC,MAAM;EACH,QAAA,OAAO,IAAIiU,aAAa,CAAC,IAAI,CAAC5d,IAAI,EAAE,IAAI,CAACsE,QAAQ,EAAE/F,QAAQ,CAAC,CAAA;EAChE,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;MAAA,KAED,EAAA,SAAA,MAAA,CAAcsf,YAAqB,EAAQ;EAAA,MAAA,IAAA,qBAAA,CAAA;EACvC,MAAA,IAAMC,GAAG,GAAG,IAAI,CAACC,KAAK,EAAE,CAAA;EAExBD,MAAAA,GAAG,CAACpY,QAAQ,CAAC,iBAAiB,CAAC,CAAA;EAC/BoY,MAAAA,GAAG,CAACxC,IAAI,CAAC,eAAe,EAAE,MAAM,CAAC,CAAA;EAEjC,MAAA,IAAM0C,KAAK,GAAG,IAAI,CAACC,OAAO,EAAE,CAAA;EAC5BD,MAAAA,KAAK,CAAC1C,IAAI,CAAC,UAAU,2BAAE,IAAI,CAACtX,UAAU,CAACU,OAAO,CAAC8K,QAAQ,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAI,IAAI,CAAC,CAAA;EAEhE,MAAA,IAAIqO,YAAY,EAAE;EACdG,QAAAA,KAAK,CAACE,OAAO,CAAC,OAAO,CAAC,CAAA;EAC1B,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;EAAA,IAAA,KAAA,EAED,SAAwB,QAAA,GAAA;EACpB,MAAA,IAAMJ,GAAG,GAAG,IAAI,CAACC,KAAK,EAAE,CAAA;EAExBD,MAAAA,GAAG,CAACnX,WAAW,CAAC,iBAAiB,CAAC,CAAA;EAClCmX,MAAAA,GAAG,CAACxC,IAAI,CAAC,eAAe,EAAE,OAAO,CAAC,CAAA;EAElC,MAAA,IAAM0C,KAAK,GAAG,IAAI,CAACC,OAAO,EAAE,CAAA;EAC5BD,MAAAA,KAAK,CAACG,UAAU,CAAC,UAAU,CAAC,CAAA;QAE5BH,KAAK,CAACI,IAAI,EAAE,CAAA;EAChB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,OAAA;EAAA,IAAA,KAAA,EAED,SAAuC,KAAA,GAAA;EACnC,MAAA,OAAO,IAAI,CAAC9Z,QAAQ,CAAC9E,QAAQ,CAAC,UAAU,CAAC,CAAA;EAC7C,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,SAAA;EAAA,IAAA,KAAA,EAED,SAAyC,OAAA,GAAA;EACrC,MAAA,OAAO,IAAI,CAAC8E,QAAQ,CACf9E,QAAQ,CAAC,iBAAiB,CAAC,CAC3BgU,IAAI,CAAC,mBAAmB,CAAC,CAAA;EAClC,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,OAAA;EAAA,IAAA,KAAA,EAED,SAAuC,KAAA,GAAA;QACnC,OAAO,IAAI,CAAClP,QAAQ,CAAA;EACxB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,wBAAA;MAAA,KAED,EAAA,SAAA,sBAAA,CAAiC/F,QAAgB,EAAW;EACxD,MAAA,OAAOA,QAAQ,KAAKX,QAAQ,CAACO,MAAM,CAAA;EACvC,KAAA;EAAC,GAAA,CAAA,CAAA,CAAA;EAAA,EAAA,OAAA,WAAA,CAAA;EAAA,CAAA,EAAA,CAAA;EAGL,IAAakgB,aAAa,gBAAA,UAAA,YAAA,EAAA;EAAA,EAAA,SAAA,CAAA,aAAA,EAAA,YAAA,CAAA,CAAA;EAAA,EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,aAAA,CAAA,CAAA;EAAA,EAAA,SAAA,aAAA,GAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,CAAA,CAAA;EAAA,IAAA,OAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;EAAA,GAAA;EAAA,EAAA,YAAA,CAAA,aAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,MAAA;MAAA,KACtB,EAAA,SAAA,IAAA,CACIrO,UAAmC,EAG/B;EAAA,MAAA,IAAA,KAAA,GAAA,IAAA,CAAA;QAAA,IAFJ5H,KAAK,uEAAG,IAAI,CAAA;QAAA,IACZkW,cAAwC,uEAAG,MAAM,CAAA;EAEjD,MAAA,IAAI,IAAI,CAACte,IAAI,CAAC+C,OAAO,EAAE;EACnB,QAAA,OAAA;EACJ,OAAA;EAEA,MAAA,IAAI,CAAC/C,IAAI,CAAC+C,OAAO,GAAG,IAAI,CAAA;EAExB,MAAA,IAAMwb,OAAO,GAAG,IAAI,CAACC,SAAS,EAAE,CAAA;EAChCD,MAAAA,OAAO,CAAC5X,WAAW,CAAC,eAAe,CAAC,CAAA;EACpC4X,MAAAA,OAAO,CAACxS,IAAI,CAAC,EAAE,CAAC,CAAA;EAEhB,MAAA,IAAM0S,QAAQ,GAAGF,OAAO,CAACjc,GAAG,CAAC,CAAC,CAAC,CAAA;EAE/B,MAAA,IAAImc,QAAQ,EAAE;EACV,QAAA,IAAMC,IAAI,GACN,IAAI,CAAC1a,UAAU,CAAC2a,QAAQ,CAACrS,iBAAiB,CAAC0C,SAAS,CAAC,IAAI,CAAC,CAAA;EAE9DyP,QAAAA,QAAQ,CAAClR,WAAW,CAACmR,IAAI,CAAC,CAAA;EAC9B,OAAA;EAEA,MAAA,IAAME,MAAM,GAAG,SAATA,MAAM,GAAe;EACvB,QAAA,IAAMd,GAAG,GAAG,KAAI,CAACC,KAAK,EAAE,CAAA;EACxBD,QAAAA,GAAG,CAACnX,WAAW,CAAC,eAAe,CAAC,CAAA;EAEhC,QAAA,IAAMqX,KAAK,GAAG,KAAI,CAACC,OAAO,EAAE,CAAA;EAC5BD,QAAAA,KAAK,CAAC1C,IAAI,CAAC,eAAe,EAAE,MAAM,CAAC,CAAA;EAEnC,QAAA,IAAItL,UAAU,EAAE;EACZA,UAAAA,UAAU,CAAC,KAAI,CAAChQ,IAAI,CAAC,CAAA;EACzB,SAAA;EAEA,QAAA,KAAI,CAACgE,UAAU,CAACgF,aAAa,CAAC,WAAW,EAAE;YACvChJ,IAAI,EAAE,KAAI,CAACA,IAAAA;EACf,SAAC,CAAC,CAAA;SACL,CAAA;EAED,MAAA,IAAIoI,KAAK,EAAE;UACP,IAAI,CAACyW,KAAK,EAAE,CAACC,SAAS,CAACR,cAAc,EAAEM,MAAM,CAAC,CAAA;EAClD,OAAC,MAAM;EACH,QAAA,IAAI,CAACC,KAAK,EAAE,CAACE,IAAI,EAAE,CAAA;EACnBH,QAAAA,MAAM,EAAE,CAAA;EACZ,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,OAAA;EAAA,IAAA,KAAA,EAED,SAGQ,KAAA,GAAA;EAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;QAAA,IAFJxW,KAAK,uEAAG,IAAI,CAAA;QAAA,IACZkW,cAAwC,uEAAG,MAAM,CAAA;EAEjD,MAAA,IAAI,CAAC,IAAI,CAACte,IAAI,CAAC+C,OAAO,EAAE;EACpB,QAAA,OAAA;EACJ,OAAA;EAEA,MAAA,IAAI,CAAC/C,IAAI,CAAC+C,OAAO,GAAG,KAAK,CAAA;EAEzB,MAAA,IAAMwb,OAAO,GAAG,IAAI,CAACC,SAAS,EAAE,CAAA;EAChCD,MAAAA,OAAO,CAAC7Y,QAAQ,CAAC,eAAe,CAAC,CAAA;EACjC6Y,MAAAA,OAAO,CAACxS,IAAI,CAAC,EAAE,CAAC,CAAA;EAEhB,MAAA,IAAM0S,QAAQ,GAAGF,OAAO,CAACjc,GAAG,CAAC,CAAC,CAAC,CAAA;EAE/B,MAAA,IAAImc,QAAQ,EAAE;EACV,QAAA,IAAMC,IAAI,GACN,IAAI,CAAC1a,UAAU,CAAC2a,QAAQ,CAAClS,iBAAiB,CAACuC,SAAS,CAAC,IAAI,CAAC,CAAA;EAE9DyP,QAAAA,QAAQ,CAAClR,WAAW,CAACmR,IAAI,CAAC,CAAA;EAC9B,OAAA;EAEA,MAAA,IAAMM,OAAO,GAAG,SAAVA,OAAO,GAAe;EACxB,QAAA,IAAMlB,GAAG,GAAG,MAAI,CAACC,KAAK,EAAE,CAAA;EACxBD,QAAAA,GAAG,CAACpY,QAAQ,CAAC,eAAe,CAAC,CAAA;EAE7B,QAAA,IAAMsY,KAAK,GAAG,MAAI,CAACC,OAAO,EAAE,CAAA;EAC5BD,QAAAA,KAAK,CAAC1C,IAAI,CAAC,eAAe,EAAE,OAAO,CAAC,CAAA;EAEpC,QAAA,MAAI,CAACtX,UAAU,CAACgF,aAAa,CAAC,YAAY,EAAE;YACxChJ,IAAI,EAAE,MAAI,CAACA,IAAAA;EACf,SAAC,CAAC,CAAA;SACL,CAAA;EAED,MAAA,IAAIoI,KAAK,EAAE;UACP,IAAI,CAACyW,KAAK,EAAE,CAACI,OAAO,CAACX,cAAc,EAAEU,OAAO,CAAC,CAAA;EACjD,OAAC,MAAM;EACH,QAAA,IAAI,CAACH,KAAK,EAAE,CAACK,IAAI,EAAE,CAAA;EACnBF,QAAAA,OAAO,EAAE,CAAA;EACb,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,wBAAA;MAAA,KAED,EAAA,SAAA,sBAAA,CAAiCzgB,QAAgB,EAAW;QACxD,OAAO,CAAC,IAAI,CAACyB,IAAI,CAAC+C,OAAO,IAAIxE,QAAQ,KAAKX,QAAQ,CAACO,MAAM,CAAA;EAC7D,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,WAAA;EAAA,IAAA,KAAA,EAED,SAA4B,SAAA,GAAA;EACxB,MAAA,OAAO,IAAI,CAACmG,QAAQ,CACf9E,QAAQ,CAAC,iBAAiB,CAAC,CAC3BgU,IAAI,CAAC,kBAAkB,CAAC,CAAA;EACjC,KAAA;EAAC,GAAA,CAAA,CAAA,CAAA;EAAA,EAAA,OAAA,aAAA,CAAA;EAAA,CAAA,CApG8BiK,WAAW,CAAA,CAAA;EAuG9C,IAAaE,cAAc,gBAAA,YAAA;IAGvB,SAAYrZ,cAAAA,CAAAA,QAAyB,EAAE4W,UAAkB,EAAE;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EACvD,IAAA,IAAMiE,IAAI,GAAG7a,QAAQ,CAAC9E,QAAQ,CAAC,iBAAiB,CAAC,CAAA;EAEjD,IAAA,IAAM4f,OAAO,GAAG9a,QAAQ,CAACmF,KAAK,EAAE,IAAI,CAAC,CAAA;EACrC,IAAA,IAAMA,KAAK,GAAG4B,IAAI,CAAC0R,GAAG,CAACqC,OAAO,GAAGlE,UAAU,GAAG,CAAC,EAAE,CAAC,CAAC,CAAA;EAEnD,IAAA,IAAMJ,QAAQ,GAAGqE,IAAI,CAACE,WAAW,EAAE,IAAI,CAAC,CAAA;MACxC,IAAM3V,MAAM,GAAG2B,IAAI,CAAC0R,GAAG,CAACjC,QAAQ,GAAG,CAAC,EAAE,CAAC,CAAC,CAAA;EAExC,IAAA,IAAI,CAACwE,KAAK,GAAG/a,MAAM,CAAC,qCAAqC,CAAC,CAAA;EAC1D4a,IAAAA,IAAI,CAAClT,MAAM,CAAC,IAAI,CAACqT,KAAK,CAAC,CAAA;EAEvB,IAAA,IAAI,CAACA,KAAK,CAACtT,GAAG,CAAC;EAAEvC,MAAAA,KAAK,EAALA,KAAK;EAAEC,MAAAA,MAAM,EAANA,MAAAA;EAAO,KAAC,CAAC,CAAA;EACrC,GAAA;EAAC,EAAA,YAAA,CAAA,cAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,QAAA;EAAA,IAAA,KAAA,EAED,SAAsB,MAAA,GAAA;EAClB,MAAA,IAAI,CAAC4V,KAAK,CAAC/X,MAAM,EAAE,CAAA;EACvB,KAAA;EAAC,GAAA,CAAA,CAAA,CAAA;EAAA,EAAA,OAAA,cAAA,CAAA;EAAA,CAAA,EAAA,CAAA;EACJ,IAEKqW,aAAa,gBAAA,YAAA;EAKf,EAAA,SAAA,aAAA,CAAY5d,IAAU,EAAEsE,QAAyB,EAAE/F,QAAgB,EAAE;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAAA,KAAA,CAAA,CAAA,CAAA;MACjE,IAAI,CAAC+F,QAAQ,GAAGA,QAAQ,CAAA;MAExB,IAAI,CAACtE,IAAI,GAAGA,IAAI,CAAA;EAChB,IAAA,IAAI,CAACuf,MAAM,GAAGhb,MAAM,CAGnB,kKAAA,CAAA,CAAA;EAED,IAAA,IAAIhG,QAAQ,KAAKX,QAAQ,CAACK,KAAK,EAAE;QAC7B,IAAI,CAACuhB,SAAS,EAAE,CAAA;EACpB,KAAC,MAAM,IAAIjhB,QAAQ,KAAKX,QAAQ,CAACG,MAAM,EAAE;QACrC,IAAI,CAAC0hB,UAAU,EAAE,CAAA;EACrB,KAAC,MAAM,IAAIlhB,QAAQ,KAAKX,QAAQ,CAACO,MAAM,EAAE;QACrC,IAAI6B,IAAI,CAAC+F,QAAQ,EAAE,IAAI/F,IAAI,CAAC+C,OAAO,EAAE;UACjC,IAAI,CAAC2c,oBAAoB,EAAE,CAAA;EAC/B,OAAC,MAAM;UACH,IAAI,CAACC,UAAU,EAAE,CAAA;EACrB,OAAA;EACJ,KAAA;EACJ,GAAA;EAAC,EAAA,YAAA,CAAA,aAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,QAAA;EAAA,IAAA,KAAA,EAED,SAAsB,MAAA,GAAA;EAClB,MAAA,IAAI,CAACJ,MAAM,CAAChY,MAAM,EAAE,CAAA;EACxB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,WAAA;EAAA,IAAA,KAAA,EAED,SAAyB,SAAA,GAAA;QACrB,IAAI,CAACjD,QAAQ,CAACtG,KAAK,CAAC,IAAI,CAACuhB,MAAM,CAAC,CAAA;EACpC,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;EAAA,IAAA,KAAA,EAED,SAA0B,UAAA,GAAA;QACtB,IAAI,CAACjb,QAAQ,CAACxG,MAAM,CAAC,IAAI,CAACyhB,MAAM,CAAC,CAAA;EACrC,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,sBAAA;EAAA,IAAA,KAAA,EAED,SAAoC,oBAAA,GAAA;QAChC,IAAMK,YAAY,GAAG,IAAI,CAAC5f,IAAI,CAACR,QAAQ,CAAC,CAAC,CAAC,CAACgG,OAAO,CAAA;EAElD,MAAA,IAAIoa,YAAY,EAAE;UACdrb,MAAM,CAACqb,YAAY,CAAC,CAAC9hB,MAAM,CAAC,IAAI,CAACyhB,MAAM,CAAC,CAAA;EAC5C,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;EAAA,IAAA,KAAA,EAED,SAA0B,UAAA,GAAA;QACtB,IAAI,CAACjb,QAAQ,CAACtG,KAAK,CAAC,IAAI,CAACuhB,MAAM,CAAC,CAAA;EAChC,MAAA,IAAI,CAACA,MAAM,CAAC7Z,QAAQ,CAAC,eAAe,CAAC,CAAA;EACzC,KAAA;EAAC,GAAA,CAAA,CAAA,CAAA;EAAA,EAAA,OAAA,aAAA,CAAA;EAAA,CAAA,EAAA;;EC9OL,IAAMma,mBAAmB,GAAG,yBAAyB,CAAA;EACrD,IAAMC,cAAc,GAAG,sBAAsB,CAAA;AAE7C,MAAaC,YAAY,gBAAA,UAAA,YAAA,EAAA;EAAA,EAAA,SAAA,CAAA,YAAA,EAAA,YAAA,CAAA,CAAA;EAAA,EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,YAAA,CAAA,CAAA;EAAA,EAAA,SAAA,YAAA,GAAA;EAAA,IAAA,IAAA,KAAA,CAAA;EAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,CAAA,CAAA;EAAA,IAAA,KAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAA,IAAA,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;EAAA,MAAA,IAAA,CAAA,IAAA,CAAA,GAAA,SAAA,CAAA,IAAA,CAAA,CAAA;EAAA,KAAA;EAAA,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,MAAA,EAAA,CAAA,IAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,eAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,mBAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,eAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,kBAAA,EAAA,KAAA,CAAA,CAAA,CAAA;EAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA,CAAA;MAAA,eA42BC,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,aAAA,EAAA,UAClB9N,CAAgE,EACzD;QACP,IAAM+N,WAAW,GAAG,KAAKC,CAAAA,cAAc,CAAChO,CAAC,CAACzN,MAAM,CAAC,CAAA;EAEjD,MAAA,IAAIwb,WAAW,EAAE;EACb,QAAA,IAAIA,WAAW,CAACE,IAAI,KAAK,QAAQ,EAAE;YAC/B,KAAKC,CAAAA,MAAM,CAACH,WAAW,CAAChgB,IAAI,EAAE,KAAK0E,CAAAA,OAAO,CAAC0D,KAAK,CAAC,CAAA;YAEjD6J,CAAC,CAAC2D,cAAc,EAAE,CAAA;YAClB3D,CAAC,CAACmO,eAAe,EAAE,CAAA;EACvB,SAAC,MAAM,IAAIJ,WAAW,CAACE,IAAI,KAAK,OAAO,EAAE;EACrC,UAAA,IAAMlgB,MAAI,GAAGggB,WAAW,CAAChgB,IAAI,CAAA;EAC7B,UAAA,IAAM+I,KAAK,GAAG,KAAA,CAAKC,aAAa,CAAC,YAAY,EAAE;EAC3ChJ,YAAAA,IAAI,EAAJA,MAAI;EACJqgB,YAAAA,WAAW,EAAEpO,CAAAA;EACjB,WAAC,CAAC,CAAA;EAEF,UAAA,IAAI,CAAClJ,KAAK,CAACQ,kBAAkB,EAAE,EAAE;cAC7B,KAAK+W,CAAAA,YAAY,CAACtgB,MAAI,CAAC,CAAA;EAC3B,WAAA;EACJ,SAAA;EACJ,OAAA;OACH,CAAA,CAAA;MAAA,eAEwB,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,gBAAA,EAAA,UACrBiS,CAAsE,EAC/D;QACP,IAAM+N,WAAW,GAAG,KAAKC,CAAAA,cAAc,CAAChO,CAAC,CAACzN,MAAM,CAAC,CAAA;QAEjD,IAAI,CAAAwb,WAAW,KAAA,IAAA,IAAXA,WAAW,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAXA,WAAW,CAAEE,IAAI,MAAK,OAAO,EAAE;UAC/B,KAAKlX,CAAAA,aAAa,CAAC,eAAe,EAAE;YAChChJ,IAAI,EAAEggB,WAAW,CAAChgB,IAAI;EACtBqgB,UAAAA,WAAW,EAAEpO,CAAAA;EACjB,SAAC,CAAC,CAAA;EACN,OAAA;OACH,CAAA,CAAA;MAAA,eAyC2B,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,mBAAA,EAAA,UACxBA,CAAsE,EACrE;EACD,MAAA,IAAMkN,IAAI,GAAG5a,MAAM,CAAC0N,CAAC,CAACzN,MAAM,CAAC,CAAC+b,OAAO,CAAC,gCAAgC,CAAC,CAAA;QACvE,IAAIpB,IAAI,CAAChf,MAAM,EAAE;EACb,QAAA,IAAMH,MAAI,GAAG,KAAA,CAAKwgB,OAAO,CAACrB,IAAI,CAAC,CAAA;EAC/B,QAAA,IAAInf,MAAI,EAAE;YACNiS,CAAC,CAAC2D,cAAc,EAAE,CAAA;YAClB3D,CAAC,CAACmO,eAAe,EAAE,CAAA;YAEnB,KAAKpX,CAAAA,aAAa,CAAC,kBAAkB,EAAE;EACnChJ,YAAAA,IAAI,EAAJA,MAAI;EACJqgB,YAAAA,WAAW,EAAEpO,CAAAA;EACjB,WAAC,CAAC,CAAA;EACF,UAAA,OAAO,KAAK,CAAA;EAChB,SAAA;EACJ,OAAA;EAEA,MAAA,OAAO,IAAI,CAAA;OACd,CAAA,CAAA;EAAA,IAAA,OAAA,KAAA,CAAA;EAAA,GAAA;EAAA,EAAA,YAAA,CAAA,YAAA,EAAA,CAAA;EAAA,IAAA,GAAA,EAAA,QAAA;MAAA,KAx5BD,EAAA,SAAA,MAAA,CAAcjS,IAAU,EAA6C;QAAA,IAA3CygB,UAA0B,uEAAG,IAAI,CAAA;QACvD,IAAI,CAACzgB,IAAI,EAAE;UACP,MAAM0gB,KAAK,CAACb,mBAAmB,CAAC,CAAA;EACpC,OAAA;EAEA,MAAA,IAAMzX,KAAK,GAAGqY,UAAU,KAAA,IAAA,IAAVA,UAAU,KAAA,KAAA,CAAA,GAAVA,UAAU,GAAI,IAAI,CAAC/b,OAAO,CAAC0D,KAAK,CAAA;QAE9C,IAAIpI,IAAI,CAAC+C,OAAO,EAAE;EACd,QAAA,IAAI,CAACsQ,SAAS,CAACrT,IAAI,EAAEoI,KAAK,CAAC,CAAA;EAC/B,OAAC,MAAM;EACH,QAAA,IAAI,CAACgL,QAAQ,CAACpT,IAAI,EAAEoI,KAAK,CAAC,CAAA;EAC9B,OAAA;QAEA,OAAO,IAAI,CAAC5C,OAAO,CAAA;EACvB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,SAAA;EAAA,IAAA,KAAA,EAED,SAAuB,OAAA,GAAA;QACnB,OAAO,IAAI,CAAC5F,IAAI,CAAA;EACpB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;EAAA,IAAA,KAAA,EAED,SACII,UAAAA,CAAAA,IAAiB,EACjB2gB,YAAgC,EAC1B;EACN,MAAA,IAAI,CAACL,YAAY,CAACtgB,IAAI,EAAE2gB,YAAY,CAAC,CAAA;QACrC,OAAO,IAAI,CAACnb,OAAO,CAAA;EACvB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,iBAAA;EAAA,IAAA,KAAA,EAED,SAAuC,eAAA,GAAA;EACnC,MAAA,OAAO,IAAI,CAAC0I,iBAAiB,CAACkE,eAAe,EAAE,CAAA;EACnD,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;EAAA,IAAA,KAAA,EAED,SAAwB,MAAA,GAAA;QACpB,OAAOP,IAAI,CAAC4F,SAAS,CAAC,IAAI,CAAC7X,IAAI,CAACghB,OAAO,EAAE,CAAC,CAAA;EAC9C,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;EAAA,IAAA,KAAA,EAED,SAAgB7hB,QAAAA,CAAAA,IAAgB,EAAEgR,UAAuB,EAAU;EAC/D,MAAA,IAAI,CAAC8Q,UAAU,CAAC9hB,IAAI,EAAEgR,UAAU,CAAC,CAAA;QACjC,OAAO,IAAI,CAACvK,OAAO,CAAA;EACvB,KAAA;;EAEA;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAZI,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,iBAAA;EAAA,IAAA,KAAA,EAcA,yBACIsb,MAA4B,EAC5BC,MAA4C,EAC5CC,MAA8B,EACxB;EACN,MAAA,IAAI,OAAOF,MAAM,KAAK,QAAQ,EAAE;EAC5B;EACA,QAAA,IAAI,CAACG,iBAAiB,CAClBH,MAAM,EACNC,MAAM,EACNC,MAAM,KAAA,IAAA,IAANA,MAAM,KAAA,KAAA,CAAA,GAANA,MAAM,GAAI,IAAI,CACjB,CAAA;EACL,OAAC,MAAM;EACH;UACA,IAAI,CAACC,iBAAiB,CAClB,IAAI,EACJH,MAAM,EACNC,MAAM,CACT,CAAA;EACL,OAAA;QAEA,OAAO,IAAI,CAACvb,OAAO,CAAA;EACvB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;MAAA,KAED,EAAA,SAAA,MAAA,CAAcwK,UAAwC,EAAU;QAC5D,IAAI,CAACiR,iBAAiB,CAAC,IAAI,EAAE,IAAI,EAAEjR,UAAU,CAAC,CAAA;QAC9C,OAAO,IAAI,CAACxK,OAAO,CAAA;EACvB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,SAAA;EAAA,IAAA,KAAA,EAED,SAAyB,OAAA,GAAA;EACrB,MAAA,IAAI,CAACsD,gBAAgB,CAAC,IAAI,CAAC,CAAA;QAC3B,OAAO,IAAI,CAACtD,OAAO,CAAA;EACvB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,aAAA;MAAA,KAED,EAAA,SAAA,WAAA,CAAmBnD,MAAc,EAAe;EAC5C,MAAA,OAAO,IAAI,CAACzC,IAAI,CAACwZ,WAAW,CAAC/W,MAAM,CAAC,CAAA;EACxC,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,eAAA;MAAA,KAED,EAAA,SAAA,aAAA,CAAqB7D,IAAY,EAAe;EAC5C,MAAA,OAAO,IAAI,CAACoB,IAAI,CAACshB,aAAa,CAAC1iB,IAAI,CAAC,CAAA;EACxC,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,wBAAA;MAAA,KAED,EAAA,SAAA,sBAAA,CAA8BA,IAAY,EAAQ;EAC9C,MAAA,OAAO,IAAI,CAACoB,IAAI,CAACuhB,sBAAsB,CAAC3iB,IAAI,CAAC,CAAA;EACjD,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,oBAAA;EAAA,IAAA,KAAA,EAED,SAA0BqB,kBAAAA,CAAAA,GAAW,EAAEC,KAAc,EAAU;QAC3D,OAAO,IAAI,CAACF,IAAI,CAACwhB,kBAAkB,CAACvhB,GAAG,EAAEC,KAAK,CAAC,CAAA;EACnD,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,sBAAA;MAAA,KAED,EAAA,SAAA,oBAAA,CACI0F,OAA0C,EAC/B;QACX,OAAO,IAAI,CAACgb,OAAO,CAACjc,MAAM,CAACiB,OAAO,CAAC,CAAC,CAAA;EACxC,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,mBAAA;MAAA,KAED,EAAA,SAAA,iBAAA,CAAyB5E,QAAiC,EAAe;EACrE,MAAA,OAAO,IAAI,CAAChB,IAAI,CAACiC,iBAAiB,CAACjB,QAAQ,CAAC,CAAA;EAChD,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;EAAA,IAAA,KAAA,EAED,kBACIZ,IAAU,EACV8gB,MAAmC,EACnCC,MAAyB,EACnB;EAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;QACN,IAAI,CAAC/gB,IAAI,EAAE;UACP,MAAM0gB,KAAK,CAACb,mBAAmB,CAAC,CAAA;EACpC,OAAA;EAEA,MAAA,IAAMwB,WAAW,GAAG,SAAdA,WAAW,GAA6C;EAC1D,QAAA,IAAIrR,UAAmC,CAAA;EACvC,QAAA,IAAI5H,KAAqB,CAAA;EAEzB,QAAA,IAAI+D,UAAU,CAAC2U,MAAM,CAAC,EAAE;EACpB9Q,UAAAA,UAAU,GAAG8Q,MAAiC,CAAA;EAC9C1Y,UAAAA,KAAK,GAAG,IAAI,CAAA;EAChB,SAAC,MAAM;EACHA,UAAAA,KAAK,GAAG0Y,MAAiB,CAAA;EACzB9Q,UAAAA,UAAU,GAAG+Q,MAA0B,CAAA;EAC3C,SAAA;UAEA,IAAI3Y,KAAK,IAAI,IAAI,EAAE;EAAA,UAAA,IAAA,oBAAA,CAAA;EACfA,UAAAA,KAAK,2BAAG,MAAI,CAAC1D,OAAO,CAAC0D,KAAK,uEAAI,KAAK,CAAA;EACvC,SAAA;EAEA,QAAA,OAAO,CAACA,KAAK,EAAE4H,UAAU,CAAC,CAAA;SAC7B,CAAA;EAED,MAAA,IAAA,YAAA,GAA4BqR,WAAW,EAAE;EAAA,QAAA,aAAA,GAAA,cAAA,CAAA,YAAA,EAAA,CAAA,CAAA;UAAlCjZ,KAAK,GAAA,aAAA,CAAA,CAAA,CAAA;UAAE4H,UAAU,GAAA,aAAA,CAAA,CAAA,CAAA,CAAA;QAExB,IAAI,CAAC7H,SAAS,CAACnI,IAAI,EAAEoI,KAAK,EAAE4H,UAAU,CAAC,CAAA;QACvC,OAAO,IAAI,CAACxK,OAAO,CAAA;EACvB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,WAAA;EAAA,IAAA,KAAA,EAED,SAAiBxF,SAAAA,CAAAA,IAAU,EAAEygB,UAA2B,EAAU;QAC9D,IAAI,CAACzgB,IAAI,EAAE;UACP,MAAM0gB,KAAK,CAACb,mBAAmB,CAAC,CAAA;EACpC,OAAA;EAEA,MAAA,IAAMzX,KAAK,GAAGqY,UAAU,KAAA,IAAA,IAAVA,UAAU,KAAA,KAAA,CAAA,GAAVA,UAAU,GAAI,IAAI,CAAC/b,OAAO,CAAC0D,KAAK,CAAA;QAE9C,IAAIpI,IAAI,CAAC+F,QAAQ,EAAE,IAAI/F,IAAI,CAACX,aAAa,EAAE;EACvC,QAAA,IAAIgf,aAAa,CAACre,IAAI,EAAE,IAAI,CAAC,CAACshB,KAAK,CAC/BlZ,KAAK,EACL,IAAI,CAAC1D,OAAO,CAAC4Z,cAAc,CAC9B,CAAA;UAED,IAAI,CAACzE,SAAS,EAAE,CAAA;EACpB,OAAA;QAEA,OAAO,IAAI,CAACrU,OAAO,CAAA;EACvB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;EAAA,IAAA,KAAA,EAED,SAA6B,UAAA,GAAA;EACzB,MAAA,OAAO,IAAI,CAACyW,UAAU,CAAC9X,UAAU,CAAA;EACrC,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,iBAAA;EAAA,IAAA,KAAA,EAED,SAAiC,eAAA,GAAA;EAC7B,MAAA,IAAI,CAAC8X,UAAU,CAAC/W,OAAO,EAAE,CAAA;QACzB,OAAO,IAAI,CAACM,OAAO,CAAA;EACvB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,cAAA;EAAA,IAAA,KAAA,EAED,SACI+b,YAAAA,CAAAA,WAAqB,EACrBC,YAAkB,EACP;EACX,MAAA,IAAMC,OAAO,GAAGD,YAAY,CAACE,QAAQ,CAACH,WAAW,CAAC,CAAA;EAElD,MAAA,IAAIE,OAAO,EAAE;EACT,QAAA,IAAI,CAAC3Y,gBAAgB,CAAC0Y,YAAY,CAAC/hB,MAAM,CAAC,CAAA;EAC9C,OAAA;EAEA,MAAA,OAAOgiB,OAAO,CAAA;EAClB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,eAAA;EAAA,IAAA,KAAA,EAED,SACIF,aAAAA,CAAAA,WAAqB,EACrBC,YAAkB,EACP;QACX,IAAI,CAACA,YAAY,EAAE;EACf,QAAA,MAAMd,KAAK,CAACZ,cAAc,GAAG,cAAc,CAAC,CAAA;EAChD,OAAA;EAEA,MAAA,IAAM2B,OAAO,GAAGD,YAAY,CAACG,SAAS,CAACJ,WAAW,CAAC,CAAA;EAEnD,MAAA,IAAIE,OAAO,EAAE;EACT,QAAA,IAAI,CAAC3Y,gBAAgB,CAAC0Y,YAAY,CAAC/hB,MAAM,CAAC,CAAA;EAC9C,OAAA;EAEA,MAAA,OAAOgiB,OAAO,CAAA;EAClB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,eAAA;EAAA,IAAA,KAAA,EAED,SACIF,aAAAA,CAAAA,WAAqB,EACrBC,YAAkB,EACP;QACX,IAAI,CAACA,YAAY,EAAE;EACf,QAAA,MAAMd,KAAK,CAACZ,cAAc,GAAG,cAAc,CAAC,CAAA;EAChD,OAAA;EAEA,MAAA,IAAM2B,OAAO,GAAGD,YAAY,CAACI,SAAS,CAACL,WAAW,CAAC,CAAA;EAEnD,MAAA,IAAIE,OAAO,EAAE;EACT,QAAA,IAAI,CAAC3Y,gBAAgB,CAAC2Y,OAAO,CAAChiB,MAAM,CAAC,CAAA;EACzC,OAAA;EAEA,MAAA,OAAOgiB,OAAO,CAAA;EAClB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;MAAA,KAED,EAAA,SAAA,UAAA,CAAkBzhB,IAAU,EAAU;QAClC,IAAI,CAACA,IAAI,EAAE;UACP,MAAM0gB,KAAK,CAACb,mBAAmB,CAAC,CAAA;EACpC,OAAA;EAEA,MAAA,IAAI,CAAC7f,IAAI,CAACP,MAAM,EAAE;UACd,MAAMihB,KAAK,CAAC,oBAAoB,CAAC,CAAA;EACrC,OAAA;QAEA,IAAI,CAACxS,iBAAiB,CAACsL,mBAAmB,CAACxZ,IAAI,EAAE,IAAI,CAAC,CAAC;;EAEvD,MAAA,IAAMP,MAAM,GAAGO,IAAI,CAACP,MAAM,CAAA;QAC1BO,IAAI,CAACuH,MAAM,EAAE,CAAA;EACb,MAAA,IAAI,CAACuB,gBAAgB,CAACrJ,MAAM,CAAC,CAAA;QAE7B,OAAO,IAAI,CAAC+F,OAAO,CAAA;EACvB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;EAAA,IAAA,KAAA,EAED,SAAkB+b,UAAAA,CAAAA,WAAqB,EAAEM,eAAsB,EAAQ;EACnE,MAAA,IAAM9R,UAAU,GAAG8R,eAAe,IAAI,IAAI,CAACjiB,IAAI,CAAA;EAE/C,MAAA,IAAMI,IAAI,GAAG+P,UAAU,CAAC9D,MAAM,CAACsV,WAAW,CAAC,CAAA;EAE3C,MAAA,IAAI,CAACzY,gBAAgB,CAACiH,UAAU,CAAC,CAAA;EAEjC,MAAA,OAAO/P,IAAI,CAAA;EACf,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,aAAA;EAAA,IAAA,KAAA,EAED,SAAmBuhB,WAAAA,CAAAA,WAAqB,EAAEM,eAAsB,EAAQ;QACpE,IAAM9R,UAAU,GAAG8R,eAAe,KAAfA,IAAAA,IAAAA,eAAe,cAAfA,eAAe,GAAI,IAAI,CAACjiB,IAAI,CAAA;EAE/C,MAAA,IAAMI,IAAI,GAAG+P,UAAU,CAAC+R,OAAO,CAACP,WAAW,CAAC,CAAA;EAE5C,MAAA,IAAI,CAACzY,gBAAgB,CAACiH,UAAU,CAAC,CAAA;EAEjC,MAAA,OAAO/P,IAAI,CAAA;EACf,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;EAAA,IAAA,KAAA,EAED,SAAkBA,UAAAA,CAAAA,IAAU,EAAEjB,IAAc,EAAU;QAClD,IAAI,CAACiB,IAAI,EAAE;UACP,MAAM0gB,KAAK,CAACb,mBAAmB,CAAC,CAAA;EACpC,OAAA;EAEA,MAAA,IAAMkC,WAAW,GACb,OAAA,CAAOhjB,IAAI,CAAA,KAAK,QAAQ,IAAIA,IAAI,CAACwD,EAAE,IAAIxD,IAAI,CAACwD,EAAE,KAAKvC,IAAI,CAACuC,EAAE,CAAA;EAE9D,MAAA,IAAIwf,WAAW,EAAE;EACb,QAAA,IAAI,CAACniB,IAAI,CAAC6C,mBAAmB,CAACzC,IAAI,CAAC,CAAA;EACvC,OAAA;EAEAA,MAAAA,IAAI,CAACT,OAAO,CAACR,IAAI,CAAC,CAAA;EAElB,MAAA,IAAIgjB,WAAW,EAAE;EACb,QAAA,IAAI,CAACniB,IAAI,CAACiE,cAAc,CAAC7D,IAAI,CAAC,CAAA;EAClC,OAAA;EAEA,MAAA,IACI,QAAOjB,IAAI,CAAA,KAAK,QAAQ,IACxBA,IAAI,CAAC,UAAU,CAAC,IAChBA,IAAI,CAAC,UAAU,CAAC,YAAYC,KAAK,EACnC;UACEgB,IAAI,CAACD,cAAc,EAAE,CAAA;EAErB,QAAA,IAAIhB,IAAI,CAACS,QAAQ,CAACW,MAAM,EAAE;EACtBH,UAAAA,IAAI,CAACI,YAAY,CAACrB,IAAI,CAACS,QAAQ,CAAW,CAAA;EAC9C,SAAA;EACJ,OAAA;EAEA,MAAA,IAAI,CAACsJ,gBAAgB,CAAC9I,IAAI,CAAC,CAAA;QAE3B,OAAO,IAAI,CAACwF,OAAO,CAAA;EACvB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,yBAAA;MAAA,KAED,EAAA,SAAA,uBAAA,CAAgCwc,OAAa,EAAW;EACpD,MAAA,IAAM7P,YAAY,GAAG,IAAI,CAACC,eAAe,EAAE,CAAA;QAE3C,IAAI,CAACD,YAAY,EAAE;EACf,QAAA,OAAO,KAAK,CAAA;EAChB,OAAC,MAAM;UACH,OAAO6P,OAAO,KAAK7P,YAAY,IAAI6P,OAAO,CAAC7gB,UAAU,CAACgR,YAAY,CAAC,CAAA;EACvE,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;EAAA,IAAA,KAAA,EAED,kBAAgBnS,IAAU,EAAEkB,UAAgB,EAAE3C,QAAgB,EAAU;QACpE,IAAI,CAACyB,IAAI,EAAE;UACP,MAAM0gB,KAAK,CAACb,mBAAmB,CAAC,CAAA;EACpC,OAAA;QAEA,IAAI,CAAC3e,UAAU,EAAE;EACb,QAAA,MAAMwf,KAAK,CAACZ,cAAc,GAAG,YAAY,CAAC,CAAA;EAC9C,OAAA;EAEA,MAAA,IAAMmC,aAAa,GAAGpjB,WAAW,CAACN,QAAQ,CAAC,CAAA;QAE3C,IAAI0jB,aAAa,KAAKjd,SAAS,EAAE;UAC7B,IAAI,CAACpF,IAAI,CAACgJ,QAAQ,CAAC5I,IAAI,EAAEkB,UAAU,EAAE+gB,aAAa,CAAC,CAAA;EACnD,QAAA,IAAI,CAACnZ,gBAAgB,CAAC,IAAI,CAAC,CAAA;EAC/B,OAAA;QAEA,OAAO,IAAI,CAACtD,OAAO,CAAA;EACvB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,qBAAA;EAAA,IAAA,KAAA,EAED,SAAgD,mBAAA,GAAA;EAC5C,MAAA,OAAO,IAAI,CAAC0c,gBAAgB,CAAClJ,mBAAmB,EAAE,CAAA;EACtD,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,gBAAA;EAAA,IAAA,KAAA,EAED,SAAsBhZ,cAAAA,CAAAA,IAAU,EAAE6d,YAAsB,EAAU;QAC9D,IAAI,CAAC7d,IAAI,EAAE;UACP,MAAM0gB,KAAK,CAACb,mBAAmB,CAAC,CAAA;EACpC,OAAA;EAEA,MAAA,IAAI,CAAC3R,iBAAiB,CAACoL,cAAc,CAACtZ,IAAI,CAAC,CAAA;EAE3C,MAAA,IAAI,CAAC8G,sBAAsB,CAAC9G,IAAI,CAAC,CAACmiB,MAAM,CACpCtE,YAAY,KAAK7Y,SAAS,GAAG,IAAI,GAAG6Y,YAAY,CACnD,CAAA;QAED,IAAI,CAAChE,SAAS,EAAE,CAAA;QAEhB,OAAO,IAAI,CAACrU,OAAO,CAAA;EACvB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,kBAAA;EAAA,IAAA,KAAA,EAED,SAAkC,gBAAA,GAAA;EAC9B,MAAA,OAAO,IAAI,CAAC0I,iBAAiB,CAACqK,gBAAgB,EAAE,CAAA;EACpD,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,gBAAA;MAAA,KAED,EAAA,SAAA,cAAA,CAAsBvY,IAAU,EAAW;QACvC,IAAI,CAACA,IAAI,EAAE;UACP,MAAM0gB,KAAK,CAACb,mBAAmB,CAAC,CAAA;EACpC,OAAA;EAEA,MAAA,OAAO,IAAI,CAAC3R,iBAAiB,CAACC,cAAc,CAACnO,IAAI,CAAC,CAAA;EACtD,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,qBAAA;MAAA,KAED,EAAA,SAAA,mBAAA,CAA2BA,IAAU,EAAU;QAC3C,IAAI,CAACA,IAAI,EAAE;UACP,MAAM0gB,KAAK,CAACb,mBAAmB,CAAC,CAAA;EACpC,OAAA;EAEA,MAAA,IAAI,CAAC3R,iBAAiB,CAACsL,mBAAmB,CAACxZ,IAAI,CAAC,CAAA;EAEhD,MAAA,IAAI,CAAC8G,sBAAsB,CAAC9G,IAAI,CAAC,CAACoiB,QAAQ,EAAE,CAAA;QAC5C,IAAI,CAACvI,SAAS,EAAE,CAAA;QAEhB,OAAO,IAAI,CAACrU,OAAO,CAAA;EACvB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,cAAA;MAAA,KAED,EAAA,SAAA,YAAA,CAAoBxF,IAAU,EAAU;QACpC,IAAI,CAACA,IAAI,EAAE;UACP,MAAM0gB,KAAK,CAACb,mBAAmB,CAAC,CAAA;EACpC,OAAA;QAEA,IAAMwC,UAAU,GAAG9d,MAAM,CAACvE,IAAI,CAACwF,OAAO,CAAC,CAACL,MAAM,EAAE,CAAA;QAChD,IAAMmd,OAAO,GAAGD,UAAU,GAAGA,UAAU,CAAChd,GAAG,GAAG,CAAC,CAAA;EAE/C,MAAA,IAAMkd,UAAU,GAAG,IAAI,CAACtS,GAAG,CAAC9K,MAAM,EAAE,CAAA;QACpC,IAAMsV,OAAO,GAAG8H,UAAU,GAAGA,UAAU,CAACld,GAAG,GAAG,CAAC,CAAA;EAE/C,MAAA,IAAMA,GAAG,GAAGid,OAAO,GAAG7H,OAAO,CAAA;EAE7B,MAAA,IAAI,CAACnH,aAAa,CAACkP,SAAS,CAACnd,GAAG,CAAC,CAAA;QAEjC,OAAO,IAAI,CAACG,OAAO,CAAA;EACvB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;EAAA,IAAA,KAAA,EAED,SAAqC,QAAA,GAAA;EACjC,MAAA,OAAO,IAAI,CAAC0c,gBAAgB,CAACxK,QAAQ,EAAE,CAAA;EAC3C,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;MAAA,KAED,EAAA,SAAA,QAAA,CAAgBF,KAAiB,EAAU;EACvC,MAAA,IAAI,CAAC0K,gBAAgB,CAACO,eAAe,CAACjL,KAAK,CAAC,CAAA;EAC5C,MAAA,IAAI,CAAC1O,gBAAgB,CAAC,IAAI,CAAC,CAAA;QAE3B,OAAO,IAAI,CAACtD,OAAO,CAAA;EACvB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,WAAA;EAAA,IAAA,KAAA,EAED,SAAiBkd,SAAAA,CAAAA,MAAc,EAAE5iB,KAAc,EAAU;EACpD,MAAA,IAAI,CAAC4E,OAAO,CAAwCge,MAAM,CAAC,GAAG5iB,KAAK,CAAA;QACpE,OAAO,IAAI,CAAC0F,OAAO,CAAA;EACvB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;EAAA,IAAA,KAAA,EAED,SAA0B,QAAA,GAAA;EACtB,MAAA,IAAM2M,YAAY,GAAG,IAAI,CAACC,eAAe,EAAE,CAAA;EAC3C,MAAA,IAAID,YAAY,EAAE;EACd,QAAA,IAAI,CAACwQ,UAAU,CAACpQ,QAAQ,CAACJ,YAAY,CAAC,CAAA;EAC1C,OAAA;QAEA,OAAO,IAAI,CAAC3M,OAAO,CAAA;EACvB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;EAAA,IAAA,KAAA,EAED,SAAwB,MAAA,GAAA;EACpB,MAAA,IAAM2M,YAAY,GAAG,IAAI,CAACC,eAAe,EAAE,CAAA;EAC3C,MAAA,IAAID,YAAY,EAAE;EACd,QAAA,IAAI,CAACwQ,UAAU,CAAClQ,MAAM,CAACN,YAAY,CAAC,CAAA;EACxC,OAAA;QAEA,OAAO,IAAI,CAAC3M,OAAO,CAAA;EACvB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;EAAA,IAAA,KAAA,EAED,SAA4B,UAAA,GAAA;EACxB,MAAA,OAAOod,OAAW,CAAA;EACtB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,eAAA;EAAA,IAAA,KAAA,EAED,SACIC,aAAAA,CAAAA,SAAiB,EACjBC,MAAgC,EACpB;QACZ,IAAM/Z,KAAK,GAAGxE,MAAM,CAACwe,KAAK,CAACF,SAAS,EAAEC,MAAM,CAAC,CAAA;EAC7C,MAAA,IAAI,CAACtd,OAAO,CAAC0Y,OAAO,CAACnV,KAAK,CAAC,CAAA;EAC3B,MAAA,OAAOA,KAAK,CAAA;EAChB,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,WAAA;MAAA,KAED,EAAA,SAAA,SAAA,CACI/I,IAAU,EAGN;EAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;QAAA,IAFJoI,KAAK,uEAAG,IAAI,CAAA;EAAA,MAAA,IACZ4H,UAAmC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA;QAEnC,IAAMgT,UAAU,GAAG,SAAbA,UAAU,CACZC,KAAW,EACXC,MAAe,EACfC,WAAoC,EAC7B;UACP,IAAMC,aAAa,GAAG,IAAI/E,aAAa,CAAC4E,KAAK,EAAE,MAAI,CAAC,CAAA;EACpDG,QAAAA,aAAa,CAACC,IAAI,CACdF,WAAW,EACXD,MAAM,EACN,MAAI,CAACxe,OAAO,CAAC4Z,cAAc,CAC9B,CAAA;SACJ,CAAA;QAED,IAAIte,IAAI,CAAC+F,QAAQ,EAAE,IAAI/F,IAAI,CAACX,aAAa,EAAE;UACvC,IAAIW,IAAI,CAACV,cAAc,EAAE;YACrB,IAAI,CAACgkB,kBAAkB,CAACtjB,IAAI,EAAEoI,KAAK,EAAE4H,UAAU,CAAC,CAAA;EACpD,SAAC,MAAM;EACH,UAAA,IAAIvQ,MAAM,GAAGO,IAAI,CAACP,MAAM,CAAA;EAExB,UAAA,OAAOA,MAAM,EAAE;EACX;cACA,IAAIA,MAAM,CAACA,MAAM,EAAE;EACfujB,cAAAA,UAAU,CAACvjB,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;EACnC,aAAA;cACAA,MAAM,GAAGA,MAAM,CAACA,MAAM,CAAA;EAC1B,WAAA;EAEAujB,UAAAA,UAAU,CAAChjB,IAAI,EAAEoI,KAAK,EAAE4H,UAAU,CAAC,CAAA;YACnC,IAAI,CAAC6J,SAAS,EAAE,CAAA;EACpB,SAAA;EACJ,OAAA;EACJ,KAAA;;EAEA;EACJ;EACA;EACA;EAHI,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,kBAAA;MAAA,KAIA,EAAA,SAAA,gBAAA,CAAwBlN,QAAqB,EAAQ;EACjD,MAAA,IAAMkR,YAAY,GAAG,IAAI,CAAC3P,iBAAiB,CAACwF,aAAa,EAAE,CAAA;QAC3D,IAAM6P,UAAU,GAAG5W,QAAQ,GACrB,IAAI,CAAC6W,uBAAuB,CAAC7W,QAAQ,CAAC,GACtC,KAAK,CAAA;EAEX,MAAA,IAAI,CAACgS,QAAQ,CAAC8E,MAAM,CAAC9W,QAAQ,CAAC,CAAA;EAE9B,MAAA,IAAI4W,UAAU,EAAE;EACZ,QAAA,IAAI,CAACG,iBAAiB,CAAC7F,YAAY,CAAC,CAAA;EACxC,OAAA;EAEA,MAAA,IAAI,CAAC7U,aAAa,CAAC,cAAc,CAAC,CAAA;EACtC,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,wBAAA;MAAA,KAED,EAAA,SAAA,sBAAA,CAA8BhJ,IAAU,EAAe;EACnD,MAAA,IAAIA,IAAI,CAAC+F,QAAQ,EAAE,EAAE;EACjB,QAAA,OAAO,IAAIsY,aAAa,CAACre,IAAI,EAAE,IAAI,CAAC,CAAA;EACxC,OAAC,MAAM;EACH,QAAA,OAAO,IAAIyd,WAAW,CAACzd,IAAI,EAAE,IAAI,CAAC,CAAA;EACtC,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,iBAAA;MAAA,KAED,EAAA,SAAA,eAAA,CAAuBsE,QAA6B,EAAsB;EACtE,MAAA,IAAMtE,IAAI,GAAG,IAAI,CAACwgB,OAAO,CAAClc,QAAQ,CAAC,CAAA;EACnC,MAAA,IAAItE,IAAI,EAAE;EACN,QAAA,OAAO,IAAI,CAAC8G,sBAAsB,CAAC9G,IAAI,CAAC,CAAA;EAC5C,OAAC,MAAM;EACH,QAAA,OAAO,IAAI,CAAA;EACf,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,kBAAA;MAAA,KAED,EAAA,SAAA,gBAAA,CAAwBwF,OAAoB,EAAW;QACnD,IAAMxF,IAAI,GAAG,IAAI,CAACwgB,OAAO,CAACjc,MAAM,CAACiB,OAAO,CAAC,CAAC,CAAA;QAE1C,OAAOxF,IAAI,IAAI,IAAI,IAAIA,IAAI,CAACJ,IAAI,KAAK,IAAI,CAACA,IAAI,CAAA;EAClD,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,gBAAA;EAAA,IAAA,KAAA,EAED,SAAgC,cAAA,GAAA;EAC5B,MAAA,OAAO,IAAI,CAAC0T,aAAa,CAACqQ,aAAa,EAAE,CAAA;EAC7C,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,MAAA;EAAA,IAAA,KAAA,EAED,SAAoB,IAAA,GAAA;EAChB,MAAA,IAAA,CAAA,eAAA,CAAA,YAAA,CAAA,SAAA,CAAA,EAAA,MAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;EAEA,MAAA,IAAI,CAACne,OAAO,GAAG,IAAI,CAACyK,GAAG,CAAA;QACvB,IAAI,CAACkK,aAAa,GAAG,KAAK,CAAA;QAE1B,IAAI,CAACzV,OAAO,CAACgJ,GAAG,GAAG,IAAI,CAACkW,YAAY,EAAE,CAAA;EAEtC,MAAA,IAAI,IAAI,CAAClf,OAAO,CAACgI,UAAU,IAAI,IAAI,EAAE;UACjC,IAAI,CAAChI,OAAO,CAACgI,UAAU,GAAG,IAAI,CAACmX,oBAAoB,EAAE,CAAA;EACzD,OAAA;EAEA,MAAA,IAAI,CAAClF,QAAQ,GAAG,IAAItS,gBAAgB,CAAC,IAAI,CAAC,CAAA;EAC1C,MAAA,IAAI,CAACyX,UAAU,GAAG,IAAIjU,UAAU,CAAC,IAAI,CAAC,CAAA;EACtC,MAAA,IAAI,CAACqS,gBAAgB,GAAG,IAAI3K,gBAAgB,CAAC,IAAI,CAAC,CAAA;EAClD,MAAA,IAAI,CAACrJ,iBAAiB,GAAG,IAAIgP,iBAAiB,CAAC,IAAI,CAAC,CAAA;EACpD,MAAA,IAAI,CAACjB,UAAU,GAAG,IAAIlY,kBAAkB,CAAC,IAAI,CAAC,CAAA;EAC9C,MAAA,IAAI,CAACuP,aAAa,GAAG,IAAI4G,aAAa,CAAC,IAAI,CAAC,CAAA;EAC5C,MAAA,IAAI,CAACyI,UAAU,GAAG,IAAI3Q,UAAU,CAAC,IAAI,CAAC,CAAA;QAEtC,IAAI,CAAC+R,QAAQ,EAAE,CAAA;QAEf,IAAI,CAACve,OAAO,CAACuN,EAAE,CAAC,OAAO,EAAE,IAAI,CAACiR,WAAW,CAAC,CAAA;QAC1C,IAAI,CAACxe,OAAO,CAACuN,EAAE,CAAC,UAAU,EAAE,IAAI,CAACkR,cAAc,CAAC,CAAA;EAEhD,MAAA,IAAI,IAAI,CAACvf,OAAO,CAACwf,cAAc,EAAE;UAC7B,IAAI,CAAC1e,OAAO,CAACuN,EAAE,CAAC,aAAa,EAAE,IAAI,CAACoR,iBAAiB,CAAC,CAAA;EAC1D,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,QAAA;EAAA,IAAA,KAAA,EAED,SAAsB,MAAA,GAAA;EAClB,MAAA,IAAI,CAAC3e,OAAO,CAACqD,KAAK,EAAE,CAAA;EACpB,MAAA,IAAI,CAACrD,OAAO,CAACyN,GAAG,EAAE,CAAA;EAElB,MAAA,IAAI,CAAC0P,UAAU,CAACvN,MAAM,EAAE,CAAA;QAExB,IAAI,CAACxV,IAAI,GAAG,IAAIX,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;EAE9B,MAAA,IAAA,CAAA,eAAA,CAAA,YAAA,CAAA,SAAA,CAAA,EAAA,QAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,cAAA;MAAA,KAED,EAAA,SAAA,YAAA,CAAuBoF,YAA0B,EAAkB;EAC/D,MAAA,IAAI,IAAI,CAACK,OAAO,CAACiJ,WAAW,EAAE;EAC1B,QAAA,OAAO,IAAI,CAACsO,UAAU,CAACtF,YAAY,CAACtS,YAAY,CAAC,CAAA;EACrD,OAAC,MAAM;EACH,QAAA,OAAO,KAAK,CAAA;EAChB,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;MAAA,KAED,EAAA,SAAA,UAAA,CAAqBA,YAA0B,EAAW;EACtD,MAAA,IAAI,IAAI,CAACK,OAAO,CAACiJ,WAAW,EAAE;EAC1B,QAAA,OAAO,IAAI,CAACsO,UAAU,CAAC5E,UAAU,CAAChT,YAAY,CAAC,CAAA;EACnD,OAAC,MAAM;EACH,QAAA,OAAO,KAAK,CAAA;EAChB,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,WAAA;MAAA,KAED,EAAA,SAAA,SAAA,CAAoBA,YAA0B,EAAW;EACrD,MAAA,IAAI,IAAI,CAACK,OAAO,CAACiJ,WAAW,EAAE;UAC1B,IAAM3M,MAAM,GAAG,IAAI,CAACib,UAAU,CAAC7E,SAAS,CAAC/S,YAAY,CAAC,CAAA;EAEtD,QAAA,IAAI,CAACiP,aAAa,CAAC8Q,cAAc,EAAE,CAAA;EACnC,QAAA,OAAOpjB,MAAM,CAAA;EACjB,OAAC,MAAM;EACH,QAAA,OAAO,KAAK,CAAA;EAChB,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,WAAA;MAAA,KAED,EAAA,SAAA,SAAA,CAAoBqD,YAA0B,EAAW;EACrD,MAAA,IAAI,IAAI,CAACK,OAAO,CAACiJ,WAAW,EAAE;EAC1B,QAAA,OAAO,IAAI,CAACsO,UAAU,CAAC3E,SAAS,CAACjT,YAAY,CAAC,CAAA;EAClD,OAAC,MAAM;EACH,QAAA,OAAO,KAAK,CAAA;EAChB,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,eAAA;EAAA,IAAA,KAAA,EAED,SAAkC,aAAA,GAAA;EAAA,MAAA,IAAA,qBAAA,CAAA;EAC9B,MAAA,OAAA,CAAA,qBAAA,GAAO,IAAI,CAACK,OAAO,CAAC2f,aAAa,yEAAI,CAAC,CAAA;EAC1C,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;EAAA,IAAA,KAAA,EAED,SAAyB,QAAA,GAAA;EACrB,MAAA,IAAI,IAAI,CAAC3f,OAAO,CAAC3F,IAAI,EAAE;UACnB,IAAI,CAAC8hB,UAAU,CAAC,IAAI,CAACnc,OAAO,CAAC3F,IAAI,EAAE,IAAI,CAAC,CAAA;EAC5C,OAAC,MAAM;EACH,QAAA,IAAMulB,OAAO,GAAG,IAAI,CAACC,cAAc,CAAC,IAAI,CAAC,CAAA;EAEzC,QAAA,IAAID,OAAO,EAAE;YACT,IAAI,CAACrD,iBAAiB,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;EAC5C,SAAC,MAAM;EACH,UAAA,IAAI,CAACJ,UAAU,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;EAC7B,SAAA;EACJ,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,gBAAA;MAAA,KAED,EAAA,SAAA,cAAA,CAAuB7gB,IAAiB,EAA8B;EAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;EAClE,MAAA,IAAMskB,OAAO,GACT,IAAI,CAAC5f,OAAO,CAAC4f,OAAO,IAAK,IAAI,CAAC9e,OAAO,CAACzG,IAAI,CAAC,KAAK,CAAmB,CAAA;EAEvE,MAAA,IAAMylB,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAIvT,GAAW,EAA0B;EAC3D,QAAA,IAAMnB,OAA4B,GAAG;EAAEmB,UAAAA,GAAG,EAAHA,GAAAA;WAAK,CAAA;UAE5CwT,cAAc,CAAC3U,OAAO,CAAC,CAAA;EAEvB,QAAA,OAAOA,OAAO,CAAA;SACjB,CAAA;EAED,MAAA,IAAM2U,cAAc,GAAG,SAAjBA,cAAc,CAAI3U,OAA4B,EAAW;EAC3D,QAAA,IAAI9P,IAAI,KAAJA,IAAAA,IAAAA,IAAI,eAAJA,IAAI,CAAEuC,EAAE,EAAE;EACV;EACA,UAAA,IAAMxD,IAAI,GAAG;cAAEiB,IAAI,EAAEA,IAAI,CAACuC,EAAAA;aAAI,CAAA;EAC9BuN,UAAAA,OAAO,CAAC,MAAM,CAAC,GAAG/Q,IAAI,CAAA;EAC1B,SAAC,MAAM;EACH;EACA,UAAA,IAAM2lB,cAAc,GAAG,MAAI,CAACC,qBAAqB,EAAE,CAAA;EACnD,UAAA,IAAID,cAAc,EAAE;EAChB,YAAA,IAAM3lB,KAAI,GAAG;EAAE0Z,cAAAA,aAAa,EAAEiM,cAAAA;eAAgB,CAAA;EAC9C5U,YAAAA,OAAO,CAAC,MAAM,CAAC,GAAG/Q,KAAI,CAAA;EAC1B,WAAA;EACJ,SAAA;SACH,CAAA;EAED,MAAA,IAAI,OAAOulB,OAAO,KAAK,UAAU,EAAE;UAC/B,OAAOA,OAAO,CAACtkB,IAAI,CAAC,CAAA;EACxB,OAAC,MAAM,IAAI,OAAOskB,OAAO,KAAK,QAAQ,EAAE;UACpC,OAAOE,gBAAgB,CAACF,OAAO,CAAC,CAAA;SACnC,MAAM,IAAIA,OAAO,IAAI,QAAOA,OAAO,CAAA,KAAK,QAAQ,EAAE;UAC/CG,cAAc,CAACH,OAAO,CAAC,CAAA;EACvB,QAAA,OAAOA,OAAO,CAAA;EAClB,OAAC,MAAM;EACH,QAAA,OAAO,IAAI,CAAA;EACf,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,uBAAA;EAAA,IAAA,KAAA,EAED,SAA+C,qBAAA,GAAA;EAC3C,MAAA,IAAI,IAAI,CAAC5f,OAAO,CAACmV,SAAS,EAAE;EACxB,QAAA,OAAO,IAAI,CAACqI,gBAAgB,CAACyC,qBAAqB,EAAE,CAAA;EACxD,OAAC,MAAM;EACH,QAAA,OAAO,IAAI,CAAA;EACf,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,UAAA;MAAA,KAED,EAAA,SAAA,QAAA,CAAiB5lB,IAAgB,EAAQ;EAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;EACrC,MAAA,IAAM6lB,MAAM,GAAG,SAATA,MAAM,GAAe;EACvB,QAAA,IAAI,CAAC,MAAI,CAACzK,aAAa,EAAE;YACrB,MAAI,CAACA,aAAa,GAAG,IAAI,CAAA;EACzB,UAAA,MAAI,CAACnR,aAAa,CAAC,WAAW,CAAC,CAAA;EACnC,SAAA;SACH,CAAA;EAED,MAAA,IAAI,CAAC,IAAI,CAACtE,OAAO,CAACtF,SAAS,EAAE;EACzB,QAAA,OAAA;EACJ,OAAA;EAEA,MAAA,IAAI,CAACQ,IAAI,GAAG,IAAI,IAAI,CAAC8E,OAAO,CAACtF,SAAS,CAClC,IAAI,EACJ,IAAI,EACJ,IAAI,CAACsF,OAAO,CAACtF,SAAS,CACzB,CAAA;EAED,MAAA,IAAI,CAAC8O,iBAAiB,CAAC1H,KAAK,EAAE,CAAA;EAE9B,MAAA,IAAI,CAAC5G,IAAI,CAACQ,YAAY,CAACrB,IAAI,CAAC,CAAA;EAE5B,MAAA,IAAM2Z,gBAAgB,GAAG,IAAI,CAAC+J,eAAe,EAAE,CAAA;EAE/C,MAAA,IAAI,CAAC3Z,gBAAgB,CAAC,IAAI,CAAC,CAAA;QAE3B,IAAI,CAAC4P,gBAAgB,EAAE;EACnBkM,QAAAA,MAAM,EAAE,CAAA;EACZ,OAAC,MAAM;EACH;EACA,QAAA,IAAI,CAACC,uBAAuB,CAACD,MAAM,CAAC,CAAA;EACxC,OAAA;EACJ,KAAA;;EAEA;EACA;EAAA,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,iBAAA;EAAA,IAAA,KAAA,EACA,SAAmC,eAAA,GAAA;EAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;EAC/B,MAAA,IAAME,YAAY,GAAG,SAAfA,YAAY,GAAoB;EAClC;EACA,QAAA,IAAI,CAAC,MAAI,CAACpgB,OAAO,CAACmV,SAAS,EAAE;EACzB,UAAA,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;EACzB,SAAC,MAAM;EACH,UAAA,IAAMrC,KAAK,GAAG,MAAI,CAAC0K,gBAAgB,CAAClJ,mBAAmB,EAAE,CAAA;YAEzD,IAAI,CAACxB,KAAK,EAAE;EACR,YAAA,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;EACzB,WAAC,MAAM;cACH,IAAMkB,iBAAgB,GAClB,MAAI,CAACwJ,gBAAgB,CAACO,eAAe,CAACjL,KAAK,CAAC,CAAA;;EAEhD;EACA,YAAA,OAAO,CAAC,IAAI,EAAEkB,iBAAgB,CAAC,CAAA;EACnC,WAAA;EACJ,SAAA;SACH,CAAA;EAED,MAAA,IAAMqM,aAAa,GAAG,SAAhBA,aAAa,GAAkB;EACjC;EACA,QAAA,IAAI,MAAI,CAACrgB,OAAO,CAACsgB,QAAQ,KAAK,KAAK,EAAE;EACjC,UAAA,OAAO,KAAK,CAAA;EAChB,SAAA;EAEA,QAAA,IAAMC,QAAQ,GAAG,MAAI,CAACC,mBAAmB,EAAE,CAAA;UAC3C,IAAIxM,gBAAgB,GAAG,KAAK,CAAA;UAE5B,MAAI,CAAC9Y,IAAI,CAACmC,OAAO,CAAC,UAAC/B,IAAU,EAAEc,KAAa,EAAK;YAC7C,IAAId,IAAI,CAACV,cAAc,EAAE;EACrBoZ,YAAAA,gBAAgB,GAAG,IAAI,CAAA;EACvB,YAAA,OAAO,KAAK,CAAA;EAChB,WAAC,MAAM,IAAI,CAAC1Y,IAAI,CAACW,WAAW,EAAE,EAAE;EAC5B,YAAA,OAAO,KAAK,CAAA;EAChB,WAAC,MAAM;cACHX,IAAI,CAAC+C,OAAO,GAAG,IAAI,CAAA;cACnB,OAAOjC,KAAK,KAAKmkB,QAAQ,CAAA;EAC7B,WAAA;EACJ,SAAC,CAAC,CAAA;EAEF,QAAA,OAAOvM,gBAAgB,CAAA;SAC1B,CAAA;EAED,MAAA,IAAA,aAAA,GAAqCoM,YAAY,EAAE;EAAA,QAAA,cAAA,GAAA,cAAA,CAAA,aAAA,EAAA,CAAA,CAAA;UAA9CK,UAAU,GAAA,cAAA,CAAA,CAAA,CAAA;EAAEzM,QAAAA,gBAAgB,qBAAmB;;QAEpD,IAAI,CAACyM,UAAU,EAAE;UACbzM,gBAAgB,GAAGqM,aAAa,EAAE,CAAA;EACtC,OAAA;EAEA,MAAA,OAAOrM,gBAAgB,CAAA;EAC3B,KAAA;;EAEA;EACA;EAAA,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,yBAAA;MAAA,KACA,EAAA,SAAA,uBAAA,CAAgCI,UAAsB,EAAQ;EAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;EAC1D,MAAA,IAAMgM,YAAY,GAAG,SAAfA,YAAY,GAAkB;EAChC,QAAA,IAAI,CAAC,MAAI,CAACpgB,OAAO,CAACmV,SAAS,EAAE;EACzB,UAAA,OAAO,KAAK,CAAA;EAChB,SAAC,MAAM;EACH,UAAA,IAAMrC,KAAK,GAAG,MAAI,CAAC0K,gBAAgB,CAAClJ,mBAAmB,EAAE,CAAA;YAEzD,IAAI,CAACxB,KAAK,EAAE;EACR,YAAA,OAAO,KAAK,CAAA;EAChB,WAAC,MAAM;cACH,MAAI,CAAC0K,gBAAgB,CAAC2C,uBAAuB,CACzCrN,KAAK,EACLsB,UAAU,CACb,CAAA;EAED,YAAA,OAAO,IAAI,CAAA;EACf,WAAA;EACJ,SAAA;SACH,CAAA;EAED,MAAA,IAAMiM,aAAa,GAAG,SAAhBA,aAAa,GAAe;EAC9B,QAAA,IAAME,QAAQ,GAAG,MAAI,CAACC,mBAAmB,EAAE,CAAA;UAC3C,IAAIxL,YAAY,GAAG,CAAC,CAAA;EAEpB,QAAA,IAAME,eAAe,GAAG,SAAlBA,eAAe,CAAI5Z,IAAU,EAAW;EAC1C0Z,UAAAA,YAAY,IAAI,CAAC,CAAA;EACjB,UAAA,MAAI,CAACvR,SAAS,CAACnI,IAAI,EAAE,KAAK,EAAE,YAAM;EAC9B0Z,YAAAA,YAAY,IAAI,CAAC,CAAA;EACjBtB,YAAAA,SAAS,EAAE,CAAA;EACf,WAAC,CAAC,CAAA;WACL,CAAA;EAED,QAAA,IAAMA,SAAS,GAAG,SAAZA,SAAS,GAAe;YAC1B,MAAI,CAACxY,IAAI,CAACmC,OAAO,CAAC,UAAC/B,IAAU,EAAEc,KAAa,EAAK;cAC7C,IAAId,IAAI,CAACV,cAAc,EAAE;EACrB,cAAA,IAAI,CAACU,IAAI,CAAC2P,UAAU,EAAE;kBAClBiK,eAAe,CAAC5Z,IAAI,CAAC,CAAA;EACzB,eAAA;EAEA,cAAA,OAAO,KAAK,CAAA;EAChB,aAAC,MAAM;gBACH,MAAI,CAACmI,SAAS,CAACnI,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;gBAEjC,OAAOc,KAAK,KAAKmkB,QAAQ,CAAA;EAC7B,aAAA;EACJ,WAAC,CAAC,CAAA;YAEF,IAAIvL,YAAY,KAAK,CAAC,EAAE;EACpBZ,YAAAA,UAAU,EAAE,CAAA;EAChB,WAAA;WACH,CAAA;EAEDV,QAAAA,SAAS,EAAE,CAAA;SACd,CAAA;QAED,IAAI,CAAC0M,YAAY,EAAE,EAAE;EACjBC,QAAAA,aAAa,EAAE,CAAA;EACnB,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,qBAAA;EAAA,IAAA,KAAA,EAED,SAAsC,mBAAA,GAAA;EAClC,MAAA,IAAI,IAAI,CAACrgB,OAAO,CAACsgB,QAAQ,KAAK,IAAI,EAAE;EAChC,QAAA,OAAO,CAAC,CAAC,CAAA;SACZ,MAAM,IAAI,OAAO,IAAI,CAACtgB,OAAO,CAACsgB,QAAQ,KAAK,QAAQ,EAAE;EAClD,QAAA,OAAO,IAAI,CAACtgB,OAAO,CAACsgB,QAAQ,CAAA;SAC/B,MAAM,IAAI,OAAO,IAAI,CAACtgB,OAAO,CAACsgB,QAAQ,KAAK,QAAQ,EAAE;UAClD,OAAOI,QAAQ,CAAC,IAAI,CAAC1gB,OAAO,CAACsgB,QAAQ,EAAE,EAAE,CAAC,CAAA;EAC9C,OAAC,MAAM;EACH,QAAA,OAAO,CAAC,CAAA;EACZ,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,gBAAA;MAAA,KAwCD,EAAA,SAAA,cAAA,CAAuBxf,OAAoB,EAAsB;EAC7D,MAAA,IAAM6f,OAAO,GAAG9gB,MAAM,CAACiB,OAAO,CAAC,CAAA;EAE/B,MAAA,IAAM+Y,OAAO,GAAG8G,OAAO,CAAC9E,OAAO,CAAC,iBAAiB,CAAC,CAAA;QAElD,IAAIhC,OAAO,CAACpe,MAAM,EAAE;EAChB,QAAA,IAAMH,MAAI,GAAG,IAAI,CAACwgB,OAAO,CAACjC,OAAO,CAAwB,CAAA;EAEzD,QAAA,IAAIve,MAAI,EAAE;YACN,OAAO;EACHkgB,YAAAA,IAAI,EAAE,QAAQ;EACdlgB,YAAAA,IAAI,EAAJA,MAAAA;aACH,CAAA;EACL,SAAA;EACJ,OAAC,MAAM;EACH,QAAA,IAAMiQ,GAAG,GAAGoV,OAAO,CAAC9E,OAAO,CAAC,iBAAiB,CAAC,CAAA;UAC9C,IAAItQ,GAAG,CAAC9P,MAAM,EAAE;EACZ,UAAA,IAAMH,MAAI,GAAG,IAAI,CAACwgB,OAAO,CAACvQ,GAAG,CAAwB,CAAA;EACrD,UAAA,IAAIjQ,MAAI,EAAE;cACN,OAAO;EACHkgB,cAAAA,IAAI,EAAE,OAAO;EACblgB,cAAAA,IAAI,EAAJA,MAAAA;eACH,CAAA;EACL,WAAA;EACJ,SAAA;EACJ,OAAA;EAEA,MAAA,OAAO,IAAI,CAAA;EACf,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,SAAA;MAAA,KAED,EAAA,SAAA,OAAA,CAAgBsE,QAA6B,EAAe;EACxD,MAAA,IAAMwZ,GAAG,GAAGxZ,QAAQ,CAACic,OAAO,CAAC,kBAAkB,CAAC,CAAA;EAChD,MAAA,IAAIzC,GAAG,CAAC3d,MAAM,KAAK,CAAC,EAAE;EAClB,QAAA,OAAO,IAAI,CAAA;EACf,OAAC,MAAM;EACH,QAAA,OAAO2d,GAAG,CAAC/e,IAAI,CAAC,MAAM,CAAC,CAAA;EAC3B,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,WAAA;EAAA,IAAA,KAAA,EAuBD,SAA0B,SAAA,GAAA;EACtB,MAAA,IAAI,IAAI,CAAC2F,OAAO,CAACmV,SAAS,EAAE;EACxB,QAAA,IAAI,CAACqI,gBAAgB,CAACrI,SAAS,EAAE,CAAA;EACrC,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,mBAAA;MAAA,KAED,EAAA,SAAA,iBAAA,CAA0BgE,YAAqB,EAAQ;EACnD,MAAA,IAAM7d,IAAI,GAAG,IAAI,CAACoS,eAAe,EAAE,CAAA;EACnC,MAAA,IAAIpS,IAAI,EAAE;EACN,QAAA,IAAM4E,WAAW,GAAG,IAAI,CAACkC,sBAAsB,CAAC9G,IAAI,CAAC,CAAA;EACrD,QAAA,IAAI4E,WAAW,EAAE;EACbA,UAAAA,WAAW,CAACud,MAAM,CAACtE,YAAY,CAAC,CAAA;EACpC,SAAA;EACJ,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,qBAAA;EAAA,IAAA,KAAA,EAED,SAAoC,mBAAA,GAAA;EAChC,MAAA,IAAM7d,IAAI,GAAG,IAAI,CAACoS,eAAe,EAAE,CAAA;EACnC,MAAA,IAAIpS,IAAI,EAAE;EACN,QAAA,IAAI,CAACwZ,mBAAmB,CAACxZ,IAAI,CAAC,CAAA;EAClC,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,sBAAA;EAAA,IAAA,KAAA,EAED,SAAuC,oBAAA,GAAA;EACnC,MAAA,IAAI,IAAI,CAAC0E,OAAO,CAACgJ,GAAG,EAAE;EAClB;EACA,QAAA,OAAO,UAAU,CAAA;EACrB,OAAC,MAAM;EACH;EACA,QAAA,OAAO,UAAU,CAAA;EACrB,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,cAAA;EAAA,IAAA,KAAA,EAED,SAAgC,YAAA,GAAA;EAC5B,MAAA,IAAI,IAAI,CAAChJ,OAAO,CAACgJ,GAAG,IAAI,IAAI,EAAE;EAC1B,QAAA,OAAO,IAAI,CAAChJ,OAAO,CAACgJ,GAAG,CAAA;EAC3B,OAAC,MAAM;UACH,IAAM4X,OAAO,GAAG,IAAI,CAAC9f,OAAO,CAACzG,IAAI,CAAC,KAAK,CAAY,CAAA;UAEnD,IACIumB,OAAO,KAAK,IAAI,IAChBA,OAAO,KAAK,KAAK,IACjBA,OAAO,KAAKtgB,SAAS,EACvB;EACE,UAAA,OAAO,IAAI,CAAA;EACf,SAAC,MAAM;EACH,UAAA,OAAO,KAAK,CAAA;EAChB,SAAA;EACJ,OAAA;EACJ,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,cAAA;EAAA,IAAA,KAAA,EAED,SACIhF,YAAAA,CAAAA,IAAiB,EACjB2gB,YAAgC,EAC5B;EAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;EACJ,MAAA,IAAM9G,SAAS,GAAG,SAAZA,SAAS,GAAe;EAC1B,QAAA,IAAI,MAAI,CAACnV,OAAO,CAACmV,SAAS,EAAE;EACxB,UAAA,MAAI,CAACqI,gBAAgB,CAACrI,SAAS,EAAE,CAAA;EACrC,SAAA;SACH,CAAA;QAED,IAAI,CAAC7Z,IAAI,EAAE;EACP;UACA,IAAI,CAACulB,mBAAmB,EAAE,CAAA;EAC1B1L,QAAAA,SAAS,EAAE,CAAA;EACX,QAAA,OAAA;EACJ,OAAA;EACA,MAAA,IAAM2L,cAAc,GAAG;EAAE3H,QAAAA,YAAY,EAAE,IAAI;EAAE4H,QAAAA,UAAU,EAAE,IAAA;SAAM,CAAA;QAC/D,IAAMC,aAAa,qCAAQF,cAAc,CAAA,EAAM7E,YAAY,IAAI,EAAE,CAAG,CAAA;EAEpE,MAAA,IAAMgF,SAAS,GAAG,SAAZA,SAAS,GAAkB;EAC7B,QAAA,IAAI,MAAI,CAACjhB,OAAO,CAACkhB,eAAe,EAAE;EAC9B,UAAA,OACI,MAAI,CAAClhB,OAAO,CAACmhB,UAAU,KAAK,IAAI,IAChC,MAAI,CAACnhB,OAAO,CAACkhB,eAAe,CAAC5lB,IAAI,CAAC,CAAA;EAE1C,SAAC,MAAM;EACH,UAAA,OAAO,MAAI,CAAC0E,OAAO,CAACmhB,UAAU,KAAK,IAAI,CAAA;EAC3C,SAAA;SACH,CAAA;EAED,MAAA,IAAMC,WAAW,GAAG,SAAdA,WAAW,GAAe;EAC5B,QAAA,IAAMrmB,MAAM,GAAGO,IAAI,CAACP,MAAM,CAAA;UAE1B,IAAIA,MAAM,IAAIA,MAAM,CAACA,MAAM,IAAI,CAACA,MAAM,CAACsD,OAAO,EAAE;EAC5C,UAAA,MAAI,CAACqQ,QAAQ,CAAC3T,MAAM,EAAE,KAAK,CAAC,CAAA;EAChC,SAAA;SACH,CAAA;QAED,IAAI,CAACkmB,SAAS,EAAE,EAAE;EACd,QAAA,OAAA;EACJ,OAAA;QAEA,IAAI,IAAI,CAACzX,iBAAiB,CAACC,cAAc,CAACnO,IAAI,CAAC,EAAE;UAC7C,IAAI0lB,aAAa,CAACD,UAAU,EAAE;YAC1B,IAAI,CAACF,mBAAmB,EAAE,CAAA;EAC1B,UAAA,IAAI,CAACvc,aAAa,CAAC,aAAa,EAAE;EAC9BhJ,YAAAA,IAAI,EAAE,IAAI;EACV+lB,YAAAA,aAAa,EAAE/lB,IAAAA;EACnB,WAAC,CAAC,CAAA;EACN,SAAA;EACJ,OAAC,MAAM;EACH,QAAA,IAAMgmB,cAAc,GAAG,IAAI,CAAC5T,eAAe,EAAE,IAAI,IAAI,CAAA;UACrD,IAAI,CAACmT,mBAAmB,EAAE,CAAA;UAC1B,IAAI,CAACjM,cAAc,CAACtZ,IAAI,EAAE0lB,aAAa,CAAC7H,YAAY,CAAC,CAAA;EAErD,QAAA,IAAI,CAAC7U,aAAa,CAAC,aAAa,EAAE;EAC9BhJ,UAAAA,IAAI,EAAJA,IAAI;EACJimB,UAAAA,eAAe,EAAED,cAAAA;EACrB,SAAC,CAAC,CAAA;EACFF,QAAAA,WAAW,EAAE,CAAA;EACjB,OAAA;EAEAjM,MAAAA,SAAS,EAAE,CAAA;EACf,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,YAAA;EAAA,IAAA,KAAA,EAED,SAAmB9a,UAAAA,CAAAA,IAAuB,EAAEgR,UAAuB,EAAQ;EACvE,MAAA,IAAIhR,IAAI,EAAE;EACN,QAAA,IAAIgR,UAAU,EAAE;EACZ,UAAA,IAAI,CAACmW,aAAa,CAACnW,UAAU,CAAC,CAAA;EAC9B,UAAA,IAAI,CAACoW,WAAW,CAACpnB,IAAI,EAAEgR,UAAU,CAAC,CAAA;EACtC,SAAC,MAAM;EACH,UAAA,IAAI,CAACqW,QAAQ,CAACrnB,IAAI,CAAC,CAAA;EACvB,SAAA;EAEA,QAAA,IAAI,IAAI,CAACoF,UAAU,EAAE,EAAE;EACnB,UAAA,IAAI,CAAC8X,UAAU,CAAC/W,OAAO,EAAE,CAAA;EAC7B,SAAA;EACJ,OAAA;EAEA,MAAA,IAAI,CAAC8D,aAAa,CAAC,gBAAgB,EAAE;EACjCqd,QAAAA,SAAS,EAAEtnB,IAAI;EACfunB,QAAAA,WAAW,EAAEvW,UAAAA;EACjB,OAAC,CAAC,CAAA;EACN,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,eAAA;MAAA,KAED,EAAA,SAAA,aAAA,CAAsBA,UAAgB,EAAQ;QAC1C,IAAMwW,wBAAwB,GAC1B,IAAI,CAACrY,iBAAiB,CAACsY,qBAAqB,CAACzW,UAAU,CAAC,CAAA;EAAC,MAAA,IAAA,SAAA,GAAA,0BAAA,CAC7CwW,wBAAwB,CAAA;EAAA,QAAA,KAAA,CAAA;EAAA,MAAA,IAAA;UAAxC,KAA0C,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;EAAA,UAAA,IAA/BzkB,CAAC,GAAA,KAAA,CAAA,KAAA,CAAA;EACR,UAAA,IAAI,CAACoM,iBAAiB,CAACsL,mBAAmB,CAAC1X,CAAC,CAAC,CAAA;EACjD,SAAA;EAAC,OAAA,CAAA,OAAA,GAAA,EAAA;EAAA,QAAA,SAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;EAAA,OAAA,SAAA;EAAA,QAAA,SAAA,CAAA,CAAA,EAAA,CAAA;EAAA,OAAA;EACL,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,aAAA;EAAA,IAAA,KAAA,EAED,SAAoB/C,WAAAA,CAAAA,IAAgB,EAAEgR,UAAgB,EAAQ;EAC1DA,MAAAA,UAAU,CAAC3P,YAAY,CAACrB,IAAI,CAAC,CAAA;QAE7BgR,UAAU,CAACzQ,cAAc,GAAG,KAAK,CAAA;QACjCyQ,UAAU,CAACJ,UAAU,GAAG,KAAK,CAAA;EAE7B,MAAA,IAAI,CAAC7G,gBAAgB,CAACiH,UAAU,CAAC,CAAA;EACrC,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,mBAAA;EAAA,IAAA,KAAA,EAED,2BACI0W,YAAiD,EACjD1W,UAAuB,EACvBC,UAAwC,EACpC;QACJ,IAAMF,OAAO,GAAG2W,YAAY,IAAI,IAAI,CAAClC,cAAc,CAACxU,UAAU,CAAC,CAAA;QAE/D,IAAI,CAAC+T,UAAU,CAAC4C,WAAW,CAAC5W,OAAO,EAAEC,UAAU,EAAEC,UAAU,CAAC,CAAA;EAChE,KAAA;EAAC,GAAA,EAAA;EAAA,IAAA,GAAA,EAAA,oBAAA;MAAA,KAED,EAAA,SAAA,kBAAA,CACIhQ,IAAU,EAGN;EAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;QAAA,IAFJoI,KAAK,uEAAG,IAAI,CAAA;EAAA,MAAA,IACZ4H,UAAmC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA;QAEnChQ,IAAI,CAAC2P,UAAU,GAAG,IAAI,CAAA;EAEtB,MAAA,IAAI,CAACsR,iBAAiB,CAAC,IAAI,EAAEjhB,IAAI,EAAE,YAAM;UACrC,MAAI,CAACmI,SAAS,CAACnI,IAAI,EAAEoI,KAAK,EAAE4H,UAAU,CAAC,CAAA;EAC3C,OAAC,CAAC,CAAA;EACN,KAAA;EAAC,GAAA,CAAA,CAAA,CAAA;EAAA,EAAA,OAAA,YAAA,CAAA;EAAA,CAAA,CA3nC6BwF,WAAW,EAAA;EA4nC5C,eAAA,CA5nCYuK,YAAY,EACsB,UAAA,EAAA;EACvCzB,EAAAA,cAAc,EAAE,MAAM;EACtB7Y,EAAAA,UAAU,EAAE,IAAI;EAChBuf,EAAAA,QAAQ,EAAE,KAAK;EAAE;EACjB/V,EAAAA,UAAU,EAAE,IAAI;EAChB;EACA;EACAvC,EAAAA,UAAU,EAAE1H,SAAS;EACrBjG,EAAAA,IAAI,EAAEiG,SAAS;EACf2M,EAAAA,UAAU,EAAE3M,SAAS;EACrBsf,EAAAA,OAAO,EAAEtf,SAAS;EAClB2I,EAAAA,WAAW,EAAE,KAAK;EAClBmF,EAAAA,eAAe,EAAE,IAAI;EACrB1T,EAAAA,SAAS,EAAEH,IAAI;EACf6F,EAAAA,SAAS,EAAEE,SAAS;EAAE;EACtBqC,EAAAA,WAAW,EAAErC,SAAS;EAAE;EACxB4gB,EAAAA,eAAe,EAAE5gB,SAAS;EAC1BwJ,EAAAA,UAAU,EAAExJ,SAAS;EACrBqB,EAAAA,UAAU,EAAErB,SAAS;EACrB4B,EAAAA,UAAU,EAAE5B,SAAS;EACrBiU,EAAAA,qBAAqB,EAAEjU,SAAS;EAChCL,EAAAA,cAAc,EAAEK,SAAS;EACzB4L,EAAAA,YAAY,EAAE5L,SAAS;EACvB+L,EAAAA,SAAS,EAAE/L,SAAS;EACpB2S,EAAAA,qBAAqB,EAAE3S,SAAS;EAChCwH,EAAAA,UAAU,EAAE,UAAU;EACtBnE,EAAAA,eAAe,EAAE,GAAG;EAAE;EACtB;EACA;EACAqF,EAAAA,GAAG,EAAE1I,SAAS;EAAE;EAChB6U,EAAAA,SAAS,EAAE,KAAK;EAAE;EAClBgM,EAAAA,UAAU,EAAE,IAAI;EAChBxX,EAAAA,eAAe,EAAE,KAAK;EACtBjG,EAAAA,KAAK,EAAE,IAAI;EAAE;EACbic,EAAAA,aAAa,EAAE,GAAG;EAAE;EACpB7U,EAAAA,QAAQ,EAAE,CAAC;EACX0U,EAAAA,cAAc,EAAE,IAAA;EACpB,CAAC,CAAA,CAAA;EAwlCLhQ,YAAY,CAACP,QAAQ,CAACoM,YAAY,EAAE,MAAM,CAAC;;;;;;;;;;"}